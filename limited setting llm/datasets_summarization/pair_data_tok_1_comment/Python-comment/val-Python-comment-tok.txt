Function to convert centimeters to pixels
Driver Code
Method that returns the corresponding output by taking the given inputs .
If this condition is satisfied , value of M is invalid
Check if index K is valid
Loop to perform M operations
Creating a temporary list
Traversing the array
Calculate XOR values of adjacent elements
Adding this value to the temporary list
Update the original array
Getting value at index K
Number of elements
Given array arr [ ]
Function Call
Function to find the K consecutive elements with a sum equal to N
Iterate over [ 2 , INF ]
Store the sum
If the sum exceeds N then break the loop
Common difference should be divisible by number of terms
Print value of i & return
Print " - 1" if not possible to break N
Given N
Function call
Python3 program to find two coprime divisors of a given number such that both are greater than 1
Function which finds the required pair of divisors of N
We iterate upto sqrt ( N ) as we can find all the divisors of N in this time
If x is a divisor of N keep dividing as long as possible
We have found a required pair
No such pair of divisors of N was found , hence print - 1
Sample example 1
Sample example 2
Python3 program for the above approach
Array to store all prime less than and equal to MAX .
Function for Sieve of Sundaram
Boolean Array
Mark all numbers which do not generate prime number by 2 * i + 1
Since 2 is a prime number
Print remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .
Function that returns true if n is a Wasteful number
Count digits in original number
Count all digits in prime factors of N pDigit is going to hold this value .
Count powers of p in n
If primes [ i ] is a prime factor ,
Count the power of prime factors
Add its digits to pDigit
Add digits of power of prime factors to pDigit .
If n != 1 then one prime factor still to be summed up
If digits in prime factors is more than digits in original number then return true . Else return false .
Function to print Wasteful Number before N
Iterate till N and check if i is wastefull or not
Precompute prime numbers upto 10 ^ 6
Function Call
Function to print the Nth Hexanacci number
Driver code
Function to print the Nth term of the Hexanacci number
Initialize first five numbers to base cases
declare a current variable
Loop to add previous five numbers for each number starting from 5 and then assign first , second , third , fourth fifth to second , third , fourth , fifth and curr to sixth respectively
Driver code
Function to find the smallest number whose sum of digits is also N
Driver code
Function to check if a number is composite .
Corner cases
This is checked so that we can skip the middle five numbers in the below loop
This function stores all Composite numbers less than N
Function to calculate the Compositorial of n
Multiply first n composite number
Driver code
Vector to store all the composite less than N
Initializing the PowerArray with all 0 's
Function to find the powers of N that add up to K
Initializing the counter
Executing the while loop until K is greater than 0
If K % N == 1 , then the power array is incremented by 1
Checking if any power is occurred more than once
For any other value , the sum of powers cannot be added up to K
Printing the powers of N that sum up to K
Driver code
Python 3 Program to find the value 1 ^ K + 2 ^ K + 3 ^ K + . . + N ^ K
Function to find value of 1 ^ K + 2 ^ K + 3 ^ K + . . + N ^ K
Initialise sum to 0
Find the value of pow ( i , 4 ) and then add it to the sum
Return the sum
Drives Code
Function call to find the sum
Function to return the count of indices that satisfy the given condition
To store the result
To store the current maximum Initialized to 0 since there are only positive elements in the array
i is a valid index
Update the maximum so far
Increment the counter
Driver code
Binary representation of the digits
Function to return the maximum frequency of s modulo with a power of 2
Store the binary representation
Convert the octal to binary
Remove the LSB
If there is 1 in the binary representation
Find the number of zeroes in between two 1 's in the binary representation
Driver code
Python 3 implementation of the approach
Function for Sieve of Eratosthenes
Function to print all the prime numbers with d digits
Range to check integers
For every integer in the range
If the current integer is prime
Driver code
Generate primes
Function to find number of cells in the table contains X
Driver Code
Function call
Function to find the maximum possible value of the minimum value of the modified array
To store minimum value of array
To store sum of elements of array
Solution is not possible
zero is the possible value
minimum possible value
maximum possible value
to store a required answer
Binary Search
If mid is possible then try to increase required answer
If mid is not possible then decrease required answer
Return required answer
Driver Code
Function to print the desired Alphabet N Pattern
Declaring the values of Right , Left and Diagonal values
Main Loop for the rows
For the left Values
Spaces for the diagonals
Condition for the diagonals
Spaces for the Right Values
For the right values
Driver Code
Size of the Pattern
Calling the function to print the desired Pattern
Function to check if sum of digits of a number divides it
Calculate sum of all of digits of N
Driver Code
Function to calculate the sum of numbers divisible by 3 or 4
Function to find next greater number than N with exactly one bit different in binary representation of N
It is guaranteed that there is a bit zero in the number
If the shifted bit is zero then break
increase the bit shift
increase the power of 2
set the lowest bit of the number
Driver code
display the next number
Function to return the count of the total number of ways to cover the distance with 1 , 2 and 3 steps
Base conditions
To store the last three stages
Find the numbers of steps required to reach the distance i
Return the required answer
Driver code
Python3 program for the above approach
Function to find the maximum value
Dp table
Fill the dp in bottom up manner
Maximum of the three sections
Maximum of the first section
Maximum of the second section
Maximum of the third section
If we choose element from section 1 , we cannot have selection from same section in adjacent rows
Print the maximum sum
Driver code
Function to find the total palindromic odd Length sub - sequences
dp array to store the number of palindromic subsequences for 0 to i - 1 and j + 1 to n - 1
We will start with the largest distance between i and j
For each Len , we fix our i
For this i we will find our j
Base cases
If the characters are equal then look for out of bound index
We have only 1 way that is to just pick these characters
If the characters are not equal
Subtract it as we have counted it twice
We have just 1 palindrome sequence of Length 1
Else total ways would be sum of dp [ i - 1 ] [ i + 1 ] , that is number of palindrome sub - sequences from 1 to i - 1 + number of palindrome sub - sequences from i + 1 to n - 1
Driver code
Function to return the number of chicks on the nth day
Size of dp [ ] has to be at least 6 ( 1 - based indexing )
Every day current population will be three times of the previous day
Manually calculated value
From 8 th day onwards
Chick population decreases by 2 / 3 everyday . For 8 th day on [ i - 6 ] i . e 2 nd day population was 3 and so 2 new born die on the 6 th day and so on for the upcoming days
Driver code
Function to return the number of chicks on the nth day
Driver code
Python3 implementation of the approach
2d array to store states of dp
Array to determine whether a state has been solved before
Function to return the minimum steps required
Base cases
If a state has been solved before it won 't be evaluated again
Recurrence relation
Driver code
Python3 program to implement above approach
2d array to store states of dp
array to determine whether a state has been solved before
Function to find the minimum number of steps to reach the end of matrix
base cases
if a state has been solved before it won 't be evaluated again.
recurrence relation
Driver Code
A memoization based program to find maximum treasure that can be collected .
k is current index and col is previous color .
base case
we have two options either visit current city or skip that
check if color of this city is equal to prev visited city
return max of both options
Driver code
Function to print the N - th tetranacci number
base cases
Driver code
Function to calculate the sum from 0 th position to ( n - 2 ) th position
copy the element of original array to dp [ ]
find the maximum element in the array
start from 2 nd to n - 1 th pos
traverse for all pairs bottom - up approach
dp - condition
find maximum sum
return the maximum
Function to find the maximum sum from 1 st position to n - 1 - th position
Traverse from third to n - th pos
bootom - up approach
dp condition
find max sum
return max
Driver Code
Returns value of Permutation Coefficient P ( n , k )
Calculate value of Permutation Coefficient in bottom up manner
Base cases
Calculate value using previously stored values
This step is important as P ( i , j ) = 0 for j > i
Driver Code
Returns value of Permutation Coefficient P ( n , k )
base case
Calculate value factorials up to n
P ( n , k ) = n ! / ( n - k ) !
Driver Code
Returns true if there is a subset of set [ ] with sun equal to given sum
Base Cases
If last element is greater than sum , then ignore it
else , check if sum can be obtained by any of the following ( a ) including the last element ( b ) excluding the last element
Driver code
Implementation of Z - algorithm for linear time pattern searching
Function to get the count of the cyclic permutations of b that given 0 when XORed with a
concatenate b with b
new b now contains all the cyclic permutations of old b as it 's sub-strings
concatenate pattern with text
Fill z array used in Z algorithm
pattern occurs at index i since z value of i equals pattern length
Driver code
Function to find lexicographically smallest subsequence of size K
Length of string
Stores the minimum subsequence
Traverse the string S
If the stack is empty
Iterate till the current character is less than the the character at the top of stack
If stack size is < K
Push the current character into it
Stores the resultant string
Iterate until stack is empty
Reverse the string
Print the string
Driver Code
Python3 program to Check if the given is right to left diagonal or not
Function to check if the given is right to left diagonal or not
Iterate over string
If character is not same as the first character then return false
Driver Code
Given String str
Function Call
Function for checking string
Check if the string can be split into substrings of K length only
Compute the sum of first substring of length K
Compute the sum of remaining substrings
Check if sum is equal to that of the first substring
Since all sums are not equal , return False
All sums are equal , Return true
All substrings cannot be of size K
Driver code
Function to maximize the sum of the count of zeros and ones in the left and right substring
Count the total numbers of ones in str
To store the count of zeros and ones while traversing string
Iterate the given and update the maximum sum
Update the maximum Sum
Driver Code
Given binary string
Function call
Function to return the length of the longest substring such that no three consecutive characters are same
If the length of the given string is less than 3
Initialize temporary and final ans to 2 as this is the minimum length of substring when length of the given string is greater than 2
Traverse the string from the third character to the last
If no three consecutive characters are same then increment temporary count
Else update the final ans and reset the temporary count
Driver code
Function to return the number of ways of removing a sub - string from s such that all the remaining characters are same
To store the count of prefix and suffix
Loop to count prefix
Loop to count suffix
First and last characters of the string are same
Otherwise
Driver Code
Function to create prefix array
Function to return the result of the query
Driver Code
Query 1
Query 2
Function to find the final direction
if count is positive that implies resultant is clockwise direction
if count is negative that implies resultant is anti - clockwise direction
Driver code
Function to check if both the case follow the same order
Traverse the string
Store both lowercase and uppercase in two different strings
transfor lowerStr to uppercase
Driver Code
Function to move string character
changed string
iterate for every characters
ASCII value
store the duplicate
if k - th ahead character exceed 'z
print the new string
driver code
'' function call
Function to check if the character x is a vowel or not
Returns the updated string formed after removing all the Sandwiched Vowels from the given string
string to store the Updated String after removing the Sandwiched Vowels
traverse the string from left to right
if the current character is the first or the last character of the string then , this needs to be appended to the updatedString , since the corner alphabet irrespective of it being a vowel or a consonant , is never 'Sandwiched
Check if the current character of the string is a vowel and both the previous and the next characters are consonants , if so then this is a sandwiched vowel , thus is ignored and not appended to the updated string
if this character is not a sandwiched Vowel append it to the updated String
Driver Code
Remove all the Sandwitched Vowels
A Binary Tree node
A recursive function to print the paths whose maximum element is greater than or equal to K .
If the current node value is greater than or equal to k , then all the subtrees following that node will get printed , flag = 1 indicates to print the required path
If the leaf node is encountered , then the path is printed if the size of the path vector is greater than 0
Append the node to the path vector
Recur left and right subtrees
Backtracking to return the vector and print the path if the flag is 1
Function to initialize the variables and call the utility function to print the paths with maximum values greater than or equal to K
Initialize flag
ans is used to check empty condition
Call function that print path
If the path doesn 't exist
Driver Code
Constructing the following tree : 10 / \ 5 8 / \ / \ 29 2 1 98 / \ 20 50
Function to find N - th tridecagonal number
Formula to calculate nth tridecagonal number
Driver Code
Function to find total possible numbers with n digits and weight w
When Weight of an integer is Positive
Subtract the weight from 9
When weight of an integer is negative
add the weight to 10 to make it positive
number of digits in an integer and w as weight
print the total possible numbers with n digits and weight w
Python program to find the maximum height of Pyramidal Arrangement of array values
Just checking whether ith level is possible or not if possible then we must have atleast ( i * ( i + 1 ) ) / 2 elements in the array
updating the result value each time
otherwise we have exceeded n value
Driver Code
Python3 code to find k - th element in the Odd - Even sequence .
insert all the odd numbers from 1 to n .
insert all the even numbers from 1 to n .
Driver code
Python3 program to find factorial of given number
single line to find factorial
Driver Code
calculate nth pell number
driver function
Returns true if n - th Fibonacci number is multiple of 10.
Driver Code
A function to count all odd prime factors of a given number n
Eliminate all even prime factor of number of n
n must be odd at this point , so iterate for only odd numbers till sqrt ( n )
if i divides n , then start counting of Odd divisors
If n odd prime still remains then count it
Driver program to test above function
Python3 program to find the nearest prime to n .
array to store all primes less than 10 ^ 6
Utility function of Sieve of Sundaram
In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x
This array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j
eliminate indexes which does not produce primes
Since 2 is a prime number
Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .
modified binary search to find nearest prime less than N
base condition is , if we are reaching at left corner or right corner of primes [ ] array then return that corner element because before or after that we don 't have any prime number in  primes array
now if n is itself a prime so it will be present in primes array and here we have to find nearest prime less than n so we will return primes [ mid - 1 ]
now if primes [ mid ] < n and primes [ mid + 1 ] > n that means we reached at nearest prime
Driver Code
Function to find factorial of given number
Driver Code
Unsets the rightmost set bit of n and returns the result
Driver Code
function to count maximum XOR value for a triplet
set is used to avoid repetitions
store all possible unique XOR value of pairs
store maximum value
Driver code
Python library for binary search
Print all elements of range [ low , high ] that are not present in arr [ 0. . n - 1 ]
Do binary search for ' low ' in sorted array and find index of first element which either equal to or greater than low .
Start from the found index and linearly search every range element x after this index in arr [ ]
If x doesn 't math with current element  print it
If x matches , move to next element in arr [ ]
Move to next element in range [ low , high ]
Print range elements thar are greater than the last element of sorted array .
Driver code
Print all elements of range [ low , high ] that are not present in arr [ 0. . n - 1 ]
Create boolean list of size high - low + 1 , each index i representing wether ( i + low ) th element found or not .
if ith element of arr is in range low to high then mark corresponding index as true in array
Traverse through the range and print all elements whose value is false
Driver Code
Print all elements of range [ low , high ] that are not present in arr [ 0. . n - 1 ]
Insert all elements of arr [ ] in set
Traverse through the range and print all missing elements
Driver Code
Returns k - th missing element . It returns - 1 if no k is more than number of missing elements .
insert all elements of given sequence b [ ] .
Traverse through increasing sequence and keep track of count of missing numbers .
Driver code
''Function to find the minimum number of string required to generate the original string
'' Stores the frequency of each  character of String S
'' Stores the frequency of each  character of String S
'' Count unique characters in S
'' If unique characters is greater  then N, then return -1
'' Otherwise
'' Perform Binary Search
'' Find the value of mid
'' Iterate over the range  [0, 26]
'' If the amount[i] is  greater than 0
'' Update the ranges
'' Find the resultant string
Generate the subsequence
' ' ▁ If ▁ the ▁ length ▁ of ▁ resultant ▁ ▁ string ▁ is ▁ less ▁ than ▁ N ▁ than ▁ ▁ add ▁ a ▁ character ▁ ' a ' 
'' Print the string
''Driver code
This function prints the first repeating element in arr [ ]
Initialize index of first repeating element
Creates an empty hashset
Traverse the input array from right to left
If element is already in hash set , update Min
Else add element to hash set
Print the result
Driver Code
This function prints the first repeating element in arr [ ]
This will set k = 1 , if any repeating element found
max = maximum from ( all elements & n )
Array a is for storing 1 st time occurence of element initialized by 0
Store 1 in array b if element is duplicate initialized by 0
Duplicate element found
Storing 1 st occurence of arr [ i ]
Trace array a & find repeating element with min index
Driver code
Returns k - th distinct element in arr .
Check if current element is present somewhere else .
If element is unique
Driver Code
''Function to count subarrays having equal count of 0s and 1s with all 0s and all 1s grouped together
'' Stores the count
'' Initialize cur with first element
'' If the next element is same  as the current element
'' Increment count
'' Update curr
'' Iterate over the array count
'' Consider the minimum
''Given arr[]
''Function Call
''Tree node
''Function to return new tree node
''Function to check if the tree is even-odd tree
'' Stores nodes of each level
'' Store the current level  of the binary tree
'' Traverse until the  queue is empty
'' Stores the number of nodes  present in the current level
'' Check if the level  is even or odd
'' Add the nodes of the next  level into the queue
'' Increment the level count
''Driver code
'' Construct a Binary Tree
'' Check if the binary tree  is even-odd tree or not
Python3 program to implement the above approach
Size of the array
Stores the frequency of array elements
Find the highest frequency in the array
Increase count of max frequent element
If no repetition is present
Find the maximum distance
Return the max distance
Driver Code
Python3 program to implement the above approach
Function to obtain the middle index of the range
Recursive function to get the sum of values in the given range from the array . The following are parameters for this function . st . Pointer to segment tree node . Index of current node in the segment tree ss & se . Starting and ending indexes of the segment represented by current node , i . e . , st [ node ] l & r . Starting and ending indexes of range query
If the segment of this node lies completely within the given range
Return maximum in the segment
If the segment of this node lies outside the given range
If segment of this node lies partially in the given range
Function to return the maximum in the range from [ l , r ]
Check for erroneous input values
Function to conSegment Tree for the subarray [ ss . . se ]
For a single element
Otherwise
Function to conSegment Tree from the given array
Height of Segment Tree
Maximum size of Segment Tree
Allocate memory
Fill the allocated memory
Return the constructed Segment Tree
Driver Code
Build the Segment Tree from the given array
Function to calculate the count
Sorting the list using built in function
Traversing through the elements
Counting frequncy of each elements
Adding the contribution of the frequency to the answer
Driver Code
Print the count
Function to calculate the answer
Finding the maximum of the array
Creating frequency array With initial value 0
Traversing through the array
Counting frequency
Traversing through the frequency array
Calculating answer
Driver Code
Function calling
This function Prints the starting and ending indexes of the largest subarray with equal number of 0 s and 1 s . Also returns the size of such subarray .
Pick a starting point as i
Consider all subarrays starting from i
If this is a 0 sum subarray , then compare it with maximum size subarray calculated so far
Driver program to test above functions
Function to return the maximum element
If there is only one element left
Find mid
Check if mid reaches 0 , it is greater than next element or not
Check if mid itself is maximum element
Decide whether we need to go to the left half or the right half
Driver code
Function to perform Ternary Search
Find mid1 and mid2
Check if key is at any mid
Since key is not present at mid , Check in which region it is present Then repeat the search operation in that region
key lies between l and mid1
key lies between mid2 and r
key lies between mid1 and mid2
key not found
Get the list Sort the list if not sorted
Starting index
Length of list
Key to be searched in the list
Search the key using ternary search
Print the result
Key to be searched in the list
Search the key using ternary search
Print the result
function to print the majorityNumber
Driver Code
Returns index of key in arr [ l . . h ] if key is present , otherwise returns - 1
If arr [ l ... mid ] is sorted
As this subarray is sorted , we can quickly check if key lies in half or other half
If key not lies in first half subarray , Divide other half into two subarrays , such that we can quickly check if key lies in other half
If arr [ l . . mid ] is not sorted , then arr [ mid ... r ] must be sorted
Driver program
Python program to find minimum element in a sorted and rotated array
This condition is needed to handle the case when array is not rotated at all
If there is only one element left
Find mid
Check if element ( mid + 1 ) is minimum element . Consider the cases like [ 3 , 4 , 5 , 1 , 2 ]
Check if mid itself is minimum element
Decide whether we need to go to left half or right half
Driver program to test above functions
Function to find minimum element
Driver code
Python3 program to find k - th absolute difference between two elements
returns number of pairs with absolute difference less than or equal to mid .
Upper bound returns pointer to position of next higher number than a [ i ] + mid in a [ i . . n - 1 ] . We subtract ( a + i + 1 ) from this position to count
Returns k - th absolute difference
Sort array
Minimum absolute difference
Maximum absolute difference
Do binary search for k - th absolute difference
Driver code
Python program to find smallest and second smallest elements
Function to print first smallest and second smallest elements
There should be atleast two elements
If current element is smaller than first then update both first and second
If arr [ i ] is in between first and second then update second
Driver function to test above function
LCM of given range queries using Segment Tree
allocate space for tree
declaring the array globally
Function to return gcd of a and b
utility function to find lcm
Function to build the segment tree Node starts beginning index of current subtree . start and end are indexes in arr [ ] which is global
If there is only one element in current subarray
build left and right segments
build the parent
Function to make queries for array range ) l , r ) . Node is index of root of current segment in segment tree ( Note that indexes in segment tree begin with 1f or simplicity ) . start and end are indexes of subarray covered by root of current segment .
Completely outside the segment , returning 1 will not affect the lcm ;
completely inside the segment
partially inside
Driver Code
initialize the array
build the segment tree
Now we can answer each query efficiently Print LCM of ( 2 , 5 )
Print LCM of ( 5 , 10 )
Print LCM of ( 0 , 10 )
Python program for the above approach
check the first character of the string if it is ' * ' then 9 ways
traverse the string
If s [ i ] = = ' * ' there can be 9 possible values of *
If previous character is 1 then words that can be formed are K ( 11 ) , L ( 12 ) , M ( 13 ) , N ( 14 ) O ( 15 ) , P ( 16 ) , Q ( 17 ) , R ( 18 ) , S ( 19 )
If previous character is 2 then the words that can be formed are U ( 21 ) , V ( 22 ) , W ( 23 ) , X ( 24 ) Y ( 25 ) , Z ( 26 )
If the previous digit is * then all 15 2 - digit characters can be formed
taking the value from previous step
If previous character is 1 then the i - 1 th character and ith character can be decoded in a single character therefore , adding dp [ i - 1 ] .
If previous character is 2 and ith character is less than 6 then the i - 1 th character and ith character can be decoded in a single character therefore , adding dp [ i - 1 ] .
If previous character is * then it will contain the above 2 cases
Driver code
Function to count the number of ways to divide the array into two subsets and such that the difference between their sums is equal to diff
Store the sum of the set S1
Initializing the matrix
Number of ways to get sum using 0 elements is 0
Number of ways to get sum 0 using i elements is 1
Traverse the 2D array
If the value is greater than the sum store the value of previous state
Return the result
Driver Code
Given Input
Function Call
Python3 program for above approach
Function to calculate probability that the sum of numbers on N throws of dice lies between A and B
Base case
Add the probability for all the numbers between a and b
Driver Code
Print the answer
Python3 code for max sum with adjacent levels not allowed
A BST node
Recursive function to find the maximum sum returned for a root node and its grandchildren
Returns maximum sum with adjacent levels not allowed . This function mainly uses getSumAlternate ( )
We compute sum of alternate levels starting first level and from second level . And return maximum of two values .
Driver code
Returns true if there exists a subset with given sum in arr [ ]
The value of subset [ i % 2 ] [ j ] will be true if there exists a subset of sum j in arr [ 0 , 1 , ... . , i - 1 ]
A subset with sum 0 is always possible
If there exists no element no sum is possible
Driver code
Python 3 program to find maximum equilibrium sum .
Function to find maximum equilibrium sum .
Driver Code
Function to find maximum equilibrium sum .
Array to store prefix sum .
Array to store suffix sum .
Variable to store maximum sum .
Calculate prefix sum .
Calculate suffix sum and compare it with prefix sum . Update ans accordingly .
Driver Code
Python3 program to find maximum equilibrium sum .
Function to find maximum equilibrium sum .
Driver code
Function to find Majority element in an array
sentinels
update maxCount if count of current element is greater
if maxCount is greater than n / 2 return the corresponding element
Driver code
Function calling
Function to find the candidate for Majority
Function to check if the candidate occurs more than n / 2 times
Function to print Majority Element
Find the candidate for Majority
Print the candidate if it is Majority
Driver code
Function call
Python3 program for finding out majority element in an array
Driver code
Function calling
Function to find Majority element in an array it returns - 1 if there is no majority element
sort the array in O ( nlogn )
increases the count if the same element occurs otherwise starts counting new element
sets maximum count and stores maximum occured element so far if maximum count becomes greater than n / 2 it breaks out setting the flag
returns maximum occured element if there is no such element , returns - 1
Driver code
Function calling
Returns true if there is a subset of set [ ] with sum equal to given sum
The value of subset [ i ] [ j ] will be true if there is a subset of set [ 0. . j - 1 ] with sum equal to i
If sum is 0 , then answer is true
If sum is not 0 and set is empty , then answer is false
Fill the subset table in bottom up manner
uncomment this code to print table
Driver code
Taking the matrix as globally
Check if possible subset with given sum is possible or not
If the sum is zero it means we got our expected sum
If the value is not - 1 it means it already call the function with the same value . it will save our from the repetition .
if the value of a [ n - 1 ] is greater than the sum . we call for the next value
Here we do two calls because we don ' t ▁ know ▁ which ▁ value ▁ is ▁ ▁ full - fill ▁ our ▁ criteria ▁ ▁ that ' s why we doing two calls
Driver Code
Python3 program for the above approach
Function to implement fast exponentiation
Function to return the value for powers of 2
Function to convert N into binary
To store binary representation
Iterate each digit of n
Return binary representation
Function to find difference in bits
Get binary representation
total number of bit differences from 0 to N
Iterate over each binary bit
If current bit is '1' then add the count of current bit
Given Number
Function Call
Function to return the maximum length of the required prefix
Array to store the frequency of each element of the array
Iterating for all the elements
Update the frequency of the current element i . e . v
Sorted positive values from counts array
If current prefix satisfies the given conditions
Return the maximum length
Driver code
Returns the gcd after all updates in the array
Function to calculate gcd of onine queries
Stores the gcd of the initial array elements
calculates the gcd
performing online queries
index is 1 based
divide the array element
calculates the current gcd
Print the gcd after each step
Driver code
Python 3 implementation of the approach
stores whether the number is prime or not
stores the count of prime numbers less than or equal to the index
create the sieve
Create a boolean array " prime [ 0 . . n ] " and initialize all the entries as true . A value in prime [ i ] will finally be false if ' i ' is Not a prime , else true
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
stores the prefix sum of number of primes less than or equal to 'i
Driver code
create the sieve
' l ' and ' r ' are the lower and upper bounds of the range
get the value of count
display the count
Python 3 Program to find the area of the circle inscribed within the rectangle which in turn is inscribed in a semicircle
Function to find the area of the circle
radius cannot be negative
area of the circle
Driver code
Python 3 program to count almost prime numbers from 1 to n
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Function to count almost prime numbers from 1 to n
to store required answer
6 is first almost prime number
to count prime factors
if it is perfect square
if I is almost prime number
Driver Code
Returns sum of digits of x
Returns closest number to x in terms of 9 's
Driver Code
Function to check whether ( 2 ^ p - 1 ) is prime or not .
generate the number
First number of the series
Generate the rest ( p - 2 ) terms of the series
now if the ( p - 1 ) the term is 0 return true else false .
Check whetherr 2 ^ ( p - 1 ) is prime or not .
Function to detect prime number here we have used sieve method https : www . geeksforgeeks . org / sieve - of - eratosthenes / to detect prime number
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
We have made array till 2 * n + 1 so that we can check prime number till that and conclude about sophie german prime .
checking every i whether it is sophie german prime or not .
Driver Code
calculating u mentioned in the formula
calculating factorial of given number n
Number of values given
y [ ] [ ] is used for difference table with y [ ] [ 0 ] used for input
Calculating the central difference table
Displaying the central difference table
value to interpolate at
Initializing u and sum
k is origin thats is f ( 0 )
if ( ( n % 2 ) > 0 ) : origin for odd
k = int ( n / 2 - 1 ) ; origin for even
Solving using bessel 's formula
A simple Python 3 program to check if n - th Fibonacci number is multiple of 10.
Returns true if n - th Fibonacci number is multiple of 10.
Driver code
function which checks whether a number is a power of 2
base cases '1' is the only odd number which is a power of 2 ( 2 ^ 0 )
all other odd numbers are not powers of 2
recursive function call
Driver Code
True
False
Function to check if x is power of 2
First x in the below expression is for the case when x is 0
Driver code
Function to check if x is power of 2
Driver code
Function to find the nearest power of 2
The number
If already a power of 2
Find the next power of 2
Function to find the memory used
Sum of array
Traverse and find the sum of array
Function call to find the nearest power of 2
Driver Code
Python3 code to toggle k - th bit of n
Driver code
Python program to find smallest power of 2 greater than or equal to n
First n in the below condition is for the case where n is 0
Driver Code
Function to return the GCD of A and B
Function to return the LCM of A and B
Function to return the Kth element from the required set if it a multiple of A
Start and End for Binary Search
If no answer found return - 1
Inclusion and Exclusion
Multiple should be smaller
Multiple should be bigger
Function to return the Kth element from the required set if it a multiple of B
Start and End for Binary Search
If no answer found return - 1
Inclusion and Exclusion
Multiple should be smaller
Multiple should be bigger
Function to return the Kth element from the required set if it a multiple of C
Start and End for Binary Search
If no answer found return - 1
Inclusion and Exclusion
Multiple should be smaller
Multiple should be bigger
Function to return the Kth element from the set of multiples of A , B and C
Apply binary search on the multiples of A
If the required element is not a multiple of A then the multiples of B and C need to be checked
If the required element is neither a multiple of A nor a multiple of B then the multiples of C need to be checked
Driver code
Function to sort the array
Iterator < Integer > index = arr . iterator ( ) ;
Driver Code
Function Call
Function to print array element
Traverse the array
Function to sort the array in O ( N )
Traverse the array
If the current element is at correct position
Else swap the current element with it 's correct position
Swap the value of arr [ i ] and arr [ arr [ i ] - 1 ]
Driver code
Function call to sort the array
Function call to print the array
Function to find the maximum value
base condition
K elements already reduced to half of their weight
Dont include item
If weight of the item is less than or equal to the remaining weight then include the item
Return the maximum of both cases
If the weight reduction to half is possible
Skip the item
Include item with full weight if weight of the item is less than the remaining weight
Include item with half weight if half weight of the item is less than the remaining weight
Return the maximum of all 3 cases
Driver Code
Python3 program to find the size of the minimum dominating set of the tree
Definition of a tree node
Helper function that allocates a new node
DP array to precompute and store the results
minDominatingSettion to return the size of the minimum dominating set of the array
Base case
Setting the compulsory value if needed
Check if the answer is already computed
If it is compulsory to select the node
Choose the node and set its children as covered
If it is covered
If the current node is neither covered nor needs to be selected compulsorily
Store the result
Driver code
Constructing the tree
Python3 implementation of above approach
variable to store states of dp
To find the number of subsets with sum equal to 0. Since S can be negative , we will maxSum to it to make it positive
Base cases
Returns the value if a state is already solved
If the state is not visited , then continue
Recurrence relation
Returning the value
Driver Code
Function to print the N - th tetranacci number
Initialize first four numbers to base cases
declare a current variable
Loop to add previous four numbers for each number starting from 4 and then assign first , second , third to second , third , fourth and curr to fourth respectively
Driver code
A recursive function used by countWays
Driver code
A recursive function used by countWays
declaring three variables and holding the ways for first three stairs
d = 0 fourth variable
starting from 4 as already counted for 3 stairs
Driver program to test above functions
initializing with 1 as sum 0 is always possible
loop to go through every element of the elements array
to change the value o all possible sum values to True
If target is possible return True else False
Driver code
Returns maximum amount of task that can be done till day n
If n is less than equal to 0 , then no solution exists
Determines which task to choose on day n , then returns the maximum till that day
Driver Code
Python3 program for the above approach
Function to find the Kth character after X days
Variable to store the KthChar
Traverse the string
Convert char into int
Calculate characters
If K is less than sum than ans = str [ i ]
Return answer
Given Input
Function Call
Function to get no of set bits in binary representation of positive integer n
Function to return the count of valid pairs
Store frequency of number of set bits for s1
Store frequency of number of set bits for s2
Calculate total pairs
Return the count of valid pairs
Driver code
function to count substrings starting with character X and ending with character Y
to store total count of required substrings
to store count of character ' x ' up to the point the string ' str ' has been traversed so far
traverse ' str ' form left to right
if true , increment 'count_x
if true accumulate ' count _ x ' to 'tot_count
required count
Driver Code
Python3 program to count words in a given string
Returns number of words in string
word count
Scan all characters one by one
If next character is a separator , set the state as OUT
If next character is not a word separator and state is OUT , then set the state as IN and increment word count
Return the number of words
Driver Code
Function to find nth Enneadecagonal number
Formula to calculate nth Enneadecagonal number
Driver Code
Python3 Program to find the area of a circumscribed circle
Utility Function
Driver code
Function to find the type of the item given out according to the given rules
Stores the count of item given out at each step
Iterate to find the Nth day present is given out
Find the number of presents given on day is day * ( day + 1 ) / 2
Iterate over the type
Return the resultant type
Driver Code
Linked list Node
function to Check Linked List is sorted in descending order or not
Traverse the list till last Node and return False if a Node is smaller than or equal its next .
Driver Code
Function to find the maximum length continuos segment of character c after flipping at most K characters
Stores the maximum length
Stores the count of char 'c
Start of window
Remove the extra ' c ' from left
Increment the value of the left
Update the resultant maximum length of character ch
Function to find the maximum length of consecutive 0 s or 1 s by flipping at most K characters of the string
Print the maximum of the maximum length of 0 s or 1 s
Driver Code
Function to find minimum count of { 1 , 2 , 5 } valued coins required to make a change of all values in the range [ 1 , N ]
Number of 5 valueds coins required
Number of 1 valued coins required
Number of 2 valued coins required
Driver Code
Function to maximize count of 0 and 10 by replacing character ' ? ' to '0' or '1
Traverse the given String
If current character is '?
Given String
Function checks if a given is valid or not and prints the output
Boolean flag variable to mark if given is valid
Traverse the given string
If adjacent character differ by 1
If character ' a ' is followed by 4
Else flip the flag and break from the loop
Output according to flag variable
Driver Code
Given string
Function Call
Function to find the minimum number of changes of lane required
If there is a barrier , then add very large value
Add the minimum value to move forword with or without crossing barrier
Return the minimum value of dp [ 0 ] , dp [ 1 ] and dp [ 2 ]
Driver Code
Function to count number of ways to get given sum groups
Initialise dp array
Mark all 1 st row values as 1 since the mat [ 0 ] [ i ] is all possible sums in first row
Fix the ith row
Fix the sum
Iterate through all values of ith row
If sum can be obtained
Find the prefix sum of last row
Traverse each query
No of ways to form groups
Driver Code
Given N batches and K students
Given ratings
Function Call
Function to count permutations with K inversions
Store number of permutations with K inversions
If N = 1 only 1 permutation with no inversion
For K = 0 only 1 permutation with no inversion
Otherwise Update each dp state as per the reccurrance relation formed
Print final count
Driver Code
Given N and K
Function Call
k is current index and col is previous color .
base case
check if color of this city is equal to prev visited city
return max of both options
Driver Code
Initially begin with color 0
Function to return the N - th tetranacci number
base cases
base cases
base cases
function to print the nth tetranacci number
Driver code
to store sum of every combination
if we have reached sufficient depth
find the product of combination
add the product into sum
recursion to produce different combination
function to print sum of products of all combination taken 1 - N at a time
creating temporary array for storing combination
call combination with r = i for combination taken i at a time
displaying sum
Driver Code
storing numbers from 1 - N in array
calling allCombination
Returns maximum amount of task that can be done till day n
An array task_dp that stores the maximum task done
If n = 0 , no solution exists
If n = 1 , high effort task on that day will be the solution
Fill the entire array determining which task to choose on day i
Driver code
Driver Code
Returns true if arr [ ] can be partitioned in two subsets of equal sum , otherwise false
calculate sum of all elements
initialize top row as true
initialize leftmost column , except part [ 0 ] [ 0 ] , as 0
fill the partition table in bottom up manner
uncomment this part to print table
Driver Code
Function call
Function to find the minimum operations required to get the given string after appending m or n characters from the end to the front of the string in each operation
Store the original string
Stores the count of operations
Traverse the string
Cut m letters from end
Add cut m letters to beginning
Update j
Check if strings are the same
Cut n letters from end
Add cut n letters to beginning
Update j
Check if strings are the same
Update the turn
Given string S
Function Call
Prints occurrences of txt [ ] in pat [ ]
Create lps [ ] that will hold the longest prefix suffix values for pattern
Preprocess the pattern ( calculate lps [ ] array )
Index for txt [ ] , index for pat [ ]
Mismatch after j matches
Do not match lps [ 0. . lps [ j - 1 ] ] characters , they will match anyway
Fills lps [ ] for given pattern pat [ 0. . M - 1 ]
Length of the previous longest prefix suffix
lps [ 0 ] is always 0
The loop calculates lps [ i ] for i = 1 to M - 1
( pat [ i ] != pat [ _len ] )
This is tricky . Consider the example . AAACAAAA and i = 7. The idea is similar to search step .
Returns count of rotations to get the same string back
Form a string excluding the first character and concatenating the string at the end
Convert the string to character array
Use the KMP search algorithm to find it in O ( N ) time
Driver code
This function is for the starting state ( zeroth ) of DFA
On receiving ' T ' or ' t ' goto first state ( 1 )
This function is for the first state of DFA
On receiving ' T ' or ' t ' goto first state ( 1 )
On receiving ' H ' or ' h ' goto second state ( 2 )
else goto starting state ( 0 )
This function is for the second state of DFA
On receiving ' E ' or ' e ' goto third state ( 3 ) else goto starting state ( 0 )
This function is for the third state of DFA
On receiving ' T ' or ' t ' goto first state ( 1 ) else goto starting state ( 0 )
store length of stringing
Driver Code
Python3 implementation of the above approach .
Function for find from Disjoset algorithm
Function for the union from Disjoset algorithm
Function to check if one string can be converted to another .
All the characters are checked whether it 's either not replaced or replaced  by a similar character using a map.
To check if there are cycles . If yes , then they are not convertible . Else , they are convertible .
Function to initialize parent array for union and find algorithm .
Driver code
Python 3 implementation of the approach
Function to create Sieve to check primes
false here indicates that it is not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p , set them to non - prime
Function to print the prime frequency characters in the order of their occurrence
Function to create Sieve to check primes
To store the frequency of each of the character of the string
Update the frequency of each character
Traverse str character by character
If frequency of current character is prime
Driver code
Python code for the above approach
Function to check primes
Counting the frequency of all character using Counter function
Traversing string
Driver code
passing string to checkString function
Python3 implementation of the approach
Function to print the even frequency characters in the order of their occurrence
To store the frequency of each of the character of the stringing Initialize all elements of freq [ ] to 0
Update the frequency of each character
Traverse string character by character
If frequency of current character is even
Driver code
Function to check alphanumeric equality of both strings
variable declaration
Length of first string
Length of second string
To check each and every character of both string
If the current character of the first string is not an alphanumeric character , increase the pointer i
If the current character of the second string is not an alphanumeric character , increase the pointer j
if all alphanumeric characters of both strings are same , then return true
if any alphanumeric characters of both strings are not same , then return false
If current character matched , increase both pointers to check the next character
If not same , then return false
Function to print Equal or Unequal if strings are same or not
check alphanumeric equality of both strings
if both are alphanumeric equal , print Equal
otherwise print Unequal
Driver code
Function that answers all the queries
Length of the String
Number of queries
Prefix array
Iterate for all the characters
Increase the count of the character
Presum array for all 26 characters
Update the prefix array
Answer every query
Range
Iterate for all characters
Times the lowercase character j occurs till r - th index
Subtract the times it occurred till ( l - 1 ) th index
Max times it occurs
Print the answer
Driver Code
Function that return true if pre is a prefix of str
While there are characters to match
If characters differ at any position
str starts with pre
Function that return true if suff is a suffix of str
While there are characters to match
If characters differ at any position
str ends with suff
Function that returns true if str = a + b or str = b + a
str cannot be generated by concatenating a and b
If str starts with a i . e . a is a prefix of str
Check if the rest of the characters are equal to b i . e . b is a suffix of str
If str starts with b i . e . b is a prefix of str
Check if the rest of the characters are equal to a i . e . a is a suffix of str
Driver code
Python3 implementation of the approach
Function to print the odd frequency characters in the order of their occurrence
To store the frequency of each of the character of the string and Initialize all elements of freq [ ] to 0
Update the frequency of each character
Traverse str character by character
If frequency of current character is odd
Driver code
Function to return the minimum number of operations required
To store the indices of the last uppercase and the first lowercase character
Find the last uppercase character
Find the first lowercase character
If all the characters are either uppercase or lowercase
Count of uppercase characters that appear after the first lowercase character
Count of lowercase characters that appear before the last uppercase character
Return the minimum operations required
Driver Code
Python3 program to find the Sum of the all Betrothed numbers up to N
Function to find the Sum of the all Betrothed numbers
To store the Betrothed numbers
Calculate sum of number_1 's divisors
i = 2 because we don 't  want to include  1 as a divisor.
Sum all Betrothed numbers up to N
Driver Code
Function to find the probability
count occurence of 1
find probability
Driver code
Function to calculate the following series
Driver Code
Function to print the lexicographically the largest string obtained in process of obtaining a string containing first N lower case english alphabtes
Store the frequency of each character
Traverse the string S
Stores the characters which are not appearing in S
Stores the index of the largest character in the array V , that need to be replaced
Traverse the string , S
If frequency of S [ i ] is greater than 1 or it is outside the range
Decrement its frequency by 1
Update S [ i ]
Decrement j by 1
Traverse the string , S
Decrement its frequency by 1
Update S [ i ]
Increment l by 1
Return S
Given Input
Function Call
A Utility Function to check if a subarray can be palindromic by replacing less than half of the elements present in it
Stores frequency of array elements
Traverse the array
Update frequency of each array element
Iterator over the Map
If frequency of any element exceeds 1
If no repetition is found
Function to check and print if any subarray can be made palindromic by replacing less than half of its elements
Driver Code
Given array arr [ ]
Size of array
Function Call
Python3 program to implement the above approach
Function to find all Fibonacci numbers up to Max
Store all Fibonacci numbers upto Max
Stores previous element of Fibonacci sequence
Stores previous element of Fibonacci sequence
Insert prev into hashmap
Insert all the Fibonacci numbers up to Max
Insert curr into hashmap
Stores curr into temp
Update curr
Update prev
Function to find all Composite numbers up to Max
isPrime [ i ] : Stores if i is a prime number or not
Calculate all prime numbers up to Max using Sieve of Eratosthenes
If P is a prime number
Set all multiple of P as non - prime
Function to find the numbers which is both a composite and Fibonacci number
Stores the largest element of the array
Traverse the array arr [ ]
Update Max
isPrim [ i ] check i is a prime number or not
Stores all the Fibonacci numbers
Traverse the array arr [ ]
Current element is not a composite number
If current element is a Fibonacci and composite number
Print current element
Driver Code
Python3 program of the above approach
Function to find the key of the given number
Convert the integer to String
Iterate the num - string to get the result
Check if digit is even or odd
Iterate until odd sum is obtained by adding consecutive digits
Check if sum becomes odd
Add the result in ans
Assign the digit index to num string
If the number is odd
Iterate until odd sum is obtained by adding consecutive digits
Check if sum becomes even
Add the result in ans
assign the digit index to main numstring
Check if all digits are visited or not
Python3 implementation of the approach Function to search key in the given array
Function to search x in the given array
Last element of the array
Element to be searched is placed at the last index
Put the last element back
Driver code
Function to calculate maximum possible middle value of the array after deleting exactly k elements
Initialize answer as - 1
Calculate range of elements that can give maximum possible middle value of the array since index of maximum possible middle value after deleting exactly k elements from array will lie in between low and high
Find maximum element of the array in range low and high
since indexing is 1 based so check element at index i - 1
Return the maximum possible middle value of the array after deleting exactly k elements from the array
Driver Code
Python3 program to illustrate recursive approach to ternary search
Function to perform Ternary Search
Find the mid1 and mid2
Check if key is present at any mid
Since key is not present at mid , check in which region it is present then repeat the Search operation in that region
The key lies in between l and mid1
The key lies in between mid2 and r
The key lies in between mid1 and mid2
Key not found
Driver code
Get the array Sort the array if not sorted
Starting index
length of array
Key to be searched in the array
Search the key using ternarySearch
Print the result
Key to be searched in the array
Search the key using ternarySearch
Print the result
Function to find the minimum number of points
Number of points on the left of Y - axis .
Number of points on the right of Y - axis .
Number of points above X - axis .
Number of points below X - axis .
Driver Code
Function to count the maximum number of pair reductions possible on a given triplet
Convert them into an array
Stores count of operations
Sort the array
If the first two array elements reduce to 0
Apply the operations
Increment count
Print the maximum count
Given triplet
Python3 implementation of the approach
Function to return the sorted string
To store the frequencies of the lowercase and the uppercase characters in the given string
If current character is lowercase then increment its frequency in the lower [ ] array
Else increment in the upper [ ] array
Pointers that point to the smallest lowercase and the smallest uppercase characters respectively in the given string
For every character in the given string
If the current character is lowercase then replace it with the smallest lowercase character available
Decrement the frequency of the used character
Else replace it with the smallest uppercase character available
Decrement the frequency of the used character
Return the sorted string
Driver code
Python3 implementation to pr the character and its frequency in order of its occurrence
Function to print the character and its frequency in order of its occurrence
Size of the 'str
Initialize all elements of freq [ ] to 0
Accumulate frequency of each character in 'str
Traverse ' str ' from left to right
if frequency of character str [ i ] is not equal to 0
print the character along with its frequency
Update frequency of str [ i ] to 0 so that the same character is not printed again
Driver Code
Python3 program to reverse a string s = input ( )
Function to generate prime numbers using Sieve of Eratosthenes
If prime [ p ] is unchanged , then it is a prime
Update all multiples of p
Function to segregate the primes and non - primes
Generate all primes till 10 ^ 7
Initialize left and right
Traverse the array
Increment left while array element at left is prime
Decrement right while array element at right is non - prime
If left < right , then swap arr [ left ] and arr [ right ]
Swap arr [ left ] and arr [ right ]
Print segregated array
Driver code
Function Call
function to return max of left subtree height or right subtree height
calc height of left subtree ( In preorder left subtree is processed before right )
calc height of right subtree
Wrapper over findDepthRec ( )
Driver program to test above functions
Constructor to create a new node
To insert a new node in BST
if tree is empty return new node
if key is less then or greater then node value then recur down the tree
return the ( unchanged ) node pointer
function to find max value less then N
Base cases
If root 's value is smaller, try in  right subtree
If root 's key is greater, return  value from left subtree.
Driver code
creating following BST 5 / \ 2 12 / \ / \ 1 3 9 21 / \ 19 25
Python3 code to find the largest value smaller than or equal to N
To create new BST Node
To insert a new node in BST
If tree is empty return new node
If key is less then or greater then node value then recur down the tree
Return the ( unchanged ) node pointer
Function to find max value less then N
Start from root and keep looking for larger
If root is smaller go to right side
If root is greater go to left side
Driver code
Python 3 program to find maximum element in the path between two Nodes of Binary Search Tree . Create and return a pointer of new Node .
Constructor to create a new node
Insert a new Node in Binary Search Tree .
Return the maximum element between a Node and its given ancestor .
Traversing the path between ansector and Node and finding maximum element .
Return maximum element in the path between two given Node of BST .
Finding the LCA of Node x and Node y
Checking if both the Node lie on the left side of the parent p .
Checking if both the Node lie on the right side of the parent p .
Return the maximum of maximum elements occur in path from ancestor to both Node .
Driver Code
Creating the root of Binary Search Tree
Inserting Nodes in Binary Search Tree
Insertion in Threaded Binary Search Tree .
True if left pointer points to predecessor in Inorder Traversal
True if right pointer points to successor in Inorder Traversal
Insert a Node in Binary Threaded Tree
Searching for a Node with given value
Parent of key to be inserted
If key already exists , return
Update parent pointer
Moving on left subtree .
Moving on right subtree .
Create a new node
Returns inorder successor using rthread
If rthread is set , we can quickly find
Else return leftmost child of right subtree
Printing the threaded tree
Reach leftmost node
One by one print successors
Driver Code
Python3 program to find if a matrix is symmetric .
Initializing as both horizontal and vertical symmetric .
Checking for Horizontal Symmetry . We compare first row with last row , second row with second last row and so on .
Checking each cell of a column .
check if every cell is identical
Checking for Vertical Symmetry . We compare first column with last column , second xolumn with second last column and so on .
Checking each cell of a row .
check if every cell is identical
Driver code
Python3 program to replace each each element with maximum of GCD of row or column .
returning the greatest common divisor of two number
Finding GCD of each row and column and replacing with each element with maximum of GCD of row or column .
Calculating GCD of each row and each column in O ( mn ) and store in arrays .
Replacing matrix element
Driver Code
Python3 program for addition of two matrices
This function adds A [ ] [ ] and B [ ] [ ] , and stores the result in C [ ] [ ]
driver code
Python 3 program for subtraction of matrices
This function returns 1 if A [ ] [ ] and B [ ] [ ] are identical otherwise returns 0
Driver Code
Python program to check fixed point in an array using linear search
If no fixed point present then return - 1
Driver program to check above functions
Python program to check fixed point in an array using binary search
Return - 1 if there is no Fixed Point
Driver program to check above functions
Python 3 code to find maximum triplet sum
Initialize sum with INT_MIN
Driven code
This function assumes that there are at least three elements in arr [ ] .
sort the given array
After sorting the array . Add last three element of the given array
Driven code
This function assumes that there are at least three elements in arr [ ] .
Initialize Maximum , second maximum and third maximum element
Update Maximum , second maximum and third maximum element
Update second maximum and third maximum element
Update third maximum element
Driven code
Python3 code to linearly search x in arr [ ] . If x is present then return its location , otherwise return - 1
Driver Code
Function call
Python3 program for linear search
Run loop from 0 to right
If search_element is found with left variable
If search_element is found with right variable
If element not found
Driver code
Function call
The main function that sort the given string arr [ ] in alphabetical order
The output character array that will have sorted arr
Create a count array to store count of inidividul characters and initialize count array as 0
Store count of each character
Change count [ i ] so that count [ i ] now contains actual position of this character in output array
Build the output character array
Copy the output array to arr , so that arr now contains sorted characters
Driver program to test above function
The function that sorts the given arr [ ]
Driver program to test above function
Returns value of Binomial Coefficient C ( n , k )
Base Cases
Recursive Call
Driver Program to test ht above function
Python program for Optimized Dynamic Programming solution to Binomail Coefficient . This one uses the concept of pascal Triangle and less memory
since nC0 is 1
Compute next row of pascal triangle using the previous row
Driver Code
Python code for the above approach
Base case
C ( n , r ) = C ( n , n - r ) Complexity for this code is lesser for lower n - r
set smallest prime factor of each number as itself
set smallest prime factor of all even numbers as 2
Check if i is prime
All multiples of i are composite ( and divisible by i ) so add i to their prime factorization getpow ( j , i ) times
dictionary to store power of each prime in C ( n , r )
For numerator count frequency of each prime factor
Recursive division to find prime factorization of i
For denominator subtract the power of each prime factor
Recursive division to find prime factorization of i
Use ( a * b ) % mod = ( a % mod * b % mod ) % mod
pow ( base , exp , mod ) is used to find ( base ^ exp ) % mod fast
Driver code
Function to find binomial coefficient
Getting the modular inversion for all the numbers from 2 to r with respect to m here m = 1000000007
for 1 / ( r ! ) part
for ( n ) * ( n - 1 ) * ( n - 2 ) * ... * ( n - r + 1 ) part
Driver code
Returns true if arr [ ] can be partitioned in two subsets of equal sum , otherwise false
Calculate sum of all elements
Initialze the part array as 0
Fill the partition table in bottom up manner
the element to be included in the sum cannot be greater than the sum
check if sum - arr [ i ] could be formed from a subset using elements before index i
Drive code
Function call
Returns true if there is a subset of set [ ] with sun equal to given sum
Base Cases
If last element is greater than sum , then ignore it
else , check if sum can be obtained by any of the following ( a ) including the last element ( b ) excluding the last element
Driver code
Returns true if there is a subset of set [ ] with sun equal to given sum
The value of subset [ i ] [ j ] will be true if there is a subset of set [ 0. . j - 1 ] with sum equal to i
If sum is 0 , then answer is true
If sum is not 0 and set is empty , then answer is false
Fill the subset table in botton up manner
print table
Driver code
A recursive function that returns the optimal length string for N keystrokes
The optimal string length is N when N is smaller than
Initialize result
TRY ALL POSSIBLE BREAK - POINTS For any keystroke N , we need to loop from N - 3 keystrokes back to 1 keystroke to find a breakpoint ' b ' after which we will have Ctrl - A , Ctrl - C and then only Ctrl - V all the way .
If the breakpoint is s at b 'th  keystroke then the optimal string  would have length  (n-b-1)*screen[b-1];
Driver program
for the rest of the array we will rely on the previous entries to compute new ones
this function returns the optimal length string for N keystrokes
The optimal string length is N when N is smaller than 7
An array to store result of subproblems
Initializing the optimal lengths array for uptil 6 input strokes .
Solve all subproblems in bottom manner
Initialize length of optimal string for n keystrokes
For any keystroke n , we need to loop from n - 3 keystrokes back to 1 keystroke to find a breakpoint ' b ' after which we will have ctrl - a , ctrl - c and then only ctrl - v all the way .
if the breakpoint is at b 'th keystroke then  the optimal string would have length  (n-b-1)*screen[b-1];
Driver program
for the rest of the array we will rely on the previous entries to compute new ones
this function returns the optimal length string for N keystrokes
The optimal string length is N when N is smaller than 7
An array to store result of subproblems
Initializing the optimal lengths array for uptil 6 input strokes .
Solve all subproblems in bottom manner
for any keystroke n , we will need to choose between : - 1. pressing Ctrl - V once after copying the A ' s ▁ obtained ▁ by ▁ n - 3 ▁ keystrokes . ▁ ▁ 2 . ▁ pressing ▁ Ctrl - V ▁ twice ▁ after ▁ copying ▁ the ▁ A ' s obtained by n - 4 keystrokes . 3. pressing Ctrl - V thrice after copying the A 's  obtained by n-5 keystrokes.
Driver Code
for the rest of the array we will rely on the previous entries to compute new ones
Function to calculate x raised to the power y
Driver Code
Function to calculate x raised to the power y in O ( logn )
Python3 code for extended version of power function that can work for float x and negative y
Driver Code
Python3 program for the above approach
If x ^ 0 return 1
If we need to find of 0 ^ y
For all other cases
Driver Code
Returns the square root of n . Note that the function
We are using n itself as initial approximation This can definitely be improved
e decides the accuracy level
Driver program to test above function
Returns the new average after including x
Prints average of a stream of numbers
Driver Code
Returns the new average after including x
Prints average of a stream of numbers
Driver Code
Returns value of Binomial Coefficient C ( n , k )
since C ( n , k ) = C ( n , n - k )
Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- -- * 1 ]
Driver program to test above function
Python program to print prime factors
A function to print all prime factors of a given number n
Print the number of two 's that divide n
n must be odd at this point so a skip of 2 ( i = i + 2 ) can be used
while i divides n , print i ad divide n
Condition if n is a prime number greater than 2
Driver Program to test above function
The main function that prints all combinations of size r in arr [ ] of size n . This function mainly uses combinationUtil ( )
A temporary array to store all combination one by one
Print all combination using temprary array 'data[]  
arr [ ] -- -> Input Array data [ ] -- -> Temporary array to store current combination start & end -- -> Staring and Ending indexes in arr [ ] index -- -> Current index in data [ ] r -- -> Size of a combination to be printed
Current combination is ready to be printed , print it
replace index with all possible elements . The condition " end - i + 1 ▁ > = ▁ ▁ r - index " makes sure that including one element at index will make a combination with remaining elements at remaining positions
Driver Code
The main function that prints all combinations of size r in arr [ ] of size n . This function mainly uses combinationUtil ( )
A temporary array to store all combination one by one
Print all combination using temprary array 'data[]  
arr [ ] -- -> Input Array n -- -> Size of input array r -- -> Size of a combination to be printed index -- -> Current index in data [ ] data [ ] -- -> Temporary array to store current combination i -- -> index of current element in arr [ ]
Current cobination is ready , print it
When no more elements are there to put in data [ ]
current is included , put next at next location
current is excluded , replace it with next ( Note that i + 1 is passed , but index is not changed )
Driver Code
Returns count of all possible groups that can be formed from elements of a [ ] .
Create an array C [ 3 ] to store counts of elements with remainder 0 , 1 and 2. c [ i ] would store count of elements with remainder i
To store the result
Count elements with remainder 0 , 1 and 2
Case 3. a : Count groups of size 2 from 0 remainder elements
Case 3. b : Count groups of size 2 with one element with 1 remainder and other with 2 remainder
Case 4. a : Count groups of size 3 with all 0 remainder elements
Case 4. b : Count groups of size 3 with all 1 remainder elements
Case 4. c : Count groups of size 3 with all 2 remainder elements
Case 4. c : Count groups of size 3 with different remainders
Return total count stored in res
Driver program
First n in the below condition is for the case where n is 0
Driver Code
Driver Code
Finds next power of two for n . If n itself is a power of two then returns n
Driver program to test above function
Function to segregate 0 s and 1 s
Counts the no of zeros in arr
Loop fills the arr with 0 until count
Loop fills remaining arr space with 1
Function to print segregated array
Driver function
Function to put all 0 s on left and all 1 s on right
Initialize left and right indexes
Increment left index while we see 0 at left
Decrement right index while we see 1 at right
If left is smaller than right then there is a 1 at left and a 0 at right . Exchange arr [ left ] and arr [ right ]
driver program to test
Function to put all 0 s on left and all 1 s on right
Driver Code
Python program to check if we can make neighbors distinct .
dict used to count the frequency of each element occurring in the array
In this loop we count the frequency of element through map m
mx store the frequency of element which occurs most in array .
In this loop we calculate the maximum frequency and store it in variable mx .
By swapping we can adjust array only when the frequency of the element which occurs most is less than or equal to ( n + 1 ) / 2 .
Driver Code
For a given array arr [ ] , returns the maximum j a i such that arr [ j ] > arr [ i ]
driver code
For a given array arr , calculates the maximum j a i such that arr [ j ] > arr [ i ]
Create an array maxfromEnd
We store this as current answer and look for further larger number to the right side
Keeping a track of the maximum difference in indices
Python3 program to print sorted distinct elements .
Create a set using array elements
Print contents of the set .
Driver code
Function returns the minimum number of swaps required to sort the array This method is taken from below post https : www . geeksforgeeks . org / minimum - number - swaps - required - sort - array /
Create an array of pairs where first element is array element and second element is position of first element
Sort the array by array element values to get right position of every element as second element of pair .
To keep track of visited elements . Initialize all elements as not visited or false .
Initialize result
Traverse array elements
Already swapped and corrected or already present at correct pos
Find out the number of node in this cycle and add in ans
Move to next node
Update answer by adding current cycle .
Return result
Method returns minimum number of swap to mak array B same as array A
map to store position of elements in array B we basically store element to index mapping .
now we 're storing position  of array A elements  in array B.
Returing minimum swap for sorting in modified array B as final answer
Driver code
Function to find k - th missing element
interating over the array
check if i - th and ( i + 1 ) - th element are not consecutive
save their difference
check for difference and given k
if found
Input array
k - th missing element to be found in the array
calling function to find missing element
Function to find kth missing number
If the total missing number count is equal to k we can iterate backwards for the first missing number and that will be the answer .
To further optimize we check if the previous element ' s ▁ ▁ missing ▁ number ▁ count ▁ is ▁ equal ▁ ▁ to ▁ k . ▁ Eg : ▁ arr ▁ = ▁ [ 4,5,6,7,8 ] ▁ ▁ If ▁ you ▁ observe ▁ in ▁ the ▁ example ▁ array , ▁ ▁ the ▁ total ▁ count ▁ of ▁ missing ▁ numbers ▁ for ▁ all ▁ ▁ the ▁ indices ▁ are ▁ same , ▁ and ▁ we ▁ are ▁ ▁ aiming ▁ to ▁ narrow ▁ down ▁ the ▁ ▁ search ▁ window ▁ and ▁ achieve ▁ O ( logn ) ▁ ▁ time ▁ complexity ▁ which ▁ ▁ otherwise ▁ would ' ve been O ( n ) .
Else we return arr [ mid ] - 1.
Here we appropriately narrow down the search window .
In case the upper limit is - ve it means the missing number set is 1 , 2 , . . , k and hence we directly return k .
Else we find the residual count of numbers which we 'd then add to  arr[u] and get the missing kth number.
Return arr [ u ] + k
Driver Code
Function Call
Link list node
A utility function to print linked list
Function to create newNode in a linkedlist
Function to insert at beginning
Function to rearrange the odd and even nodes
Odd Value in Even Position Add pointer to current node in odd stack
Even Value in Odd Position Add pointer to current node in even stack
Swap Data at the top of two stacks
Driver code
Structure node
A utility function to print linked list
Function to create newNode in a linkedlist
Function to insert at beginning
Function to rearrange the odd and even nodes
Step 1 : Segregate even and odd nodes Step 2 : Split odd and even lists Step 3 : Merge even list into odd list
Step 1 : Segregate Odd and Even Nodes
Backup next pointer of temp
If temp is odd move the node to beginning of list
Advance Temp Pointer
Step 2 Split the List into Odd and even
End the odd List ( Make last node None )
Step 3 : Merge Even List into odd
While both lists are not exhausted Backup next pointers of i and j
ptr points to the latest node added
Advance i and j pointers
Odd list exhausts before even , append remainder of even list to odd .
The case where even list exhausts before odd list is automatically handled since we merge the even list into the odd list
Driver Code
Function to print the matrix
Iterate over the rows
Iterate over the columns
Print the value
Function to perform the swapping of matrix elements in clockwise manner
Stores the last row
Stores the last column
Perform the swaps
Function to rotate non - diagonal elements of the matrix K times in clockwise direction
Update K to K % 4
Iterate until K is positive
Iterate each up to N / 2 - th row
Iterate each column from i to N - i - 1
Check if the element at i , j is not a diagonal element
Perform the swapping
Print the matrix
Driver Code
Returns count of rotations to get the same string back .
tmp is the concatenated string .
substring from i index of original string size .
if substring matches with original string then we will come out of the loop .
Driver code
Python3 implementation to find elements that are a power of two
prefix [ i ] is going to store the number of elements which are a power of two till i ( including i ) .
Function to find the maximum range whose sum is divisible by M .
Calculate the prefix sum
Function to return the number of elements which are a power of two in a subarray
Driver code
Function to calculate the integral points inside a square
Driver Code
Function to find the next distinct digits number
Loop to find the distinct digits using hash array and the number of digits
Loop to find the most significant distinct digit of the next number
Condition to check if the number is possible with the same number of digits count
Condition to check if the desired most siginificant distinct digit is found
Loop to find the minimum next digit which is not present in the number
Computation of the number
Condition to check if the number is greater than the given number
Driver Code
Function to find a triplet ( A , B , C ) such that 3 * A + 5 * B + 7 * C is N
Iterate over the range [ 0 , N7 ]
Iterate over the range [ 0 , N5 ]
Find the value of A
If A is greater than or equal to 0 and divisible by 3
Otherwise , print - 1
Driver Code
Function to find the minimum time to visit all the cities such that both the person never meets
Initialize sum as 0
Find the maximum element
Traverse the array
Increment sum by arr [ i ]
Prmaximum of 2 * T and sum
Driver Code
Function Call
Function to find the lexicographically maximum string by reversing substrings having even numbers of 1 s
Store size of string
Traverse the string
Count the number of 1 s
Stores the starting index
Stores the end index
Increment count , when 1 is encountered
Traverse the remaining string
temp is for Reverse the string from starting and end index
Printing the string
Driver Code
Function to count the maximum number of pairs from given array with sum K
Sort array in increasing order
Stores the final result
Initialize the left and right pointers
Traverse array until start < end
Decrement right by 1
Increment left by 1
Increment result and left pointer by 1 and decrement right pointer by 1
Print the result
Driver Code
Function Call
Function to find the maximum number of pairs with a sum K such that same element can 't be used twice
Initialize a hashm
Store the final result
Iterate over the array nums [ ]
Decrement its frequency in m and increment the result by 1
Increment its frequency by 1 if it is already present in m . Otherwise , set its frequency to 1
Print the result
Driver code
Function Call
Function to find indices of array elements whose removal makes the sum of odd and even indexed array elements equal
Stores size of array
Store prefix sum of odd index array elements
Store prefix sum of even index array elements
Update even [ 0 ]
Traverse the given array
Update odd [ i ]
Update even [ i ]
If the current index is an even number
Update even [ i ]
If the current index is an odd number
Update odd [ i ]
Check if at least one index found or not that satisfies the condition
Store odd indices sum by removing 0 - th index
Store even indices sum by removing 0 - th index
If p and q are equal
Traverse the array arr
If i is an even number
Update p by removing the i - th element
Update q by removing the i - th element
Update q by removing the i - th element
Update p by removing the i - th element
If odd index values sum is equal to even index values sum
Set the find variable
Print the current index
If no index found
Print not possible
Driver Code
Function to coutnt minimum array elements required to be removed to make an array bitonic
left [ i ] : Stores the length of LIS up to i - th index
right [ i ] : Stores the length of decreasing subsequence over the range [ i , N ]
Calculate the length of LIS up to i - th index
Traverse the array upto i - th index
If arr [ j ] is less than arr [ i ]
Update left [ i ]
Calculate the length of decreasing subsequence over the range [ i , N ]
Traverse right [ ] array
If arr [ i ] is greater than arr [ j ]
Update right [ i ]
Stores length of the longest bitonic array
Traverse left [ ] and right [ ] array
Update maxLen
Function to prminimum removals required to make given array bitonic
Driver Code
Function to count subarrays having equal count of 0 s and 1 s with all 0 s and all 1 s grouped together
Stores the count of subarrays
If current element is different from the next array element
Increment count
Count the frequency of 1 s and 0 s
Increment count
Print the final count
Driver Code
Function Call
Python3 program of the above approach
lcount [ i ] [ j ] : Stores the count of i on left of index j
rcount [ i ] [ j ] : Stores the count of i on right of index j
Function to count unique elements on left and right of any index
Find the maximum array element
Calculate prefix sum of counts of each value
Calculate suffix sum of counts of each value
Function to count quadruples of the required type
Driver Code
Function to remove the outermost parentheses of every primitive substring from the given string
Stores the resultant string
Stores the count of opened parentheses
Traverse the string
If opening parenthesis is encountered and their count exceeds 0
Include the character
If closing parenthesis is encountered and their count is less than count of opening parentheses
Include the character
Return the resultant string
Driver Code
Function to find the longest subarray with increasing contiguous elements
Stores the length of required longest subarray
Stores the length of length of longest such subarray from ith index
If consecutive elements are increasing and differ by 1
Otherwise
Update the longest subarray obtained so far
Return the length obtained
Driver Code
Python3 implementation of the above approach
Function to generate prime numbers using Sieve of Eratosthenes
Set 0 and 1 as non - prime
If p is a prime
Set all multiples of p as non - prime
Function to find the digit sum of a given number
Stores the sum of digits
Extract digits and add to the sum
Return the sum of the digits
Function to find the longest subsequence with sum of digits of each element equal to a composite number
Calculate sum of digits of current array element
If sum of digits equal to 1
If sum of digits is a prime
Driver Code
Function call
Structure of Binary Tree
Function to create a new node
Return the created node
Function to insert a node in the tree
Left insertion
Right insertion
Return the root node
Function to find sum of specially balanced nodes in the Tree
Base Case
Find the left subtree sum
Find the right subtree sum
Condition of specially balanced node
Condition of specially balanced node
Return the sum
Function to build the binary tree
Form root node of the tree
Insert nodes into tree
Create a new Node
Insert the node
Return the root of the Tree
Function to find the sum of specially balanced nodes
Build Tree
Stores the sum of specially balanced node
Function Call
Print required sum
Driver code
Given nodes
Given root
Given path info of nodes from root
Given node values
Function Call
Function to find the position of the pair that covers every pair in the array arr
Stores the index of the resultant pair
To count the occurences
Iterate to check every pair
Set count to 0
Condition to checked for overlapping of pairs
If that pair can cover all other pairs then store its position
If position not found
Otherwise
Driver Code
Given array of pairs
Function Call
Python3 program for the above approach
Function to find the position of the pair that covers every pair in the array arr [ ] [ ]
Position to store the index
Stores the minimum second value
Stores the maximum first value
Iterate over the array of pairs
Update right maximum
Update left minimum
Iterate over the array of pairs
If any pair exists with value { left , right then store it
Print the answer
Driver Code
Given array of pairs
Function call
Function to minimize the count of operations to make str1 and str2 permutations of each other
Store the frequency of each character of str1
Store the frequency of each character of str2
Traverse the freq1 [ ] and freq2 [ ]
If frequency of character in str1 is greater than str2
Otherwise
Store sum of freq1 [ ]
Store sum of freq2 [ ]
Driver Code
Function to count the pairs such that given condition is satisfied
Stores the sum of element at each corresponding index
Find the sum of each index of both array
Stores frequency of each element present in sumArr
Initialize number of pairs
Add possible vaid pairs
Return Number of Pairs
Given array arr [ ] and brr [ ]
Size of given array
Function calling
Function to find the median change after removing elements from arr2 [ ]
To store the median
If N is odd
If N is even
Find the current element in arr1
Erase the element
Decrement N
If N is odd
If N is even
Print the corresponding difference of median
Driver Code
Given arrays
Function Call
NFA variable that keeps track of the state while transaction .
This checks for invalid input .
Function for the state Q2
State transitions ' a ' takes to Q4 , and ' b ' and ' c ' remain at Q2
Function for the state Q3
State transitions ' a ' takes to Q3 , and ' b ' and ' c ' remain at Q4
Function for the state Q4
State transitions ' a ' takes to Q2 , and ' b ' and ' c ' remain at Q3
Function for the state Q5
State transitions ' b ' takes to Q6 , and ' a ' and ' c ' remain at Q5
Function for the state Q6
State transitions ' b ' takes to Q7 , and ' a ' and ' c ' remain at Q7
Function for the state Q7
State transitions ' b ' takes to Q5 , and ' a ' and ' c ' remain at Q7
Function for the state Q8
State transitions ' c ' takes to Q9 , and ' a ' and ' b ' remain at Q8
Function for the state Q9
State transitions ' c ' takes to Q10 , and ' a ' and ' b ' remain at Q9
Function for the state Q10
State transitions ' c ' takes to Q8 , and ' a ' and ' b ' remain at Q10
Function to check for 3 a 's
Function to check for 3 b 's
Function to check for 3 c 's
Driver Code
If any of the states is True , that is , if either the number of a ' s ▁ or ▁ number ▁ of ▁ b ' s or number of c 's is a multiple of three, then the is accepted
Function to count positions such that all elements before it are greater
Count is initially 1 for the first element
Initial Minimum
Traverse the array
If current element is new minimum
Update minimum
Increment count
Driver Code
Function to return the maximum sum in a subarray of size k
k must be greater
Compute sum of first window of size k
Compute sums of remaining windows by removing first element of previous window and adding last element of current window .
Function to return the length of subarray Sum of all the subarray of this length is less than or equal to K
Binary search from l to r as all the array elements are positive so that the maximum subarray sum is monotonically increasing
Check if the subarray sum is greater than K or not
Update the maximum length
Driver code
Python3 implementation of the approach
All possible solutions of the equation 1 / a + 1 / b + 1 / c = 1
Function to find the triplets
Storing indices of the elements
Check if y can act as the middle element of triplet with the given solution of 1 / a + 1 / b + 1 / c = 1
Binary search to find the number of possible values of the first element
Binary search to find the number of possible values of the third element
Contribution to the answer would be the multiplication of the possible values for the first and the third element
Driver Code
Python3 implementation of the above approach
if array has only one element , return 1
For first element compare with only next element
For remaining elements compare with both prev and next elements
For last element compare with only prev element
Driver code
Function to check if an array is sorted or not
Traverse the array arr [ ]
Return true
Function to check if it is possible to sort the array w . r . t . first element
Stores the ID of the first element
Traverse the array arr [ ]
If arr [ i ] [ 1 ] is not equal to that of the group
If array is sorted
Driver Code
Structure of a node
Function to calculate and return the Alpha Score of the journey
Traverse left subtree
Calculate the alpha score of the current step
Update alpha score of the journey
Traverse right subtree
Return
Function to construct a BST from the sorted array arr [ ]
Insert root
Construct left subtree
Construct right subtree
Return root
Driver code
Sort the array
Construct BST from the sorted array
Function that return the index upto all the array elements are updated .
Initialise maxE = - 1
Find the maximum element of arr [ ]
Create frequency array freq [ ]
Update the frequency array as per the occurrence of element in arr [ ]
Initialise cnt to 0
Traversing freq [ ]
If freq of an element is greater than 0 update the value of arr [ ] at index cnt & increment cnt
Return cnt
Function that print array arr [ ] elements in sorted order
Traversing arr [ ] till index cnt
Find frequency of elements
Find value at index i
Traversing till frequency to print value at index i
Driver code
Size of array arr [ ]
Function call to get cnt
Sort the arr [ ] in decreasing order
Function that prints elements in decreasing order
Function to check whether we can make n rectangles of equal area
Sort the array
Find the area of any one rectangle
Check whether we have two equal sides for each rectangle and that area of each rectangle formed is the same
Update the answer to false if any condition fails
If possible
Driver code
Function to return the count of elements which are not in the correct position when sorted
To store a copy of the original array
Copy the elements of the given array to the new array
To store the required count
Sort the original array
If current element was not at the right position
Driver code
Function to find the required pairs
There has to be atleast 2 * k elements
To store the pairs
Sort the given array
For every possible pair
If the current pair is valid
Insert it into the pair vector
If k pairs are not possible
Print the pairs
Driver code
Function to return the count of pairs from arr with the given sum
To store the count of pairs
Sort the given array
Take two pointers
If sum is greater
If sum is lesser
If sum is equal
Find the frequency of arr [ i ]
Find the frequency of arr [ j ]
If arr [ i ] and arr [ j ] are same then remove the extra number counted
Return the required answer
Driver code
Python3 program to implement the above approach
For all the characters of the string
Find the ascii value of the character
Check if if its a valid character , if not then return false
Calculate sum of all the characters ascii values
Find minimum ascii value from the string
Find maximum ascii value from the string
To get the previous element of the minimum ASCII value
Take the expected sum from the above equation
Check if the expected sum is equals to the calculated sum or not
Driver code
1 st example
2 nd example
Function to find the sum of minimum of all subarrays
Insert all the elements in a set
Find the maximum and minimum element
Traverse from the minimum to maximum element
Check if " i " is missing
Check if it is kth missing
If no kth element is missing
Driver code
Python3 program to sort linked list containing values from 1 to N
A linked list node
Function to sort linked list
Function to add a node at the beginning of Linked List
allocate node
put in the data
link the old list off the new node
move the head to po to the new node
This function prs contents of linked list starting from the given node
Driver Code
The constructed linked list is : 3.5 . 4.6 .1 . 2
Linked list node
Function to Check Linked List is sorted in descending order or not
Base cases
Check first two nodes and recursively check remaining .
Driver code
Python 3 program to sort an array such that sum of product of alternate element is minimum .
create evenArr [ ] and oddArr [ ]
sort main array in ascending order
Put elements in oddArr [ ] and evenArr [ ] as per desired value .
sort evenArr [ ] in descending order
merge both sub - array and calculate minimum sum of product of alternate elements
Driver Code
Function to calculate minimum time to print all characters in the string
Current element where the pointer is pointing
Find index of that element
Calculate absolute difference between pointer index and character index as clockwise distance
Subtract clockwise time from 26 to get anti - clockwise time
Add minimum of both times to the answer
Add one unit time to print the character
Print the final answer
Driver code
Given string word
Function call
Function to find the minimum number of steps required to reduce N to 1
Stores the number of steps required
If the value of N is equal to 2 or N is odd
Decrement N by 1
Increment cnt by 1
If N is even
Update N
Increment cnt by 1
Return the number of steps obtained
Driver Code
Function to find the maximum number of diamonds that can be gained in exactly K minutes
Stores all the array elements
Push all the elements to the priority queue
Stores the required result
Loop while the queue is not empty and K is positive
Store the top element from the pq
Pop it from the pq
Add it to the answer
Divide it by 2 and push it back to the pq
Print the answer
Driver Code
Function to find the minimum cost to make A [ i ] multiple of B [ i ] or vice - versa for every array element
Stores the minimum cost
Traverse the array
Case 1 : Update A [ i ]
Case 2 : Update B [ i ]
Add the minimum of the above two cases
Return the resultant cost
Driver Code
Print the largest number divisible by 50
Counting number of 0 s and 7 s
If count of 7 is divisible by 50
If count of 7 is less than 5
If count of 7 is not divisible by 50
Count of groups of 5 in which count of 7 s can be grouped
Driver Code
Given array
Size of the array
Function to find the maximum sum of GCD ( arr [ i ] , i ) by rearranging the array
Sort the array in ascending order
Stores maximum sum of GCD ( arr [ i ] , i ) by rearranging the array elements
Generate all possible permutations of the array
Stores sum of GCD ( arr [ i ] , i )
Traverse the array
Update sum
Update res
Driver code
Function to find the minimum count of elements required to be removed such that frequency of arr [ i ] equal to arr [ i ]
Stores frequency of each element of the array
Traverse the array
Update frequency of arr [ i ]
Stores minimum count of removals
Traverse the map
Stores key value of the map
If frequency of i is less than i
Update cntMinRem
If frequency of i is greater than i
Update cntMinRem
Driver Code
Function to check if an array of equal elements with sum equal to the given array can be obtained or not
Base case
Stores sum of array elements
Stores second largest array element
Stores the largest array element
Traverse the array
Update secMax
Update Max
Update secMax
Update totalSum
If totalSum is less than secMax * ( N - 1 ) )
If totalSum is not divisible by ( N - 1 )
Driver Code
Function to count ways to make Bitwise XOR of odd and even indexed elements equal by removing an array element
Stores xor of odd and even indexed elements from the end
Stores xor of odd and even indexed elements from the start
Stores the required count
Traverse the array in reverse
If i is odd
If i is even
Traverse the array
If i is odd
If i is even
Removing arr [ i ] , post_even stores XOR of odd indexed elements
Removing arr [ i ] , post_odd stores XOR of even indexed elements
Check if they are equal
If i is odd , xor it with curr_odd
If i is even , xor it with curr_even
Finally print res
Drivers Code
Given array
Given size
Function call
Function to count array indices whose removal makes sum of odd and even indexed elements equal
If size of the array is 1
If size of the array is 2
Stores sum of even - indexed elements of the given array
Stores sum of odd - indexed elements of the given array
Traverse the array
If i is an even number
Update sumEven
If i is an odd number
Update sumOdd
Stores sum of even - indexed array elements till i - th index
Stores sum of odd - indexed array elements till i - th index
Stores count of indices whose removal makes sum of odd and even indexed elements equal
Stores sum of even - indexed elements after removing the i - th element
Stores sum of odd - indexed elements after removing the i - th element
Traverse the array
If i is an odd number
Update currOdd
Update newEvenSum
Update newOddSum
If i is an even number
Update currEven
Update newOddSum
Update newEvenSum
If newEvenSum is equal to newOddSum
Increase the count
If sum of even - indexed and odd - indexed elements is equal by removing the first element
Increase the count
If length of the array is an odd number
If sum of even - indexed and odd - indexed elements is equal by removing the last element
Increase the count
If length of the array is an even number
If sum of even - indexed and odd - indexed elements is equal by removing the last element
Increase the count
Driver Code
Function to find the value of A and B whose sum is X and xor is Y
Initialize the two numbers
Case 1 : X < Y
Case 2 : X - Y is odd
Case 3 : If both Sum and XOR are equal
Case 4 : If above cases fails
Update the value of A
Check if A & Y value is 0
If True , update B
Otherwise assign - 1 to A , - 1 to B
Prthe numbers A and B
Driver Code
Given Sum and XOR of 2 numbers
Function Call
Function to check if given range have equal number of increasing as well as decreasing subarrays
Traverse each query
For 0 - based indexing
Condition for same count of increasing & decreasing subarray
Driver Code
Function to find the mean of pair product array of arr
Store product of pairs
Generate all unordered pairs
Store product of pairs
Size of pairArray
Store sum of pairArray
Stores the mean of pairArray
Find mean of pairArray
Return the resultant mean
Driver Code
Given array arr
Function Call
Function to find the player who loses the game
Moves for the first player
Moves for the second player
Iterate over array of strings
Check if the first and last character are the same
Check if string start and end with character '0
If first player have less moves
Given array of strings
Function call
Function to find the number greater than n whose Kth bit is set
Iterate from N + 1
Check if Kth bit is set or not
Increment M for next number
Return the minimum value
Driver Code
Given N and K
Function Call
Function to find the number greater than n whose Kth bit is set
Stores the resultant number
If Kth bit is not set
cur will be the sum of all powers of 2 < k
If the current bit is set
Add Kth power of 2 to n and subtract the all powers of 2 less than K that are set
If the kth bit is set
First unset bit position
Sum of bits that are set
Add Kth power of 2 to n and subtract the all powers of 2 less than K that are set
If Kth bit became unset then set it again
Return the resultant number
Driver code
Print ans
Python3 program to implement the above approach
Final result string
If the current char exceeds the character at the top of the stack
Remove from the end of the string
Decrease k for the removal
Insert current character
Perform remaining K deletions from the end of the string
Return the string
Driver code
Function that finds the maximum length of the sub - array that contains equal element on both halves of sub - array
To store continuous occurence of the element
To store continuous forward occurence
To store continuous backward occurence
To store the maximum length
Find maximum length
Print the result
Given array
Size of the array
Function call
Python3 implementation of the above approach
Function to find the minimum number of n digits divisible by all prime digits .
Driver Code
Function to return the minimum string of length d having the sum of digits s
Return a string of length d
Greedily put 9 's  in the end
Put remaining sum
Function to find the smallest number greater than Y whose sum of digits is X
Convert number y to string
Maintain prefix sum of digits
Iterate over Y from the back where k is current length of suffix
Stores current digit
Increase current digit
Sum upto current prefix
Return answer if remaining sum can be obtained in suffix
Find suffix of length k having sum of digits x - r
Append current character
Return the result
Driver Code
Given Number and Sum
Function Call
Function to generate and return the largest number
Store the smaller in Y
Store the larger in X
Stores respective counts
If N is divisible by Y
Append X , N times to the answer
Reduce N to zero
Reduce N by x
Append Y , X times to the answer
If number can be formed
Otherwise
Driver code
Python3 implementation of the above approach
Traverse input string and store the count of 0
Traverse the input string again to find minimum number of flips
Driver code
Python3 implementation of the missing number such that maximum absolute difference between adjacent element is minimum
Function to find the missing number such that maximum absolute difference is minimum
Loop to find the maximum and minimum adjacent element to missing number
Driver Code
Function call
Function to find the length of the longest common substring of the string X and Y
LCSuff [ i ] [ j ] stores the lengths of the longest common suffixes of substrings
Itearate over strings A and B
If first row or column
If matching is found
Otherwise , if matching is not found
Finally , return the resultant maximum value LCS
Driver Code
Function Call
Python program for the above approach
To store the states of DP
Function to find count of subsets with a given sum
Base case
If an already computed subproblem occurs
Set the state as solved
Recurrence relation
Function to count ways to split array into pair of subsets with difference K
Store the total sum of element of the array
Traverse the array
Calculate sum of array elements
Store the required sum
Prthe number of subsets with sum equal to S1
Driver Code
Function Call
Python program for above approach
Function to calculate the probability for the given sum to be equal to sum in N throws of dice
Base cases
Driver Code
Calculate probability of all sums from a to b
Prthe answer
Function to find the minimum number to steps to reduce N to 0
Dictionary for storing the precomputed sum
Bases Cases
Check if n is not in dp then only call the function so as to reduce no of recursive calls
Return the answer
Given Number N
Function Call
Function to find the minimum number of operations required to change all the array of zeros such that every element is greater than the given array
Declaring the difference array of size N
Number of operations
First update the D [ i ] value with the previous value
The index i has to be incremented
We have to perform ( b [ i ] - d [ i ] ) operations more
Increment the range i to i + k by need
Check if i + k is valid index
Driver Code
Function Call
Function to find the number of ways to cut the matrix into the K parts such that each part have atleast one filled cell
Loop to find prefix sum of the given matrix
dp ( r , c , 1 ) = 1 if preSum [ r ] else 0
Loop to iterate over the dp table of the given matrix
Check if can cut horizontally at r1 , at least one apple in matrix ( r , c ) -> r1 , C - 1
Check if we can cut vertically at c1 , at least one apple in matrix ( r , c ) -> R - 1 , c1
Driver Code
Function Call
Python3 implementation of the above approach
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
If y is odd , multiply x with result
y must be even now
Iterative Function to calculate ( nCr ) % p and save in f [ n ] [ r ]
If j > i then C ( i , j ) = 0
If i is equal to j then C ( i , j ) = 1
Function calculate the Final answer
Initialize ans
x is count of occurence of arr [ i ] in different set such that index of arr [ i ] in those sets divides K completely .
Finding the count of arr [ i ] by placing it at index which divides K completely
By Fermat 's theorem
Driver code
Function to count the number of ways to write N as sum of k non - negative integers
Initialise dp [ ] [ ] array
Only 1 way to choose the value with sum K
Initialise sum
Count the ways from previous states
Update the sum
Return the final count of ways
Driver Code
Function call
Function to count the number of ways to write N as sum of k non - negative integers
Initialise dp [ ] [ ] array
Fill the dp [ ] [ ] with sum = m
Iterate the dp [ ] [ ] to fill the dp [ ] [ ] array
Condition for first column
Else fill the dp [ ] [ ] with sum till ( i , j )
If reach the end , then return the value
Update at current index
Driver Code
Function call
Python3 program to implement the above approach
Function to pre - store primes
Sieve method to check if prime or not
Multiples
Pre - store all the primes
Function to find the longest subsequence
Hash map
Call the function to pre - store the primes
Initialize last element with 1 as that is the longest possible
Iterate from the back and find the longest
Get the number
Initialize dp [ i ] as 1 as the element will only me in the subsequence
Iterate in all the primes and multiply to get the next element
Next element if multiplied with it
If exceeds the last element then break
If the number is there in the array
Get the maximum most element
Hash the element
Find the longest
Driver Code
Function to find the number of Bit Strings of length N with K adjacent set bits
Base Case when we form bit string of length n
if f ( bit string ) = k , count this way
Check if the last bit was set , if it was set then call for next index by incrementing the adjacent bit count else just call the next index with same value of adjacent bit count and either set the bit at current index or let it remain unset
set the bit at currentIndex
unset the bit at currentIndex
Driver Code
total ways = ( ways by placing 1 st bit as 1 + ways by placing 1 st bit as 0 )
Find the postfix sum array
Modify the array such that we don 't have to compute the products which are obtained before
Finding sum of all combination taken 1 to N at a time
sum taken 1 at time is simply sum of 1 - N
for sum of products for all combination
finding postfix array
sum of products taken i + 1 at a time
modify the array for overlapping problem
Driver 's Code
storing numbers from 1 to N
calling allCombination
Returns count of ways to reach n - th stair using 1 or 2 or 3 steps .
Driver code
A utility function that returns true if there is a subset of arr [ ] with sun equal to given sum
Base Cases
If last element is greater than sum , then ignore it
else , check if sum can be obtained by any of the following ( a ) including the last element ( b ) excluding the last element
Returns true if arr [ ] can be partitioned in two subsets of equal sum , otherwise false
Calculate sum of the elements in array
If sum is odd , there cannot be two subsets with equal sum
Find if there is subset with sum equal to half of total sum
Driver code
Function call
Returns true if arr [ ] can be partitioned in two subsets of equal sum , otherwise false
Calculate sum of all elements
Initialize the part array as 0
Fill the partition table in bottom up manner
the element to be included in the sum cannot be greater than the sum
check if sum - arr [ i ] could be formed from a subset using elements before index i
Drive code
Function call
Function to find binomial coefficient
Getting the modular inversion for all the numbers from 2 to r with respect to m here m = 1000000007
for 1 / ( r ! ) part
for ( n ) * ( n - 1 ) * ( n - 2 ) * ... * ( n - r + 1 ) part
Driver code
Function to find the gcd of two numbers
Base case
Recurse
Function to print the answer
GCD of X and Y
If GCD is power of 2
Driver code
Given X and Y
Function call
Function to return the element in the rth row and cth column from the required matrix
Condition for lower half of matrix
Condition if element is in first row
Starting element of AP in row r
Common difference of AP in row r
Position of element to find in AP in row r
Driver Code
Function to insert X in N and return the minimum value string
Variable to store length of string N
Variable to denote the position where X must be added
If the given string N represent a negative value
X must be place at the last index where is greater than N [ i ]
For positive numbers , X must be placed at the last index where it is smaller than N [ i ]
Insert X at that position
Return the string
Given Input
Function Call
Function to check the binary number is divisible by K
Array poweroftwo will store pow ( 2 , i ) % k
Initializing the first element in Array
Storing every pow ( 2 , i ) % k value in the array
To store the remaining
Iterating till N
If current bit is 1
Updating rem
If completely divisible
If not Completely divisible
Driver Code
Given Input
length of string s
Function Call
Function to find the maximum sum of count of 0 s in the left suband count of 1 s in the right subby splitting the string
Stores count of 1 s the in binary string
Traverse the binary string
If current character is '1
Update cntOne
Stores count of 0 s
Stores count of 1 s
Stores maximum sum of count of 0 s and 1 s by splitting the string
Traverse the binary string
If current character is '0
Update zero
If current character is '1
Update one
Update res
Driver Code
Function to find the maximum count of pairs required to be removed such that subsequence of string does not contain any valid parenthesis
Stores count of pairs of balanced parenthesis
Stores count of curly balanced parenthesis
Stores count of small balanced parenthesis
Stores count of square balanced parenthesis
Iterate over characters of the string
Update cntCurly
Update cntSml
Update cntSqr
Update cntCurly
Update cntPairs
Update cntSml
Update cntPairs
Update cntSml
Update cntPairs
Driver Code
Given String
Function call
Function to check if there is arc intersection or not
Traverse the string S
Insert all the elements in the stack one by one
Extract the top element
Pop out the top element
Check if the top element is same as the popped element
Otherwise
If the stack is empty
Function to check if there is arc intersection or not for the given array of strings
Stores count of string not having arc intersection
Iterate through array
Length of every string
Function Call
Print the desired count
Driver Code
Function Call
Function to convert the binary string into octal representation
Stores binary representation of the decimal value [ 0 - 7 ]
Stores the decimal values of binary strings [ 0 - 7 ]
Stores length of S
Update S
Update S
Update N
Stores octal representation of the binary string
Traverse the binary string
Stores 3 consecutive characters of the binary string
Append octal representation of temp
Function to check if binary string is divisible by 9 or not
Stores octal representation of S
Stores sum of elements present at odd positions of oct
Stores sum of elements present at odd positions of oct
Stores length of oct
Traverse the string oct
Update oddSum
Traverse the string oct
Update evenSum
Stores cotal representation of 9
If absolute value of ( oddSum - evenSum ) is divisible by Oct_9
Driver Code
Function to calculate the minimum cost
Stores the minimum cost
Stores the count of characters found
Stores the count of blank spaces found
Stores the count of total characters
If the count of characters is equal to 1
Iterate over the string
Consider the previous character together with current character
If not together already
Add the cost to group them together
Increase count of characters found
Otherwise
Increase count of spaces found
Return the total cost obtained
Driver Code
Function that return true if the given character is a vowel
Function to return the minimum cost to convert all the vowels of a string to a single one
Stores count of respective vowels
Iterate through the string
If a vowel is encountered
Calculate the cost
Return the minimum cost
Driver code
Function to return the required required string
Iterate the given string
Append the first character of every substring of length K
Consider all characters from the last substring
Driver code
Function that prints the lexicographically smallest K - length substring containing maximum number of vowels
Store the length of the string
Initialize a prefix sum array
Loop through the string to create the prefix sum array
Store 1 at the index if it is a vowel
Otherwise , store 0
Process the prefix array
Initialize the variable to store maximum count of vowels
Initialize the variable to store substring with maximum count of vowels
Loop through the prefix array
Store the current count of vowels
Update the result if current count is greater than maximum count
Update lexicographically smallest substring if the current count is equal to the maximum count
Return the result
Driver code
Function to decode and print the original string
To store the decoded string
Getting the mid element
Storing the first element of the string at the median position
If the length is even then store the second element also
k represents the number of characters that are already stored in the c [ ]
If string length is odd
If it is even
Print the decoded string
Driver code
Python3 program for Naive Approach
Counter to count distinct char
Initializing frequency array to count characters as the appear in substring S [ L : R ]
Iterating over S [ L ] to S [ R ]
Incrementing the count of s [ i ] character in frequency array
If frequency of any character is > 0 then increment the counter
Driver code
Function to perform K operations upon the string and find modified string
Number of reverse operations
Number of complement operations
If rev is odd parity
If complement is odd parity
Complementing each position
Return the modified string
Driver Code
Function call
Function to check that permutation of the given string is a K times repeating String
If length of string is not divisible by K
Frequency Array
Initially frequency of each character is 0
Computing the frequency of each character in the string
Loop to check that frequency of every character of the string is divisible by K
Driver Code
Function to find the last two digits of the number and print the complete number
Sum of the first eight digits of the number
if sum < 10 , then the two digits are '0' and the value of sum
if sum > 10 , then the two digits are the value of sum
Driver code
Function to return the required count
If the splitting is not possible
To store the count of zeroes
Counting the number of zeroes
Return the final answer
Driver code
Function to return the number of substrings of same characters
Size of the string
Initialize count to 1
Initialize left to 0 and right to 1 to traverse the string
Checking if consecutive characters are same and increment the count
When we encounter a different characters
Increment the result
To repeat the whole process set left equals right and count variable to 1
Store the final value of result
Driver code
Function to check for the Vowel
Function to get the resultant String with vowels duplicated
Another to store the resultant String
Loop to check for each character
Driver Code
Print the original String
Print the resultant String
Recursive function to convert string to integer
If the number represented as a string contains only a single digit then returns its value
Recursive call for the sub - string starting at the second character
First digit of the number
First digit multiplied by the appropriate power of 10 and then add the recursive result For example , xy = ( ( x * 10 ) + y )
Driver code
Python3 implementation of the approach
Function to return the length of the longest sub - sequence with at least one common character in every string
count [ 0 ] will store the number of strings which contain ' a ' , count [ 1 ] will store the number of strings which contain ' b ' and so on . .
For every string
Hash array to set which character is present in the current string
If current character appears in the string then update its count
Driver code
Function that returns true if str is a palindrome
Function that returns true if the generated string is a palindrome
sub contains N as a string
Calculate the sum of the digits
Repeat the substring until the length of the resultant string < sum
If length of the resultant string exceeded sum then take substring from 0 to sum - 1
If the generated string is a palindrome
Driver code
Function to find the minimum length
Count the frequency of each alphabet
Find the alphabets with maximum frequency
Subtract the frequency of character from length of string
Driver Code
function to remove characters and pr new string
Finding the character whose ASCII value fall under this range
erase function to erase the character
Driver Code
Function to remove special characters and store it in another variable
Store only valid characters
Driver code
Python3 program to find the first character that is repeated
this is O ( N ^ 2 ) method
Driver code
Python3 implementation to print the characters and frequencies in order of its occurrence
Store all characters and their frequencies in dictionary
Print characters and their frequencies in same order of their appearance
Print only if this character is not printed before .
Driver Code
Function to calculate number of strings
Store factorial of numbers up to n for further computation
Find the remaining values to be added
Make all possible combinations of R , B and G for the remaining value
Compute permutation of each combination one by one and add them .
Return total no . of strings / permutation
Driver code
Python 3 program to find minimum number of characters to be removed to make two strings anagram .
function to calculate minimum numbers of characters to be removed to make two strings anagram
make hash array for both string and calculate frequency of each character
count frequency of each character in first string
count frequency of each character in second string
traverse count arrays to find number of characters to be removed
Driver program to run the case
Assuming only lower case characters
To check a string S can be converted to a valid string by removing less than or equal to one character .
freq [ ] : stores the frequency of each character of a string
Find first character with non - zero frequency
Find a character with frequency different from freq1 .
If we find a third non - zero frequency or count of both frequencies become more than 1 , then return false
If we find a third non - zero freq
If counts of both frequencies is more than 1
Return true if we reach here
Driver code
To check a string S can be converted to a variation string
Run loop form 0 to length of string
declaration of variables
if first is true than countOfVal1 increase
if second is true than countOfVal2 increase
Driver code
Returns count of complete pairs from set [ 0. . n - 1 ] and set2 [ 0. . m - 1 ]
con_s1 [ i ] is going to store an integer whose set bits represent presence / absence of characters in set1 [ i ] . Similarly con_s2 [ i ] is going to store an integer whose set bits represent presence / absence of characters in set2 [ i ]
Process all strings in set1 [ ]
initializing all bits to 0
Setting the ascii code of char s [ i ] [ j ] to 1 in the compressed integer .
Process all strings in set2 [ ]
initializing all bits to 0
setting the ascii code of char s [ i ] [ j ] to 1 in the compressed integer .
assigning a variable whose all 26 ( 0. . 25 ) bits are set to 1
Now consider every pair of integer in con_s1 [ ] and con_s2 [ ] and check if the pair is complete .
if all bits are set , the strings are complete !
Driver code
Function to encode given string
For each character in given string
If the character is occurring for the first time , assign next unique number to that char
Append the number associated with current character into the output string
Function to print all the strings that match the given pattern where every character in the pattern is uniquely mapped to a character in the dictionary
len is length of the pattern
Encode the string
For each word in the dictionary array
If size of pattern is same as size of current dictionary word and both pattern and the word has same hash , print the word
Driver code
Python3 program to print all the strings that match the given pattern where every character in the pattern is uniquely mapped to a character in the dictionary
Function to print all the strings that match the given pattern where every character in the pattern is uniquely mapped to a character in the dictionary
len is length of the pattern
For each word in the dictionary
Driver code
Function to count total number of words in the string
Check if the string is null or empty then return zero
Converting the given string into a character array
Check if the character is a letter and index of character array doesn 't  equal to end of line that means, it is  a word and set isWord by true
Check if the character is not a letter that means there is a space , then we increment the wordCount by one and set the isWord by false
Check for the last word of the sentence and increment the wordCount by one
Return the total number of words in the string
Given String str
Print the result
Reverse the string
Check if number of words is even
Find the middle word
Starting from the middle start swapping words at jth position and l - 1 - j position
Check if number of words is odd
Find the middle word
Starting from the middle start swapping the words at jth position and l - 1 - j position
return the reversed sentence
Driver Code
Function to print path of all the nodes nth node represent as given node kth node represents as left and right node
base condition if kth node value is greater then nth node then its means kth node is not valid so we not store it into the res simply we just return
Storing node into res
Print the path from root to node
store left path of a tree So for left we will go node ( kThNode * 2 )
right path of a tree and for right we will go node ( kThNode * 2 + 1 )
Function to print path from root to all of the nodes
res is for store the path from root to particulate node
Print path from root to all node . third argument 1 because of we have to consider root node is 1
Driver Code
Given Node
Print path from root to all node .
Python code to implement above approach
A utility function to get the middle index of given range .
Function that return true if num is armstrong else return false
A recursive function to get the sum of values in the given range of the array . The following are parameters for this function . st -> Pointer to segment tree node -> Index of current node in the segment tree . ss & se -> Starting and ending indexes of the segment represented by current node , i . e . , st [ node ] l & r -> Starting and ending indexes of range query
If segment of this node is completely part of given range , then return the max of segment .
If segment of this node does not belong to given range
If segment of this node is partially the part of given range
A recursive function to update the nodes which have the given the index in their range . The following are parameters st , ss and se are same as defined above index -> index of the element to be updated .
update value in array and in segment tree
Return max of elements in range from index l ( query start ) to r ( query end ) .
Check for erroneous input values
A recursive function that constructs Segment Tree for array [ ss . . se ] . si is index of current node in segment tree st
If there is one element in array , store it in current node of segment tree and return
If there are more than one elements , then recur for left and right subtrees and store the max of values in this node
Function to construct a segment tree from given array . This function allocates memory for segment tree .
Height of segment tree
Maximum size of segment tree
Allocate memory
Fill the allocated memory st
Return the constructed segment tree
Driver code
Build segment tree from given array
Print max of values in array from index 1 to 3
Update : set arr [ 1 ] = 153 and update corresponding segment tree nodes .
Find max after the value is updated
Function to find the maximum number of regions on a plane
print the maximum number of regions
Driver code
Function to check if the jigsaw Puzzle is solveable or not
Base Case
By placing the blank tabs as a chain
Driver Code
Function to find the GCD of two numbers a and b
Base Case
Recursively find the GCD
Function to check if ( x , y ) can be reached from ( 1 , 0 ) from given moves
If GCD is 1 , then pr " Yes "
Driver Code
Given X and Y
Function call
Python3 program to implement the above approach
Seieve of Erotosthenes to compute all primes
If prime
Mark all its multiples as non - prime
Function to find the probability of Euler 's Totient Function in a given range
Initializing two arrays with values from L to R for Euler 's totient
Indexing from 0
If the current number is prime
Checking if i is prime factor of numbers in range L to R
Update all the numbers which has prime factor i
If number in range has a prime factor > Math . sqrt ( number )
Count those which are divisible by M
Return the result
Driver code
Python3 implementation to find the Largest Odd Divisor Game to check which player wins
Function to find the Largest Odd Divisor Game to check which player wins
Check if n == 1 then player 2 will win
Check if n == 2 or n is odd
While n is greater than k and divisible by 2 keep incrementing tha val
Loop to find greatest odd divisor
Check if n is a power of 2
Check if cnt is not one then player 1 wins
Driver code
Python3 program of the above approach
Function to print numbers upto N which are both pentagonal as well as hexagonal numbers
Calculate i - th pentagonal number
Check if the pentagonal number pn is hexagonal or not
Driver Code
Function to check if row - major order traversal of the matrix is is palindrome
Loop to check if the matrix is matrix is palindrome or not
Driver Code
Function to get sum of digits
Function to find the smallest number whose sum of digits is also N
Checking if number has sum of digits = N
Driver code
Python3 implementation to check if N is a Rare number
Iterative function to reverse digits of num
Function to check if N is perfect square
Find floating point value of square root of x .
If square root is an integer
Function to check if N is an Rare number
Find reverse of N
Number should be non - palindromic
Driver Code
Function which will calculate the elements in the given range
Store the current power of 2
Store the current power of 3
power23 [ ] will store pairwise product of elements of power2 and power3 that are <= r
Insert in power23 ] [ ] only if mul <= r
Store the required answer
Print the result
Driver code
Function to calculate nCr
Returns factorial of n
Function for finding number of K length subsequences whose product is even number
Counting odd numbers in the array
Driver code
Python3 program to find the first digit of X in base Y
Function to find the first digit of X in base Y
Calculating number of digits of x in base y
Finding first digit of x in base y
Driver code
Function to check if a number is a Curzon number or not
Find 2 ^ N + 1
Find 2 * N + 1
Check for divisibility
Driver code
Function to return the count of minimum numbers ending with 7 required such that the sum of these numbers is n
hasharr [ i ] will store the minimum numbers ending with 7 so that it sums to number ending with digit i
Its always possible to write numbers > 69 to write as numbers ending with 7
If the number is atleast equal to the sum of minimum numbers ending with 7
Driver code
Function to print the modified binary pattern
Loop to traverse the rows
Loop to traverse the numbers in each row
Check if j is 1 or i In either case print 1
Else print 0
Change the cursor to next line after each row
Driver Code
Function Call
Function to find real and imaginary parts of a complex number
string length stored in variable l
variable for the index of the separator
Storing the index of '+
else storing the index of '-
Finding the real part of the complex number
Finding the imaginary part of the complex number
Driver code
Python 3 implementation to find distinct powers of N that add up to K
Function to return the highest power of N not exceeding K
Loop to find the highest power less than K
Initializing the PowerArray with all 0 's.
Function to print the distinct powers of N that add upto K
Getting the highest power of n before k
To check if the power is being used twice or not
Print - 1 if power is being used twice
If the power is not visited , then mark the power as visited
Decrementing the value of K
Printing the powers of N that sum up to K
Driver code
Python3 program to find sum of elements in an array having composite frequency
Function to create Sieve to check primes
If composite [ p ] is not changed , then it is a prime
Update all multiples of p , set them to composite
Function to return the sum of elements in an array having composite frequency
Map is used to store element frequencies
To store sum
Traverse the map using iterators
Count the number of elements having composite frequencies
Driver code
Function call
Function that removes the elements which have odd frequencies in the array
Create a map to store the frequency of each element
Remove the elements which have odd frequencies
If the element has odd frequency then skip
Driver code
Function call
Maximum value of the first array element that can be attained
Variable to store the sum
Loop to find the sum of array
Desired maximum value
Driver Code
function to get the minimum length of the shorter side of the triangle
traversing through each points on the plane
if sum of a points is greater than the previous one , the maximum gets replaced
print the length
Driver code
initialize the number of points
points on the plane
function to find intersection rectangle of given two rectangles .
gives bottom - left point of intersection rectangle
gives top - right point of intersection rectangle
no intersection
gives top - left point of intersection rectangle
gives bottom - right point of intersection rectangle
Driver code
bottom - left and top - right corners of first rectangle
bottom - left and top - right corners of first rectangle
function call
Python3 program to find corner points of a rectangle using given length and middle points .
Structure to represent a co - ordinate point
This function receives two points and length of the side of rectangle and prints the 4 corner points of the rectangle
Horizontal rectangle
Vertical rectangle
Slanted rectangle
Calculate slope of the side
Calculate displacements along axes
Driver code
Function to find the minimum cost to modify the array according to the given criteria
Count of wrong positioned odd and even elements
Odd Count
Even Count
Swapping Cost
Decrementing cost after swapping
Only decrementing cost
Return the minimum cost of the two cases
Driver Code
Function to find the minimum product of the minimum and maximum among all the possible subarrays
Stores resultant minimum product
Traverse the given array arr [ ]
Min of product of all two pair of consecutive elements
Return the resultant value
Driver Code
Structure of Tree
A constructor to create a new node
Function to add the node to the sum below the target node
Base Case
If Kth distant node is reached
Recur for the left and the right subtrees
Function to find the K distant nodes from target node , it returns - 1 if target node is not present in tree
Base Case 1
If target is same as root .
Recurr for the left subtree
Tree is BST so reduce the search space
Check if target node was found in left subtree
If root is at distance k from the target
Node less than target will be present in left
When node is not present in the left subtree
If Kth distant node is reached
Node less than target at k distance maybe present in the left tree
If target was not present in the left nor in right subtree
Function to insert a node in BST
If root is NULL
Insert the data in right half
Insert the data in left half
Return the root node
Function to find the sum of K distant nodes from the target node having value less than target node
Stores the sum of nodes having values < target at K distance
Print the resultant sum
Driver Code
Create the Tree
Function to find the type of the item given out according to the given rules
Stores the count of item given out at each step
Iterate over the days from 1
Iterate over type of item on that day
Count of items given out should exceed n
Driver Code
Python3 program for the above approach
Function to prthe sum of array elements that are equidistant from two consecutive powers of 2
Stores the resultant sum of the array elements
Traverse the array arr [ ]
Stores the power of 2 of the number arr [ i ]
Stores the number which is power of 2 and lesser than or equal to arr [ i ]
Stores the number which is power of 2 and greater than or equal to arr [ i ]
If arr [ i ] - LesserValue is the same as LargerValue - arr [ i ]
Increment res by arr [ i ]
Return the resultant sum res
Driver Code
Function to find the person who will finish last
To keep track of rows and columns having 1
Available rows and columns
Minimum number of choices we have
If number of choices are odd
P1 will finish last
Otherwise , P2 will finish last
Given matrix
Python3 program for the above approach
Function to find the sum of first N natural numbers represented in binary representation
Stores the resultant sum
Iterate until the value of N is greater than 0
If N is less than 2
Store the MSB position of N
Iterate in the range [ 1 , x ] and add the contribution of the numbers from 1 to ( 2 ^ x - 1 )
Update the value of the cur and add
Add the cur to ans
Store the remaining numbers
Add the contribution by MSB by the remaining numbers
The next iteration will be repeated for 2 ^ x - 1
Print the result
Driver Code
Function to find the Fibonacci number which is nearest to N
Base Case
Initialize the first & second terms of the Fibonacci series
Store the third term
Iterate until the third term is less than or equal to num
Update the first
Update the second
Update the third
Store the Fibonacci number having smaller difference with N
Print the result
Driver Code
Python3 program for the above approach
Function to check if the maximum prefix array of ans [ ] is equal to array arr [ ]
Initialize a variable , Max
Traverse the array , ans [ ]
Store the maximum value upto index i
If it is not equal to a [ i ] , then return false
Otherwise return false
Function to find the permutation of the array whose prefix maximum array is same as the given array a [ ]
Stores the required permutation
Stores the index of first occurrence of elements
Traverse the array a [ ]
If a [ i ] is not present in um , then store it in um
Update the ans [ i ] to a [ i ]
Stores the unvisited numbers
Fill the array , v [ ]
Store the index
Traverse the array , ans [ ]
Fill v [ j ] at places where ans [ i ] is 0
Check if the current permutation maximum prefix array is same as the given array a [ ]
If true , the print the permutation
Otherwise , print - 1
Driver Code
Function Call
Function to count the number of required pairs for every array element
Initialize a map
Update the frequency of every element
Stores the count of pairs
Traverse the map
Count the number of ways to select pairs consisting of equal elements only
Traverse the array
Print the count for every array element
Driver code
Given array
Size of the array
Function to return the count of natural octal numbers upto N digits
Loop to iterate from 1 to N and calculating number of octal numbers for every ' i ' th digit .
Driver code
Python3 program to find all the palindromic divisors of a number
Function to check is num is palindromic or not
Convert n to string str
Starting and ending index of string str
If char at s and e are not equals then return false
Function to find palindromic divisors
To sore the palindromic divisors of number n
If n is divisible by i
Check if number is a perfect square
Check divisor is palindromic , then store it
Check if divisors are palindrome
Check if n / divisors is palindromic or not
Print all palindromic divisors in sorted order
Driver code
Function call to find all palindromic divisors
Python3 implementation of the approach
Function to return the minimum deletions to get minimum OR
To store the minimum element
Find the minimum element from the array
To store the frequency of the minimum element
Find the frequency of the minimum element
Return the final answer
Driver code
Python3 implementation of the approach
Function to return the required count
To store the final answer
To store the GCD starting from index 'i
Loop to find the gcd of each subarray from arr [ i ] to arr [ i ... n - 1 ]
Increment the count if curr_gcd = 1
Return the final answer
Driver code
Function to print first N prime numbers
Declare the variables
Print display message
Traverse each number from 1 to N with the help of for loop
Skip 0 and 1 as they are neither prime nor composite
flag variable to tell if i is prime or not
flag = 1 means i is prime and flag = 0 means i is not prime
Driver code
Python3 implementation of the approach
Function to find X according to the given conditions
int can have 32 bits
Temporary ith bit
Compute ith bit of X according to given conditions Expression below is the direct conclusion from the illustration we had taken earlier
Add the ith bit of X to X
Driver code
Function to return the count of subsets with the maximum mean
Maximum value from the array
To store the number of times maximum element appears in the array
Return the count of valid subsets
Driver code
Python3 implementation of the approach
Function to return the probability of getting the maximum pair sum when a random pair is chosen from the given array
Initialize the maximum sum , its count and the count of total pairs
For every single pair
Get the sum of the current pair
If the sum is equal to the current maximum sum so far
Increment its count
If the sum is greater than the current maximum
Update the current maximum and re - initialize the count to 1
Find the required probability
Driver code
Python3 implementation of the approach
Function to return the count of common factors of a and b such that all the elements are co - prime to one another
GCD of a and b
Include 1 initially
Find all the prime factors of the gcd
If gcd is prime
Return the required answer
Driver code
Python3 implementation of the approach
Function to return the day number of the year for the given date
Extract the year , month and the day from the date string
If current year is a leap year and the date given is after the 28 th of February then it must include the 29 th February
Add the days in the previous months
Driver code
Function to find number of cells in the table contains X
Driver code
Function call
Python3 implementation of above approach
Function to return the smallest power of 4 greater than or equal to n
If n is itself is a power of 4 then return n
Driver code
Function to return the minimum operations required
Not possible
To store the greatest power of p that divides d
While divible by p
To store the greatest power of q that divides d
While divible by q
If d > 1
Since , d = p ^ a * q ^ b
Driver code
Python3 implementation of the approach
Function to calculate NC4
Base case to calculate NC4
Function to return the count of required quadruples using Inclusion Exclusion
Effective N
Iterate over 2 to M
Number of divisors of i till M
Count stores the number of prime divisors occurring exactly once
To prevent repetition of prime divisors
If repetition of prime divisors present ignore this number
If prime divisor count is odd subtract it from answer else add
Driver code
Function to return the required number X
Driver code
Function to check if a character is vowel or consonent
Function to calculate factorial of a number
Calculating no of ways for arranging vowels
Iterate the map and count the number of vowels and calculate no of ways to arrange vowels
calculating no of ways to arrange the given word such that vowels come together
calculate no of ways to arrange vowels
to store denominator of fraction
count of consonents
calculate the number of ways to arrange the word such that vowels come together
To calculate total number of permutations
To store length of the given word
denominator of fraction
return total number of permutations of the given word
Function to calculate number of permutations such that no vowels come together
to store frequency of character
count frequency of acharacters
calculate total number of permutations
calculate total number of permutations such that vowels come together
substrat vwl_tgthr from total to get the result
return the result
Driver code
Function to return the number of men initially
Driver code
Function to find area
Driver code
Function to return the vector containing the answer
Vector v is to store each digits sum and vector ans is to store the answer
No carry in the beginning
Start loop from the end and take element one by one
Array index and last digit of number
Maintain carry of summation
Push the digit value into the array
K value is greater then 0
Push digits of K one by one in the array
Also maintain carry with summation
Reverse the elements of vector v and store it in vector ans
Driver code
Print the answer
Python3 implementation of the above approach
Function to return maximum sum of a sub - array
Function to return maximum value of function F
Compute arrays B [ ] and C [ ]
Find maximum sum sub - array of both of the arrays and take maximum among them
Driver code
Function to find the element
if n < 3
If n is even return 6 If n is odd return 1
Driver code
Function to return the probability of A winning
p and q store the values of fractions a / b and c / d
To store the winning probability of A
Driver code
Function to check if n is palindrome
Find the appropriate divisor to extract the leading digit
If first and last digits are not same then return false
Removing the leading and trailing digits from the number
Reducing divisor by a factor of 2 as 2 digits are dropped
Function to find the largest palindromic number
If a palindrome larger than the currentMax is found
Return the largest palindromic number from the array
Driver Code
print required answer
Function to return the final element
Driver code
Python3 program to find Sum of elements in an array having prime frequency
Function to create Sieve to check primes
False here indicates that it is not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p , set them to non - prime
Function to return the Sum of elements in an array having prime frequency
Map is used to store element frequencies
Traverse the map using iterators
Count the number of elements having prime frequencies
Driver code
Function that returns true if the given number is a palindrome
Here we are generating a new number ( reverse_num ) by reversing the digits of original input number
If the original input number ( num ) is equal to its reverse ( reverse_num ) then its palindrome else it is not .
Function that returns true if the given number is of odd length
Function to return the sum of all odd length palindromic numbers within the given range
if number is palindrome and of odd length
Driver code
Factorial of a number
calculating ways for arranging consonants
Ignore vowels
calculating ways for arranging vowels
Function to count total no . of ways
Count vowels and consonant
total no . of ways
Driver code
Computes value of first fibonacci numbers and stores their alternate sum
Initialize result
Add remaining terms
For even terms
For odd terms
Return the alternating sum
Driver program to test above function
Get n
Find the alternating sum
Function that will return nth term
Get n
Get the value
Get n
Get the value
Python 3 implementation of above approach
Function that traverses digits in a number and modifies frequency count array
Array to keep count of digits
Traversing through x ^ 1 to x ^ n
For power function , both its parameters are to be in double
calling countDigits function on x ^ i
Printing count of digits 0 - 9
Driver code
function to return the number of solutions
check for every possible value
Driver Code
function to return the number of solutions
Driver Code
Function to calculate the sum of area of all possible squares that comes inside the rectangle
Square with max size possible
calculate total square of a given size
calculate area of squares of a particular size
total area
increment size
Driver Code
function to calculate the value of hyperfactorial
initialise the val to 1
returns the hyperfactorial of a number
Driver code
function to calculate the value of hyperfactorial
initialise the val to 1
1 ^ 1 * 2 ^ 2 * 3 ^ 3. . . .
returns the hyperfactorial of a number
Driver code
Python 3 code to subtract one from a given number
Flip all the set bits until we find a 1
flip the rightmost 1 bit
Driver Code
Python3 program to find mean vector of given matrix
Function to find mean vector
loop to traverse each column
to calculate mean of each row
to store sum of elements of a column
Driver Code
Python3 code to check if a number is a hoax number or not .
Function to find distinct prime factors of given number n
n is odd at this point , since it is no longer divisible by 2. So we can test only for the odd numbers , whether they are factors of n
Check if i is prime factor
This condition is to handle the case when n is a prime number greater than 2
Function to calculate sum of digits of distinct prime factors of given number n and sum of digits of number n and compare the sums obtained
Distinct prime factors of n are being stored in vector pf
If n is a prime number , it cannot be a hoax number
Finding sum of digits of distinct prime factors of the number n
Finding sum of digits in current prime factor pf [ i ] .
Finding sum of digits of number n
Comparing the two calculated sums
Driver Method
Function to find out first n terms ( considering 4 as 0 th term ) of Lucas - Lehmer series .
the 0 th term of the series is 4.
create an array to store the terms .
compute each term and add it to the array .
print out the terms one by one .
Driver program
A naive method to find modular multiplicative inverse of ' a ' under modulo 'prime
Driver Program
function for minimum operation
remainder and operations count
count digits not equal to 3 or 8
Driver code
function to calculate the sum of digits of a number .
Returns the maximum number with maximum sum of digits .
initializing b as 1 and initial max sum to be of n
iterates from right to left in a digit
while iterating this is the number from right to left
calls the function to check if sum of cur is more then of ans
reduces the number to one unit less
driver program to test the above function
Function to give index of the median
Function to calculate IQR
Index of median of entire data
Median of first half
Median of second half
IQR calculation
Driver Function
Function to check if n is palindrome
Find the appropriate divisor to extract the leading digit
If first and last digits are not same then return false
Removing the leading and trailing digits from the number
Reducing divisor by a factor of 2 as 2 digits are dropped
Function to find the largest palindromic number
Sort the array
If number is palindrome
If no palindromic number found
Driver Code
print required answer
Function to return the sum of all the integers below N which are multiples of either A or B
If i is a multiple of a or b
Driver code
''Driver code
Calculate nth pell number
Driver function
Returns LCM of arr [ 0. . n - 1 ]
Find the maximum value in arr [ ]
Initialize result
Find all factors that are present in two or more array elements . x = 2 ; Current factor .
To store indexes of all array elements that are divisible by x .
If there are 2 or more array elements that are divisible by x .
Reduce all array elements divisible by x .
Then multiply all reduced array elements
Driver code
python program for the above approach
Function to find politeness
sqrt ( 2 * n ) as max length will be when the sum starts from 1 which follows the equation n ^ 2 - n - ( 2 * sum ) = 0
Driver program to test above function
Python3 program to implement Goldbach 's conjecture
Array to store all prime less than and equal to 10 ^ 6
Utility function for Sieve of Sundaram
In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than MAX , we reduce MAX to half . This array is used to separate numbers of the form i + j + 2 * i * j from others where 1 <= i <= j
Main logic of Sundaram . Mark all numbers which do not generate prime number by doing 2 * i + 1
Since 2 is a prime number
Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .
Function to perform Goldbach 's conjecture
Return if number is not even or less than 3
Check only upto half of number
find difference by subtracting current prime from n
Search if the difference is also a prime number
Express as a sum of primes
Finding all prime numbers before limit
Express number as a sum of two primes
Python Program to print kth prime factor
A function to generate prime factors of a given number n and return k - th prime factor
Find the number of 2 's that divide k
n must be odd at this point . So we can skip one element ( Note i = i + 2 )
While i divides n , store i and divide n
This condition is to handle the case where n is a prime number greater than 2
Driver Program
python3 program to find k - th prime factor using Sieve Of Eratosthenes . This program is efficient when we have a range of numbers .
Using SieveOfEratosthenes to find smallest prime factor of all the numbers . For example , if MAX is 10 , s [ 2 ] = s [ 4 ] = s [ 6 ] = s [ 10 ] = 2 s [ 3 ] = s [ 9 ] = 3 s [ 5 ] = 5 s [ 7 ] = 7
Create a boolean array " prime [ 0 . . MAX ] " and initialize all entries in it as false .
Initializing smallest factor equal to 2 for all the even numbers
For odd numbers less then equal to n
s ( i ) for a prime is the number itself
For all multiples of current prime number
i is the smallest prime factor for number " i * j " .
Function to generate prime factors and return its k - th prime factor . s [ i ] stores least prime factor of i .
Keep dividing n by least prime factor while either n is not 1 or count of prime factors is not k .
To keep track of count of prime factors
Divide n to find next prime factor
s [ i ] is going to store prime factor of i .
Python3 program to find sum of divisors of all the divisors of a natural number .
Returns sum of divisors of all the divisors of n
Calculating powers of prime factors and storing them in a map mp [ ] .
If n is a prime number
For each prime factor , calculating ( p ^ ( a + 1 ) - 1 ) / ( p - 1 ) and adding it to answer .
Driver Code
This function returns repeating sequence of a fraction . If repeating sequence doesn 't exits, then returns empty string
Initialize result
Create a map to store already seen remainders . Remainder is used as key and its position in result is stored as value . Note that we need position for cases like 1 / 6. In this case , the recurring sequence doesn 't start  from first remainder.
Find first remainder
Keep finding remainder until either remainder becomes 0 or repeats
Store this remainder
Multiply remainder with 10
Append rem / denr to result
Update remainder
Driver code
Returns 1 if x has 0 , else 0
Traverse through all digits of x to check if it has 0.
If current digit is 0 , return true
Returns count of numbers from 1 to n with 0 as digit
Initialize count of numbers having 0 as digit .
Traverse through all numbers and for every number check if it has 0.
Driver program
Returns true if square root of n under modulo p exists
One by one check all numbers from 2 to p - 1
Driver Code
Returns largest power of p that divides n !
Initialize result
Calculate x = n / p + n / ( p ^ 2 ) + n / ( p ^ 3 ) + ... .
Driver program
Python 3 program to find factorial of given number
single line to find factorial
Driver Code
Function to get the bit at the ith position
Return true if the bit is set . Otherwise return false
Function to clear the ith bit of the given number N
Create the mask for the ith bit unset
Return the update value
Function to compute the AND sum for each element of an array
Declaring an array of size 32 for storing the count of each bit
Traverse the array arr2 [ ] and store the count of a bit in frequency array
Current bit position
While num is greater than 0
Checks if ith bit is set or not
Increment the count of bit by one
Increment the bit position by one
Right shift the num by one
Traverse in the arr2 [ ]
Store the ith bit value
Total required sum
Traverse in the range [ 0 , 31 ]
Checks if current bit is set
Increment the bitwise sum by frequency [ bit_position ] * value_at_that_bit
Right shift num by one
Left shift vale_at_that_bit by one
Print sum obtained for ith number in arr1 [ ]
Driver Code
Given arr1 [ ]
Given arr2
Size of arr1 [ ]
Size of arr2 [ ]
Function Call
Unsets the rightmost set bit of n and returns the result
Checking whether bit position is set or not
If bit position is found set , we flip this bit by xoring given number and number with bit position set
Driver code
Function to return the bitwise AND of all the odd integers from the range [ 1 , n ]
Initialize result to 1
Starting from 3 , bitwise AND all the odd integers less than or equal to n
Driver code
Function to return the bitwise AND of all the odd integers from the range [ 1 , n ]
Driver code
function to reverse bits of a number
traversing bits of ' n ' from the right
bitwise left shift ' rev ' by 1
if current bit is '1
bitwise right shift ' n ' by 1
required number
Driver code
Return the count of number of ways to split array into two groups such that each group has equal XOR value .
We can split only if XOR is 0. Since XOR of all is 0 , we can consider all subsets as one group .
Driver Program
Function to extract k bits from p position and returns the extracted value as integer
number is from where ' k ' bits are extracted from p position
Python 3 program to find maximum number by swapping extreme bits .
Traverse bits from both extremes
Obtaining i - th and j - th bits
Swapping the bits if lesser significant is greater than higher significant bit and accordingly modifying the number
Driver code
function to check whether ' n ' is a multiple of 4 or not
if true , then ' n ' is a multiple of 4
else ' n ' is not a multiple of 4
Driver Code
Simple solution to calculate square without using * and pow ( )
handle negative input
Initialize result
Add n to res n - 1 times
Driver Code
Python 3 implementation of the above approach
Driver Code
function that calculates the answer
dp [ j ] stores count of i digit stepping numbers ending with digit j .
To store resu1lt of length i - 1 before updating dp [ j ] for length i .
if n is 1 then answer will be 10.
Initialize values for count of digits equal to 1.
Compute values for count of digits more than 1.
If ending digit is 0
If ending digit is 9
For other digits .
stores the final answer
Driver Code
Python3 implementation of the approach
To store first N Catalan numbers
Function to find first n Catalan numbers
Initialize first two values in table
Fill entries in catalan [ ] using recursive formula
Function to return the minimum changes required
Find first n Catalan Numbers
a and b are first two Catalan Sequence numbers
Insert first n catalan elements to set
If catalan element is present in the array then remove it from set
Return the remaining number of elements in the set
Driver code
Function to print the sum of all composite numbers in the array
Iterate for odd indices in the array
Check if the number is composite then add it to sum
return the sum
Function to check for composite numbers
Check if the factors are greater than 2
Check if the number is composite or not
Driver code
Python 3 program to find number of points lie inside or on the circumference of circle for Q queries .
Computing the x ^ 2 + y ^ 2 for each given points and sorting them .
Return count of points lie inside or on circumference of circle using binary search on p [ 0. . n - 1 ]
Driver Code
Compute distances of all points and keep the distances sorted so that query can work in O ( logn ) using Binary Search .
Print number of points in a circle of radius 3.
Print number of points in a circle of radius 32.
python program for above approach
No of odd indices in N - digit number
No of even indices in N - digit number
No of ways of arranging prime number digits in odd indices
No of ways of arranging odd number digits in even indices
returning the total number of ways
Driver code
calling the function
Function to check if the array is spirally sorted or not
Stores start index of the array
Stores end index of an array
If arr [ start ] greater than arr [ end ]
Update start
If arr [ end ] greater than arr [ start ]
Update end
Driver Code
Function Call
Function to print all strings that can be typed using keys of a single row in a QWERTY Keyboard
Stores row number of all possible character of the strings
Traverse the array
If current string is not an empty string
Sets true / false if a string can be typed using keys of a single row or not
Stores row number of the first character of current string
Stores length of word
Traverse current string
If current character can 't be  typed using keys of rowNum only
Update flag
If current string can be typed using keys from rowNum only
Print the string
Driver Code
Python3 program of the above approach
Function to find the count of the subsequence of given type
Stores the count of quadruples
Generate all possible combinations of quadruples
Driver Code
Python3 program for the above approach
Function to find the character repeats with minimum distance
Stores the first and last index
Intialize with - 1
Get the values of last and first occurence
Update the first index
Update the last index
Intialize the min
Get the minimum
Values must not be same
Update the minimum distance
return ans
Driver Code
Function call
Python 3 implementation of the approach
Function to return the minimum steps required to reach the end of the matrix
Array to determine whether a cell has been visited before
Queue for bfs
To store the depth of search
BFS algorithm
Current queue size
Top - most element of queue
To store index of cell for simplicity
Base case
If we reach ( n - 1 , n - 1 )
Marking the cell visited
Pushing the adjacent cells in the queue that can be visited from the current cell
Driver code
A Python 3 program to find largest gap between two elements in an array .
function to solve the given problem
Driver Code
function to solve the given problem
finding maximum and minimum of an array
Driver code
Function for replacing the string
initialize a string of length n
Traverse through all characters of string
assign the value to string r from last index of string s
if s [ i ] is a consonant then print r [ i ]
Driver Code
Function to find if given strings are same or not
Base Condition
Stores frequency of characters of the str1 and str2
Traverse strings str1 & str2 and store frequencies in a [ ] and b [ ]
Check if both strings have same characters or not
If a character is present in one and is not in another string , return false
Sort the array a [ ] and b [ ]
Check arrays a and b contain the same frequency or not
If the frequencies are not the same after sorting
At this point , str1 can be converted to str2
Driver Code
Function to find the minimum number operations
Insert the three numbers in array
Sort the array
Case 2
Case 1
Driver Code
Given A , B , C
Function Call
Function to return the index of the key in arr [ l . . h ] if the key is present otherwise return - 1
The tricky case , just update left and right
If arr [ l ... mid ] is sorted
As this subarray is sorted , we can quickly check if key lies in any of the halves
If key does not lie in the first half subarray then divide the other half into two subarrays such that we can quickly check if key lies in the other half
If arr [ l . . mid ] first subarray is not sorted then arr [ mid ... h ] must be sorted subarray
Driver code
Function to return the sorted string
Vectors to store the lowercase and uppercase characters
Sort both the vectors
If current character is lowercase then pick the lowercase character from the sorted list
Else pick the uppercase character
Return the sorted string
Driver code
Function to check if the condition holds
Get the length of the string
sort the given string
Iterate for every index and check for the condition
If are not consecutive
Driver code
1 st example
2 nd example
function to find minimum elements needed .
calculating HALF of array sum
sort the array in descending order .
current sum greater than sum
driver code
Function to check if its possible to make all array elements equal or not
Stores the sum of the array
Traverse the array
If sum is divisible by N
Otherwise , not possible to make all array elements equal
Given array
Size of the array
Function to find the maximum sum of GCD ( arr [ i ] , i ) by rearranging the array
Stores maximum sum of GCD ( arr [ i ] , i ) by rearranging the array elements
Update res
Driver Code
Function to find the maximum sided polygon that can be inscribed
Base Case
Return n / 2 if n is even Otherwise , return - 1
Driver Code
Given N
Function Call
Function to find the mean of pair product array of arr [ ]
Initializing suffix sum array
Build suffix sum array
Size of pairProductArray
Stores sum of pairProductArray
Store the mean
Find mean of pairProductArray
Return the resultant mean
Driver Code
Given array arr [ ]
Function Call
Function to return the value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- -- * 1 ]
Function to find the minimum count of paths from top left to bottom right by placing K 1 s in the matrix
Count of ways without 1 s
Count of paths from starting poto mid point
Count of paths from mid poto end point
Driver Code
Function to find maximum count of operations
Initialize count by 0
Iterate over remaining pairs
Check if first operation is applicable
Check if 2 nd operation is applicable
Otherwise
Return the count of operations
Driver Code
Function to find the number of substrings that can be formed using given characters
Boolean array for storing the available characters
Mark indices of all available characters as 1
Initialize lastPos as - 1
Initialize ans with the total no of possible substrings
Traverse the string from left to right
If the current character is not present in B
Subtract the total possible substrings
Update the value of lastpos to current index
Print the final answer
Given String
Given character array
Function call
Function to return minimum cost to reach destination
Initialize cost to 0
going backwards until we reach initial position
if 2 * X jump is better than X + 1
if X + 1 jump is better
Driver program
Function to find number of ways to reach from node 1 to 1 again , after moving exactly K edges
Initialize a dp [ ] array , where dp [ i ] stores number of ways to reach at a i node
Base Case
Iterate for the number of edges moved
Sum will store number of ways to reach all the nodes
Iterate for every possible state for the current step
Update the value of the dp array after travelling each edge
Print dp [ 0 ] as the answer
Driver Code
Given Input
Function Call
Function to calculate minimum cost of buying least X chocolates
Base Case
Include the i - th box
Exclude the i - th box
Return the minimum of the above two cases
Driver Code
Given array and value of X
Store the size of the array
Print answer
Function to calculate the probability for the given sum to be equal to sum in N throws of dice
Base cases
Driver Code
Print the answer
Function to find the minimum number to steps to reduce N to 0
Base case
Recursive Call to count the minimum steps needed
Return the answer
Given Number N
Function Call
