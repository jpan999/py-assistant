Python3 implementation of the above approach
Stores the maximum prefix sum of the array A [ ]
Traverse the array A [ ]
Stores the maximum prefix sum of the array B [ ]
Traverse the array B [ ]
Driver code
Python3 program for the above approach
Function to check if N can be represented as sum of two perfect cubes or not
If it is same return true ;
If the curr smaller than n increment the lo
If the curr is greater than curr decrement the hi
Driver Code
Function call to check if N can be represented as sum of two perfect cubes or not
Python3 program for the above approach
Function to generate all prime numbers upto 10 ^ 6
Initialize sieve [ ] as 1
Iterate over the range [ 2 , N ]
If current element is non - prime
Make all multiples of i as 0
Function to construct an array A [ ] satisfying the given conditions
Stores the resultant array
Stores all prime numbers
Sieve of Erastosthenes
Append the integer i if it is a prime
Indicates current position in list of prime numbers
Traverse the array arr [ ]
If already filled with another prime number
If A [ i ] is not filled but A [ ind ] is filled
Store A [ i ] = A [ ind ]
If none of them were filled
To make sure A [ i ] does not affect other values , store next prime number
Print the resultant array
Driver Code
Function Call
Function to find Nth number in base 9
Stores the Nth number
Iterate while N is greater than 0
Update result
Divide N by 9
Multiply p by 10
Return result
Driver Code
Python3 implementation of the approach
Function to check if the integer A is a rotation of the integer B
Stores the count of digits in A
Stores the count of digits in B
If dig1 not equal to dig2
Stores position of first digit
Stores the first digit
Rotate the digits of the integer
If A is equal to B
If A is equal to the initial value of integer A
Driver code
Function to count the number of unique quadruples from an array that satisfies the given condition
Hashmap to store the product of pairs
Store the count of required quadruples
Traverse the array arr [ ] and generate all possible pairs
Store their product
Pair ( a , b ) can be used to generate 8 unique permutations with another pair ( c , d )
Increment umap [ prod ] by 1
Print the result
Driver Code
Python3 implementation of the above Approach
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
Initialize Result
Update x if x >= MOD to avoid multiplication overflow
If y is odd , multiply x with result
y = y / 2
Change x to x ^ 2
Utility function to find the Total Number of Ways
Number of Even Indexed Boxes
Number of partitions of Even Indexed Boxes
Number of ways to distribute objects
Driver Code
N = number of boxes M = number of distinct objects
Function call to get Total Number of Ways
Function to check if the graph constructed from given array contains a cycle or not
Traverse the array
If arr [ i ] is less than arr [ i - 1 ] and arr [ i ]
Driver Code
Given array
Size of the array
Function to maximize the first array element
Traverse the array
Initialize cur_val to a [ i ]
If all operations are not over yet
If current value is greater than zero
Incrementing first element of array by 1
Decrementing current value of array by 1
Decrementing number of operations by i
If current value is zero , then break
Print first array element
Driver Code
Given array
Size of the array
Given K
Prints the maximum possible value of the first array element
Python3 program of the above approach
Function to find the gcd of the two numbers
Function to find distinct elements in the array by repeatidely inserting the absolute difference of all possible pairs
Stores largest element of the array
Traverse the array , arr [ ]
Update max_value
Stores GCD of array
Update GCDArr
Stores distinct elements in the array by repeatedely inserting absolute difference of all possible pairs
Given array arr [ ]
Function to return number of moves to convert matrix into chessboard
Size of the matrix
Traverse the matrix
Initialize rowSum to count 1 s in row
Initialize colSum to count 1 s in column
To store no . of rows to be corrected
To store no . of columns to be corrected
Traverse in the range [ 0 , N - 1 ]
Check if rows is either N / 2 or ( N + 1 ) / 2 and return - 1
Check if rows is either N / 2 or ( N + 1 ) / 2 and return - 1
Check if N is odd
Check if column required to be corrected is odd and then assign N - colSwap to colSwap
Check if rows required to be corrected is odd and then assign N - rowSwap to rowSwap
Take min of colSwap and N - colSwap
Take min of rowSwap and N - rowSwap
Finally return answer
Driver Code
Given matrix
Function Call
Print answer
Function to count of set bit in N
Stores count of set bit in N
Iterate over the range [ 0 , 31 ]
If current bit is set
Update result
Driver Code
Python 3 program to implement the above approach
Function to find the value of the expression ( N ^ 1 * ( N 1 ) ^ 2 * ... * 1 ^ N ) % ( 109 + 7 ) .
factorial [ i ] : Stores factorial of i
Base Case for factorial
Precompute the factorial
dp [ N ] : Stores the value of the expression ( N ^ 1 * ( N 1 ) ^ 2 * ... * 1 ^ N ) % ( 109 + 7 ) .
Update dp [ i ]
Return the answer .
Driver Code
Function call
Function to print minimum number of candies required
Distribute 1 chocolate to each
Traverse from left to right
Traverse from right to left
Initialize sum
Find total sum
Return sum
Driver Code
Given array
Size of the given array
Python3 program to implement the above approach
Function to construct an array of unique elements whose LCM is N
Stores array elements whose LCM is N
Iterate over the range [ 1 , sqrt ( N ) ]
If N is divisible by i
Insert i into newArr [ ]
If N is not perfect square
Sort the array newArr [ ]
Print array elements
Driver Code
Given N
Function Call
Function to calculate 5 ^ p
Stores the result
Multiply 5 p times
Return the result
Function to count anumbers upto N having odd digits at odd places and even digits at even places
Stores the count
Stores the digits of N
Insert the digits of N
Reverse the vector to arrange the digits from first to last
Stores count of digits of n
Stores the count of numbers with i digits
If the last digit is reached , subtract numbers eceeding range
Iterate over athe places
Stores the digit in the pth place
Stores the count of numbers having a digit greater than x in the p - th position
Calculate the count of numbers exceeding the range if p is even
Calculate the count of numbers exceeding the range if p is odd
Subtract the count of numbers exceeding the range from total count
If the parity of p and the parity of x are not same
Add count of numbers having i digits and satisfies the given conditions
Return the total count of numbers tin
Function to calculate the count of numbers from given range having odd digits places and even digits at even places
Driver Code
Function to find the sum of First N natural numbers with alternate signs
Stores sum of alternate sign of First N natural numbers
If is an even number
Update alternateSum
If i is an odd number
Update alternateSum
Driver Code
Function to return gcd of a and b
Base Case
Recursive GCD
Function to calculate the sum of all numbers till N that are coprime with N
Stores the resultant sum
Iterate over [ 1 , N ]
If gcd is 1
Update sum
Return the final sum
Driver Code
Given N
Function Call
Function to prthe required count of pairs excluding the current element
Store the frequency
Find all the count
Delete the contribution of each element for equal pairs
Print the answer
Driver Code
Given array arr [ ]
Function call
Function that prints the Mode values
Map used to mp integers to its frequency
To store the maximum frequency
To store the element with the maximum frequency
Loop used to read the elements one by one
Updates the frequency of that element
Checks for maximum Number of occurrence
Updates the maximum frequency
Updates the Mode
Driver Code
Function call
Recursive function to return the value of ( x ^ n ) % m
Base Case
If N is even
Else N is odd
Function to find modular inverse of a number x under modulo m
Using Fermat 's little theorem
Function to count of numbers formed by shuffling the digits of a large number N
Modulo value
Array to store the factorials upto the maximum value of N
Store factorial of i at index i
To store count of occurrence of a digit
Increment the count of digit occured
Assign the factorial of length of input
Multiplying result with the modulo multiplicative inverse of factorial of count of i
Print the result
Given number as string
Function call
To store the smallest prime factor till 10 ^ 5
Function to compute smallest prime factor array
Initialize the spf array first element
Marking smallest prime factor for every number to be itself
Separately marking smallest prime factor for every even number as 2
Checking if i is prime
Marking SPF for all numbers divisible by i
Marking spf [ j ] if it is not previously marked
Function that finds minimum operation
Create a spf [ ] array
Map created to store the unique prime numbers
To store the result
To store minimum operations
To store every unique prime number
Erase 1 as a key because it is not a prime number
First Prime Number
Frequency is divisible by K then insert primeNum in the result [ ]
Print the elements if it exists
Driver Code
Given array arr [ ]
Given K
Function Call
Function to print the first K multiples of N
Print the value of N * i
Iterate each bit of N and add pow ( 2 , pos ) , where pos is the index of each set bit
Check if current bit at pos j is fixed or not
For next set bit
Driver Code
Function to calculate b
sum of array x
sum of array y
for sum of product of x and y
sum of square of x
Function to find the least regression line
Finding b
Calculating a
Printing regression line
Statistical data
Function that returns the count of repeating digits of the given number
Initialize a variable to store count of Repeating digits
Initialize cnt array to store digit count
Iterate through the digits of N
Retrieve the last digit of N
Increase the count of digit
Remove the last digit of N
Iterate through the cnt array
If frequency of digit is greater than 1
Increment the count of Repeating digits
Return count of repeating digit
Given array arr [ ]
Function call
Function for finding the temperature
Store Day1 - Day2 in diff
Remaining from s will be Day1
Print Day1 and Day2
Driver Code
Functions
Function to find two numbers whose sum is N and do not contain any digit as k
Check every number i and ( n - i )
Check if i and n - i doesn 't  contain k in them print i and n-i
check if flag is 0 then print - 1
Driver Code
Given N and K
Function Call
Function to find the value of P * Q ^ - 1 mod 998244353
Loop to find the value until the expo is not zero
Multiply p with q if expo is odd
Reduce the value of expo by 2
Driver code
Function call
Function that print two numbers with the sum X and maximum possible LCM
If X is odd
If X is even
If floor ( X / 2 ) is even
If floor ( X / 2 ) is odd
Print the result
Driver Code
Given Number
Function call
Function to find the longest subarray with sum is not divisible by k
left is the index of the leftmost element that is not divisible by k
sum of the array
Find the element that is not multiple of k
left = - 1 means we are finding the leftmost element that is not divisible by k
Updating the rightmost element
Update the sum of the array up to the index i
Check if the sum of the array is not divisible by k , then return the size of array
All elements of array are divisible by k , then no such subarray possible so return - 1
length of prefix elements that can be removed
length of suffix elements that can be removed
Return the length of subarray after removing the elements which have lesser number of elements
Driver Code
Python3 implementation to find minimum steps to convert X to Y by repeated division and multiplication
Check if X is greater than Y then swap the elements
Check if X equals Y
Driver code
Python3 program for the above approach
Function to count the quadruples
Counter variable
Map to store the sum of pair ( a ^ 2 + b ^ 2 )
Iterate till N
Calculate a ^ 2 + b ^ 2
Increment the value in map
Check if this sum was also in a ^ 2 + b ^ 2
Return the count
Driver Code
Given N
Function Call
function to find the number of pairs satisfying the given cond .
count variable to store the count of possible pairs
Nested loop to find out the possible pairs
Check if the given condition is satisfied or not . If yes then increment the count .
Return the count value
Size of the arrays
Initialise the arrays
Python3 program of the above approach
Function to find the number of pairs .
Array c [ ] where c [ i ] = a [ i ] - b [ i ]
Sort the array c
Initialise answer as 0
Iterate from index 0 to n - 1
If c [ i ] <= 0 then in the sorted array c [ i ] + c [ pos ] can never greater than 0 where pos < i
Find the minimum index such that c [ i ] + c [ j ] > 0 which is equivalent to c [ j ] >= - c [ i ] + 1
Add ( i - pos ) to answer
Return the answer
Driver code
Number of elements in a and b
Array a
Array b
Function to find the K - value for every index in the array
Multiset to store the array in the form of red - black tree
Iterating over the array
Inserting the current value in the multiset
Condition to check if the smallest value in the set is less than it 's size
Erase the smallest value
h - index value will be the size of the multiset
Driver Code
Array
Size of the array
Function call
Function to find count of prime
Find maximum value in the array
Find and store all prime numbers up to max_val using Sieve Create a boolean array " prime [ 0 . . n ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
Remaining part of SIEVE
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Function to print Non - repeating primes
Precompute primes using Sieve
Create HashMap to store frequency of prime numbers
Traverse through array elements and Count frequencies of all primes
Traverse through map and print non repeating primes
Driver code
Function to generate prefix product array
Update the array with the product of prefixes
Print the array
Driver Code
Function to find the number of ways to distribute N items among 3 people
No distribution possible
Total number of ways to distribute N items among 3 people
Store the number of distributions which are not possible
Count possibilities of two persons receiving the maximum
If N is divisible by 3
Return the final count of ways to distribute
Driver Code
Function to check if n is prime
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to check if the number is Magnanimous or not
Converting the number to string
Finding length of string
Number should not be of single digit
Loop to find all left and right part of the string
Driver code
Python3 program for the above approach
Function to precompute the position of every prime number using Sieve
0 and 1 are not prime numbers
Variable to store the position
Incrementing the position for every prime number
Function to get sum of digits
Function to check whether the given number is Honaker Prime number or not
Precompute the prime numbers till 10 ^ 6
Given Number
Function Call
Python3 implementation to check if the sum of matrix is prime or not
Function to check whether a number is prime or not
Corner case
Check from 2 to n - 1
Function for to find the sum of the given matrix
Driver Code
Function to find the sum
Calculate sum - series for every natural number and add them
Driver code
Function to find the sum
Driver code
Function to check if the number N having all digits lies in the set ( 0 , 1 , 8 )
Function to check if the number N is palindrome
Function to check if a number N is Tetradic
Function to generate all primes and checking whether number is Tetradic or not
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Print all Tetradic prime numbers
checking whether the given number is prime Tetradic or not
Driver Code
Function to concatenate two integers into one
Convert both the integers to string
Concatenate both strings
Convert the concatenated string to integer
return the formed integer
Function to check if N is a Astonishing number
Loop to find sum of all integers from i till the sum becomes >= n
variable to store sum of all integers from i to j and check if sum and concatenation equals n or not
finding concatenation of i and j
condition for Astonishing number
Given Number
Function Call
Function to check if the digits in the number is the same number of digits
Loop to iterate over the digits of the number N
Loop to iterate over the map
Driver code
Function to check
Function to calculate the sum upto Nth term
Stores the sum of the series
Stores the product of natural numbers upto the current term
Stores the sum of natural numbers upto the upto current term
Generate the remaining terms and calculate sum
Update the sum
Return the sum
Driver Code
Function to count the number of elements of array which are not divisible by any other element in the array arr [ ]
Iterate over the array
Check if the element is itself or not
Check for divisibility
Return the final result
Driver Code
Given array
Function Call
Python3 program for the above approach
Function to find the smallest N - digit number divisible by N
Return the smallest N - digit number calculated using above formula
Given N
Function Call
Function to count the pairs in the array such as there is at least one even element in each pair
Generate all possible pairs and increment then count if the condition is satisfied
Driver code
Function call
Function to count the pairs in the array such as there is at least one even element in each pair
Store count of even and odd elements
Check element is even or odd
Driver Code
Python program for the above approach
Function to check if n is a composite number
Corner cases
This is checked to skip middle 5 numbers
Function to check if N is a Giuga Number
N should be composite to be a Giuga Number
Print the number of 2 s that divide n
N must be odd at this point . So we can skip one element
While i divides n , print i and divide n
This condition is to handle the case when n is a prime number > 2
Given Number N
Function Call
Python3 program for the above approach
Function to check droll numbers
To store sum of even prime factors
To store sum of odd prime factors
Add the number of 2 s that divide n in sum_even
N must be odd at this point . So we can skip one element ( Note i = i + 2 )
While i divides n , print i and divide n
This condition is to handle the case when n is a prime number greater than 2
Condition to check droll number
Given Number N
Function Call
Python3 program to count all pairs of divisors such that their sum is coprime with N
Function to count all valid pairs
initialize count
Check if sum of pair and n are coprime
Return the result
Driver code
Function to find if it is possible to make A equal to B
Driver Code
Function Call
Python3 program to maximize the sum of minimum difference of divisors of nodes in an n - ary tree
Array to store the result at each node
Function to get minimum difference between the divisors of a number
Iterate from square root of N to N
Return absolute difference
DFS function to calculate the maximum sum
Store the min difference
Add the maximum of all children to sub [ u ]
Return maximum sum of node ' u ' to its parent
Driver code
Function to check if N is a centered cubic number
Iterating from 1
Infinite loop
Finding ith_term
Checking if the number N is a centered cube number
If ith_term > N then N is not a centered cube number
Incrementing i
Driver code
Function call
Function to calculate product of geometric series
Initialise final product with 1
Multiply product with each term stored in a
Return the final product
Given first term and common ratio
Number of terms
Function Call
Function to find GCD of a & b using Euclid Lemma
Base Case
Function to find the LCM of all elements in arr [ ]
Initialize result
Iterate arr [ ] to find LCM
Return the final LCM
Function to find the sum of N fraction in reduced form
To store the sum of all final numerators
Find the LCM of all denominator
Find the sum of all N numerators & denominators
Add each fraction one by one
Find GCD of final numerator and denominator
Convert into reduced form by dividing from GCD
Print the final fraction
Given N
Given Numerator
Given Denominator
Function call
Python3 program to find minimum possible lcm from any pair
Function to compute GCD of two numbers
Function that return minimum possible lcm from any pair
Fix the ith element and iterate over all the array to find minimum LCM
Driver code
Python3 implementation to find the values of x and y for the given equation with integer N
Function which find required x & y
Upper limit of x & y , if such x & y exists
num1 stores x ^ 4
num2 stores y ^ 4
If condition is satisfied the print and return
If no such pair exists
Driver code
Python3 program for the above approach
Function to check if count of even and odd divisors are equal
To store the count of even factors and odd factors
Loop till [ 1 , sqrt ( N ) ]
If divisors are equal add only one
Check for even divisor
Odd divisor
Check for both divisor i . e . , i and N / i
Check if i is odd or even
Check if N / i is odd or even
Return true if count of even_div and odd_div are equals
Given Number
Function Call
Utility function to check if a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function that returns true if n is a Balanced prime
If n is not a prime number or n is the first prime then return false
Initialize previous_prime to n - 1 and next_prime to n + 1
Find next prime number
Find previous prime number
Arithmetic mean
If n is a weak prime
Driver code
Python3 implementation to count the number of nodes having odd number of divisors for each query
Adjacency list for tree .
Array for values and answer at ith node .
Function to check whether N has odd divisors or not
DFS function to pre - compute the answers
Initialize the count
Repeat for every child
Increase the count if current node has odd number of divisors
Driver Code
Adjacency List
Function call
Python3 implementation to find the minimum cost to make all array elements equal
Checks if the value is less than middle element of the array
Function that returns the cost of making all elements equal to current element
Compute the lower bound of current element
Calculate the requirement of add operation
Calculate the requirement of subtract operation
Compute minimum of left and right
Computing the total cost of add and subtract operations
Function that prints minimum cost of making all elements equal
Sort the given array
Calculate minimum from a + r and m
Compute prefix sum and store in pref array
Find the minimum cost from the given elements
Finding the minimum cost from the other cases where minimum cost can occur
Printing the minimum cost of making all elements equal
Driver Code
Function call
Python3 program to count the number of integers upto N which are of the form of binary representations
Function to return the count
If the current last digit is 1
Add 2 ^ ( ctr - 1 ) possible integers to the answer
If the current digit exceeds 1
Set answer as 2 ^ ctr - 1 as all possible binary integers with ctr number of digits can be obtained
Driver Code
Function to return the count
PreCompute and store the powers of 2
If the current last digit is 1
Add 2 ^ ( ctr - 1 ) possible integers to the answer
If the current digit exceeds 1
Set answer as 2 ^ ctr - 1 as all possible binary integers with ctr number of digits can be obtained
Driver code
Centered_Hexadecagonal number function
Formula to calculate nth Centered_Hexadecagonal number & return it into main function .
Function to find the sum of the first N Centered Hexadecagonal number
Variable to store the sum
Loop to iterate through the first N numbers
Find the sum
Driver Code
display first Nth Centered_Hexadecagonal number
Function to find N - th centered heptagonal number
Formula to calculate nth centered heptagonal number
Function to find the sum of the first N centered heptagonal numbers
Variable to store the sum
Iterate through the range 1 to N
Driver code
Function to find the N - th Centered Dodecagonal number
Formula to calculate nth Centered_Dodecagonal number
Function to find the sum of the first N Centered_Dodecagonal number
Variable to store the sum
Iterating from 1 to N
Finding the sum
Driver code
Function to find N - th Centered Octagonal number
Formula to calculate nth centered Octagonal number
Function to find the sum of the first N Centered Octagonal numbers
Variable to store the sum
Iterating through the first N numbers
Driver code
Function to find the N - th centred decagonal number
Formula to calculate nth Centered_decagonal number & return it into main function .
Function to find the sum of the first N Centered decagonal numbers
Variable to store the sum
Iterating through the range
Driver code
display first Nth Centered_decagonal number
Function to find the N - th Centered octadecagonal number
Formula to calculate nth centered octadecagonal number
Function to find the sum of the first N Centered octadecagonal numbers
Variable to store the sum
Iterating through the range 1 to N
Driver code
Function to find the Centered_Pentadecagonal number
Formula to calculate N - th Centered_Pentadecagonal number
Function to find the sum of the first N Centered_Pentadecagonal numbers
Variable to store the sum
Driver code
Python3 program for the above approach
Function to check if N is a octagonal number
Condition to check if the number is a octagonal number
Driver Code
Given number
Function call
Python3 program for the above approach
Function to check if N is a pentadecagon number
Condition to check if the number is a pentadecagon number
Driver Code
Given number
Function call
Python3 program for the above approach
Function to check if N is a Tetradecagonal Number
Condition to check if the number is a tetradecagonal number
Given Number
Function call
Function to calculate the N - th Icosagonal number
Formula to calculate nth Icosagonal number & return it
Function to find the sum of the first N Icosagonal numbers
Variable to store the sum
Loop to iterate through the first N values and find the sum of first N Icosagonal numbers
function to get the Icosagonal_num
Driver Code
Display the sum of first N Icosagonal number
Function to find the Centered_Pentagonal number
Formula to calculate nth Centered_Pentagonal number & return it into main function .
Function to find the sum of the first N Centered_Pentagonal numbers
To get the sum
Function to get the Centered_Pentagonal_num
Driver Code
display first Nth Centered_Pentagonal number
Function to calculate the N - th Centered tridecagonal number
Formula to calculate Nth Centered tridecagonal number & return it
Function to find the sum of the first N Centered tridecagonal numbers
Variable to store the sum
Loop to iterate and find the sum of first N Centered tridecagonal numbers
Driver Code
Python3 program to check if N is a concentric hexagonal number
Function to check if the number is a concentric hexagonal number
Condition to check if the number is a concentric hexagonal number
Driver code
Function call
A utility function that find the Prime Numbers till N
Resize the Prime Number
Loop till sqrt ( N ) to find prime numbers and make their multiple false in the bool array Prime
Function that returns the count of SPP ( Sexy Prime Pair ) Pairs
Find the maximum element in the given array arr [ ]
Function to calculate the prime numbers till N
To store the count of pairs
To store the frequency of element in the array arr [ ]
Sort before traversing the array
Traverse the array and find the pairs with SPP ( Sexy Prime Pair ) s
If current element is Prime , then check for ( current element + 6 )
Return the count of pairs
Driver code
Function call to find SPP ( Sexy Prime Pair ) s pair
Function to find the number of ways
Check if number is less than 2
Calculate the sum
Driver code
Python3 implementation to check that a integer is a power of two
Function to check if the number is a power of two
Driver code
Function to count the pairs
Initializing answer with 1
Iterating through bits of x
Check if bit is 1
Multiplying ans by 3 if bit is 1
Driver code
Python3 implementation for above approach
Function to find the Kth not divisible by N
Lowest possible value
Highest possible value
To store the Kth non divisible number of N
Using binary search
Calculating mid value
Sol would have the value by subtracting all multiples of n till mid
Check if sol is greater than k
H should be reduced to find minimum possible value
Check if sol is less than k then L will be mid + 1
Check if sol is equal to k
ans will be mid
H would be reduced to find any more possible value
Print the answer
Driver Code
Function call
Function to print the required pair
Print the pair
Driver code
Function to check number is autobiographical
Convert integer to string
Iterate for every digit to check for their total count
Check occurrence of every number and count them
Check if any position mismatches with total count them return with false else continue with loop
Function to return the length of the largest subarray whose every element is a autobiographical number
Utility function which checks every element of array for autobiographical number
Check if element arr [ i ] is an autobiographical number
Increment the current length
Update max_length value
Return the final result
Driver code
Python3 implementation of nodes at prime height in the given tree
To store Prime Numbers
To store height of each node
Function to find the prime numbers till 10 ^ 5
Traverse all multiple of i and make it false
Function to perform dfs
Store the height of node
Function to find the nodes at prime height
To precompute prime number till 10 ^ 5
Check if height [ node ] is prime
Driver code
Number of nodes
Edges of the tree
Python3 program to find all prime adam numbers in the given range
Reversing a number by taking remainder at a time
Function to check if a number is a prime or not
Iterating till the number
Checking for factors
Returning 1 if the there are no factors of the number other than 1 or itself
Function to check whether a number is an adam number or not
Reversing given number
Squaring given number
Squaring reversed number
Reversing the square of the reversed number
Checking if the square of the number and the square of its reverse are equal or not
Function to find all the prime adam numbers in the given range
If the first number is greater than the second number , print invalid
Iterating through all the numbers in the given range
Checking for prime number
Checking for Adam number
Driver code
Function to get sum of digits of a number
Function to check if the number is peculiar
Store a duplicate of n
Driver code
Function to calculate the sum of digits
Loop to iterate through every digit of the number
Returning the sum of digits
Function to calculate the reverse of a number
Loop to calculate the reverse of the number
Return the reverse of the number
Function to print the first N numbers such that every number and the reverse of the number is divisible by its sum of digits
Loop to continuously check and generate number until there are n outputs
Variable to hold the sum of the digit of the number
Computing the reverse of the number
Checking if the condition satisfies . Increment the count and print the number if it satisfies .
Driver code
Function to create and print the two sets
No such split possible for N <= 2
Print the first set consisting of even elements
Print the second set consisting of odd ones
Driver Code
Python3 implementation to Count the Nodes in the given tree whose weight is a powerful number
Function to check if the number is powerful
First divide the number repeatedly by 2
Check if only 2 ^ 1 divides n , then return False
Check if n is not a power of 2 then this loop will execute
Find highest power of " factor " that divides n
Check if only factor ^ 1 divides n , then return False
n must be 1 now if it is not a prime number . Since prime numbers are not powerful , we return False if n is not 1.
Function to perform dfs
Check if weight of the current Node is a powerful number
Driver code
Weights of the Node
Edges of the tree
Function to compute all way to fill the boundary of all sides of the unit square
Count possible ways to fill all upper and left side of the rectangle M * N
Count possible ways to fill all side of the all squares unit size
Number of rows
Number of columns
Return Nth number with absolute difference between all adjacent digits at most 1.
To store all such numbers
Enqueue all integers from 1 to 9 in increasing order .
Perform the operation N times so that we can get all such N numbers .
Store the front element of queue , in array and pop it from queue .
If the last digit of dequeued integer is not 0 , then enqueue the next such number .
Enqueue the next such number
If the last digit of dequeued integer is not 9 , then enqueue the next such number .
Driver Code
Function that find the unique element in the array arr [ ]
Store all unique element in set
Sum of all element of the array
Sum of element in the set
Print the unique element using formula
Driver Code
Function call
Function to find the cubic equation whose roots are a , b and c
Find the value of coefficient
Print the equation as per the above coefficients
Driver Code
Function Call
Python3 program to implement Gill 's method
A sample differential equation " dy / dx ▁ = ▁ ( x ▁ - ▁ y ) /2"
Finds value of y for a given x using step size h and initial value y0 at x0
Count number of iterations using step size or height h
Initial value of y ( 0 )
Iterate for number of iteration
Value of K1
Value of K2
Value of K3
Value of K4
Find the next value of y ( n + 1 ) using y ( n ) and values of K in the above steps
Update next value of x
Return the final value of dy / dx
Driver Code
Recursive function to print from N to 1
Driver code
Function to find the values
Calculate the LCM
Calculate the multiples of lcm
Find the values which satisfies the given condition
Subtract the extra values
Return the final result
Driver code
Python3 program to check if two numbers are present in an array then their AM and HM are also present . Finally , find the GM of the numbers
Function to find the arithmetic mean of 2 numbers
Function to find the harmonic mean of 2 numbers
Following function checks and computes the desired results based on the means
Calculate means
Hash container ( set ) to store elements
Insertion of array elements in the set
Conditionals to check if numbers are present in array by Hashing
Conditionals to check if the AM and HM of the numbers are present in array
If all conditions are satisfied , the Geometric Mean is calculated
If numbers are found but the respective AM and HM are not found in the array
If none of the conditions are satisfied
Driver Code
Function that print number of moves required
Calculate modulo
Print the required answer
Driver Code
Initialise A and B
Function to calculate the Pythagorean triplet in O ( n )
Iterate a from 1 to N - 1.
Calculate value of b
The value of c = n - a - b
Driver code
Function call
Python3 program to check if there exists a number with X factors out of which exactly K are prime
Function to check if such number exists
To store the sum of powers of prime factors of X which determines the maximum count of numbers whose product can form X
Determining the prime factors of X
To check if the number is prime
If X is 1 , then we cannot form a number with 1 factor and K prime factor ( as K is atleast 1 )
If X itself is prime then it can be represented as a power of only 1 prime factor w0hich is X itself so we return true
If sum of the powers of prime factors of X is greater than or equal to K , which means X can be represented as a product of K numbers , we return true
In any other case , we return false as we cannot form a number with X factors and K prime factors
Driver code
A Tree node
Utility function to create a new node
Vector to store all the prime numbers
Function to store all the prime numbers in an array
Create a boolean array " prime [ 0 . . N ] " and initialize all the entries in it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiples of p and are less than p ^ 2 are already marked .
Function to check whether Path is Co - prime or not
Iterating through the array to find the maximum element in the array
Incrementing the variable if any of the value has a factor
If not co - prime
Function to print a Co - Prime path
Function to find co - prime paths of binary tree
Base case
Store the value in path vector
Recursively call for left sub tree
Recursively call for right sub tree
Condition to check , if leaf node
Condition to check , if path co - prime or not
Print co - prime path
Remove the last element from the path vector
Function to find Co - Prime paths In a given binary tree
To save all prime numbers
Function call
Driver code
Create Binary Tree as shown
Print Co - Prime Paths
Python3 implementation to find the number of subsets with equal bitwise AND , OR and XOR values
Function to find the number of subsets with equal bitwise AND , OR and XOR values
Traverse through all the subsets
Finding the subsets with the bits of ' i ' which are set
Computing the bitwise AND
Computing the bitwise OR
Computing the bitwise XOR
Comparing all the three values
Driver code
Function to find the number of subsets formed by the given value K
Count is used to maintain the number of continuous K 's
Iterating through the array
If the element in the array is equal to K
count * ( count + 1 ) / 2 is the total number of subsets with only K as their element
Change count to 0 because other element apart from K has been found
To handle the last set of K 's
Driver code
Function to convert a decimal number to a ternary number
Base case
Finding the remainder when N is divided by 3
Recursive function to call the function for the integer division of the value N / 3
Handling the negative cases
Function to convert the decimal to ternary
If the number is greater than 0 , compute the ternary representation of the number
Driver Code
Function to get the number
remainder can ' t ▁ be ▁ larger ▁ ▁ than ▁ the ▁ largest ▁ number , ▁ ▁ if ▁ so ▁ then ▁ answer ▁ doesn ' t exist .
reduce number by x
finding the possible number that is divisible by y
this number is always <= x as we calculated over z - x
initialise the three integers
Function to find conjugate of a complex number
store index of '-
print the result
initialise the complex number
Python 3 implementation of the above approach
Store the frequency of the array elements
Store the sum of frequency of elements greater than the current element
Driver code
Python program to find minimum operations required to make two numbers equal
Function to return the minimum operations required
Keeping B always greater
Reduce B such that gcd ( A , B ) becomes 1.
Driver code
Function to determine the quadrant of a complex number
Storing the index of '+
Storing the index of '-
Finding the real part of the complex number
Finding the imaginary part of the complex number
Driver code
Python3 implementation to find the sum and product of all of the Fibonacci nodes in a singly linked list
Node of the singly linked list
Function to insert a node at the beginning of the singly Linked List
Allocate new node
Link the old list to the new node
Move the head to point the new node
Function that returns the largest element from the linked list .
Declare a max variable and initialize with INT_MIN
Check loop while head not equal to NULL
If max is less then head -> data then assign value of head -> data to max otherwise node points to next node .
Function to create a hash table to check Fibonacci numbers
Inserting the first two numbers in the hash
Loop to add Fibonacci numbers upto the maximum element present in the linked list
Function to find the required sum and product
Find the largest node value in Singly Linked List
Creating a set containing all the fibonacci numbers upto the maximum data value in the Singly Linked List
Traverse the linked list
If current node is fibonacci
Find the sum and the product
Driver code
Create the linked list 15 -> 16 -> 8 -> 6 -> 13
Function to find product of all subarrays
Variable to store the product
Compute the product while traversing for subarrays
Printing product of all subarray
Driver code
Function call
To return value of a char .
Function to convert a number from N base to decimal
power of base
Decimal equivaLent is str [ Len - 1 ] * 1 + str [ Len - 1 ] * base + str [ Len - 1 ] * ( base ^ 2 ) + ...
A digit in input number must be less than number 's base
Returns true if n is even , else odd
Driver code
Array that stores the factorial till 20
Function to pre - compute the factorial till 20
Precomputing factorials
Function to return the next factorial number greater than N
Traverse the factorial array
Find the next just greater factorial than N
Function to precalculate the factorial till 20
Function call
Function to find K odd positive integers such that their summ is N
Condition to check if there are enough values to check
Driver Code
Function to find the minimum number of operations in which array A can be converted to array B
Loop to iterate over the array
if both elements are equal then move to next element
Calculate the difference between two elements
loop while the next pair of elements have same difference
Increase the number of operations by 1
Print the number of operations required
Driver Code
Python3 program to check if a number is a perfect cube using prime factors
Inserts the prime factor in HashMap if not present if present updates it 's frequency
A utility function to find all prime factors of a given number N
Insert the number of 2 s that divide n
n must be odd at this point So we can skip one element
while i divides n , insert i and divide n
This condition is to handle the case when n is a prime number greater than 2
Function to check if a number is perfect cube
Iteration in Map
Driver Code
Function to check if N is perfect cube or not
Python3 implementation to find the number the number of ways to reach Nth stair by taking 1 or 2 steps at a time and 3 rd Step exactly once
Function to find the number of ways
Base Case
Count of 2 - steps
Count of 1 - steps
Initial length of sequence
expected count of 2 - steps
Loop to find the ways for every possible sequence
Driver Code
Map to precompute and store the factorials of the numbers
Function to precompute factorial
Calculating the factorial for each i and storing in a map
Driver code
Precomputing the factorials
Function to calculate the number of leap years in range of ( 1 , year )
Function to calculate the number of leap years in given range
Driver Code
Python3 implementation of the approach
To store the factorial and the factorial mod inverse of a number
Function to find factorial of all the numbers
Function to find the factorial mod inverse of all the numbers
Function to return nCr
Function to find sum of f ( s ) for all the chosen sets from the given array
Sort the given array
Calculate the factorial and modinverse of all elements
For all the possible sets Calculate max ( S ) and min ( S )
Driver code
Function to return the count of minimum elements such that the sum of those elements is > S .
Initialize currentSum = 0
Loop from N to 1 to add the numbers and check the condition .
Driver code
Python3 program to find next consecutive Number with all distinct digits
Function to count distinct digits in a number
To count the occurrence of digits in number from 0 to 9
Iterate over the digits of the number Flag those digits as found in the array
Traverse the array arr and count the distinct digits in the array
Function to return the total number of digits in the number
Iterate over the digits of the number
Function to return the next number with distinct digits
Count the distinct digits in N + 1
Count the total number of digits in N + 1
Return the next consecutive number
Increment Number by 1
Driver code
Python3 implementation of the approach
To store least prime factors of all the numbers
Function to find the least prime factor of all the numbers
Function to return the sum of elements of array B
Find the prime factors of all the numbers
To store each prime count in lcm
Current number
Map to store the prime count of a single number
Basic way to calculate all prime factors
If it is the first number in the array
Take the maximum count of prime in a number
Calculate lcm of given array
Calculate sum of elements of array B
Driver code
Function to find the number of even cell in a 2D matrix
Maintain two arrays , one for rows operation and one for column operation
Increment operation on row [ i ]
Increment operation on col [ i ]
Count odd and even values in both arrays and multiply them
Count of rows having even numbers
Count of rows having odd numbers
Count of columns having even numbers
Count of columns having odd numbers
Driver code
Function to return the maximum height which can 't be reached
Driver code
Python 3 implementation of fermat 's factorization
This function finds the value of a and b and returns a + b and a - b
since fermat 's factorization applicable  for odd positive integers only
check if n is a even number
if n is a perfect root , then both its square roots are its factors
Driver Code
Function to find the required numbers
Find the sum and xor
Print the required elements
Driver code
Function to find the required values
Driver code
Python3 implementation of the approach
Function to return the largest number that divides the maximum elements from the given array
Finding gcd of all the numbers in the array
Driver code
Function to return the sum of digits of n
Function that returns true if n is palindrome
Find the appropriate divisor to extract the leading digit
If first and last digit not same return false
Removing the leading and trailing digit from number
Reducing divisor by a factor of 2 as 2 digits are dropped
Function that returns true if the digit sum of n is palindrome
Sum of the digits of n
If the digit sum is palindrome
Driver code
Function to return n ^ n ^ ... k times
If k is odd the answer is the number itself
Else the answer is 0
Driver code
Python3 implementation of the approach
To store the factorials and factorial mod inverse of the numbers
Function to return ( a ^ m1 ) % mod
Function to find the factorials of all the numbers
Function to find factorial mod inverse of all the numbers
Function to return nCr
Function to return the sum of the costs of all the possible arrangements of the cells
For all possible X 's
For all possible Y 's
Driver code
Function to print the Nth digit in the fraction ( p / q )
While N > 0 compute the Nth digit by dividing p and q and store the result into variable res and go to next digit
Driver code
Utility function to return the sum of the array
Function to return the sum of the modified array
Subtract the subarray sum
Sum of subarray arr [ i ... n - 1 ]
Return the sum of the modified array
Driver code
Python3 implementation of the approach
Function to return the number closest to x which has equal number of set bits as x
Loop for each bit in x and compare with the next bit
Driver code
Function to return the remaining count of cakes
Sum for 1 cycle
no . of full cycle and remainder
Driver code
Function to return the number of squares inside an n * n grid
Driver code
Function to return the reverse of num
Function that returns true if num is palindrome
If the number is equal to the reverse of it then it is a palindrome
Function to prall the d - digit palindrome numbers
Smallest and the largest d - digit numbers
Starting from the smallest d - digit number till the largest
If the current number is palindrome
Driver code
Function to find the X and Y intercepts of the line passing through the given points
if line is parallel to y axis
x - intercept will be p [ 0 ]
y - intercept will be infinity
if line is parallel to x axis
x - intercept will be infinity
y - intercept will be p [ 1 ]
Slope of the line
y = mx + c in where c is unknown Use any of the given point to find c
For finding the x - intercept put y = 0
For finding the y - intercept put x = 0
Driver code
Python3 implementation of the approach
Function to return the minimum number of moves required to reach the cell containing N starting from ( 1 , 1 )
To store the required answer
For all possible values of divisors
If i is a divisor of n
Get the moves to reach n
Return the required answer
Driver code
Python3 implementation of the approach
Function to return the minimum possible value of ( i * j ) % 2019
If we can get a number divisible by 2019
Find the minimum value by running nested loops
Driver code
Function to find the required fractions
Base condition
For N > 1
Driver code
Function to return the count of all valid pairs
To store the frequencies of ( arr [ i ] - i )
To store the required count
If cnt is the number of elements whose difference with their index is same then ( ( cnt * ( cnt - 1 ) ) / 2 ) such pairs are possible
Driver code
Function to return the minimum possible integer that can be obtained from the given integer after performing the given operations
For every digit
Digits less than 5 need not to be changed as changing them will lead to a larger number
The resulting integer cannot have leading zero
Driver code
Function to return the minimum number of given operations required to reduce n to 1
To store the count of operations
To store the digit
If n is already then no operation is required
Extract all the digits except the first digit
Store the maximum of that digits
for each digit
First digit
Add the value to count
Driver code
Function to return the maximum number that can be formed by changing at most k digits in str
For every digit of the number
If no more digits can be replaced
If current digit is not already 9
Replace it with 9
One digit has been used
Driver code
Function that returns true if a and b are anagarams of each other
Converting numbers to strings
Checking if the sorting values of two strings are equal
Driver code
Function that calculates occurrences of given angle that can be created using any 3 sides
Maximum angle in a regular n - gon is equal to the interior angle If the given angle is greater than the interior angle then the given angle cannot be created
The given angle times n should be divisible by 180 else it cannot be created
Initialise answer
Calculate the frequency of given angle for each vertex
Multiply answer by frequency .
Multiply answer by the number of vertices .
Driver code
Function that will check whether number is prime or not
Function to print the 3 rd number
If the summ is odd
If summ is not prime
Driver code
Function to return the value of nCr
Initialize the answer
Divide simultaneously by i to avoid overflow
Function to return the count of ways
Driver code
Function to return the largest power
If n is greater than given M
If n == m
Checking for the next power
Driver 's code 
Function that will find out the number
If number of holes equal 0 then return 1
If number of holes equal 0 then return 0
If number of holes is more than 0 or 1.
If number of holes is odd
Driver code
Calling Function
Function to return the minimum cost to make each array element equal
To store the count of even numbers present in the array
To store the count of odd numbers present in the array
Iterate through the array and find the count of even numbers and odd numbers
Driver code
Function to return the count of subarrays with negative product
Replace current element with 1 if it is positive else replace it with - 1 instead
Take product with previous element to form the prefix product
Count positive and negative elements in the prefix product array
Return the required count of subarrays
Function to return the count of subarrays with positive product
Total subarrays possible
Count to subarrays with negative product
Return the count of subarrays with positive product
Driver code
Python3 implementation of the approach
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false + if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Set all multiples of p to non - prime
Function to return the xor of 1 st N prime numbers
Count of prime numbers
XOR of prime numbers
If the number is prime xor it
Increment the count
Get to the next number
Create the sieve
Find the xor of 1 st n prime numbers
Python3 implementation of the approach
Value of inverse modulo 2 with 10 ^ 9 + 7
Function to return num % 1000000007 where num is a large number
Initialize result
One by one process all the digits of string 'num
Function to return the sum of the integers from the given range modulo 1000000007
a stores the value of L modulo 10 ^ 9 + 7
b stores the value of R modulo 10 ^ 9 + 7
l stores the sum of natural numbers from 1 to ( a - 1 )
r stores the sum of natural numbers from 1 to b
If the result is negative
Driver code
Function to return the maximum subarray sum for the array { a [ i ] , a [ i + k ] , a [ i + 2 k ] , ... }
Function to return the sum of the maximum required subsequence
To store the result
Run a loop from 0 to k
Find the maximum subarray sum for the array { a [ i ] , a [ i + k ] , a [ i + 2 k ] , ... }
Return the maximum value
Driver code
Python3 implementation of the approach
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Set all multiples of p to non - prime
Function to find the first n odd prime numbers
To store the current count of prime numbers
Starting with 3 as 2 is an even prime number
If i is prime
Print i and increment count
Driver code
Create the sieve
Find the probability that a n digit number is palindrome
Denominator
Assign 10 ^ ( floor ( n / 2 ) ) to denominator
Display the answer
Driver code
Python3 implementation of the approach
Function to return the count of ways to choose the balls
Return ( ( 2 ^ n ) - 1 ) % MOD
Driver code
Function to return the minimum sum
sort the array to find the minimum element
finding the number to divide
Checking to what instance the sum has decreased
getting the max difference
Driver Code
Convert the number to Lth base and print the sequence
Sequence is of Length L
Print the ith element of sequence
Print all the permuataions
There can be ( Len ) ^ l permutations
Convert i to Len th base
Driver code
function call
Function to find the number of permutations possible of the original array to satisfy the given absolute differences
To store the count of each a [ i ] in a map
if n is odd
check the count of each whether it satisfy the given criteria or not
there is only 1 way for middle element .
for others there are 2 ways .
now find total ways
When n is even .
there will be no middle element so for each a [ i ] there will be 2 ways
Driver Code
Function to implement proizvolov 's identity
According to proizvolov 's identity
Driver code
Function call
Function to calculate ln x using expansion
terminating value of the loop can be increased to improve the precision
Function to calculate log10 x
Driver Code
setprecision ( 3 ) is used to display the output up to 3 decimal places
Function to return the required ssum
To store the ssum
For every row
Update the ssum as A appears i number of times in the current row
Update A for the next row
Return the ssum
Driver code
Function to return the smallest prime factor of n
Initialize i = 2
While i <= sqrt ( n )
If n is divisible by i
Increment i
Function to print the first n terms of the required sequence
To store the product of the previous terms
Traverse the prime numbers
Current term will be smallest prime factor of ( 1 + product of all previous terms )
Print the current term
Update the product
Find the first 14 terms of the sequence
Function to return the sum of the count of set bits in the integers from 1 to n
Ignore 0 as all the bits are unset
To store the powers of 2
To store the result , it is initialized with n / 2 because the count of set least significant bits in the integers from 1 to n is n / 2
Loop for every bit required to represent n
Total count of pairs of 0 s and 1 s
totalPairs / 2 gives the complete count of the pairs of 1 s Multiplying it with the current power of 2 will give the count of 1 s in the current bit
If the count of pairs was odd then add the remaining 1 s which could not be groupped together
Next power of 2
Return the result
Driver code
Function to return the height of the right - angled triangle whose area is X times its base
Driver code
Function to return the sum of inverse of divisors
Calculating the answer
Return the answer
Driver code
Function call
Function to return the number of triplets
Initializing the count array
Storing the frequency of each modulo class
If K is odd
If K is even
Driver Code
Function Call
Function to compute number using our deduced formula
Initialize num to n - 1
Driver code
Python3 implementation of the approach
Function to return the XOR of elements from the range [ 1 , n ]
If n is a multiple of 4
If n % 4 gives remainder 1
If n % 4 gives remainder 2
If n % 4 gives remainder 3
Function to return the XOR of elements from the range [ l , r ]
Driver code
Function to return the GCD of a and b
Function to return the count of reachable integers from the given array
GCD of A and B
To store the count of reachable integers
If current element can be reached
Return the count
Driver code
Iterative Function to calculate ( x ^ y ) in O ( log y )
Initialize result
If y is odd , multiply x with result
y must be even now y = y / 2
Function to return the count of required trees
number of nodes
Return the result
Driver code
Python program to change one element of an array such that the resulting array is in arithmetic progression .
Finds the initial term and common difference and prints the resulting array .
Check if the first three elements are in arithmetic progression
Check if the first element is not in arithmetic progression
The first and fourth element are in arithmetic progression
Print the arithmetic progression
Driver code
Function to return the highest power of p that divides n ! implementing Legendre Formula
Return the highest power of p which divides n !
Function that returns true if nCr is divisible by p
Find the highest powers of p that divide n ! , r ! and ( n - r ) !
If nCr is divisible by p
Driver code
Function that returns true if the number represented by arr [ ] is even in base r
If the base is even , then the last digit is checked
If base is odd , then the number of odd digits are checked
To store the count of odd digits
Number is odd
Driver code
Python implementation of the approach
Function to return the minimum possible value of | K - X | where X is the bitwise AND of the elements of some sub - array
Check all possible sub - arrays
Find the overall minimum
No need to perform more AND operations as | k - X | will increase
Driver code
Function to return the gcd of a and b
Function to return the count of quadruplets having gcd = k
Count the frequency of every possible gcd value in the range
To store the required count
Calculate the answer using frequency values
Return the required count
Driver code
Function to print the re - arranged array
Count the number of ones and twos in a [ ]
If the array element is 1
Array element is 2
If it has at least one 2 Fill up first 2
Decrease the cnt of ones if even
Fill up with odd count of ones
Fill up with remaining twos
If even ones , then fill last position
Print the rearranged array
Driver code
Function to generate and print the required array
Find the number of odd prefix sums
If no odd prefix sum found
Calculating the number of even prefix sums
Stores the current prefix sum
If current prefix sum is even
Print 0 until e = EvenPreSums - 1
Print 1 when e = EvenPreSums
Print 0 for rest of the values
Driver code
Python3 implementation of the approach
Function to return the minimum number of operations required
Minimum and maximum elements from the array
To store the minimum number of operations required
To store the number of operations required to change every element to either ( num - 1 ) , num or ( num + 1 )
If current element is not already num
Add the count of operations required to change arr [ i ]
Update the minimum operations so far
Driver code
Function to return the integer X such that ( A xor X ) + ( B ^ X ) is minimized
While either A or B is non - zero
Position at which both A and B have a set bit
Inserting a set bit in x
Right shifting both numbers to traverse all the bits
Driver code
finding X
finding Sum
Driver code
Function that returns true if sum of first n - 1 elements of the array is equal to the last element
Find the sum of first n - 1 elements of the array
If sum equals to the last element
Driver code
Python3 implementation of the above approach
Function to count number of perfect squares
Counting number of perfect squares between a and b
Function to count number of 1 s in array after N moves
Driver Code
Initialize array size
Initialize all elements to 0
Python3 implementation of the approach
Function to print the position of each boxes where a ball has to be placed
Find the cumulative sum of array A [ ]
Find the position of box for each ball
Row number
Column ( position of box in particular row )
Row + 1 denotes row if indexing of array start from 1
Driver code
Python program to implement the above approach
Function to get the prime factors and its count of times it divides
Count the number of 2 s that divide n
n must be odd at this point . So we can skip one element ( Note i = i + 2 )
While i divides n , count i and divide n
This condition is to handle the case when n is a prime number greater than 2
Function to return the highest power
Initialize two arrays
Get the prime factors of n and m
Iterate and find the maximum power
If i not a prime factor of n and m
If i is a prime factor of n and m If count of i dividing m is more than i dividing n , then power will be 0
If i is a prime factor of M
get the maximum power
Drivers code
Function to find the number of divisors of all numbers in the range [ 1 , n ]
List to store the count of divisors
For every number from 1 to n
Increase divisors count for every number divisible by i
Print the divisors
Driver Code
Function to decide the winner
Iterate for all numbers in the array
If mod gives 0
If mod gives 1
If mod gives 2
If mod gives 3
Check the winning condition for X
Driver code
Function to return the count of total binary prefix which are divisible by x
Initialize with zero
Instead of converting all prefixes to decimal , take reminder with x
If number is divisible by x then reminder = 0
Driver code
Function to return length of the resultant number
If K is a multiple of 2 or 5
Instead of generating all possible numbers 1 , 11 , 111 , 111 , ... , K 1 's  Take remainder with K
If number is divisible by k then remainder will be 0
Driver code
Global array declaration global max_Element
Function to find the sum of multiplication of every triplet in the divisors of a number
global max_Element sum1 [ x ] represents the sum of all the divisors of x
Adding i to sum1 [ j ] because i is a divisor of j
sum2 [ x ] represents the sum of all the divisors of x
Here i is divisor of j and sum1 [ j ] - i represents sum of all divisors of j which do not include i so we add i * ( sum1 [ j ] - i ) to sum2 [ j ]
In the above implementation we have considered every pair two times so we have to divide every sum2 array element by 2
Here i is the divisor of j and we are trying to add the sum of multiplication of all triplets of divisors of j such that one of the divisors is i
In the above implementation we have considered every triplet three times so we have to divide every sum3 array element by 3
Print the results
Driver code
Precomputing
Python3 implementation of the approach
Function to return the nth Fibonacci number
Function to return the required sum
Using our deduced result
Driver code
Function to print balanced bracket expression if it is possible
If the condition is met
Print brackets of type - 1
Print brackets of type - 3
Print brackets of type - 4
Print brackets of type - 2
If the condition is not met
Driver code
Function to return the factorial of a number
Function to return the count of distinct ( N + M ) digit numbers having N 0 ' s ▁ and ▁ and ▁ M ▁ 1' s with no leading zeros
Driver code
Function to return the maximum required value
Driver code
Function to print the count of a , b and c after n seconds
Number of multiples of 60 below n
Multiple of 60 nearest to n
Change all a to b
Change all b to c
Change each c to two a
Print the updated values of a , b and c
Driver code
Implementation of factorial function
Function to find GCD of factorial of elements from array
find the minimum element of array
return the factorial of minimum element
Driver Code
Recursive function to return the sum of the given series
1 ^ 1 = 1
Recursive call
Driver code
Python3 implementation of the above approach
Function to compute a ^ n % mod
Function to count permutations that are first decreasing and then increasing
For n = 1 return 0
Calculate and return result
Driver code
Function to find the count of numbers that can be formed using digits 3 , 4 only and having length at max N .
Driver code
Function to return the number of ways to place 4 items in n ^ 2 positions
Driver code
Function to generate a fixed number
( N ^ 2 * ( N + 1 ) ) / 2
Driver code
Function to print n numbers such that their sum is a perfect square
Print ith odd number
Driver code
Python3 implementation of the approach
Function to find the missing numbers
To store the minimum and the maximum odd and even elements from the arrays
To store the sum of the array elements
Get the minimum and the maximum even elements from the array
Get the minimum and the maximum odd elements from the array
To store the total terms in the series and the required sum of the array
Total terms from 2 to minEven
Sum of all even numbers from 2 to minEven
Total terms from 2 to maxEven
Sum of all even numbers from 2 to maxEven
Required sum for the even array
Missing even number
Total terms from 1 to minOdd
Sum of all odd numbers from 1 to minOdd
Total terms from 1 to maxOdd
Sum of all odd numbers from 1 to maxOdd
Required sum for the odd array
Missing odd number
Driver code
Function to return the minimum number of matches to win to qualify for next round
Do a binary search to find
Find mid element
Check for condition to qualify for next round
Driver Code
Python3 implementation of the approach
To store the respective product
Converting integer to string
Traversing the string
Driver code
Function to return the sum of digits of x
Function to return the count of required numbers
If i is divisible by 2 and sum of digits of i is divisible by 3
Return the required count
Driver code
Function to find the sum of minimum of all subarrays
Driver code
Function to return the max length of the sub - array that have the maximum average ( average value of the elements )
Finding the maximum value
If consecutive maximum found
Find the max length of consecutive max
Driver code
Function to return the minimized sum
To store the largest element from the array which is divisible by x
Sum of array elements before performing any operation
If current element is divisible by x and it is maximum so far
Update the minimum element
If no element can be reduced then there 's  no point in performing the operation as  we will end up increasing the sum when an  element is multiplied by x
Subtract the chosen elements from the sum and then add their updated values
Return the minimized sum
Driver code
Function to return the maximum bitwise AND possible among all the possible pairs
If there is only a single value in the range [ L , R ]
If there are only two values in the range [ L , R ]
Driver code
Function to check whether the number is a special prime or not
While number is not equal to zero
If the number is not prime return false .
Else remove the last digit by dividing the number by 10.
If the number has become zero then the number is special prime , hence return true
Function to find the Smallest Special Prime which is greater than or equal to a given number
sieve for finding the Primes
There is always an answer possible
Checking if the number is a special prime or not
If yes print the number and break the loop .
Else increment the number .
Driver code
Python3 implementation of the approach
Function to return the minimum number of moves required to make n divisible by 25
Convert number into string
To store required answer
Length of the string
To check all possible pairs
Make a duplicate string
Number of swaps required to place ith digit in last position
Number of swaps required to place jth digit in 2 nd last position
Find first non zero digit
Place first non zero digit in the first position
Convert string to number
If this number is divisible by 25 then cur is one of the possible answer
If not possible
Driver code
Function to return the required number
If b % c = 0 then b is the required number
Else get the maximum multiple of c smaller than b
Driver code
Function to return the number of pairs ( x , y ) such that x < y
Length of the array
Calculate the number of valid pairs
Return the count of valid pairs
Driver code
Function to return the count of total positions the Bishop can visit in a single move
Count top left squares
Count bottom right squares
Count top right squares
Count bottom left squares
Return total count
Bishop 's Position
Function that return true if the Bishop can take down the pawn
If pawn is at angle 45 or 225 degree from bishop 's Position
If pawn is at angle 135 or 315 degree from bishop 's Position
Bishop 's Position
Pawn 's Position
Python3 program to find maximum number moves possible
To store number of prime factors of each number
Function to find number of prime factors of each number
if i is a prime number
increase value by one from it 's preveious multiple
make prefix sum this will be helpful for multiple test cases
Driver Code
Generate primeFactors array
required answer
Python 3 implementation of the above approach
Function to return digit sum
Function to find out the smallest integer
Start of the iterator ( Smallest multiple of n )
Driver code
Python 3 implementation of the above approach
Function to find the smallest divisor
Function to find the maximum sum
Driver Code
Function that returns true if all the elements of the array can be made equal with the given operation
To store the sum of the array elements and the maximum element from the array
Driver code
Python3 implementation of the approach
Function to return the maximum value of ( x + y + z ) such that ( ax + by + cz = n )
i represents possible values of a * x
j represents possible values of b * y
If z is an integer
Driver code
Function Call
Function that returns true if all the array elements can be made equal with the given operation
Divide number by 2
Divide number by 3
Driver code
Python3 implementation of the approach
Function to return the required gcd
Count the number of times 2 divides p
Equivalent to p = p / 2 ;
If 2 divides p
Check all the possible numbers that can divide p
If n in the end is a prime number
Return the required gcd
Driver code
Function to return the required number
If doesn 't belong to the range  then c is the required number
Else get the next multiple of c starting from b + 1
Driver code
Function to return the count of required pairs
Special case
Number which will give the max value for ( ( n % i ) % j ) % n
To store the maximum possible value of ( ( n % i ) % j ) % n
Count of possible pairs
Driver code
Python3 program to remove digits from a numeric string such that the number becomes divisible by 8
Function that return true if sub is a sub - sequence in s
Function to return a multiple of 8 formed after removing 0 or more characters from the given string
Iterate over all multiples of 8
If current multiple exists as a subsequence in the given string
Driver Code
Python implementation of above approach
Converting integer to string
Traversing the string
If the number is divisible by digits then return yes
If no digits are dividing the number then return no
Driver Code
passing this number to get result function
Python program to find sum of harmonic series using recursion
Base condition
Driven Code
Python3 implementation of the above approach
Function to calculate the value of the
Calculate value of d using formula
Calculate value of a using formula
Return pair
Function to calculate value sum of first p numbers of the series
First calculate value of a and d
Calculate the sum by using formula
Return the Sum
Driver Code
Function to print powerful integers
Set is used to store distinct numbers in sorted order
Store all the powers of y < bound in a vector to avoid calculating them again and again
x ^ i
If num is within limits insert it into the set
Break out of the inner loop
Adding any number to it will be out of bounds
Increment i
Print the contents of the set
Driver code
Print powerful integers
Python3 code for better approach to distribute candies
Function to find out the number of candies every person received
Count number of complete turns
Get the last term
Stores the number of candies
Last term of last and current series
Sum of current and last series
Sum of current series only
If sum of current is less than N
else : Individually distribute
First term
Distribute candies till there
Candies available
Not available
Count the total candies
Print the total candies
Driver Code
Function to find out the number of candies every person received
Count number of complete turns
Get the last term
Stores the number of candies
Do a binary search to find the number whose sum is less than N .
Get mide
If sum is below N
Find number of complete turns
Right halve
Left halve
Last term of last complete series
Subtract the sum till
First term of incomplete series
Count the total candies
Print the total candies
Driver Code
Function to return the minimum number divisible by 3 formed by the given digits
Sort the given array in ascending
Check if any single digit is divisible by 3
Check if any two digit number formed by the given digits is divisible by 3 starting from the minimum
Generate the two digit number
If none of the above is true , we can form three digit number by taking a [ 0 ] three times .
Driver code
Function to update and print the matrix after performing queries
Add 1 to the first element of the sub - matrix
If there is an element after the last element of the sub - matrix then decrement it by 1
Calculate the running sum
Print the updated element
Next line
Size of the matrix
Queries
Utility function to print the contents of the array
Function to replace the maximum element from the array with the coefficient of range of the array
Maximum element from the array
Minimum element from the array
Calculate the coefficient of range for the array
Assuming all the array elements are distinct . Replace the maximum element with the coefficient of range of the array
Print the updated array
Driver code
print the numbers after dividing them by their common factors
iterate from 1 to minimum of a and b
if i is the common factor of both the numbers
Driver code
divide A and B by their common factors
Function to calculate gcd of two numbers
Function to calculate all common divisors of two given numbers a , b -- > input eger numbers
find gcd of a , b
Driver code
Python3 implementation of the above approach
Function to return the minimum difference between N and a power of 2
Power of 2 closest to n on its left
Power of 2 closest to n on its right
Return the minimum abs difference
Driver code
Function to return the probability of the winner
Driver Code
Will print 9 digits after the decimal point
Function to print k numbers which are powers of two and whose sum is equal to n
Initialising the sum with k
Initialising an array A with k elements and filling all elements with 1
Iterating A [ ] from k - 1 to 0
Update sum and A [ i ] till sum + A [ i ] is less than equal to n
Impossible to find the combination
Possible solution is stored in A [ ]
Driver code
Function to remove zeroes
Initialize result to zero holds the Result after removing zeroes from no
Initialize variable d to 1 that holds digits of no
Loop while n is greater then zero
Check if n mod 10 is not equal to zero
store the result by removing zeroes And increment d by 10
Go to the next digit
Return the result
Function to check if sum is true after Removing all zeroes .
Call removeZero ( ) for both sides and check whether they are equal After removing zeroes .
Driver code
Python3 implementation of above approach
Allocate memory for temporary arrays leftSum [ ] , rightSum [ ] and Sum [ ]
Left most element of left array is always 0
Rightmost most element of right array is always 0
Construct the left array
Construct the right array
Construct the sum array using left [ ] and right [ ]
print the constructed prod array
Driver Code
Python3 program to find the minimum positive X such that the given equation holds true
This function gives the required answer
Iterate for all the factors
Check if i is a factor
Consider i to be A and n / i to be B
Consider i to be B and n / i to be A
Driver Code
This function gives the required answer
Iterate over all possible remainders
it must divide n
Driver Code
Function to return nth Hermite number
Base conditions
Driver Code
Print nth Hermite number
Function to print the required numbers
Suppose b = n and we want a % b = 0 and also ( a / b ) < n so a = b * ( n - 1 )
Special case if n = 1 we get a = 0 so ( a * b ) < n
If no pair satisfies the conditions
Driver Code
Function to check if a number is perfect square or not
Function to find the closest perfect square taking minimum steps to reach from a number
Variables to store first perfect square number above and below N
Finding first perfect square number greater than N
Finding first perfect square number less than N
Variables to store the differences
Driver code
Function to return gcd of a and b
Function to convert the obtained fraction into it 's simplest form
Finding gcd of both terms
Converting both terms into simpler terms by dividing them by common factor
Function to add two fractions
Finding gcd of den1 and den2
Denominator of final fraction obtained finding LCM of den1 and den2 LCM * GCD = a * b
Changing the fractions to have same denominator Numerator of the final fraction obtained
Calling function to convert final fraction into it 's  simplest form
Driver Code
Efficient Python3 Program to find the largest divisor not divisible by any perfect square greater than 1
Function to find the largest divisor not divisible by any perfect square greater than 1
If the number is divisible by i * i , then remove one i
Now all squares are removed from n
Driver Code
Returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression
Sort array
After sorting , difference between consecutive elements must be same .
Driver code
Returns true if n is Triperfect
To store sum of divisors . Adding 1 and n since they are divisors of n .
Find all divisors and add them
If sum of divisors is equal to 3 * n , then n is a Triperfect number
Driver program
Python 3 program to find sum of numbers from 1 to N which are divisible by X or Y
Function to calculate the sum of numbers divisible by X or Y
Driver code
Function to count the number within a range whose prime factors are only 2 and 3
Start with 2 so that 1 doesn 't get counted
While num is divisible by 2 , divide it by 2
While num is divisible by 3 , divide it by 3
If num got reduced to 1 then it has only 2 and 3 as prime factors
Driver code
Function to return the required number
Count the frequency of each digit
4 ! can be expressed as 2 ! * 2 ! * 3 !
6 ! can be expressed as 5 ! * 3 !
8 ! can be expressed as 7 ! * 2 ! * 2 ! * 2 !
9 ! can be expressed as 7 ! * 3 ! * 3 ! * 2 !
To store the required number
If number has only either 1 and 0 as its digits
Generate the greatest number possible
Driver code
Iterative function to reverse digits of num
Function to print first N Icanobif Numbers
Initialize first , second numbers
Print first two numbers
Reversing digit of previous two terms and adding them
Driver code
Python3 implementation of the approach
Try all digits from ( 0 to 9 )
Fails in the first move itself
Add ( n - 1 ) 0 's
Driver Code
Python3 program to Find number of Triplets 1 <= a <= b <= c <= n , Such that a ^ 2 + b ^ 2 = c ^ 2
function to ind number of Triplets 1 <= a <= b <= c <= n , Such that a ^ 2 + b ^ 2 = c ^ 2
to store required answer
run nested loops for first two numbers .
third number
check if third number is perfect square and less than n
Driver code
function call
Python 3 implementation of the approach
Function to calculate the sum of the digits of n in the given base
Sum of digits
Digit of n in the given base
Add the digit
Function to calculate the sum of digits of n in bases from 2 to n / 2
to store digit sum in all base
function call for multiple bases
Driver program
Python 3 program to find the largest non - perfect cube number among n numbers
Function to check if a number is perfect cube number or not
takes the sqrt of the number
checks if it is a perfect cube number
Function to find the largest non perfect cube number in the array
stores the maximum of all perfect cube numbers
Traverse all elements in the array
store the maximum if current element is a non perfect cube
Driver Code
Function to find if number N can be represented as sum of a ' s ▁ and ▁ b ' s
base condition
If x is already visited
Set x as possible
Recursive call
Driver Code
Function to return the sum of all odd natural numbers
Function to return the sum of all odd numbers in range L and R
Driver code
Python 3 implementation of above approach
Function to calculate all common divisors of two given numbers a , b -- > input integer numbers
find gcd of a , b
Find the sum of divisors of n .
if ' i ' is factor of n
check if divisors are equal
Driver program to run the case
Function to check if a number is formed by Concatenation of 1 , 14 or 144 only
check for each possible digit if given number consist other then 1 , 14 , 144 print NO else print YES
Driver Code
Python 3 implementation of the approach
Driver code
Python 3 program to find a and b such that a * b = N and a + b = N
Function to return the smallest string
Not possible
find a and b
Driver Code
Function to find minimum operations required to make array beautiful
counting consecutive zeros .
check that start and end are same
check is zero and one are equal
Driver code
Function to count the number of digits in a number m
Function to count the number of steps to reach 0
count the total number of stesp
iterate till we reach 0
count the digits in last
decrease it by 1
find the number on whose division , we get the first digit
first digit in last
find the first number less than last where the first digit changes
find the number of numbers with same first digit that are jumped
count the steps
the next number with a different first digit
Driver code
Calculates modular exponentiation , i . e . , ( x ^ y ) % p in O ( log y )
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Returns GCD of a ^ n and b
Driver code
Function to check if all digits of a number are odd
iterate for all digits
if digit is even
all digits are odd
function to return the largest number with all digits odd
iterate till we find a number with all digits odd
Driver Code
function to return the largest number with all digits odd
convert the number to a string for easy operations
find first even digit
if no even digit , then N is the answer
till first even digit , add all odd numbers
decrease 1 from the even digit
add 9 in the rest of the digits
Driver Code
Python 3 program to count number less than N which are product of any two perfect squares
Function to count number less than N which are product of any two perfect squares
Driver Code
Python3 implementation of above approach
Function to return count of Ordered pairs whose product are less than N
Initialize count to 0
count total pairs
multiply by 2 to get ordered_pairs
subtract redundant pairs ( a , b ) where a == b .
return answer
Driver code
function call to print required answer
Function to print pairwise absolute difference of consecutive elements
absolute difference between consecutive numbers
Driver Code
Function to find sum of AP series
Number of terms
Function to find the sum of all multiples of 2 and 5 below N
Since , we need the sum of multiples less than N
Driver code
Function that calculates marks .
for not attempt score + 0
for each correct answer score + 3
for each wrong answer score - 1
calculate total marks
Driver code
python3 implementation of above solution
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
if prime [ p ] is not changes , then it is a prime
set all multiples of p to non - prime
find the product of 1 st N prime numbers
count of prime numbers
product of prime numbers
if the number is prime add it
increase the count
get to next number
create the sieve
find the value of 1 st n prime numbers
Function to return the count of divisors of a number
Count the powers of the current prime i which divides a
Update the count of divisors
Reset the count
If the remaining a is prime then a ^ 1 will be one of its prime factors
Function to count numbers having odd number of divisors in range [ A , B ]
To store the count of elements having odd number of divisors
Iterate from a to b and find the count of their divisors
To store the count of divisors of i
If the divisor count of i is odd
Driver code
Returns count of numbers in [ l r ] that are divisible by k .
Add 1 explicitly as l is divisible by k
l is not divisible by k
Driver Code
calculate sum of Nth group
Driver code
Function to check if it is possible
Driver code
Python 3 program to check if a number is Trojan Number or not
Function to check if a number can be expressed as x ^ y
Try all numbers from 2 to sqrt ( n ) as base
Keep increasing y while power ' p ' is smaller than n .
Function to check if a number is Strong
count the number for each prime factor
minimum number of prime divisors should be 2
Function to check if a number is Trojan Number
Driver Code
calculate sum upto N term of series
Driver code
Python3 program to find the Absolute Difference between the Sum of Non - Prime numbers and Prime numbers of an Array
Function to find the difference between the sum of non - primes and the sum of primes of an array .
Find maximum value in the array
USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array " prime [ 0 . . n ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
Remaining part of SIEVE
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Store the sum of primes in S1 and the sum of non primes in S2
the number is prime
the number is non - prime
Return the absolute difference
Get the array
Find the absolute difference
Function to compute the series sum
To store the value of S [ i - 1 ]
Iterate over n to store sum in total
Update previous with S [ i ]
Driver code
Get x and n
Find and prthe sum
Function to count factors in O ( N )
iterate and check if factor or not
Function to count numbers having exactly 9 divisors
check for all numbers <= N
check if exactly 9 factors or not
Driver Code
Python 3 program to find distinct integers ontained by lcm ( x , num ) / x
Function to count the number of distinct integers ontained by lcm ( x , num ) / x
iterate to count the number of factors
Driver Code
Python3 code to print nth Ulam number
Array to store Ulam Number
function to compute ulam Number
push First 2 two term of the sequence in the array for further calculation
loop to generate Ulam number
traverse the array and check if i can be represented as sum of two distinct element of the array
If count is 1 that means i can be represented as sum of two distinct terms of the sequence
i is ulam number
Driver code
Pre compute Ulam Number sequence
Print nth Ulam number
function to Find the number of rectangles of size 2 * 1 can be placed inside a rectangle of size n * m
if n is even
if m is even
if both are odd
Driver code
function call
Recursive function to find the required number
If the resulting number is >= n and count of a = count of b , return the number
select minimum of two and call the function again
Function to find the number next greater Number than N with the same quantity of digits A and B
Driver code
Driver code
Python3 implementation of the above approach
calculating hours travelled
Function taking coefficient of each term of equation as input
Finding sum of roots
Finding product of roots
Absolute difference
Driver Code
Function to find the number of solutions of n = n xor x
Counter to store the number of solutions found
Driver code
Python Program to find minimum number of lectures to attend to maintain 75 % attendance
Function to compute minimum lecture
Formula to compute
Driver Code
Function to count Numbers with N digits which consists of odd number of 0 's
Driver code
Python 3 program to find sum of primes in range L to R
prefix [ i ] is going to store sum of primes till i ( including i ) .
Function to build the prefix sum array
Create a boolean array " prime [ 0 . . n ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Build prefix array
Function to return sum of prime in range
Driver code
Function to calculate the sum
Driver code
number of terms to be included in sum
find the Sn
function to check for solutions of equations
If the expression is greater than 0 , then 2 solutions
If the expression is equal 0 , then 1 solutions
Else no solutions
Driver code
Function to calculates the bits
calculates Bits 1 kilobytes ( s ) = 8192 bits
Function to calculates the bytes
calculates Bytes 1 KB = 1024 bytes
Driver code
Driver Code
Getting the size of array
Getting the array of size n
Solution
Finding sum of the . array elements
Dividing sum by size n
Print x , if found
Function to find the sum
Apply AP formula
number of terms
Function to return required sum
sum of first series
sum of second series
Driver Code
function call to print sum
Function to print the pairs
Driver Code
Function to calculate the sum
starting number
common ratio of GP
common difference Of AP
no . of the terms for the sum
Find the Sn
Function to sum the digits until it becomes a single digit
Function to product the digits until it becomes a single digit
Loop to do sum while sum is not less than or equal to 9
Function to find the maximum among repeated sum and repeated product
Driver code
To store digits of N
visited map
DP Table
Push all the digits of N into digits vector
Function returns the count
If desired number is formed whose sum is odd
If it is not present in map , mark it as true and return 1
Sum is present in map already
Desired result not found
If that state is already calculated just return that state value
Upper limit
To store the count of desired numbers
If k is non - zero , i ranges from 0 to j else [ 1 , j ]
If current digit is 0 , decrement k and recurse sum is not changed as we are just adding 0 that makes no difference
If i is non zero , then k remains unchanged and value is added to sum
Memoize and return
Driver code
K is the number of exact non - zero elements to have in number
break N into its digits
We keep record of 0 s we need to place in the number
Function to count subsets
Driver Code
DP table
Function to calculate the count of ordered set for a given size
Base cases
If subproblem has been soved before
Store and return answer to this subproblem
Function returns the count of all ordered sets
Prestore the factorial value
Iterate all ordered set sizes and find the count for each one maximum ordered set size will be smaller than N as all elements are distinct and non consecutive .
Multiply ny size ! for all the arrangements because sets are ordered .
Add to total answer
Driver code
Function to find all arithmetic sequences of size atleast 3
If array size is less than 3
Finding arithmetic subarray length
To store all arithmetic subarray of length at least 3
Check if current element makes arithmetic sequence with previous two elements
Begin with a new element for new arithmetic sequences
Accumulate result in till i .
Return final count
Driver code
Function to find arithmetic sequences
Function return the count of triplets having subarray XOR equal
XOR value till i
Count and ways array as defined above
Using the formula stated
Increase the frequency of x
Add i + 1 to ways [ x ] for upcoming indices
Driver code
Function to obtain the mask for any integer
Function to count the number of ways
Subarray must not be empty
If subproblem has been solved
Excluding this element in the subarray
If there are no common digits then only this element can be included
Calculate the new mask if this element is included
Store and return the answer
Function to find the count of subarray with all digits unique
Initializing dp
Driver Code
Vector to store the fibonacci series
Binary Tree Node
Function to create a new tree node
Function to find the height of the given tree
Function to make fibonacci series upto n terms
Preorder Utility function to count exponent path in a given Binary tree
Base Condition , when node pointer becomes null or node value is not a number of pow ( x , y )
Increment count when encounter leaf node
Left recursive call save the value of count
Right recursive call and return value of count
Function to find whether fibonacci path exists or not
To find the height
Making fibonacci series upto ht terms
Driver code
Create binary tree
Function Call
Python3 program to count the numbers in the range having the difference between the sum of digits at even and odd positions as a Fibonacci Number
To store all the Fibonacci numbers
Function to generate Fibonacci numbers upto 100
Adding the first two Fibonacci numbers in the set
Computing the remaining Fibonacci numbers using the first two Fibonacci numbers
Function to return the count of required numbers from 0 to num
Base Case
Check if the difference is equal to any fibonacci number
If this result is already computed simply return it
Maximum limit upto which we can place digit . If tight is 1 , means number has already become smaller so we can place any digit , otherwise num [ pos ]
If the current position is odd add it to currOdd , otherwise to currEven
Function to convert x into its digit vector and uses count ( ) function to return the required count
Driver Code
Generate fibonacci numbers
Python3 implementation to find the maximum occurrence of the subsequence such that the indices of characters are in arithmetic progression
Function to find the maximum occurrence of the subsequence such that the indices of characters are in arithmetic progression
Frequency for characters
Loop to count the occurrence of ith character before jth character in the given String
Increase the frequency of s [ i ] or c of String
Maximum occurrence of subsequence of length 1 in given String
Maximum occurrence of subsequence of length 2 in given String
Driver Code
Python3 implementation to Count the numbers with N digits and whose suffix is divisible by K
Suffix of length pos with remainder rem and Z representing whether the suffix has a non zero digit until now
Base case
If count of digits is less than n
Placing all possible digits in remaining positions
If remainder non zero and suffix has n digits
If the subproblem is already solved
Placing all digits at MSB of suffix and increasing it 's length by 1
Non zero digit is placed
Store and return the solution to this subproblem
Function to Count the numbers with N digits and whose suffix is divisible by K
Since we need powers of 10 for counting , it 's better to  pre store them along with their  modulo with 1e9 + 7 for counting
Since at each recursive step we increase the suffix length by 1 by placing digits at its leftmost position , we need powers of 10 modded with k , in order to fpos the new remainder efficiently
Initialising dp table values - 1 represents subproblem hasn 't  been solved yet  memset(dp, -1, sizeof(dp))
Driver Code
Python3 implementation of the above approach
Function to find the smallest path with exactly K edges
Array to store dp
Loop to solve DP
Initialising next state
Recurrence relation
Returning final answer
Driver code
Input edges
Source and Destination
Number of edges in path
Calling the function
Python3 implementation of the approach .
Function to return the smallest product of edges
If the source is equal to the destination
Array to store distances
Initialising the array
Bellman ford algorithm
Loop to detect cycle
Returning final answer
Driver code
Input edges
Source and Destination
Bellman ford
Python3 implementation of the above approach
Function to return maximum length of square submatrix having sum of elements at - most K
Matrix to store prefix sum
Current maximum length
Variable for storing maximum length of square
Calculating prefix sum
Checking whether there exits square with length cur_max + 1 or not
Returning the maximum length
Driver code
Python3 program to find sum of all numbers formed having 4 atmost X times , 5 atmost Y times and 6 atmost Z times
exactsum [ i ] [ j ] [ k ] stores the sum of all the numbers having exact i 4 ' s , ▁ j ▁ 5' s and k 6 's
exactnum [ i ] [ j ] [ k ] stores numbers of numbers having exact i 4 ' s , ▁ j ▁ 5' s and k 6 's
Utility function to calculate the sum for x 4 ' s , ▁ y ▁ 5' s and z 6 's
Computing exactsum [ i ] [ j ] [ k ] as explained above
Driver code
Python3 implementation of the above approach
A function to calculate the maximum value
basecases
Loop to iterate and add the max value in the dp array
Driver Code
Python3 implementation of the above approach
Function to return sum of subarray from l to r
calculate sum by a loop from l to r
dp to store the values of sub problems
if length of the array is less than k return the sum
if the value is previously calculated
else calculate the value
select all the sub array of length len_r
get the sum of that sub array
check if it is the maximum or not
store it in the table
Driver code
Python3 implementation of the approach
Function to return the minimum difference path from ( 0 , 0 ) to ( N - 1 , M - 1 )
Terminating case
Base case
If it is already visited
Recursive calls
Return the value
Driver code
Function call
Function to find the longest Special Sequence
Creating a list with all 0 's of size  equal to the length of string
Supporting list with all 0 's of size 26 since  the given string consists  of only lower case alphabets
Converting the ascii value to list indices
Determining the lower bound
Determining the upper bound
Filling the dp array with values
Filling the max_length array with max length of subsequence till now
return the max length of subsequence
driver code
Function to return the maximum possible sum after performing the given operation
Dp vector to store the answer
Base value
Return the maximum sum
Driver code
Python3 implementation of the approach
Function to return the number of ways to reach the kth step
Create the dp array
Broken steps
Calculate the number of ways for the rest of the positions
If it is a blocked position
Number of ways to get to the ith step
Return the required answer
Driver code
Python3 program to find minimum number of coins
Function to find minimum number of coins
Driver code
Python 3 implementation of the approach
Function to find the count of set bits in all the integers from 0 to n
Driver code
Python3 implementation of the approach
Function to return the count of required arrangements
Create a vector
Store numbers from 1 to n
To store the count of ways
Initialize flag to true if first element is 1 else false
Checking if the current permutation satisfies the given conditions
If the current permutation is invalid then set the flag to false
If valid arrangement
Generate the all permutation
Driver code
Function to return the count of required arrangements
Create the dp array
Initialize the base cases as explained above
( 12 ) as the only possibility
Generate answer for greater values
dp [ n ] contains the desired answer
Driver code
Function to find number of shortest paths
Compute the grid starting from the bottom - left corner
Print the grid
Driver code
Function call
Function to maximum sum combination from two arrays
To store dp value
For loop to calculate the value of dp
Return the required answer
Driver code
Function call
Function to check whether a k segment partition is possible such that bitwise AND is 'mask
dp [ i ] [ j ] stores whether it is possible to partition first i elements into j segments such that all j segments are 'good
Initialising dp
Filling dp in bottom - up manner
Finding a cut such that first l elements can be partitioned into j - 1 ' good ' segments and arr [ l + 1 ] + ... + arr [ i ] is a ' good ' segment
Function to find maximum possible AND
Array to store prefix sums
Maximum no of bits in the possible answer
This will store the final answer
Constructing answer greedily selecting from the higher most bit
Checking if array can be partitioned such that the bitwise AND is ans | ( 1 << i )
if possible , update the answer
Return the final answer
Driver code
n = 11 , first element is zero to make array 1 based indexing . So , number of elements are 10
Function call
Python3 implementation of the approach
Function to initialize the dp table
Initialize with maximum value
Function to return the minimum cost
Base case
If problem is already solved , return the pre - calculated answer
Number of the auxiliary disk
Initialize the minimum cost as Infinity
Calculationg the cost for first case
Calculating the cost for second case
Minimum of both the above cases
Store it in the dp table
Return the minimum cost
Driver code
Python 3 implementation of the approach
DP table to memoize the values
Visited array to keep track of visited nodes in order to avoid infinite loops
Function to return the minimum of four numbers
Function to return the minimum distance to any rotten orange from [ i , j ]
If i , j lie outside the array
If 0 then it can 't lead to  any path so return INT_MAX
If 2 then we have reached our rotten oranges so return from here
If this node is already visited then return to avoid infinite loops
Mark the current node as visited
Check in all four possible directions
Take the minimum of all
If result already exists in the table check if min_value is less than existing value
Function to return the minimum time required to rot all the oranges
Calculate the minimum distances to any rotten orange from all the fresh oranges
Pick the maximum distance of fresh orange to some rotten orange
If all oranges can be rotten
Driver Code
Python3 program to implement above approach
Variable to store states of dp
Variable to check if a given state has been solved
Function to find the maximum sum subsequence such that no two elements are adjacent
Base case
To check if a state has been solved
Variable to store prefix sum for sub - array { i , j }
Required recurrence relation
Returning the value
Driver code
Input array
Python3 implementation of above approach
Function to create mask for every number
Recursion for Filling DP array
Base Condition
Recurrence Relation
Function to find Maximum Subset Sum
Initialize DP array
Iterate over all possible masks of 10 bit number
Driver Code
Python3 implementation of the above approach
Function to return the minimized sum
If all the indices have been used
If this value is pre - calculated then return its value from dp array instead of re - computing it
If A [ i - 1 ] was chosen previously then only B [ i ] or C [ i ] can chosen now choose the one which leads to the minimum sum
If B [ i - 1 ] was chosen previously then only A [ i ] or C [ i ] can chosen now choose the one which leads to the minimum sum
If C [ i - 1 ] was chosen previously then only A [ i ] or B [ i ] can chosen now choose the one which leads to the minimum sum
Driver code
Initialize the dp [ ] [ ] array
min ( start with A [ 0 ] , start with B [ 0 ] , start with C [ 0 ] )
Python3 implementation of the approach
To store the states of the DP
Function to return the maximum of the three integers
Function to return the maximum score
Base cases
If the state has already been solved then return it
Marking the state as solved
Growing phase
Shrinking phase
Returning the solved state
Driver code
Python3 implementation of the approach
Function to return the maximum marks by considering topics which can be completed in the given time duration
If we are given 0 time then nothing can be done So all values are 0
If we are given 0 topics then the time required will be 0 for sure
Calculating the maximum marks that can be achieved under the given time constraints
If time taken to read that topic is more than the time left now at position j then do no read that topic
Two cases arise : 1 ) Considering current topic 2 ) Ignoring current topic We are finding maximum of ( current topic weightage + topics which can be done in leftover time - current topic time ) and ignoring current topic weightage sum
Moving upwards in table from bottom right to calculate the total time taken to read the topics which can be done in given time and have highest weightage sum
It means we have not considered reading this topic for max weightage sum
Adding the topic time
Evaluating the left over time after considering this current topic
One topic completed
It contains the maximum weightage sum formed by considering the topics
Condition when exam cannot be passed
Return the marks that can be obtained after passing the exam
Driver code
Number of topics , hours left and the passing marks
n + 1 is taken for simplicity in loops Array will be indexed starting from 1
Python3 implementation of the above approach
variable to store states of dp
variable to check if a given state has been solved
Function to find the minimum number of steps required to reach the end of the array
base case
to check if a state has been solved
required recurrence relation
returning the value
Driver code
python3 program to find out maximum value from a given sequence of coins
For both of your choices , the opponent gives you total Sum minus maximum of his value
Returns optimal value possible that a player can collect from an array of coins of size n . Note than n must be even
Driver code
Function that returns true if n is a power of 5
Function to return the decimal value of binary equivalent
Function to return the minimum cuts required
Allocating memory for dp [ ] array
From length 1 to n
If previous character is '0' then ignore to avoid number with leading 0 s .
Ignore s [ j ] = '0' starting numbers
Number formed from s [ j ... . i ]
Check for power of 5
Assigning min value to get min cut possible
( n + 1 ) to check if all the strings are traversed and no divisible by 5 is obtained like 000000
Driver code
Function to return the minimum number of cubes whose sum is k
If k is less than the 2 ^ 3
Initialize with the maximum number of cubes required
Driver code
Python implementation of the approach
Function to return the minimum number of cubes whose sum is k
While current perfect cube is less than current element
If i is a perfect cube
i = ( i - 1 ) + 1 ^ 3
Next perfect cube
Re - initialization for next element
Driver code
Function to return the maximum required sub - array sum
Creating one based indexing
2d array to contain solution for each step
Case 1 : Choosing current or ( current + previous ) whichever is smaller
Case 2 : ( a ) Altering sign and add to previous case 1 or value 0
Case 2 : ( b ) Adding current element with previous case 2 and updating the maximum
Case 3 : ( a ) Altering sign and add to previous case 2
Case 3 : ( b ) Adding current element with previous case 3
Updating the maximum value of variable ans
Return the final solution
Driver code
Function to return the maximum sum possible
dp [ i ] represent the maximum sum so far after reaching current position i
Initialize dp [ 0 ]
Initialize the dp values till k since any two elements included in the sub - sequence must be atleast k indices apart , and thus first element and second element will be k indices apart
Fill remaining positions
Return the maximum sum
Driver code
Function to return the minimum cost
Re - compute the array
Add answers for set bits
If bit is set
Increase the counter
Right shift the number
Driver code
Function to return the number of ways to form an array of size n such that sum of all elements is divisible by 2
Represents first and last numbers of each type ( modulo 0 and 1 )
Count of numbers of each type between range
Base Cases
Ways to form array whose sum upto i numbers modulo 2 is 0
Ways to form array whose sum upto i numbers modulo 2 is 1
Return the required count of ways
Driver Code
Python3 Program to Paint N boxes using M colors such that K boxes have color different from color of box on its left
This function returns the required number of ways where idx is the current index and diff is number of boxes having different color from box on its left
Base Case
If already computed
Either paint with same color as previous one
Or paint with remaining ( M - 1 ) colors
Driver code
Multiply M since first box can be painted with any of the M colors and start solving from 2 nd box
Python program implementation of Max sum problem in a triangle
Function for finding maximum sum
Loop for bottom - up calculation
For each element , check both elements just below the number and below left to the number add the maximum of them to it
Return the maximum sum
Driver Code
Python 3 implementation of the approach
Returns count of ordered subsets of arr [ ] with XOR value = K
Find maximum element in arr [ ]
Maximum possible XOR value
The value of dp [ i ] [ j ] [ k ] is the number of subsets of length k having XOR of their elements as j from the set arr [ 0. . . i - 1 ]
Initializing all the values of dp [ i ] [ j ] [ k ] as 0
The xor of empty subset is 0
Fill the dp table
The answer is the number of subsets of all lengths from set arr [ 0. . n - 1 ] having XOR of elements as k
Driver Code
Python3 program to find the maximum number of numbers divisible by 3 in a large number
This will contain the count of the splits
This will keep sum of all successive integers , when they are indivisible by 3
This is the condition of finding a split
Driver code
Python Program to find the count of numbers in a range where digit d occurs exactly K times
states - position , count , tight , nonz
d is required digit and K is occurrence
This function returns the count of required numbers from 0 to num
Last position
If this result is already computed simply return it
Maximum limit upto which we can place digit . If tight is 1 , means number has already become smaller so we can place any digit , otherwise num [ pos ]
Nonz is true if we placed a non zero digit at the starting of the number
At this position , number becomes smaller
Next recursive call , also set nonz to 1 if current digit is non zero
Function to convert x into its digit vector and uses count ( ) function to return the required count
Initialize dp
Driver Code
Python3 program to implement the above approach
Base Case
Calculating the last digit
Calculating the first digit
Driver Code
function returns the minimum cost to form a n - copy string Here , x -> Cost to add / remove a single character ' G ' and y -> cost to append the string to itself
base case : ro form a 1 - copy string we need tp perform an operation of type 1 ( i , e Add )
case1 . Perform a Add operation on ( i - 1 ) copy string case2 . perform a type 2 operation on ( ( i + 1 ) / 2 ) - copy string
case1 . Perform a Add operation on ( i - 1 ) - copy string case2 . Perform a type operation on ( i / 2 ) - copy string
Driver code
Python program to find Minimum steps to reach any of the boundary edges of a matrix
Function to find out minimum steps
boundary edges reached
already had a route through this point , hence no need to re - visit
visiting a position
vertically up
horizontally right
horizontally left
vertically down
minimum of every path
Function that returns the minimum steps
index to store the location at which you are standing
find '2' in the matrix
Initialize dp matrix with - 1
Initialize vis matrix with false
Call function to find out minimum steps using memoization and recursion
if not possible
Driver Code
function to return the number of ways to chooser objects out of n objects
function to return the number of degrangemnets of n
function to return the required number of permutations
ways to chose i indices from n indices
Dearrangements of ( n - i ) indices
Driver Code
Python3 program to find paths with maximum number of ' a ' from ( 1 , 1 ) to ( X , Y ) vertically or horizontally
Function to answer queries
Iterate till query
Decrease to get 0 - based indexing
Print answer
Function that pre - computes the dp array
Check for the first character
Iterate in row and columns
If not first row or not first column
Not first row
Not first column
If it is not ' a ' then increase by 1
Driver code
Character N X N array
Queries
Number of queries
Function call to pre - compute
function call to answer every query
returns the number of squares in diagonal i
returns the number of ways to fill a n * n chessboard with k bishops so that no two bishops attack each other .
return 0 if the number of valid places to be filled is less than the number of bishops
dp table to store the values
Setting the base conditions
calculate the required number of ways
stores the answer
Driver code
For maximum length of input string
Declaring the DP table
Declaring the prefix array
Function to calculate the number of valid assignments
Return 1 if X is balanced .
Increment the count if it is an opening bracket
Decrement the count if it is a closing bracket
Driver code
Creating the prefix array
Initial value for c_x and c_y is zero
Python3 Program to minimum required sum
Function to return minimum path falling sum
R = Row and C = Column We begin from second last row and keep adding maximum sum .
best = min ( A [ R + 1 ] [ C - 1 ] , A [ R + 1 ] [ C ] , A [ R + 1 ] [ C + 1 ] )
Driver code
function to print required answer
Python 3 program to find the maximum value of a + shaped pattern in 2 - D array
Function to return maximum Plus value
Initializing answer with the minimum value
Initializing all four arrays
Initializing left and up array .
Initializing right and down array .
calculating value of maximum Plus ( + ) sign
Driver code
Function call to find maximum value
Function to find the total number of different staircase that can made from N boxes
DP table , there are two states . First describes the number of boxes and second describes the step
Initialize all the elements of the table to zero
Base case
When step is equal to 2
When step is greater than 2
Count the total staircase from all the steps
Driver Code
function to return maximum cost obtained
find maximum element of the array .
create and initialize count of all elements to zero .
calculate frequency of all elements of array .
stores cost of deleted elements .
selecting minimum range from L and R .
finds upto which elements are to be deleted when element num is selected .
get maximum when selecting element num or not .
Driver code
size of array
function call to find maximum cost
Returns The number of way from top - left to mat [ m - 1 ] [ n - 1 ]
Return 1 if it is the first row or first column
Recursively find the no of way to reach the last cell .
Driver code
Returns The number of way from top - left to mat [ m - 1 ] [ n - 1 ]
Driver code
Declaring the DP table as global variable
A utility for creating palindrome
checks if number of digits is odd or even if odd then neglect the last digit of input in finding reverse as in case of odd number of digits middle element occur once
Creates palindrome by just appending reverse of number to itself
Function to generate palindromes
Run two times for odd and even length palindromes
Creates palindrome numbers with first half as i . Value of j decides whether we need an odd length or even length palindrome .
Function to find the minimum number of elements in a sorted array A [ i . . j ] such that their sum is N
Function to find the minimum number of palindromes that N can be expressed as a sum of
Getting the list of all palindromes upto N
Sorting the list of palindromes
Returning the required value
Driver code
Returns value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- - * 1 ]
A Binomial coefficient based function to find nth catalan number in O ( n ) time
Calculate value of 2 nCn
return 2 nCn / ( n + 1 )
Driver code
Alternate Fibonacci Series using Dynamic Programming
0 th and 1 st number of the series are 0 and 1
Driver Code
Returns the total ways to form arrays such that every consecutive element is different and each element except the first and last can take values from 1 to M
define the dp [ ] [ ] array
if the first element is 1
there is only one way to place a 1 at the first index
the value at first index needs to be 1 , thus there is no way to place a non - one integer
if the first element was 1 then at index 1 , only non one integer can be placed thus there are M - 1 ways to place a non one integer at index 2 and 0 ways to place a 1 at the 2 nd index
Else there is one way to place a one at index 2 and if a non one needs to be placed here , there are ( M - 2 ) options , i . e neither the element at this index should be 1 , neither should it be equal to the previous element
Build the dp array in bottom up manner
f ( i , one ) = f ( i - 1 , non - one )
f ( i , non - one ) = f ( i - 1 , one ) * ( M - 1 ) + f ( i - 1 , non - one ) * ( M - 2 )
last element needs to be one , so return dp [ n - 1 ] [ 0 ]
Driver Code
Fibonacci Series using Recursion
Base case
recursive calls
Driver Code
Python program to find the Nth term of Fibonacci series
Fibonacci Series using memoized Recursion
base case
if fib ( n ) has already been computed we do not do further recursive calls and hence reduce the number of repeated work
store the computed value of fib ( n ) in an array term at index n to so that it does not needs to be precomputed again
Driver Code
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]
Driver Code
Python3 program to find the Smallest number with given sum of digits and sum of square of digits
Top down dp to find minimum number of digits with given sum of dits a and sum of square of digits as b
Invalid condition
Number of digits satisfied
Memoization
Initialize ans as maximum as we have to find the minimum number of digits
Check for all possible combinations of digits
recurrence call
If the combination of digits cannot give sum as a and sum of square of digits as b
Returns the minimum number of digits
Function to print the digits that gives sum as a and sum of square of digits as b
initialize the dp array as
base condition
function call to get the minimum number of digits
When there does not exists any number
Printing the digits from the most significant digit
Trying all combinations
checking conditions for minimum digits
Driver Code
Function call to print the smallest number
Python3 Program to find sum of product of consecutive Binomial Coefficient .
Find the binomial coefficient up to nth term
C [ 0 ] = 1 ; nC0 is 1
Compute next row of pascal triangle using the previous row
Return the sum of the product of consecutive binomial coefficient .
Driver Code
Python program to find if Array can have sum of K by applying three types of possible operations on it
Check if it is possible to achieve a sum with three operation allowed
if sum id negative .
If going out of bound .
If sum is achieved .
If the current state is not evaluated yet .
Replacing element with negative value of the element .
Substracting index number from the element .
Adding index number to the element .
Wrapper Function
Driver Code
Simple Python3 Program to print Fibonacci sequence
Driver code
Python3 program to find maximum sum increasing subsequence till i - th index and including k - th index .
Initializing the first row of the dp [ ] [ ]
Creating the dp [ ] [ ] matrix .
To calculate for i = 4 and k = 6.
Driver code
Function to generate nth term of Moser - de Bruijn Sequence
S ( 2 * n ) = 4 * S ( n )
S ( 2 * n + 1 ) = 4 * S ( n ) + 1
Generating the first ' n ' terms of Moser - de Bruijn Sequence
Driver Code
Space optimized Python3 implementation of longest common substring .
Function to find longest common substring .
Find length of both the strings .
Variable to store length of longest common substring .
Matrix to store result of two consecutive rows at a time .
Variable to represent which row of matrix is current row .
For a particular value of i and j , len_mat [ currRow ] [ j ] stores length of longest common substring in string X [ 0. . i ] and Y [ 0. . j ] .
Make current row as previous row and previous row as new current row .
Driver Code
Python program to print the Minimal moves to form a string by appending string and adding characters
function to return the minimal number of moves
initializing dp [ i ] to INT_MAX
initialize both strings to null
base case
check if it can be appended
addition of character takes one step
appending takes 1 step , and we directly reach index i * 2 + 1 after appending so the number of steps is stord in i * 2 + 1
Driver Code
function call to return minimal number of moves
Function to check if any valid sequence is divisible by M
DEclare mod array
Calculate the mod array
Check if sum is divisible by M
Check if sum is not divisible by 2
Remove the first element from the ModArray since it is not possible to place minus on the first element
Decrease the size of array
Sort the array
Loop until the pointer cross each other
Check if sum becomes equal
Increase and decrease the pointer accordingly
Driver code
Function call
Print the first n term of Golomb Sequence
base cases
Finding and pring first n terms of Golomb Sequence .
Driver Code
Python 3 code to find number of ways of arranging bracket with proper expressions
function to calculate the number of proper bracket sequence
hash array to mark the positions of opening brackets
dp 2d array
mark positions in hash array
first position marked as 1
iterate and formulate the recurrences
if position has a opening bracket
return answer
Driver Code
positions where opening braces will be placed
Returns the length of substring with maximum difference of zeroes and ones in binary string
traverse a binary string from left to right
add current value to the current_sum according to the Character if it ' s ▁ ' 0 ' add 1 else -1
update maximum sum
return - 1 if string does not contain any zero that means all ones otherwise max_sum
Driven Program
Python3 program to count numbers of k digits that are strictly monotone .
DP [ i ] [ j ] is going to store monotone numbers of length i + 1 considering j + 1 digits ( 1 , 2 , 3 , . .9 )
Unit length numbers
Building dp [ ] in bottom up
Driver code
python code to count ways to divide circle using N non - intersecting chords .
n = no of points required
dp array containing the sum
returning the required number
driver code
Python3 program to find if there is path from top left to right bottom
to find the path from top left to bottom right
set arr [ 0 ] [ 0 ] = 1
Mark reachable ( from top left ) nodes in first row and first column .
Mark reachable nodes in remaining matrix .
return yes if right bottom index is 1
Given array
path from arr [ 0 ] [ 0 ] to arr [ row ] [ col ]
return nth NewmanaShanksaWilliams prime
Base case
Recursive step
Driven Program
return nth Newman Shanks Williams prime
Base case
Finding nth Newman Shanks Williams prime
Driver Code
Python Program to Number of ways to insert a character to increase LCS by one
Return the Number of ways to insert a character to increase the Longest Common Subsequence by one
Insert all positions of all characters in string B
Longest Common Subsequence
Longest Common Subsequence from reverse
inserting character between position i and i + 1
Driver Code
Function to returns cost of removing the identical characters in LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]
Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note that L [ i ] [ j ] contains cost of removing identical characters in LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]
If both characters are same , add both of them
Otherwise find the maximum cost among them
Returns cost of making X [ ] and Y [ ] identical
Find LCS of X [ ] and Y [ ]
Initialize the cost variable
Find cost of all acters in both strings
Driver program to test above function
Function to calculate any permutation divisible by 8. If such permutation exists , the function will return that permutation else it will return - 1
Generating all possible permutations and checking if any such permutation is divisible by 8
Driver function
Function takes in an array of numbers , dynamically goes on the location and makes combination of numbers .
Converting string to integer array for ease of computations ( Indexing in arr [ ] is considered to be starting from 1 )
If we consider the number in our combination , we add it to the previous combination
If we exclude the number from our combination
Driver Code
Python3 program to check if given string has a subsequence divisible by 8
map key will be tens place digit of number that is divisible by 8 and value will be units place digit
For filling the map let start with initial value 8
key is digit at tens place and value is digit at units place mp . insert ( { key , value } )
Create a hash to check if we visited a number
Iterate from last index to 0 th index
If 8 is present in string then 8 divided 8 hence print yes
considering present character as the second digit of two digits no we check if the value of this key is marked in hash or not If marked then we a have a number divisible by 8
If no subsequence divisible by 8
Python3 program to find length of the longest balanced subsequence
Considering all balanced substrings of length 2
Considering all other substrings
Driver Code
Function to find the maximum sum bitonic subarray .
to store the maximum sum bitonic subarray
Find the longest increasing subarray starting at i .
Now we know that a [ i . . j ] is an increasing subarray . Remove non - positive elements from the left side as much as possible .
Find the longest decreasing subarray starting at j .
Now we know that a [ j . . k ] is a decreasing subarray . Remove non - positive elements from the right side as much as possible . last is needed to keep the last seen element .
Compute the max sum of the increasing part .
Compute the max sum of the decreasing part .
The overall max sum is the sum of both parts minus the peak element , because it was counted twice .
If the next element is equal to the current , i . e . arr [ i + 1 ] == arr [ i ] , last == i . To ensure the algorithm has progress , get the max of last and i + 1.
required maximum sum
The example from the article , the answer is 19.
Always increasing , the answer is 15.
Always decreasing , the answer is 15.
All are equal , the answer is 5.
The whole array is bitonic , but the answer is 7.
The answer is 4 ( the tail ) .
Python program to find the smallest sum contiguous subarray
function to find the smallest sum contiguous subarray
to store the minimum value that is ending up to the current index
to store the minimum value encountered so far
traverse the array elements
if min_ending_here > 0 , then it could not possibly contribute to the minimum sum further
else add the value arr [ i ] to min_ending_here
update min_so_far
required smallest sum contiguous subarray value
Driver code
Python3 code to find nth number with digits 0 , 1 , 2 , 3 , 4 , 5
If the Number is less than 6 return the number as it is .
Call the function again and again the get the desired result . And convert the number to base 6.
Decrease the Number by 1 and Call ans function to convert N to base 6
Driver code
Python3 program to find minimum number of squares to cut a paper using Dynamic Programming
Returns min number of squares needed
Initializing max values to vertical_min and horizontal_min
N = 11 & M = 13 is a special case
If the given rectangle is already a square
If the answer for the given rectangle is previously calculated return that answer
The rectangle is cut horizontally and vertically into two parts and the cut with minimum value is found for every recursive call .
Calculating the minimum answer for the rectangles with width equal to n and length less than m for finding the cut point for the minimum answer
Calculating the minimum answer for the rectangles with width equal to n and length less than m for finding the cut point for the minimum answer
Minimum of the vertical cut or horizontal cut to form a square is the answer
Driver code
Function call
Returns factorial of n
returns nCr
Driver code
Returns count of ways to color k posts using k colors
There are k ways to color first post
There are 0 ways for single post to violate ( same color_ and k ways to not violate ( different color )
Fill for 2 posts onwards
Current same is same as previous diff
We always have k - 1 choices for next post
Total choices till i .
Driver code
Returns sum of all substring of num
Initialize result
Here traversing the array in reverse order . Initializing loop from last element . mf is multiplying factor .
Each time sum is added to its previous sum . Multiplying the three factors as explained above . int ( s [ i ] ) is done to convert char to int .
Making new multiplying factor as explained above .
Driver code to test above methods
Returns maximum sum of a subarray with at - least k elements .
maxSum [ i ] is going to store maximum sum till index i such that a [ i ] is part of the sum .
We use Kadane 's algorithm to fill maxSum[]  Below code is taken from method3 of  https:www.geeksforgeeks.org/largest-sum-contiguous-subarray/
Sum of first k elements
Use the concept of sliding window
Compute sum of k elements ending with a [ i ] .
Update result if required
Include maximum sum till [ i - k ] also if it increases overall max .
Driver code
Function to count the total number of ways to sum up to 'N
base case
Count ways for all values up to ' N ' and store the result
if i >= arr [ j ] then accumulate count for value ' i ' as ways to form value 'i-arr[j]
required number of ways
Driver Code
Recursive function to find the number of special sequences
A special sequence cannot exist if length n is more than the maximum value m .
If n is 0 , found an empty special sequence
There can be two possibilities : ( 1 ) Reduce last element value ( 2 ) Consider last element as m and reduce number of terms
Driver Code
DP based function to find the number of special sequence
define T and build in bottom manner to store number of special sequences of length n and maximum value m
Base case : If length of sequence is 0 or maximum value is 0 , there cannot exist any special sequence
if length of sequence is more than the maximum value , special sequence cannot exist
If length of sequence is 1 then the number of special sequences is equal to the maximum value For example with maximum value 2 and length 1 , there can be 2 special sequences { 1 } , { 2 }
otherwise calculate
Driver Code
Returns length of length common subsequence for str1 [ 0. . m - 1 ] , str2 [ 0. . n - 1 ]
Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note that L [ i ] [ j ] contains length of LCS of str1 [ 0. . i - 1 ] and str2 [ 0. . j - 1 ]
L [ m ] [ n ] contains length of LCS for X [ 0. . n - 1 ] and Y [ 0. . m - 1 ]
function to find minimum number of deletions and insertions
Driver Code
Function Call
lis ( ) returns the length of the longest increasing subsequence in arr [ ] of size n
Initialize LIS values for all indexes
Compute optimized LIS values in bottom up manner
Pick resultimum of all LIS values
Function to calculate minimum number of deletions
Find longest increasing subsequence
After removing elements other than the lis , we get sorted sequence .
Driver Code
Python3 program to find minimum cost k partitions of array .
Returns minimum cost of partitioning a [ ] in k clusters .
Create a dp [ ] [ ] table and initialize all values as infinite . dp [ i ] [ j ] is going to store optimal partition cost for arr [ 0. . i - 1 ] and j partitions
Fill dp [ ] [ ] in bottom up manner
Current ending position ( After i - th iteration result for a [ 0. . i - 1 ] is computed .
j is number of partitions
Picking previous partition for current i .
Driver code
Returns the length of the longest palindromic subsequence in 'str
Create a table to store results of subproblems
Strings of length 1 are palindrome of length 1
Build the table . Note that the lower diagonal values of table are useless and not filled in the process . c1 is length of substring
length of longest palindromic subseq
function to calculate minimum number of deletions
Find longest palindromic subsequence
After removing characters other than the lps , we get palindrome .
Driver Code
Returns minimum offerings required
Go through all templs one by one
Go to left while height keeps increasing
Go to right while height keeps increasing
This temple should offer maximum of two values to follow the rule .
Driver Code
Returns true if there is a subset of arr [ ] with sum divisible by m
This array will keep track of all the possible sum ( after modulo m ) which can be made using subsets of arr [ ] initialising boolean array with all false
we 'll loop through all the elements of arr[]
anytime we encounter a sum divisible by m , we are done
To store all the new encountered sum ( after modulo ) . It is used to make sure that arr [ i ] is added only to those entries for which DP [ j ] was true before current iteration .
For each element of arr [ ] , we loop through all elements of DP table from 1 to m and we add current element i . e . , arr [ i ] to all those elements which are true in DP table
if an element is true in DP table
We update it in temp and update to DP once loop of j is over
Updating all the elements of temp to DP table since iteration over j is over
Also since arr [ i ] is a single element subset , arr [ i ] % m is one of the possible sum
Driver code
tri [ ] [ ] is a 2D array that stores the triangle , n is number of lines or rows .
Adding the element of row 1 to both the elements of row 2 to reduce a step from the loop
Traverse remaining rows
Loop to traverse columns
tri [ i ] would store the possible combinations of sum of the paths
array at n - 1 index ( tri [ i ] ) stores all possible adding combination , finding the maximum one out of them
driver program
Returns maximum - difference - sum with array modifications allowed .
Initialize dp [ ] [ ] with 0 values .
for [ i + 1 ] [ 0 ] ( i . e . current modified value is 1 ) , choose maximum from dp [ i ] [ 0 ] + abs ( 1 - 1 ) = dp [ i ] [ 0 ] and dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] )
for [ i + 1 ] [ 1 ] ( i . e . current modified value is arr [ i + 1 ] ) , choose maximum from dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ) and dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] )
Driver Code
n is total number of characters . bCount and cCount are counts of ' b ' and ' c ' respectively .
Base cases
if we had saw this combination previously
Three cases , we choose , a or b or c In all three cases n decreases by 1.
A wrapper over countStrUtil ( )
Driver code
Total number of characters
size of the chessboard
Direction vector for the Knight
returns true if the knight is inside the chessboard
Bottom up approach for finding the probability to go out of chessboard .
dp array
For 0 number of steps , each position will have probability 1
for every number of steps s
for every position ( x , y ) after s number of steps
For every position reachable from ( x , y )
if this position lie inside the board
store the result
return the result
number of steps
Function Call
Return number of subarrays whose maximum element is less than or equal to K .
To store count of subarrays with all elements less than or equal to k .
Traversing the array .
If element is greater than k , ignore .
Counting the subarray length whose each element is less than equal to k .
Suming number of subarray whose maximum element is less than equal to k .
Driver code
Returns value of Binomial Coefficient C ( n , k )
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Method returns sum of average of all subsets
Find sum of elements
looping once for all subset of same size
each element occurs nCr ( N - 1 , n - 1 ) times while considering subset of size n
Driver code
Python3 program to find the maximum sum such that no three are consecutive using recursion .
Returns maximum subsequence sum such that no three elements are consecutive
3 Base cases ( process first three elements )
Process rest of the elements We have three cases
Driver code
Method to return maximum sum we can get by finding less than K difference pairs
Sort elements to ensure every i and i - 1 is closest possible pair
To get maximum possible sum , iterate from largest to smallest , giving larger numbers priority over smaller numbers .
Case I : Diff of arr [ i ] and arr [ i - 1 ] is less then K , add to maxSum Case II : Diff between arr [ i ] and arr [ i - 1 ] is not less then K , move to next i since with sorting we know , arr [ i ] - arr [ i - 1 ] < arr [ i ] - arr [ i - 2 ] and so on .
Assuming only positive numbers .
When a match is found skip this pair
Driver Code
Function to find the subgroups
Terminating Condition
sum of digits
Traverse all digits from current position to rest of the length of string
If forward_sum is greater than the previous sum , then call the method again
Note : We pass current sum as previous sum
Total number of subgroups till the current position
Driver Code
Maximum length of input number string
A memoization table to store results of subproblems length of string is 40 and maximum sum will be 9 * 40 = 360.
Function to find the count of splits with given condition
Terminating Condition
If already evaluated for a given sub problem then return the value
countGroups for current sub - group is 0
sum of digits
Traverse all digits from current position to rest of the length of string
If forward_sum is greater than the previous sum , then call the method again
Note : We pass current sum as previous sum
total number of subgroups till the current position
Driver Code
val [ ] is for storing maximum profit for each weight wt [ ] is for storing weights n number of item W maximum capacity of bag dp [ W + 1 ] to store final result
initially profit with 0 to W KnapSack capacity is 0
iterate through all items
traverse dp array from right to left
above line finds out maximum of dp [ j ] ( excluding ith element value ) and val [ i ] + dp [ j - wt [ i ] ] ( including ith element value and the profit with " KnapSack ▁ capacity ▁ - ▁ ith ▁ element ▁ weight " ) *
Driver program to test the cases
Iterative DP function to find the number of times the second string occurs in the first string , whether continuous or discontinuous
Create a table to store results of sub - problems
If first string is empty
If second string is empty
Fill lookup [ ] [ ] in bottom up manner
If last characters are same , we have two options - 1. consider last characters of both strings in solution 2. ignore last character of first string
If last character are different , ignore last character of first string
Driver code
Returns length of the longest GP subset of sett [ ]
Base cases
let us sort the sett first
An entry L [ i ] [ j ] in this table stores LLGP with sett [ i ] and sett [ j ] as first two elements of GP and j > i .
Initialize result ( A single element is always a GP )
Initialize values of last column
Consider every element as second element of GP
Search for i and k for j
Two cases when i , j and k don 't form  a GP.
i , j and k form GP , LLGP with i and j as first two elements is equal to LLGP with j and k as first two elements plus 1. L [ j ] [ k ] must have been filled before as we run the loop from right side
Update overall LLGP
Change i and k to fill more L [ i ] [ j ] values for current j
If the loop was stopped due to k becoming more than n - 1 , set the remaining entries in column j as 1 or 2 based on divisibility of sett [ j ] by sett [ i ]
Return result
Driver code
Dynamic Programming solution to construct Maximum Length Chain of Pairs
comparator function for sort function
Function to construct Maximum Length Chain of Pairs
Sort by start time
L [ i ] stores maximum length of chain of arr [ 0. . i ] that ends with arr [ i ] .
L [ 0 ] is equal to arr [ 0 ]
start from index 1
for every j less than i
L [ i ] = { Max ( L [ j ] ) } + arr [ i ] where j < i and arr [ j ] . b < arr [ i ] . a
print max length vector
Driver Code
Utility function to print Longest Bitonic Subsequence
Function to construct and print Longest Bitonic Subsequence
LIS [ i ] stores the length of the longest increasing subsequence ending with arr [ i ]
initialize LIS [ 0 ] to arr [ 0 ]
Compute LIS values from left to right
for every j less than i
LDS [ i ] stores the length of the longest decreasing subsequence starting with arr [ i ]
initialize LDS [ n - 1 ] to arr [ n - 1 ]
Compute LDS values from right to left
for every j greater than i
reverse as vector as we 're inserting at end
LDS [ i ] now stores Maximum Decreasing Subsequence of arr [ i . . n ] that starts with arr [ i ]
Find maximum value of size of LIS [ i ] + size of LDS [ i ] - 1
print all but last element of LIS [ maxIndex ] vector
print all elements of LDS [ maxIndex ] vector
Driver Code
Find if given string is K - Palindrome or not
Create a table to store results of subproblems
Fill dp [ ] [ ] in bottom up manner
If first string is empty , only option is to remove all characters of second string
If second string is empty , only option is to remove all characters of first string
If last characters are same , ignore last character and recur for remaining string
If last character are different , remove it and find minimum
dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , Remove from str1 ( dp [ i ] [ j - 1 ] ) ) Remove from str2
Returns true if str is k palindrome .
Driver program
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]
Find lengths of two strings
Binary index , used to index current row and previous row .
Compute current binary index
Last filled entry contains length of LCS for X [ 0. . n - 1 ] and Y [ 0. . m - 1 ]
Driver Code
Python 3 arr dynamic programming solution to finding the number of subsets having xor of their elements as k
Returns count of subsets of arr [ ] with XOR value equals to k .
Find maximum element in arr [ ]
Maximum possible XOR value
Initializing all the values of dp [ i ] [ j ] as 0
The xor of empty subset is 0
Fill the dp table
The answer is the number of subset from set arr [ 0. . n - 1 ] having XOR of elements as k
Driver Code
A Recursive Python3 program to solve minimum sum partition problem .
Returns the minimum value of the difference of the two sets .
Calculate sum of all elements
Create an 2d list to store results of subproblems
Initialize first column as true . 0 sum is possible with all elements .
Initialize top row , except dp [ 0 ] [ 0 ] , as false . With 0 elements , no other sum except 0 is possible
Fill the partition table in bottom up manner
If i 'th element is excluded
If i 'th element is included
Initialize difference of two sums .
Find the largest j such that dp [ n ] [ j ] is true where j loops from sum / 2 t0 0
Driver code
Python3 program to count number of paths with maximum k turns allowed
table to store results of subproblems
Returns count of paths to reach ( i , j ) from ( 0 , 0 ) using at - most k turns . d is current direction , d = 0 indicates along row , d = 1 indicates along column .
If invalid row or column indexes
If current cell is top left itself
If 0 turns left
If direction is row , then we can reach here only if direction is row and row is 0.
If direction is column , then we can reach here only if direction is column and column is 0.
If this subproblem is already evaluated
If current direction is row , then count paths for two cases 1 ) We reach here through previous row . 2 ) We reach here through previous column , so number of turns k reduce by 1.
Similar to above if direction is column
This function mainly initializes ' dp ' array as - 1 and calls countPathsUtil ( )
If ( 0 , 0 ) is target itself
Recur for two cases : moving along row and along column
Driver Code
Python3 program to find size of minimum possible array after removing elements according to given rules
dp [ i ] [ j ] denotes the minimum number of elements left in the subarray arr [ i . . j ] .
If already evaluated
If size of array is less than 3
Initialize result as the case when first element is separated ( not removed using given rules )
Now consider all cases when first element forms a triplet and removed . Check for all possible triplets ( low , i , j )
Check if this triplet follows the given rules of removal . And elements between ' low ' and ' i ' , and between ' i ' and ' j ' can be recursively removed .
Insert value in table and return result
This function mainly initializes dp table and calls recursive function minSizeRec
Driver program to test above function
Recursive function that returns count of solutions for given rhs value and coefficients coeff [ stat ... end ]
Base case
Initialize count of solutions
One by one subtract all smaller or equal coefficients and recur
Driver Code
Returns weight of the maximum weight transformation
Base Case
If this subproblem is already solved
Don 't make pair, so  weight gained is 1
If we can make pair
If elements are dissimilar
if elements are similar so for making a pair we toggle any of them . Since toggle cost is 1 so overall weight gain becomes 3
save and return maximum of above cases
Initializes lookup table and calls getMaxRec ( )
Create and initialize lookup table
Call recursive function
Driver Code
python program to count number of steps to reach a point
source -> source vertex step -> value of last step taken dest -> destination vertex
base cases
if we go on positive side
if we go on negative side
minimum of both cases
Driver Code
Function to find the length of the longest LCS
Create DP table
Driver Code
Function call
Returns length of function for longest common substring of X [ 0. . m - 1 ] and Y [ 0. . n - 1 ]
Driver code
Function to check if it is possible to make all the array elements equal using the given operation
Stores the XOR of all elements of array A [ ]
Case 1 , check if the XOR of the array A [ ] is 0
Maintains the XOR till the current element
Iterate over the array
If the current XOR is equal to the total XOR increment the count and initialize current XOR as 0
Print Answer
Driver Code
Function Call
Function to calculate the number of palindromes
Calculation of Z - array
Calculation of sigma ( Z [ i ] + 1 )
return the count
Given String
Function to print strings present between any pair of delimeters
Stores the indices
If opening delimeter is encountered
If closing delimeter is encountered
Extract the position of opening delimeter
Length of substring
Extract the substring
Driver Code
Function to traverse the matrix diagonally upwards
Store the number of rows
Initialize queue
Push the index of first element i . e . , ( 0 , 0 )
Get the front element
Pop the element at the front
Insert the element below if the current element is in first column
Insert the right neighbour if it exists
Driver Code
Given vector of vectors arr
Function call
Function that returns the restored permutation
List to store the result
Map to mark the elements which are taken in result
Checking if the element is coming first time
Push in result vector
Mark it in the map
Return the answer
Function to print the result
Driver code
Given array
Function call
Function that returns the restored permutation
Vector to store the result
Set to insert unique elements
Check if the element is coming first time
Push in result vector
Function to print the result
Driver Code
Given Array
Function Call
Function to find the sum of N integers from 1 to N
Function to print the given pattern
Iterate over [ 0 , N - 1 ]
Sub - Pattern - 1
Sub - Pattern - 2
Count the number of element in rows and sub - pattern 2 and 3 will have same rows
Increment Val to print the series 1 , 2 , 3 , 4 , 5 ...
Finally , add the ( N - 1 ) th element i . e . , 5 and increment it by 1
Initial is used to give the initial value of the row in Sub - Pattern 3
Sub - Pattern 3
Skip printing zero at the last
Given N
Function call
Function to check if B is a prefix of A or not
Convert numbers into strings
Find the length of s1 and s2
Base case
Traverse the string s1 and s2
If at any index characters are unequal then return False
Return true
Driver code
Given numbers
Function call
If B is a prefix of A , then print Yes
Function to check if it is possible to reach ( x , y ) from origin in exactly z steps
Condition if we can 't reach in Z steps
Driver Code
Destination pocoordinate
Number of steps allowed
Function call
Function to find the Number of Cycles
Driver code
Python3 program for the above problem
Recursive function to count the sum of bit differences of numbers from 1 to pow ( 2 , ( i + 1 ) ) - 1
Base cases
Recursion call if the sum of bit difference of numbers around i are not calculated
Return the sum of bit differences if already calculated
Function to calculate the sum of bit differences up to N
Nearest smaller power of 2
Remaining numbers
Calculate the count of bit diff
Driver code
Function to find count of head and tail
Check if initially all the coins are facing towards head
Check if initially all the coins are facing towards tail
Driver Code
Function to find the longest palindrome from the start of the string using KMP match
Append S ( reverse of C ) to C
Use KMP algorithm
Function to return longest palindromic string possible from the given string after removal of any substring
Initialize three strings A , B AND F
Loop to find longest substrings from both ends which are reverse of each other
Proceed to third step of our approach
Remove the substrings A and B
Find the longest palindromic substring from beginning of C
Find the longest palindromic substring from end of C
Store the maximum of D and E in F
Find the final answer
Driver code
Function to find Nth term
Nth term
Driver Method
Function to find Nth term
Nth term
Driver Method
Function to find Nth term
Nth term
Driver code
Python3 implementation of the approach
Function to return the final number obtained after performing the given operation
Find the gcd of the array elements
Driver code
Function that returns true if acter ch is a vowel
Compares two integers according to their digit sum
Check if there are two consecutive consonants
Check if there is any vowel surrounded by two consonants
Driver code
Returns length of the longest prefix which is also suffix and the two do not overlap . This function mainly is copy of computeLPSArray ( ) in KMP Algorithm
Length of the previous longest prefix suffix
Loop to calculate lps [ i ] for i = 1 to n - 1
This is tricky . Consider the example . AAACAAAA and i = 7. The idea is similar to search step .
If len = 0
Since we are looking for non overlapping parts
Function that returns the prefix
Get the length of the longest prefix
Stores the prefix
Traverse and add characters
Returns the prefix
Driver code
Python 3 program to implement the above approach
Function to calculate number of characters in corresponding string of ' A ' and 'B
Since the minimum number of characters will be 1
Calculating number of characters
Since k length string can represent at most pow ( 2 , k + 1 ) - 2 that is if k = 4 , it can represent at most pow ( 2 , 4 + 1 ) - 2 = 30 so we have to calculate the length of the corresponding string
return the length of the corresponding string
Function to print corresponding string of ' A ' and 'B
Find length of string
Since the first number that can be represented by k length string will be ( pow ( 2 , k ) - 2 ) + 1 and it will be AAA ... A , k times , therefore , N will store that how much we have to print
At a particular time , we have to decide whether we have to print ' A ' or ' B ' , this can be check by calculating the value of pow ( 2 , k - 1 )
Print new line
Driver code
Function to return the resultant string
Iterate through all positions i
Current sub - string of length = len ( A ) = len ( B )
If current sub - string gets equal to A or B
Update S after replacing A
Update S after replacing B
Return the updated string
Driver code
Function to print the required pattern
When condition fails
When m = n - 1
Driver Code
Function to count the number of strictly decreasing subarrays
Initialize length of current decreasing subarray
Traverse through the array
If arr [ i + 1 ] is less than arr [ i ] , then increment length
Else Update count and reset length
If last length is more than 1
Driver Code
Python3 program to find the minimum number of characters to be replaced in string S2 , such that S1 is a substring of S2
Function to find the minimum number of characters to be replaced in string S2 , such that S1 is a substring of S2
Get the sizes of both strings
Traverse the string S2
From every index in S2 , check the number of mis - matching characters in substring of length of S1
Take minimum of prev and current mis - match
return answer
Driver Code
Simple python program to count occurrences of pat in txt .
A loop to slide pat [ ] one by one
For current index i , check for pattern match
if pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]
Driver Code
A modified Naive Pattern Searching algorithm that is optimized for the cases when all characters of pattern are different
For current index i , check for pattern match
if j == M : if pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]
slide the pattern by j
Driver program to test the above function
Function to find the replaced digit in the product of a * b
Keeps track of the sign of the current digit
Stores the value of a % 11
Find the value of a mod 11 for large value of a as per the derived formula
Stores the value of b % 11
Find the value of b mod 11 for large value of a as per the derived formula
Stores the value of c % 11
Keeps track of the sign of x
If the current digit is the missing digit , then keep the track of its sign
Find the value of x using the derived equation
Check if x has a negative sign
Return positive equivaluent of x mod 11
Driver Code
Function to check if a string can be made empty by removing all subsequences of the form " GFG " or not
Driver Code
Function to check if str2 can be made by characters of str1 or not
To store the occurrence of every character
Length of the two strings
Assume that it is possible to compose the string str2 from str1
Iterate over str1
Store the presence or every element
Iterate over str2
Ignore the spaces
Check for the presence of character in str1
If it is possible to make str2 from str1
Given strings
Function call .
Function to find the minimum number of inversions required .
Initializing the answer
Iterate over the range
If s1 [ i ] != s2 [ i ] , then inverse the characters at i snd ( i + 1 ) positions in s1 .
Adding 1 to counter if characters are not same
Driver Code
Function to find the length of subsequence starting with character ch
Length of the string
Stores the maximum length
Traverse the given string
If s [ i ] is required character ch
Increment ans by 1
Increment character ch
Return the current maximum length with character ch
Function to find the maximum length of subsequence of consecutive characters
Stores the maximum length of consecutive characters
Update ans
Return the maximum length of subsequence
Driver Code
Input
Function Call
Function to find the minimum number of operations to empty a binary string
Stores the resultant number of operations
Stores the number of 0 s
Stores the number of 1 s
Traverse the given string
To balance 0 with 1 if possible
Increment the value of cn0 by 1
To balance 1 with 0 if possible
Increment the value of cn1
Update the maximum number of unused 0 s and 1 s
Print resultant count
Driver Code
Function to find the length of the smallest string possible by removing substrings "01" and "11"
Stores the length of the smallest string
Traverse the string S
If st is greater than 0 and S [ i ] is '1
Delete the last character and decrement st by 1
Otherwise
Increment st by 1
Return the answer in st
Driver Code
Input
Function call
Function to find the length of the longest non - increasing subsequence
Stores the prefix and suffix count of 1 s and 0 s respectively
Store the number of '1' s up to current index i in pre
Find the prefix sum
If the current element is '1' , update the pre [ i ]
Store the number of '0' s over the range [ i , N - 1 ]
Find the suffix sum
If the current element is '0' , update post [ i ]
Stores the maximum length
Find the maximum value of pre [ i ] + post [ i ]
Return the answer
Driver Code
Function to find the count of substrings having an equal number of uppercase and lowercase characters
Stores the count of prefixes having sum S considering uppercase and lowercase characters as 1 and - 1
Stores the count of substrings having equal number of lowercase and uppercase characters
Stores the sum obtained so far
If the character is uppercase
Otherwise
If currsum is o
If the current sum exists in the HashMap prevSum
Increment the resultant count by 1
Update the frequency of the current sum by 1
Return the resultant count of the subarrays
Driver Code
Function to count substrings having even frequency of each character
Stores the total count of substrings
Traverse the range [ 0 , N ] :
Traverse the range [ i + 1 , N ]
Stores the substring over the range of indices [ i , len ]
Stores the frequency of characters
Count frequency of each character
Traverse the dictionary
If any of the keys have odd count
Otherwise
Return count
Driver Code
Function to count new pairs of strings that can be obtained by swapping first characters of any pair of strings
Stores the count of pairs
Generate all possible pairs of strings from the array arr [ ]
Stores the current pair of strings
Swap the first characters
Check if they are already present in the array or not
If both the strings are not present
Increment the ans by 1
Print the resultant count
Driver Code
Function to modify string by replacing characters by the alphabet present at distance equal to frequency of the string
Stores frequency of characters
Stores length of the string
Traverse the given string S
Increment frequency of current character by 1
Traverse the string
Store the value to be added to the current character
Check if after adding the frequency , the character is less than ' z ' or not
Otherwise , update the value of add so that s [ i ] doesn ' t ▁ exceed ▁ ' z
Print the modified string
Driver Code
Function to check if it is possible to reach any point on circumference of the given circle from ( 0 , 0 )
Stores the count of ' L ' , 'R
Stores the count of ' U ' , 'D
Traverse the string S
Update the count of L
Update the count of R
Update the count of U
Update the count of D
Condition 1 for reaching the circumference
Store the the value of ( i * i ) in the Map
Check if ( r_square - i * i ) already present in HashMap
If it is possible to reach the point ( mp [ r_square - i * i ] , i )
If it is possible to reach the point ( i , mp [ r_square - i * i ] )
If it is impossible to reach
Driver Code
Function to modify a given string by adding ASCII value of characters from a string S to integer values of same indexed characters in string N
Traverse the string
Stores integer value of character in string N
Stores ASCII value of character in string S
If b exceeds 122
Replace the character
Print resultant string
Driver Code
Given strings
Function call to modify string S by given operations
Function to convert a decimal number to its equivalent hexadecimal number
Function to convert hexadecimal number to its equavalent decimal number
Stores characters with their respective hexadecimal values
Stores answer
Traverse the string
If digit
If character
Return the answer
Function to move all the alphabets to front
Function to modify each array element by removing characters from their hexadecimal representation which are present in a given string
Traverse the array
Stores hexadecimal value
Remove the characters from hexadecimal representation present in string S
Stores decimal value
Replace array element
Print the modified array
Given array
Given string
Function call to modify array by given operations
Python 3 implementation of the above approach
Function to find the minimum number of chairs required to ensure that every worker is seated at any time
Stores the number of chairs required
Pointer to iterate
Stores minimum number of chairs required
Iterate over every character
If character is 'E
Increase the count
Otherwise
Update maximum value of count obtained at any given time
Return mini
Driver Code
Given String
Function call to find the minimum number of chairs
Function to replace all ' ? ' characters in a string such that the given conditions are satisfied
Traverse the string to Map the characters with respective positions
Traverse the string again and replace all unknown characters
If i % k is not found in the Map M , then return - 1
Update S [ i ]
Print the string S
Driver Code
Function to rearrange characters in S1 such that S2 is not a subsequence of it
Store the frequencies of characters of s2
Traverse the s2
Update the frequency
Find the number of unique characters in s2
Increment unique by 1 if the condition satisfies
Check if the number of unique characters in s2 is 1
Store the unique character frequency
Store occurence of it in s1
Find count of that character in the s1
Increment count by 1 if that unique character is same as current character
If count count_in_s1 is less than count_in_s2 , then prs1 and return
Otherwise , there is no possible arrangement
Checks if any character in s2 is less than its next character
Iterate the string , s2
If s [ i ] is greater than the s [ i + 1 ]
Set inc to 0
If inc = 1 , prs1 in decreasing order
Otherwise , prs1 in increasing order
Driver code
Function to find if string is reducible to NULL
Length of string
Stack to store all 1 s
Iterate over the characters of the string
If current character is 1
Push it into the stack
Pop from the stack
If the stack is empty
Driver code
Function to find minimum flips required such that a string does not contain any pair of consecutive 0 s
Stores minimum count of flips
Iterate over the characters of the string
If two consecutive characters are equal to '0
Update S [ i + 1 ]
Update cntOp
Driver Code
Function to rearrange the string such that the minimum distance between any of vowels is maximum .
store vowels and consonants
Iterate over the characters of string
if current character is a vowel
if current character is consonant
store count of vowels and consonants respectively
store the resultant string
store count of consonants append into ans
Append vowel to ans
Append consonants
Appendconsonant to ans
update temp
Remove the taken elements of consonant
return final answer
Driver code
Function Call
Function to find the lexicographically smallest possible string by performing K operations on string S
Store the size of string , s
Check if k >= n , if true , convert every character to 'a
Iterate in range [ 0 , n - 1 ] using i
When k reaches 0 , break the loop
If current character is ' a ' , continue
Otherwise , iterate in the range [ i + 1 , n - 1 ] using j
Check if s [ j ] > s [ i ]
If true , set s [ j ] = s [ i ] and break out of the loop
Check if j reaches the last index
Update S [ i ]
Decrement k by 1
Print string
Driver Code
Given String , s
Given k
Function Call
Function to find minimum count of steps required ot make string S an empty string
Stores count of occurences '(
Stores count of occurences ')
Traverse the string , str
If current character is '(
Update count_1
Update count_2
If all the characters are same , then pr - 1
If the count of occurence of ' ) ' and ' ( ' are same then pr0
If length of string is Odd
Driver Code
Given string
Size of the string
Function Call
Function to check whether the string S satisfy the given DFA or not
Stores the count of characters
Iterate over the range [ 0 , N ]
Count and check every element for 'a
If string matches with DFA
If not matches
Driver Code
Function Call
Function to count maximum number of palindromic string of length 3
Stores the final count of palindromic strings
Traverse the array
Increment res by arr [ i ] / 3 , i . e forming string of only i + ' a ' character
Store remainder
Increment c1 by one , if current frequency is 1
Increment c2 by one , if current frequency is 2
Count palindromic strings of length 3 having the character at the ends different from that present in the middle
Update c1 and c2
Increment res by 2 * c2 / 3
Finally print the result
Driver Code
Given array
Function Call
Function to find the winner of a game of repeatedly removing the first character to empty a string
Store characters of each string of the array arr [ ]
Stores count of strings in arr [ ]
Traverse the array arr [ ]
Stores length of current string
Traverse the string
Insert arr [ i ] [ j ]
1 st Player starts the game
Stores the player number for the next turn
Remove 1 st character of current string
Update player number for the next turn
Driver Code
Function to find the Longest substring that can be made a palindrome by swapping of characters
Initialize dp array of size 1024
Initializing mask and res
Traverse the string
Find the mask of the current character
Finding the length of the longest substring in s which is a palindrome for even count
Finding the length of the longest substring in s which is a palindrome for one odd count
Finding maximum length of substring having one odd count
dp [ mask ] is minimum of current i and dp [ mask ]
Return longest length of the substring which forms a palindrome with swaps
Driver Code
Input String
Function Call
Function to print valid and formatted phone number
Length of given
Store digits in temp
Iterate given M
If any digit : append it to temp
Find new length of
If length is not equal to 10
Store final result
Make groups of 3 digits and enclose them within ( ) and separate them with " - " 0 to 2 index 1 st group
3 to 5 index 2 nd group
6 to 8 index 3 rd group
9 to 9 index last group
Print final result
Driver Code
Given
Function Call
Function to calculate modulus of two Hexadecimal numbers
Store all possible hexadecimal digits
Iterate over the range [ '0' , '9' ]
Convert given string to long
Base to get 16 power
Store N % K
Iterate over the digits of N
Stores i - th digit of N
Update ans
Update base
Print the answer converting into hexadecimal
Driver Code
Given string N and K
Function Call
Store the current sequence of s
Store the all the required sequences
Function to print all sequences of S satisfying the required condition
Print all strings in the set
Function to generate all sequences of string S that are at most N
Iterate over string s
Push ith character to combination
Convert the string to number
Check if the condition is true
Push the current string to the final set of sequences
Recursively call function
Backtrack to its previous state
Driver Code
Function Call
Print required sequences
Function to find the hash value of a
Traverse the
Update hash_val
Update mul
Return hash_val of str
Function to find the count of distinct strings present in the given array
Store the hash values of the strings
Traverse the array
Stores hash value of arr [ i ]
Sort hash [ ] array
Stores count of distinct strings in the array
Traverse hash [ ] array
Update cntElem
Driver Code
Function to perform the seive of eratosthenes algorithm
Initialize all entries in prime [ ] as true
Initialize 0 and 1 as non prime
Traversing the prime array
If i is prime
All multiples of i must be marked false as they are non prime
Function to remove characters which have prime frequency in the String
Length of the String
Create a bool array prime
Sieve of Eratosthenes
Stores the frequency of character
Storing the frequencies
New String that will be formed
Removing the characters which have prime frequencies
If the character has prime frequency then skip
Else concatenate the character to the new String
Print the modified String
Driver Code
Function Call
Function to rearrange given alphanumeric such that no two adjacent characters are of the same type
Stores alphabets and digits
Store the alphabets and digits separately in the strings
Stores the count of alphabets and digits
If respective counts differ by 1
Desired arrangement not possible
Stores the indexes
Check if first character should be alphabet or digit
Place alphabets and digits alternatively
If current character needs to be alphabet
If current character needs to be a digit
Flip flag for alternate arrangement
Return resultant string
Driver Code
Given String
Function call
Function to find the value after N operations to remove all the N characters of String S
Iterate till N
Remove character at ind and decrease n ( size of String )
Increase count by ind + 1
Driver Code
Given String str
Function call
Function that prints the middle character of a string
Finding string length
Finding middle index of string
Prthe middle character of the string
Given string str
Function Call
Function to check if all the string characters are unique
Check for repetition in characters
Function to generate all possible strings from the given array
Base case
Consider every string as a starting substring and store the generated string
Add current string to result of other strings and check if characters are unique or not
Function to find the maximum possible length of a string
Return max length possible
Return the answer
Driver Code
Function to perform range sum queries on string as per the given condition
Initialize N by string size
Create array A [ ] for prefix sum
Iterate till N
Traverse the queries
Check if if L == 1 range sum will be A [ R - 1 ]
Condition if L > 1 range sum will be A [ R - 1 ] - A [ L - 2 ]
Given string
Given Queries
Function call
Function to generate all permutations and print the ones that are divisible by the N
Convert string to integer
Check for divisibility and print it
Print all the permutations
Swap characters
Permute remaining characters
Revoke the swaps
Driver Code
Function to convert decimal to binary representation
Iterate over all bits of N
If bit is 1
Return binary representation
Function to check if binary conversion of numbers from N to 1 exists in the string as a substring or not
To store the count of number exists as a substring
Traverse from N to 1
If current number is not present in map
Store current number
Find binary of t
If the string s is a substring of str
Mark t as true
Increment the count
Update for t / 2
Special judgment '0
If the count is N + 1 , return " yes "
Driver Code
Given String
Given Number
Function Call
Function to find the word with maximum number of anagrams
Primes assigned to 26 alphabets
Stores the product and word mappings
Stores the frequencies of products
Calculate the product of primes assigned
If product already exists
Otherwise
Fetch the most frequent product
Return a string with that product
Driver Code
Function to replace every vowel with next vowel lexicographically
Storing the vowels in the map with custom numbers showing their index
Iterate over the string
If the current character is a vowel Find the index in Hash and Replace it with next vowel from Hash
Driver function
Function to check if a string is palindrome or not
Length of the string
Check if its a palindrome
If the palindromic condition is not met
Return true as Str is palindromic
Function to check if string str is palindromic after removing every consecutive characters from the str
Length of the string str
Create an empty compressed string
The first character will always be included in final string
Check all the characters of the string
If the current character is not same as its previous one , then insert it in the final string
Check if the compressed string is a palindrome
Driver Code
Given string
Function call
function to check vowel or not
Function to Count all substrings in a string which contains only vowels
if current character is vowel
increment
Count all possible substring of calculated length
Reset the length
Add remaining possible substrings consisting of vowels occupying last indices of the string
Driver Program
Function to get the total count
Moving until we get the rightmost set bit
To get total number of bits in a number
Function to find the integer formed after flipping all bits to the left of the rightmost set bit
Find the total count of bits and the rightmost set bit
XOR given number with the number which has is made up of only totbits set
To avoid flipping the bits to the right of the set bit , take XOR with the number made up of only set firstbits
Driver Code
Function to check a character is vowel or not
Function to find length of longest substring consisting only of vowels and no similar adjacent alphabets
Stores max length of valid subString
Stores length of current valid subString
If curr and prev character are not same , include it
If same as prev one , start new subString from here
Store max in maxLen
Driver code
Iterative Function to calculate base ^ pow in O ( log y )
Function to return the count of non palindromic strings
Count of strings using n characters with repetitions allowed
Count of palindromic strings
Count of non - palindromic strings
Driver code
To store the frequency array
Function to check palindromic of of any substring using frequency array
Initialise the odd count
Traversing frequency array to compute the count of characters having odd frequency
Returns true if odd count is atmost 1
Function to count the total number substring whose any permutations are palindromic
Computing the frequency of first K character of the string
To store the count of palindromic permutations
Checking for the current window if it has any palindromic permutation
Start and end poof window
Decrementing count of first element of the window
Incrementing count of next element of the window
Checking current window character frequency count
Return the final count
Given string str
Window of size K
Function call
Function to return the count of minimum flips required
If curr occurs in the final string
Switch curr to '0' if '1' or vice - versa
Driver Code
Python3 program for the above approach
Function to check if B is a suffix of A or not
Find the number of digit in B
Subtract B from A
Returns true , if B is a suffix of A
Given numbers
Function Call
If B is a suffix of A , then print " Yes "
Python3 program to find the minimum length of substring whose rotation generates a palindromic substring
Function to return the minimum length of substring
Store the index of previous occurrence of the character
Variable to store the maximum length of substring
If the current character hasn 't appeared yet
If the character has occured within one or two previous index , a palindromic substring already exists
Update the maximum
Replace the previous index of the character by the current index
If character appeared at least twice
Driver Code
Python3 program for the above approach
Function to remove the HTML tags from the given tags
Print string after removing tags
Driver code
Given String
Function call to print the HTML string after removing tags
Customized tree class or struct , contains all required methods .
Function to add a child into the list of children
Function to change the parent pointer to the node passed
Function to return the parent of the current node
Function to compute the score recursively .
Base case
Adds scores of all children
Function to create the tree structure
Creating a node for every " ( ) "
If we find " ( " we add a node as a child
On finding " ) " which confirms that a pair is closed , we go back to the parent
Driver code
Generating the tree
Computing the score
Recursive program to bring ' x ' to the end
When the string is completed from reverse direction end of recursion
If the character x is found
Transverse the whole string
Swap the x so that it moves to the last
Call to the smaller problem now
Driver code
Size of a
Call to rec
Function to find the Largest Alphabetic Character
Array for keeping track of both uppercase and lowercase english alphabets
Iterate from right side of array to get the largest index character
Check for the character if both its uppercase and lowercase exist or not
Return - 1 if no such character whose uppercase and lowercase present in string str
Driver code
Function to generate the string
Declare empty string
counter for M
counter for K
Loop to generate string size of N
Generating K distinct letters one by one
After generating b distinct letters , append rest a - b letters as 'a
Reset the counter value and repeat the process
return final result string
Driver code
Function to print the final string after removing all the occurrences of "10" and "01" from the given binary string
Variables to store the count of 1 ' s ▁ and ▁ 0' s
Length of the string
For loop to count the occurrences of 1 ' s ▁ and ▁ 0' s in the string
To check if the count of 1 ' s ▁ is ▁ ▁ greater ▁ than ▁ the ▁ count ▁ of ▁ 0' s or not . If x is greater , then those many 1 's  are printed.
Length of the final remaining string after removing all the occurrences
Printing the final string
Driver Code
Function to print the longest palindrome
Printing every string in left vector
Printing the palindromic string in the middle
Printing the reverse of the right vector to make the final output palindromic
Function to find and print the longest palindrome that can be formed
Inserting each string in the set
Vectors to add the strings in the left and right side
To add the already present palindrome string in the middle of the solution
Iterating through all the given strings
If the string is a palindrome it is added in the middle
Checking if the reverse of the string is already present in the set
Driver code
Function that finds whether is it possible to make string A lexicographically smaller than string B
Condition if string A is already smaller than B
Sorting temp string
Condition for first changed character of string A and temp
Condition if string A is already sorted
Finding first changed character from last of string A
Swap the two characters
Condition if string A is smaller than B
Driver Code
Function to find maximum of the two variables
Function to find the longest palindromic substring : Recursion
Base condition when the start index is greater than end index
Base condition when both the start and end index are equal
Condition when corner characters are equal in the string
Recursive call to find the longest Palindromic string by excluding the corner characters
Recursive call to find the longest Palindromic string by including one corner character at a time
Function to find the longest palindromic sub - string
Utility function call
Driver Code
Function Call
Function to find the maximum possible prefix of the string
Hash map to store the frequency of the characters in the string
Iterate over the string to find the occurence of each Character
Minimum frequency of the Characters
Loop to find the count of minimum frequency in the hash - map
Loop to find the maximum possible length of the prefix in the string
Condition to check if the frequency is greater than minimum possible freq
maxprefix string and its length .
Driver code
String is initialize .
str is passed in MaxPrefix function .
Function to find the Number of sub - strings without using given character
the freq array
Count variable to store the count of the characters until a character from given L is encountered
If a character from L is encountered , then the answer variable is incremented by the value obtained by using the mentioned formula and count is set to 0
For last remaining characters
Driver code
Function to check if first character is vowel
Function to check
Driver function
Function to find the Nth occurrence of a character
Loop to find the Nth occurrence of the character
Driver Code
Function to find the maximum length
Fill the prefix array with the difference of letters
Update the maximum length
Driver code
Python3 implementation of above approach
Function to calculate the Jaro Similarity of two strings
If the strings are equal
Length of two strings
Maximum distance upto which matching is allowed
Count of matches
Hash for matches
Traverse through the first string
Check if there is any matches
If there is a match
If there is no match
Number of transpositions
Count number of occurrences where two characters match but there is a third matched character in between the indices
Find the next matched character in second string
Return the Jaro Similarity
Jaro Winkler Similarity
If the jaro Similarity is above a threshold
Find the length of common prefix
If the characters match
Else break
Maximum of 4 characters are allowed in prefix
Calculate jaro winkler Similarity
Driver code
Print Jaro - Winkler Similarity of two strings
Function that returns true if the word is found
To break the sentence in words
To temporarily store each individual word
Comparing the current word with the word to be searched
Driver code
Function that returns true if the word is found
To convert the word in uppercase
To convert the complete sentence in uppercase
To break the sentence in words
To store the individual words of the sentence
Compare the current word with the word to be searched
Driver code
Function to return the count of required characters
While there are characters left
Single bit character
Two - bit character
Update the count
Driver code
Python3 implementation of the approach
Function to print the frequency of each of the characters of s in alphabetical order
To store the frequency of the characters
Update the frequency array
Print the frequency in alphatecial order
If the current alphabet doesn 't  appear in the string
Driver code
Python3 implementation of the approach
Function to convert decimal number n to its binary representation stored as an array arr [ ]
Funtion to convert the number represented as a binary array arr [ ] its decimal equivalent
Function to concatenate the binary numbers and return the decimal result
Number of bits in both the numbers
Convert the bits in both the gers to the arrays a [ ] and b [ ]
c [ ] will be the binary array for the result
Update the c [ ] array
Return the decimal equivalent of the result
Driver code
Utility function to calculate binary length of a number .
Function to concatenate the binary numbers and return the decimal result
find binary length of n
left binary shift m and then add n
Driver code
Function to insert n 0 s in the beginning of the given string
Function to return the XOR of the given strings
Lengths of the given strings
Make both the strings of equal lengths by inserting 0 s in the beginning
Updated length
To store the resultant XOR
Driver code
Python implementation of the approach
Function to return the minimum operations required
To store the first and the last occurrence of all the characters
Set the first and the last occurrence of all the characters to - 1
Update the occurrences of the characters
Only set the first occurrence if it hasn 't already been set
To store the minimum operations
If the frequency of the current character in the string is less than 2
Count of characters to be removed so that the string starts and ends at the current character
Driver code
Python3 implementation of the approach
Function that returns true if ch is a vowel
Function to return the count of vowels in the substring str [ l ... r ]
To store the count of vowels
For every character in the index range [ l , r ]
If the current character is a vowel
For every query
Find the count of vowels for the current query
Driver code
Structure for a Singly Linked List
Function to add a node to the Linked List
Function to convert the string to Linked List .
curr pointer points to the current node where the insertion should take place
Function to print the data present in all the nodes
Driver code
Function to return the minimum possible length str can be reduced to with the given operation
Stack to store the characters of the given string
For every character of the string
If the stack is empty then push the current character in the stack
Get the top character
If the top element is not equal to the current element and it only differs in the case
Pop the top element from stack
Else push the current element
Driver code
Python3 implementation of the approach
Function that returns true if both the strings can be made equal with the given operation
Lengths of both the strings have to be equal
To store the frequency of the characters of str1
For every character of str2
If current character of str2 also appears in str1
Driver code
Function to return the count of characters that are to be inserted in str1 such that no three consecutive characters are same
To store the count of operations required
A character needs to be inserted after str1 [ i + 1 ]
Current three consecutive characters are not same
Driver code
Function to return the factorial of n
Function to return the count of all possible strings that can be formed with the characters of the given string without repeating characters
To store the distinct characters of the string str
Driver code
Function to return the required character
To store the summ of the characters of the given string
Add the current character to the summ
Return the required character
Driver code
Function to return the string after reversing characters in the range [ L , R ]
Invalid range
While there are characters to swap
Swap ( str [ l ] , str [ r ] )
Driver code
Function to encrypt the string
evenPos is for storing encrypting char at evenPosition oddPos is for storing encrypting char at oddPosition
Get the number of times the character is to be repeated
if i is odd , print ' ! ' else print '@
Driver code
Encrypt the String
Function to check for redundant braces
count of no of signs
Driver Code
Function to return balancedBrackets String
Initializing dep to 0
Stores maximum negative depth
if dep is less than minDep
if minDep is less than 0 then there is need to add ' ( ' at the front
Reinitializing to check the updated String
if dep is not 0 then there is need to add ' ) ' at the back
Driver code
Function to return the count of minimum operations required
Increment count when consecutive characters are different
Answer is rounding off the ( count / 2 ) to lower
Driver code
Function to return the required digit
To store the position of the first numeric digit in the string
To store the length of the string without the numeric digits in the end
pw stores the current power of 10 and num is to store the number which is appended in the end
If current character is a numeric digit
Get the current digit
Build the number
If number exceeds the length
Next power of 10
Append 0 in the end
Required number that must be added
If number is not a single digit
Driver code
Function that returns true if str1 can be converted to str2 with the given operations
Traverse from left to right
If the two characters do not match
If possible to combine
If not possible to combine
If the two characters match
If possible to convert one string to another
Driver code
function to reverse the words of the given string without using strtok ( ) .
create an empty string stack
create an empty temporary string
traversing the entire string
push the temporary variable into the stack
assigning temporary variable as empty
for the last word of the string
Get the words in reverse order
Driver code
Function to print the required matrix
Impossible to generate the required matrix
Store all the vowels
Print the matrix
Print vowels for every index
Shift the vowels by one
Driver code
Function that returns true if the string is made up of two alternating characters
Check if ith character matches with the character at index ( i + 2 )
If string consists of a single character repeating itself
Driver code
Function to return the count of operations required
To store the count of operations
No operation required
One operation is required when any two characters are equal
Two operations are required when none of the characters are equal
Return the minimum count of operations required
Driver code
Function that returns true if s can be made lexicographically smaller by reversing a sub - string in s
Traverse in the string
Check if s [ i + 1 ] < s [ i ]
Not possible
Driver code
Function to return the count of required sub - strings
Number of sub - strings from position of current x to the end of str
To store the number of characters before x
Driver code
Function to return the count of possible sub - strings of length n
Driver code
Function to return the number of sub - strings that do not contain the given character c
Length of the string
Traverse in the string
If current character is different from the given character
Update the number of sub - strings
Reset count to 0
For the characters appearing after the last occurrence of c
Driver code
Python3 implementation of the approach
Function to return the minimized sum
To store the occurrences of each character of the string
Update the occurrence
Calculate the sum
Get the character which is contributing the maximum value to the sum
Count of occurrence of the character multiplied by its ASCII value
Return the minimized sum
Driver code
Function that returns true if s is palindrome
Function to return the required index
Copy the ith character in S
Copy all the character of string s2 in Temp
Check whether the string is palindrome
Driver code
Function that returns true if the sub - string starting from index i and ending at index j is a palindrome
Function to get the required index
Start comparing the two strings from both ends .
Break from the loop at first mismatch
If it is possible to concatenate the strings to form palindrome , return index
If remaining part for s2 is palindrome
If remaining part for s1 is palindrome
If not possible , return - 1
Driver Code
Function to return the number of strings that can be an acronym for other strings
Frequency array to store the frequency of the first character of every string in the array
To store the count of required strings
Current word
Frequency array to store the frequency of each of the character of the current string
Check if the frequency of every character in the current string is <= its value in freq [ ]
First character of the current string
Driver Code
Function that returns true if every lowercase character appears atmost once
Every character frequency must be not greater than one
Function that returns the modified good string if possible
If the length of the string is less than n
Sub - strings of length 26
To store frequency of each character
Get the frequency of each character in the current sub - string
Check if we can get sub - string containing the 26 characters all
Find which character is missing
Fill with missing characters
Find the next missing character
Return the modified good string
Driver code
Function to check if a character is a vowel
Function to swap two consecutively repeated vowels or consonants
Traverse through the length of the string
Check if the two consecutive characters are vowels or consonants
swap the two characters
Driver code
Function to find the largest palindromic subsequence
Find the largest character
Append all occurrences of largest character to the resultant string
Driver Code
Function to print the required string
count number of 1 s
To check if the all the 1 s have been used or not
Print all the 1 s if any 2 is encountered
If Str1 [ i ] = 0 or Str1 [ i ] = 2
If 1 s are not printed yet
Driver code
Python3 implementation of the approach
Function to return the required count
To store the count of distinct characters in str
Traverse str character by character
If current character is appearing for the first time in str
Increment the distinct character count
Update the appearance of the current character
Since P ( n , r ) = n ! / ( n - r ) !
Return the answer
Driver code
Returns the product of digits of number x
This function returns the number having maximum product of the digits
Converting both integers to strings
Let the current answer be r
Stores the current number having current digit one less than current digit in b
Replace all following digits with 9 to maximise the product
Convert string to number
Check if it lies in range and its product is greater than max product
Driver Code
Python3 program to find the longest subsequence of vowels in the specified order
Mapping values for vowels
Function to check if given subsequence contains all the vowels or not
not contain vowel
Function to find the longest subsequence of vowels in the given string in specified order
If we have reached the end of the string , return the subsequence if it is valid , else return an empty list
If there is no vowel in the subsequence yet , add vowel at current index if it is ' a ' , else move on to the next character in the string
If the last vowel in the subsequence until now is same as the vowel at current index , add it to the subsequence
If the vowel at the current index comes right after the last vowel in the subsequence , we have two options : either to add the vowel in the subsequence , or move on to next character . We choose the one which gives the longest subsequence .
Driver Code
Function to print the expansion of the string
Take sub - string from i to n - 1
Print the sub - string
Driver code
Function to print a binary string which has ' a ' number of 0 ' s , ▁ ' b ' ▁ number ▁ of ▁ 1' s and there are at least ' x ' indices such that s [ i ] != s [ i + 1 ]
Divide index value by 2 and store it into d
If index value x is even and x / 2 is not equal to a
Loop for d for each d print 10
subtract d from a and b
Loop for b to print remaining 1 's
Loop for a to print remaining 0 's
Driver Code
Function to match whether there are always n consecutive b ' s ▁ followed ▁ by ▁ n ▁ consecutive ▁ a ' s throughout the string
Traverse through the string
Count a 's in current segment
Count b 's in current segment
If both counts are not same .
Driver code
Function to calculate the length of the longest consecutive 1 's
To count all 1 's in the string
To store cumulative 1 's
Counting cumulative 1 's from left
If 0 then start new cumulative one from that i
perform step 3 of the approach
step 3
Driver Code
string
function to return maximum occurred substring of a string
size of string
to store maximum frequency
To store string which has maximum frequency
return substring which has maximum freq
Driver code
Function call
Function to Find the lexicographically smallest substring in a given string with maximum frequency and contains a ' s ▁ and ▁ b ' s only .
To store frequency of digits
size of string
Take lexicographically larger digit in b
get frequency of each character
If no such string exits
Maximum frequency
Driver program
Function to find the minimum steps to convert string a to string b
List to mark the positions needed to be negated
If two character are not same then they need to be negated
To count the blocks of 1
To count the number of 1 ' s ▁ in ▁ each ▁ ▁ block ▁ of ▁ 1' s
For the last block of 1 's
Driver code
function to find minimum required permutation
Driver code
Function to find number of ways
initialise result that store No . of swaps required
Traverse both strings and check the bits as explained
calculate result
Driver code
Function that returns the winner of the game
Initialize the freq array to 0
Iterate and count the frequencies of each character in the string
Count the odd occurring character
If odd occurrence
Check condition for Player - 1 winning the game
Driver code
Function call that returns the winner
Python implementation of above approach
Function to find the maximum product
Driver code
Function to check if a character is vowel or not
Function to replace consonant with nearest vowels
if , string element is vowel , jump to next element
check if consonant lies between two vowels , if it lies , than replace it with nearest vowel
here the absolute difference of ascii value is considered
Driver code
Python3 program to Find time taken for signal to reach all positions in a string
Returns time needed for signal to traverse through complete string .
for the calculation of last index
for strings like oxoooo , xoxxoooo
if coun is greater than max_length
if ' x ' is present at the right side of max_length
if ' x ' is present at left side of max_length
We use ceiling function to handle odd number ' o ' s
Driver code
Function to return the lexicographically largest string
hash array
make 0 - based indexing
iterate and count frequencies of character
ans string
iterate in frequency array
add til all characters are added
Driver Code
Python implementation of the approach
Storing the count of 1 's in the string
Query of l and r
Applying range update technique .
Taking prefix sum to get the range update values
Final array which will store the arranged string
if after maximizing the ranges any 1 is left then we maximize the string lexicographically .
Driver Code
Function that checks whether the vowel characters in a string are in alphabetical order or not
ASCII Value 64 is less than all the alphabets so using it as a default value
check if the vowels in the string are sorted or not
if the vowel is smaller than the previous vowel
store the vowel
Driver code
check whether the vowel characters in a string are in alphabetical order or not
Python program for the above approach
Split by space and converting String to list and
joining the list and storing in string
returning thee string
Driver code
Function to return the newString
length of string
hashing array
iterate and count
resulting string
form the resulting string
number of times character appears
append to resulting string
Driver Code
Function to Return Remainder
len is variable to store the length of Number string .
loop that find Remainder
Return the remainder
Driver code
Get the large number as string
Get the divisor R
Find and print the remainder
Python 3 implementation of above approach
Taking the frequency suffix sum of the number of 2 's present  after every index
Storing the count of subsequence
Subsequence of length 2
Subsequence of length 4 of type 1 1 2 2
Subsequence of length 4 of type 1 2 1 2
Driver Code
Function to count the number of carry operations
Initialize the value of carry to 0
Counts the number of carry operations
Initialize len_a and len_b with the sizes of strings
Assigning the ascii value of the character
Add both numbers / digits
If sum > 0 , increment count and set carry to 1
Else , set carry to 0
Driver code
Python3 program to check if given number is in given base or not .
Allowed bases are till 16 ( Hexadecimal )
If base is below or equal to 10 , then all digits should be from 0 to 9.
If base is below or equal to 16 , then all digits should be from 0 to 9 or from 'A
Driver code
Python program to find indices of all occurrences of one String in other .
Driver code
Function for alternatively merging two strings
To store the final string
For every index in the strings
First choose the ith character of the first string if it exists
Then choose the ith character of the second string if it exists
Driver Code
function to find the maximum occurring character in an input string which is lexicographically first
freq [ ] used as hash table
to store maximum frequency
length of str
get frequency of each character of 'str
for each character , where character is obtained by ( i + ' a ' ) check whether it is the maximum character so far and accodingly update 'result
maximum occurring character
Driver Code
Python3 program to check if a sentence can be formed from a given set of words . include < bits / stdc ++ . h >
here isEnd is an integer that will store count of words ending at that node
utility function to create a new node
Initialize new node with null
Function to insert new words in trie
Iterate for the length of a word
If the next key does not contains the character
isEnd is increment so not only the word but its count is also stored
Search function to find a word of a sentence
Iterate for the complete length of the word
If the character is not present then word is also not present
If present move to next character in Trie
If word found then decrement count of the word
if the word is found decrement isEnd showing one occurrence of this word is already taken so
Function to check if string can be formed from the sentence
Iterate for all words in the string
if a word is not found in a string then the sentence cannot be made from this dictionary of words
If possible
Function to insert all the words of dict in the Trie
Driver Code
Dictionary of words
Calling Function to insert words of dictionary to tree
String to be checked
Function call to check possibility
Python3 program to check if one number is a power of other
Multiply the numbers . It multiplies each digit of second string to each digit of first and stores the result .
If the digit exceeds 9 , add the cumulative carry to previous digit .
If all zeroes , return "0" .
Remove starting zeroes .
Removes Extra zeroes from front of a string .
Make sure there are no leading zeroes in the string .
Making sure that s1 is smaller . If it is greater , we recur we reversed parameters .
Driver Code
Function1 to match closing bracket
Function1 to match opening bracket
Function to check balanced parentheses
helper variables
Handling case of opening parentheses
Handling case of closing parentheses
If corresponding matching opening parentheses doesn 't lie in given  interval return 0
else continue
If corresponding closing parentheses doesn 't lie in given interval, return 0
if found , now check for each opening and closing parentheses in this interval
Driver Code
Function to check if it is possible to sort the array
Calculating max_element at each iteration .
if we can not swap the i - th element .
if it is impossible to swap the max_element then we can not sort the array .
Otherwise , we can sort the array .
Driver Code
Function that checks if sum is prime or not
corner cases
This is checked so that we can skip middle five numbers in below loop
Driver code
Returns the number of we can split the string
Finding the frequency of each character .
making frequency of first character of string equal to 1.
Finding the product of frequency of occurrence of each character .
Driver Code
function to print output
to store unique characters of the string
to check uniqueness
if mp [ s [ i ] ] = 0 then it is first time
sort the unique characters
simply add n - k smallest characters
searching the first character left of index k and not equal to greatest character of the string
finding the just next greater character than s [ i ]
suffix with smallest character
if we reach here then all indices to the left of k had the greatest character
Driver code
Function call
Python3 program to find number of palindromic permutations of a given string
Returns factorial of n
Returns count of palindromic permutations of str .
Count frequencies of all characters
Since half of the characters decide count of palindromic permutations , we take ( n / 2 ) !
To make sure that there is at most one odd occurring char
Traverse through all counts
To make sure that the string can permute to form a palindrome
If there are more than one odd occurring chars
Divide all permutations with repeated characters
Driver code
Python3 program to rearrange a string to make palindrome .
Store counts of characters
Find the number of odd elements . Takes O ( n )
odd_cnt = 1 only if the length of str is odd
Generate first halh of palindrome
Build a string of floor ( count / 2 ) occurrences of current character
Attach the built string to end of and begin of second half
Insert odd character if there is any
Driver code
Returns true if ch is vowel
Function to check consonant
in case of empty string , we can 't fullfill the  required condition, hence we return ans as 0.
co [ i ] is going to store counts of consonants from str [ len - 1 ] to str [ i ] . vo [ i ] is going to store counts of vowels from str [ len - 1 ] to str [ i ] .
Counting consonants and vowels from end of string .
Now we traverse string from beginning
If vowel , then count of substrings starting with str [ i ] is equal to count of consonants after it .
If consonant , then count of substrings starting with str [ i ] is equal to count of vowels after it .
Driver Code
Function to check if it is possible to convert the string into palindrome
Counting number of characters that should be changed .
If count of changes is less than or equal to 1
Driver Code
Function return count of even decimal value substring
Store the count of even decimal value substring
substring started with '0
increment result by ( n - i ) because all substring which are generate by this character produce even decimal value .
Driver code
python program to count substrings with odd decimal value
function to count number of substrings with odd decimal representation
auxiliary array to store count of 1 's before ith index
store count of 1 's before  i-th index
variable to store answer
traverse the string reversely to calculate number of odd substrings before i - th index
Driver method
Returns an integer vector consisting of starting indices of substrings present inside the string S
Number of a characters of a word in list L .
Number of words present inside list L .
Total characters present in list L .
Resultant vector which stores indices .
If the total number of characters in list L is more than length of string S itself .
Map stores the words present in list L against it 's occurrences inside list L
Traverse the substring
Extract the word
If word not found or if frequency of current word is more than required simply break .
Else decrement the count of word from hash_map
Store the starting index of that substring when all the words in the list are in substring
Driver Code
Python program to check whether second string can be formed from first string
Create a count array and count frequencies characters in s1
Now traverse through str2 to check if every character has enough counts
Driver Code
function to find final position of robot after the complete movement
traverse the instruction string 'move
for each movement increment its respective counter
required final position of robot
Driver code
Function to return the length of longest balanced parentheses prefix .
Traversing the string .
If open bracket add 1 to sum .
If closed bracket subtract 1 from sum
if first bracket is closing bracket then this condition would help
If sum is 0 , store the index value .
Driver Code
Function to return cost
length of string
Iterate from both sides of string . If not equal , a cost will be there
Driver code
Python program to encode a word to a Pig Latin .
the index of the first vowel is stored .
Pig Latin is possible only if vowels is present
Take all characters after index ( including index ) . Append all characters which are before index . Finally append " ay "
Driver code
Python 3 program to check if a query string is present is given set .
Count occurrences of all characters in s .
Check if number of occurrences of every character in q is less than or equal to that in s .
driver program
Returns count of minimum character reduce operations to make palindrome .
Compare every character of first half with the corresponding character of second half and add difference to result .
Driver code
function to calculate the minimal changes
maximum digits that can be changed
nested loops to generate all 6 digit numbers
counter to count the number of change required
if first digit is equal
if 2 nd digit is equal
if 3 rd digit is equal
if 4 th digit is equal
if 5 th digit is equal
if 6 th digit is equal
checks if less then the previous calculate changes
returns the answer
driver program to test the above function
number stored in string
prints the minimum operations
Function to check if str can be made using given words
If str itself is present
Match first character of str with second of word and vice versa
If both characters found .
Driver Code
Function to get the binary representation of the number N
loop for each bit
generate numbers in the range of ( 2 ^ N ) - 1 to 2 ^ ( N - 1 ) inclusive
longest prefix check
if counts of 1 is greater than counts of zero
do sub - prefixes check
Driver code
Function call
Python3 program to find winner in an election .
We have four Candidates with name as ' John ' , ' Johnny ' , ' jamie ' , ' jackie ' . The votes in String array are as per the votes casted . Print the name of candidates received Max vote .
Insert all votes in a hashmap
Traverse through map to find the candidate with maximum votes .
If there is a tie , pick lexicographically smaller .
Driver code
Returns true if given card number is valid
We add two digits to handle cases that make two digits after doubling
Driver code
Python3 program to find if its possible to distribute balls without repitiion
function to find if its possible to distribute balls or not
count array to count how many times each color has occurred
increasing count of each color every time it appears
to check if any color appears more than K times if it does we will print NO
Driver code
Returns true if x is vowel .
Function to check whether a character is vowel or not
Outer loop picks starting character and inner loop picks ending character .
If current character is not vowel , then no more result substr1ings possible starting from str1 [ i ] .
If vowel , then we insert it in hash
If all vowels are present in current substr1ing
Driver code
Python 3 program to find if given string is present with one mismatch .
If the array is empty
If sizes are same
If first mismatch
Second mismatch
Driver code
To check sentence is palindrome or not
Lowercase string
Compares character until they are equal
If there is another symbol in left of sentence
If there is another symbol in right of sentence
If characters are equal
If characters are not equal then sentence is not palindrome
Returns true if sentence is palindrome
Driver program to test sentencePalindrome ( )
Return number of ways in which XOR become ZERO by remove 1 element
Counting number of 0 and 1
If count of ones is even then return count of zero else count of one
Driver Code
Python3 program to check if it is possible to split string or not
Function to check if we can split string or not
Counter array initialized with 0
Length of the string
Traverse till the middle element is reached
First half
Second half
Checking if values are different , set flag to 1
String to be checked
function to check isogram
loop to store count of chars and check if it is greater than 1
if count > 1 , return false
Driver code
checking str as isogram
checking str2 as isogram
Function returns 1 when string is valid else returns 0
Find first occurrence of 1 in s [ ]
Find last occurrence of 1 in s [ ]
Check if there is any 0 in range
Driver code
* Function to print all ( n * ( n + 1 ) ) / 2 * substrings of a given string s of length n .
Fix start index in outer loop . Reveal new character in inner loop till end of string . Prtill - now - formed string .
Driver program to test above function
Python3 program to implement the above approach
Initialize two pointers as two corners
Move both pointers toward each other
If character at start or end is space , ignore it
If both are not spaces , do swap
Driver code
Function to amend the sentence
Traverse the string
Convert to lowercase if its an uppercase character
Print space before it if its an uppercase character
Print the character
if lowercase character then just print
Driver Code
Function which return string by concatenating it .
Copying given string to temporary string .
Concatenating strings
Driver code
Python program to find number of distinct permutations of a string .
Utility function to find factorial of n .
Returns count of distinct permutations of str .
finding frequency of all the lower case alphabet and storing them in array of integer
finding factorial of number of appearances and multiplying them since they are repeating alphabets
finding factorial of size of string and dividing it by factorial found after multiplying
Driver code
Python3 program to illustrate String with unique characters without using any data structure
Assuming string can have characters a - z this has 32 bits set to 0
If that bit is already set in checker , return False
Otherwise update and continue by setting that bit in the checker
No duplicates encountered , return True
Driver Code
' ch ' is vowel or not
create alternate vowel and consonant string str1 [ 0. . . l1 - 1 ] and str2 [ start ... l2 - 1 ]
first adding character of vowel / consonant then adding character of consonant / vowel
function to find the required alternate vowel and consonant string
count vowels and update vowel string
count consonants and update consonant string
no such string can be formed
remove first character of vowel string then create alternate string with cstr [ 0. . . nc - 1 ] and vstr [ 1. . . nv - 1 ]
remove first character of consonant string then create alternate string with vstr [ 0. . . nv - 1 ] and cstr [ 1. . . nc - 1 ]
if both vowel and consonant strings are of equal length start creating string with consonant
start creating string with vowel
Driver Code
Python3 code to check if k - th bit of a given number is set or not
Driver code
Reversing a string using reverse ( )
Reverse str [ beign . . end ]
A recursive function that check a str [ s . . e ] is palindrome or not .
If there is only one character
If first and last characters do not match
If there are more than two characters , check if middle substring is also palindrome or not .
An empty string is considered as palindrome
Driver Code
assuming lower case only
Calculating frequency of each character in the string .
Computing result using counts
Driver code
Returns the maximum repeating character in a given string
Traverse string except last character
If current character matches with next
If doesn 't match, update result  (if required) and reset count
Driver code
Python3 program to answer subsequence queries for a given string .
Precompute the position of each character from each position of String S
Computing position of each character from each position of String S
Print " Yes " if T is subsequence of S , else " No "
Traversing the string T
If next position is greater than length of S set flag to false .
Setting position of next character
Driven code
Print whether index i and j have same element or not .
Finding relative position of index i , j .
Checking is element are same at index i , j .
Driver code
Function to count pairs
Increment count if characters are at same distance
Driver code
Function to calculate longest string str1 -- > first string str2 -- > second string count1 [ ] -- > hash array to calculate frequency of characters in str1 count [ 2 ] -- > hash array to calculate frequency of characters in str2 result -- > resultant longest string whose permutations are sub - sequence of given two strings
calculate frequency of characters
Now traverse hash array
append character ( ' a ' + i ) in resultant string ' result ' by min ( count1 [ i ] , count2i ] ) times
Driver Code
Function to check if characters in the input string follows the same order as determined by characters present in the given pattern
len stores length of the given pattern
if length of pattern is more than length of input string , return false ;
x , y are two adjacent characters in pattern
find index of last occurrence of character x in the input string
find index of first occurrence of character y in the input string
return false if x or y are not present in the input string OR last occurrence of x is after the first occurrence of y in the input string
return true if string matches the pattern
Driver Code
Function to calculate sum of all numbers present in a str1ing containing alphanumeric characters
A temporary str1ing
holds sum of all numbers present in the str1ing
read each character in input string
if current character is a digit
if current character is an alphabet
increment Sum by number found earlier ( if any )
reset temporary str1ing to empty
atoi ( temp . c_str1 ( ) ) takes care of trailing numbers
input alphanumeric str1ing
Function call
Function to count number of substrings with exactly k unique characters
Initialize result
To store count of characters from ' a ' to ' z '
Consider all substrings beginning with str [ i ]
Initializing array with 0
Consider all substrings between str [ i . . j ]
If this is a new character for this substring , increment dist_count .
Increment count of current character
If distinct character count becomes k , then increment result .
Driver Code
Converts a string to uppercase
Driver code
A Function to find the string having the minimum length and returns that length
A Function that returns the longest common prefix from the array of strings
Our resultant string char current ; The current character
Current character ( must be same in all strings to be a part of result )
Append to result
Driver program to test above function
Prints concatenation of all rows of str 's Zig-Zag fashion
Corner Case ( Only one row )
Find length of string
Create an array of strings for all n rows
Initialize index for array of strings arr [ ]
Traverse through given string
append current character to current row
If last row is reached , change direction to 'up
If 1 st row is reached , change direction to 'down
If direction is down , increment , else decrement
Print concatenation of all rows
Driver Code
Python program to check if two strings are isomorphic
This function returns true if str1 and str2 are isomorphic
Length of both strings must be same for one to one corresponance
To mark visited characters in str2
To store mapping of every character from str1 to that of str2 . Initialize all entries of map as - 1
Process all characters one by one
if current character of str1 is seen first time in it .
if current character of st2 is already seen , one to one mapping not possible
Mark current character of str2 as visited
Store mapping of current characters
If this is not first appearance of current character in str1 , then check if previous appearance mapped to same character of str2
Driver program
Returns true if a string str [ st . . end ] is palindrome
Returns count of insertions on left side to make str [ ] a palindrome
Find the largest prefix of given string that is palindrome .
Characters after the palindromic prefix must be added at the beginning also to make the complete string palindrome
Driver Code
Python 3 program to remove repeated digits
Store first digits as previous digit
Initialize power
Iterate through all digits of n , note that the digits are processed from least significant digit to most significant digit .
Store current digit
Add the current digit to the beginning of result
Update previous result and power
Remove last digit from n
Driver Code
Utility function to convert string to list
Utility function to convert list to string
length of string
Check if current and next character forms ac
If current character is b
if current char is ' c ▁ & & ▁ last ▁ char ▁ in ▁ output ▁ ▁ is ▁ ' a ' so delete both
Else copy curr char to output string
Driver program
A simple Python3 program for implementation of atoi
If whitespaces then ignore .
Sign of number
Checking for valid input
Handling overflow test case
Driver Code
Functional Code
Python program to check if two strings are anagrams of each other
function to check if two strings are anagrams of each other
Create a count array and initialize all values as 0
For each character in input strings , increment count in the corresponding count array
If both strings are of different length . Removing this condition will make the program fail for strings like " aaca " and " aca "
See if there is any non - zero value in count array
Driver code
Function call
This functionr eturns true if all characters in strr [ i . . j ] are distinct , otherwise returns false
Note : Default values in visited are false
Returns length of the longest substring with all distinct characters .
Result
Driver code
Function to make the string unique
loop to traverse the string and check for repeating chars using IndexOf ( ) method in Java
character at i 'th index of s
if c is present in str , it returns the index of c , else it returns - 1 print ( st . index ( c ) )
adding c to str if - 1 is returned
Driver code
Input string with repeating chars
Python3 program for the above approach
Function to check is a given number is a perfect number or not
Stores the sum of its divisors
Add all divisors of x to sum_div
If the sum of divisors is equal to the given number , return true
Otherwise , return false
Function to find sum of all subsets from an array whose sum is a perfect number
Prthe current subset sum if it is a perfect number
Check if sum is a perfect number or not
Calculate sum of the subset including arr [ l ]
Calculate sum of the subset excluding arr [ l ]
Driver Code
Utility function to find all possible ways to split array into K subsets
If count of elements in K subsets are greater than or equal to N
If count of subsets formed is equal to K
Print K subsets by splitting array into K subsets
Print current subset
If current element is the last element of the subset
Otherwise
If any subset is occupied , then push the element in that first
Recursively do the same for remaining elements
Backtrack
Otherwise , push it in an empty subset and increase the subset count by 1
Break to avoid the case of going in other empty subsets , if available , and forming the same combination
Function to to find all possible ways to split array into K subsets
Stores K subset by splitting array into K subsets
Size of each subset must be less than the number of elements
Driver Code
Given array
Given K
Size of the array
Prints all possible splits into subsets
Python3 implementation to Count the number of Prime Cliques in an undirected graph
Stores the vertices
Graph
Degree of the vertices
To store the count of prime cliques
Function to create Sieve to check primes
false here indicates that it is not prime
Condition if prime [ p ] is not changed , then it is a prime
Update all multiples of p , set them to non - prime
Function to check if the given set of vertices in store array is a clique or not
Run a loop for all set of edges
If any edge is missing
Function to find the count of all the cliques having prime size
Check if any vertices from i + 1 can be inserted
Add the vertex to store
If the graph is not a clique of size k then it cannot be a clique by adding another edge
Increase the count of prime cliques if the size of current clique is prime
Check if another edge can be added
Driver code
define dimension of matrix
struct node of doubly linked list with four pointer next , prev , up , down
function to create a new node
function to construct the doubly linked list
Create Node with value contain in matrix at index ( i , j )
Assign address of curr into the prev pointer of temp
Assign address of curr into the up pointer of temp
Recursive call for next pointer
Recursive call for down pointer
Return newly constructed node whose all four node connected at it 's appropriate position
Function to construct the doubly linked list
function call for construct the doubly linked list
function for displaying doubly linked list data
pointer to move right
pointer to move down
loop till node -> down is not NULL
loop till node -> right is not NULL
Driver code
initialise matrix
Python3 program to find the count exponential paths in Binary Tree
Structure of a Tree node
Function to create a new node
Function to find x
Take log10 of n
Log ( n ) with base i
Raising i to the power p
Function to check whether the given node equals to x ^ y for some y > 0
Take logx ( n ) with base x
Utility function to count the exponent path in a given Binary tree
Base Condition , when node pointer becomes null or node value is not a number of pow ( x , y )
Increment count when encounter leaf node
Left recursive call save the value of count
Right recursive call and return value of count
Function to count exponential paths
Create Tree
Retrieve the value of x
Function call
Python 3 program to find the number of pairs such that the path between every pair contains two given vertices
Function to perform DFS on the given graph by fixing the a vertex
To mark a particular vertex as visited
Variable to store the count of the vertices which can be reached from a
Performing the DFS by iterating over the visited array
If the vertex is not visited and removing the vertex b
Function to return the number of pairs such that path between any two pairs consists of the given two vertices A and B
Initializing the visited array and assigning it with 0 's
Initially , the count of vertices is 0
Performing DFS by removing the vertex B
Count the vertices which cannot be reached after removing the vertex B
Again reinitializing the visited array
Setting the count of vertices to 0 to perform the DFS again
Performing the DFS by removing the vertex A
Count the vertices which cannot be reached after removing the vertex A
Multiplying both the vertices set
Driver code
Loop to store the graph
Python3 implementation of the approach
Function to find the minimum weight Hamiltonian Cycle
If last node is reached and it has a link to the starting node i . e the source then keep the minimum value out of the total cost of traversal and " ans " Finally return to check for more possible values
BACKTRACKING STEP Loop to traverse the adjacency list of currPos node and increasing the count by 1 and cost by graph [ currPos ] [ i ] value
Mark as visited
Mark ith node as unvisited
n is the number of nodes i . e . V
Boolean array to check if a node has been visited or not
Mark 0 th node as visited
Find the minimum weight Hamiltonian Cycle
ans is the minimum weight Hamiltonian Cycle
Function to print the output
Function to generate all binary strings
First assign "0" at ith position and try for all other permutations for remaining positions
And then assign "1" at ith position and try for all other permutations for remaining positions
Driver Code
Print all binary strings
Find all combinations that satisfies given constraints
if all elements are filled , print the solution
Try all possible combinations for element elem
if position i and ( i + elem + 1 ) are not occupied in the vector
place elem at position i and ( i + elem + 1 )
recurse for next element
backtrack ( remove elem from position i and ( i + elem + 1 ) )
create a vector of double the size of given number with
all its elements initialized by 1
start from element 1
given number
Python program for above approach
Program to solve N - Queens Problem
All_rows_filled is a bit mask having all N bits set
If rowmask will have all bits set , means queen has been placed successfully in all rows and board is displayed
We extract a bit mask ( safe ) by rowmask , ldmask and rdmask . all set bits of ' safe ' indicates the safe column index for queen placement of this iteration for row index ( row ) .
Extracts the right - most set bit ( safe column index ) where queen can be placed for this row
these bit masks will keep updated in each iteration for next row
Reset right - most set bit to 0 so , next iteration will continue by placing the queen at another safe column index of this row
Backtracking , replace ' Q ' by ' 
Program to print board
Driver Code
n = 4 board size
Function Call
Function to find all subsets of given set . Any repeated subset is considered only once in the output
Run counter i from 000. . 0 to 111. . 1
consider each element in the set
Check if jth bit in the i is set . If the bit is set , we consider jth element from set
if subset is encountered for the first time If we use set < string > , we can directly insert
consider every subset
split the subset and print its elements
Driver Code
A backtracking based Python3 Program to fill two instances of all numbers from 1 to n in a specific way
If current number becomes 0 , then all numbers are filled
Try placing two instances of ' curr ' at all possible locations till solution is found
Two ' curr ' should be placed at ' curr + 1' distance
Place two instances of 'curr
Recur to check if the above placement leads to a solution
If solution is not possible , then backtrack
Create an array of size 2 n and initialize all elements in it as 0
If solution is possible , then print it .
Driver Code
Python3 program for the above approach
A node class which stores the color and the edges connected to the node
Create a visited array of n nodes , initialized to zero
maxColors used till now are 1 as all nodes are painted color 1
Do a full BFS traversal from all unvisited starting points
If the starting point is unvisited , mark it visited and push it in queue
BFS Travel starts here
Checking all adjacent nodes to " top " edge in our queue
IMPORTANT : If the color of the adjacent node is same , increase it by 1
If number of colors used shoots m , return 0
If the adjacent node is not visited , mark it visited and push it in queue
Driver code
Number of colors
Create a vector of n + 1 nodes of type " node " The zeroth position is just dummy ( 1 to n to be used )
Add edges to each node as per given input
Connect the undirected graph
Display final answer
Python3 program to find the Nth Fibonacci number using Fast Doubling Method
Function calculate the N - th fibanacci number using fast doubling method
Base Condition
Here a = F ( n )
Here b = F ( n + 1 )
As F ( 2 n ) = F ( n ) [ 2F ( n + 1 ) F ( n ) ] Here c = F ( 2 n )
As F ( 2 n + 1 ) = F ( n ) ^ 2 + F ( n + 1 ) ^ 2 Here d = F ( 2 n + 1 )
Check if N is odd or even
Driver code
Function to return the frequency of x in the subarray arr [ low ... high ]
If the subarray is invalid or the element is not found
If there 's only a single element  which is equal to x
Divide the array into two parts and then find the count of occurrences of x in both the parts
Driver code
Python3 program to find median of an array
Returns the correct position of pivot element
Picks a random pivot element between l and r and partitions arr [ l . . r ] around the randomly picked element using partition ( )
Utility function to find median
if l < r
Find the partition index
If partition index = k , then we found the median of odd number element in arr [ ]
If index = k - 1 , then we get a & b as middle element of arr [ ]
If partitionIndex >= k then find the index in first half of the arr [ ]
If partitionIndex <= k then find the index in second half of the arr [ ]
Function to find Median
If n is odd
If n is even
Print the Median of arr [ ]
Driver code
Utility function to return the first digit of a number .
Remove last digit from number till only one digit is left
return the first digit
Utility function that returns the count of numbers written down when starting from n
Function to find the largest number N which can be reduced to 0 in K steps
Get the sequence length of the mid point
Until k sequence length is reached
Update mid point
Get count of the new mid point
Update right to mid
Update left to mid
Increment mid point by one while count is equal to k to get the maximum value of mid point
Driver Code
Function to check if ( X , Y ) is reachable from ( 0 , 0 ) using the jumps of given type
Case where source & destination are the same
Check for even N ( X , Y ) is reachable or not
If N is odd and parity of X and Y is different return , no valid sequence of jumps exist
Driver Code
Function to find three vertices that subtends an angle closest to A
Stores the closest angle to A
Stores the count of edge which subtend an angle of A
Iterate in the range [ 1 , N - 2 ]
Stores the angle subtended
If absolute ( angle - A ) is less than absolute ( mi - A )
Update angle to mi , and also update i to ans
Pr the vertices
Driver Code
Python3 program for the above approach
Function to find the area of the triangle that inscribed in square
Stores the length of the first side of triangle
Stores the length of the second side of triangle
Stores the length of the third side of triangle
Stores the area of the triangle
Return the resultant area
Driver Code
Python3 program for the approach
Function to find equation of a line whose distance from origin and angle made by the perpendicular from origin with x - axis is given
Convert angle from degree to radian
Handle the special case
Calculate the sin and cos of angle
Print the equation of the line
Given Input
Function Call
Function to count the number of coordinates from a given set that satisfies the given conditions
Stores the count of central points
Find all possible pairs
Initialize variables c1 , c2 , c3 , c4 to define the status of conditions
Stores value of each point
Check the conditions for each point by generating all possible pairs
If arr [ j ] [ 0 ] > x and arr [ j ] [ 1 ] == y
If arr [ j ] [ 0 ] < x and arr [ j ] [ 1 ] = = y
If arr [ j ] [ 1 ] > y and arr [ j ] [ 0 ] == x
If arr [ j ] [ 1 ] < y and arr [ j ] [ 0 ] = = x
If all conditions satisfy then point is central point
Increment the count by 1
Return the count
Driver Code
Python3 program for the above approach
Function to find the displacement from the origin and direction after performing the given set of moves
Stores the distances travelled in the directions North , South , East , and West respectively
Store the initial position of robot
Traverse the array B [ ]
If the current direction is North
If the current direction is South
If the current direction is East
If the current direction is West
Stores the total vertical displacement
Stores the total horizontal displacement
Find the displacement
Print the displacement and direction after N moves
Driver Code
Function to calculate the length of the latus rectum of an ellipse
Length of major axis
Length of minor axis
Length of the latus rectum
Driver Code
Given lengths of semi - major and semi - minor axis
Function call to calculate length of the latus rectum of a ellipse
Python 3 program for the above approach
Function to calculate slant height of a cone
Store the slant height of cone
Print the result
Function to find the slant height of a pyramid
Store the slant height of pyramid
Print the result
Driver Code
Dimensions of Cone
Function Call for slant height of Cone
Dimensions of Pyramid
Function to calculate slant height of a pyramid
Python 3 program for the above approach
Function to calculate distance between two points
Calculating distance
Function to calculate length of the latus rectum of a parabola
Stores the co - ordinates of the vertex of the parabola
Stores the co - ordinates of the focus of parabola
Print the distance between focus and vertex
Driver Code
Given a , b & c
Function call
Python 3 program for the above approach
Function to convert degree to radian
Function to convert the polar coordinate to cartesian
Convert degerees to radian
Applying the formula : x = rcos ( theata ) , y = rsin ( theta )
Print cartesian coordinates
Driver Code
Given polar coordinates
Function to convert polar coordinates to equivalent cartesian coordinates
Python3 program for the above approach
Function to calculate Euclidean distance between the points p1 and p2
Stores x coordinates of both points
Stores y coordinates of both points
Return the Euclid distance using distance formula
Function to find orthocenter of the right angled triangle
Find the length of the three sides
Orthocenter will be the vertex opposite to the largest side
Function to find the circumcenter of right angle triangle
Circumcenter will be located at center of hypotenuse
If AB is the hypotenuse
If BC is the hypotenuse
If AC is the hypotenuse
Function to find distance between orthocenter and circumcenter
Find circumcenter
Find orthocenter
Find the distance between the orthocenter and circumcenter
Print distance between orthocenter and circumcenter
Given coordinates A , B , and C
Function Call
Python3 program to implement the above approach
Function to generate coordinates lying within the rectangle
Store all possible coordinates that lie within the rectangle
Stores the number of possible coordinates that lie within the rectangle
Generate all possible coordinates
Generate all possible X - coordinates
Generate all possible Y - coordinates
If coordinates ( X , Y ) has not been generated already
Insert the coordinates ( X , Y )
Print the coordinates
Driver code
Rectangle dimensions
Function to find required number of triangles
Driver Code
Function call
Python3 program for the above approach
Function to print the number of digits
Calculate log using base change property and then take its floor and then add 1
Return the output
Function that returns true if n contains all one 's in base b
Calculate the sum
Given number N
Given base B
Given digit K
Function call
Function to check if right - angled triangle can be formed by the given coordinates
Calculate the sides
Check Pythagoras Formula
Driver code
Function to create prefix sum array
Initialize the prefix array to remove garbage values
Marking the occurances of vertical lines
Creating the prefix array
Function that returns the count of total intersection
ans is the number of points of intersection of the line segments with the vertical lines
Index mapping
we don 't consider a vertical   line segment because even if  it falls on a vertical line  then it just touches it and  not intersects.
We have assumed that x1 will be left and x2 right but if not then just swap
Number of vertical lines
Number of line segments
Format : x1 , y1 , x2 , y2
First create the prefix array
Print the total number of intersections
Function to calculate number of rectangles
Total number of ways to select two lines parallel to X axis
Total number of ways to select two lines parallel to Y axis
Total number of rectangles
Driver code
Python3 program for the above approach
Function to find the angle between the two lines
Find direction ratio of line AB
Find direction ratio of line BC
Find the dotProduct of lines AB & BC
Find magnitude of line AB and BC
Find the cosine of the angle formed by line AB and BC
Find angle in radian
Print angle
Driver Code
Given coordinates Points A
Points B
Points C
Function Call
Python3 implementation to find the distance between the end points of the hour and minute hand
Function to find the angle between Hour hand and minute hand
Validate the input
Calculate the angles moved by hour and minute hands with reference to 12 : 00
Find the difference between two angles
Return the smaller angle of two possible angles
Function to calculate cos value of angle c
Converting degrees to radian
Maps the sum along the series
Holds the actual value of sin ( n )
Function to distance between the endpoints of the hour and minute hand
Time
Length of hour hand
Length of minute hand
calling Function for finding angle between hour hand and minute hand
Function for finding distance between end points of minute hand and hour hand
Function to find N - th pentadecagonal number
Formula to calculate nth pentadecagonal number
Driver code
Function to find N - th octadecagonal number
Formula to calculate nth octadecagonal number
Driver code
Function to find N - th Icositrigonal number
Formula to calculate nth Icositrigonal number
Driver code
Function to calculate percentage change in area of rectangle
Driver code
Function to find the minimum number of obstacles required
Find the minimum rangee required to put obstacles
Sorting the radius
If val is less than zero then we have find the number of obstacles required
Driver code
function to calculate the area of the rhombus
Second diagonal
area of rhombus
return the area
driver code
Function to check if two points lie on the same side or not
fx1 = 0 Variable to store a * x1 + b * y1 - c fx2 = 0 Variable to store a * x2 + b * y2 - c
If fx1 and fx2 have same sign
Driver code
Python program to find percentage increase in the volume of the cube if a side of cube is increased by a given percentage
Driver code
Function to find the number of triangles
print the number of triangles having two side common
print the number of triangles having no side common
initialize the number of sides of a polygon
Python program to find radii of the circles which are lined in a row and distance between the centers of first and last circle is given
Driver code
Python program to find side of the squares which are lined in a row and distance between the centers of first and last squares is given
Driver code
Function to find the number of triangles
print the number of triangles
Driver code initialize the number of sides of a polygon
Function to find the longest chord
Get the radius
Find the diameter
Function to return the slope of the line which is parallel to the line with the given slope
Driver code
Function to return total triangles
Only possible triangle is the given triangle
If only vertical lines are present
If only horizontal lines are present
Return total triangles
Driver code
Python3 Program to find the biggest sphere that can be inscribed within a right circular cylinder which in turn is inscribed within a frustum
Function to find the biggest sphere
the radii and height cannot be negative
radius of the sphere
volume of the sphere
Driver code
Function to check if two straight lines are orthogonal or not
Both lines have infinite slope
Only line 1 has infinite slope
Only line 2 has infinite slope
Find slopes of the lines
Check if their product is - 1
Driver code
Function to find the diagonal of a regular pentagon
Side cannot be negative
Length of the diagonal
Driver code
Python3 program to find the area of Hexagon with given diagonal
Function to calculate area
Formula to find area
Driver ode
function to find number of squares of a * a required to cover n * m rectangle
Driver code
function call
Python3 Program to find the diagonal of the octagon
Function to find the diagonal of the octagon
side cannot be negative
diagonal of the octagon
Driver code
Function for finding the perimeter
Driver code
Python3 program to illustrate the above problem
function to find the sum of all the edges of parallelepiped
to calculate the length of one edge
sum of all the edges of one side
net sum will be equal to the summation of edges of all the sides
Driver code
initialize the area of three faces which has a common vertex
Function for finding maximum pieces with n cuts .
to maximize number of pieces x is the horizontal cuts
Now ( x ) is the horizontal cuts and ( n - x ) is vertical cuts , then maximum number of pieces = ( x + 1 ) * ( n - x + 1 )
Driver code
Taking the maximum number of cuts allowed as 3
Finding and printing the max number of pieces
Function to find equation of plane .
checking if the 4 th point satisfies the above equation
Driver Code
Python program to find the Angle between two Planes in 3 D .
Function to find Angle
Driver Code
Function to mirror image
Driver Code
function call
Function to return the total possible rectangles that can be cut from the circle
Diameter = 2 * Radius
Square of diameter which is the square of the maximum length diagonal
generate all combinations of a and b in the range ( 1 , ( 2 * Radius - 1 ) ) ( Both inclusive )
Calculate the Diagonal length of this rectangle
If this rectangle 's Diagonal  Length is less than the  Diameter, it is a valid  rectangle, thus increment counter
Radius of the circle
Function for AAA similarity
Check for AAA
Function for SAS similarity
angle b / w two smallest sides is largest .
since we take angle b / w the sides .
Function for SSS similarity
Check for SSS
Driver Code
function call for AAA similarity
function call for SSS similarity
function call for SAS similarity
Check if triangles are similar or not
centered pentadecagonal function
Formula to calculate nth centered pentadecagonal number
Driver Code
centered nonadecagonal function
Formula to calculate nth centered nonadecagonal number & return it into main function .
Driver Code
Function of Hendecagonal number
Formula to calculate nth Hendecagonal number & return it into main function .
Driver Code
Function to find centered octagonal number
Formula to calculate nth centered octagonal number
Driver Code
Checks if ( i , j ) is valid , a point ( i , j ) is valid if point ( arr [ i ] , arr [ j ] ) satisfies the equation y = mx + c And i is not equal to j
check if i equals to j
Equation LHS = y , and RHS = mx + c
Returns the number of ordered pairs ( i , j ) for which point ( arr [ i ] , arr [ j ] ) satisfies the equation of the line y = mx + c
for every possible ( i , j ) check if ( a [ i ] , a [ j ] ) satisfies the equation y = mx + c
( firstIndex , secondIndex ) is same as ( i , j )
check if ( firstIndex , secondIndex ) is a valid point
Driver Code
equation of line is y = mx + c
Python3 code to check if a circle lies in the ring
Function to check if circle lies in the ring
distance between center of circle center of concentric circles ( origin ) using Pythagoras theorem
Condition to check if circle is strictly inside the ring
Both circle with radius ' r ' and ' R ' have center ( 0 , 0 )
Python Program to calculate surface area of Octahedron .
utility Function
driver code
Returns value of binomial coefficient Code taken from https : goo . gl / vhy4jp
C [ 0 ] = 1 nC0 is 1
Compute next row of pascal triangle using the previous row
function to calculate number of straight lines can be formed
Driven code
Python3 program to calculate Volume of dodecahedron
utility Function
Driver Function
function to find if tak will overflow or not
cylinder capacity
volume of water in tank
volume of n balls
total volume of water and n dipped balls
condition to check if tank is in overflow state or not
giving dimensions
calling function
function to calculate the volume of tank
function to print overflow / filled / underflow accordingly
radius of the tank
height of the tank
rate of flow of water
time given
calculate the required time
printing the result
Python3 program to find third side of triangle using law of cosines
Function to calculate cos value of angle c
Converting degrees to radian
Maps the sum along the series
Holds the actual value of sin ( n )
Function to find third side
Driver Code
function call
Python3 program to check whether circle with given co - ordinates reside within the boundary of outer circle and inner circle
function to check if given circle fit in boundary or not
Distance from the center
Checking the corners of circle
Radius of outer circle and inner circle respectively
Co - ordinates and radius of the circle to be checked
Function to find the line given two points
Driver code
Python3 program to find whether a regular polygon is possible in circle with 1 s as vertices
method returns true if polygon is possible with ' midpoints ' number of midpoints
loop for getting first vertex of polygon
loop over array values at ' midpoints ' distance
and ( & ) all those values , if even one of them is 0 , val will be 0
if val is still 1 and ( N / midpoints ) or ( number of vertices ) are more than two ( for a polygon minimum ) print result and return true
method prints sides in the polygon or print not possible in case of no possible polygon
limit for iterating over divisors
If i divides N then i and ( N / i ) will be divisors
check polygon for both divisors
Driver code
Utility method to get gcd of a and b
method returns reduced form of dy / dx as a pair
get sign of result
method returns minimum number of lines to cover all points where all lines goes through ( xO , yO )
set to store slope as a pair
loop over all points once
get x and y co - ordinate of current point
if this slope is not there in set , increase ans by 1 and insert in set
Driver code
Returns the square root of n . Note that the function
We are using n itself as initial approximation This can definitely be improved
e = 0.000001 e decides the accuracy level
Method to find maximum height of arrangement of coins
calculating portion inside the square root
Driver code to test above method
Class to represent an Integral point on XY plane .
Utility function to find GCD of two numbers GCD of a and b
Finds the no . of Integral points between two given points .
If line joining p and q is parallel to x axis , then count is difference of y values
If line joining p and q is parallel to y axis , then count is difference of x values
Driver Code
A Python3 program to check if four given points form a square or not .
Structure of a point in 2D space
A utility function to find square of distance from point ' p ' to point 'q
This function returns true if ( p1 , p2 , p3 , p4 ) form a square , otherwise false
d2 = distSq ( p1 , p2 ) from p1 to p2 d3 = distSq ( p1 , p3 ) from p1 to p3 d4 = distSq ( p1 , p4 ) from p1 to p4
If lengths if ( p1 , p2 ) and ( p1 , p3 ) are same , then following conditions must be met to form a square . 1 ) Square of length of ( p1 , p4 ) is same as twice the square of ( p1 , p2 ) 2 ) Square of length of ( p2 , p3 ) is same as twice the square of ( p2 , p4 )
The below two cases are similar to above case
Driver Code
Python program for the above approach
function to find the divisors of the number ( N - i )
Stores the resultant count of divisors of ( N - i )
Iterate over range [ 1 , sqrt ( N ) ]
Return the total divisors
def to find the number of triplets such that A * B - C = N
Loop to fix the value of C
Adding the number of divisors in count
Return count of triplets
Driver Code Driver Code
Function to find maximum number of planes that can be stopped from landing
Stores the times needed for landing for each plane
Iterate over the arrays
Stores the time needed for landing of current plane
Update the value of t
Append the t in set St
Return the answer
Driver Code
Function to predict the winner
Driver Code
Given Input
Function call
Function to calculate maximum value of Rightmost element
Initializing ans to store Maximum valued rightmost element
Calculating maximum value of Rightmost element
Printing rightmost element
Driver Code
Given Input
Function Call
Function to find smallest maximum number in an array whose sum is divisible by K .
Minimum possible sum possible for an array of size N such that its sum is divisible by K
If sum is not divisible by N
If sum is divisible by N
Driver code .
Function to find if any sequence is possible or not .
Since , S is greater than equal to X , and either both are odd or even There always exists a sequence
Only one case possible is S == X or NOT
Considering the above conditions true , check if XOR of S ^ ( S - X ) is X or not
Driver Code
Python 3 program for the above approach
Function to check if every integer in the array can be reduced to the minimum array element
Stores the minimum array element
Find the minimum element
Traverse the array arr [ ]
Stores the maximum value in the range
Check whether mini lies in the range or not
Otherwise , return Yes
Driver Code
Function to return gcd1 of two numbers
If one of numbers is 0 then gcd1 is other number
If both are equal then that value is gcd1
One is greater
Function to return minimum sum
Initialize min_sum with large value
Initialize variable gcd1
Storing value of arr [ i ] in c
Update maxgcd1 if gcd1 is greater than maxgcd1
returning the maximum divisor of all elements
Driver code
Python Program for the above approach
Function to find the count of distinct odd integers with N digits using the given digits in the array arr [ ]
Stores the factorial of a number Calculate the factorial of all numbers from 1 to N
Stores the frequency of each digit
Stores the final answer
Loop to iterate over all values of Nth digit i and 1 st digit j
If digit i does not exist in the given array move to next i
Fixing i as Nth digit
Stores the answer of a specific value of i and j
If digit j does not exist move to the next j
Fixing j as 1 st digit
Calculate number of ways to arrange remaining N - 2 digits
Including j back into the set of digits
Including i back into the set of the digits
Return Answer
Driver Code
Function Call
Function to find the sum of digits of the number N
Stores the sum of digits
If the number N is greater than 0
Return the sum
Function to find the count of pairs such that arr [ i ] + sumOfDigits ( arr [ i ] ) is equal to ( arr [ j ] + sumOfDigits ( arr [ j ] )
Stores the frequency of value of arr [ i ] + sumOfDigits ( arr [ i ] )
Traverse the given array
Find the value
Increment the frequency
Stores the total count of pairs
Traverse the map mp
Update the count of pairs
Return the total count of pairs
Driver Code
Function to build the Segment Tree from the given array to process range queries in log ( N ) time
Termination Condition
Find the mid value
Left and Right Recursive Call
Update the Segment Tree Node
Function to return the GCD of the elements of the Array from index l to index r
Base Case
Find the middle range
Find the GCD and return
Function to print maximum length of the subarray having GCD > one
Stores the Segment Tree
Function call to build the Segment tree from array [ ] arr
Store maximum length of subarray
Starting and ending pointer of the current window
Case where the GCD of the current window is 1
Update the maximum length
Print answer
Driver Code
Python3 program for the above approach
Function to find the numbers A and B whose Bitwise XOR is N and the difference between them is minimum
Find the MSB of the N
Find the value of B
Find the value of A
Print the result
Driver Code
Python 3 program for the above approach
Function to find the count the value of K such that sum of the first N numbers from K is G
Stores the total count of K
Iterate till square root of g
If the number is factor of g
If the second factor is not equal to first factor
Check if two factors are odd or not
If second factor is the same as the first factor then check if the first factor is odd or not
Print the resultant count
Driver Code
Function to find the difference between the maximum and minimum subarrays of length K
Stores the sum of subarray over the range [ 0 , K ]
Iterate over the range [ 0 , K ]
Store min and max sum
Iterate over the range [ K , N - K ]
Increment sum by arr [ i ] - arr [ i - K ]
Update max and min moving sum
Return difference between max and min average
Driver Code
Given Input
Function Call
Function to find maximum number of distinct integers in [ 1 , N ] having no subset with sum equal to K
Declare a vector to store the required numbers
Store all the numbers in [ 1 , N ] except K
Store the maximum number of distinct numbers
Reverse the array
Print the required numbers
Driver Code
Given Input
Function Call
Function to stores the values of x and y and find the value of gcd ( a , b )
Base Case
Store the result of recursive call
Update x and y using results of recursive call
Function to give the distinct solutions of ax = b ( mod n )
Function Call to find the value of d and u
No solution exists
Else , initialize the value of x0
Pr all the answers
Input
Function Call
Function to calculate factorial of the number without using multiplication operator
Variable to store the final factorial
Outer loop
Inner loop
Driver code
Input
Function calling
Function to calculate sum of Bitwise AND of all unordered triplets from a given array such that ( i < j < k )
Stores the resultant sum of Bitwise AND of all triplets
Generate all triplets of ( arr [ i ] , arr [ j ] , arr [ k ] )
Add Bitwise AND to ans
Print the result
Driver Code
Function to calculate sum of Bitwise AND of all unordered triplets from a given array such that ( i < j < k )
Stores the resultant sum of Bitwise AND of all triplets
Traverse over all the bits
Count number of elements with the current bit set
There are ( cnt ) C ( 3 ) numbers with the current bit set and each triplet contributes 2 ^ bit to the result
Return the resultant sum
Driver Code
Python3 program for the above approach
Function to find the lexicographically smallest permutation of length 2 * N satisfying the given conditions
Stores if i - th element is placed at odd position or not
Traverse the array
Mark arr [ i ] true
Stores all the elements not placed at odd positions
Iterate in the range [ 1 , 2 * N ]
If w [ i ] is not marked
Stores whether it is possible to obtain the required permutation or not
Stores the permutation
Traverse the array arr [ ]
Finds the iterator of the smallest number greater than the arr [ i ]
If it is S . end ( )
Mark found false
Push arr [ i ] and * it into the array
Erase the current element from the Set
If found is not marked
Otherwise ,
Print the permutation
Driver Code
Given Input
Function call
Function to find the maximum sum of a subsequence having difference between indices equal to difference in their values
Stores the maximum sum
Stores the value for each A [ i ] - i
Traverse the array
Update the value in map
Update the answer
Finally , print the answer
Driver Code
Given Input
Function Call
Function to find the nearest perfect square for every element in the given array import the math module
Traverse the array
Calculate square root of current element
Calculate perfect square
Find the nearest
Driver Code
Python3 program for the above approach
Sieve of Eratosthenes to find primes less than or equal to N
Function to find number of Sets
Handle Base Case
Set which contains less than or equal to N / 2
Number greater than N / 2 and are prime increment it by 1
If the number is prime Increment answer by 1
Driver Code
Input
Function Call
Function to find absolute difference between the two sum values
Variable to store total sum
Variable to store sum of A [ i ] / X
Traverse the array
Update totalSum
Update perElementSum
Floor of total sum divided by X
Return the absolute difference
Driver Code
Input
Size of Array
Function call to find absolute difference between the two sum values
Function to return ASCII value of a character
Function to convert a number from given base to decimal number
Stores the length of the string
Initialize power of base
Initialize result
Decimal equivalent is strr [ len - 1 ] * 1 + strr [ len - 2 ] * base + strr [ len - 3 ] * ( base ^ 2 ) + ...
A digit in input number must be less than number 's base
Update num
Update power
Function to return equivalent character of a given value
Function to convert a given decimal number to a given base
Store the result
Repeatedly divide inputNum by base and take remainder
Update res
Update inputNum
Reverse the result
Function to convert a given number from a base to another base
Convert the number from base A to decimal
Convert the number from decimal to base B
Prthe result
Given input
Function Call
Function to find the factorial of a number N
Base Case
Find the factorial recursively
Function to find the prefix factorial array
Find the prefix sum array
Find the factorials of each array element
Print the resultant array
Driver Code
Function to find the average of the fourth power of first N natural numbers
Store the resultant average calculated using formula
Return the average
Driver Code
Function to modify array by removing every K - th element from the array
Check if current element is the k - th element
Stores the elements after removing every kth element
Append the current element if it is not k - th element
Return the new array after removing every k - th element
Function to print the array
Traverse the array l [ ]
Function to print the array after performing the given operations exactly k times
Store first N natural numbers
Iterate over the range [ 0 , k - 1 ]
Store sums of the two consecutive terms
Remove every p - th element from the array
Increment x by 1 for the next iteration
Print the resultant array
Given arrays
Function Call
Function to count minimum number of bits required to be flipped to make all array elements equal
Stores the count of unset bits
Stores the count of set bits
Traverse the array
Traverse the bit of arr [ i ]
If current bit is set
Increment fre1 [ j ]
Otherwise
Increment fre0 [ j ]
Right shift x by 1
Stores the count of total moves
Traverse the range [ 0 , 32 ]
Update the value of ans
Return the minimum number of flips required
Driver Code
Function to calculate sum of array elements after adding arr [ i ] / K to the end of the array if arr [ i ] is divisible by K
Stores the sum of the array
Traverse the array arr [ ]
Traverse the vector
If v [ i ] is divisible by K
Iterate over the range [ 0 , K ]
Update v
Otherwise
Traverse the vector v
Return the sum of the updated array
Driver Code
Function to check if sum of all values of ( arr [ i ] / j ) for all 0 < i <= j < ( N - 1 ) is 0 or not
Stores the required sum
Traverse the array
If the sum is equal to 0
Otherwise
Driver Code
Function to find the increased value of P after N days
Expected value of the number P after N days
Print the expected value
Driver Code
Function to find the starting index of the given circular array prefix sum array is non negative
Stores the sum of the array
Stores the starting index
Stores the minimum prefix sum of A [ 0. . i ]
Traverse the array
Update the value of sum
If sum is less than minimum
Update the min as the value of prefix sum
Update starting index
Otherwise no such index is possible
Driver code
Python3 program for the above approach
Function to calculate the power of y which is nearest to x
Base Case
Stores the logarithmic value of x with base y
Function to replace each array element by the nearest power of its previous or next element
Stores the previous and next element
Traverse the array
Calculate nearest power for previous and next elements
Replacing the array values
Print the updated array
Given array
Utility Function to check if the sum of the array elements can be made equal to X by removing either the first or last digits of every array element
Base Case
Convert arr [ i ] to string
Remove last digit
Remove first digit
Recursive function call
Function to check if sum of given array can be made equal to X or not
Driver Code
Function Call
Python 3 program for the above approach
Function to check if y is a power of m or not
Calculate log y base m and store it in a variable with integer datatype
Calculate log y base m and store it in a variable with double datatype
If res1 and res2 are equal , return True . Otherwise , return false
Function to count the number of subarrays having product of elements equal to a power of m , where m is a prime number
Stores the count of subarrays required
Stores current sequence of consecutive array elements which are a multiple of m
Traverse the array
If arr [ i ] is a power of M
Increment cnt
Update ans
Update cnt
Return the count of subarrays
Driver Code
Input
Python3 program to implement the above approach
Function to count pairs that satisfy the above condition
Stores the count of pairs
Stores the count of array elements having same positions of MSB
Traverse the array
Stores the index of MSB of array elements
Calculate number of pairs
Driver Code
Given Input
Function call to count pairs satisfying the given condition
Function to return minimum MEX from all K - length subarrays
Stores element from [ 1 , N + 1 ] which are not present in subarray
Store number 1 to N + 1 in set s
Find the MEX of K - length subarray starting from index 0
Find the MEX of all subarrays of length K by erasing arr [ i ] and inserting arr [ i - K ]
Store first element of set
Updating the mex
Print minimum MEX of all K length subarray
Driver Code
Function to count for each array element , the number of elements that are smaller than that element
Stores the frequencies of array elements
Traverse the array
Update frequency of arr [ i ]
Initialize sum with 0
Compute prefix sum of the array hash [ ]
Traverse the array arr [ ]
If current element is 0
Print the resultant count
Driver Code
Function to calculate and return the remainder of a % n
( a / n ) implicitly gives the truncated result
Driver Code
Modulo of two positive numbers
Modulo of a negative number by a positive number
Modulo of a positive number by a negative number
Modulo of two negative numbers
Python3 program for the above approach
Function to calculate average of an array using standard method
Stores the sum of array
Find the sum of the array
Return the average
Function to calculate average of an array using efficient method
Store the average of the array
Traverse the array arr [ ]
Update avg
Return avg
Driver Code
Input
Function call
Python3 program for the above approach
Function to count pairs from an array satisfying given conditions
Stores the total count of pairs
Stores count of a [ i ] / i
Traverse the array
Updating count
Update frequency in the Map
Print count of pairs
Driver Code
Given array
Size of the array
Function call to count pairs satisfying given conditions
Function to add an edge between nodes u and v
Function to perform the DFS Traversal and store parent of each node
Store the immediate parent
Traverse the children of the current node
Recursively call for function dfs for the child node
Function to count the number of ancestors with values smaller than that of the current node
Perform the DFS Traversal
Traverse all the nodes
Store the number of ancestors smaller than node
Loop until parent [ node ] != - 1
If the condition satisfies , increment cnt by 1
Print the required result for the current node
Driver Code
Tree Formation
Function to count the subsequences having odd bitwise XOR value
Stores count of odd elements
Stores count of even elements
Traverse the array A [ ]
If el is odd
If count of odd elements is 0
Driver Code
Given array A [ ]
Function call to count subsequences having odd bitwise XOR value
Function to find maximum subarray product modulo M and minimum length of the subarray
Stores maximum subarray product modulo M and minimum length of the subarray
Stores the minimum length of subarray having maximum product
Traverse the array
Stores the product of a subarray
Calculate Subarray whose start index is i
Multiply product by arr [ i ]
If product greater than ans
Update ans
Update length
Print maximum subarray product mod M
Print minimum length of subarray having maximum product
Drivers Code
Python3 program for the above approach
Function to check whether given integers are co - prime or not
Utility function to count number of co - prime pairs
Traverse the array
If co - prime
Increment count
Return count
Function to count number of co - prime pairs
Stores digits in string form
Sort the list
Keep two copies of list l
Generate 2 digit numbers using d1 and d2
If current number does not exceed N
Stores length of list
Stores number of co - prime pairs
Print number of co - prime pairs
Driver Code
Given value of N , d1 , d2
Function call to count number of co - prime pairs
Function to find the minimum cost in placing N tiles in a grid M [ ] [ ]
Stores the minimum profit after placing i tiles
Traverse the grid [ ] [ ]
Update the orig_cost
Traverse over the range [ 2 , N ]
Place tiles horizentally or vertically
Print the answer
Driver Code
Function to check if array can be split into three equal sum subarrays by removing two elements
Stores sum of all three subarrays
Sum of left subarray
Sum of middle subarray
Sum of right subarray
Check if sum of subarrays are equal
Print the possible pair
If no pair exists , print - 1
Driver code
Given array
Size of the array
Python program for the above approach
Function to find the number of times a bulb switches its state
count of 1 's
Traverse the array
update the array
update the status of bulb
Traverse the array Q [ ]
stores previous state of the bulb
Toggle the switch and update the count of 1 's
if the bulb switches state
Return count
Input
Queries
Function call to find number of times the bulb toggles
Function to calculate the sum of digits of the number N
Stores the sum of digits
Return the sum
Function to count array elements
Store the count of array elements having sum of digits K
Traverse the array
If sum of digits is equal to K
Increment the count
Prthe count
Given array
Given value of K
Size of the array
Function call to count array elements having sum of digits equal to K
Python3 program to find infix for a given postfix .
Get Infix for a given postfix expression
Push operands
We assume that input is a valid postfix and expect an operator .
There must be a single element in stack now which is the required infix .
Driver Code
Python3 program to store sum of nodes in left subtree in every node Binary Tree Node utility that allocates a new Node with the given key
Construct to create a new node
Function to modify a Binary Tree so that every node stores sum of values in its left child including its own value
Base cases
Update left and right subtrees
Add leftsum to current node
Return sum of values under root
Utility function to do inorder traversal
Driver Code
Let us con below tree 1 / \ 2 3 / \ \ 4 5 6
Fills list S [ ] with span values
Span value of first day is always 1
Calculate span value of remaining days by linearly checking previous days
Initialize span value
Traverse left while the next element on left is smaller than price [ i ]
A utility function to print elements of array
Driver program to test above function
Fill the span values in list S [ ]
print the calculated span values
A stack based efficient method to calculate s
Create a stack and push index of fist element to it
Span value of first element is always 1
Calculate span values for rest of the elements
Pop elements from stack whlie stack is not empty and top of stack is smaller than price [ i ]
If stack becomes empty , then price [ i ] is greater than all elements on left of it , i . e . price [ 0 ] , price [ 1 ] , . . price [ i - 1 ] . Else the price [ i ] is greater than elements after top of stack
Push this element to stack
A utility function to print elements of array
Driver program to test above function
Fill the span values in array S [ ]
Print the calculated span values
An efficient method to calculate stock span values implementing the same idea without using stack
Span value of first element is always 1
Calculate span values for rest of the elements
A utility function to print elements of array
Driver code
Fill the span values in array S [ ]
Print the calculated span values
Function to print element and NGE pair for all elements of list
Driver program to test above function
Utility function to create a new tree node
Change a tree so that the roles of the left and right pointers are swapped at every node . So the tree ... 4 / \ 2 5 / \ 1 3 is changed to ... 4 / \ 5 2 / \ 3 1
do the subtrees
swap the pointers in this node
Helper function to print Inorder traversal .
Driver code
Print inorder traversal of the input tree
Convert tree to its mirror
Print inorder traversal of the mirror tree
Method to find the next greater value in left side
Checking if current element is greater than top
Pop the element till we can 't  get the larger value then  the current value
Else push the element in the stack
Method to find the next greater value in right
Checking if current element is greater than top
Pop the element till we can 't  get the larger value then  the current value
Else push the element in the stack
For each element storing the index of just greater element in left side
For each element storing the index of just greater element in right side
Finding the max index product
Driver Code
Max
Person with 2 is celebrity
Returns - 1 if celebrity is not present . If present , returns id ( value from 0 to n - 1 )
The graph needs not be constructed as the edges can be found by using knows function degree array ;
Query for all edges
Set the degrees
Find a person with indegree n - 1 and out degree 0
Driver code
Max
Person with 2 is celebrity
Returns - 1 if a potential celebrity is not present . If present , returns id ( value from 0 to n - 1 ) .
Base case
Find the celebrity with n - 1 persons
If there are no celebrities
if the id knows the nth person then the id cannot be a celebrity , but nth person could be on
if the id knows the nth person then the id cannot be a celebrity , but nth person could be one
If there is no celebrity
Returns - 1 if celebrity is not present . If present , returns id ( value from 0 to n - 1 ) . a wrapper over findCelebrity
Find the celebrity
Check if the celebrity found is really the celebrity
Check the id is really the celebrity
If the person is known to everyone .
Driver code
Function to find precedence of operators .
Function to perform arithmetic operations .
Function that returns value of expression after evaluation .
stack to store integer values .
stack to store operators .
Current token is a whitespace , skip it .
Current token is an opening brace , push it to 'ops  
Current token is a number , push it to stack for numbers .
There may be more than one digits in the number .
right now the i points to the character next to the digit , since the for loop also increases the i , we would skip one token position ; we need to decrease the value of i by 1 to correct the offset .
Closing brace encountered , solve entire brace .
pop opening brace .
Current token is an operator .
While top of ' ops ' has same or greater precedence to current token , which is an operator . Apply operator on top of ' ops ' to top two elements in values stack .
Push current token to ' ops ' .
Entire expression has been parsed at this point , apply remaining ops to remaining values .
Top of ' values ' contains result , return it .
Driver Code
A binary tree node has data , pointer to left child and a pointer to right child Helper function that allocates a new node with the given data and None left and right pointers
Change a tree so that the roles of the left and right pointers are swapped at every node . So the tree ... 4 / \ 2 5 / \ 1 3 is changed to ... 4 / \ 5 2 / \ 3 1
Do BFS . While doing BFS , keep swapping left and right children
pop top node from queue
swap left child with right child
append left and right children
Helper function to print Inorder traversal .
Driver code
Print inorder traversal of the input tree
Convert tree to its mirror
Print inorder traversal of the mirror tree
Deletes middle of stack of size n . Curr is current item number
If stack is empty or all items are traversed
Remove current item
Remove other items
Put all items back except middle
Driver function to test above functions
push elements into the stack
Printing stack after deletion of middle .
This function return the sorted stack
pop out the first element
while temporary stack is not empty and top of stack is smaller than temp
pop from temporary stack and append it to the input stack
append temp in tempory of stack
append array elements to stack
Sort the temporary stack
Put stack elements in arrp [ ]
Driver code
Binary tree node
Given a reference to the head of a list and a node , inserts the node on the front of the list .
Make right of given node as head and left as None
change left of head node to given node
move the head to point to the given node
Function to prints contents of DLL
Function to prcorner node at each level
Base Case
Create an empty deque for doing spiral level order traversal and enqueue root
create a stack to store Binary Tree nodes to insert into DLL later
nodeCount indicates number of Nodes at current level .
Dequeue all Nodes of current level and Enqueue all Nodes of next level odd level
dequeue node from front & push it to stack
insert its left and right children in the back of the deque
even level
dequeue node from the back & push it to stack
inserts its right and left children in the front of the deque
head pointer for DLL
pop all nodes from stack and push them in the beginning of the list
Driver Code
Let us create Binary Tree as shown in above example
root . right . left . left = newNode ( 12 )
root . right . right . right = newNode ( 15 )
reverses individual words of a string
Traverse given string and push all characters to stack until we see a space .
When we see a space , we print contents of stack .
Since there may not be space after last word .
Driver Code
Python3 program to count number of distinct instance where second highest number lie before highest number in all subarrays .
Finding the next greater element of the array .
Finding the previous greater element of the array .
Wrapper Function
Finding previous largest element
Finding next largest element
Driver Code
Recursive Python function to solve tower of hanoi
Number of disks
A , C , B are the name of rods
A naive method to find maximum of minimum of all windows of different sizes
Consider all windows of different sizes starting from size 1
Initialize max of min for current window size k
Traverse through all windows of current size k
Find minimum of current window
Update maxOfMin if required
Print max of min for current window size
Driver Code
An efficient Python3 program to find maximum of all minimums of windows of different sizes
Used to find previous and next smaller
Initialize elements of left [ ] and right [ ]
Fill elements of left [ ] using logic discussed on www . geeksforgeeks . org / next - greater - element https :
Empty the stack as stack is going to be used for right [ ]
Fill elements of right [ ] using same logic
Create and initialize answer array
Fill answer array by comparing minimums of all . Lengths computed using left [ ] and right [ ]
Length of the interval
arr [ i ] is a possible answer for this Length ' Len ' interval , check if arr [ i ] is more than max for 'Len  
Some entries in ans [ ] may not be filled yet . Fill them by taking values from right side of ans [ ]
Print the result
Driver Code
method to get length of the longest valid
Create a stack and push - 1 as initial index to it .
Initialize result
Traverse all characters of given string
If opening bracket , push index of it
If closing bracket
Pop the previous opening bracket 's index
Check if this length formed with base of current valid substring is more than max so far
If stack is empty . push current index as base for next valid substring ( if any )
Driver code
Function call
Function call
Return the number of nodes of subtree having node as a root .
Mark node as visited .
Traverse the adjacency list to find non - visited node .
Finding number of nodes of the subtree of a subtree .
If nodes are even , increment number of edges to removed . Else leave the node as child of subtree .
Return the maximum number of edge to remove to make forest .
Driver Code
Python3 program to find length of the longest valid substring
Initialize curMax to zero
Iterate over the string starting from second index
Driver Code
Function call
Function call
Function to return the length of the longest valid substring
Variables for left and right counter . maxlength to store the maximum length found so far
Iterating the string from left to right
If " ( " is encountered , then left counter is incremented else right counter is incremented
Whenever left is equal to right , it signifies that the subsequence is valid and
Reseting the counters when the subsequence becomes invalid
Iterating the string from right to left
If " ( " is encountered , then left counter is incremented else right counter is incremented
Whenever left is equal to right , it signifies that the subsequence is valid and
Reseting the counters when the subsequence becomes invalid
Function call
Function to check redundant brackets in a balanced expression
create a stack of characters
Iterate through the given expression
if current character is close parenthesis ')  
If immediate pop have open parenthesis ' ( ' duplicate brackets found
Check for operators in expression
Fetch top element of stack
If operators not found
append open parenthesis ' ( ' ,
operators and operands to stack
Function to check redundant brackets
Driver code
Python3 program to check if two expressions evaluate to same .
Return local sign of the operand . For example , in the expr a - b - ( c ) , local signs of the operands are + a , - b , + c
Evaluate expressions into the count vector of the 26 alphabets . If add is True , then add count to the count vector of the alphabets , else remove count from the count vector .
stack stores the global sign for operands .
+ means True global sign is positive initially
global sign for the bracket is pushed to the stack
global sign is popped out which was pushed in for the last bracket
global sign is positive ( we use different values in two calls of functions so that we finally check if all vector elements are 0.
global sign is negative here
Returns True if expr1 and expr2 represent same expressions
Create a vector for all operands and initialize the vector as 0.
Put signs of all operands in expr1
Subtract signs of operands in expr2
If expressions are same , vector must be 0.
Driver Code
Python program to find index of closing bracket for a given opening bracket .
Function to find index of closing bracket for given opening bracket .
If input is invalid .
Create a deque to use it as a stack .
Traverse through all elements starting from i .
Push all starting brackets
Pop a starting bracket for every closing bracket
If deque becomes empty
test function
Driver code to test above method .
should be 8
should be 7
should be 12
No matching bracket
execution
Program to convert an aribitary binary tree to a tree that holds children sum property Helper function that allocates a new node with the given data and None left and right poers .
Construct to create a new node
Convert the given tree to a tree where each node is logical AND of its children The main idea is to do Postorder traversal
first recur on left child
then recur on right child
first recur on left child
then print the data of node
now recur on right child
Driver Code
Create following Binary Tree 1 / \ 1 0 / \ / \ 0 1 1 1
Function to find duplicate parenthesis in a balanced expression
create a stack of characters
Iterate through the given expression
if current character is close parenthesis ' ) '
pop character from the stack
stores the number of characters between a closing and opening parenthesis if this count is less than or equal to 1 then the brackets are redundant else not
push open parenthesis ' ( ' , operators and operands to stack
No duplicates found
Driver Code
input balanced expression
function find Next greater element
create empty stack
Traverse all array elements in reverse order order == ' G ' we compute next greater elements of every element order == ' S ' we compute right smaller element of every element
Keep removing top element from S while the top element is smaller then or equal to arr [ i ] ( if Key is G ) element is greater then or equal to arr [ i ] ( if order is S )
store the next greater element of current element
If all elements in S were smaller than arr [ i ]
Push this element
Function to find Right smaller element of next greater element
stores indexes of next greater elements
stores indexes of right smaller elements
Find next greater element Here G indicate next greater element
Find right smaller element using same function nextGreater ( ) Here S indicate right smaller elements
If NG [ i ] = = - 1 then there is no smaller element on right side . We can find Right smaller of next greater by arr [ RS [ NG [ i ] ] ]
Driver program
Class to define a node structure of the tree
Function to convert ternary expression to a Binary tree It returns the root node of the tree
Base case
Create a new node object for the expression at ith index
Move ahead in str
if current character of ternary expression is ' ? ' then we add next character as a left child of current node
else we have to add it as a right child of current node expression [ 0 ] = = ':  
Function to print the tree in a pre - order traversal pattern
Driver Code
Return the count of the number having all permutation greater than or equal to the number .
Pushing 1 to 9 because all number from 1 to 9 have this property .
take a number from stack and add a digit smaller than last digit of it .
Driver Code
Function to find the size of manipulated sequence
Start traversing the sequence
Compare the current string with next one Erase both if equal
Erase function delete the element and also shifts other element that 's why   i is not updated 
Update i , as to check from previous element again
Reduce sequence size
Increment i , if not equal
Return modified size
Driver Code
Function to find the size of manipulated sequence
Start traversing the sequence
Push the current string if the stack is empty
compare the current string with stack top if equal , pop the top
Otherwise push the current string
Return stack size
Driver code
Returns decoded string for ' str '
Traversing the string
If number , convert it into number and push it into integerstack .
If closing bracket ' ] ' , pop elemment until ' [ ' opening bracket is not found in the character stack .
Repeating the popped string ' temo ' count number of times .
Push it in the character stack .
If ' [ ' opening bracket , push it into character stack .
Pop all the elmenet , make a string and return .
Driven code
A class to create a new tree node
Iterative Function to print all ancestors of a given key
Create a stack to hold ancestors
Traverse the complete tree in postorder way till we find the key
Traverse the left side . While traversing , push the nodes into the stack so that their right subtrees can be traversed later
push current node
move to next node
If the node whose ancestors are to be printed is found , then break the while loop .
Check if right sub - tree exists for the node at top If not then pop that node because we don 't need   this node any more. 
If the popped node is right child of top , then remove the top as well . Left child of the top must have processed before .
if stack is not empty then simply set the root as right child of top and start traversing right sub - tree .
If stack is not empty , print contents of stack Here assumption is that the key is there in tree
Driver code
Let us construct a binary tree
Python3 program to keep track of maximum element in a stack
main stack
tack to keep track of max element
If current element is greater than the top element of track stack , append the current element to track stack otherwise append the element at top of track stack again into it .
Driver Code
Stack to maintain order of digits
Function to push digits into stack
Function to reverse the number
Function call to push number 's   digits to stack
Popping the digits and forming the reversed number
Return the reversed number formed
Driver Code
Function call to reverse number
A binary tree node
method to flip the binary tree
Recursively call the same method
Rearranging main root Node after returning from recursive call
Iterative method to do the level order traversal line by line
Base Case
Create an empty queue for level order traversal
Enqueue root and initialize height
nodeCount ( queue size ) indicates number of nodes at current level
Dequeue all nodes of current level and Enqueue all nodes of next level
Driver code
Function to check if elements are pairwise consecutive in stack
Transfer elements of s to aux .
Traverse aux and see if elements are pairwise consecutive or not . We also need to make sure that original content is retained .
Fetch current top two elements of aux and check if they are consecutive .
append the elements to original stack .
Driver Code
Function to simplify the String
resultant String of max Length equal to Length of input String
create empty stack
If top is 1 , flip the operator
If top is 0 , append the same operator
x is opposite to the top of stack
append value equal to top of the stack
If closing parentheses pop the stack once
copy the character to the result
Driver Code
constant amount at which stack is increased
top of the stack
length of stack
function to create new stack
allocate memory for new stack
copying the content of old stack
re - sizing the length
function to push new element
if stack is full , create new one
insert element at top of the stack
function to pop an element
function to display
if top is - 1 , that means stack is empty
Driver Code
creating initial stack
pushing element to top of stack
pushing more element when stack is full
pushing more element so that stack can grow
Function for precomputation
Create a stack and push - 1 as initial index to it .
Traverse all characters of given String
If opening bracket , push index of it
If closing bracket , i . e . , str [ i ] = ') 
If closing bracket , i . e . , str [ i ] = ' ) ' && stack is not empty then mark both " open ▁ & ▁ close " bracket indexs as 1 . Pop the previous opening bracket 's index
If stack is empty .
Function return output of each query in O ( 1 )
Driver code
To heapify subtree rooted at index i . n is size of heap
Initialize largest as root
left = 2 * i + 1
right = 2 * i + 2
See if left child of root exists and is greater than root
See if right child of root exists and is greater than root
Change root , if needed
Heapify the root .
The main function to sort an array of given size
Build a maxheap .
One by one extract elements
swap
call max heapify on the reduced heap
Driver code
function build Max Heap where value of each child is always smaller than value of their parent
if child is bigger than parent
swap child and parent until parent is smaller
swap value of first indexed with last indexed
maintaining heap property after each swapping
if left child is smaller than right child point index variable to right child
if parent is smaller than child then swapping parent with child having higher value
Driver Code
Python3 program to flip a binary tree
A binary tree node structure
method to flip the binary tree
Initialization of pointers
Iterate through all left nodes
Swapping nodes now , need temp to keep the previous right child Making prev ' s ▁ right ▁ as ▁ curr ' s left child
Storing curr 's right child
Making prev as curr 's right  child
Iterative method to do level order traversal line by line
Base Case
Create an empty queue for level order traversal
Enqueue Root and initialize height
nodeCount ( queue size ) indicates number of nodes at current level .
Dequeue all nodes of current level and Enqueue all nodes of next level
Driver code
Utility function to create a new tree node
Returns true if the given tree can be folded
A utility function that checks if trees with roots as n1 and n2 are mirror of each other
If both left and right subtrees are NULL , then return true
If one of the trees is NULL and other is not , then return false
Otherwise check if left and right subtrees are mirrors of their counterparts
Driver code
The constructed binary tree is 1 / \ 2 3 \ / 4 5
returns 1 if children sum property holds for the given node and both of its children
left_data is left child data and right_data is for right child data
If node is None or it 's a leaf   node then return true 
If left child is not present then 0 is used as data of left child
If right child is not present then 0 is used as data of right child
if the node and both of its children satisfy the property return 1 else 0
Helper class that allocates a new node with the given data and None left and right pointers .
Driver Code
Returns true if arr [ i . . n - 1 ] represents a max - heap
If a leaf node
If an internal node and is greater than its children , and same is recursively true for the children
Driver Code
Returns true if arr [ i . . n - 1 ] represents a max - heap
Start from root and go till the last internal node
If left child is greater , return false
If right child is greater , return false
Driver Code
Python3 program to connect n ropes with minimum cost
Create a priority queue out of the given list
Initializ result
While size of priority queue is more than 1
Extract shortest two ropes from arr
Connect the ropes : update result and insert the new rope to arr
Driver code
Python3 program to generate smallest derangement using priority queue .
Generate Sequence and insert into a priority queue .
Generate Least Derangement
Print Derangement
Driver code
Efficient Python3 program to find smallest derangement .
Generate Sequence S
Generate Derangement
Only if i is odd Swap S [ N - 1 ] and S [ N ]
Print Derangement
Driver Code
Python3 program to find the largest derangement
Stores result
Insert all elements into a priority queue
Fill Up res [ ] from left to right
New Element poped equals the element in original sequence . Get the next largest element
If given sequence is in descending order then we need to swap last two elements again
Driver code
Function to calculate Profit .
Function to calculate Loss .
Driver code
Python3 implementation of above approach
Function to find the next perfect square
Driver Code
Python3 implementation of above approach
Function to print the substrings of a number
Calculate the total number of digits
0.5 has been added because of it will return double value like 99.556
Print all the numbers from starting position
Update the no .
Update the no . of digits
Driver code
Python3 program to find ( a ^ b ) % MOD where a and b may be very large and represented as strings .
Returns modulo exponentiation for two numbers represented as long long int . It is used by powerStrings ( ) . Its complexity is log ( n )
Returns modulo exponentiation for two numbers represented as strings . It is used by powerStrings ( )
We convert strings to number
calculating a % MOD
calculating b % ( MOD - 1 )
Now a and b are long long int . We calculate a ^ b using modulo exponentiation
As numbers are very large that is it may contains upto 10 ^ 6 digits . So , we use string .
Utility function to check if a number is power of 2 or not
Utility function to determine the value of previous power of 2
function to check if n can be expressed as 2 ^ x + 2 ^ y or not
if value of n is 0 or 1 it can not be expressed as 2 ^ x + 2 ^ y
if n is power of two then it can be expressed as sum of 2 ^ x + 2 ^ y
if the remainder after subtracting previous power of 2 is also a power of 2 then it can be expressed as 2 ^ x + 2 ^ y
driver code
Python3 program to find 10 's complement
Function to find 10 's complement
Calculating total digits in num
restore num
calculate 10 's complement
Driver code
Recursive function to return gcd of a and b
Everything divides 0
base case
a is greater
Driver program to test above function
Function to find number of subarrays with odd sum
' odd ' stores number of odd numbers upto ith index ' c _ odd ' stores number of odd sum subarrays starting at ith index ' Result ' stores the number of odd sum subarrays
First find number of odd sum subarrays starting at 0 th index
Find number of odd sum subarrays starting at ith index add to result
Driver code
Python Program to find n - th real root of x
Initialize boundary values
used for taking approximations of the answer
Do binary search
Driver code
Function to find sum of all elements upto nth row .
Initialize sum with 0
Loop to calculate power of 2 upto n and add them
Driver code
function to calculate total sequences possible
Value of N is even
Value of N is odd
Driver code
Python3 program to compute x ^ x ^ x ^ x . . % m
Create an array to store phi or totient values
Function to calculate Euler Totient values
indicates not evaluated yet and initializes for product formula .
Compute other Phi values
If phi [ p ] is not computed already , then number p is prime
Phi of a prime number p is always equal to p - 1.
Update phi values of all multiples of p
Add contribution of p to its multiple i by multiplying with ( 1 - 1 / p )
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Function to calculate ( x ^ x ^ x ^ x ... k times ) % m
to store different mod values
run loop in reverse to calculate result
compute euler totient function values
Calling function to compute answer
Function to find number of 1 s in smallest repunit multiple of the number
to store number of 1 s in smallest repunit multiple of the number .
initialize rem with 1
run loop until rem becomes zero
rem * 10 + 1 here represents the repunit modulo n
when remainder becomes 0 return count
Driver Code
Calling function
Function to find the largest number
Driver Code
Python3 Program to find number of distinct point of meet on a circular road
Returns the number of distinct meeting points .
Find the relative speed .
convert the negative value to positive .
Driver Code
Python 3 Program to find the minimum number of square free divisors
Initializing MAX with SQRT ( 10 ^ 6 )
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Print all prime numbers
This function returns the minimum number of Square Free divisors
Precomputing Prime Factors
holds max of max power of all prime factors
holds the max power of current prime factor
If number itself is prime , it will be included as answer and thus minimum required answer is 1
Driver Code
Python 3 program to find subsequence of size k with maximum possible GCD .
function to find GCD of sub sequence of size k with max GCD in the array
Computing highest element
Array to store the count of divisors i . e . Potential GCDs
Iterating over every element
Calculating all the divisors
Divisor found
Incrementing count for divisor
Element / divisor is also a divisor Checking if both divisors are not same
Checking the highest potential GCD
If this divisor can divide at least k numbers , it is a GCD of at least one sub sequence of size k
Driver code
Array in which sub sequence with size k with max GCD is to be found
This functions finds the determinant of Matrix
This function finds the solution of system of linear equations using cramer 's rule
Matrix d using coeff as given in cramer 's rule
Matrix d1 using coeff as given in cramer 's rule
Matrix d2 using coeff as given in cramer 's rule
Matrix d3 using coeff as given in cramer 's rule
Calculating Determinant of Matrices d , d1 , d2 , d3
Case 1
Coeff have a unique solution . Apply Cramer 's Rule
calculating z using cramer 's rule
Case 2
Driver Code
storing coefficients of linear equations in coeff matrix
Python3 program to print greater of x ^ y and y ^ x
Driver Code
Function to print nth term of series
Driver code
To compute ( a * b ) % MOD
res = 0 Initialize result
If b is odd , add ' a ' to result
Multiply ' a ' with 2
Divide b by 2
Return result
This function computes factorials and product by using above function i . e . modular multiplication
Initialize product and fact with 1
ith factorial
product of first i factorials
If at any iteration , product becomes divisible by MOD , simply return 0
Driver Code to Test above functions
Python3 program to find if two numbers are equivalent or not
Function to calculate sum of all proper divisors num -- > given natural number
To store sum of divisors
Find all divisors and add them
Function to check if both numbers are equivalent or not
Driver code
Function to calculate dodecahedral number
Formula to calculate nth dodecahedral number
Driver Code
print result
Python3 Program to find number of Divisors which on integer division produce quotient having less set bit than divisor
Return the count of set bit .
check if q and d have same number of set bit .
Binary Search to find the point at which number of set in q is less than or equal to d .
while left index is less than right index
finding the middle .
check if q and d have same number of set it or not .
Driver Code
Python3 program to find if two people starting from different positions ever meet or not .
If speed of a person at a position before other person is smaller , then return false .
Making sure that x1 is greater
Until one person crosses other
first person taking one jump in each iteration
second person taking one jump in each iteration
Driver code
Function to check the divisibility
Cycle
no of residual terms
if no of residue term = 0
if no of residue term = 1
if no of residue term = 2
if no of residue term = 3
sum of all digits
divisibility check
Driver code
Python3 program to find ceil ( a / b ) without using ceil ( ) function
taking input 1
example of perfect division taking input 2
Python 3 program to print Collatz sequence
We simply follow steps while we do not reach 1
If n is odd
If even
Print 1 at the end
Driver code
Python3 program to find the blocks for given number .
Converting the decimal number into its binary equivalent .
Displaying the output when the bit is '1' in binary equivalent of number .
Driver Code
Python3 program to Find Number of digits in base b .
function to print number of digits
Calculating log using base changing property and then taking it floor and then adding 1.
printing output
taking inputs
calling the method
Python3 code to verify Nesbitt 's Inequality
3 parts of the inequality sum
Driver Code
Efficient Python3 Program to print all cube free numbers smaller than or equal to n .
Initialize all numbers as not cube free
Traverse through all possible cube roots
If i itself is cube free
Mark all multiples of i as not cube free
Print all cube free numbers
Driver Code
To heapify a subtree rooted with node i which is an index in arr [ ] . n is size of heap
Initialize smalles as root
left = 2 * i + 1
right = 2 * i + 2
If left child is smaller than root
If right child is smaller than smallest so far
If smallest is not root
Recursively heapify the affected sub - tree
main function to do heap sort
Build heap ( rearrange array )
One by one extract an element from heap
Move current root to end
call max heapify on the reduced heap
A utility function to print array of size n
Driver Code
Python3 program to check if a given number is sum of cubes of natural numbers .
Returns root of n ( n + 1 ) / 2 = num if num is triangular ( or integerroot exists ) . Else returns - 1.
Considering the equation n * ( n + 1 ) / 2 = num . The equation is : a ( n ^ 2 ) + bn + c = 0 ";
Find roots of equation
checking if root1 is natural
checking if root2 is natural
Returns square root of x if it is perfect square . Else returns - 1.
Find floating point value of square root of x .
If square root is an integer
Function to find if the given number is sum of the cubes of first n natural numbers
Driver code
Function to return the answer when the first odd digit is 9
traverse towwars the left to find the non - 8 digit
index digit
if digit is not 8 , then break
if on the left side of the '9' , no 8 is found then we return by adding a 2 and 0 's
till non - 8 digit add all numbers
if non - 8 is even or odd than add the next even .
add 0 to right of 9
function to return the smallest number with all digits even
convert the number to string to perform operations
find out the first odd number
if no odd numbers are there , than n is the answer
if the odd number is 9 , than tricky case handles it
add all digits till first odd
increase the odd digit by 1
add 0 to the right of the odd number
Driver Code
Python3 program to find n - th number with sum of digits as 10.
Find sum of digits in current no .
If sum is 10 , we increment count
If count becomes n , we return current number .
Driver Code
Simple Python3 program to find sum of given series .
Driver Code
Efficient Python3 program to find sum of given series .
Sum of multiples of 1 is 1 * ( 1 + 2 + . . )
Adding sum of multiples of numbers other than 1 , starting from 2.
Subtract previous number from current multiple .
For example , for 2 , we get sum as ( 2 + 3 + 4 + ... . ) * 2
Driver code
Python code to verify Lemoine 's Conjecture for any odd number >= 7
Function to check if a number is prime or not
Representing n as p + ( 2 * q ) to satisfy lemoine 's conjecture
Declaring a map to hold pairs ( p , q )
Finding various values of p for each q to satisfy n = p + ( 2 * q )
After finding a pair that satisfies the equation , check if both p and q are prime or not
If both p and q are prime , store them in the map
Displaying all pairs ( p , q ) that satisfy lemoine ' s ▁ conjecture ▁ for ▁ the ▁ number ▁ ' n
Driver Code
Function calling
find the Sum of having n digit and divisible by the number
compute the first and last term
first number which is divisible by given number
last number which is divisible by given number
total divisible number
return the total sum
Driver code
Python 3 Program to find nth term of Arithmetic progression
using formula to find the Nth term t ( n ) = a ( 1 ) + ( n - 1 ) * d
starting number
Common difference
N th term to be find
Display the output
function to check if binary representation of an integer has consecutive 1 s
stores the previous last bit initially as 0
if current last bit and previous last bit is 1
stores the last bit
right shift the number
Driver code
function which return the the sum of series
Driver Code
Function to find nth nonagonal number .
Formula to find nth nonagonal number .
Driver function .
Python3 program to check if a large number is divisible by 20.
Get number with last two digits
Check if the number formed by last two digits is divisible by 5 and 4.
driver code
Python Program to check if number is divisible by 12
if number greater then 3
find last digit
no is odd
find second last digit
find sum of all digits
f number is less then r equal to 100
driver function
python program to find the largest non perfect square number among n numbers
takes the sqrt of the number
checks if it is a perfect square number
function to find the largest non perfect square number
stores the maximum of all non perfect square numbers
traverse for all elements in the array
store the maximum if not a perfect square
driver code
function call
Python 3 Program to print an arithmetic progression series
Printing AP by simply adding d to previous term .
starting number
Common difference
N th term to be find
Returns count of zeros in product of array
count number of 2 s in each element
count number of 5 s in each element
return the minimum
Driven Program
Efficient Python3 code to find sum of square of first n even numbers
driver code
Python 3 code for MA14nchhausen Number
pwr [ i ] is going to store i raised to power i .
Function to check out whether the number is MA14nchhausen Number or not
Precompute i raised to power i for every i
The input here is fixed i . e . it will check up to n
check the integer for MA14nchhausen Number , if yes then print out the number
Driver Code
Python3 code to compute k - th digit in a ^ b
computin a ^ b in python
getting last digit
increasing count by 1
if current number is required digit
remove last digit
driver code
Python3 Code for Sum of digit of n ^ x
function to get sum of digits of a number
function to return sum
Find sum of digits in n
Find remainder of exponent
Driver method
Python3 code for Max Water Container
Calculating the max area
Driver code
Python Program to evaluate Mobius def M ( N ) = 1 if N = 1 M ( N ) = 0 if any prime factor of N is contained twice M ( N ) = ( - 1 ) ^ ( no of distinctprime factors )
def to check if n is prime or not
Handling 2 separately
If 2 ^ 2 also divides N
Check for all other prime factors
If i divides n
If i ^ 2 also divides N
Driver Code
function to return product of number from start to end .
Return the sum of square of binomial coefficient
Driven Program
Approximate value of golden ratio
Fibonacci numbers upto n = 5
Function to find nth Fibonacci number
Fibonacci numbers for n < 6
Else start counting from 5 th term
driver code
Consider a differential equation dy / dx = ( x + y + xy )
Function for euler formula
Iterating till the point at which we need approximation
Printing approximation
Initial Values
Value of x at which we need approximation
function to find the solution
traverse for all possible values
check if it is satisfying the equation
driver program to test the above function
Python Program to find the sum of Binomial Coefficient .
Returns value of Binomial Coefficient Sum
Driver program to test above function
Python3 program to compute division upto n decimal places .
Base cases
Since n <= 0 , don 't  compute after the decimal
Handling negative numbers
Integral division
Now one by print digits after dot using school division method .
Driver Code
Function to check quadrant
Driver code
Function Calling
function to check digits
check all digits are prime or not
check if digits are prime or not
To check if n is prime or not
check for all factors
To check if n is Full Prime
The order is important here for efficiency .
Driver code
Python program for checking of Narcissistic number
Traversing through the string
Converting character to int
Converting string to integer
Comparing number and sum
Driver Code taking input as string
A memoization based optimized Python3 program to find n - th SchrAderaHipparchus number
Driven Program
function to find sum of first n even numbers
sum of first n even numbers
next even number
required sum
Driver Code
function to find sum of first n even numbers
required sum
Driver Code
Function to convert kmph to mph
Function to convert mph to kmph
Python3 program to count GP subsequences of size 3.
Returns count of G . P . subsequences with length 3 and common ratio r
hashing to maintain left and right array elements to the main count
stores the answer
traverse through the elements
traverse through all elements and find out the number of elements as k1 * k2
keep the count of left and right elements left is a [ i ] / r and right a [ i ] * r
if the current element is divisible by k , count elements in left hash .
decrease the count in right hash
number of right elements
calculate the answer
left count of a [ i ]
Returns answer
Driver Code
Returns GCD of two numbers
Function to return the desired number if exists
Find GCD of array
Check if GCD is present in array
Driver Code
Python3 program to check whether there exist at least k or not in range [ 2. . n ]
Generating all the prime numbers from 2 to n .
If a prime number is Special prime number , then we increments the value of k .
If at least k Special prime numbers are present , then we return 1. else we return 0 from outside of the outer loop .
Driver Code
Python3 program to print prime factors and their powers .
Function to calculate all the prime factors and count of every prime factor
count the number of times 2 divides
equivalent to n = n / 2 ;
if 2 divides it
check for all the possible numbers that can divide it
if n at the end is a prime number .
Driver Code
__gcd function
Function to count number of moves .
Counting Number of ones .
If there is a one
Find smallest subarray with GCD equals to one .
to calculate GCD
Not Possible
Final answer
Driver program
Python program to find n elements
function to print series of n elements
if S . D . is 0 then print all elements as 0.
print n 0 's
if S . D . is even
print - SD , + SD , - SD , + SD
if odd
if odd convert n to a float integer
print one element to be 0
print ( n - 1 ) elements as xi derived from the formula
driver code to test the above function
Python3 code to count the frequency of 1 in numbers less than or equal to the given number .
Driver Code
prime modulo value
for cases where exponent is not an even value
Driver Code
Python code to find GCD of factorials of two numbers .
Driver code
Function for recursive digit sum
function to check if prime or not the single digit
calls function which returns sum till single digit
checking prime
driver code
Python program to find the value at n - th place in the given sequence
Definition of findNumber function
Finding x from equation n = x ( x + 1 ) / 2 + 1
Base of current block
Value of n - th element
Driver code
Returns weighted mean assuming for numbers 1 , 2 , . . n and weights 1 , 2 , . . n
Driver program to test the function .
Python3 program to find quotient of arrayelements
Function to calculate the quotient of every element of the array
Calculate the product of all elements
To calculate the quotient of every array element
Driver code
Python3 program to find the largest power of k that divides n !
To find the power of a prime p in factorial N
calculating floor ( n / r ) and adding to the count
increasing the power of p from 1 to 2 to 3 and so on
returns all the prime factors of k
vector to store all the prime factors along with their number of occurrence in factorization of k
Returns largest power of k that divides n !
calculating minimum power of all the prime factors of k
Driver code
function to print where to shoot
no . of bombs required
bomb all the even positions
bomb all the odd positions
bomb all the even positions again
Driver Code
define lcm function
If at any point LCM become 0. return it
Driver code
Python3 Program to test 1 / e law for Secretary Problem
To find closest integer of num .
Finds best candidate using n / e rule . candidate [ ] represents talents of n candidates .
Calculating sample size for benchmarking .
Finding best candidate in sample size
Finding the first best candidate that is better than benchmark set .
Driver code
n = 8 candidates and candidate array contains talents of n candidate where the largest number means highest talented candidate .
generating random numbers between 1 to 8 for talent of candidate
Returns sum of squares of digits of a number n . For example for n = 12 it returns 1 + 4 = 5
Returns true if n is Happy number else returns false .
Keep replacing n with sum of squares of digits until we either reach 1 or we end up in a cycle
Number is Happy if we reach 1
Replace n with sum of squares of digits
Number is not Happy if we reach 4
Driver code
Python program to find sum of all subsets of a set .
sum of subsets is ( n * ( n + 1 ) / 2 ) * pow ( 2 , n - 1 )
Driver code
Python3 program to find minimum element whose n - th power is greater than product of an array of size n
function to find the minimum element
loop to traverse and store the sum of log
calculates the elements according to formula .
returns the minimal element
initialised array
computes the size of array
prints out the minimal element
Python3 Program to generate all cyclic permutations of number
Function to count the total number of digits in a number .
Function to generate all cyclic permutations of a number
Following three lines generates a circular permutation of a number .
If all the permutations are checked and we obtain original number exit from loop .
Driver Code
Python Program to check if a number is circular prime or not .
Function to check if a number is prime or not .
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to check if the number is circular prime or not .
Count digits .
Following three lines generate the next circular permutation of a number . We move last digit to first position .
If all the permutations are checked and we obtain original number exit from loop .
Driver Program
function to find if any one of them can overtake the other
Since starting points are always different , they will meet if following conditions are met . ( 1 ) Speeds are not same ( 2 ) Difference between speeds divide the total distance between initial points .
driver program
Python3 program to find the largest fraction a / b such that a + b is equal to given number and a < b .
Calculate N / 2 ;
Check if N is odd or even
If N is odd answer will be ceil ( n / 2 ) - 1 and floor ( n / 2 ) + 1
If N is even check if N / 2 i . e a is even or odd
If N / 2 is even apply the previous formula
If N / 2 is odd answer will be ceil ( N / 2 ) - 2 and floor ( N / 2 ) + 2
Driver Code
We can change values here for different inputs
Calculates simple interest
Print the resultant value of SI
function to count number of digits in the product of two numbers
absolute value of the product of two numbers
if product is 0
count number of digits in the product 'p
required count of digits
Driver program to test above
Python3 Program to find closest multiple of x to a ^ b
function to find closest multiple of x to a ^ b
calculate a ^ b / x
Answer is either ( ans * x ) or ( ans + 1 ) * x
Printing nearest answer
Driver Code
To find max sum of permutation
Base case
Otherwise max sum will be ( n * ( n - 1 ) / 2 ) - 1 + n / 2
Driver program to test maxSum ( )
Python 3 code to compute average of two numbers
Function to compute average of two numbers
Driver code
Assigning maximum integer value
Average of two equal numbers is the same number
Function to get the average of 2 numbers
Function to find out minimum number
Count odd number of terms in array
Driver code
Function to check if a number is jumbled or not
Single digit number
Checking every digit through a loop
All digits were checked
Digit at index i
Digit at index i - 1
If difference is greater than 1
Number checked
- 1234 to be checked
- 1247 to be checked
Function to find the position of the Most Significant Bit
keeps shifting bits to the right until we are left with 0
Function to return at which place Josephus should sit to avoid being killed
Getting the position of the Most Significant Bit ( MSB ) . The leftmost '1' . If the number is '41' then its binary is '101001' . So msbPos ( 41 ) = 6
' j ' stores the number with which to XOR the number ' n ' . Since we need '100000' We will do 1 << 6 - 1 to get '100000
Toggling the Most Significant Bit . Changing the leftmost '1' to '0' . 101001 ^ 100000 = 001001 ( 9 )
Left - shifting once to add an extra '0' to the right end of the binary number 001001 = 010010 ( 18 )
Toggling the '0' at the end to '1' which is essentially the same as putting the MSB at the rightmost place . 010010 | 1 = 010011 ( 19 )
Driver Code
A function will return number of pair whose XOR is odd
To store count of XOR pair
If XOR is odd increase count
Return count
Driver Code
Python3 program to calculate discrete logarithm
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
x = x % p ; Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 ; y = y / 2
Function to calculate k for given a , b , m
Store all values of a ^ ( n * i ) of LHS
Calculate ( a ^ j ) * b and check for collision
If collision occurs i . e . , LHS = RHS
Check whether ans lies below m or not
Driver code
Python3 program to calculate discrete logarithm
Calculate a ^ n
Store all values of a ^ ( n * i ) of LHS
Calculate ( a ^ j ) * b and check for collision
Driver code
Python3 program to find n - th number with prime digits 2 , 3 and 7
remainder for check element position
if number is 1 st position in tree
if number is 2 nd position in tree
if number is 3 rd position in tree
if number is 4 th position in tree
Driver code
Python 3 program to count pairs whose sum cubes is N
Function to count the pairs satisfying a ^ 3 + b ^ 3 = N
Check for each number 1 to cbrt ( N )
Store cube of a number
Subtract the cube from given N
Check if the difference is also a perfect cube
If yes , then increment count
Return count
Loop to Count no . of pairs satisfying a ^ 3 + b ^ 3 = i for N = 1 to 10
Calculate prime factors for a given number
Container for prime factors
Iterate from 2 to i ^ 2 finding all factors
If we still have a remainder it is also a prime factor
Calculate occurrence of an element in factorial of a number
Iterate through prime factors
Check if factorial contains less occurrences of prime factor
Function to binary search 1 to N
Prime factors are not in the factorial Increase the lowerbound
We have reached smallest occurrence
Smaller factorial satisfying requirements may exist , decrease upperbound
Calculate prime factors and search
Driver function
Prints all k such that arr [ i ] % k is same for all i
sort the numbers
max difference will be the difference between first and last element of sorted array
Case when all the array elements are same
Find all divisors of d and store in a vector v [ ]
check for each v [ i ] if its modulus with each array element is same or not
checking for each array element if its modulus with k is equal to k or not
if check is true print v [ i ]
Driver Code
Python implementation of finding first digit of product of n numbers
Returns the first digit of product of elements of arr [ ]
stores the logarithm of product of elements of arr [ ]
fractional ( s ) = s - floor ( s )
ans = 10 ^ fract_s
Driver function
Return the number of digits that divides the number .
Fetching each digit of the number
Checking if digit is greater than 0 and can divides n .
Driven Code
Function to find the value
Return 1 if already odd
Check how many times it is divided by 2
Driver code
Function to calculate the smallest multiple
Driver Code
Python3 code for Efficient method to print cubes between a and b
An efficient solution to print perfect cubes between a and b
Find cube root of both a and b
Print cubes between acrt and bcrt
Driver code
Counts the number of '2' digits in a single number
Counts the number of '2' digits between 0 and n
Initialize result
Count 2 's in every number  from 2 to n
Driver code
Function to calculate minimum toggling required by using Dynamic programming
Fill entries in zero [ ] such that zero [ i ] stores count of zeroes to the left of i ( exl
If zero found update zero [ ] array
Finding the minimum toggle required from every index ( 0 to n - 1 )
Driver Program
Function to find that number is divisible by 6 or not
Return false if number is not divisible by 2.
Compute sum of digits
Check if sum of digits is divisible by 3
Driver code
Python 3 program to find number of ways to express a number as sum of n - th powers of numbers .
Wrapper over checkRecursive ( )
Driver Code
A naive approach of Python3 program of finding nth palindrome of k digit
Utility function to reverse the number n
Boolean Function to check for palindromic number
Function for finding nth palindrome of k digits
Get the smallest k digit number
check the number is palindrom or not
if n 'th palindrome found  break the loop
Increment number for checking next palindrome
Driver code
Python3 program of finding nth palindrome of k digit
Determine the first half digits
Print the first half digits of palindrome
If k is odd , truncate the last digit
print the last half digits of palindrome
Driver code
Python3 progrma of simple approach to find maximum value after m range increments .
Function to find the maximum element after m operations
Start performing m operations
Store lower and upper index i . e . range
Add ' k [ i ] ' value at this operation to whole range
Find maximum value after all operations and return
Driver code
Number of values
Value of k to be added at each operation
Python approach of finding sum of GCD of all pairs
phi [ i ] stores euler totient function for i result [ j ] stores result for value j
Precomputation of phi [ ] numbers . Refer below link for details : https : goo . gl / LUqdtY
Refer https : goo . gl / LUqdtY
Precomputes result for all numbers till MAX
Precompute all phi value
Iterate throght all the divisors of i .
Add summation of previous calculated sum
Function to calculate sum of all the GCD pairs
Python3 program to find coordinate of the triangle given midpoint of each side
Return after solving the equations and finding the vertices coordinate .
Finding sum of all three coordinate .
Solving the equation .
Finds vertices of a triangles from given middle vertices .
Find X coordinates of vertices .
Find Y coordinates of vertices .
Output the solution .
Driver code
Return the n - th number in the sorted list of multiples of two numbers .
Generating first n multiple of a .
Sorting the sequence .
Generating and storing first n multiple of b and storing if not present in the sequence .
If not present in the sequence
Storing in the sequence .
Driver Code
Return the GCD of two numbers .
Return the count of pairs having GCD equal to g .
Setting the value of L , R .
For each possible pair check if GCD is 1.
Driver code
Initialize values of last non - zero digit of numbers from 0 to 9
Check whether tens ( or second last ) digit is odd or even If n = 375 , So n / 10 = 37 and ( n / 10 ) % 10 = 7 Applying formula for even and odd cases .
driver code
GCD function to compute the greatest divisor among a and b
Returns first number whose factorial divides x .
i = 1 Result
Remove common factors
We found first i .
Driver code
Sieve of Eratosthenes
Returns maximum occurring digits in primes from l to r .
Finding the prime number up to R .
Initialise frequency of all digit to 0.
For all number between L to R , check if prime or not . If prime , incrementing the frequency of digits present in the prime number .
p = i If i is prime
Finding digit with highest frequency .
Driver Code
Create a global array of size 1001 ;
This functions finds all primes smaller than ' limit ' using simple sieve of eratosthenes .
Initialize all entries of it as True . A value in mark [ p ] will finally be False if ' p ' is Not a prime , else True .
One by one traverse all numbers so that their multiples can be marked as composite .
If p is not changed , then it is a prime
Update all multiples of p
To store the 8 divisors
To count the number of divisor
Finally check if there re 8 divisor and all the numbers are distinct prime no return 1 else return 0 ) ;
Driver code
Python implementation of program
Function to calculate gcd of two numbers
Function to calculate all common divisors of two given numbers a , b -- > input integer numbers
find GCD of a , b
Count divisors of n
if i is a factor of n
check if divisors are equal
Driver program to run the case
Function to calculate all possible spells of a number with repeated digits num -- > string which is favourite number
final count of total possible spells
iterate through complete number
count contiguous frequency of particular digit num [ i ]
Compute 2 ^ ( count - 1 ) and multiply with result
Driver Code
Utility method to return sum of square of digit of n
method return true if n is Happy number
initialize slow and fast by n
move slow number by one iteration
move fast number by two iteration
if both number meet at 1 , then return true
Driver Code
allPrimes [ ] stores all prime numbers less than or equal to n .
Fills above vector allPrimes [ ] for a given n
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is not a prime , else true .
Loop to update prime [ ]
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Store primes in the vector allPrimes
Function to find all result of factorial number
Initialize result
find exponents of all primes which divides n and less than n
Current divisor
Find the highest power ( stored in exp ) ' ▁ ▁ of ▁ allPrimes [ i ] ▁ that ▁ divides ▁ n ▁ using ▁ ▁ Legendre ' s formula .
Multiply exponents of all primes less than n
return total divisors
Driver Code
Returns n 'th Non-Fibonacci number
curr is to keep track of current fibonacci number , prev is previous , prevPrev is previous of previous .
While count of non - fibonacci numbers doesn 't become  negative or zero
Simple Fibonacci number logic
( curr - prev - 1 ) is count of non - Fibonacci numbers between curr and prev .
n might be negative now . Make sure it becomes positive by removing last added gap .
Now add the positive n to previous Fibonacci number to find the n 'th non-fibonacci.
Driver code
Function to implement Stein 's Algorithm
GCD ( 0 , b ) == b ; GCD ( a , 0 ) == a , GCD ( 0 , 0 ) == 0
Finding K , where K is the greatest power of 2 that divides both a and b .
Dividing a by 2 until a becomes odd
From here on , ' a ' is always odd .
If b is even , remove all factor of 2 in b
Now a and b are both odd . Swap if necessary so a <= b , then set b = b - a ( which is even ) .
restore common factors of 2
Driver code
n -- > value of input out -- > output array index -- > index of next digit to be filled in output array evenSum , oddSum -- > sum of even and odd digits so far
Base case
If number becomes n - digit
if absolute difference between sum of even and odd digits is 1 , print the number
If current index is odd , then add it to odd sum and recurse
else : else add to even sum and recurse
This is mainly a wrapper over findNDigitNumsUtil . It explicitly handles leading digit and calls findNDigitNumsUtil ( ) for remaining indexes .
output array to store n - digit numbers
Initialize number index considered so far
Initialize even and odd sums
Explicitly handle first digit and call recursive function findNDigitNumsUtil for remaining indexes . Note that the first digit is considered to be present in even position .
Driver Code
strings at index 0 is not used , it is to make array indexing simple
strings at index 0 and 1 are not used , they is to make array indexing simple
n is 1 - or 2 - digit number
if n is more than 19 , divide it
if n is non - zero
Function to print a given number in words
stores word representation of given number n
handles digits at ten millions and hundred millions places ( if any )
handles digits at hundred thousands and one millions places ( if any )
handles digits at thousands and tens thousands places ( if any )
handles digit at hundreds places ( if any )
handles digits at ones and tens places ( if any )
long handles upto 9 digit no change to unsigned long long int to handle more digit number
convert given number in words
Python 3 program to count number of sub - arrays with even sum using an efficient algorithm Time Complexity - O ( N ) Space Complexity - O ( 1 )
result may be large enough not to fit in int ;
to keep track of subarrays with even sum starting from index i
if a [ i ] is odd then all subarrays starting from index i + 1 which was odd becomes even when a [ i ] gets added to it .
if a [ i ] is even then all subarrays starting from index i + 1 which was even remains even and one extra a [ i ] even subarray gets added to it .
Driver code
Python 3 program to check for solutions of diophantine equations
This function checks if integral solutions are possible
Driver Code
First example
Second example
Third example
Efficient Python3 program to print Farey Sequence of order n
Optimized function to print Farey sequence of order n
We know first two terms are 0 / 1 and 1 / n
For next terms to be evaluated
Using recurrence relation to find the next term
Print next term
Update x1 , y1 , x2 and y2 for next iteration
Driver Code
To find GCD using Eculcid 's algorithm
Prints smallest values of x and y that satisfy " ax ▁ - ▁ by ▁ = ▁ 0"
Find LCM
Driver code
Utility function to do modular exponentiation . It returns ( x ^ y ) % p
res = 1 ; Initialize result x = x % p ; Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 ; y = y / 2
Function to find modular inverse of a under modulo p using Fermat 's method. Assumption: p is prime
Returns n ! % p using Wilson 's Theorem
n ! % p is 0 if n >= p
Initialize result as ( p - 1 ) ! which is - 1 or ( p - 1 )
Multiply modulo inverse of all numbers from ( n + 1 ) to p
Driver code
Returns count of ways
Generate all possible quadruplet and increment counter when sum of a quadruplet is equal to n
Driver Code
Returns value of " arr [ 0 ] ▁ & ▁ arr [ 1 ] ▁ + ▁ arr [ 0 ] ▁ & ▁ arr [ 2 ] ▁ + ▁ . . . ▁ arr [ i ] ▁ & ▁ arr [ j ] ▁ + ▁ . . . . . ▁ arr [ n - 2 ] ▁ & ▁ arr [ n - 1 ] "
Consider all pairs ( arr [ i ] , arr [ j ) such that i < j
Driver program to test above function
Returns value of " arr [ 0 ] ▁ & ▁ arr [ 1 ] ▁ + ▁ arr [ 0 ] ▁ & ▁ arr [ 2 ] ▁ + ▁ . . . ▁ arr [ i ] ▁ & ▁ arr [ j ] ▁ + ▁ . . . . . ▁ arr [ n - 2 ] ▁ & ▁ arr [ n - 1 ] "
Traverse over all bits
Count number of elements with i 'th bit set  Initialize the count
There are k set bits , means k ( k - 1 ) / 2 pairs . Every pair adds 2 ^ i to the answer . Therefore , we add "2 ^ i ▁ * ▁ [ k * ( k - 1 ) / 2 ] " to the answer .
Driver program to test above function
A school method based Python3 program to check if a number is prime
Corner case
Check from 2 to n - 1
Driver Program to test above function
Computes and prints totient of all numbers smaller than or equal to n .
Create and initialize an array to store phi or totient values
Compute other Phi values
If phi [ p ] is not computed already , then number p is prime
Phi of a prime number p is always equal to p - 1.
Update phi values of all multiples of p
Add contribution of p to its multiple i by multiplying with ( 1 - 1 / p )
Print precomputed phi values
Driver code
python program for the above approach
Driver code
Python3 program to check if a given number can be expressed as power
Returns true if n can be written as x ^ y
Driver code
Returns sum between two kth smallest element of array
Sort the given array
Below code is equivalent to
Driver code
Function to return count of squares ;
better way to write n * ( n + 1 ) * ( 2 n + 1 ) / 6
Driver code
Function to find nth magic number
Go through every bit of n
If last bit of n is set
proceed to next bit n >>= 1 or n = n / 2
Driver program to test above function
python program to find count of multiples of 3 and 5 in { 1 , 2 , 3 , . . n }
Add multiples of 3 and 5. Since common multiples are counted twice in n / 3 + n / 15 , subtract common multiples
Driver program to test above function
Recursive function to return gcd of a and b
Everything divides 0
base case
a is greater
Driver program to test above function
Function to calculate the XOR sum of all ANDS of all pairs on A [ ] and B [ ]
variable to store xor sums of first array and second array respectively .
Xor sum of first array
Xor sum of second array
required answer
Driver code
Input
Function call
Structure of a node in the binary tree
Function to find total unique levels
Stores count of levels , where the set bits of all the nodes are at different positions
Store nodes at each level of the tree using BFS
Performing level order traversal
Stores count of nodes at current level
Stores prefix XOR of all the nodes at current level
Stores prefix OR of all the nodes at current level
Check if set bit of all the nodes at current level is at different positions or not
Traverse nodes at current level
Stores front element of the que
Update prefix_OR
Update prefix_XOR
If left subtree not NULL
If right subtree not NULL
If bitwise AND is zero
Driver Code
Function Call
Python 3 implementation of above approach
Driver Code
decreasing value by 1 because we want min heapifying k times and it starts from 0 so we have to decrease it 1 time
Step 1 : Do extract minimum k1 times ( This step takes O ( K1 Log n ) time )
Step 2 : Do extract minimum k2 k1 1 times and sum all extracted elements . ( This step takes O ( ( K2 k1 ) * Log n ) time )
Function to return required list after performing all the queries
Store cumulative Bitwise XOR
Initialize final list to return
Perform each query
The initial value of 0
Sort the list
Return final list
Given Queries
Function call
Function to convert bit array to decimal number
Function to find maximum values of each bitwise OR operation on element of subarray of size K
Maintain an integer array bit of size 32 all initialized to 0
Create a sliding window of size k
Function call
Perform operation for removed element
Perform operation for added_element
Taking maximum value
Return the result
Driver Code
Given array arr
Given subarray size K
Function call
Binary tree node
Function to create a new node
Function calculate the value of max - xor
Updating the xor value with the xor of the path from root to the node
Check if node is leaf node
Check if the left node exist in the tree
Check if the right node exist in the tree
Function to find the required count
Recursively traverse the tree and compute the max_xor
Return the result
Create the binary tree
Function to construct new array
Traverse the array and compute XOR with K
Print new array
Driver code
Function to calculate bitwise AND
Initialise ans variable is arr [ 0 ]
Traverse the array compute AND
Return ans
Driver Code
Function Call to find AND
Python3 implementation of the above approach
Maximum size for xor tree
Allocating space to xor tree
A recursive function that constructs xor tree for vector array [ start ... . . end ] . x is index of current node in XOR tree
If there is one element in vector array , store it in current node of XOR tree
cout << xor_tree [ x ] << " ▁ x "
for left subtree
for right subtree
for getting the middle index from corner indexes .
Build the left and the right subtrees by xor operation
merge the left and right subtrees by XOR operation
Function to construct XOR tree from the given vector array . This function calls construct_Xor_Tree_Util ( ) to fill the allocated memory of xor_tree vector array
Driver Code
leaf nodes of Perfect Binary Tree
Build the xor tree
Height of xor tree
Maximum size of xor tree
Root node is at index 0 considering 0 - based indexing in XOR Tree
prevalue at root node
Function to return the count
Flipping zeros at distance " d "
Function to implement binary search
Check for valid distance i . e mid
Driver code
Function to return the maximum possible xor
To store the final answer
Borward traversal
Backward traversal
Driver Code
Function to return the minimum count of trees required
To store the count of set bits in n
Driver code
Function to count the minimum number of steps
bin ( K ) . count ( "1" ) is a Python3 function to count the number of set bits in a number
Driver Code
Function that returns true if the game cannot be won
Driver code
Common length
Python 3 implementation of the above approach
Boolean function that returns true or false
Traverse for all elements
If both are not equal
Change the parity of all corner elements
Check if A is equal to B
Not equal
Driver Code
First binary matrix
Second binary matrix
Function that returns the Kth set bit
Traverse in the binary
Check if the last bit is set or not
Check if count is equal to k then return the index
Increase the index as we move right
Right shift the number by 1
Driver Code
Function to check
Converting integer to its equivalent binary number
If adjacent character are same then increase counter
Driver code
Python 3 program to find minimum distance between two nodes in binary tree
Function to get minimum path distance
find the 1 st dis - similar bit count bit length of n1 and n2
find bit difference and maxBit
calculate result by formula
Driver Code
Function to find the maximum binary number
Traverse the binary number
Try finding a 0 and skip it
Driver code
Get the binary number
Find the maximum binary number
Python3 program to Find the leftmost position of first dis - similar bit
Function to find first dis - similar bit
return zero for equal number
find the 1 st dis - similar bit count bit length of n1 and n
find bit difference and maxBit
Driver code
Function to count pairs with odd OR
Count total even numbers in array
Even pair count
Total pairs
Return Odd pair count
Driver Code
Python3 program to update every array element with sum of previous and next numbers in array
Nothing to do when array size is 1
store current value of arr [ 0 ] and update it
Update rest of the array elements
Store current value of next interaction
Update current value using previous value
Update previous value
Update last array element separately
Driver Code
Print the modified array
Python3 program to find triplet with maximum bitwise AND .
Flag Array initially set to true for all numbers
2D array for bit representation of all the numbers . Initially all bits are set to 0.
Finding bit representation of every number and storing it in bits array .
Checking last bit of the number
Dividing number by 2.
maximum And number initially 0.
Traversing the 2d binary representation . 0 th index represents 32 th bits while 32 th index represents 0 th bit .
If cnt greater than 3 then ( 32 - i ) th bits of the number will be set .
Setting flags of the numbers whose ith bit is not set .
Counting the numbers whose flag are true .
Driver Code
function to return OR of sub - arrays
Driver Code
print OR of all subarrays
Function to count total number of set bits in an integer
Maximum sum of set bits
Calculate total number of set bits for every element of the array
find total set bits for each number and store back into the array
current max excluding i
current max including i
return max of incl and excl
Driver code
function that increment the value .
Invert bits and apply negative sign
Driver code
Function to count number of odd pairs
find all pairs
return number of odd pair
Driver Code
calling function findOddPair and print number of odd pair
Returns the Most Significant Bit Position ( MSB )
Returns the Bitwise OR of all integers between L and R
Find the MSB position in L
Find the MSB position in R
Add this value until msb_p1 and msb_p2 are same ;
Calculate msb_p1 and msb_p2
Find the max of msb_p1 and msb_p2
Set all the bits from msb_p1 upto 0 th bit in the result
Driver Code
Function to maximize the bitwise OR sum
Compute x ^ k
Find prefix bitwise OR
Find suffix bitwise OR
Find maximum OR value
Drivers code
Returns a number that has all bits same as n except the k 'th bit which is made 1
k must be greater than 0
Do | of n with a number with all unset bits except the k 'th bit
Driver program to test above function
Returns sum of two numbers formed from all digits in a [ ]
sorted the elements
Driver code
Python 3 program to find k - th bit from right
Driver Code
Function Call
Python3 code to find maximum subtree such that all nodes are even in weight
Structure for Edge
' id ' : stores parent of a node . ' sz ' : stores size of a DSU tree .
Function to assign root
Function to find Union
Utility function for Union
Edge between ' u ' and 'v
0 - indexed nodes
If weights of both ' u ' and ' v ' are even then we make union of them .
Function to find maximum size of DSU tree
Driver code
Weights of nodes
Number of nodes in a tree
Initializing every node as a tree with single node .
Find maximum size of DSU tree .
Function to get no of set bits in binary representation of positive integer n
Count number of 1 's in binary  representation of n.
Number of odd numbers in n - th row is 2 raised to power the count .
Driver Program
Python 3 Program to answer queries on XOR of XORs of all subarray
Output for each query
If number of element is even .
If number of element is odd .
if l is even
if l is odd
Wrapper Function
Evaluating prefixodd and prefixeven
Driver Code
Function to return final grundy Number ( G ) of game
if pile size is odd
We XOR pile size + 1
if pile size is even
We XOR pile size - 1
Game with 3 piles
pile with different sizes
Function to return result of game
if ( res == 0 ) : if G is zero
else : if G is non zero
Utility function to check number of elements having set msb as of pattern
Function for finding maximum and value pair
iterate over total of 30 bits from msb to lsb
find the count of element having set msb
if count >= 2 set particular bit in result
Driver function
Function to count minimum number of flips
This is converting string s into integer of base 2 ( if s = '100' then num = 4 )
Initialize minXor with n that can be maximum number of flips
Right shift 1 by ( n - 1 ) bits
Calculate bitwise XOR of num and mask
Math . min ( a , b ) returns minimum of a and b return minimum number of flips till that digit
Function to count number of 1 s
Driver code
Python3 program to check if a number is power of 8
function to check if power of 8
calculate log8 ( n )
check if i is an integer or not
Driver Code
utility function which is used to convert binary string into integer
convert binary string into integer
function to find nth binary palindrome number
stores the binary palindrome string
base case
add 2 nd binary palindrome string
runs till the nth binary palindrome number
remove curr binary palindrome string from queue
if n == 0 then we find the n 'th binary  palindrome so we return our answer
calculate length of curr binary palindrome string
if length is even . so it is our first case we have two choices
if length is odd . so it is our second case we have only one choice
Driver code
Function Call
An efficient Python3 program to check if binary representations of a number and it 's complement are anagram.
Returns true if binary representations of a and b are anagram .
_popcnt64 ( a ) gives number of 1 's present  in binary representation of a. If number  of 1s is half of total bits, return true.
Driver Code
To calculate sum of numbers
Find numbers whose 2 bits are set
If number is greater then n we don 't include this in sum
Return sum of numbers
Driver Code
Python3 implementation to find the position of rightmost different bit in two number .
Function to find rightmost different bit in two numbers .
Driver code
function to set the kth bit
kth bit of n is being set by this operation
Driver code
Function to reverse array
Trick to assign - 1 to a variable
Reverse array in simple manner
Swap ith index value with ( n - i - 1 ) th index value
Driver code
print the reversed array
Function to reverse array
Reverse array in simple manner
Swap ith index value with ( n - i - 1 ) th index value Note : A - B = A + ~ B + 1 So n - i = n + ~ i + 1 then n - i - 1 = ( n + ~ i + 1 ) + ~ 1 + 1
Driver code
print the reversed array
Method to get maximum xor value in range [ L , R ]
get xor of limits
loop to get msb position of L ^ R
construct result by adding 1 , msbPos times
Driver code
Function to find total 0 bit in a number
Function to find Count of non - negative numbers less than or equal to N , whose bitwise OR and SUM with N are equal .
count number of zero bit in N
power of 2 to count
Driver code
Python program to count numbers whose XOR with n produces a value more than n .
Position of current bit in n
Traverse bits from LSB to MSB
Initialize result
If current bit is 0 , then there are 2 ^ k numbers with current bit 1 and whose XOR with n produces greater value
Increase position for next bit
Reduce n to find next bit
Driver code
Returns count of pairs in arr [ 0. . n - 1 ] with XOR value equals to x .
create empty set that stores the visiting element of array .
If there exist an element in set s with XOR equals to x ^ arr [ i ] , that means there exist an element such that the XOR of element with arr [ i ] is equal to x , then increment count .
Make element visited
return total count of pairs with XOR equal to x
Driver Code
Returns true if n is a multiple of 4.
Find XOR of all numbers from 1 to n
If XOR is equal n , then return true
Printing multiples of 4 using above method
To create a newNode of tree and return pointer
Utility function to calculate sum of all node of tree
Recursive function to calculate sum of left boundary elements
If leaf node , then just return its key value
If left is available then go left otherwise go right
Recursive function to calculate sum of right boundary elements
If leaf node , then just return its key value
If right is available then go right otherwise go left
Returns sum of uncovered elements
Initializing with 0 in case we don 't have left or right boundary 
returning sum of root node , left boundary and right boundary
Returns true if sum of covered and uncovered elements is same .
Sum of uncovered elements
Sum of all elements
Check if sum of covered and uncovered is same
Helper function to prinorder traversal of binary tree
Driver Code
Making above given diagram 's   binary tree 
An efficient Python 3 program to check Bleak Number
Function to get no of set bits in binary representation of passed binary no .
A function to return ceiling of log x in base 2. For example , it returns 3 for 8 and 4 for 9.
Returns true if n is Bleak
Check for all numbers ' x ' smaller than n . If x + countSetBits ( x ) becomes n , then n can 't be Bleak
Driver code
Returns count of n length binary strings with consecutive 1 's
Count binary strings without consecutive 1 's.  See the approach discussed on be  ( http:goo.gl/p8A3sW )
Subtract a [ n - 1 ] + b [ n - 1 ] from 2 ^ n
Driver code
Python code for swapping given bits of a number
left - shift 1 p1 and p2 times and using XOR
Driver Code
Function to return the maximum length of the required sub - array
To store the maximum length for a valid subarray
To store the count of contiguous similar elements for previous group and the current group
If current element is equal to the previous element then it is a part of the same group
Else update the previous group and start counting elements for the new group
Update the maximum possible length for a group
Return the maximum length of the valid subarray
Driver code
Python3 program to solve Traveling Salesman Problem using Branch and Bound .
final_path [ ] stores the final solution i . e . the path of the salesman .
visited [ ] keeps track of the already visited nodes in a particular path
Stores the final minimum weight of shortest tour .
Function to copy temporary solution to the final solution
Function to find the minimum edge cost having an end at the vertex i
function to find the second minimum edge cost having an end at the vertex i
function that takes as arguments : curr_bound -> lower bound of the root node curr_weight -> stores the weight of the path so far level -> current level while moving in the search space tree curr_path [ ] -> where the solution is being stored which would later be copied to final_path [ ]
base case is when we have reached level N which means we have covered all the nodes once
check if there is an edge from last vertex in path back to the first vertex
curr_res has the total weight of the solution we got
Update final result and final path if current result is better .
for any other level iterate for all vertices to build the search space tree recursively
Consider next vertex if it is not same ( diagonal entry in adjacency matrix and not visited already )
different computation of curr_bound for level 2 from the other levels
curr_bound + curr_weight is the actual lower bound for the node that we have arrived on . If current lower bound < final_res , we need to explore the node further
call TSPRec for the next level
Else we have to prune the node by resetting all changes to curr_weight and curr_bound
Also reset the visited array
This function sets up final_path
Calculate initial lower bound for the root node using the formula 1 / 2 * ( sum of first min + second min ) for all edges . Also initialize the curr_path and visited array
Compute initial bound
Rounding off the lower bound to an integer
We start at vertex 1 so the first vertex in curr_path [ ] is 0
Call to TSPRec for curr_weight equal to 0 and level 1
Adjacency matrix for the given graph
A Binary Tree Node
Recursive function to check if two Nodes are siblings
Base Case
Recursive function to find level of Node ' ptr ' in a binary tree
Base Case
Return level if Node is present in left subtree
Else search in right subtree
Returns 1 if a and b are cousins , otherwise 0
1. The two nodes should be on the same level in the binary tree The two nodes should not be siblings ( means that they should not have the smae parent node
Driver program to test above function
A binary tree node
Recursive function which check whether all leaves are at same level
Base Case
If a tree node is encountered
When a leaf node is found first time
Set first leaf found
If this is not first leaf node , compare its level with first leaf 's level
If this is not first leaf node , compare its level with first leaf 's level
The main function to check if all leafs are at same level . It mainly uses checkUtil ( )
Let us create the tree as shown in the example
Python3 program to find number of siblings of a given node
Represents a node of an n - ary tree
Function to calculate number of siblings of a given node
Creating a queue and pushing the root
Dequeue an item from queue and check if it is equal to x If YES , then return number of children
Enqueue all children of the dequeued item
If the value of children is equal to x , then return the number of siblings
Driver Code
Creating a generic tree as shown in above figure
Node whose number of siblings is to be calculated
Function calling
Python3 program to check if all leaf nodes are at same level of binary tree
Tree Node returns a new tree Node
return true if all leaf nodes are at same level , else false
create a queue for level order traversal
traverse until the queue is empty
traverse for complete level
check for left child
if its leaf node
if it 's first leaf node,  then update result
if it 's not first leaf node,  then compare the level with  level of previous leaf node
check for right child
if it 's leaf node
if it 's first leaf node till now,  then update the result
if it is not the first leaf node , then compare the level with level of previous leaf node
Driver Code
construct a tree
Python3 program to implement sorting a queue data structure
Queue elements after sortedIndex are already sorted . This function returns index of minimum element from front to sortedIndex
This is dequeue ( ) in C ++ STL
we add the condition i <= sortedIndex because we don 't want to traverse   on the sorted part of the queue,   which is the right part. 
This is enqueue ( ) in C ++ STL
Moves given minimum element to rear of queue
SortQueue Function
Driver code
Sort queue
Prsorted queue
Python3 program to check if there exist an edge whose removal creates two trees of same size utility function to create a new node
To calculate size of tree with given root
This function returns true if there is an edge whose removal can divide the tree in two halves n is size of tree
Base cases
Check for root
Check for rest of the nodes
This function mainly uses checkRec ( )
Count total nodes in given tree
Now recursively check all nodes
Driver code
Python program to find the maximum for each and every contiguous subarray of size k
A Deque ( Double ended queue ) based method for printing maximum element of all subarrays of size k
Create a Double Ended Queue , Qi that will store indexes of array elements . The queue will store indexes of useful elements in every window and it will maintain decreasing order of values from front to rear in Qi , i . e . , arr [ Qi . front [ ] ] to arr [ Qi . rear ( ) ] are sorted in decreasing order
Process first k ( or first window ) elements of array
For every element , the previous smaller elements are useless so remove them from Qi
Remove from rear
Add new element at rear of queue
Process rest of the elements , i . e . from arr [ k ] to arr [ n - 1 ]
The element at the front of the queue is the largest element of previous window , so print it
Remove the elements which are out of this window
remove from front of deque
Remove all elements smaller than the currently being added element ( Remove useless elements )
Add current element at the rear of Qi
Print the maximum element of last window
Driver code
Python3 program to find Sum of all minimum and maximum elements Of Sub - array Size k .
Returns Sum of min and max element of all subarrays of size k
Initialize result
The queue will store indexes of useful elements in every window In deque ' G ' we maintain decreasing order of values from front to rear In deque ' S ' we maintain increasing order of values from front to rear
Process first window of size K
Remove all previous greater elements that are useless .
Remove from rear
Remove all previous smaller that are elements are useless .
Remove from rear
Add current element at rear of both deque
Process rest of the Array elements
Element at the front of the deque ' G ' & ' S ' is the largest and smallest element of previous window respectively
Remove all elements which are out of this window
remove all previous greater element that are useless
Remove from rear
remove all previous smaller that are elements are useless
Remove from rear
Add current element at rear of both deque
Sum of minimum and maximum element of last window
Driver program to test above functions
Python3 program to check if there exist an edge whose removal creates two trees of same size
To calculate size of tree with given root
This function returns size of tree rooted with given root . It also set " res " as true if there is an edge whose removal divides tree in two halves . n is size of tree
Base case
Compute sizes of left and right children
If required property is true for current node set " res " as true
Return size
This function mainly uses checkRec ( )
Count total nodes in given tree
Initialize result and recursively check all nodes bool res = false ;
Driver code
Prthe distance of nearest cell having 1 for each cell .
Initialize the answer matrix with INT_MAX .
For each cell
Traversing the whole matrix to find the minimum distance .
If cell contain 1 , check for minimum distance .
Printing the answer .
Driver Code
Python3 program to find distance of nearest cell having 1 in a binary matrix .
Making a class of graph with bfs function .
Function to create graph with N * M nodes considering each cell as a node and each boundary as an edge .
A number to be assigned to a cell
If last row , then add edge on right side .
If not bottom right cell .
If last column , then add edge toward down .
Else makes an edge in all four directions .
BFS function to find minimum distance
Printing the solution .
Find minimum distance
Creating a graph with nodes values assigned from 1 to N x M and matrix adjacent .
To store minimum distance
To mark each node as visited or not in BFS
Initialising the value of distance and visit .
Inserting nodes whose value in matrix is 1 in the queue .
Calling for Bfs with given Queue .
Printing the solution .
Driver code
Function to find the first negative integer in every window of size k
Loop for each subarray ( window ) of size k
Traverse through the current window
If a negative integer is found , then it is the first negative integer for current window . Print it , set the flag and break
If the current window does not contain a negative integer
Driver Code
Python3 implementation to find the first negative integer in every window of size k import deque ( ) from collections
function to find the first negative integer in every window of size k
A Double Ended Queue , Di that will store indexes of useful array elements for the current window of size k . The useful elements are all negative integers .
Process first k ( or first window ) elements of array
Add current element at the rear of Di if it is a negative integer
Process rest of the elements , i . e . , from arr [ k ] to arr [ n - 1 ]
if the window does not have a negative integer
if Di is not empty then the element at the front of the queue is the first negative integer of the previous window
Remove the elements which are out of this window
Remove from front of queue
Add current element at the rear of Di if it is a negative integer
Print the first negative integer of last window
Driver Code
Python3 code for First negative integer in every window of size k
skip out of window and positive elements
check if a negative element is found , otherwise use 0
Driver code
Returns true if trees with root1 and root2 are level by level anagram , else returns false .
Base Cases
start level order traversal of two trees using two queues .
n1 ( queue size ) indicates number of Nodes at current level in first tree and n2 indicates number of nodes in current level of second tree .
If n1 and n2 are different
If level order traversal is over
Dequeue all Nodes of current level and Enqueue all Nodes of next level
Check if nodes of current levels are anagrams or not .
Utility function to create a new tree Node
Driver Code
Constructing both the trees .
Python3 program to check if all three given traversals are of the same tree
A Binary Tree Node
Function to find index of value in arr [ start ... end ] . The function assumes that value is present in in
Recursive function to construct binary tree of size lenn from Inorder traversal in and Preorder traversal pre [ ] . Initial values of inStrt and inEnd should be 0 and lenn - 1. The function doesn 't do any error checking for cases where inorder and preorder do not form a tree
Pick current node from Preorder traversal using preIndex and increment preIndex
If this node has no children then return
Else find the index of this node in Inorder traversal
Using index in Inorder traversal , construct left and right subtress
function to compare Postorder traversal on constructed tree and given Postorder
first recur on left child
now recur on right child
Compare if data at current index in both Postorder traversals are same
Driver code
build tree from given Inorder and Preorder traversals
compare postorder traversal on constructed tree with given Postorder traversal
If both postorder traversals are same
Function to check if every person will get the change from X
To count the 5 $ and 10 & notes
Serve the customer in order
Increase the number of 5 $ note by one
decrease the number of note 5 $ and increase 10 $ note by one
decrease 5 $ and 10 $ note by one
decrease 5 $ note by three
queue of customers with available notes .
Calling function
Python3 program to implement direct index mapping with negative values allowed .
Since array is global , it is initialized as 0.
Searching if X is Present in the given array or not .
if X is negative take the absolute value of X .
Driver code
Since array is global , it is initialized as 0.
Returns true if given level order traversal is Min Heap .
First non leaf node is at index ( n / 2 - 1 ) . Check whether each parent is greater than child
Left child will be at index 2 * i + 1 Right child will be at index 2 * i + 2
If parent is greater than right child
Driver code
Function to get minimum number of elements to be deleted from array to make array elements equal
Create an dictionary and store frequencies of all array elements in it using element as key and frequency as value
Find maximum frequency among all frequencies .
To minimize delete operations , we remove all elements but the most frequent element .
Driver code
Python3 program to find the minimum number of operations required to make all elements of array equal
Function for min operation
Insert all elements in hash .
find the max frequency
return result
Driver Code
Function to find maximum distance between equal elements
Used to store element to first index mapping
Traverse elements and find maximum distance between same occurrences with the help of map .
If this is first occurrence of element , insert its index in map
Else update max distance
Driver Program
Python 3 program to Check if a given array contains duplicate elements within k distance from each other
Creates an empty list
Traverse the input array
If already present n hash , then we found a duplicate within k distance
Add this item to hashset
Remove the k + 1 distant item
Driver Code
Function to find the Duplicates , if duplicate occurs 2 times or more than 2 times in array so , it will print duplicate value only once at output
Initialize ifPresent as false
ArrayList to store the output
Checking if element is present in the ArrayList or not if present then break
If element is not present in the ArrayList then add it to ArrayList and make ifPresent at true
If duplicates is present then print ArrayList
Driver Code
Binary Tree node
checks if a given node is leaf or not .
Returns true of leaf traversal of two trees is same , else false
Create empty stacks . These stacks are going to be used for iterative traversals .
Loop until either of two stacks is not empty
If one of the stacks is empty means other stack has extra leaves so return false
append right and left children of temp1 . Note that right child is inserted before left
same for tree2
If one is None and other is not , then return false
If both are not None and data is not same return false
If control reaches this point , all leaves are matched
Driver Code
Let us create trees in above example 1
Python3 program to find the most frequent element in an array .
Sort the array
find the max frequency using linear traversal
If last element is most frequent
Driver Code
Python3 program to find the most frequent element in an array .
Insert all elements in Hash .
find the max frequency
Driver Code
Python3 implementation to find smallest subarray with all occurrences of a most frequent element
To store left most occurrence of elements
To store counts of elements
To store maximum frequency
To store length and starting index of smallest result window
First occurrence of an element , store the index
increase the frequency of elements
Find maximum repeated element and store its last occurrence and first occurrence
length of subsegment
select subsegment of smallest size
Print the subsegment with all occurrences of a most frequent element
Driver code
Print all pairs that have a symmetric counterpart
Creates an empty hashMap hM
Traverse through the given array
First and second elements of current pair
If found and value in hash matches with first element of this pair , we found symmetry
Else put sec element of this pair in hash
Driver Code
Python 3 program to find one of the repeating elements in a read only array
Function to find one of the repeating elements
Size of blocks except the last block is sq
Number of blocks to incorporate 1 to n values blocks are numbered from 0 to range - 1 ( both included )
Count array maintains the count for all blocks
Traversing the read only array and updating count
arr [ i ] belongs to block number ( arr [ i ] - 1 ) / sq i is considered to start from 0
The selected_block is set to last block by default . Rest of the blocks are checked
after finding block with size > sq method of hashing is used to find the element repeating in this block
checks if the element belongs to the selected_block
repeating element found
return - 1 if no repeating element exists
Driver Code
read only array , not to be modified
array of size 6 ( n + 1 ) having elements between 1 and 5
A simple method to group all occurrences of individual elements
Initialize all elements as not visited
Traverse all elements
Check if this is first occurrence
If yes , print it and all subsequent occurrences
Driver Code
A hashing based method to group all occurrences of individual elements
Creates an empty hashmap
Traverse the array elements , and store count for every element in HashMap
Increment count of elements in HashMap
Traverse array again
Check if this is first occurrence
If yes , then print the element ' count ' times
And remove the element from HashMap .
Driver Code
Returns true if set1 [ ] and set2 [ ] are disjoint , else false
Take every element of set1 [ ] and search it in set2
If no element of set1 is present in set2
Driver program
Returns true if set1 [ ] and set2 [ ] are disjoint , else false
Sort the given two sets
Check for same elements using merge like process
if set1 [ i ] == set2 [ j ]
Driver Code
This function prints all distinct elements
Creates an empty hashset
Traverse the first set and store its elements in hash
Traverse the second set and check if any element of it is already in hash or not .
Driver method to test above method
Python3 program to find Non - overlapping sum
Function for calculating Non - overlapping sum of two array
Insert elements of both arrays
calculate non - overlapped sum
Driver code
size of array
Function call
Function for finding elements which are there in a [ ] but not in b [ ] .
Driver code
Function for finding elements which are there in a [ ] but not in b [ ] .
Store all elements of second array in a hash table
Print all elements of first array that are not present in hash table
Driver code
Returns true if arr1 [ 0. . n - 1 ] and arr2 [ 0. . m - 1 ] contain same elements .
If lengths of array are not equal means array are not equal
Sort both arrays
Linearly compare elements
If all elements were same .
Driver Code
function to find maximum shortest distance
stores the shortest distance of every element in original array .
shortest distance from ends
if duplicates are found , b [ x ] is replaced with minimum of the previous and current position 's  shortest distance
similar elements ignore them cause we need distinct elements
Driver code
Returns true if there is a pair in arr [ 0. . n - 1 ] with product equal to x
Consider all possible pairs and check for every pair .
Driver code
Returns true if there is a pair in arr [ 0. . n - 1 ] with product equal to x .
Create an empty set and insert first element into it
Traverse remaining elements
0 case must be handles explicitly as x % 0 is undefined behaviour in C ++
x / arr [ i ] exists in hash , then we found a pair
Insert arr [ i ]
Driver code
Returns depth of leftmost leaf .
This function tests if a binary treeis perfect or not . It basically checks for two things : 1 ) All leaves are at same level 2 ) All internal nodes have two children
An empty tree is perfect
If leaf node , then its depth must be same as depth of all other leaves .
If internal node and one child is empty
Left and right subtrees must be perfect .
Wrapper over isPerfectRec ( )
Helper class that allocates a new node with the given key and None left and right pointer .
Driver Code
Function to find greatest number
Driver code
Python3 program to find the largest product number
Function to find greatest number
Store occurrences of all elements in hash array
Sort the array and traverse all elements from end .
For every element , check if there is another element which divides it .
Check if the result value exists in array or not if yes the return arr [ i ]
To handle the case like arr [ i ] = 4 and arr [ j ] = 2
Drivers code
To find no elements to remove so no common element exist
To store count of array element
Count elements of a
Count elements of b
Traverse through all common element , and pick minimum occurrence from two arrays
To return count of minimum elements
Driver Code
function to count items common to both the lists but with different prices
for each item of ' list1' check if it is in ' list2' but with a different price
required count of items
Driver program to test above
Function to print common strings with minimum index sum
resultant list
iterating over sum in ascending order
iterating over one list and check index ( Corresponding to given sum ) in other list
put common strings in resultant list
if common string found then break as we are considering index sums in increasing order .
print the resultant list
Creating list1
Creating list2
Hashing based Python3 program to find common elements with minimum index sum
Function to print common strings with minimum index sum
Mapping strings to their indices
Resultant list
If current sum is smaller than minsum
If index sum is same then put this string in resultant list as well
Print result
Creating list1
Creating list2
Constructor of the node class for creating the node
Checks if the binary tree is full or not
If empty tree
If leaf node
If both left and right subtress are not None and left and right subtress are full
We reach here when none of the above if condiitions work
Driver Program
Python3 code to make a permutation of numbers from 1 to n using minimum changes .
Store counts of all elements .
Find next missing element to put in place of current element .
Replace with next missing and insert the missing element in hash .
Driver Code
Returns number of pairs in arr [ 0. . n - 1 ] with sum equal to sum
Initialize result
Consider all possible pairs and check their sums
Driver function
node class
put in the data
function to check whether a binary tree is a full binary tree or not
if tree is empty
queue used for level order traversal
append ' root ' to ' q '
traverse all the nodes of the binary tree level by level until queue is empty
get the pointer to ' node ' at front of queue
if it is a leaf node then continue
if either of the child is not None and the other one is None , then binary tree is not a full binary tee
append left and right childs of ' node ' on to the queue ' q '
binary tree is a full binary tee
Driver Code
''Function to find whether a key exists in an array or not using linear search
'' Traverse the given array, a[]
'' Check if a[i] is equal to key
''Given Input
''Function Call
Python 3 implementation of simple method to find count of pairs with given sum .
Returns number of pairs in arr [ 0. . n - 1 ] with sum equal to 'sum  
Store counts of all elements in map m
initializing value to 0 , if key not found
Iterate through each element and increment the count ( Notice that every pair is counted twice )
if ( arr [ i ] , arr [ i ] ) pair satisfies the condition , then we need to ensure that the count is decreased by one such that the ( arr [ i ] , arr [ i ] ) pair is not considered
return the half of twice_count
Driver function
function to count all pairs from both the sorted arrays whose sum is equal to a given value
generating pairs from both the arrays
if sum of pair is equal to ' x ' increment count
required count of pairs
Driver Program
function to search ' value ' in the given array ' arr [ ] ' it uses binary search technique as ' arr [ ] ' is sorted
value found
value not found
function to count all pairs from both the sorted arrays whose sum is equal to a given value
for each arr1 [ i ]
check if the ' value ' is present in 'arr2[]  
required count of pairs
Driver Code
function to count all pairs from both the sorted arrays whose sum is equal to a given value
insert all the elements of 1 st array in the hash table ( unordered_set ' us ' )
or each element of 'arr2[]
find ( x - arr2 [ j ] ) in 'us  
required count of pairs
Driver code
function to count all pairs from both the sorted arrays whose sum is equal to a given value
traverse ' arr1 [ ] ' from left to right traverse ' arr2 [ ] ' from right to left
if this sum is equal to ' x ' , then increment ' l ' , decrement ' r ' and increment 'count  
if this sum is less than x , then increment l
else decrement 'r  
required count of pairs
Driver Code
A Linked list node
function to count all pairs from both the linked lists whose sum is equal to a given value
traverse the 1 st linked list
for each node of 1 st list traverse the 2 nd list
if sum of pair is equal to ' x ' increment count
required count of pairs
Driver program to test above
count pairs from the two sorted array whose sum is equal to the given ' value '
traverse ' arr1 [ ] ' from left to right traverse ' arr2 [ ] ' from right to left
if the ' sum ' is equal to ' value ' , then increment ' l ' , decrement ' r ' and increment ' count '
if the ' sum ' is greater than ' value ' , then decrement r
else increment l
required count of pairs print ( count )
function to count all quadruples from four sorted arrays whose sum is equal to a given value x
generate all pairs from arr1 [ ] and arr2 [ ]
calculate the sum of elements in the pair so generated
count pairs in the 3 rd and 4 th array having value ' x - p _ sum ' and then accumulate it to ' count '
required count of quadruples
four sorted arrays each of size ' n '
function to count all quadruples from four sorted arrays whose sum is equal to a given value x
unordered_map ' um ' implemented as hash table for < sum , frequency > tuples
count frequency of each sum obtained from the pairs of arr1 [ ] and arr2 [ ] and store them in 'um  
generate pair from arr3 [ ] and arr4 [ ]
calculate the sum of elements in the pair so generated
if ' x - p _ sum ' is present in ' um ' then add frequency of ' x - p _ sum ' to ' count '
required count of quadruples
four sorted arrays each of size n
Driver code
Python3 program for the above approach
Calculate all subarrays
Calculate required sum
Check if sum is equal to required sum
Python3 program to find the number of subarrays with sum exactly equal to k .
Function to find number of subarrays with sum exactly equal to k .
Dictionary to store number of subarrays starting from index zero having particular value of sum .
Sum of elements so far .
Add current element to sum so far .
If currsum is equal to desired sum , then a new subarray is found . So increase count of subarrays .
currsum exceeds given sum by currsum - sum . Find number of subarrays having this sum and exclude those subarrays from currsum by increasing count by same amount .
Add currsum value to count of different values of sum .
Driver Code
Returns count of pairs whose product exists in arr [ ]
find product in an array
if product found increment counter
return Count of all pair whose product exist in array
Driver program
Returns count of pairs whose product exists in arr [ ]
Create an empty hash - set that store all array element
Insert all array element into set
Generate all pairs and check is exist in ' Hash ' or not
if product exists in set then we increment count by 1
return count of pairs whose product exist in array
Driver Code
''Python3 code for the above approach
''Driver code
''A tail recursive function to calculate factorial
''Driver program to test  above function
''Function to find the minimum and maximum number of points included in a range of distance D
'' Stores the minimum and maximum  number of points that lies  over the distance of D
'' Iterate the array
'' Count of elements included  to left of point at index i
'' Update the minimum number  of points
'' Update the maximum number  of points
'' Count of elements included  to right of point at index i
'' Update the minimum number  of points
'' Update the maximum number  of points
'' Return the array
''Function to perform the Binary Search to the left of arr[i] over the given range
'' Base Case
'' Binary Search for index to left
'' update index
'' Return the number of elements  by subtracting indices
''Function to perform the Binary Search to the right of arr[i] over the given range
'' Base Case
'' Binary Search for index to right
'' Update the index
'' Return the number of elements  by subtracting indices
''Driver Code
''Function Call
Function to print all pairs in both arrays whose sum is equal to given value x
Driver code
''python program for the above approach
''Function to check if the sum of ceil values of the arr[] for the K value is at most M or not
'' Stores the sum of ceil values
'' Update the sum
'' Return true if sum is less than  or equal to M, false otherwise
''Function to find the smallest possible integer K such that ceil(arr[0]/K) + ceil(arr[1]/K) +....+ ceil(arr[N-1]/K) is less than or equal to M
'' Stores the low value
'' Stores the high value
'' Stores the middle value
'' Update the mid value
'' Check if the mid value is K
'' Update the low value
'' Update the high value
'' Check if low is K or high is K  and return it
''Driver Code
Function to find all pairs in both arrays whose sum is equal to given value x
Insert all elements of first array in a hash
Subtract sum from second array elements one by one and check it 's present in  array first or not
Driver code
Helper function that allocates a new node with the given data and None left and right poers .
Returns returns tree if the Binary tree is balanced like a Red - Black tree . This function also sets value in maxh and minh ( passed by reference ) . maxh and minh are set as maximum and minimum heights of root .
Base case
To store max and min heights of left subtree
To store max and min heights of right subtree
Check if left subtree is balanced , also set lmxh and lmnh
Check if right subtree is balanced , also set rmxh and rmnh
Set the max and min heights of this node for the parent call
See if this node is balanced
A wrapper over isBalancedUtil ( )
Driver Code
''Python implementation of the above approach Function to find the maximum index i such that arr[i] is equal to i
'' Traversing the array from  backwards
'' If arr[i] is equal to i
'' If there is no such index
Given Input
''Function Call
Function to print the cumulative frequency according to the order given
Insert elements and their frequencies in hash map .
traverse in the array
add the frequencies
if the element has not been visited previously
mark the hash 0 as the element 's cumulative  frequency has been printed
Driver Code
Function to find pair whose sum exists in arr [ ]
Driver code
''Function to check if mid number of mangoes can be bought
'' Store the coins
'' If watermelons needed are greater  than given watermelons
'' Store remaining watermelons if vl  watermelons are used to buy mangoes
'' Store the value of coins if these  watermelon get sold
'' Increment coins by ex
'' Number of mangoes that can be buyed  if only x coins needed for one mango
'' If the condition is satisfied,  return true
'' Otherwise return false
''Function to find the maximum number of mangoes that can be bought by selling watermelons
'' Initialize the boundary values
'' Store the required result
'' Binary Search
'' Store the mid value
'' Check if it is possible to  buy mid number of mangoes
'' Otherwise, update r to mid -1
'' Return the result
''Driver Code
'' Given Input
'' Function Call
''Function to find the Kth element in a sorted and rotated array at random point
'' Set the boundaries for binary search
'' Apply binary search to find R
'' Initialize the middle element
'' Check in the right side of mid
'' Else check in the left side
'' Random point either l or h
'' Return the kth smallest element
''Driver Code
'' Given Input
'' Function Call
Function to find pair such that ( a % b = k )
Consider each and every pair
Print if their modulo equals to k
Driver Code
Utiltity function to find the divisors of n and store in vector v [ ]
Vector is used to store the divisors
If n is a square number , push only one occurrence
Function to find pairs such that ( a % b = k )
Store all the elements in the map to use map as hash for finding elements in O ( 1 ) time .
Print all the pairs with ( a , b ) as ( k , numbers greater than k ) as k % ( num ( > k ) ) = k i . e . 2 % 4 = 2
Now check for the current element as ' a ' how many b exists such that a % b = k
find all the divisors of ( arr [ i ] - k )
Check for each divisor i . e . arr [ i ] % b = k or not , if yes then prthat pair .
Clear vector
Driver Code
Python3 program to convert an array in reduced form
Create a temp array and copy contents of arr [ ] to temp
Sort temp array
create a map
One by one insert elements of sorted temp [ ] and assign them values from 0 to n - 1
Convert array by taking positions from umap
Driver Code
Python program to return the maximum occurring character in the input string
Create array to keep the count of individual characters Initialize the count array to zero
Construct character count array from the input string .
Initialize max count
Initialize result
Traversing through the string and maintaining the count of each character
Driver program to test the above function
Helper function that allocates a new node with the given data and None left and right poers .
If tree is empty , there are no duplicates .
If current node 's data is already present. 
Insert current node
Recursively check in left and right subtrees .
To check if tree has duplicates
Driver Code
An expression tree node
A utility function to check if ' c ' is an operator
A utility function to do inorder traversal
Returns root of constructed tree for given postfix expression
Traverse through every character of input expression
if operand , simply push into stack
Operator
Pop two top nodes
make them children
Add this subexpression to stack
Only element will be the root of expression tree
Driver program to test above
''Python3 program for the above approach
''Function to preprocess the matrix to execute the queries
'' Stores the sum of each row
'' Stores the sum of each col
'' Traverse the matrix and calculate  sum of each row and column
'' Insert all row sums in sum_list
'' Insert all column sums in sum_list
'' Sort the array in ascending order
'' Traverse the array queries[][]
'' Search the leftmost index of L
'' Search the rightmost index of R
''Function to search for the leftmost index of given number
'' Initialize low, high and ans
'' Stores mid
'' If A[mid] >= num
''Function to search for the rightmost index of given number
'' Initialise low, high and ans
'' Stores mid
'' If A[mid] <= num
'' Update ans
'' Update mid
'' Update high
''Driver Code
'' Given dimensions of matrix
'' Given matrix
'' Given number of queries
'' Given queries
'' Function call to count the  number row-sums and column-sums  present in the given ranges
Python program to find the smallest element with frequency exactly k .
Map is used to store the count of elements present in the array
Traverse the map and find minimum element with frequency k .
Driver code
''Function to find the maximum profit earned by selling an item among N buyers
'' Stores the maximum profit
'' Stores the price of the item
'' Traverse the array
'' Count of buyers with  budget >= arr[i]
'' Increment count
'' Update the maximum profit
'' Return the maximum possible  price
''Driver code
''Function to print the elements of the array arr[]
'' Traverse the array arr[]
''Function to convert given array to lexicographically smallest permutation possible by swapping at most one pair
'' Stores the index of the first  element which is not at its  correct position
'' Checks if any such array  element exists or not
'' Traverse the given array
'' If element is found at i
'' If the first array is  not in correct position
'' Store the index of  the first elements
'' Store the index of  the first element
'' Swap the pairs
'' Print the array
''Given array
''Store the size of the array
''Function to check if the character c is in lowercase or not
''Function to check if the character c is in uppercase or not
''Utility function to check if uppercase characters are used correctly or not
'' Length of string
'' If the first character is in lowercase
'' Otherwise
'' Check if all characters  are in uppercase or not
'' If all characters are  in uppercase
'' Check if all characters except  the first are in lowercase
''Function to check if uppercase characters are used correctly or not
'' Stores whether the use of uppercase  characters are correct or not
'' If correct
'' Otherwise
''Driver Code
'' Given string
'' Function call to check if use of  uppercase characters is correct or not
''Check if N has only one set bit
''Function to build segment tree
'' If se is leaf node
'' Update the node
'' Stores mid value of segment [ss, se]
'' Recursive call for left Subtree
'' Recursive call for right Subtree
'' Update the Current Node
''Function to update a value at Xth index
'' If ss is equal to X
'' Update the Xth node
'' Update the tree
'' Stores the mid of segment [ss, se]
'' Update current node
''Count of numbers having one set bit
'' If L > se or R < ss  Invalid Range
'' If [ss, se] lies  inside the [L, R]
'' Stores the mid of segment [ss, se]
'' Return the sum after recursively  traversing left and right subtree
''Function to solve queries
'' Initialise Segment tree
'' Build segment tree
'' Perform queries
''Input
''Function call to solve queries
''Function to check if sum of first N natural numbers is >= X
''Finds minimum value of N such that sum of first N natural number >= X
'' Binary Search
' ' ▁ Checks ▁ if ▁ sum ▁ of ▁ first ▁ ' mid ' natural  numbers is greater than equal to X
'' Update res
'' Update high
'' Update low
''Driver Code
'' Input
'' Finds minimum value of  N such that sum of first  N natural number >= X
''Stores size of the grid
''Function to check valid cells of the grid
''Checks for the border sides
''Function to find shortest distance between two cells of the grid
'' Rows of the grid
'' Column of the grid
'' Stores possible move  of the person
'' Store possible cells visited  by the person
'' Store possible cells which  are burning
'' Traverse the grid
'' If current cell is  burning
'' If person is in  the current cell
'' Stores shortest distance  between two cells
'' Check if a cell is visited  by the person or not
'' While pQ is not empty
'' Update depth
'' Popped all the cells from  pQ and mark all adjacent cells  of as visited
'' Front element of  the queue pQ
'' Remove front element of  the queue pQ
'' If current cell is burning
'' Find all adjacent cells
'' Stores row number of  adjacent cell
'' Stores column number  of adjacent cell
'' Checks if current cell  is valid
'' Mark the cell as visited
'' Enqueue the cell
'' Checks the escape condition
'' Burn all the adjacent cells  of burning cells
'' Front element of  the queue fQ
'' Delete front element of  the queue fQ
'' Find adjacent cells of  burning cell
'' Stores row number of  adjacent cell
'' Stores column number  of adjacent cell
'' Checks if current  cell is valid
'' Burn all the adjacent  cells of current cell
''Driver Code
'' Given grid
Find the sum of all non - repeated elements in an array
sort all elements of array
Driver code
''Function to find maximum length of subsequence having XOR of adjacent elements equal to K
'' Store maximum length of subsequence
'' Stores the dp-states
'' Base case
'' Iterate over the range [1, N-1]
'' Iterate over the range [0, i - 1]
'' If arr[i]^arr[j] == K
'' Update the dp[i]
'' Update the maximum subsequence length
'' If length of longest subsequence  is less than 2 then return 0
''Driver Code
'' Input
'' Prthe length of longest subsequence
Python3 program to find if there is a duplicate sub - tree of size 2 or more Separator node
Structure for a binary tree node
This function returns empty if tree contains a duplicate subtree of size 2 or more .
If current node is None , return marker
If left subtree has a duplicate subtree .
Do same for right subtree
Serialize current subtree
If current subtree already exists in hash table . [ Note that size of a serialized tree with single node is 3 as it has two marker nodes .
Driver code
''Python 3 Program for the hashmap Approach
''Get the count of all pairs of similar rectangles
'' Initialize the result value and  map to store the ratio to the rectangles
'' Calculate the rectangular ratio and save them
'' Calculate pairs of similar rectangles from its common ratio
''Driver code
Python3 program to find first non - repeating element .
Driver code
Efficient Python3 program to find first non - repeating element .
Insert all array elements in hash table
Traverse array again and return first element with count 1.
Driver Code
Efficient Python program to print all non - repeating elements .
Insert all array elements in hash table
Traverse through map only and
Driver code
''Python3 program to implement the above approach
''Function to count minimum operations required to make all characters equal by repeatedly removing substring
'' Remove consecutive duplicate  characters from str
'' Stores length of the string
'' Stores frequency of each distinct  characters of the string str
'' Iterate over all the characters  of the string str
'' Update frequency of str[i]
'' Decrementing the frequency  of the string str[0]
'' Decrementing the frequency  of the ord(string ord(str[N - 1]
'' Stores the required count
'' Iterate over all characters  of the string str
'' Update ans
''Driver Code
'' Given string
''Structure of an N ary tree node
''Function to print the root to leaf path of the given N-ary Tree
'' Print elements in the vector
''Utility function to print all root to leaf paths of an Nary Tree
'' If root is null
' ' ▁ Insert ▁ current ▁ node ' s data into the vector
'' If current node is a leaf node
'' Print the path
'' Pop the leaf node  and return
'' Recur for all children of  the current node
'' Recursive Function Call
''Function to print root to leaf path
'' If root is null, return
'' Utility function call
''Driver Code
'' Given N-Ary tree
'' Function Call
Print pair with negative and positive value
For each element of array .
Try to find the negative value of arr [ i ] from i + 1 to n
If absolute values are equal print pair .
If size of vector is 0 , therefore there is no element with positive negative value , print "0"
Sort the vector
Print the pair with negative positive value .
Driver Code
Python3 program to check if arr [ 0. . n - 1 ] can be divided in pairs such that every pair is divisible by k .
Returns true if arr [ 0. . n - 1 ] can be divided into pairs with sum divisible by k .
An odd length array cannot be divided into pairs
Create a frequency array to count occurrences of all remainders when divided by k .
Count occurrences of all remainders
Traverse input array and use freq [ ] to decide if given array can be divided in pairs
Remainder of current element
If remainder with current element divides k into two halves .
Then there must be even occurrences of such remainder
If remainder is 0 , then there must be two elements with 0 remainde
Then there must be even occurrences of such remainder
Else number of occurrences of remainder must be equal to number of occurrences of k - remainder
Driver code
Function call
function to find the subarray with no pair sum divisible by k
hash table to store the remainders obtained on dividing by K
s : starting index of the current subarray , e : ending index of the current subarray , maxs : starting index of the maximum size subarray so far , maxe : ending index of the maximum size subarray so far
insert the first element in the set
Removing starting elements of current subarray while there is an element in set which makes a pair with mod [ i ] such that the pair sum is divisible .
include the current element in the current subarray the ending index of the current subarray increments by one
compare the size of the current subarray with the maximum size so far
Driver Code
Function to check if there is an element from each array such that sum of the three elements is equal to given sum .
Driver Code
Function to check if there is an element from each array such that sum of the three elements is equal to given sum .
Store elements of first array in hash
sum last two arrays element one by one
Consider current pair and find if there is an element in a1 [ ] such that these three form a required triplet
Driver code
''Function to return the number of quadruplets having given sum
'' Initialize answer
'' All possible first elements
'' All possible second element
'' Use map to find the  fourth element
'' All possible third elements
'' Calculate number of valid  4th elements
'' Update the twice_count
'' Unordered pairs
'' Return answer
''Driver Code
'' Given array arr[]
'' Given sum S
'' Function Call
function to find a , b , c , d such that ( a + b ) = ( c + d )
Create an empty hashmap to store mapping from sum to pair indexes
Traverse through all possible pairs of arr [ ]
Sum already present in hash
driver program
''Function to check if all subarrays have at least one unique element
'' Generate all subarray
' ' ▁ Store ▁ frequency ▁ of ▁ ▁ subarray ' s elements
'' Traverse the array over  the range [i, N]
'' Update frequency of  current subarray in map
'' Increment count
'' Decrement count
'' If all subarrays have at  least 1 unique element
''Driver Code
'' Given array arr[]
'' Function Call
''Function to count distinct pairs with absolute difference atleast K
'' Track the element that  have been paired
'' Stores count of distinct pairs
'' Pick all elements one by one
'' If already visited
'' If already visited
'' If difference is at least K
'' Mark element as visited and  increment the count
'' Print the final count
''Driver Code
'' Given arr[]
'' Size of array
'' Given difference K
'' Function Call
A binary tree node
Given two trees , return true if they are mirror of each other
Base case : Both empty
If only one is empty
Both non - empty , compare them recursively . Note that in recursive calls , we pass left of one tree and right of other tree
Driver code
Returns the maximum length
NOTE : Dictonary in python in implemented as Hash Maps Create an empty hash map ( dictionary )
Initialize sum of elements
Initialize result
Traverse through the given array
Add the current element to the sum
NOTE : ' in ' operation in dictionary to search key takes O ( 1 ) . Look if current sum is seen before
else put this sum in dictionary
test array
''Function to print Alternate elements of the given array
'' Print elements  at odd positions
'' Print elements of array
''Driver Code
python program to find length of the longest increasing subsequence whose adjacent element differ by 1
function that returns the length of the longest increasing subsequence whose adjacent element differ by 1
create hashmap to save latest consequent number as " key " and its length as " value "
stores the length of the longest subsequence that ends with a [ i ]
iterate for all element
if a [ i ] - 1 is present before i - th index
last index of a [ i ] - 1
Driver Code
Python3 implementation to find longest subsequence such that difference between adjacents is one
function to find longest subsequence such that difference between adjacents is one
hash table to map the array element with the length of the longest subsequence of which it is a part of and is the last element of that subsequence
to store the longest length subsequence
traverse the array elements
/ initialize current length for element arr [ i ] as 0
if ' arr [ i ] -1' is in ' um ' and its length of subsequence is greater than 'len  
f ' arr [ i ] + 1' is in ' um ' and its length of subsequence is greater than ' len '
update arr [ i ] subsequence length in ' um '
update longest length
required longest length subsequence
Driver code
''Python 3 program for the above approach
''Stores the ct of nodes which are maximum in the path from root to the current node
''Binary Tree Node
''Function that performs Inorder Traversal on the Binary Tree
'' If root does not exist
'' Check if the node  satisfies the condition
'' Update the maximum value  and recursively traverse  left and right subtree
''Function that counts the good nodes in the given Binary Tree
'' Perform inorder  Traversal
'' Return the final count
''Driver code
''   A Binary Tree  3  / /  2 5  / /  4 6    
'' Function call
'' Print the count of good nodes
Returns length of the longest contiguous subsequence
Sort the array
Insert repeated elements only once in the vector
Find the maximum length by traversing the array
Check if the current element is equal to previous element + 1
Update the maximum
Driver code
''Python3 program for the above approach
''Function to check if a number is prime or not
''Function to update a Binary Tree
''Function to find the sum of all the elements which are less than or equal to index
''Function to find the number of smaller primes on the right for every array element
'' Iterate the array in backwards
'' Calculating the required  number of primes
'' If current array  element is prime
'' Update the Fenwick tree
''Driver Code
'' Function call
Python program to find longest contiguous subsequence
Hash all the array elements
check each possible sequence from the start then update optimal length
if current element is the starting element of a sequence
Then check for next elements in the sequence
update optimal length if this length is more
Driver code
Python3 implementation of longest continuous increasing subsequence Function for LIS
Initialize result
iterate through array and find end index of LIS and its Size
print LIS size
print LIS after setting start element
Driver Code
function to count the required subsets
inserting even numbers in the set ' us ' single copy of each number is retained
counting distinct even numbers
total count of required subsets
Driver program
Simple Python3 program to count distinct elements in every window of size k
Counts distinct elements in window of size k
Traverse the window
Check if element arr [ i ] exists in arr [ 0. . i - 1 ]
Counts distinct elements in all windows of size k
Traverse through every window
Driver Code
Utility function to create and return a new node for a binary tree
function to check whether the two binary trees are mirrors of each other or not
iterative inorder traversal of 1 st tree and reverse inoder traversal of 2 nd tree
if the corresponding nodes in the two traversal have different data values , then they are not mirrors of each other .
if at any point one root becomes None and the other root is not None , then they are not mirrors . This condition verifies that structures of tree are mirrors of each other .
we have visited the node and its left subtree . Now , it ' s ▁ right ▁ subtree ' s turn
we have visited the node and its right subtree . Now , it ' s ▁ left ▁ subtree ' s turn
both the trees have been completely traversed
tress are mirrors of each other
Driver Code
1 st binary tree formation 1
/ \
3 2
/ \
5 4
2 nd binary tree formation 1
/ \
2 3
/ \
4 5
function cal
''Function to find the maximum score possible
'' Base Case
'' If previously occurred  subproblem occurred
'' Check if lastpicked element differs  by 1 from the current element
'' Calculate score by including  the current element
'' Calculate score by excluding  the current element
'' Return maximum score from  the two possibilities
''Function to print maximum score
'' DP array to store results
'' Function call
''Driver Code
'' Given arrays
'' Function Call
Function to return maximum sum of window in B [ ] according to given constraints .
Map is used to store elements and their counts .
Initialize result
calculating the maximum possible sum for each subarray containing unique elements .
Remove all duplicate instances of A [ i ] in current window .
Add current instance of A [ i ] to map and to current sum .
Update result if current sum is more .
Driver code
''Function to find maximum and second maximum length
'' Initialise maximum length
'' Initialise second maximum length
'' Initialise count
'' Iterate over the array
'' If sequence ends
'' Reset count
'' Otherwise
'' Increase length  of current sequence
'' Update maximum
'' Traverse the given array
'' If sequence continues
'' Increase length  of current sequence
'' Update second max
'' Reset count when 0 is found
'' Print the result
''Driver Code
'' Given array
'' Function Call
''Python3 program for the above approach
''Function that finds the minimum difference between two vectors
'' Find lower bound of the index
'' Find two adjacent indices  to take difference
'' Return the result
''Function to find the minimum distance between index of special pairs
'' Stores the index of each element  in the array arr[]
Store the indexes
Get the unique values in list
'' Take adjacent difference  of same values
'' Left index array
'' Right index array
'' Find the minimum gap between  the two adjacent different  values
''Driver Code
'' Given array 
'' Function call
''Python3 program for the above approach
''Function that generates substring of length K that occurs maximum times
'' Store the frequency of substrings
'' Deque to maintain substrings  window size K
'' Update the frequency of the  first subin the Map  E="".join(list(D
'' Remove the first character of  the previous K length substring
'' Traverse the string
'' Insert the current character  as last character of  current substring
'' Pop the first character of  previous K length substring
'' Find the subthat occurs  maximum number of times  print(M)
'' Print the substring
''Driver Code
'' Given string
'' Given K size of substring
'' Function call
''Python3 program of the above approach
''Stores the nodes to be deleted
''Structure of a Tree node
''Function to find the min value of node for each level
'' Count is used to diffentiate  each level of the tree
''Function to check whether the nodes in the level below it are smaller by performing post order traversal
'' Traverse the left subtree
'' Traverse right subtree
'' Check from minimum values  computed at each level
''Function to print count of nodes from all lower levels having values less than the the nodes in the current level
'' Stores the number of levels
'' Stores the required count  of nodes for each level
''Driver Code
''  4  / \  3 5  / \ / \  10 2 3 1  
Python program to design a DS that supports following operations in Theta ( n ) time : a ) Insertb ) Deletec ) Searchd ) getRandom
Class to represent the required data structure
Constructor ( creates a list and a hash )
A resizable array
A hash where keys are lists elements and values are indexes of the list
A Theta ( 1 ) function to add an element to MyDS data structure
If element is already present , then nothing has to be done
Else put element at the end of the list
Also put it into hash
A Theta ( 1 ) function to remove an element from MyDS data structure
Check if element is present
If present , then remove element from hash
Swap element with last element so that removal from the list can be done in O ( 1 ) time
Remove last element ( This is O ( 1 ) )
Update hash table for new index of last element
Returns a random element from MyDS
Find a random index from 0 to size - 1
Return element at randomly picked index
Returns index of element if element is present , otherwise none
Driver Code
''Function to count subarray containing both maximum and minimum array elements
'' If the length of the  array is less than 2
'' Find the index of  maximum element
'' Find the index of  minimum element
'' If i > j, then swap  the value of i and j
'' Return the answer
''Function to return max_element index
''Function to return min_element index
''Driver Code
'' Function call
''Structure of a Node
''Stores the count of required pairs
''Function to perform dfs to find pair of leaf nodes at most K distance apart
'' Return empty array if node is None
'' If node is a leaf node and return res
'' Traverse to the left
'' Traverse to the right
'' Update the distance between left  and right leaf node
'' Count all pair of leaf nodes  which are at most K distance apart
'' Return res to parent node
''Driver Code
''  1  / \  2 3  /  4  
'' Given distance K
'' Function call
Python3 program for the above approach
Function to find the maximum absolute difference of level sum
Create the adjacency list
Initialize value of maximum and minimum level sum
Do Level order traversal keeping track of nodes at every level
Get the size of queue when the level order traversal for one level finishes
Iterate for all the nodes in the queue currently
Dequeue an node from queue
Enqueue the children of dequeued node
Update the maximum level sum value
Update the minimum level sum value
Return the result
Driver Code
Number of nodes and edges
Edges of the N - ary tree
Given cost
Function call
Python3 program for the above approach
Function to find the minimum cost of splitting the array into subarrays
Get the maximum element
dp will store the minimum cost upto index i
Initialize the result array
Initialise the first element
Create the frequency array
Update the frequency
Counting the cost of the duplicate element
Minimum cost of operation from 0 to j
Total cost of the array
Driver Code
Given cost K
Function call
Function to print subarray with sum as given sum
create an empty map
if curr_sum is equal to target sum we found a subarray starting from index 0 and ending at index i
If curr_sum - sum already exists in map we have found a subarray with target sum
if value is not present then add to hashmap
If we reach here , then no subarray exists
Driver program to test above function
A binary tree node has data , pointer to left child and a pointer to right child
Given two trees , return true if they are structurally identical
1. Both empty
2. Both non - empty -> Compare them
3. one empty , one not -- false
Driver program to test identicalTress function
Maximum Size of a String
Fenwick Tree to store the frequencies of 26 alphabets
Size of the String .
Function to update Fenwick Tree for Character c at index val
Add val to current node Fenwick Tree
Move index to parent node in update View
Function to get sum of frequencies of character c till index
Stores the sum
Add current element of Fenwick tree to sum
Move index to parent node in getSum View
Function to create the Fenwick tree
Function to print the kth largest character in the range of l to r
Stores the count of characters
Stores the required character
Calculate frequency of C in the given range
Increase count
If count exceeds K
Required character found
Function to update character at pos by character s
0 based index system
Driver Code
Number of queries
Construct the Fenwick Tree
Function to generate required string
To store the result
Split name and number
Stores the maximum number less than or equal to the length of name
Check for number by parsing it to integer if it is greater than max number so far
Check if no such number is found then we append X to the result .
Otherwise
Append max index of the name
Return the final string
Driver Code
Function call
Stores the adjacency list
Stores if a vertex is visited or not
Function to perform DFS Traversal to count the number and size of all connected components
Mark the current node as visited
Traverse the adjacency list of the current node
For every unvisited node
Recursive DFS Call
Function to add undirected edge in the graph
Function to calculate minimum number of edges to be removed
Create Adjacency list
Iterate over all the nodes
Print the final count
Driver Code
Total lowercase letter
Method to a difference string for a given string . If string is " adf " then difference string will be " cb " ( first difference3 then difference 2 )
Representing the difference as char
This string will be 1 less length than str
Method for grouping shifted string
map for storing indices of string which are in same group
Iterating through map to print group
Driver code
Stores if a pair exists or not
Struct binary tree node
Function to check if a pair of leaf nodes exists with sum K
Checks if root is NULL
Checks if the current node is a leaf node
Checks for a valid pair of leaf nodes
Insert value of current node into the set
Traverse left and right subtree
Driver Code
Construct binary tree
Stores the leaf nodes
Function to prthe maximum rooks and their positions
Marking the location of already placed rooks
Print number of non - attacking rooks that can be placed
To store the placed rook location
Print lexographically smallest order
Driver Code
Size of board
Number of rooks already placed
Position of rooks
Function call
Python3 program to find minimum number of insertions to make a string palindrome
Function will return number of characters to be added
To store str1ing length
To store number of characters occurring odd number of times
To store count of each character
To store occurrence of each character
To count characters with odd occurrence
As one character can be odd return res - 1 but if str1ing is already palindrome return 0
Driver Code
Function to check if string is Palindrome or Not
Takes two inputs for Q queries . For every query , it prints Yes if string becomes palindrome and No if not .
Process all queries one by one
query 1 : i1 = 3 , i2 = 0 , ch = ' e ' query 2 : i1 = 0 , i2 = 2 , ch = ' s ' replace character at index i1 & i2 with new ' ch '
check string is palindrome or not
Driver Code
Function to check if a given string differs by a single character from all the strings in an array
Traverse over the strings
Stores the count of characters differing from the strings
If differs by more than one character
Function to find the string which only differ at one position from the all given strings of the array
Size of the array
Length of a string
Replace i - th character by all possible characters
Check if it differs by a single character from all other strings
If desired string is obtained
Print the answer
Driver Code
Function call
Function to return to the minimum number of operations required to make the array non - decreasing
Stores the count of operations
If arr [ i ] > arr [ i + 1 ] , add arr [ i ] - arr [ i + 1 ] to the answer Otherwise , add 0
Driver Code
Python program to find maximum difference between frequency of any two element such that element with greater frequency is also greater in value .
Return the maximum difference between frequencies of any two elements such that element with greater frequency is also greater in value .
Finding the frequency of each element .
finding difference such that element having greater frequency is also greater in value .
Driver Code
Return the maximum difference between frequencies of any two elements such that element with greater frequency is also greater in value .
Finding the frequency of each element .
Sorting the distinct element
Iterate through all sorted distinct elements . For each distinct element , maintaining the element with minimum frequency than that element and also finding the maximum frequency difference
Driven Program
Python3 program to implement the above approach
Function to calculate the maximum possible sum by selecting X elements from the Matrix
Generate prefix sum of the matrix
Initialize [ , ] dp
Maximum possible sum by selecting 0 elements from the first i rows
If a single row is present
If elements from the current row is not selected
Iterate over all possible selections from current row
Return maximum possible sum
Driver Code
Python3 code to find the difference between highest nd least frequencies
sort the array
checking consecutive elements
Driver Code
Function to count the minimum number of subarrays that are required to be decremented by 1
Base case
Initializing ans to first element
For A [ i ] > A [ i - 1 ] , operation ( A [ i ] - A [ i - 1 ] ) is required
Return the count
Driver Code
Python code to find the difference between highest and least frequencies
Put all elements in a hash map
Find counts of maximum and minimum frequent elements
Driver code
Iterative Python3 program to check if two trees are identical
Utility function to create a new tree node
Iterative method to find height of Binary Tree
Return true if both trees are empty
Return false if one is empty and other is not
Create an empty queues for simultaneous traversals
Enqueue Roots of trees in respective queues
Get front nodes and compare them
Remove front nodes from queues
Enqueue left children of both nodes
If one left child is empty and other is not
Right child code ( Similar to left child code )
Driver Code
Maximum number of nodes or vertices that can be present in the graph
Store the parent of each vertex
Stores the size of each set
Function to initialize the parent of each vertices
Function to find the representative of the set which contain element v
Path compression technique to optimize the time complexity
Function to merge two different set into a single set by finding the representative of each set and merge the smallest set with the larger one
Finding the set representative of each element
Check if they have different set repersentative
Compare the set sizes
Assign parent of smaller set to the larger one
Add the size of smaller set to the larger one
Function to check the vertices are on the same set or not
Check if they have same set representative or not
Driver code
Connected vertices and taking them into single set
Number of queries
Function call
Function to calculate the total count of N - digit numbers such that the sum of digits at even positions and odd positions are divisible by A and B respectively
For single digit numbers
Largest possible number
Count of possible odd digits
Count of possible even digits
Calculate total count of sequences of length even_count with sum divisible by A where first digit can be zero
Calculate total count of sequences of length odd_count with sum divisible by B where cannot be zero
Return their product as answer
Driver Code
Python3 find maximum difference of subset sum
function for maximum subset diff
if frequency of any element is two make both equal to zero
Driver Code
Maximum number of nodes
Vector to store the tree
Function to perform DFS Traversal
Mark the node as visited
Initialize the subtree size of each node as 1
If the node is same as A
Mark check_subtree [ node ] as true
Otherwise
Iterate over the adjacent nodes
If the adjacent node is not visited
Update the size of the subtree of current node
Check if the subtree of current node contains node A
Return size of subtree of node
Function to add edges to the tree
Function to calculate the number of possible paths
Stores the size of subtree of each node
Stores which nodes are visited
Stores if the subtree of a node contains node A
DFS Call
Stores the difference between total number of nodes and subtree size of an immediate child of Y lies between the path from A to B
Iterate over the adjacent nodes B
If the node is in the path from A to B
Calculate the difference
Return the final answer
Driver Code
Insert Edges
Python3 program to implement the above approach
Function to find required number M
Initialising m
Finding the index of the most significant bit of N
Calculating required number
Driver Code
function for maximum subset diff
sort the array
calculate the result
check for last element
return result
Driver Code
Function to return the count of possible palindromic strings
Stores the frequencies of each character
Stores the length of the string
Increase the number of swaps , the current character make with its previous occurrences
Increase frequency
Driver Code
function for maximum subset diff
construct hash for positive elements
calculate subset sum for positive elements
construct hash for negative elements
calculate subset sum for negative elements
Driver Code
Function to proofread the spells
Loop to iterate over the characters of the string
Push the current character c in the stack
Check for Rule 1
Check for Rule 2
To store the resultant string
Loop to iterate over the characters of stack
Return the resultant string
Given string str
Function Call
Prints the minimum range that contains exactly k distinct numbers .
Consider every element as starting point .
Find the smallest window starting with arr [ i ] and containing exactly k distinct elements .
There are less than k distinct elements now , so no need to continue .
If there was no window with k distinct elements ( k is greater than total distinct elements )
Driver code
Python3 program to find the minimum range that contains exactly k distinct numbers .
Prints the minimum range that contains exactly k distinct numbers .
Initially left and right side is - 1 and - 1 , number of distinct elements are zero and range is n .
Initialize right side
increment right side .
if number of distinct elements less than k .
if distinct elements are equal to k and length is less than previous length .
if number of distinct elements less than k , then break .
if distinct elements equals to k then try to increment left side .
increment left side .
it is same as explained in above loop .
Driver code for above function .
Function to calculate the sum
map to keep a count of occurrences
Traverse in the list from start to end number of times a [ i ] can be in a pair and to get the difference we subtract pre_sum .
if the ( a [ i ] - 1 ) is present then subtract that value as f ( a [ i ] , a [ i ] - 1 ) = 0
if the ( a [ i ] + 1 ) is present then add that value as f ( a [ i ] , a [ i ] - 1 ) = 0 here we add as a [ i ] - ( a [ i ] - 1 ) < 0 which would have been added as negative sum , so we add to remove this pair from the sum value
keeping a counter for every element
Driver Code
Python3 Program to implement the above approach
Function to find the minimum distance between the minimum and the maximum element
Stores the minimum and maximum array element
Stores the most recently traversed indices of the minimum and the maximum element
Stores the minimum distance between the minimum and the maximium
Find the maximum and the minimum element from the given array
Find the minimum distance
Check if current element is equal to minimum
Check if current element is equal to maximum
If both the minimum and the maximum element has occurred at least once
Driver Code
Function returns required diagonal
Initialize values to prupper diagonals
Initialize values to print lower diagonals
Traverse the diagonals
Print its contents
Driver code
Function returns length of longest substring starting with X and ending with Y
Length of string
Find the length of the string starting with X from the beginning
Find the length of the string ending with Y from the end
Longest substring
Print the length
Driver Code
Given string str
Starting and Ending characters
Function Call
Python implementation to find the parent of the given node
Function to find the parent of the given node
Check whether the given node is a root node . if it is then return - 1 because root node has no parent
Loop till we found the given node
Find the middle node of the tree because at every level tree parent is divided into two halves
if the node is found return the parent always the child nodes of every node is node / 2 or ( node - 1 )
if the node to be found is greater than the mid search for left subtree else search in right subtree
Driver code
Python3 code for the above approach .
There should be atleast two elements
If current element is smaller than firstSmallest then update both firstSmallest and secondSmallest
If arr [ i ] is in between firstSmallest and secondSmallest then update secondSmallest
Replace every element by smallest of all other elements
Print the modified array .
Driver code
function to count subarrays with equal number of 1 ' s ▁ and ▁ 0' s
' um ' implemented as hash table to store frequency of values obtained through cumulative sum
Traverse original array and compute cumulative sum and increase count by 1 for this sum in ' um ' . Adds ' - 1' when arr [ i ] == 0
traverse the hash table um
If there are more than one prefix subarrays with a particular sum
add the subarrays starting from 1 st element and have equal number of 1 ' s ▁ and ▁ 0' s
required count of subarrays
Driver code to test above
function to find the length of longest subarray having count of 1 ' s ▁ one ▁ more ▁ than ▁ count ▁ of ▁ 0' s
unordered_map ' um ' implemented as hash table
traverse the given array
consider '0' as '-1  
when subarray starts form index '0  
make an entry for ' sum ' if it is not present in 'um  
check if ' sum - 1' is present in ' um ' or not
update maxLength
required maximum length
Driver code
Function to print all triplets in given sorted array that forms AP
Use hash to find if there is a previous element with difference equal to arr [ j ] - arr [ i ]
Driver code
Function to print all triplets in given sorted array that forms AP
Search other two elements of AP with arr [ i ] as middle .
if a triplet is found
Since elements are distinct , arr [ k ] and arr [ j ] cannot form any more triplets with arr [ i ]
If middle element is more move to higher side , else move lower side .
Driver code
Class of Node
Util function
If root is NULL or reached end of the array
If current node is leaf
If current node is equal to arr [ index ] this means that till this level path has been matched and remaining path can be either in left subtree or right subtree .
Function to check given sequence of root to leaf path exist in tree or not . index represents current element in sequence of rooth to leaf path
Driver Code
arr [ ] : sequence of root to leaf path
Function to all find unique triplets without using extra space
Sort the input array
For handling the cases when no such triplets exits .
Iterate over the array from start to n - 2.
Index of the first element in remaining range .
Index of the last element
Setting our new target
Checking if current element is same as previous
Checking if current element is same as previous
If we found the triplets then print it and set the flag
If target is greater then increment the start index
If target is smaller than decrement the end index
If no such triplets found
Driver code
Function call
Python implementation of the approach
Function to find a row in the given matrix using linear search
Assume that the current row matched with the given array
If any element of the current row doesn 't  match with the corresponding element  of the given array
Set matched to false and break ;
If matched then return the row number
No row matched with the given array
Driver code
Method to count such triplets
Consider all triplets and count if their product is equal to m
Driver code
Function to find the triplet
Consider all pairs and check for a third number so their product is equal to product
Check if current pair divides product or not If yes , then search for ( product / li [ i ] * li [ j ] )
Check if the third number is present in the map and it is not equal to any other two elements and also check if this triplet is not counted already using their indexes
Driver code
Return the number of pairs with equal values .
for each index i and j
finding the index with same value but different index .
Driven Code
Function to pre - calculate the left [ ] array
Iterate in the binary array
Initialize the number of 1 and 0
Increase the count
Driver code
Queries
Solve queries
Python3 program to count of index pairs with equal elements in an array .
Return the number of pairs with equal values .
Finding frequency of each number .
Calculating pairs of each value .
Driver Code
This function returns true if the array can be divided into three equal sum segments
Prefix Sum Array
Suffix Sum Array
Stores the total sum of the array
We can also take pre [ pos2 - 1 ] - pre [ pos1 ] == total_sum / 3 here .
Driver Code
A utility function to create a new Binary Tree Node
It returns level of the node if it is present in tree , otherwise returns 0.
base cases
If node is present in left subtree
If node is not present in left subtree
Prnodes at a given level such that sibling of node is not printed if it exists
Base cases
If current node is parent of a node with given level
Recur for left and right subtrees
This function prints cousins of a given node
Get level of given node
Prnodes of given level .
Driver Code
Function to return the index of the rightmost minimum element from the array
First element is the minimum in a sorted array
While the elements are equal to the minimum update rightMin
Final check whether there are any elements which are equal to the minimum
Function to return the index of the leftmost maximum element from the array
Last element is the maximum in a sorted array
While the elements are equal to the maximum update leftMax
Final check whether there are any elements which are equal to the maximum
Driver code
First element is the leftmost minimum in a sorted array
Last element is the rightmost maximum in a sorted array
Function to count numbers to be added
Sort the array
Check if elements are consecutive or not . If not , update count
Drivers code
Python3 program to find the k maximum number from the array after n deletions
Find k maximum element from arr [ 0. . m - 1 ] after deleting elements from del [ 0. . n - 1 ]
Hash Map of the numbers to be deleted
Increment the count of del [ i ]
Search if the element is present
Decrement its frequency
If the frequency becomes 0 , erase it from the map
Else push it
Driver code
Function to count numbers to be added
Make a hash of elements and store minimum and maximum element
Traverse all elements from minimum to maximum and count if it is not in the hash
Driver code
Function to check if the person can do all jobs in H hours with speed K
Function to return the minimum speed of person to complete all jobs
If H < N it is not possible to complete all jobs as person can not move from one element to another during current hour
Max element of array
Use binary search to find smallest K
Driver Code
Print required maxLenwer
Python3 program to implement the above approach
Sort the array so that we can apply binary search .
One by one check every element if it is anomaly or not using binary search .
If arr [ i ] is not largest element and element just greater than it is within k , then return False .
If there are more than one occurrences of arr [ i ] , return False .
If arr [ i ] is not smallest element and just smaller element is not k distance away
Driver code
Returns sum of lengths of all subarrays with distinct elements .
For maintaining distinct elements .
Initialize ending point and result
Fix starting point
Calculating and adding all possible length subarrays in arr [ i . . j ]
Remove arr [ i ] as we pick new stating point from next
Driven Code
Function to calculate distinct sub - array
Count distinct elements in whole array
Reset the container by removing all elements
Use sliding window concept to find count of subarrays having k distinct elements .
If window size equals to array distinct element size , then update answer
Decrease the frequency of previous element for next sliding window
If frequency is zero then decrease the window size
Driver code
function that returns the count of subarrays that contain equal number of odd as well as even numbers
initialize difference and answer with 0
initialize these auxiliary arrays with 0
since the difference is initially 0 , we have to initialize hash_positive [ 0 ] with 1
for loop to iterate through whole array ( zero - based indexing is used )
incrementing or decrementing difference based on arr [ i ] being even or odd , check if arr [ i ] is odd
adding hash value of ' difference ' to our answer as all the previous occurrences of the same difference value will make even - odd subarray ending at index ' i ' . After that , we will increment hash array for that ' difference ' value for its occurrence at index ' i ' . if difference is negative then use hash_negative
else use hash_positive
return total number of even - odd subarrays
Driver code
Printing total number of even - odd subarrays
Class to represent the nodes of syntax tree
This function receives a node of the syntax tree and recursively evaluate it
empty tree
leaf node
evaluate left tree
evaluate right tree
check which operation to apply
Driver function to test above problem
Python program to search an element in row - wise and column - wise sorted matrix
Searches the element x in mat [ m ] [ n ] . If the element is found , then prints its position and returns true , otherwise prints " not ▁ found " and returns false
set indexes for bottom left element
Driver Code
Function to find distintc id 's
Store the occurrence of ids
Store into the list value as key and vice - versa
Start removing elements from the beginning
Remove if current value is less than or equal to mi
Return the remaining size
Driver code
Python3 program to find counts of right greater characters for every character .
Driver code
Python3 program to find largest consecutive numbers present in arr .
We insert all the array elements into unordered set .
check each possible sequence from the start then update optimal length
if current element is the starting element of a sequence
Then check for next elements in the sequence
increment the value of array element and repeat search in the set
Update optimal length if this length is more . To get the length as it is incremented one by one
Driver code
Python 3 program to find if any element appears more than n / 3.
take the integers as the maximum value of integer hoping the integer would not be present in the array
if this element is previously seen , increment count1 .
if this element is previously seen , increment count2 .
if current element is different from both the previously seen variables , decrement both the counts .
Again traverse the array and find the actual counts .
Driver code
Python3 code to count pairs whose sum is divisible by '4
Function to count pairs whose sum is divisible by '4
Create a frequency array to count occurrences of all remainders when divided by 4
Count occurrences of all remainders
If both pairs are divisible by '4
If both pairs are 2 modulo 4
If one of them is equal to 1 modulo 4 and the other is equal to 3 modulo 4
Driver code
function for finding grandSum
calculate cumulative sum of array cArray [ 0 ] will store sum of zero elements
store all subarray sum in vector
sort the vector
mark all duplicate sub - array sum to zero
calculate total sum
return totalSum
Drivers code
Python code to find number whose set bits are maximum among ' l ' and 'r
Returns smallest number whose set bits are maximum in given range .
Initialize the maximum count and final answer as ' num '
Traverse for every bit of ' i ' number
If count is greater than previous calculated max_count , update it
driver code
function for finding grandSum
Go through all subarrays , compute sums and count occurrences of sums .
Print all those Sums that appear once .
Driver code
Prints first n terms of Recaman sequence
Create an array to store terms
First term of the sequence is always 0
Fill remaining terms using recursive formula .
If arr [ i - 1 ] - i is negative or already exists .
Driver code
Tree node structure used in the program
Function to find height of a tree
Update the answer , because diameter of a tree is nothing but maximum value of ( left_height + right_height + 1 ) for each node
Save the root , this will help us finding the left and the right part of the diameter
Save the height of left & right subtree as well .
Prints the root to leaf path
Print left part of the path in reverse order
This function finds out all the root to leaf paths
Append this node to the path array
If it 's a leaf, so print the  path that led to here
Print only one path which is equal to the height of the tree . print ( pathlen , " - - - " , maxm )
Otherwise try both subtrees
Computes the diameter of a binary tree with given root .
lh will store height of left subtree rh will store height of right subtree
f is a flag whose value helps in printing left & right part of the diameter only once
Print the left part of the diameter
Print the right part of the diameter
Driver code
Enter the binary tree ... 1 / \ 2 3 / \ 4 5 \ / \ 8 6 7 / 9
Prints first n terms of Recaman sequence
Print first term and store it in a hash
Print remaining terms using recursive formula .
If arr [ i - 1 ] - i is negative or already exists .
Driver code
Prints largest subset of an array whose all elements are fibonacci numbers
Find maximum element in arr [ ]
Generate all Fibonacci numbers till max and store them in hash .
Npw iterate through all numbers and quickly check for Fibonacci using hash .
Driver code
Efficient Python3 program to count Amicable pairs in an array .
Calculating the sum of proper divisors
1 is a proper divisor
To handle perfect squares
check if pair is ambicle
This function prints count of amicable pairs present in the input array
Map to store the numbers
Iterate through each number , and find the sum of proper divisors and check if it 's  also present in the array
It 's sum of proper divisors
As the pairs are counted twice , thus divide by 2
Driver Code
Python3 program for the above approach
Function to find minimum number of character removals required to make frequency of all distinct characters the same
Stores the frequency of each character
Traverse the string
Stores the frequency of each charachter in sorted order
Traverse the Map
Insert the frequency in multiset
Stores the count of elements required to be removed
Stores the size of multiset
Traverse the multiset
Update the ans
Increment i by 1
Return
Driver Code
Input
Function to calculate total cost of visiting array elements in increasing order
Stores the pair of element and their positions
Traverse the array arr [ ]
Push the pair { arr [ i ] , i } in v
Sort the vector in ascending order .
Stores the total cost
Stores the index of last element visited
Traverse the vector v
Increment ans
Assign
Return ans
Driver Code
Python 3 program of the above approach
Function to sort array in ascending order after replacing array elements by nearest perfect square of decreasing order of digits
Traverse the array of strings
Convert the current array element to a string
Sort each string in descending order
Convert the string to equivalent integer
Calculate square root of current array element
Calculate perfect square
Find the nearest perfect square
Sort the array in ascending order
Print the array
Driver Code
Python3 program for the above approach
Function to find the minimum cost to make all array of elements greater than or equal to 0
sort the array in ascending order
stores the count to make current array element >= 0
stores the cost to make all array elements >= 0
Traverse the array and insert all the elements which are <= 0
if current array element is negative
cost to make all array elements >= 0
update curr if ans is minimum
return minimum cost
Given array
size of the array
Given value of x
Function call to find minimum cost to make all array elements >= 0
Stores the final answer
Utility function to count arrays having at least K elements exceeding XOR of all given array elements
If no operations are left
Stores the count of possible arrays
Count array elements are greater than XOR
Stores first element
Delete first element
Recursive call
Insert first element into vector
Stores the last element
Remove last element from vector
Recursive call
Push last element into vector
Increment first element
Recursive call
Decrement first element
Increment last element
Recursive call
Decrement last element
Function to find the count of arrays having atleast K elements greater than XOR of array
Stores the XOR value of original array
Traverse the vector
Print the answer
Given vector
Given value of X & K
Python3 program for the above approach
Utility function to find the hash value for each element of the given array
Initialize an array with first 10 prime numbers
Iterate over digits of N
Update Hash Value
Update N
Function to find the set of anagrams in the array and print the difference between the maximum and minimum of these numbers
Map to store the hash value and the array elements having that hash value
Find the hash value for each arr [ i ] by calling hash function
Iterate over the map
If size of vector at m [ i ] greater than 1 then it must contain the anagrams
Find the minimum and maximum element of this anagrams vector
Display the difference
If the end of Map is reached , then no anagrams are present
Given array
Size of the array
Function to find the maximum number of apples a person can eat such that the person eat at most one apple in a day .
Store count of apples and number of days those apples are edible
Stores indices of the array
Stores count of days
Stores maximum count of edible apples
Traverse both the arrays
If top element of the apple is not already expired
Insert count of apples and their expiration date
Remove outdated apples
Insert all the apples produces by tree on current day
Stores top element of pq
Remove top element of pq
If count of apples in curr is greater than 0
Insert count of apples and their expiration date
Update total_apples
Update index
Driver Code
function for finding max area
sort array in non - increasing order
Initialize two sides of rectangle
traverse through array
if any element occurs twice store that as dimension
return the product of dimensions
Driver code
Python3 implementation of the above approach
Function to find the maximum of sum of lengths of rectangles and squares formed using given set of sticks
Stores the count of frequencies of all the array elements
Stores frequencies which are at least 2
Convert all frequencies to nearest smaller even values .
Sum of elements up to index of multiples of 4
Print the sum
Driver Code
function for finding max area
traverse through array
If this is first occurrence of arr [ i ] , simply insert and continue
If this is second ( or more ) occurrence , update first and second maximum values .
return the product of dimensions
Driver Code
Helper function that allocates a new node with the given data and None left and right pointers .
Function to print root to leaf path for a leaf using parent nodes stored in map
start from leaf node and keep on appending nodes into stack till root node is reached
Start popping nodes from stack and print them
An iterative function to do preorder traversal of binary tree and print root to leaf path without using recursion
Corner Case
Create an empty stack and append root to it
Create a map to store parent pointers of binary tree nodes
parent of root is None
Pop all items one by one . Do following for every popped item a ) append its right child and set its parent pointer b ) append its left child and set its parent pointer Note that right child is appended first so that left is processed first
Pop the top item from stack
If leaf node encountered , print Top To Bottom path
append right & left children of the popped node to stack . Also set their parent pointer in the map
Driver Code
Constructed binary tree is 10 / \ 8 2 / \ / 3 5 2
Function return which player win the game
Create hash that will stores all distinct element
Traverse an array element
Driver code
function to find length of longest strict bitonic subsequence
hash table to map the array element with the length of the longest subsequence of which it is a part of and is the last / first element of that subsequence
arrays to store the length of increasing and decreasing subsequences which end at them or start from them
to store the length of longest strict bitonic subsequence
traverse the array elements from left to right
initialize current length for element arr [ i ] as 0
if ' arr [ i ] -1' is in 'inc  
update arr [ i ] subsequence length in ' inc ' and in len_inc [ ]
traverse the array elements from right to left
initialize current length for element arr [ i ] as 0
if ' arr [ i ] -1' is in 'dcr  
update arr [ i ] subsequence length in ' dcr ' and in len_dcr [ ]
calculating the length of all the strict bitonic subsequence
required longest length strict bitonic subsequence
Driver Code
Driver Code
Python3 program to find last seen element in an array .
Returns last seen element in arr [ ]
Store last occurrence index of every element
Find an element in hash with minimum index value
Driver code
Driver Code
Python3 program for the above approach
Utility function to find set of an element v using path compression technique
If v is the parent
Otherwise , recursively find its parent
Function to perform union of the sets a and b
Find parent of a and b
If parent are different
Swap Operation
Update parent of b as a
Otherwise , return 0
Function to create a Minimum Cost Spanning tree for given houses
Stores adjacency list of graph
Traverse each coordinate
Find the Manhattan distance
Add the edges
Sort all the edges
Initialize parent [ ] and size [ ]
Stores the minimum cost
Finding the minimum cost
Perform the unioun operation
Print the minimum cost
Driver Code
Given houses
Function Call
Function to find the lexicographically smallest subsequence of length N - 1
Store index of character to be deleted
Traverse the String
If ith character > ( i + 1 ) th character then store it
If any character found in non alphabetical order then remove it
Otherwise remove last character
Print the resultant subsequence
Driver Code
Given String S
Function Call
Function to find the largest product of array A [ ]
Base Case
Store all the elements of the array A [ ]
Sort the Array B [ ]
Traverse the array B [ ]
Pop minimum element
Check which operation is producing maximum element
Insert resultant element into the priority queue
Evaluate the product of the elements of A [ ]
Return the maximum product
Given arrays
Function Call
Python3 program to print the longest leaf to leaf path
Tree node structure used in the program
Prints given root to leafAllpaths with underscores
Find the minimum horizontal distance value in current root to leafAllpaths
Find minimum horizontal distance
Print the root to leafAllpaths with " _ " that indicate the related position
Current tree node
Print underscore
Print current key
A utility function prall path from root to leaf working of this function is similar to function of " Print _ vertical _ order " : Prpaths of binary tree in vertical order https : www . geeksforgeeks . org / print - binary - tree - vertical - order - set - 2 /
Base case
Leaf node
Add leaf node and then prpath
Store current path information
Call left sub_tree
Call left sub_tree
Base case
Driver code
Function to calculate the minimum steps required to convert given array into a power sequence of 2
Sort the array in ascending order
Calculate the absolute difference between arr [ i ] and 2 ^ i for each index
Return the answer
Driver Code
Wrapper over the recursive function leftRotateRec ( ) It left rotates arr by d .
* Return If number of elements to be rotated is zero or equal to array size
* If number of elements to be rotated is exactly half of array size
If A is shorter
If B is shorter
function to pran array
* This function swaps d elements starting at * index fi with d elements starting at index si
Driver Code
Function to find the total cost of removing all array elements
Sort the array in descending order
Stores the total cost
Contribution of i - th greatest element to the cost
Remove the element
If negative
Add to the final cost
Return the cost
Given array arr [ ]
Function call
Python3 code for above implementation
A is shorter
B is shorter
Finally , block swap A and B
Function that count the pairs having same elements in the array arr [ ]
Hash map to keep track of occurences of elements
Traverse the array arr [ ]
Check if occurence of arr [ i ] > 0 add count [ arr [ i ] ] to answer
Return the result
Given array arr [ ]
Function call
Function that performs BFS Traversal
Fill initially each distance as INF fill ( dist , dist + N , INF )
Perform BFS
Traverse the current edges
Update the distance
Insert in queue
Function that maximizes the shortest path between source and destination vertex by adding a single edge between given selected nodes
To update the shortest distance between node 1 to other vertices
To update the shortest distance between node N to other vertices
Store the values x [ i ] - y [ i ]
Sort all the vectors of pairs
Traverse data [ ]
Maximize x [ a ] - y [ b ]
Prminimum cost
Driver Code
Given nodes and edges
Sort the selected nodes
Given edges
Function Call
i and j pointing to first and last element respectively
Driver function
Function to find the minimum cost of removing elements from the array
Sorting in Increasing order
Loop to find the minimum cost of removing elements
Driver Code
Function call
Python program for the above approach
Appending border elements
Sorting the list
Printing first row with first N elements from A
Printing N - 2 rows
Print elements from last
Print middle elements from original matrix
Print elements from front
Printing last row
Dimensions of a Matrix
Given Matrix
Function Call
Function to return the lexicographically largest string possible by swapping at most one character
Initialize with - 1 for every character
Keep updating the last occurrence of each character
If a previously unvisited character occurs
Stores the sorted string
Character to replace
Find the last occurrence of this character
Swap this with the last occurrence
Driver code
This function returns True if arr [ 0. . n - 1 ] has a pair with sum equals to x .
Find the pivot element
l is now index of smallest element
r is now index of largest element
Keep moving either l or r till they meet
If we find a pair with sum x , we return True
If current pair sum is less , move to the higher sum
Move to the lower sum side
Driver program to test above function
This function returns count of number of pairs with sum equals to x .
Find the pivot element . Pivot element is largest element of array .
l is index of smallest element .
r is index of largest element .
Variable to store count of number of pairs .
Find sum of pair formed by arr [ l ] and arr [ r ] and update l , r and cnt accordingly .
If we find a pair with sum x , then increment cnt , move l and r to next element .
This condition is required to be checked , otherwise l and r will cross each other and loop will never terminate .
If current pair sum is less , move to the higher sum side .
If current pair sum is greater , move to the lower sum side .
Driver Code
returns max possible value of Sum ( i * arr [ i ] )
stores sum of arr [ i ]
stores sum of i * arr [ i ]
initialize result
try all rotations one by one and find the maximum rotation sum
return result
test maxsum ( arr ) function
Recursive Python3 program to print odd level nodes Utility method to create a node
If empty tree
If current node is of odd level
Recur for children with isOdd switched .
Driver code
A Naive Python3 program to find maximum sum rotation
Returns maximum value of i * arr [ i ]
Initialize result
Consider rotation beginning with i for all possible values of i .
Initialize sum of current rotation
Compute sum of all values . We don 't  acutally rotation the array, but  compute sum by finding ndexes when  arr[i] is first element
Update result if required
Driver code
An efficient Python3 program to compute maximum sum of i * arr [ i ]
Compute sum of all array elements
Compute sum of i * arr [ i ] for initial configuration .
Initialize result
Compute values for other iterations
Compute next value using previous value in O ( 1 ) time
Update current value
Update result if required
Driver code
Returns count of rotations for an array which is first sorted in ascending order , then rotated
We basically find index of minimum element
Driver code
Returns count of rotations for an array which is first sorted in ascending order , then rotated
This condition is needed to handle the case when array is not rotated at all
If there is only one element left
Find mid
Check if element ( mid + 1 ) is minimum element . Consider the cases like { 3 , 4 , 5 , 1 , 2 }
Check if mid itself is minimum element
Decide whether we need to go to left half or right half
Driver code
Fills temp with two copies of arr
Store arr elements at i and i + n
Function to left rotate an array k times
Starting position of array after k rotations in temp will be k % n
Print array after k rotations
Driver program
Function to arrange array in such a way that after performing given operation We get increasing sorted array
Size of given array
Sort the given array
Start erasing last element and place it at ith index
While we reach at starting
Store last element
Shift all elements by 1 position in right
insert last element at ith position
print desired Array
Given Array
Function to left rotate an array k times
Print array after k rotations
Driver Code
Function for Sorting the array using a single loop
Finding the length of array 'arr
Sorting using a single loop
Checking the condition for two simultaneous elements of the array
Swapping the elements .
updating the value of j = - 1 so after getting updated for j ++ in the loop it becomes 0 and the loop begins from the start .
Driver Code
Declaring an integer array of size 11.
Printing the original Array .
Sorting the array using a single loop
Printing the sorted array .
Function for Sorting the array using a single loop
Sorting using a single loop
Type Conversion of char to int .
Comparing the ascii code .
Swapping of the characters
Declaring a String
declaring character array
copying the contents of the string to char array
Printing the original Array .
Sorting the array using a single loop
Printing the sorted array .
Python3 implementation of the approach
Class containing left and right child of current node and key value
Function to locate which level to check for the existence of key .
If the key is less than the root , it will certainly not exist in the tree because tree is level - order sorted
If the key is equal to the root then simply return 0 ( zero 'th level)
If the key is found in any leftmost element then simply return true No need for any extra searching
If key lies between the root data and the left child 's data OR if key is greater  than root data and there is no level  underneath it, return the current level
Function to traverse a binary encoded path and return the value encountered after traversal .
Go left
Incomplete path
Go right
Incomplete path
Return the data at the node
Function to generate gray code of corresponding binary number of integer i
Create new arraylist to store the gray code
Reverse the encoding till here
Leftmost digits are filled with 0
Function to search the key in a particular level of the tree .
Find the middle index
Encode path from root to this index in the form of 0 s and 1 s where 0 means LEFT and 1 means RIGHT
Traverse the path in the tree and check if the key is found
If path is incomplete
Check the left part of the level
Check the right part of the level
Check the left part of the level
Key not found in that level
Function that returns true if the key is found in the tree
Find the level where the key may lie
If level is - 1 then return false
If level is - 2 i . e . key was found in any leftmost element then simply return true
Apply binary search on the elements of that level
Driver code
Consider the following level order sorted tree 5 / \ 8 10 / \ / \ 13 23 25 30 / \ / 32 40 50
Keys to be searched
Python3 program to Convert given Matrix into sorted Spiral Matrix
Function to convert the array to Spiral
For Array pointer
k - starting row index m - ending row index l - starting column index n - ending column index
Print the first row from the remaining rows
Print the last column from the remaining columns
Print the last row from the remaining rows
Print the first column from the remaining columns
Function to convert 2D array to 1D array
Store value 2D Matrix To 1D array
Function to print the Matrix
Print Spiral Matrix
Function to sort the array
Sort array Using InBuilt Function
Function to Convert given Matrix into sorted Spiral Matrix
Driver code
Function to reverse arr from index start to end
Function to right rotate arr of size n by d
function to pr an array
Driver code
Iterative Python3 program to prodd level nodes A Binary Tree Node Utility function to create a new tree Node
Iterative method to do level order traversal line by line
Base Case
Create an empty queue for level order traversal
Enqueue root and initialize level as odd
nodeCount ( queue size ) indicates number of nodes at current level .
Dequeue all nodes of current level and Enqueue all nodes of next level
Driver Code
Return the maximum hamming distance of a rotation
arr [ ] to brr [ ] two times so that we can traverse through all rotations .
We know hamming distance with 0 rotation would be 0.
We try other rotations one by one and compute Hamming distance of every rotation
We can never get more than n .
driver program
Function to leftRotate array multiple times
To get the starting point of rotated array
Prints the rotated array from start position
Driver code
Function Call
Function Call
Function Call
Function to return the count of non intersecting circles
Structure with start and end of diameter of circles
Sorting with smallest finish time first
count stores number of circles to be removed
cur stores ending of first circle
Non intersecting circles
Intersecting circles
Centers of circles
Radius of circles
Number of circles
Python3 implementation to print left rotation of any array K times
Function For The k Times Left Rotation
The collections module has deque class which provides the rotate ( ) , which is inbuilt function to allow rotation
Print the rotated array from start position
Driver Code
Function Call
Function to compute the element at given index
Range [ left ... right ]
Rotation will not have any effect
Returning new element
Driver Code
No . of rotations
Ranges according to 0 - based indexing
Function that returns the string s in sorted form such that the positions of alphabets and numeric digits remain unchanged
String to character array
Sort the array
Count of alphabets and numbers
Get the index from where the alphabets start
Now replace the string with sorted string
If the position was occupied by an alphabet then replace it with alphabet
Else replace it with a number
Return the sorted string
Driver Code
Python program to split array and move first part to end .
Rotate array by 1.
main
Function to spilt array and move first part to end
make a temporary array with double the size and each index is initialized to 0
copy array element in to new array twice
Driver code
Function to tranform the array
Iterate over the array
Check is any ar [ j ] exists such that ar [ j ] is equal to i
Iterate over array
If not present
Print the output
Driver Code
Function Call
Function to perform K queries out of Q to maximize the final sum
Get the initial sum of the array
Stores the contriution of every query
Sort the contribution of queries in descending order
Get the K most contributions
Driver code
Function to return the result for a particular query
Get the difference between the indices of L - th and the R - th smallest element
Return the answer
Function that performs all the queries
Store the array numbers and their indices
Sort the array elements
Answer all the queries
Driver code
utility that allocates a newNode with the given key
Traverses given tree in Inorder fashion and prints all nodes that have both children as non - empty .
Driver Code
Python3 implementation of the above approach
Set to store the unique substring
String to create each substring
adding to set
converting set into a list
sorting the strings int the list into lexicographical order
printing kth substring
Driver Code
Python3 code to rearrange the array as per the given condition
function to rearrange the array
total even positions
total odd positions
copy original array in an auxiliary array
sort the auxiliary array
fill up odd position in original array
fill up even positions in original array
display array
Driver code
Python3 implementation to count triplets in a sorted doubly linked list whose sum is equal to a given value 'x
Represents node of a doubly linked list
function to count triplets in a sorted doubly linked list whose sum is equal to a given value 'x
generate all possible triplets
if elements in the current triplet sum up to 'x
increment count
required count of triplets
A utility function to insert a new node at the beginning of doubly linked list
allocate node
Driver Code
start with an empty doubly linked list
insert values in sorted order
Python3 program to sort only non primes
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Function to print the array such that only non primes are sorted
list v will store all non prime numbers
If not prime , insert into list
sorting list of non primes
print the required array
Driver code
utility that allocates a new Node with the given key
Function to find sum of all the element
Driver Code
sort the original array so that we can retrieve the large elements from the end of array elements
In this loop first we will insert one smallest element not entered till that time in final sequence and then enter a highest element ( not entered till that time ) in final sequence so that we have large difference value . This process is repeated till all array has completely entered in sequence . Here , we have loop till n / 2 because we are inserting two elements at a time in loop .
If there are odd elements , push the middle element at the end .
variable to store the maximum sum of absolute difference
In this loop absolute difference of elements for the final sequence is calculated .
absolute difference of last element and 1 st element
return the value
Driver Code
Utility function to find minimum swaps required to club all elements less than or equals to k together
Find count of elements which are less than equals to k
Find unwanted elements in current window of size 'count  
Initialize answer with ' bad ' value of current window
Decrement count of previous window
Increment count of current window
Update ans if count of ' bad ' is less in current window
Driver code
Python3 implementation of the above approach
Rearrange the array with all negative integers on left and positive integers on right use recursion to split the array with first element as one half and the rest array as another and then merge it with head of the array in each step
exit condition
rearrange the array except the first element in each recursive call
If the first element of the array is positive , then right - rotate the array by one place first and then reverse the merged array .
Driver code
Required function
sorting given input array
variable to store final product of all element of sub - sequence of size k
CASE I If max element is 0 and k is odd then max product will be 0
CASE II If all elements are negative and k is odd then max product will be product of rightmost - subarray of size k
else i is current left pointer index
j is current right pointer index
CASE III if k is odd and rightmost element in sorted array is positive then it must come in subsequence Multiplying A [ j ] with product and correspondingly changing j
CASE IV Now k is even . So , Now we deal with pairs Each time a pair is multiplied to product ie . . two elements are added to subsequence each time . Effectively k becomes half Hence , k >>= 1 means k /= 2
Now finding k corresponding pairs to get maximum possible value of product
product from left pointers
product from right pointers
Taking the max product from two choices . Correspondingly changing the pointer 's position
Finally return product
Driver Code
Function to reorder elements of arr [ ] according to index [ ]
arr [ i ] should be present at index [ i ] index
Copy temp [ ] to arr [ ]
Driver program
Function to reorder elements of arr [ ] according to index [ ]
Fix all elements one by one
While index [ i ] and arr [ i ] are not fixed
Store values of the target ( or correct ) position before placing arr [ i ] there
Place arr [ i ] at its target ( or correct ) position . Also copy corrected index for new position
Copy old target values to arr [ i ] and index [ i ]
Driver program
Function to implement stooge sort
If first element is smaller than last , swap them
If there are more than 2 elements in the array
Recursively sort first 2 / 3 elements
Recursively sort last 2 / 3 elements
Recursively sort first 2 / 3 elements again to confirm
deriver
Calling Stooge Sort function to sort the array
Display the sorted array
Python3 code to reorder an array according to given indices
left child in 0 based indexing
right child in 1 based indexing
Find largest index from root , left and right child
Swap arr whenever index is swapped
Build heap
Swap the largest element of index ( first element ) with the last element
Swap arr whenever index is swapped
Driver Code
function to get a new node
put in the data
function to find the Sum of all the parent nodes having child node x
if root == None
if left or right child of root is ' x ' , then add the root ' s ▁ data ▁ to ▁ ' Sum ' 
recursively find the required parent nodes in the left and right subtree
utility function to find the Sum of all the parent nodes having child node x
required Sum of parent nodes
Driver Code
binary tree formation 4
/ \
2 5
/ \ / \
7 2 2 3
Python3 Program to sort even - placed elements in increasing and odd - placed in decreasing order with constant space complexity
first odd index
last index
if last index is odd
decrement j to even index
swapping till half of array
Sort first half in increasing
Sort second half in decreasing
Driver Program
A function to sort the given list using Gnome sort
Driver Code
Sorts arrar a [ 0. . n - 1 ] using Cocktail sort
reset the swapped flag on entering the loop , because it might be true from a previous iteration .
loop from left to right same as the bubble sort
if nothing moved , then array is sorted .
otherwise , reset the swapped flag so that it can be used in the next stage
move the end point back by one , because item at the end is in its rightful spot
from right to left , doing the same comparison as in the previous stage
increase the starting point , because the last stage would have moved the next smallest number to its rightful spot .
Driver code
Program to find maximum guest at any time in a party
Sort arrival and exit arrays
guests_in indicates number of guests at a time
Similar to merge in merge sort to process all events in sorted order
If next event in sorted order is arrival , increment count of guests
Update max_guests if needed
increment index of arrival array
If event is exit , decrement count
of guests .
Driver Code
Finding maximum starting time
Finding maximum ending time
CREATING AN AUXILIARY ARRAY
Lazily Calculating value at index i
Driver code
A simple method to rearrange arr [ 0. . n - 1 ] ' ▁ so ▁ that ▁ ' arr [ j ] ' ▁ becomes ▁ ' i ' ▁ if ▁ ' arr [ i ] ' ▁ is ▁ ' j
Create an auxiliary array of same size
Store result in temp [ ]
Copy temp back to arr [ ]
A utility function to print contents of arr [ 0. . n - 1 ]
Driver program
A simple method to rearrange arr [ 0. . n - 1 ] ' ▁ so ▁ that ▁ ' arr [ j ] ' ▁ becomes ▁ ' i ' ▁ if ▁ ' arr [ i ] ' ▁ is ▁ ' j
Retrieving old value and storing with the new one
Retrieving new value
A utility function to pr contents of arr [ 0. . n - 1 ]
Driver code
Prints max at first position , min at second position second max at third position , second min at fourth position and so on .
Auxiliary array to hold modified array
Indexes of smallest and largest elements from remaining array .
To indicate whether we need to copy rmaining largest or remaining smallest at next position
Store result in temp [ ]
Copy temp [ ] to arr [ ]
Driver code
Function to calculate minimum number of coins needed
Consider the first element separately , add 1 to the total if it 's of type 1
Iterate from the second element
If the current element is of type 2 then any Player can remove the element
Second pointer to reach end of type 1 elements
Increment j until arr [ j ] is equal to 1 and j is not out of bounds
Number of type 1 elements in a continious chunk
From next iteration i pointer will start from index of j
Return the minimum count of coins
Driver Code
Prints max at first position , min at second position second max at third position , second min at fourth position and so on .
Initialize index of first minimum and first maximum element
Store maximum element of array
Traverse array elements
At even index : we have to put maximum element
At odd index : we have to put minimum element
array elements back to it 's original form
Driver Code
Prints max at first position , min at second position second max at third position , second min at fourth position and so on .
initialize index of first minimum and first maximum element
traverse array elements
at even index : we have to put maximum element
at odd index : we have to put minimum element
Driver code
A Binary tree node
A utility function to check if a given node is leaf or not
This function return sum of all left leaves in a given binary tree
Initialize result
Update result if root is not None
If left of root is None , then add key of left child
Else recur for left child of root
Recur for right child of root and update res
return result
Driver program to test above function
A Python 3 program to put all negative numbers before positive numbers
print an array
Driver code
Function to return the maximized value
Number of rows and columns
Creating the Dp array
Populating the first column
Iterating over all the rows
Getting the ( i - 1 ) th max value
Adding it to the current cell
Getting the max sum from the last column
Driver code
Columns are indexed 1 - based
Moves all - ve element to end of array in same order .
Create an empty array to store result
Traversal array and store + ve element in temp array index of temp
If array contains all positive or all negative .
Store - ve element in temp array
Copy contents of temp [ ] to arr [ ]
Driver program
Rearrange
Utility that prints out an array in a line
Driver code
This function is used to find minimum distance between same repeating characters
Store minimum distance between same repeating characters
For loop to consider each element of string
Comparison of string characters and updating the minDis value
As this value would be least therefore break
If minDis value is not updated that means no repeating characters
Minimum distance is minDis - 1
Given Input
Function Call
Python 3 program to rearrange positive and negative numbers
Move forward the positive pointer till negative number number not encountered
Move forward the negative pointer till positive number number not encountered
Swap array elements to fix their position .
Break from the while loop when any index exceeds the size of the array
Driver code
Function to find all possible numbers that can be obtained by adding A or B to N exactly M times
For maintaining increasing order
Smallest number that can be achieved
If A and B are equal , the only number that can be onbtained is N + M * A
For finding other numbers , subtract A from number 1 time and add B to number 1 time
Driver Code
Given Input
Function Call
Print array function
Driver code
before modification
out of order positive element
find out of order negative element in remaining array
out of order negative element
find out of order positive element in remaining array
after modification
Python3 implementation of the above approach
Driver code
Function call
Function to segregate even odd numbers
Swapping even and odd numbers
Printing segregated array
Driver Code
A binary tree node
Pass in a sum variable as an accumulator
Check whether this node is a leaf node and is left
Pass 1 for left and 0 for right
A wrapper over above recursive function
Use the above recursive function to evaluate sum
Let us construct the Binary Tree shown in the above figure
Node structure
Returns True if trees with roots as root1 and root 2 are mirror
If both trees are empty , then they are mirror images
For two trees to be mirror images , the following three conditions must be true 1 - Their root node 's key must be same  2 - left subtree of left tree and right subtree  of the right tree have to be mirror images  3 - right subtree of left tree and left subtree  of right tree have to be mirror images  
If none of the above conditions is true then root1 and root2 are not mirror images
returns true if the tree is symmetric i . e mirror image of itself
Check if tree is mirror of itself
Let 's construct the tree show in the above figure
Function to check whether Matrix A [ ] [ ] can be transformed to Matrix B [ ] [ ] or not
Traverse the matrix to perform horizontal operations
Calculate difference
Update next X elements
Traverse the matrix to perform vertical operations
Calculate difference
Update next K elements
A [ i ] [ j ] is not equal to B [ i ] [ j ]
Conversion is not possible
Conversion is possible
Driver Code
Input
A structure to store an entry of heap . The entry contains a value from 2D array , row and column numbers of the value
value to be stored
Row number of value in 2D array
Column number of value in 2D array
A utility function to minheapify the node harr [ i ] of a heap stored in harr [ ]
This function returns kth smallest element in a 2D array mat [ ] [ ]
k must be greater than 0 and smaller than n * n
Create a min heap of elements from first row of 2D array
Get current heap root
Get next value from column of root 's value.  If the value stored at root was last value  in its column, then assign INFINITE as next value
Update heap root with next value
Heapify root
Return the value at last extracted root
Driver Code
Function to find minimum number of operations
Initialize map
Traverse the array
Divide current array element until it reduces to 1
Traverse the map
Find the maximum element having frequency equal to N
Stores the minimum number of operations required
Count operations required to convert current element to mx
Print the answer
Given array
Size of the array
Function to find the winner
Backtrack from N to 1
Driver Code
returns maximum in arr [ ] of size n
driver code
Python3 code to find largest three elements in an array
It uses Tuned Quicksort with
avg . case Time complexity = O ( nLogn )
to handle duplicate values
Driver code
Function to find the minimum count of characters required to be deleted to make frequencies of all characters unique
Stores frequency of each distinct character of str
Store frequency of each distinct character such that the largest frequency is present at the top
Stores minimum count of characters required to be deleted to make frequency of each character unique
Traverse the string
Update frequency of str [ i ]
Traverse the map
Insert current frequency into pq
Traverse the priority_queue
Stores topmost element of pq
Pop the topmost element
If pq is empty
Return cntChar
If frequent and topmost element of pq are equal
If frequency of the topmost element is greater than 1
Insert the decremented value of frequent
Update cntChar
Driver Code
Stores length of str
Function for calculating mean
Function for calculating median
First we sort the array
check for even case
Driver code
Function call
A binary tree node
A constructor to create a new Node
Return the sum of left leaf nodes
Using a stack for Depth - First Traversal of the tree
sum holds the sum of all the left leaves
Check if currentNode 's left child is a leaf node
if currentNode is a leaf , add its data to the sum
Driver Code
Function to find the value of X and Y having minimum value of abs ( X - Y )
If N is an odd number
If N is an even number
Driver Code
Function to find the maximum sum subsequence
Base Case
If current state is already calculated then use it
If current element is positive
Update ans and recursively call with update value of flag
Else current element is negative
Update ans and recursively call with update value of flag
Return maximum sum subsequence
Function that finds the maximum sum of element of the subsequence with alternate + ve and - ve signs
Create auxiliary array dp [ ] [ ]
Function call
Driver Code
Given array arr [ ]
Function call
Function to find a winner of the game if both the player plays optimally
Stores the count of vowels and consonants
Traverse the string
Check if character is vowel
Increment vowels count
Otherwise increment the consonants count
Check if Player B wins
Check if Player A wins
Check if Player A wins
If game ends in a Draw
Given String s
Function Call
Function to compute prefix - sum of the input array
Update maxi by k maximum values from maxi and cand
Here cand and maxi arrays are in non - increasing order beforehand . Now , j is the index of the next cand element and i is the index of next maxi element . Traverse through maxi array . If cand [ j ] > maxi [ i ] insert cand [ j ] at the ith position in the maxi array and remove the minimum element of the maxi array i . e . the last element and increase j by 1 i . e . take the next element from cand .
Insert prefix_sum [ i ] to mini array if needed
Traverse the mini array from left to right . If prefix_sum [ i ] is less than any element then insert prefix_sum [ i ] at that position and delete maximum element of the mini array i . e . the rightmost element from the array .
Function to compute k maximum overlapping sub - array sums
Compute the prefix sum of the input array .
Set all the elements of mini as + infinite except 0 th . Set the 0 th element as 0.
Set all the elements of maxi as - infinite .
Initialize cand array .
For each element of the prefix_sum array do : compute the cand array . take k maximum values from maxi and cand using maxmerge function . insert prefix_sum [ i ] to mini array if needed using insertMini function .
Elements of maxi array is the k maximum overlapping sub - array sums . Print out the elements of maxi array .
Test case 1
Test case 2
Function to print smallest k numbers in arr [ 0. . n - 1 ]
For each arr [ i ] find whether it is a part of n - smallest with insertion sort concept
find largest from first k - elements
if largest is greater than arr [ i ] shift all element one place left
make arr [ k - 1 ] = arr [ i ]
print result
Driver program
Python3 program to prints first k pairs with least sum from two arrays .
Function to find k pairs with least sum such that one elemennt of a pair is from arr1 [ ] and other element is from arr2 [ ]
Stores current index in arr2 [ ] for every element of arr1 [ ] . Initially all values are considered 0. Here current index is the index before which all elements are considered as part of output .
Initialize current pair sum as infinite
To pick next pair , traverse for all elements of arr1 [ ] , for every element , find corresponding current element in arr2 [ ] and pick minimum of all formed pairs .
Check if current element of arr1 [ ] plus element of array2 to be used gives minimum sum
Update index that gives minimum
update minimum sum
Driver code
Function that counts the number of strings of length 3 that can be made with given m 0 s and n 1 s
Print the count of strings
Driver Code
Given count of 1 s and 0 s
Function call
Function to return the maximum count of subsets possible which satisfy the above condition
Sort the array in descending order
Stores the count of subsets
Stores the size of the current subset
Check for the necessary conditions
Driver Code
Python3 program to implement the above approach
Function to find the maximum value possible of the given expression from all permutations of the array
Stores the minimum value from the array
Return the answer
Driver Code
Function to update the given query
Update top cell
Update bottom left cell
Update bottom right cell
Update top right cell
Function that updates the matrix mat [ ] [ ] by adding elements of aux [ ] [ ]
Compute the prefix sum of all columns
Compute the prefix sum of all rows
Get the final matrix by adding mat and aux matrix at each cell
Function that prints matrix mat [ ]
Traverse each row
Traverse each columns
Function that performs each query in the given matrix and print the updated matrix after each operation performed
Initialize all elements to 0
Update auxiliary matrix by traversing each query
Update Query
Compute the final answer
Print the updated matrix
Driver Code
Given 4 atrix
Given Queries
Function Call
Function to print the second largest elements
There should be atleast two elements
Sort the array
Start from second last element as the largest element is at last
If the element is not equal to largest element
Driver code
Python3 program to find sum of all left leaves
A binary tree node
Return the sum of left leaf nodes
A queue of pairs to do bfs traversal and keep track if the node is a left or right child if boolean value is true then it is a left child .
Do bfs traversal
If temp is a leaf node and left child of its parent
If it is not leaf then push its children nodes into queue
Boolean value is true here because it is left child of its parent
Boolean value is false here because it is right child of its parent
Driver Code
Function that counts the nested polygons inside another polygons
Stores the count
Child polygons can only exists if parent polygon has sides > 5
Get next nested polygon
Return the count
Given side of polygon
Function call
Function to print second largest elements
There should be atleast two elements
Find the largest element
Find the second largest element
Driver code
Function to print the second largest elements
There should be atleast two elements
If current element is smaller than first then update both first and second
If arr [ i ] is in between first and second then update second
Driver program to test above function
Function to print the number of characters having odd frequencies for each query
A function to construct the arr [ ] and prefix [ ]
Stores array length
Stores the unique powers of 2 associated to each character
Prefix array to store the XOR values from array elements
Driver Code
Function to generate maximum possible strings that can be generated
Maximum possible strings
Driver code
Function to print the desired matrix
Iterate ove all [ 0 , N ]
If is even
If row number is even print the row in forward order
if row number is odd print the row in reversed order
Given Matrix Size
Function Call
structure is used to return two values from minMax ( )
If there is only one element then return it as min and max both
If there are more than one elements , then initialize min and max
Driver Code
function to find Sum of all of the nodes of given perfect binary tree
no of leaf nodes
list of vector to store nodes of all of the levels
store the nodes of last level i . e . , the leaf nodes
store nodes of rest of the level by moving in bottom - up manner
loop to calculate values of parent nodes from the children nodes of lower level
store the value of parent node as Sum of children nodes
traverse the list of vector and calculate the Sum
Driver Code
getMinMax ( )
If array has even number of elements then initialize the first two elements as minimum and maximum
set the starting index for loop
If array has odd number of elements then initialize the first element as minimum and maximum
set the starting index for loop
In the while loop , pick elements in pair and compare the pair with max and min so far
Increment the index by 2 as two elements are processed in loop
Driver Code
Function that accepts array and list of queries and print sum of each query
Traverse through each query
Extract left and right indices
Compute sum of current query range
Print sum of current query range
Driver script
Function to count different palindromic string of length X from the given string S
Base case
Create the frequency array Intitalise frequency array with 0
Count the frequency in the string
Store frequency of the char
Check the frequency which is greater than zero
No . of different char we can put at the position of the i and x - i
Iterator pointing to the last element of the set
Decrease the value of the char we put on the position i and n - i
Different no of char we can put at the position x / 2
Return total no of different string
Driver code
Function to check if it is possible to convert a number N to 1 by a minimum use of the two operations
For the Case b % a != 0
Check if n equal to 1
Check if n is not divisible by b
Initialize a variable c
Loop until n is divisible by b
Count number of divisions
Loop until n is divisible by c
Count number of operations
Check if n is reduced to 1
Count steps
Return the total number of steps
Given n , a and b
Function Call
Python 3 program to demonstrate working of Square Root Decomposition .
original array
decomposed array
block size
Time Complexity : O ( 1 )
Time Complexity : O ( sqrt ( n ) )
traversing first block in range
traversing completely overlapped blocks in range
traversing last block in range
Fills values in input [ ]
initiating block pointer
calculating size of block
building the decomposed array
entering next block incementing block pointer
We have used separate array for input because the purpose of this code is to explain SQRT decomposition in competitive programming where we have multiple inputs .
Python3 implementation of the above approach
Count leading zeros
It removes i characters starting from index 0
Check each digit of the N
If digit is K break it
For odd numbers
Add D1 to A and D2 to B
If the digit is not K , no need to break String D in A and 0 in B
Remove leading zeros
Print the answer
Driver code
Python3 program to do range minimum query in O ( 1 ) time with O ( n * n ) extra space and O ( n * n ) preprocessing time .
lookup [ i ] [ j ] is going to store index of minimum value in arr [ i . . j ]
Structure to represent a query range
Fills lookup array lookup [ n ] [ n ] for all possible values of query ranges
Initialize lookup [ ] [ ] for the intervals with length 1
Fill rest of the entries in bottom up manner
To find minimum of [ 0 , 4 ] , we compare minimum of arr [ lookup [ 0 ] [ 3 ] ] with arr [ 4 ] .
Prints minimum of given m query ranges in arr [ 0. . n - 1 ]
Fill lookup table for all possible input queries
One by one compute sum of all queries
Left and right boundaries of current range
Print sum of current query range
Driver code
Python Program to find the minimum hike of each employee such that no adjacent employee feels unfair
As hikes are positive integers , keeping minimum value
Pass - 1 : compare with previous employee
Pass - 2 : compare with Next employee
Driver Code
Function Call
result -> [ 2 , 1 , 3 , 2 , 1 , 2 ]
Function Call
result -> [ 1 , 2 , 3 , 1 ]
Function Call
result -> [ 1 , 2 ]
Python3 program to do range minimum query in O ( 1 ) time with O ( n Log n ) extra space and O ( n Log n ) preprocessing time
lookup [ i ] [ j ] is going to store index of minimum value in arr [ i . . j ] . Ideally lookup table size should not be fixed and should be determined using n Log n . It is kept constant to keep code simple .
Structure to represent a query range
Fills lookup array lookup [ ] [ ] in bottom up manner .
Initialize M for the intervals with length 1
Compute values from smaller to bigger intervals
Compute minimum value for all intervals with size 2 ^ j
For arr [ 2 ] [ 10 ] , we compare arr [ lookup [ 0 ] [ 3 ] ] and arr [ lookup [ 3 ] [ 3 ] ]
Returns minimum of arr [ L . . R ]
For [ 2 , 10 ] , j = 3
For [ 2 , 10 ] , we compare arr [ lookup [ 0 ] [ 3 ] ] and arr [ lookup [ 3 ] [ 3 ] ] ,
Prints minimum of given m query ranges in arr [ 0. . n - 1 ]
Fills table lookup [ n ] [ Log n ]
One by one compute sum of all queries
Left and right boundaries of current range
Print sum of current query range
Driver Code
function to find sum of all of the nodes of given perfect binary tree
function to find sum of all of the nodes of given perfect binary tree
no of leaf nodes
sum of nodes at last level
sum of all nodes
Driver Code
dp table
A recursive function to find the update the dp table
If we reach end of the String
If subproblem has been computed
Initialise variable to find the maximum length
Choose the current character
Omit the current character
Return the store answer to the current subproblem
Function to find the longest Subsequence with different adjacent character
Length of the String s
Return the final ans after every recursive call
Driver Code
Function call
Utility method to add value val , to range [ lo , hi ]
Utility method to get actual array from operation array
convert array into prefix sum array
method to print final updated array
Driver code
Range add Queries
Function to return the maximum profit
Find the farthest decreasing span of prices before prices rise
Find the farthest increasing span of prices before prices fall again
Check if the current buying price is greater than that of the previous transaction
Store the profit
Remove the previous transaction
Check if the current selling price is less than that of the previous transactions
Store the new profit
Remove the previous transaction
Add the new transactions
Finally store the profits of all the transactions
Add the highest K profits
Return the maximum profit
Driver code
Function to find the sum within the given range
generating array from given sequence
calculate the desired sum
return the sum
initialise the range
Calculating GCD using euclid algorithm
Filling the prefix and suffix array
Filling the prefix array following relation prefix ( i ) = GCD ( prefix ( i - 1 ) , arr ( i ) )
Filling the suffix array following the relation suffix ( i ) = GCD ( suffix ( i + 1 ) , arr ( i ) )
To calculate gcd of the numbers outside range
If l = 0 , we need to tell GCD of numbers from r + 1 to n
If r = n - 1 we need to return the gcd of numbers from 1 to l
Driver code
Python3 program to find the maximum count of values that follow the given condition
Function to find the maximum count of values that follow the given condition
Initializing the max - heap for the array A [ ]
Adding the values of A [ ] into max heap
Adding the values of B [ ] into max heap
Counter variable
Loop to iterate through the heap
Comparing the values at the top . If the value of heap A [ ] is greater , then counter is incremented
Driver code
Number of elements less than or equal to a given number in a given subarray and allowing update operations .
updating the bit array of a valid block
answering the query
traversing the first block in range
Traversing completely overlapped blocks in range for such blocks bit array of that block is queried
Traversing the last block
Preprocessing the array
updating the bit array at the original and new value of array
Driver Code
size of block size will be equal to square root of n
initialising bit array of each block as elements of array cannot exceed 10 ^ 4 so size of bit array is accordingly
function to count elements within given range
initialize result
check if element is in range
driver function
Answer queries
Function to return the smallest product of edges
If the source is equal to the destination
Initialise the priority queue
Visited array
While the priority - queue is not empty
Current node
Current product of distance
Popping the top - most element
If already visited continue
Marking the node as visited
If it is a destination node
Traversing the current node
If no path exists
Driver code
Graph as adjacency matrix
Input edges
print ( gr ) ; Source and destination
Dijkstra
function to find first index >= x
function to find last index <= x
function to count elements within given range
initialize result
driver function
Preprocess array
Answer queries
implementation of finding number represented by binary subarray
Fills pre [ ]
returns the number represented by a binary subarray l to r
if r is equal to n - 1 r + 1 does not exist
Driver Code
function to count element Time complexity O ( n ^ 2 ) worst case
answer for query
0 based index
iterate for all elements
check if the element divides all numbers in range
no of elements
if all elements are divisible by a [ i ]
answer for every query
Driver Code
Function to find the minimum number of binary strings to represent a number
Storing digits in correct order
Find the maximum digit in the array
Traverse for all the binary strings
If digit at jth position is greater than 0 then substitute 1
Driver code
Python3 program to find smallest integer X such that sum of its XOR with range is maximum .
Function to make prefix array which counts 1 's of each bit up to that number
Making a prefix array which sums number of 1 's up to  that position
If j - th bit of a number is set then add one to previously counted 1 's
Function to find X
Initially taking maximum value all bits 1
Iterating over each bit
get 1 ' s ▁ at ▁ ith ▁ bit ▁ between ▁ the ▁ ▁ range ▁ L - R ▁ by ▁ subtracting ▁ 1' s till Rth number - 1 's till L-1th number
If 1 ' s ▁ are ▁ more ▁ than ▁ or ▁ equal ▁ ▁ to ▁ 0' s then unset the ith bit from answer
Set ith bit to 0 by doing Xor with 1
Driver Code
Function to execute type 1 query
incrementing the array by 1 for type 1 queries
Function to execute type 2 query
If the query is of type 1 function call to type 1 query
If the query is of type 2 recursive call to type 2 query
Input size of array amd number of queries
Build query matrix
Perform queries
printing the result
Function to create the record array
Driver Code
Build query matrix
If query is of type 2 then function call to record_sum
If query is of type 1 then simply add 1 to the record array
for type 1 queries adding the contains of record array to the main array record array
printing the array
Python3 program to perform range queries over range queries .
For prefix sum array
This function is used to apply square root decomposition in the record array
Traversing first block in range
Traversing completely overlapped blocks in range
Traversing last block in range
Function to print the resultant array
Driver code
If query is of type 2 then function call to record_func
If query is of type 1 then simply add 1 to the record array
Merging the value of the block in the record array
If query is of type 1 then the array elements are over - written by the record array
The prefix sum of the array
Printing the resultant array
Structure to represent a query range
Find the root of the group containing the element at index x
merge the two groups containing elements at indices x and y into one group
make n subsets with every element as its root
consecutive elements equal in value are merged into one single group
Driver Code
check if the current element in consideration is equal to x or not if it is equal , then x exists in the range
Print if x exists or not
Function to find the distinct pairs from 1 - a & 1 - b such that their sum is divisible by n .
Iterate over 1 to a to find distinct pairs
For each integer from 1 to a b / n integers exists such that pair / sum is divisible by n
If ( i % n + b % n ) >= n one more pair is possible
Return answer
Driver code
Function to find the distinct pairs from 1 - a & 1 - b such that their sum is divisible by n .
if first element is bigger then swap
count is store the number of pair .
we use temp for breaking a loop .
count when a is greater .
Count when a is smaller but b is greater
Count when a and b both are smaller
For storing The pair in count .
return the number of pairs .
Driver code
Python 3 Program to answer Q queries to find number of times an element x appears x times in a Query subarray
Returns the count of number x with frequency x in the subarray from start to end
map for frequency of elements
store frequency of each element in arr [ start end ]
Count elements with same frequency as value
Driver code
2D array of queries with 2 columns
calculating number of queries
Python3 implementation of above approach
See if we can buy less than 10 items Using 10 Rs coins and one r Rs coin
We can always buy 10 items
Driver Code
function that answers every query in O ( r - l )
traverse from l to r and count the required indexes
Driver Code
1 - st query
2 nd query
Python3 program calculate the sum of diagonal nodes .
A binary tree node structure
To map the node with level - index
Recursvise function to calculate sum of elements where level - index is same
If there is no child then return
Add the element in the group of node whose level - index is equal
Left child call
Right child call
Function call
For different values of level - index add te sum of those node to answer
Driver code
Build binary tree
Function Call
Print the daigonal sums
Python program to count the number of indexes in range L R such that Ai = Ai + 1
array to store count of index from 0 to i that obey condition
precomputing prefixans [ ] array
traverse to compute the prefixans [ ] array
def that answers every query in O ( 1 )
Driver Code
pre - computation
1 - st query
2 nd query
Function to count subarrays with Prime sum
USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array " prime [ 0 . . n ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
Remaining part of SIEVE
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Initialize result
Traverse through the array
return answer
Driver Code
Function to check if the given number has repeated digit or not
Traversing through each digit
if the digit is present more than once in the number
return 0 if the number has repeated digit
return 1 if the number has no repeated digit
Function to find total number in the given range which has no repeated digit
Traversing through the range
Add 1 to the answer if i has no repeated digit else 0
Driver 's Code 
Calling the calculate
returns the minimum number of swaps of a binary string passed as the argument to make it alternating
counts number of zeroes at odd and even positions
counts number of ones at odd and even positions
alternating string starts with 0
alternating string starts with 1
calculates the minimum number of swaps
Driver code
Maximum
Prefix Array
Function to check if the given number has repeated digit or not
Traversing through each digit
if the digit is present more than once in the number
return 0 if the number has repeated digit
return 1 if the number has no repeated digit
Function to pre calculate the Prefix array
Traversing through the numbers from 2 to MAX
Generating the Prefix array
Calclute Function
Answer
Pre - calculating the Prefix array .
Calling the calculate function to find the total number of number which has no repeated digit
Creates a diff array D [ ] for A [ ] and returns it after filling initial values .
We use one extra space because update ( l , r , x ) updates D [ r + 1 ]
Does range update
Prints updated Array
Note that A [ 0 ] or D [ 0 ] decides values of rest of the elements .
Array to be updated
Create and fill difference Array
After below update ( l , r , x ) , the elements should become 20 , 15 , 20 , 40
After below updates , the array should become 30 , 35 , 70 , 60
Python program to find maximum contiguous subarray Function to find the maximum contiguous subarray
Driver function to check the above function
Python3 program to distribute n ^ 2 numbers to n people
2D array for storing the final result
Using modulo to go to the firs column after the last column
Making a 2D array containing numbers
Driver Code
Do not compare for all elements . Compare only when max_ending_here > 0
Returns minimum number of rooms required to perform classes of n groups in m slots with given schedule .
Store count of classes happening in every slot .
initialize all values to zero
Number of rooms required is equal to maximum classes happening in a particular slot .
Driver Code
Python program to find maximum contiguous subarray
Driver function to check the above function
Function to find the maximum contiguous subarray and print its starting and end index
Driver program to test maxSubArraySum
Returns minimum possible sum in array B [ ]
driver code
Function to allocate memory to blocks as per Next fit algorithm
Initially no block is assigned to any process
pick each process and find suitable blocks according to its size ad assign to it
Do not start from beginning
allocate block j to p [ i ] process
Reduce available memory in this block .
mod m will help in traversing the blocks from starting block after we reach the end .
Driver Code
utility that allocates a new node with the given data and None left and right pointers .
Function to prroot to leaf path which satisfies the condition
Base condition
Check if current node makes a pair with any of the existing elements in set .
Insert current node in set
If result returned by either left or right child is True , return True .
Remove current node from hash table
A wrapper over printPathUtil ( )
create an empty hash table
Recursively check in left and right subtrees .
Driver Code
Prints beginning and ending indexes of subarray of size k with minimum average
k must be smaller than or equal to n
Initialize beginning index of result
Compute sum of first subarray of size k
Initialize minimum sum as current sum
Traverse from ( k + 1 ) ' th ▁ ▁ element ▁ to ▁ n ' th element
Add current item and remove first item of previous subarray
Update result if needed
Driver Code
Subarray size
Prints the smalles possible number with digit sum ' s ' and ' m ' number of digits .
If sum of digits is 0 , then a number is possible only if number of digits is 1.
Sum greater than the maximum possible sum .
Create an array to store digits of result
Fill from most significant digit to least significant digit .
Fill 9 first to make the number largest
If remaining sum becomes less than 9 , then fill the remaining sum
Driver code
Returns minimum number of jumps to reach arr [ h ] from arr [ l ]
Base case : when source and destination are same
when nothing is reachable from the given source
Traverse through all the points reachable from arr [ l ] . Recursively get the minimum number of jumps needed to reach arr [ h ] from these reachable points .
Driver program to test above function
Stores the overlapping state
Recursive function to find the maximum number of bananas that can be transferred to A distance using memoization
Base Case where count of bananas is less that the given distance
Base Case where count of bananas is less that camel 's capacity
Base Case where distance = 0
If the current state is already calculated
Stores the maximum count of bananas
Stores the number of trips to transfer B bananas using a camel of capacity C
Loop to iterate over all the breakpoints in range [ 1 , A ]
Recursive call over the remaining path
Update the maxCount
Memoize the current value
Return answer
Function to find the maximum number of bananas that can be transferred
Function Call
Driver Code
Function to calculate the total number of arrays
If the size of the array is P
Check if all elements are used atlease once
Check if this state is already calculated
Initialize the result
Use a number from the list of unused numbers
There are ' unused ' number of favourable choices
Use a number from already present number atlease M distance back
There are ' used ▁ - ▁ M ' number of favourable choices
Store the result
Function to solve the problem
Initialize DP table : dp [ i ] [ j ] [ j ] i : current position / index j : number of used elements k : number of unused elements
Driver Code
Returns Minimum number of jumps to reach end
jumps [ 0 ] will hold the result
Start from the second element , move from right to left and construct the jumps [ ] array where jumps [ i ] represents minimum number of jumps needed to reach arr [ m - 1 ] form arr [ i ]
If arr [ i ] is 0 then arr [ n - 1 ] can 't be reached from here
If we can directly reach to the end point from here then jumps [ i ] is 1
Otherwise , to find out the minimum number of jumps needed to reach arr [ n - 1 ] , check all the points reachable from here and jumps [ ] value for those points
initialize min value
following loop checks with all reachavle points and takes the minimum
Handle overflow
or INT_MAX
Driver program to test above function
Stores the dp states
Check if a number is a prime or not
Function to generate all prime numbers that are less than or equal to n
Base cases .
If prime [ p ] is not changed , then it is a prime
Update all multiples of as non - prime
Function to find the count of N - digit numbers such that the sum of digits is a prime number
If end of array is reached
If the sum is equal to a prime number
Otherwise
If the dp - states are already computed
If index = 1 , any digit from [ 1 - 9 ] can be placed . If N = 1 , 0 also can be placed .
Otherwise , any digit from [ 0 - 9 ] can be placed .
Return the answer .
Find all primes less than or equal to 1000 , which is sufficient for N upto 100
Given Input
Function call
Stores the result of the same recursive calls
Recursive function to find the maximum number of groups that will receive fresh donuts
Store the result for the current state
Store the key and check if it is present in the hashmap
If already calculated
If left is 0
Traverse the array [ ] arr
Decrement arr [ i ]
Update the maximum number of groups
Increment arr [ i ] by 1
Otherwise , traverse the given array [ ] arr
Decrement arr [ i ]
Update the maximum number of groups
Increment arr [ i ] by 1
Memoize the result and return it
Function to find the maximum number of groups that will receive fresh donuts
Stores count of remainder by K
Traverse the array [ ] arr
Hashmap to memoize the results
Store the maximum number of groups
Return the answer
Driver Code
Returns length of smallest subarray with sum greater than x . If there is no subarray with given sum , then returns n + 1
Initialize length of smallest subarray as n + 1
Pick every element as starting point
Initialize sum starting with current start
If first element itself is greater
Try different ending points for curremt start
add last element to current sum
If sum becomes more than x and length of this subarray is smaller than current smallest length , update the smallest length ( or result )
Driver program to test above function
Returns length of smallest subarray with sum greater than x . If there is no subarray with given sum , then returns n + 1
Initialize current sum and minimum length
Initialize starting and ending indexes
Keep adding array elements while current sum is smaller than or equal to x
If current sum becomes greater than x .
Update minimum length if needed
remove starting elements
Driver program
function to get a new node
put in the data
function to find the Sum of nodes on the longest path from root to leaf node
if true , then we have traversed a root to leaf path
update maximum Length and maximum Sum according to the given conditions
recur for left subtree
recur for right subtree
utility function to find the Sum of nodes on the longest path from root to leaf node
if tree is NULL , then Sum is 0
finding the maximum Sum ' maxSum ' for the maximum Length root to leaf path
required maximum Sum
Driver Code
binary tree formation 4
/ \
2 5
/ \ / \
7 1 2 3
/
6
Function to find the number of arrays of length L such that each element divides the next element
Stores the number of sequences of length i that ends with j
Base Case
Iterate over the range [ 0 , l ]
Iterate for all multiples of j
Incrementing dp [ i + 1 ] [ k ] by dp [ i ] [ j ] as the next element is multiple of j
Stores the number of arrays
Add all array of length L that ends with i
Return the resultant count
Driver Code
Returns count of minimum operations to convert a zero array to target array with increment and doubling operations . This function computes count by doing reverse steps , i . e . , convert target to zero array .
Initialize result ( Count of minimum moves )
Keep looping while all elements of target don 't become 0.
To store count of zeroes in current target array
To find first odd element
If odd number found
If 0 , then increment zero_count
All numbers are 0
All numbers are even
Divide the whole array by 2 and increment result
Make all odd numbers even by subtracting one and increment result .
Driver Code
Function to find the maximum sum of array elements chosen by Player A according to the given criteria
Store the key
Corner Case
Check if all the elements can be taken or not
If the difference is less than or equal to the available chances then pick all numbers
Find the sum of array elements over the range [ start , N ]
If yes then return that value
Traverse over the range [ 1 , 2 * M ]
Sum of elements for Player A
Even chance sum can be obtained by subtracting the odd chances sum - total and picking up the maximum from that
Storing the value in dictionary
Return the maximum sum of odd chances
Driver Code
Stores the precomputed values
Function Call
Python3 to find the count subset having product less than k
declare four vector for dividing array into two halves and storing product value of possible subsets for them
ignore element greater than k and divide array into 2 halves
ignore element if greater than k
generate all subsets for 1 st half ( vect1 )
push only in case subset product is less than equal to k
generate all subsets for 2 nd half ( vect2 )
push only in case subset product is less than equal to k
sort subset2
for null subset decrement the value of count
return count
Driver Code
Function to calculate the maximum sum subsequence with consecutive terms having different parity
Base Case
Store the parity of number at the ith position
If the dp state has already been calculated , return it
If the array is traversed and no element has been selected yet then select the current element
If the parity of the current and previously selected element are different , then select the current element
Skip the current element and move to the next element
Return the result
Function to calculate the maximum sum subsequence with consecutive terms having different parity
Initialize the dp [ ] array with - 1
Initially the prev value is set to say 2 , as the first element can anyways be selected
Driver Code
Returns minimum number of count operations required to make arr [ ] palindrome
Initialize result
Start from two corners
If corner elements are same , problem reduces arr [ i + 1. . j - 1 ]
If left element is greater , then we merge right two elements
need to merge from tail .
Else we merge left two elements
Driver program to test above
Returns the smallest number that cannot be represented as sum of subset of elements from set represented by sorted array arr [ 0. . n - 1 ]
Initialize result
Traverse the array and increment ' res ' if arr [ i ] is smaller than or equal to ' res ' .
Driver program to test above function
Stores the Bitwise XOR of every possible subset
Function to generate all combinations of subsets and store their Bitwise XOR in set S
If the end of the subset is reached
Stores the Bitwise XOR of the current subset
Iterate comb [ ] to find XOR
Insert the Bitwise XOR of R elements
Otherwise , iterate to generate all possible subsets
Recursive call for next index
Function to find the size of the set having Bitwise XOR of all the subsets of the given array
Iterate ove the given array
Generate all possible subsets
Print the size of the set
Driver Code
Function Call
Python3 program to print largest contiguous array sum
Function to find the maximum contiguous subarray and print its starting and end index
Driver program to test maxSubArraySum
Function to find the length of the longest subarray in arr1 which is a subsequence in arr2
Length of the array arr1
Length of the array arr2
Length of the required longest subarray
Initialize DParray
Traverse array arr1
Traverse array arr2
arr1 [ i - 1 ] contributes to the length of the subarray
Otherwise
Find the maximum value present in DP
Return the result
Driver Code
Function call to find the length of the longest required subarray
Returns minimum difference between any pair
Initialize difference as infinite
Find the min diff by comparing difference of all possible pairs in given array
Return min diff
Driver code
DP array for memoization
Utility function to count N digit numbers with digit i not appearing more than max_digit [ i ] consecutively
If number with N digits is generated
Create a reference variable
Check if the current state is already computed before
Initialize ans as zero
Check if count of previous digit has reached zero or not
Fill current position only with digits that are unequal to previous digit
Else set the value of count for this new digit accordingly from max_digit [ ]
Function to count N digit numbers with digit i not appearing more than max_digit [ i ] consecutive times
Stores the final count
Print the total count
Driver Code
Function Call
Returns minimum difference between any pair
Sort array in non - decreasing order
Initialize difference as infinite
Find the min diff by comparing adjacent pairs in sorted array
Return min diff
Driver code
Python3 program to mark numbers as multiple of 2 or 5
Driver code
Iterate through a to b , If it is a multiple of 2 or 5 Mark index in array as 1
A utility function to create a new Binary Tree node with given data
print the tree in LVR ( Inorder traversal ) way .
Main function which truncates the binary tree .
Base Case
Initialize left and right Sums as Sum from root to this node ( including this node )
Recursively prune left and right subtrees
Get the maximum of left and right Sums
If maximum is smaller than k , then this node must be deleted
A wrapper over pruneUtil ( )
Driver Code
k is 45
A class that represents an individual node in a Binary Tree
A function to do postorder tree traversal
First recur on left child
the recur on right child
now print the data of node
A function to do inorder tree traversal
First recur on left child
then print the data of node
now recur on right child
A function to do preorder tree traversal
First print the data of node
Then recur on left child
Finally recur on right child
Driver code
Python3 program to implement the above approach
Function to find the maximum subarray sum greater than or equal to 0 by removing K array elements
Base case
If overlapping subproblems already occurred
Include current element in the subarray
If K elements already removed from the subarray
Remove current element from the subarray
Utility function to find the maximum subarray sum by removing at most K array elements
Stores maximum subarray sum by removing at most K elements
Calculate maximum element in dp [ ] [ ]
Update res
If all array elements are negative
Update res
Driver Code
Python 3 program to implement the above approach
Function to generate all prime numbers using Sieve of Eratosthenes
Function to check if a number is prime or not
prime [ i ] : Check if i is a prime number or not
Iterate over the range [ 2 , sqrt ( n ) ]
If p is a prime number
Mark all multiples of i to false
Update i
Function to find minimum operations to make all elements of at least one row of the matrix as prime numbers
dp [ i ] : Stores minimum operations to get i prime numbers in a row
Traverse the array
Stores count of prime numbers in a i - th row
Iterate over the range [ ( 1 << m ) - 1 , 0 ]
If a row exist which contains j prime numbers
Update dp [ j bitmask ]
Update dp [ bitmask ]
Return minimum operations to get a row of the matrix with all prime numbers
Function to count prime numbers in a row
i - th bit of bitmask check if i - th column is a prime or not
Traverse the array
if a [ i ] is a prime number
Update bitmask
Driver Code
Stores count of columns in the matrix
Stores length
Calculate all prime numbers in range [ 1 , max ] using sieve
Function Call
Python3 program for the above approach
Function to find the minimum cost to delete all array elements
Sort the input array
Store the maximum time to delete the array in the worst case
Store the result in cost [ ] [ ] table
Base Case
Store the minimum of all cost values of the previous index
Iterate from range [ 1 , n ] using variable i
Update prev
Iterate from range [ 1 , m ] using variable j
Update cost [ i ] [ j ]
Update the prev
Store the minimum cost to delete all elements
Find the minimum of all values of cost [ n ] [ j ]
Print minimum cost
Driver Code
Function Call
Python3 code to for marking multiples
index >> 5 corresponds to dividing index by 32 index & 31 corresponds to modulo operation of index by 32 Function to check value of bit position whether it is zero or one
Sets value of bit for corresponding index
Driver code
Size that will be used is actual_size / 32 ceil is used to initialize the array with positive number
Array is dynamically initialized as we are calculating size at run time
Iterate through every index from a to b and call setbit ( ) if it is a multiple of 2 or 5
Returns length of the longest common subarray with same sum
Initialize result
One by one pick all possible starting points of subarrays
Initialize sums of current subarrays
Conider all points for starting with arr [ i ]
Update sums
If sums are same and current length is more than maxLen , update maxLen
Driver program to test above function
Function to count the number of LIS in the array nums [ ]
Base Case
Initialize dp_l array with 1 s
Initialize dp_c array with 1 s
If current element is smaller
Store the maximum element from dp_l
Stores the count of LIS
Traverse dp_l and dp_c simultaneously
Update the count
Return the count of LIS
Given array arr [ ]
Function Call
''Tree node
''Function to return new tree node
''Function to check if the tree is even-odd tree
'' Stores nodes of each level
'' Store the current level  of the binary tree
'' Traverse until the  queue is empty
'' Stores the number of nodes  present in the current level
'' Insert left and right child  of node into the queue
'' If the level is even
'' If the nodes in this  level are in strictly  increasing order or not
'' If the level is odd
'' If the nodes in this  level are in strictly  decreasing order or not
'' Increment the level count
''Driver code
'' Construct a Binary Tree
'' Check if the binary tree  is even-odd tree or not
Returns largest common subarray with equal number of 0 s and 1 s
Find difference between the two
Creates an empty hashMap hM
Initialize sum of elements
Initialize result
Traverse through the given array
Add current element to sum
To handle sum = 0 at last index
If this sum is seen before , then update max_len if required
Else put this sum in hash table
Driver code
Python3 program to implement the above approach
Function which solves the desired problem
Base Case
If the entire string has been traversed
If precomputed subproblem occurred
Minimum run length encoding by removing the current character
Minimum run length encoding by retaining the current character
If the current and the previous characters match
Otherwise
Function to return minimum run - length encoding for string s by removing atmost k characters
Driver Code
Python3 program for the above approach
Function to calculate and store all the paths product in vector
Base Case
If reaches the bottom right corner and product is a perfect square
Find square root
If square root is an integer
Move towards down in the matrix
Move towards right in the matrix
Driver Code
Given matrix mat
Function call
Function to select m elements having maximum sum
Base case
If precomputed subproblem occurred
Either skip the current row
Iterate through all the possible segments of current row
Check if it is possible to select elements from i to j
Compuete the sum of i to j as calculated
Store the computed answer and return
Function to precompute the prefix sum for every row of the matrix
Preprocessing to calculate sum from i to j
Utility function to select m elements having maximum sum
Preprocessing step
Initialize dp array with - 1
Stores maximum sum of M elements
Driver Code
Given N
Given M
Given matrix
Function call
Function to calculate the last remaining element from the sequence
If dp [ n ] is already calculated
Base Case :
Recursive Call
Return the value of dp [ n ]
Given N
Stores the
Function Call
Initialize dp array
Function to find the maximum sum of the subsequence formed
Base Case
If already calculated state occurs
Include the current element
Exclude the current element
Update the maximum ans
Function to calculate maximum sum of the subsequence obtained
Print the maximum sum possible
Given array
Size of the array
Function call
Function to sort an array according absolute difference with x .
Store values in a map with the difference with X as key
Update the values of array
Function to print the array
Driver code
Python3 program to implement the above approach
Base Case
Recursive Call for n - 1
Check if n is divisible by 2
Check if n is divisible by 3
Returns a tuple ( a , b ) , where a : Minimum steps to obtain x from 1 b : Previous number
Function that find the optimal solution
Print the length
Exit condition for loop = - 1 when n has reached 1
Return the sequence in reverse order
Given N
Function Call
Function to find the number of completely filled vessels
Store the vessels
Assuming all water is present in the vessel at the first level
Store the number of vessel that are completely full
Traverse all the levels
Number of vessel at each level is j
Calculate the exceeded amount of water
If current vessel has less than 1 unit of water then continue
One more vessel is full
If left bottom vessel present
If right bottom vessel present
Number of levels
Number of seconds
Function call
Python function to sort the array arr [ 0. . n - 1 ] in wave form , i . e . , arr [ 0 ] >= arr [ 1 ] <= arr [ 2 ] >= arr [ 3 ] <= arr [ 4 ] >= arr [ 5 ]
sort the array
Swap adjacent elements
Driver program
Function to count maximum occurring subsequence using only those characters whose indexes are in GP
Initialize 1 - D array and 2 - D dp array to 0
Iterate till the length of the given string
Update ans for 1 - length subsequence
Update ans for 2 - length subsequence
Return the answer
Given string s
Function call
Python function to sort the array arr [ 0. . n - 1 ] in wave form , i . e . , arr [ 0 ] >= arr [ 1 ] <= arr [ 2 ] >= arr [ 3 ] <= arr [ 4 ] >= arr [ 5 ]
Traverse all even elements
If current even element is smaller than previous
If current even element is smaller than next
Driver program
binary tree node contains data field , left and right pointer
inorder traversal
Function to remove all nodes which do not lie in th sum path
Base case
Recur for left and right subtree
if node is leaf and sum is found greater than data than remove node An important thing to remember is that a non - leaf node can become a leaf when its children are removed
Driver program to test above function
Function to count the unique sum
Set fsum [ 0 ] as ar [ 0 ]
Set rsum [ 0 ] as ar [ n ]
For each i update fsum [ i ] with ar [ i ] + fsum [ i - 1 ]
For each i from n - 1 , update rsum [ i ] with ar [ i ] + fsum [ i + 1 ]
K represent size of subset as explained above
Using above relation
Return the result
Given a number N
Function call
Python program to Merge an array of size n into another array of size m + n
Function to move m elements at the end of array mPlusN [ ]
Merges array N [ ] of size n into array mPlusN [ ] of size m + n
Current index of i / p part of mPlusN [ ]
Current index of N [ ]
Current index of output mPlusN [ ]
Take an element from mPlusN [ ] if a ) value of the picked element is smaller and we have not reached end of it b ) We have reached end of N [ ]
Otherwise take element from N [ ]
Utility that prints out an array on a line
Initialize arrays
Move the m elements at the end of mPlusN
Merge N [ ] into mPlusN [ ]
Print the resultant mPlusN
Function to return the count of such numbers
For 1 - digit numbers , the count is 10 irrespective of K
dp [ j ] stores the number of such i - digit numbers ending with j
Stores the results of length i
Initialize count for 1 - digit numbers
Compute values for count of digits greater than 1
Find the range of allowed numbers if last digit is j
Perform Range update
Prefix sum to find actual count of i - digit numbers ending with j
Update dp [ ]
Stores the final answer
Return the final answer
Driver code
Return true if array can be sorted otherwise false
Check bool array B and sorts elements for continuous sequence of 1
Sort array A from i to j
Check if array is sorted or not
Driver program to test sortedAfterSwap ( )
Structure to represent a weighted edge in graph
Structure to represent a directed and weighted graph
V . Number of vertices , E . Number of edges
Graph is represented as an array of edges .
Creates a new graph with V vertices and E edges
Function runs Bellman - Ford algorithm and prints negative cycle ( if present )
Relax all edges | V | - 1 times .
Check for negative - weight cycles
Store one of the vertex of the negative weight cycle
To store the cycle vertex
Reverse cycle [ ]
Printing the negative cycle
Driver Code
Number of vertices in graph
Number of edges in graph
Given Graph
Function Call
Return true if array can be sorted otherwise false
Check if array is sorted or not
Driver program
Method for segregation 0 and 1 given input array
Driver Code
Recursive program to find the Nth Pentanacci number
Function to print the Nth Pentanacci number
Driver code
Python3 program to count inversions in an array
Driver Code
Python3 program to check if there is exist a path between two vertices of an undirected graph .
A BFS based function to check whether d is reachable from s .
Base case
Mark all the vertices as not visited
Create a queue for BFS
Mark the current node as visited and enqueue it
Dequeue a vertex from queue and prit
Get all adjacent vertices of the dequeued vertex s If a adjacent has not been visited , then mark it visited and enqueue it
If this adjacent node is the destination node , then return true
Else , continue to do BFS
If BFS is complete without visiting d
Driver program to test methods of graph class
Create a graph given in the above diagram
Function to find the result of alternatively adding and subtracting elements in the range [ L , R ]
A boolean variable flag to alternatively add and subtract
Iterate from [ L , R ]
If flag is False , then add & toggle the flag
If flag is True subtract and toggle the flag
Return the final result
Function to find the value for each query
Iterate for each query
Driver Code
Given array
Given Queries
Function Call
Python3 code to find Two elements whose sum is closest to zero
Array should have at least two elements
Initialization of values
Driver program to test above function
Python3 program to maximize the sum of top of the stack values of S stacks by popping at most N element
Function for computing the maximum sum at the top of the stacks after popping at most N elements from S stack
Constructing a dp matrix of dimensions ( S + 1 ) x ( N + 1 )
Loop over all i stacks
Store the maximum of popping j elements up to the current stack by popping k elements from current stack and j - k elements from all previous stacks combined
Store the maximum sum of popping N elements across all stacks
dp [ S ] [ N ] has the maximum sum
Driver code
Number of stacks
Length of each stack
Maximum elements that can be popped
''Function to find X such that it is less than the target value and function is f(x) = x ^ 2
'' Initialise start and end
'' Loop till start <= end
'' Find the mid
'' Check for the left half
Store the result
Reinitialize the start point
'' Check for the right half
'' Print maximum value of x  such that x ^ 2 is less than the  targetValue
''Driver Code
'' Given targetValue;
'' Function Call
Python3 implementation using STL
Modified to sort by abolute values
Absolute value shows how close it is to zero
If found an even close value update min and store the index
Driver code
Python 3 implementation to find the number of ways to paint K cells of 3 x N grid such that No two adjacent cells are painted
Visited array to keep track of which columns were painted
Recursive Function to compute the number of ways to paint the K cells of the 3 x N grid
Condition to check if total cells painted are K
Check if any P continuous columns were left unpainted
Condition to check if no P continuous columns were left unpainted
return 0 if there are P continuous columns are left unpainted
Condition to check if No further cells can be painted , so return 0
if already calculated the value return the val instead of calculating again
Previous column was not painted
Column is painted so , make vis [ col ] = true
Condition to check if the number of cells to be painted is equal to or more than 2 , then we can paint first and third row
Condition to check if number of previous continuous columns left unpainted is less than P
Condition to check if first row was painted in previous column
Condition to check if second row was painted in previous column
Condition to check if the number of cells to be painted is equal to or more than 2 , then we can paint first and third row
Condition to check if third row was painted in previous column
Condition to check if first and third row were painted in previous column
Memoize the data and return the Computed value
Function to find the number of ways to paint 3 x N grid
Set all values of dp to - 1 ;
Set all values of Visited array to false
Driver Code
To store the assigned Edges
Flag variable to check Bridges
Function to implement DFS Traversal
Mark the current node as visited
Update the order of node v
Update the bridge_detect for node v
Traverse the adjacency list of Node v
Ignores if same edge is traversed
Ignores the edge u -- > v as v -- > u is already processed
Finds a back Edges , cycle present
Update the bridge_detect [ v ]
Else DFS traversal for current node in the adjacency list
Update the bridge_detect [ v ]
Store the current directed Edge
Condition for Bridges
Return flag
Function to print the direction of edges to make graph SCCs
Arrays to store the visited , bridge_detect and order of Nodes
DFS Traversal from vertex 1
If flag is zero , then Bridge is present in the graph
Else print the direction of Edges assigned
Function to create graph
Traverse the Edges
Push the edges in an adjacency list
Driver code
N vertices and M Edges
To create Adjacency List
Create an undirected graph
Function Call
Bool function for checking an array elements are in increasing
Bool function for checking an array elements are in decreasing
increasing and decreasing are two functions . if function return True value then print 0 otherwise 3.
Driver code
Python program to find maximumpath sum between two leaves of a binary tree
A binary tree node
Utility function to find maximum sum between anytwo leaves . This function calculates two values : 1 ) Maximum path sum between two leaves which are stored in res2 ) The maximum root to leaf path sum which is returned If one side of root is empty , then it returns INT_MIN
Base Case
Find maximumsum in left and righ subtree . Also find maximum root to leaf sums in left and righ subtrees ans store them in ls and rs
If both left and right children exist
update result if needed
Return maximum possible value for root being on one side
If any of the two children is empty , return root sum for root being on one side
The main function which returns sum of the maximum sum path betwee ntwo leaves . THis function mainly uses maxPathSumUtil ( )
Driver program to test above function
Function returns the minimum number of swaps required to sort the array
Create two arrays and use as pairs where first array is element and second array is position of first element
Sort the array by array element values to get right position of every element as the elements of second array .
To keep track of visited elements . Initialize all elements as not visited or false .
Initialize result
Traverse array elements
alreadt swapped or alreadt present at correct position
find number of nodes in this cycle and add it to ans
move to next node
update answer by adding current cycle
return answer
Driver Code
swap function
indexOf function
Return the minimum number of swaps required to sort the array
This is checking whether the current element is at the right place or not
Swap the current element with the right index so that arr [ 0 ] to arr [ i ] is sorted
Driver code
Output will be 5
Return the minimum number of swaps required to sort the array
Dictionary which stores the indexes of the input array
This is checking whether the current element is at the right place or not
If not , swap this element with the index of the element which should come here
Update the indexes in the hashmap accordingly
Driver code
Output will be 5
Function prints union of arr1 [ ] and arr2 [ ] m is the number of elements in arr1 [ ] n is the number of elements in arr2 [ ]
Print remaining elements of the larger array
Driver program to test above function
Python3 program to find union of two sorted arrays ( Handling Duplicates )
Taking max element present in either array
Finding elements from 1 st array ( non duplicates only ) . Using another array for storing union elements of both arrays Assuming max element present in array is not more than 10 ^ 7
First element is always present in final answer
Incrementing the First element ' s ▁ count ▁ ▁ in ▁ it ' s corresponding index in newtable
Starting traversing the first array from 1 st index till last
Checking whether current element is not equal to it 's previous element
Finding only non common elements from 2 nd array
By checking whether it 's already  present in newtable or not
Driver Code
Function prints Intersection of arr1 [ ] and arr2 [ ] m is the number of elements in arr1 [ ] n is the number of elements in arr2 [ ]
Driver program to test above function
Function calling
Python3 implementation to find the count of numbers possible less than N , such that every digit is from the given set of digits
Function to convert integer into the string
Recursive function to find the count of numbers possible less than N , such that every digit is from the given set of digits
Base case
Condition when the subproblem is computed previously
Condition when the number chosen till now is definietly smaller than the given number N
Loop to traverse all the digits of the given set
Loop to traverse all the digits from the given set
Store the solution for current subproblem
Function to count the numbers less then N from given set of digits
Converting the number to string
Find the solution of all the number equal to the length of the given number N
Loop to find the number less in in the length of the given number
Driver Code
Function Call
Python3 implementation
Function to return the maximum sum divisible by k from elements of v
check if sum of elements excluding the current one is divisible by k
check if sum of elements including the current one is divisible by k
Store the maximum
Driver code
Prints union of arr1 [ 0. . m - 1 ] and arr2 [ 0. . n - 1 ]
Before finding union , make sure arr1 [ 0. . m - 1 ] is smaller
Now arr1 [ ] is smaller Sort the first array and print its elements ( these two steps can be swapped as order in output is not important )
Search every element of bigger array in smaller array and print the element if not found
Prints intersection of arr1 [ 0. . m - 1 ] and arr2 [ 0. . n - 1 ]
Before finding intersection , make sure arr1 [ 0. . m - 1 ] is smaller
Now arr1 [ ] is smaller Sort smaller array arr1 [ 0. . m - 1 ]
Search every element of bigger array in smaller array and print the element if found
A recursive binary search function . It returns location of x in given array arr [ l . . r ] is present , otherwise - 1
If the element is present at the middle itself
If element is smaller than mid , then it can only be presen in left subarray
Else the element can only be present in right subarray
We reach here when element is not present in array
Driver code
Function call
A tree node structure
A utility function that prints all nodes on the path from root to target_leaf
base case
return True if this node is the target_leaf or target leaf is present in one of its descendants
This function Sets the target_leaf_ref to refer the leaf node of the maximum path sum . Also , returns the max_sum using max_sum_ref
Update current sum to hold sum of nodes on path from root to this node
If this is a leaf node and path to this node has maximum sum so far , then make this node target_leaf
If this is not a leaf node , then recur down to find the target_leaf
Returns the maximum sum and prints the nodes on max sum path
base case
find the target leaf and maximum sum
print the path from root to the target leaf
return maximum sum
Utility function to create a new Binary Tree node
Driver function to test above functions
Function to find intersection
when both are equal
Driver Code
sort
function call
A binary tree node
A utility function to allocate a new node
This function updates overall count of 1 in ' res ' And returns count 1 s going through root .
Base Case
l and r store count of 1 s going through left and right child of root respectively
maxCount represents the count of 1 s when the Node under consideration is the root of the maxCount path and no ancestors of the root are there in maxCount path
if the value at node is 1 then its count will be considered including the leftCount and the rightCount
Store the Maximum Result .
if the value at node is 1 then its count will be considered including the maximum of leftCount or the rightCount
Returns maximum count of 1 in any path in tree with given root
Initialize result
Compute and return result
Driver program
Prints union of arr1 [ 0. . n1 - 1 ] and arr2 [ 0. . n2 - 1 ]
Prints intersection of arr1 [ 0. . n1 - 1 ] and arr2 [ 0. . n2 - 1 ]
Driver Program
Function call
Prints intersection of arr1 [ 0. . n1 - 1 ] and arr2 [ 0. . n2 - 1 ]
Iterate first array
Iterate second array
Prints union of arr1 [ 0. . n1 - 1 ] and arr2 [ 0. . n2 - 1 ]
placeZeroes function
Function to itreate array
placeValue function
Hashing collision happened increment position and do recursive call
Driver code
Function to return the count of minimum coins required
To store the required sequence
Creating list of the sum of all previous bit values including that bit value
Driver code
Function to sort array
Function to print array
Driver Program
Function to find the count of set bits in all the integers from 0 to n
dp [ i ] will store the count of set bits in i Initialise the dp array
Count of set bits in 0 is 0
For every number starting from 1
If current number is even
Count of set bits in i is equal to the count of set bits in ( i / 2 )
If current element is odd
Count of set bits in i is equal to the count of set bits in ( i / 2 ) + 1
Print the count of set bits in i
Driver code
Utility function to print contents of an array
Function to sort the array of 0 s , 1 s and 2 s
Count the number of 0 s , 1 s and 2 s in the array
Update the array
Store all the 0 s in the beginning
Then all the 1 s
Finally all the 2 s
Prthe sorted array
Driver code
Python 3 implementation of the approach
Function to find the maximum rectangular area under given histogram with n bars
Create an empty stack . The stack holds indexes of hist [ ] array . The bars stored in stack are always in increasing order of their heights .
Initialize max area
Run through all bars of given histogram
If this bar is higher than the bar on top stack , push it to stack
If this bar is lower than top of stack , then calculate area of rectangle with stack top as the smallest ( or minimum height ) bar . ' i ' is ' right ▁ index ' for the top and element before top in stack is 'left index
Store the top index
Pop the top
Calculate the area with hist [ tp ] stack as smallest bar
Update max area , if needed
Now pop the remaining bars from stack and calculate area with every popped bar as the smallest bar
Function to find largest sub matrix with all equal elements
To find largest sub matrix with all elements 1
Fill dp [ ] [ ] by traversing each column from bottom to up
Maintain the histogram array
Find maximum area rectangle in Histogram
To fill dp [ ] [ ] for finding largest sub matrix with all elements 0
Maintain the histogram array
Find maximum area rectangle in Histogram
Driver code
Python3 program to find the Minimum length Unsorted Subarray , sorting which makes the complete array sorted
step 1 ( a ) of above algo
step 1 ( b ) of above algo
step 2 ( a ) of above algo
step 2 ( b ) of above algo
step 2 ( c ) of above algo
step 3 of above algo
Function to count all possible triangles with arr [ ] elements
Count of triangles
The three loops select three different values from array
The innermost loop checks for the triangle property
Sum of two sides is greater than the third
Driver code
Function to count all possible triangles with arr [ ] elements
Sort array and initialize count as 0
Initialize count of triangles
Fix the first element . We need to run till n - 3 as the other two elements are selected from arr [ i + 1. . . n - 1 ]
Initialize index of the rightmost third element
Fix the second element
Find the rightmost element which is smaller than the sum of two fixed elements The important thing to note here is , we use the previous value of k . If value of arr [ i ] + arr [ j - 1 ] was greater than arr [ k ] , then arr [ i ] + arr [ j ] must be greater than k , because the array is sorted .
Total number of possible triangles that can be formed with the two fixed elements is k - j - 1. The two fixed elements are arr [ i ] and arr [ j ] . All elements between arr [ j + 1 ] to arr [ k - 1 ] can form a triangle with arr [ i ] and arr [ j ] . One is subtracted from k because k is incremented one extra in above while loop . k will always be greater than j . If j becomes equal to k , then above loop will increment k , because arr [ k ] + arr [ i ] is always greater than arr [ k ]
Driver function to test above function
CountTriangles function
If it is possible with a [ l ] , a [ r ] and a [ i ] then it is also possible with a [ l + 1 ] . . a [ r - 1 ] , a [ r ] and a [ i ]
checking for more possible solutions
if not possible check for higher values of arr [ l ]
Driver Code
A binary tree node structure
Utility function to create a new Binary Tree node
method returns maximum sum possible from subtrees rooted at grandChildrens of node
call for children of left child only if it is not NULL
call for children of right child only if it is not NULL
Utility method to return maximum sum rooted at node
If node is already processed then return calculated value from map
take current node value and call for all grand children
don 't take current node  value and call for all children
choose maximum from both above calls and store that in map
Returns maximum sum from subset of nodes of binary tree under given constraints
Driver code
Function to return the minimum number of elements whose sign must be flipped to get the positive sum of array elements as close to 0 as possible
boolean variable used for toggling between maps
Calculate the sum of all elements of the array
Initializing first map ( dp [ 0 ] ) with INT_MAX because for i = 0 , there are no elements in the array to flip
Base Case
For toggling
Required sum is minimum non - negative So , we iterate from i = 0 to sum and find the first i where dp [ flag ^ 1 ] [ i ] != INT_MAX
In worst case we will flip max n - 1 elements
Driver code
2 - d array to store states of DP
2 - d array to store if a state has been solved
Vector to store power of variable ' C ' .
function to compute the states
Base case
Checking if a state has been solved
Setting a state as solved
Recurrence relation
Returning the solved state
Function to initialize global variables and find the initial value of 'R
Resizing the variables
Variable to store the initial value of R
Input array
number of knapsacks and capacity
Performing required pre - computation
finding the required answer
Python3 program to find the number of pairs ( x , y ) in an array such that x ^ y > y ^ x
Function to return count of pairs with x as one element of the pair . It mainly looks for all values in Y where x ^ Y [ i ] > Y [ i ] ^ x
If x is 0 , then there cannot be any value in Y such that x ^ Y [ i ] > Y [ i ] ^ x
If x is 1 , then the number of pairs is equal to number of zeroes in Y
Find number of elements in Y [ ] with values greater than x , bisect . bisect_right gets address of first greater element in Y [ 0. . n - 1 ]
If we have reached here , then x must be greater than 1 , increase number of pairs for y = 0 and y = 1
Decrease number of pairs for x = 2 and ( y = 4 or y = 3 )
Increase number of pairs for x = 3 and y = 2
Function to return count of pairs ( x , y ) such that x belongs to X , y belongs to Y and x ^ y > y ^ x
To store counts of 0 , 1 , 2 , 3 , and 4 in array Y
Sort Y so that we can do binary search in it
Initialize result
Take every element of X and count pairs with it
Driver Code
A simple program to count pairs with difference k
Pick all elements one by one
See if there is a pair of this picked element
Driver program
Standard binary search function
Returns count of pairs with difference k in arr [ ] of size n .
Sort array elements
Pick a first element point
Driver Code
Returns count of pairs with difference k in arr [ ] of size n .
Sort array elements
arr [ r ] - arr [ l ] < sum
Driver code
Python3 implementation of the approach
Function to return the total number of required sub - sets
Variable to store total elements which on dividing by 3 give remainder 0 , 1 and 2 respectively
Create a dp table
Process for n states and store the sum ( mod 3 ) for 0 , 1 and 2
Use of MOD for large numbers
Final answer store at dp [ n - 1 ] [ 0 ]
Driver Code
Python3 program to check if the word exists in the grid or not
Function to check if a word exists in a grid starting from the first match in the grid level : index till which pattern is matched x , y : current position in 2D array
Pattern matched
Out of Boundary
If grid matches with a letter while recursion
Marking this cell as visited
finding subpattern in 4 directions
marking this cell as unvisited again
else : Not matching then false
Function to check if the word exists in the grid or not
if total characters in matrix is less then pattern lenghth
Traverse in the grid
If first letter matches , then recur and check
Driver Code
Function to check if word exists or not
Fills element in arr [ ] from its pair sum array pair [ ] . n is size of arr [ ]
Driver code
Merge ar1 [ ] and ar2 [ ] with O ( 1 ) extra space
Iterate through all elements of ar2 [ ] starting from the last element
Find the smallest element greater than ar2 [ i ] . Move all elements one position ahead till the smallest greater element is not found
If there was a greater element
Driver program
Function to generate gould 's Sequence
loop to generate each row of pascal 's Triangle up to nth row
Loop to generate each element of ith row
if c is odd increment count
print count of odd elements
Get n
Function call
Function to calculate the product
Sort the arrays to find the maximum and minimum elements in given arrays
Return product of maximum and minimum .
Driver Program
Python3 program to find Minimum odd cost path in a matrix
Function to find the minimum cost
leftmost element
rightmost element
Any element except leftmost and rightmost element of a row is reachable from direct upper or left upper or right upper row 's block
Counting the minimum cost
Find the minimum cost
Driver code
Function to calculate the product
Initialize max of first array
initialize min of second array
To find the maximum element in first array
To find the minimum element in second array
Process remaining elements
Driver code
Function to implement search operation
Driver Code
Using a last element as search element
function to implement binary search
low + ( high - low ) / 2
Driver program to check above functions Let us search 3 in below array
Inserts a key in arr [ ] of given capacity . n is current size of arr [ ] . This function returns n + 1 if insertion is successful , else n .
Cannot insert more elements if n is already more than or equal to capcity
Driver Code
Inserting key
To search a ley to be deleted
Function to delete an element
Find position of element to be deleted
Deleting element
Driver code
Python 3 Program to answer queries on number of submatrix of given size
Solve each query on matrix
For each of the cell .
finding submatrix size of oth row and column .
intermediate cells .
Find frequency of each distinct size for 0 s and 1 s .
Find the Cumulative Sum .
Output the answer for each query
Driver Program
Function that matches input txt with given wildcard pattern
empty pattern can only match with empty sting Base case
step 1 initialize markers :
For step - ( 2 , 5 )
For step - ( 3 )
For step - ( 4 )
For step - ( 5 )
For step - ( 6 )
For step - ( 7 )
Final Check
Driver code
function to find nth stern ' diatomic series
Initializing the DP array
SET the Base case
Traversing the array from 2 nd Element to nth Element
Case 1 : for even n
Case 2 : for odd n
Driver program
Python3 Program to Check if any valid sequence is divisible by M
Calculate modulo for this call
Base case
check if sum is divisible by M
check if the current state is already computed
1. Try placing '+
2. Try placing '-
calculate value of res for recursive case
store the value for res for current states and return for parent call
Driver code
MAX is the Maximum value M can take
This function prints common elements in ar1
Initialize starting indexes for ar1 [ ] , ar2 [ ] and ar3 [ ]
Iterate through three arrays while all arrays have elements
If x = y and y = z , print any of them and move ahead in all arrays
x < y
y < z
We reach here when x > y and z < y , i . e . , z is smallest
Driver program to check above function
Python3 code to find the maximum path sum
Function for dfs traversal and to store the maximum value in dp [ ] for every node till the leaves
Initially dp [ u ] is always a [ u ]
Stores the maximum value from nodes
Traverse the tree
If child is parent , then we continue without recursing further
Call dfs for further traversal
Store the maximum of previous visited node and present visited node
Add the maximum value returned to the parent node
Function that returns the maximum value
Driver Code
Number of nodes
Adjacency list as a dictionary
Create undirected edges initialize the tree given in the diagram
Values of node 1 , 2 , 3. ... 14
Function call
Return nth Jacobsthal number .
base case
Return nth Jacobsthal - Lucas number .
base case
Driven Program
Binary search algorithm implementation
function takes an infinite size array and a key to be searched and returns its position if found else - 1. We don 't know size of a[] and we can assume size to be infinite in this function. NOTE THAT THIS FUNCTION ASSUMES a[] TO BE OF INFINITE SIZE THEREFORE, THERE IS NO INDEX OUT OF BOUND CHECKING
Find h to do binary search
store previous high
double high index
update new val
at this point we have updated low and high indices , thus use binary search between them
Driver function
Python 3 implementation of counting number of possible hexagonal walks
We initialize our origin with 1
For each N = 1 to 14 , we traverse in all possible direction . Using this 3D array we calculate the number of ways at each step and the total ways for a given step shall be found at ways [ step number ] [ 8 ] [ 8 ] because all the steps after that will be used to trace back to the original point index 0 : 0 according to the image .
This array stores the number of ways possible for a given step
Driver Code
Preprocessing all possible ways
Python3 program to find if it is possible to cross the matrix with given power
For each value of dp [ i ] [ j ] [ k ]
For first cell and for each value of k
For first cell of each row
For first cell of each column
For rest of the cell
Down movement .
Right movement .
Diagonal movement .
Finding maximum k .
Driver Code
function that calculates the answer
dp [ i ] [ j ] stores count of i digit stepping numbers ending with digit j .
if n is 1 then answer will be 10.
Initialize values for count of digits equal to 1.
Compute values for count of digits more than 1.
If ending digit is 0
If ending digit is 9
For other digits .
stores the final answer
Driver Code
Returns LCS X and Y
Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note that L [ i ] [ j ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]
Following code is used to print LCS
Create a string length index + 1 and fill it with \ 0
Start from the right - most - bottom - most corner and one by one store characters in lcs [ ]
If current character in X [ ] and Y are same , then current character is part of LCS
Put current character in result
reduce values of i , j and index
If not same , then find the larger of two and go in the direction of larger value
Returns longest palindromic subsequence of str
Find reverse of str
Return LCS of str and its reverse
Driver Code
Function to count numbers of such subsequences having product less than k .
number of subsequence using j - 1 terms
if arr [ j - 1 ] > i it will surely make product greater thus it won 't contribute then
number of subsequence using 1 to j - 1 terms and j - th term
Driver code
function to find the once appearing element in array
Do XOR of all elements and return
Driver code
Python 3 program to calculate all triplets whose sum is perfect cube .
Function to calculate all occurrence of a number in a given range
if i == 0 assign 1 to present state
else add + 1 to current state with previous state
Function to calculate triplets whose sum is equal to the perfect cube
Initialize answer
count all occurrence of third triplet in range from j + 1 to n
Driver code
function which find number
applying the formula .
driver code
Function to check the element present in array B
Utility function for findMaxSubarraySum ( ) with the following parameters A = > Array A , B = > Array B , n = > Number of elements in Array A , m = > Number of elements in Array B
set max_so_far to INT_MIN
if the element is present in B , set current max to 0 and move to the next element
Proceed as in Kadane 's Algorithm
Wrapper for findMaxSubarraySumUtil ( )
This case will occour when all elements of A are present in B , thus no subarray can be formed
Driver code
Function call
Python3 program for counting n digit numbers with non decreasing digits
Returns count of non - decreasing numbers with n digits .
a [ i ] [ j ] = count of all possible number with i digits having leading digit as j
Initialization of all 0 - digit number
Initialization of all i - digit non - decreasing number leading with 9
for all digits we should calculate number of ways depending upon leading digits
Driver Code
Python3 program to count number of balanced binary trees of height h .
base cases
Driver program
Python3 program implementation of the above idea
Function to calculate the max sum of contigous subarray of B whose elements are not present in A
Mark all the elements present in B
Initialize max_so_far with INT_MIN
Traverse the array A
If current max is greater than max so far then update max so far
Driver Code
Function call
utility function to print contents of a vector from index i to it 's end 
Binary Tree Node
This function prints all paths that have sum k
empty node
add current node to the path
check if there 's any k sum path   in the left sub-tree. 
check if there 's any k sum path   in the right sub-tree. 
check if there 's any k sum path that   terminates at this node   Traverse the entire path as   there can be negative elements too 
If path sum is k , print the path
Remove the current element from the path
A wrapper over printKPathUtil ( )
Driver Code
Returns count of substrings divisible by 8 but not by 3.
Iterating the string .
Prefix sum of number of substrings whose sum of digits mudolo 3 is 0 , 1 , 2.
Iterating the string .
Since single digit 8 is divisible by 8 and not by 3.
Taking two digit number .
10 th position
Complete 2 digit number
Taking 3 digit number .
100 th position
10 th position
Complete 3 digit number .
If number formed is divisible by 8 then last 3 digits are also divisible by 8. Then all the substring ending at this index are divisible .
But those substring also contain number which are not divisible by 3 so remove them .
Driver Code
function to find the equilibrium index
Check for indexes one by one until an equilibrium index is found
get left sum
get right sum
if leftsum and rightsum are same , then we are done
return - 1 if no equilibrium index is found
driver code
Python3 program to find count of endless points
Returns count of endless points
Fills column matrix . For every column , start from every last row and fill every entry as blockage after a 0 is found .
flag which will be zero once we get a '0' and it will be 1 otherwise
encountered a '0' , set the isEndless variable to false
Similarly , fill row matrix
Calculate total count of endless points
If there is NO blockage in row or column after this point , increment result . print ( row [ i ] [ j ] , col [ i ] [ j ] )
Driver code
function to find the equilibrium index
finding the sum of whole array
total_sum is now right sum for index i
If no equilibrium index found , then return - 1
Driver code
Returns sum of all substring of num
allocate memory equal to length of string
initialize first value with first digit
loop over all digits of string
update each sumofdigit from previous value
add current value to the result
Driver code
Returns sum of all substring of num
storing prev value
substrings sum upto current index loop over all digits of string
update each sumofdigit from previous value
add current value to the result
prev = current update previous
Driver code to test above methods
Python program to find the equilibrium index of an array Function to find the equilibrium index
Iterate from 0 to len ( arr )
If i is not 0
Iterate from 0 to len ( arr )
If no equilibrium index found , then return - 1
Driver code
Python Function to print leaders in array
If loop didn 't break
Driver function
Python function to print leaders in array
Rightmost element is always leader
Driver function
Returns the maximum value with knapsack of W capacity
dp [ i ] is going to store maximum value with knapsack capacity i .
Fill dp [ ] using above recursive formula
Driver program
Function to get index of ceiling of x in arr [ low . . high ]
If x is smaller than or equal to first element , then return the first element
Otherwise , linearly search for ceil value
if x lies between arr [ i ] and arr [ i + 1 ] including arr [ i + 1 ] , then return arr [ i + 1 ]
If we reach here then x is greater than the last element of the array , return - 1 in this case
Driver program to check above functions
Method returns maximum sum of all subarray where removing one element is also allowed
Maximum sum subarrays in forward and backward directions
Initialize current max and max so far .
calculating maximum sum subarrays in forward direction
storing current maximum till ith , in forward array
calculating maximum sum subarrays in backward direction
storing current maximum from ith , in backward array
Initializing final ans by max_so_far so that , case when no element is removed to get max sum subarray is also handled
choosing maximum ignoring ith element
Driver code to test above methods
Function to get index of ceiling of x in arr [ low . . high ]
If x is smaller than or equal to the first element , then return the first element
If x is greater than the last element , then return - 1
get the index of middle element of arr [ low . . high ] low + ( high - low ) / 2
If x is same as middle element , then return mid
If x is greater than arr [ mid ] , then either arr [ mid + 1 ] is ceiling of x or ceiling lies in arr [ mid + 1. . . high ]
If x is smaller than arr [ mid ] , then either arr [ mid ] is ceiling of x or ceiling lies in arr [ low ... mid - 1 ]
Driver program to check above functions
Compute the " maxHeight " of a particular Node
compute the height of each subtree
use the larger one
Helper class that allocates a new Node with the given data and None left and right pointers .
Function to sum of heights of individual Nodes Uses Inorder traversal
Driver code
Maximum number of rows and / or columns
method returns maximum average of all path of cost matrix
Initialize first column of total cost ( dp ) array
Initialize first row of dp array
Construct rest of the dp array
divide maximum sum by constant path length : ( 2 N - 1 ) for getting average
Driver program to test above function
Python3 program to find the path having the maximum weight in matrix
Function which return the maximum weight path sum
creat 2D matrix to store the sum of the path
Initialize first column of total weight array ( dp [ i to N ] [ 0 ] )
Calculate rest path sum of weight matrix
find the max weight path sum to reach the last row
return maximum weight path sum
Driver Program
Limit on N and K
2D array memo for stopping solving same problem again
method recursively calculates permutation with K inversion
Base cases
If already solved then return result directly
Calling recursively all subproblem of permutation size N - 1
Call recursively only if total inversion to be made are less than size
store result into memo
Driver code
val [ ] is for storing maximum profit for each weight wt [ ] is for storing weights n number of item W maximum capacity of bag mat [ 2 ] [ W + 1 ] to store final result
matrix to store final result
iterate through all items
one by one traverse
each element traverse all weights j <= W
if i is odd that mean till now we have odd number of elements so we store result in 1 th indexed row
check for each value
include element
exclude element
if i is even that mean till now we have even number of elements so we store result in 0 th indexed row
Return mat [ 0 ] [ W ] if n is odd , else mat [ 1 ] [ W ]
Driver code
Returns true if there is a majority element in a [ ]
Insert all elements in a hash table
Check if frequency of any element is n / 2 or more .
Driver code
Naive solution to find if there is a pair in A [ 0. . N - 1 ] with given sum .
as equal i and j means same element
pair exists
as the array is sorted
No pair found with given sum
Driver code
Function call
Count number of True in left Partition
Count number of False in left Partition
Count number of True in right Partition
Count number of False in right Partition
Evaluate AND operation
Evaluate OR operation
Evaluate XOR operation
Driver code
We obtain the string T | T & F ^ T
There are 4 ways ( ( T T ) & ( F ^ T ) ) , ( T | ( T & ( F ^ T ) ) ) , ( ( ( T T ) & F ) ^ T ) and ( T | ( ( T & F ) ^ T ) )
A utility function to find minimum in arr [ l . . h ]
A utility function to find maximum in arr [ l . . h ]
Returns the minimum number of removals from either end in arr [ l . . h ] so that 2 * min becomes greater than max .
If there is 1 or less elements , return 0 For a single element , 2 * min > max ( Assumption : All elements are positive in arr [ ] )
1 ) Find minimum and maximum in arr [ l . . h ]
If the property is followed , no removals needed
Otherwise remove a character from left end and recur , then remove a character from right end and recur , take the minimum of two is returned
Driver Code
Two pointer technique based solution to find if there is a pair in A [ 0. . N - 1 ] with a given sum .
represents first pointer
represents second pointer
If we find a pair
If sum of elements at current pointers is less , we move towards higher values by doing i += 1
If sum of elements at current pointers is more , we move towards lower values by doing j -= 1
array declaration
value to search
Function call
A binary tree Node has data , pointer to left child and a pointer to right child
Function to sum of heights of individual Nodes Uses Inorder traversal
Driver code
A binary tree node
Iterative function for inorder tree traversal
traverse the tree
Reach the left most Node of the current Node
Place pointer to a tree node on the stack before traversing the node 's left subtree
BackTrack from the empty subtree and visit the Node at the top of the stack ; however , if the stack is empty you are done
We have visited the node and its left subtree . Now , it ' s ▁ right ▁ subtree ' s turn
Constructed binary tree is 1 / \ 2 3 / \ 4 5
Returns count of possible paths to reach cell at row number m and column number n from the topmost leftmost cell ( cell at 1 , 1 )
Create a 2D table to store results of subproblems one - liner logic to take input for rows and columns mat = [ [ int ( input ( ) ) for x in range ( C ) ] for y in range ( R ) ]
Count of paths to reach any cell in first column is 1
Count of paths to reach any cell in first column is 1
Calculate count of paths for other cells in bottom - up manner using the recursive solution
By uncommenting the last part the code calculates the total possible paths if the diagonal Movements are allowed
Driver program to test above function
Python3 program for the above approach
Function to create the frequency array of the given array arr [ ]
Hashmap to store the frequencies
Store freq for each element
Get the total frequencies
Store frequencies in subset [ ] array
Return frequency array
Function to check is sum N / 2 can be formed using some subset
dp [ i ] [ j ] store the answer to form sum j using 1 st i elements
Initialize dp [ ] [ ] with true
Fill the subset table in the bottom up manner
If current element is less than j
Update current state
Return the result
Function to check if the given array can be split into required sets
Store frequencies of arr [ ]
If size of arr [ ] is odd then print " Yes "
Check if answer is true or not
Print the result
Driver Code
Given array arr
Function Call
The main function that returns maximum product obtainable from a rope of length n
Base cases
Make a cut at different places and take the maximum of all
Return the maximum of all values
Driver program to test above functions
Python program to find minimum possible time by the car chassis to complete
time taken to leave
first station in line 1 time taken to leave
Fill tables T1 [ ] and T2 [ ] using above given recursive relations
consider exit times and return minimum
Driver code
Returns length of longest common substring of X [ 0. . m - 1 ] and Y [ 0. . n - 1 ]
Create a table to store lengths of longest common suffixes of substrings . Note that LCSuff [ i ] [ j ] contains the length of longest common suffix of X [ 0. . . i - 1 ] and Y [ 0. . . j - 1 ] . The first row and first column entries have no logical meaning , they are used only for simplicity of the program .
To store the length of longest common substring
Following steps to build LCSuff [ m + 1 ] [ n + 1 ] in bottom up fashion
Driver Code
A utility function to find minimum of two integers
A DP function to find minimum number of insertions
Create a table of size n * n . table [ i ] [ j ] will store minimum number of insertions needed to convert str1 [ i . . j ] to a palindrome .
Fill the table
Return minimum number of insertions for str1 [ 0. . n - 1 ]
Driver Code
Find the maximum possible sum in arr [ ] auch that arr [ m ] is part of it
Include elements on left of mid .
Include elements on right of mid
Return sum of elements on left and right of mid returning only left_sum + right_sum will fail for [ - 2 , 1 ]
Returns sum of maximum sum subarray in aa [ l . . h ]
Base Case : Only one element
Find middle point
Return maximum of following three possible cases a ) Maximum subarray sum in left half b ) Maximum subarray sum in right half c ) Maximum subarray sum such that the subarray crosses the midpoint
Driver Code
A utility function to find max of two integers
A binary tree node has data , pointer to left child and a pointer to right child
The function returns size of the largest independent set in a given binary tree
Calculate size excluding the current node
Calculate size including the current node
Return the maximum of two sizes
A utility function to create a node
Let us construct the tree given in the above diagram
Returns the amount of water in jth glass of ith row
A row number i has maximum i columns . So input column number must be less than i
There will be i * ( i + 1 ) / 2 glasses till ith row ( including ith row ) and Initialize all glasses as empty
Put all water in first glass
Now let the water flow to the downward glasses till the row number is less than or / equal to i ( given row ) correction : X can be zero for side glasses as they have lower rate to fill
Fill glasses in a given row . Number of columns in a row is equal to row number
Get the water from current glass
Keep the amount less than or equal to capacity in current glass
Get the remaining amount
Distribute the remaining amount to the down two glasses
The index of jth glass in ith row will be i * ( i - 1 ) / 2 + j - 1
Driver Code
Total amount of water
Python program for above approach
This function assumes that arr [ ] is sorted in increasing order according the first ( or smaller ) values in pairs .
Initialize MCL ( max chain length ) values for all indices
Compute optimized chain length values in bottom up manner
Pick maximum of all MCL values
Driver program to test above function
Returns the minimum number of cuts needed to partition a string such that every part is a palindrome
Get the length of the string
Create two arrays to build the solution in bottom up manner C [ i ] [ j ] = Minimum number of cuts needed for palindrome partitioning of substring str [ i . . j ] P [ i ] [ j ] = true if substring str [ i . . j ] is palindrome , else false . Note that C [ i ] [ j ] is 0 if P [ i ] [ j ] is true
different looping variables
Every substring of length 1 is a palindrome
L is substring length . Build the solution in bottom - up manner by considering all substrings of length starting from 2 to n . The loop structure is the same as Matrix Chain Multiplication problem ( See https : www . geeksforgeeks . org / matrix - chain - multiplication - dp - 8 / )
For substring of length L , set different possible starting indexes
Set ending index
If L is 2 , then we just need to compare two characters . Else need to check two corner characters and value of P [ i + 1 ] [ j - 1 ]
IF str [ i . . j ] is palindrome , then C [ i ] [ j ] is 0
Make a cut at every possible location starting from i to j , and get the minimum cost cut .
Return the min cut value for complete string . i . e . , str [ 0. . n - 1 ]
Driver code
class to get a new node
put in the data
function to count subtress that Sum up to a given value x
if tree is empty
Sum of nodes in the left subtree
Sum of nodes in the right subtree
Sum of nodes in the subtree rooted with 'root.data  
if true
return subtree 's nodes Sum
utility function to count subtress that Sum up to a given value x
if tree is empty
Sum of nodes in the left subtree
Sum of nodes in the right subtree
if tree 's nodes Sum == x
required count of subtrees
Driver Code
binary tree creation 5 / \ - 10 3 / \ / \ 9 8 - 4 7
Function to count minimum changes to make the matrix palindromic
Rows in the matrix
Columns in the matrix
Traverse the given matrix
Store the frequency of the four cells
Iterate over the map
Min changes to do to make all
Four elements equal
Make the middle row palindromic
Make the middle column palindromic
Prminimum changes
Given matrix
Function Call
Function to check if B is a prefix of A or not
Convert numbers into strings
Check if s2 is a prefix of s1 or not using startswith ( ) function
If result is true print Yes
Driver code
Given numbers
Function call
Python3 program to check three or more consecutiveidentical characters or numbers using regular expression
Function to check three or more consecutiveidentical characters or numbers using regular expression
Regex to check three or more consecutive identical characters or numbers
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Test Case 5 :
Python3 program to validate MAC address using using regular expression
Function to validate MAC address .
Regex to check valid MAC address
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Test Case 5 :
Python3 program to validate GUID ( Globally Unique Identifier ) using regular expression
Function to validate GUID ( Globally Unique Identifier )
Regex to check valid GUID ( Globally Unique Identifier )
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Python program to validate Indian driving license number using regular expression
Function to validate Indian driving license number .
Regex to check valid Indian driving license number
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Test Case 5 :
Structure of a node of binary tree
Function to get a new node
Allocate space
Utility function to count subtress that sum up to a given value x
Driver code
binary tree creation 5 / \ - 10 3 / \ / \ 9 8 - 4 7
Python3 program to validate passport number of India using regular expression
Function to validate the pin code of India .
Regex to check valid pin code of India .
Compile the ReGex
If the string is empty return false
Pattern class contains matcher ( ) method to find matching between given string and regular expression .
Return True if the string matched the ReGex else False
Driver code .
Test Case 1
Test Case 2 :
Test Case 3 :
Test Case 4 :
Test Case 5 :
Python3 program to validate Visa Card number using regular expression
Function to validate Visa Card number using regular expression .
Regex to check valid Visa Card number
Compile the ReGex
If the string is empty return false
Pattern class contains matcher ( ) method to find matching between given string and regular expression .
Return True if the string matched the ReGex else False
Driver code
Test Case 1
Test Case 2
Test Case 3
Test Case 4
Test Case 5 str5 = "415a2760457" ;
Python3 program to validate Master Card number using regular expression
Function to validate Master Card number using regular expression .
Regex to check valid Master Card number .
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Test Case 5 : str5 = "2221149a635843"
Python3 program to validate CVV ( Card Verification Value ) number using regex .
Function to validate CVV ( Card Verification Value ) number . using regular expression .
Regex to check valid CVV number .
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 : str4 = "5a1"
Python3 program to validate IFSC ( Indian Financial System ) Code using regular expression
Function to validate IFSC ( Indian Financial System ) Code using regular expression .
Regex to check valid IFSC Code .
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Python3 program to validate GST ( Goods and Services Tax ) number using regular expression
Function to validate GST ( Goods and Services Tax ) number .
Regex to check valid GST ( Goods and Services Tax ) number
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Test Case 5 :
Python3 program to validate HTML tag using regex . using regular expression
Function to validate HTML tag using regex .
Regex to check valid HTML tag using regex .
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Python3 program to validate domain name using regular expression
Function to validate domain name .
Regex to check valid domain name .
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Test Case 5 :
Python3 program to validate SSN ( Social Security Number ) using regular expression
Function to validate SSN ( Social Security Number ) .
Regex to check valid SSN ( Social Security Number ) .
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Python3 program to validate image file extension using regex
Function to validate image file extension .
Regex to check valid image file extension .
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Test Case 5 :
Python3 program to validate Aadhar number using regex .
Function to validate Aadhar number .
Regex to check valid Aadhar number .
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 : str4 = "3675 ▁ 98AF ▁ 602"
Test Case 5 :
Python3 program to validate the pin code of India using Regular Expression .
Function to validate the pin code of India .
Regex to check valid pin code of India .
Compile the ReGex
If the pin code is empty return false
Pattern class contains matcher ( ) method to find matching between given pin code and regular expression .
Return True if the pin code matched the ReGex else False
Driver code
Test case 1
Test case 2 :
Test case 3 :
Test case 4 :
Python3 program to validate the time in 24 - hour format using Regular Expression .
Function to validate the time in 24 - hour format
Regex to check valid time in 24 - hour format .
Compile the ReGex
If the time is empty return false
Pattern class contains matcher ( ) method to find matching between given time and regular expression .
Return True if the time matched the ReGex otherwise False
Driver Code .
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Test Case 5 :
Python3 program to validate hexadecimal colour code using Regular Expression
Function to validate hexadecimal color code .
Compile the ReGex
If the string is empty return false
Return if the string matched the ReGex
Test Case 1 : str1 = "1AFFa1"
Test Case 2 : str2 = " F00"
Test Case 3 :
Test Case 4 : str4 = "123abce "
Test Case 5 : str5 = " afafah "
Python3 program to validate the PAN Card number using Regular Expression
Function to validate the PAN Card number .
Regex to check valid PAN Card number
Compile the ReGex
If the PAN Card number is empty return false
Return if the PAN Card number matched the ReGex
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
Test Case 5 :
Python3 program to validate the time in 12 - hour format using Regular Expression .
Function to validate the time in 12 - hour format .
Regex to check valid time in 12 - hour format .
Compile the ReGex
If the time is empty return false
Return if the time matched the ReGex
Driver Code .
Test Case 1 :
Test Case 2 :
Test Case 3 :
Test Case 4 :
End position is checked using the string length value . q0 is the starting state . q1 and q2 are intermediate states . q3 and q4 are final states .
state transitions 0 takes to q1 , 1 takes to q3
state transitions 0 takes to q4 , 1 takes to q2
state transitions 0 takes to q4 , 1 takes to q2
state transitions 0 takes to q1 , 1 takes to q3
state transitions 0 takes to q1 , 1 takes to q2
Driver Code
all state transitions are printed . if string is accpetable , YES is printed . else NO is printed
Python3 implementation of approach
if length of the b = 0 then we return true
if length of a = 0 that means b is not present in a so we return false
Driver code
Function to check if the two strings can be matched or not
if the string don 't have *  then character t that position  must be same.
Driver code
Calculate Nth term of series
Driver Code
Function for finding factorial of N
return factorial of N
Function for calculating Nth term of series
Driver code
Python3 code to find the sum of the nodes which are present at the maximum depth .
Binary tree node
Function to find the sum of the node which are present at the maximum depth . While traversing the nodes compare the level of the node with max_level ( Maximum level till the current node ) . If the current level exceeds the maximum level , update the max_level as current level . If the max level and current level are same , add the root data to current sum .
Driver Code
Returns true if pat matches with text
i is used as an index in pattern and j as an index in text
Traverse through pattern
If does not match with text
If matches , increment i and j
Current character is
At least one character must match with
Match characters with until a matching character is found .
Matching with is over , move ahead in pattern
Driver code
Constructor
Function to find the sum of nodes at maximum depth arguments are node and max , where Max is to match the depth of node at every call to node , if Max will be equal to 1 , means we are at deepest node .
base case
Max == 1 to track the node at deepest level
recursive call to left and right nodes
maxDepth function to find the max depth of the tree
base case
Either leftDepth of rightDepth is greater add 1 to include height of node at which call is
call to function to calculate max depth
Driver code
Constructing tree
call to calculate required sum
Function to find the sum of the manhattan distances between same characters in string
Vector to store indices for each unique character of the string
Append the position of each character in their respective vectors
Store the required result
Iterate over all the characters
Calculate sum of all elements present in the vector
Traverse the current vector
Find suffix [ i + 1 ]
Adding distance of all pairs whose first element is i and second element belongs to [ i + 1 , n ]
Prthe result
Driver Code
Given Input
Function Call
Function to count flips required to make strings A and B equal
Stores the count of the number of operations
Stores the length of the chosen prefixes
Stores if operations are performed even or odd times
Traverse the given string
If current characters in the two strings are unequal
If A [ i ] is not flipped
Increment count of operations
Insert the length of the chosen prefix
Update invert to true
If A [ i ] is flipped
Increment count of operations
Insert length of the chosen prefix
Update invert to false
Print the number of operations required
Print the chosen prefix length in each operation
Driver Code
Given binary strings
Function to find the maximum cost of any valid set of words formed by using the given letters
Stores frequency of characters
Find the maximum cost
Utility function to find maximum cost of generating any possible subsets of strings
Base Case
Stores the current cost
Stores the cost of by the current word
Create a copy of the letterCounts array
Traverse the current word
Store the current index & check if its frequency is 0 or not
If true , then update wordScore to - 1
Otherwise , add the cost of the current index to wordScore
Decrease its frequency
If wordScore > 0 , then recursively call for next index
Find the cost by not including current word
Return the maximum score
Given arrays
Function Call
Python3 program for the above approach
Function to remove all the characters from a that whose frequencies are not equal to a perfect power of 2
Stores the frequency of each character in S
Iterate over characters of string
Update frequency of current character in the array freq [ ]
Traverse the array freq [ ]
Check if the i - th letter is absent from S
Calculate log of frequency of the current character in the S
Calculate power of 2 of lg
Check if freq [ i ] is a power of 2
Print letter i + ' a ' freq [ i ] times
Driver Code
Structure of a node of a Segment Tree
Function to construct the Segment Tree
If start and end are equa
Assign squares of positions of the characters
Stores the mid value of the range [ start , end ]
Recursive call to left subtree
Recursive call to right subtree
Update the current node
Function to perform the queries of type 2
No overlap
If l <= start and r >= end
Return the value of treeNode
Calculate middle of the range [ start , end ]
Function call to left subtree
Function call to right subtree
Return the sum of X and Y
Function to perform update queries on a Segment Tree
If start is equal to end and idx is equal to start
Base Case
Calculate middle of the range [ start , end ]
If idx <= mid
Function call to left subtree
Otherwise
Function call to the right subtree
Update the current node
Function to perform the given queries
Stores the segment tree
Traverse the segment tree
Assign 0 to each node
Builds segment tree
Traverse the query array Q [ ] [ ]
If query is of type S
Stores the left boundary
Stores the right boundary
Prints the sum of squares of the alphabetic positions of the characters
Otherwise
Stores the index of the character to be updated
Update the segment tree
Driver Code
Input
Function call
Function to find the length of LCS possible by swapping any character of a with that of another string
Store the size of the strings
Stores frequency of characters
Iterate over characters of the A
Update frequency of character A [ i ]
Iterate over characters of the B
Update frequency of character B [ i ]
Store the count of all pairs of similar characters
Traverse the array freq [ ]
Update cnt
Print the minimum of cnt , N and M
Driver Code
Given strings
Function to find the maximum length of subsequence having difference of ASCII value of longest and smallest character as 1
Stores frequency of characters
Iterate over characters of the string
Stores the resultant length of subsequence
Check if there exists any elements with ASCII value one less than character ch
Size of current subsequence
Update the value of ans
Print the resultant count
Driver Code
Function to count minimum increments by 1 or K required to convert X to Y
Traverse the string X
Case 1
Case 2
Add the difference / K to the count
Add the difference % K to the count
Case 3
Add the difference / K to the count
Add the difference % K to the count
Print the answer
Driver Code
Function to find the minimum number of swaps required such that the substring { s [ l ] , . . , s [ r ] } consists of exactly k 1 s
Store the size of the string
Store the total number of 1 s and 0 s in the entire string
Traverse the string S to find the frequency of 1 and 0
Store the number of 1 s and 0 s in the substring s [ l , r ]
Traverse the substring S [ l , r ] to find the frequency of 1 s and 0 s in it
Store the count of 1 s and 0 s outside substring s [ l , r ]
Check if the sum of the substring is at most K
Store number of 1 s required
Check if there are enough 1 s remaining to be swapped
If the count of 1 s in the substring exceeds k
Store the number of 0 s required
Check if there are enough 0 s remaining to be swapped
In all other cases , print - 1
Driver Code
Python3 program to implement the above approach
Function to generate all numbers having "01" and "10" as a substring
Insert 2 and 5
Iterate till x is 10 ^ 15
Multiply x by 2
Update x as x * 2 + 1
Function to check if binary representation of N contains only "01" and "10" as substring
Function Call to generate all such numbers
Check if a number N exists in Ans [ ] or not
If the number exists
Driver Code
Function to find the minimum count of remaining characters left into the string by removing the valid subsequences
Length of the string
Stores opening parenthesis ' ( ' of the given string
Stores square parenthesis ' [ ' of the given string
Stores count of opening parenthesis ' ( ' in valid subsequences
Stores count of opening parenthesis ' [ ' in valid subsequences
Iterate over each characters of S
If current character is '[
Insert into stack
If i is equal to ']
If stack is not empty and top element of stack is '[
Remove top element from stack
Update squareCount
If current character is '(
Insert into stack
If i is equal to ' ) '
If stack is not empty and top element of stack is '(
Remove top element from stack
Update roundCount
Print the minimum number of remaining characters left into S
Driver Code
Given string
Function Call
Python3 program for the above approach
Function to find minimum removals required to convert given string to single distinct characters only
Unordered map to store positions of characters X , Y and Z
Update indices of X , Y , Z ;
Stores the count of minimum removals
Traverse the Map
Count the number of removals required for current character
Update the answer
Print the answer
Driver Code
Given string
Size of string
Function call
Function to check whether the given is accepted by DFA or not
Stores initial state of DFA
Stores final state of DFA
Stores previous state of DFA
Iterate through the string
Checking for all combinations
Update the previous_state
If final state is reached
Otherwise
Driver Code
Given string
Function Call
Helper function that allocates a new node with the given data and None left and right poers .
Construct to create a new node
return difference of sums of odd level and even level
create a queue for level order traversal
traverse until the queue is empty
traverse for complete level
check if level no . is even or odd and accordingly update the evenSum or oddSum
check for left child
check for right child
Driver Code
Let us create Binary Tree shown in above example
A Binary Tree node
The main function that returns difference between odd and even level nodes
Base Case
Difference for root is root 's data - difference for  left subtree - difference for right subtree
Driver program to test above function
Class for node creation
constructor
Utility function to calculate the sum of all leaf nodes
add root data to sum if root is a leaf node
propagate recursively in left and right subtree
Binary tree Fromation
Variable to store the sum of leaf nodes
A binary tree node
Generator function for iterative inorder tree traversal
Find the inorder predecessor of current
Make current as right child of its inorder predecessor
Revert the changes made in the ' if ' part to restore the original tree . i . e . , fix the right child of predecessor
Constructed binary tree is 1 / \ 2 3 / \ 4 5
Python3 implementation to find the sum of leaf node at minimum level
Structure of a node in binary tree
function to find the sum of leaf nodes at minimum level
if tree is empty
if there is only root node
Queue used for level order traversal
push rioot node in the queue
count no . of nodes present at current level
traverse current level nodes
get front element from ' q '
if node is leaf node
accumulate data to ' sum '
set flag = 1 to signify that we have encountered the minimum level
if top 's left or right child exist  push them to Queue
return the sum
Driver code
binary tree creation
A binary tree node
Given a tree and a sum , return true if there is a path from the root down to a leaf , such that adding up all the values along the path equals the given sum . Strategy : subtract the node value from the sum when recurring down , and check to see if the sum is 0 when you run out of tree . s is the sum
Constructed binary tree is 10 / \ 8 2 / \ / 3 5 2
Python program to find sum of all paths from root to leaves A Binary tree node
Returs sums of all root to leaf paths . The first parameter is root of current subtree , the second paramete "r is value of the number formed by nodes from root to this node
Base Case
Update val
If current node is leaf , return the current value of val
Recur sum of values for left and right subtree
A wrapper function over treePathSumUtil ( )
Pass the initial value as 0 as ther is nothing above root
Driver function to test above function
Helper class that allocates a new node with the given data and None left and right pointers .
Given a binary tree , prits nodes in inorder
first recur on left child
then print the data of node
now recur on right child
Function to merge given two binary trees
Driver code
Let us construct the first Binary Tree 1 / \ 2 3 / \ \ 4 5 6
Let us construct the second Binary Tree 4 / \ 1 7 / / \ 3 2 6
A binary tree node has data , pointer to left child and a pointer to right child
Structure to store node pair onto stack
Helper function that allocates a new node with the given data and None left and right pointers .
Given a binary tree , print its nodes in inorder
first recur on left child
then print the data of node
now recur on right child
Function to merge given two binary trees
Driver code
Let us construct the first Binary Tree 1 / \ 2 3 / \ \ 4 5 6
Let us construct the second Binary Tree 4 / \ 1 7 / / \ 3 2 6
Find root of tree where children sum for every node id is given
Every node appears once as an id , and every node except for the root appears once in a sum . So if we subtract all the sums from all the ids , we 're left  with the root id.
Driver Code
A utility function to search x in arr [ ] of size n
Prints postorder traversal from given inorder and preorder traversals
The first element in pre [ ] is always root , search it in in [ ] to find left and right subtrees
If left subtree is not empty , print left subtree
If right subtree is not empty , print right subtree
Print root
Driver code
A binary tree node
This function returns pointer to LCA of two given values n1 and n2 This function assumes that n1 and n2 are present in Binary Tree
Base Case
If either n1 or n2 matches with root 's key, report  the presence by returning root (Note that if a key is  ancestor of other, then the ancestor key becomes LCA
Look for keys in left and right subtrees
If both of the above calls return Non - NULL , then one key is present in once subtree and other is present in other , So this node is the LCA
Otherwise check if left subtree or right subtree is LCA
Driver program to test above function Let us create a binary tree given in the above example
A binary tree node
This function retturn pointer to LCA of two given values n1 and n2 v1 is set as true by this function if n1 is found v2 is set as true by this function if n2 is found
Base Case
IF either n1 or n2 matches ith root 's key, report  the presence by setting v1 or v2 as true and return  root (Note that if a key is ancestor of other, then the ancestor key becomes LCA)
Look for keys in left and right subtree
If both of the above calls return Non - NULL , then one key is present in once subtree and other is present in other , So this node is the LCA
Otherwise check if left subtree or right subtree is LCA
Returns true if key k is present in tree rooted with root
This function returns LCA of n1 and n2 onlue if both n1 and n2 are present in tree , otherwise returns None
Initialize n1 and n2 as not visited
Find lac of n1 and n2 using the technique discussed above
Returns LCA only if both n1 and n2 are present in tree
Else return None
Driver program to test above function
Python code to find LCA of given two nodes in a tree
the graph
level of each node
the segment tree
adding edges to the graph ( tree )
assigning level to nodes
storing the dfs traversal in the array e
making the array l
making the array h
if is already stored
Range minimum query to return the index of minimum in the subarray L [ qs : qe ]
out of range
in the range
constructs the segment tree
leaf
Function to get LCA
Driver Code
n = number of nodes in the tree q = number of queries to answer
1 / | \ 2 3 4 | \ 5 6 / | \ 8 7 9 ( right of 5 ) / | \ | \ 10 11 12 13 14 | 15
Utility class to create a new tree Node
Utility function to find the LCA of two given values n1 and n2 .
Base case
If either n1 or n2 matches with root 's key,   report the presence by returning root (Note   that if a key is ancestor of other, then the   ancestor key becomes LCA 
Look for keys in left and right subtrees
If both of the above calls return Non - None , then one key is present in once subtree and other is present in other , So this node is the LCA
Otherwise check if left subtree or right subtree is LCA
Utility Function to print all ancestors of LCA
base cases
If target is present in either left or right subtree of this node , then prthis node
Else return False
Function to find nodes common to given two nodes
Driver Code
Let us create binary tree given in the above example
A Python class that represents an individual node in a Binary Tree
Python3 program to find maximum difference between node and its ancestor
Helper function that allocates a new node with the given data and None left and right poers .
Recursive function to calculate maximum ancestor - node difference in binary tree . It updates value at ' res ' to store the result . The returned value of this function is minimum value in subtree rooted with ' t '
Returning Maximum value if node is not there ( one child case )
If leaf node then just return node 's value 
Recursively calling left and right subtree for minimum value
Updating res if ( node value - minimum value from subtree ) is bigger than res
Returning minimum value got so far
This function mainly calls maxDiffUtil ( )
Initialising result with minimum value
Helper function to print inorder traversal of binary tree
Driver Code
Let us create Binary Tree shown in above example
Initialize n1 and n2 as not visited
structure of a node of binary tree
This function returns pointer to LCA of two given values n1 and n2 . v1 is set as True by this function if n1 is found v2 is set as True by this function if n2 is found
Base case
If either n1 or n2 matches with root 's data, report the presence  by setting v1 or v2 as True and return root (Note that if a key is ancestor of other, then the ancestor key becomes LCA)
Look for nodes in left and right subtrees
If both of the above calls return Non - None , then one node is present in one subtree and other is present in other , So this current node is the LCA
Otherwise check if left subtree or right subtree is LCA
Returns True if key k is present in tree rooted with root
Base Case
If key k is present at root , or in left subtree or right subtree , return True
Else return False
This function returns LCA of n1 and n2 only if both n1 and n2 are present in tree , otherwise returns None
Find lca of n1 and n2
Return LCA only if both n1 and n2 are present in tree
Else return None
function returns True if there is a path from root to the given node . It also populates arr ' with the given path
if root is None there is no path
push the node ' s ▁ value ▁ in ▁ ' arr
if it is the required node return True
else check whether there the required node lies in the left subtree or right subtree of the current node
required node does not lie either in the left or right subtree of the current node Thus , remove current node ' s ▁ value ▁ from ▁ ' arr '  and then return False;
function to print the path common to the two paths from the root to the two given nodes if the nodes lie in the binary tree
vector to store the common path
LCA of node n1 and n2
if LCA of both n1 and n2 exists
then print the path from root to LCA node
LCA is not present in the binary tree either n1 or n2 or both are not present
Driver Code
Python program to query whether two node has ancestor - descendant relationship or not
Utility dfs method to assign in and out time to each node
assign In - time to node u
call dfs over all neighbors except parent
assign Out - time to node u
method to preprocess all nodes for assigning time
construct array of vector data structure for tree
call dfs method from root
method returns " yes " if u is a ancestor node of v
Driver Code
Helper Class that allocates a new node with the given data and None left and right pointers .
Returns true if there is a path from root to the given node . It also populates ' arr ' with the given path
if root is None there is no path
push the node ' s ▁ value ▁ in ▁ ' arr ' 
if it is the required node return true
else check whether the required node lies in the left subtree or right subtree of the current node
required node does not lie either in the left or right subtree of the current node . Thus , remove current node ' s ▁ value ▁ ▁ ▁ from ▁ ' arr 'and then return false 
function to print the path from root to the given node if the node lies in the binary tree
vector to store the path
if required node ' x ' is present then print the path
' x ' is not present in the binary tree
Driver Code
binary tree formation
A Binary Tree node
If target is present in tree , then prints the ancestors and returns true , otherwise returns false
Base case
If target is present in either left or right subtree of this node , then print this node
Else return False
Construct the following binary tree 1 / \ 2 3 / \ 4 5 / 7
A Binary Tree Node
recursive function to calculate Kth ancestor
Base case
print the kth ancestor
return None to stop further backtracking
return current node to previous call
Driver Code
prkth ancestor of given node
check if parent is not None , it means there is no Kth ancestor of the node
Node structure
This function fills lists ' struc ' and ' data ' . ' struc ' list stores structure information . ' data ' list stores tree data
If root is None , put 0 in structure array and return
Else place 1 in structure array , key in ' data ' array and recur for left and right children
Constructs tree from ' struc ' and 'data  
Remove one item from structure list
If removed bit is 1
Remove an item from data list
Create a tree node with removed data
And recur to create left and right subtrees
A utility function to print tree
Let us conthe Tree shown in the above figure
Structure iterator
Data iterator
Updates such that getElement ( ) gets an increased value when queried from l to r .
Get the element indexed at i
To get ith element sum of all the elements from 0 to i need to be computed
Driver Code
Find the element at Index 4
Find the element at Index 3
Updates a node in Binary Index Tree ( BITree ) at given index in BITree . The given value ' val ' is added to BITree [ i ] and all of its ancestors in tree .
index in BITree [ ] is 1 more than the index in arr [ ]
Traverse all ancestors and add 'val  
Add ' val ' to current node of BI Tree
Update index to that of parent in update View
Constructs and returns a Binary Indexed Tree for given array of size n .
Create and initialize BITree [ ] as 0
Store the actual values in BITree [ ] using update ( )
SERVES THE PURPOSE OF getElement ( ) Returns sum of arr [ 0. . index ] . This function assumes that the array is preprocessed and partial sums of array elements are stored in BITree [ ]
Iniialize result
index in BITree [ ] is 1 more than the index in arr [ ]
Traverse ancestors of BITree [ index ]
Add current element of BITree to sum
Move index to parent node in getSum View
Return the sum
Updates such that getElement ( ) gets an increased value when queried from l to r .
Increase value at ' l ' by 'val  
Decrease value at ' r + 1' by 'val  
Driver code
Add 2 to all the element from [ 2 , 4 ]
Find the element at Index 4
Add 2 to all the element from [ 0 , 3 ]
Find the element at Index 3
Python3 program to prPostorder traversal from given Inorder and Preorder traversals .
Find index of next item in preorder traversal in inorder .
traverse left tree
traverse right tree
prroot node at the end of traversal
Driver code
Function to check if the indices ( i , j ) are valid indices in a Matrix or not
Cases for invalid cells
Return true if valid
Function to find indices of cells of a matrix from which traversal leads to out of the matrix
Starting from cell ( 0 , 0 ) , traverse in right direction
Stores direction changes
Iterate until the current cell exceeds beyond the matrix
Current index
If the current cell is 1
Update arr [ i ] [ j ] = 0
Update indices according to the direction
Otherwise
Update indices according to the direction
The exit cooridnates
Number of rows
Number of columns
Given matrix arr [ ] [ ]
Function to check if N can be represented as sum of two perfect cubes or not
Stores the perfect cubes of first N natural numbers
Traverse the map
Stores first number
Stores second number
Search the pair for the first number to obtain sum N from the Map
If N cannot be represented as sum of two positive perfect cubes
Function call to check if N can be represented as sum of two perfect cubes or not
Function to find number of subsets satisfying the given condition
Stores number of required sets
Stores maximum element of arr [ ] that defines the size of sieve
Iterate through the arr [ ]
If current element > maxE , then update maxE
Declare an array sieve of size N + 1
Mark all elements corresponding in the array , by one as there will always exists a singleton set
Iterate from range [ 1 , N ]
If element is present in array
Traverse through all its multiples <= n
Update them if they are present in array
Iterate from the range [ 1 , N ]
Update the value of cnt
Prthe result
Driver Code
Function Call
Function to find the day of 1 st January of Y year
Count years between years Y and B
Count leap years
Non leap years
Total number of days in the years lying between the years Y and B
Actual day
Driver code
Function to prthe array
Function to perform the query in range [ L , R ] such that arr [ i ] += i - L + 1
Initialize array
Traverse the query array
Stores range in 1 - based index
Update arr1 [ L ]
Update arr1 [ R + 1 ]
Update arr2 [ R + 1 ]
Calculate prefix sum
Traverse the array , arr2 [ ]
Copy arr2 [ ] into arr [ ]
Driver Code
Given array
Size of the array
Stores count of query
Function Call
Function to return the product of 2 numbers
If any of the two numbers is None
Otherwise , return the product
Function to calculate maximum product by taking only one element from each array present in the list
Find the maximum and minimum present in the current array
If last index is reached , then return the highest ( positive ) and lowest ( negative ) values
Store the positive and negative products returned by calculating for the remaining arrays
Store highest positive product
Store product of highest with negative
Store product of lowest with positive
Store lowest negative product
Return the maximum positive and minimum negative product
Count of given arrays
Given list of N arrays
Store the maximum positive and minimum negative product possible
Print the maximum product
Python3 program for the above approach
Function to find a number with maximum count of trailing nine
Stores count of digits in n
Stores power of 10
If last i digits greater than or equal to d
Update res
Update p10
Driver Code
Function Call
Function to find minimum count of ways to split the array into two subset such that elements of each pair occurs in two different subset
Stores minimum count of ways to split array into two subset such that elements of each pair occurs in two different subset
if n is odd
driver code
Function to return minimum number of chocolates
decreasing sequence
add the chocolates received by that person
end point of decreasing sequence
val = 1 reset value at that index
increasing sequence
flat sequence
add value of chocolates at position n - 1
Helper function to get sum of decreasing sequence
value obtained from decreasing sequence also the count of values in the sequence
assigning max of values obtained from increasing and decreasing sequences
sum of count - 1 values & peak value sum of natural numbers : ( n * ( n + 1 ) ) / 2
Driver code
Function to remove array elements such that frequency of each distinct array element is at most K
Base Case
Stores index of array element by removing the array element such that the frequency of array elements is at most K
Traverse the array
If j < k or arr [ i ] > arr [ j - k ]
Update arr [ j ]
Remove array elements
Function to print the array
Traverse the array
Utility Function to remove array elements such that frequency of each distinct array element is at most K
Print updated array
Driver Code
Function to count pairs of equal elements by removing arr [ i ] from the array
Stores total count of pairs of equal elements
Store frequency of each distinct array element
Traverse the array
Update frequency of arr [ i ]
Traverse the map
Stores key of an element
Traverse the array
Stores count of pairs of equal element by removing arr [ i ]
Driver Code
Given Array
Function to find the smallest divisor of N greater than 1
If i is a divisor of N
If N is a prime number
Function to find the value of N by performing the operations K times
If N is an even number
Update N
If N is an odd number
Update N
Driver Code
Python3 program to implement the above approach
Function to find the minimum count of subsets by partitioning the array with given conditions
Store frequency of each distinct element of the array
Traverse the array
Update frequency of arr [ i ]
Stores GCD of frequency of each distinct element of the array
Update freqGCD
Driver Code
Initialize rows and columns
Store all 8 directions
Function to check if a cell ( i , j ) is valid or not
Function to find sum of adjacent cells for cell ( i , j )
Initialize sum
Visit all 8 directions
Check if cell is valid
Return sum
Function to print sum of adjacent elements
Stores the resultant matrix
Iterate each elements of matrix
Find adjacent sum
Driver code
Given matrix
Size of matrix
Function call
Python3 program for the above approach
Declare T [ ] [ ] as global matrix
Result matrix
Function to multiply two matrices
Create an auxiliary matrix to store elements of the multiplication matrix
Iterate over range [ 0 , K ]
Update temp [ i ] [ j ]
Update the final matrix
Function to multiply two matrices
Create an auxiliary matrix to store elements of the multiplication matrix
Iterate over range [ 0 , K ]
Update temp [ i ] [ j ]
Update the final matrix
Function to calculate matrix ^ n using binary exponentaion
Initialize result matrix and unity matrix
Function to calculate nth term of general recurrence
Fill T [ ] [ ] with appropriate value
Function Call to calculate T ^ n
Calculate nth term as first element of F * ( T ^ n )
Print the result
Driver Code
Given Initial terms
Given coefficients
Given K
Given N
Function Call
Python3 program for the above approach
Function to find the Nth root
Initially guessing random numberbetween 0 and 9
Smaller eps for more accuracy
Initialize difference between the two roots by INT_MAX
xK denotes current value of x
Iterate until desired accuracy is reached
Find the current value from previous value by newton 's method
Function to calculate the Root Mean kth power of array elements
Calculate sum of kth power
Calculate Mean
Calculate kth Root of mean
Driver Code
Function Call
Function to return the stack that contains the sum of two numbers
Calculate the sum of the top elements of both the stacks
Push the sum into the stack
Store the carry
Pop the top elements
If N1 is not empty
If N2 is not empty
If carry remains
Reverse the stack . so that most significant digit is at the bottom of the stack
Function to display the resultamt stack
Driver Code
Python3 implementation of the above approach
Function to check if the number is a perfect square
Find floating povalue of square root of x .
If square root is an integer
Function to check if count of even divisors is even and count of odd divisors is odd
Driver code
Stores the bitwise XOR of array elements
Function to find the total xor
Loop to find the xor of all the elements
Function to find the XOR after replacing all occurrences of X by Y for Q queries
Remove contribution of X from total_xor
Adding contribution of Y to total_xor
Print total_xor
Driver Code
Function to check if a number is an ugly number or not
Base Cases
Condition to check if the number is divided by 2 , 3 , or 5
Driver Code
Function to find the required GCD value
If i is a factor of N
Return the largest factor possible
If N is a prime number
Driver Code
Function to find the minimum value of K in given range
Declare a set
Initialize count variable
Iterate in range [ 1 , 1024 ]
counter set as 0
Iterating through the Set
Check if the XOR calculated is present in the Set
If the value of Bitwise XOR inside the given set then increment count
Check if the value of count is equal to the size of set
Return minimum value of K
If no such K is found
Given array
Function Call
Python3 program for the above approach
Function to find the sum Of digits of N
To store sum of N and sumOfdigitsof ( N )
extracting digit
Function to check Junction numbers
To store count of ways n can be represented as i + SOD ( i )
Driver Code
Function Call
Function to find the product of digits of a number N
Function that returns true if n is prime else returns false
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to return the smallest prime number greater than N
Base case
Loop continuously until isPrime returns true for a number greater than n
Function to check Pointer - Prime numbers
Driver Code
Given number N
Function call
Function to find the sum of divisors
Function to check whether the given number is Perfect Digital Invariant number or not
For each digit in temp
If satisfies Perfect Digital Invariant condition
If sum exceeds n , then not possible
Given Number N
Function Call
Python3 program for the above approach
Function to generate all prime numbers less than n
Initialize all entries of boolean array as true . A value in isPrime [ i ] will finally be false if i is Not a prime
If isPrime [ p ] is not changed , then it is a prime
Update all multiples of p
Function to return the number of digits in a number
Function to check if N is a Brilliant number
Generating primes using Sieve
Traversing all numbers to find first pair
Given Number
Function Call
Function to Find the Nth icosikaienneagonal Number
Driver Code
Python3 program to find the a contiguous pair from the which has the largest sum
Function to find and return the largest sum contiguous pair
Stores the contiguous pair
Initialize maximum sum
Compare sum of pair with max_sum
Insert the pair
Driver Code
Python3 program for the above approach
x and y store solution of equation ax + by = g
Euclidean Algorithm
store_gcd returns the gcd of a and b
Function to find any possible solution
Condition if solution does not exists
Adjusting the sign of x0 and y0
Function to shift solution
Shifting to obtain another solution
Function to find minimum value of x and y
g is the gcd of a and b
Store sign of a and b
If x is less than 0 , then shift solution
If y is less than 0 , then shift solution
Find intersection such that both x and y are positive
miny is value of y corresponding to minx
Returns minimum value of x + y
Given a , b , and c
Function call
Function to check if N is a super - d number
Driver Code
Function to find N - th term in the series
Driver code
Function to check if a number N is Apocalyptic
Given Number N
Function Call
Python3 program for the above approach
Function to calculate the sum of all divisors of a given number
Sum of divisors
Find all divisors of num
If ' i ' is divisor of 'n
If both divisors are same then add it once
Add 1 and n to result as above loop considers proper divisors greater than 1.
Function to check if n is an Duffinian number
Calculate the sum of divisors
If number is prime return false
Find the gcd of n and sum of divisors of n
Returns true if N and sumDivisors are relatively prime
Given number
Function call
Python3 program to find Kummer number upto n terms
list to store all prime less than and equal to 10 ^ 6
Function for the Sieve of Sundaram . This function stores all prime numbers less than MAX in primes
In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than MAX , we reduce MAX to half This list is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j
Main logic of Sundaram . Mark all numbers which do not generate prime number by doing 2 * i + 1
Since 2 is a prime number
Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .
Function to calculate nth Kummer number
Multiply first n primes
return nth Kummer number
Driver code
Function which checks if a digits exists in n which is the average of all other digits
Calculate sum of digits in n
Store digits
Increase the count of digits in n
If average of all digits is integer
Otherwise
Driver code
function to count the smaller characters at the right of index i
store the length of String
for each index initialize count as zero
increment the count if characters are smaller than at ith index
print the count of characters smaller than the index i
Driver code
input String
Python3 program to find the smallest sum contiguous pair
Function to find the smallest sum contiguous pair
Contiguous pair
isntialize minimum sum with maximum value
checking for minimum value
Add to pair
Updating pair
Driver code
Function to find the sum of the products of their corresponding digits
Loop until one of the numbers have no digits remaining
Driver Code
Python3 implementation to count the number of ways a number can be written as sum of prime number and twice a square
Function to mark all the prime numbers using sieve
Loop to mark the prime numbers upto the Square root of N
Loop to store the prime numbers in an array
Function to find the number ways to represent a number as the sum of prime number and square of a number
Loop to iterate over all the possible prime numbers
Increment the count if the given number is a valid number
Driver Code
Function call
Function for conversion
Driver code
Function to convert BCD to hexadecimal
Iterating through the bits backwards
Computing the hexadecimal number formed so far and storing it in a vector .
Reinitializing all variables for next group .
Printing the hexadecimal number formed so far .
Driver Code
Function Call
Function to find the N - th Dodecagonal number
Formula to calculate N - th Dodecagonal number
Function to find the sum of the first N Dodecagonal numbers
Variable to get the sum
Iterating through the first N numbers
Compute the sum
Driver Code
Display first Nth centered_decagonal number
Python3 implementation to check that a number is a myriagon number or not
Function to check that the number is a myriagon number
Condition to check if the number is a myriagon number
Given Number
Function call
Python3 program for the above approach
Function to check if N is a heptagonal number
Condition to check if the number is a heptagonal number
Given Number
Function call
Python3 program for the above approach
Function to check if number N is a enneadecagonal number
Condition to check if N is a enneadecagonal number
Given Number
Function call
Python3 program for the above approach
Function to check if the number N is a centered tridecagonal number
Condition to check if N is centered tridecagonal number
Given Number
Function call
Python3 code to Find the Nth number which is not divisible by A from the series
Find the quotient and the remainder when k is divided by n - 1
if remainder is 0 then multiply n by q and add the remainder
print the answer
driver code
Python3 implementation to Count the Nodes in the given tree whose weight is a Perfect Number
Function that returns True if n is perfect
Variable to store sum of divisors
Find all divisors and add them
Check if sum of divisors is equal to n , then n is a perfect number
Function to perform dfs
If weight of the current Node is a perfect number
Weights of the Node
Edges of the tree
Function returns the minimum cost
Min Heap representation
Add all elements to heap
First minimum
Second minimum
Multiply them
Add to the cost
Push the product into the heap again
Return the optimal cost
Driver code
Python3 program to count permutations from 1 to N such that prime numbers occur at prime indices
Computing count of prime numbers using sieve
Computing permutations for primes
Computing permutations for non - primes
Driver code
Function to calculate factorial
Applying the formula
Driver code
Call count_heads with n and r
mark this node as visited
apply dfs and add nodes belonging to this component
create graph and store in adjacency list form
iterate over all pair of nodes
if not co - prime
build undirected graph
visited array for dfs
Driver Code
smallest prime factor
Sieve of Eratosthenes
is spf [ i ] = 0 , then it 's prime
smallest prime factor of all multiples is i
Prime factorise n , and store prime factors in set s
for implementing DSU
root of component of node i
finding root as well as applying path compression
merging two components
find roots of both components
if already belonging to the same compenent
Union by rank , the rank in this case is sizeContainer of the component . Smaller sizeContainer will be merged into larger , so the larger 's root will be  final root
Function to find the maximum sized container
intitalise the parents , and component sizeContainer
intitally all component sizeContainers are 1 ans each node it parent of itself
store prime factors of a [ i ] in s
if this prime is seen as a factor for the first time
if not then merge with that component in which this prime was previously seen
maximum of sizeContainer of all components
Driver Code
Python program for Counting nodes whose immediate children are its factors
To store all prime numbers
Create a boolean array " prime [ 0 . . N ] " and initialize all its entries as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiples of p and are less than p ^ 2 are already marked .
A Tree node
Function to check if immediate children of a node are its factors or not
Function to get the count of full Nodes in a binary tree
If tree is empty
Initialize count of full nodes having children as their factors
If only right child exist
If only left child exist
Both left and right child exist
Check for left child
Check for right child
Driver Code
Create Binary Tree as shown
To save all prime numbers
Print Count of all nodes having children as their factors
Function to check if original Array can be retained by performing XOR with M exactly K times
Check if O is present or not
If K is odd and 0 is not present then the answer will always be No .
Else it will be Yes
Driver Code
Python 3 implementation of Dixon factorization algo
Function to find the factors of a number using the Dixon Factorization Algorithm
Factor base for the given number
Starting from the ceil of the root of the given number N
Storing the related squares
For every number from the square root Till N
Finding the related squares
If the two numbers are the related squares , then append them to the array
For every pair in the array , compute the GCD such that
If we find a factor other than 1 , then appending it to the final factor array
Driver Code
Python3 program to find longest subarray of prime numbers
To store the prime numbers
Function that find prime numbers till limit
Find primes using Sieve of Eratosthenes
Function that finds all prime numbers in given range using Segmented Sieve
Find the limit
To store the prime numbers
Compute all primes less than or equals to sqrt ( high ) using Simple Sieve
Count the elements in the range [ low , high ]
Declaring and initializing boolean for the range [ low , high ] to False
Traverse the prime numbers till limit
Find the minimum number in [ low . . high ] that is a multiple of prime [ i ]
Mark the multiples of prime [ i ] in [ low , high ] as true
Element which are not marked in range are Prime
Function that finds longest subarray of prime numbers
If element is Non - prime then updated current_max to 0
If element is prime , then update current_max and max_so_far
Return the count of longest subarray
Driver Code
Find minimum and maximum element
Find prime in the range [ min_el , max_el ]
Function call
pref [ ] array to precompute the sum of all armstrong number
Function that return number num if num is armstrong else return 0
Function to precompute the sum of all armstrong numbers upto 100000
checkarmstrong ( ) return the number i if i is armstrong else return 0
Function to print the sum for each query
Function to prsum of all armstrong numbers between [ L , R ]
Function that pre computes the sum of all armstrong numbers
Iterate over all Queries to print the sum
Queries
Function that print the the sum of all armstrong number in Range [ L , R ]
prime [ ] array to calculate Prime Number
Array to store the value of k for each element in arr [ ]
For value of k , Sieve implemented
Initialize k [ i ] to i
Prime sieve
If i is prime then remove all factors of prime from it
Update that j is not prime
Remove all square divisors i . e if k [ j ] is divisible by i * i then divide it by i * i
Function that return total count of pairs with perfect square product
Map used to store the frequency of k
Store the frequency of k
The total number of pairs is the summation of ( fi * ( fi - 1 ) ) / 2
Driver code
Length of arr
To pre - compute the value of k
Function that return total count of pairs with perfect square product
Array to precompute the sum of cubes from 1 to 100010 so that for every query , the answer can be returned in O ( 1 ) .
Function to check if a number is a perfect Cube or not
Find floating point value of cube root of x .
If cube root of x is cr return the x , else 0
Function to precompute the perfect Cubes upto 100000.
Function to print the sum for each query
Driver code
To calculate the precompute function
Calling the printSum function for every query
Function to compute the value of Binomial Coefficient C ( n , k )
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Function to calculate sum of nCj from j = 1 to k
Calling the nCr function for each value of j
Driver code
A Binary tree node
Check if the binary tree is isomorphic or not
Both roots are None , trees isomorphic by definition
Exactly one of the n1 and n2 is None , trees are not isomorphic
There are two possible cases for n1 and n2 to be isomorphic Case 1 : The subtrees rooted at these nodes have NOT been " Flipped " . Both of these subtrees have to be isomorphic , hence the && Case 2 : The subtrees rooted at these nodes have been " Flipped "
Let us create trees shown in above diagram
Function to find the number having sum of digits as s and d number of digits such that the difference between the maximum and the minimum digit the minimum possible
To store the final number
To store the value that is evenly distributed among all the digits
To store the remaining sum that still remains to be distributed among d digits
rem stores the value that still remains to be distributed To keep the difference of digits minimum last rem digits are incremented by 1
In the last rem digits one is added to the value obtained by equal distribution
Driver function
Function to find the kth smallest value for b
res wistore final answer
skip when j ' th ▁ position ▁ ▁ has ▁ 1 ▁ in ▁ binary ▁ representation ▁ ▁ as ▁ in ▁ res , ▁ j ' th position wibe 0.
j 'th bit is set
i 'th bit is set
proceed to next bit
Driver Code
Function to calculate a ^ b mod m using fast - exponentiation method
Function to calculate sum
Itereate for all values of array A
Calling fast - exponentiation and appending ans to sum
Driver code .
Function to return the total no . of Triangles
For every subtriangle formed there are possibilities of generating ( curr * 3 ) + 2
Changing the curr value to Tri_count
Function to return the number of sequences that get back to Bob
Driver code
Function to return the number of subarrays of the given array such that the remainder when dividing the sum of its elements by K is equal to the number of its elements
To store prefix sum
We are dealing with zero indexed array
Taking modulus value
Prefix sum
To store the required answer , the left index and the right index
To store si - i value
Include sum
Increment the right index
If subarray has at least k elements
Return the required answer
Driver code
Function call
Python 3 implementation of the approach
Function for Sieve of Eratosthenes
Function to return the sum of the required prime numbers
Maximum number of the required range
Sieve of Eratosthenes
To store the required sum
If current element is prime
Driver code
Python3 implementation of the approach
Function that returns true if the exchange is possible
Find the GCD of the array elements
If the exchange is possible
Driver code
Function to find the numbers from the given arrays such that their sum is not present in any of the given array
Find the maximum element from both the arrays
Driver code
Python3 implementation of the approach
Utility function to print the array elements
Function to generate and print the required array
To switch the ceil and floor function alternatively
For every element of the array
If the number is odd then print the ceil or floor value after division by 2
Use the ceil and floor alternatively
If arr [ i ] is even then it will be completely divisible by 2
Driver code
Function to return the value of Binomial Coefficient C ( n , k )
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Function to return the count of valid subsequences
Sort the array
Maximum among the minimum K elements
Y will store the frequency of num in the minimum K elements
cntX will store the frequency of num in the complete array
Driver code
Function to convert the number into binary and store the number into an array
Function to check if the sum of the digits till the mid of the array and the sum of the digits from mid till n is the same , if they are same then print that binary
Calculating the sum from 0 till mid and store in sum1
Calculating the sum from mid till n and store in sum2
If sum1 is same as sum2 print the binary
Function to prsequence
Creating the array
'' Looping over powers of 2 
Converting the number into binary first
Checking if the sum of the first half of the array is same as the sum of the next half
Driver Code
Python3 implementation of the above approach
Utility function to check whether two numbers is co - prime or not
Utility function to check whether a number is prime or not
Corner case
Check from 2 to sqrt ( n )
finding the Prime numbers
Checking whether given numbers are co - prime or not
To store the N primes
If ' possible ' is true
Printing n numbers of prime
checking the form of a + nb
Checking the form of b + na
If ' possible ' is false return - 1
Driver Code
Function to print the elements Not ending with T1 or T2
Flag to check if none of the elements Do not end with t1 or t2
Traverse through all the elements
Temporary variable to store the value
If the last digit is neither t1 nor t2 then
Print the number
Set the flag as False
If none of the elements meets the specification
Test case 1
Call the function
Test case 2
Call the function
Python3 code for above implementation
Function to return the sum of digits of n
Add last digit to the sum
Remove last digit
Function to return the nth term of the required series
If sum of digit is already a multiple of 10 then append 0
To store the minimum digit that must be appended
Return n after appending the required digit
Function to print the first n terms of the required series
Driver code
Python3 program to find nearest greater value
Find all the possible permutation of Value A .
Convert into Integer
Find the minimum value of A by interchanging the digits of A and store min1 .
Driver code
Convert integer value into to find all the permutation of the number
count = 1 means number greater than B exists
Python3 program for AlcuinaTMs Sequence
find the nth term of Alcuin 's sequence
return the ans
print first n terms of Alcuin number
display the number
Driver code
Python3 implementation of the approach
Driver Code
Function that returns true if the product of every digit of a contiguous subsequence is distinct
To store the given number as a string
Append all the digits starting from the end
Reverse the string to get the original number
Store size of the string
Set to store product of each contiguous subsequence
Find product of every contiguous subsequence
If current product already exists in the set
Driver code
Function to find factorial of a number
Function to find nCr
Function to find the number of ways to arrange 2 * N persons
Driver code
Function call
Method to find smallest number Y for a given value of X such that X AND Y is zero
Convert the number into its binary form
Case 1 : If all bits are ones , then return the next number
Case 2 : find the first 0 - bit index and return the Y
Driver Code
Python3 implementation of above approach
function for converting binary string into integer value
function to count number of 1 's using bitset 
Converting the string into bitset
Bitwise operations Left shift
Right shifts
return count of one in [ L , R ]
Driver code
Function to return the largest element such that its previous and next element product is maximum
Calculate the product of the previous and the next element for the current element
Update the maximum product
If current product is equal to the current maximum product then choose the maximum element
Driver code
Function to return the value of ncr effectively
Initialize the answer
Divide simultaneously by i to avoid overflow
Function to return the count of required ways
Function to generate the required array
Initialize cnt variable for assigning unique value to prime and its multiples
When we get a prime for the first time then assign a unique smallest value to it and all of its multiples
Print the generated array
Driver code
Python implementation of the approach
Function to perform dfs to find the maximum set bits value
If current set bits value is greater than the current maximum
If count is equal to the maximum then choose the node with minimum value
Driver Code
Weights of the node
Edges of the tree
Function to return count of required pairs
Count of odd and even numbers from both the arrays
Find the count of odd and even elements in a [ ]
Find the count of odd and even elements in b [ ]
Count the number of pairs
Return the number of pairs
Driver code
Function to find index
Array to store log values of elements
Prefix Array to Maintain Sum of log values till index i
Answer Index
Find minimum absolute value
Driver Code
Function to return the value of F ( N )
Base cases
Count the number of times a number if divisible by 2
Return the summation
Driver code
Python3 code for above given approach
To store the number of divisors
Function to find the number of divisors of all numbers in the range 1 to n
For every number 1 to n
Increase divisors count for every number
Function to find the sum of divisors
To store sum
Count the divisors
Driver code
Function call
Function to return A mod B
length of the string
to store required answer
Function to return ( 1 ^ n + 2 ^ n + 3 ^ n + 4 ^ n ) % 5
Calculate and return ans
Driver code
Function to print elements greater than the previous and next element in an Array
Traverse array from index 1 to n - 2 and check for the given condition
Driver Code
Recursive python3 program to compute modular power
Base cases
If B is even
If B is odd
Function to return sum
Driver code
Python3 implementation of the approach
check if a number is prime or not
run a loop upto square root of x
Function to return the minimized cost
If n is prime
If n is odd and can be split into ( prime + 2 ) then cost will be 1 + 1 = 2
Every non - prime even number can be expressed as the sum of two primes
n is odd so n can be split into ( 3 + even ) further even part can be split into ( prime + prime ) ( 3 + prime + prime ) will cost 3
Driver code
Function to calculate amount of wasted water
filled amount of water in one minute
total time taken to fill the tank because of leakage
wasted amount of water
Driver code
Python3 implementation of the approach
Function to print the largest and the smallest n - digit perfect cube
Smallest n - digit perfect cube
Largest n - digit perfect cube
Driver code
Function to return the count of numbers from 1 to n which are divisible by all the numbers from 2 to 10
Driver code
Python3 implementation of the approach
Function to calculate the prefix sum of all the odd factors
Add i to all the multiples of i
Update the prefix sum
Function to return the sum of all the odd factors of the numbers in the given range
Driver code
Python3 program to find the number of ways in which an item returns back to its initial position in N swaps in an array of size K
Function to calculate ( x ^ y ) % p in O ( log y )
Initialize result
Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y / 2
Function to return the number of ways
Base case
Recursive case F ( n ) = ( k - 1 ) ^ ( n - 1 ) - F ( n - 1 ) .
Function calling
Python implementation of the approach
Function to pre - compute the xor
Left to right prefix xor for each row
Top to bottom prefix xor for each column
Function to process the queries x1 , x2 , y1 , y2 represent the positions of the top - left and bottom right corners
To store the xor values
Finding the values we need to xor with value at ( x2 , y2 ) in prefix - xor matrix
Return the required prefix xor
Driver code
To store pre - computed xor
Pre - computing xor
Queries
Python3 implementation of the approach
Function that returns true if the eventual digit sum of number nm is 1
if reminder will 1 then eventual sum is 1
Function to print the required numbers less than n
If it is the required perfect cube
Driver code
Function to return the count of rhombi possible
All possible diagonal lengths
Update rhombi possible with the current diagonal lengths
Return the total count of rhombi possible
Driver code
Function to find area between the two given concentric circles
Declare value of pi
Calculate area of outer circle
Calculate area of inner circle
Difference in areas
Driver Code
Python3 implementation of the approach
Function to return the winner of the game
To store the gcd of the original array
To store the maximum element from the original array
If number of moves are odd
Driver Code
Function to return the count of required pairs
Number which will give the Max value for ( ( n % i ) % j ) % n
To store the Maximum possible value of ( ( n % i ) % j ) % n
To store the count of possible pairs
Check all possible pairs
Calculating the value of ( ( n % i ) % j ) % n
If value is equal to Maximum
Return the number of possible pairs
Driver code
Function to check if given number is divisible by any of its digits
check if any of digit divides n
check if K divides N
Driver Code
Function to return sum of harmonic series
Driver Code
Python 3 program to check if number n is expressed as sum of two abundant numbers
Function to return all abundant numbers This function will be helpful for multiple queries
To store abundant numbers
to store sum of the divisors include 1 in the sum
if j is proper divisor
if i is not a perfect square
if sum is greater than i then i is a abundant numbe
Check if number n is expressed as sum of two abundant numbers
if both i and n - i are abundant numbers
can not be expressed
Driver code
Python3 program to find nth term of the series 5 2 13 41
function to calculate nth term of the series
if n is even number
if n is odd number
return nth term
Driver code
Function to calculate cost price with profit
required formula to calculate CP with profit
Function to calculate cost price with loss
required formula to calculate CP with loss
Driver code
Python3 program to check if a given number is Non - Hypotenuse number or not .
Function to find prime factor and check if it is of the form 4 k + 1 or not
2 is a prime number but not of the form 4 k + 1 so , keep Dividing n by 2 until n is divisible by 2
n must be odd at this point . So we can skip one element ( Note i = i + 2 )
if i divides n check if i is of the form 4 k + 1 or not
while i divides n divide n by i and update n
This condition is to handle the case when n is a prime number greater than 2
Test function
Driver code
Python3 implementation of the above approach
Function to return the nth string in the required sequence
Length of the resultant string
Relative index
Initial string of length len consists of all a 's since the list is sorted
Convert relative index to Binary form and set 0 = a and 1 = b
Reverse and return the string
Driver Code
Function to return the nth term of the given series
nth term
Driver code
Function to return the required sum
Driver code
Function to return required count
Driver code
function call to print required answer
Function to return the required sum
Driver code
Python3 program to calculate the terms of summing of sum series
Function to calculate twice of sum of first N natural numbers
Function to calculate the terms of summing of sum series
Python 3 program to find log ( n ) using Recursion
Driver code
Function that sort input array a [ ] and calculate mode and median using counting sort .
variable to store max of input array which will to have size of count array
auxiliary ( count ) array to store count . Initialize count array as 0. Size of count array will be equal to ( max + 1 ) .
Store count of each element of input array
mode is the index with maximum count
Driver Code
Python3 program to check if a given array can form harmonic progression
Find reciprocal of arr [ ]
After finding reciprocal , check if the reciprocal is in A . P . To check for A . P . , first Sort the reciprocal array , then check difference between consecutive elements
Driver code
series to check whether it is in H . P
Checking a series is in H . P or not
Prints N arithmetic means between A and B .
Calculate common difference ( d )
For finding N the arithmetic mean between A and B
Driver code
Python program to print prime factors
A function to print all prime factors of a given number n
Print the number of two 's that divide n
n must be odd at this point so a skip of 2 ( i = i + 2 ) can be used
while i divides n , print i ad divide n
Condition if n is a prime number greater than 2
Driver Program to test above function
Python 3 implementation of above approach
Function to return the time when both the persons will meet at the starting point
Time to cover 1 round by both
Finding LCM to get the meeting point
Function to return the time when both the persons will meet for the first time
Driver Code
Calling function
Function to Check if the array has an element which is equal to product of all the remaining elements
Calculate the product of all the elements
Return true if any such element is found
If no element is found
Driver code
print the sum of common factors
sum of common factors
iterate from 1 to minimum of a and b
if i is the common factor of both the numbers
Driver Code
print the sum of common factors
Python 3 program to find the minimum number of additional cuts required to make circle segments equal sized
Function to find the minimum number of additional cuts required to make circle segments are equal sized
Sort the array
Initial gcd value
Including the last segment
Driver code
Python3 program to find a number that divides maximum array elements
stores smallest prime factor for every number
Calculating SPF ( Smallest Prime Factor ) for every number till MAXN . Time Complexity : O ( nloglogn )
marking smallest prime factor for every number to be itself .
separately marking spf for every even number as 2
checking if i is prime
marking SPF for all numbers divisible by i
marking spf [ j ] if it is not previously marked
A O ( log n ) function returning primefactorization by dividing by smallest prime factor at every step
Function to find a number that divides maximum array elements
precalculating Smallest Prime Factor
Hash to store frequency of each divisors
Traverse the array and get spf of each element
calling getFactorization function
Review set view
Driver Code
Function to calculate the Selling Price
Decimal Equivalent of Profit Percentage
Find the Selling Price
return the calculated Selling Price
Driver code
Get the CP and Profit %
Printing the returned value
Python3 program to find product of all the composite numberes in given array
function to find the product of all composite niumbers in the given array
find the maximum value in the array
USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array " prime [ 0 . . n ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
Set 0 and 1 as primes as they don 't need to be  counted as composite numbers  
if prime [ p ] is not changed , than it is prime
update all multiples of p
find the product of all composite numbers in the arr [ ]
Driver code
Function that return sum of the digits at odd places
Function to check if a number is prime
Corner cases
This is checked so that we can skip middle five numbers in below loop
driver code
Get the sum of the digits at odd places
Python3 program to find amount of water to be added to achieve given target ratio .
Driver code
Finds reverse of given num x .
if found print the pair , return
Python 3 program to Replace every element by the product of all other elements
Calculate the product of all the elements
Replace every element product of all other elements
Driver Code
Print the modified array .
function to count such possible numbers
if i is divisible by k
if count of such numbers is greater than one
Driver code
function to check if N and K are anagrams
Function to check if any permutation of N exist such that it is some power of K
generate all power of K under 10 ^ 18
check if any power of K is valid
Driver Code
function call to print required answer
Function to calculate the sum of numbers divisible by 2 or 7
Driver code
fast_way is recursive method to calculate power
Driver Code
Python3 program to find sum of n - th terms of a Fibonacci like series formed using first two terms of two arrays .
if sum of first term is required
if sum of second term is required
fibonacci series used to find the nth term of every series
as every b [ i ] term appears m times and every a [ i ] term also appears m times
m is the size of the array
Python3 program to find minimum distance to be travelled by lizard
side of cube
understand from diagram
understand from diagram
minimum distance
Function to find sum of series
If n is even
If n is odd
return the result
Driver Code
Get n
Find the sum
Get n
Find the sum
Python program to check Cousin prime
Function to check whether a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Returns true if n1 and n2 are Cousin primes
Check if they differ by 4 or not
Check if both are prime number or not
Get the 2 numbers
Check the numbers for cousin prime
Python3 program to check Chen Prime number
Utility function to Check Semi - prime number
Increment count of prime number
If count is greater than 2 , break loop
If number is greater than 1 , add it to the count variable as it indicates the number remain is prime number
Return '1' if count is equal to '2' else return '0
Utility function to check if a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to check if the Given number is Chen prime number or not
Driver code
Utility function to Check power of two
function to check if the given number is Thabit Number
Add 1 to the number
Divide the number by 3
Check if the given number is power of 2
Driver Program
Check if number is thabit number
Suppose the constraint is N <= 1000
Declare an array for dynamic approach
Method to compute the array
Declare an extra array as array
Iterate the loop till sqrt ( N ) Time Complexity is O ( log ( n ) X sqrt ( N ) )
if ith element of arr is 0 i . e . marked as prime
mark all of it 's multiples till N as  non-prime by setting the locations to 1
Update the array ' dp ' with the running sum of prime numbers within the range [ 1 , N ] Time Complexity is O ( n )
Here , dp [ i ] is the sum of all the prime numbers within the range [ 1 , i ]
Driver Code
Compute dp
Python3 program to find the smallest number to be added to make the sum of left and right subarrays equal
Function to find the minimum value to be added
Variable to store entire array sum
Variables to store sum of subarray1 and subarray 2
minimum value to be added
Traverse through the array
Sum of both halves
Calculate minimum number to be added
Driver code
Length of array
Python3 implementation of above solution
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Set all multiples of p to non - prime
find the sum of 1 st N prime numbers
count of prime numbers
sum of prime numbers
if the number is prime add it
increase the count
get to next number
create the sieve
find the value of 1 st n prime numbers
Function to calculate the factorial
Function to check if the number is prime or not
Driver code
Python program to find the total Number of Digits in ( N ! ) ^ N
Function to find the total Number of Digits in ( N ! ) ^ N
Finding X
Calculating N * X
Floor ( N * X ) + 1 equivalent to floor ( sum ) + 1
Driver code
Python 3 implementation of above approach
Function to calculate the value
forming the prefix sum arrays
Taking the query
finding the sum in the range l to r in array a
finding the sum in the range l to r in array b
Finding the max value of the function
Finding the min value of the function
Driver code
Function for calculating Nth term of series
return nth term
Driver code
Function Calling
to store power of 2
to store presum of the power of 2 's
function to find power of 2
to store power of 2
to store pre sum
Function to find the sum
first store sum of first n natural numbers .
find the first greater number than given number then minus double of this from answer
Driver code
function call
function call
Utility function to check if a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Driver Code
Check if number is prime and of the form 16 * n + 1
Function to find a number less than n such that all its digits are distinct
looping through numbers less than n
initializing a hash array
creating a copy of i
initializing variables to compare lengths of digits
counting frequency of the digits
checking if each digit is present once
Driver code
A linked list node
Function to check if two linked lists are permutations of each other first : reference to head of first linked list second : reference to head of second linked list
Variables to keep track of sum and multiplication
Traversing through linked list and calculating sum and multiply
Traversing through linked list and calculating sum and multiply
Function to add a node at the beginning of Linked List
Allocate node
Put in the data
Link the old list off the new node
Move the head to point to the new node
Driver Code
First constructed linked list is : 12 . 35 . 1 . 10 . 34 . 1
Second constructed linked list is : 35 . 1 . 12 . 1 . 10 . 34
from math lib . import everything
Function to generate all prime numbers less than n
Initialize all entries of boolean array as true . A value in isPrime [ i ] will finally be false if i is Not a prime , else true bool isPrime [ n + 1 ] ;
If isPrime [ p ] is not changed , then it is a prime
Function to print a prime pair with given product
Generating primes using Sieve
Traversing all numbers to find first pair
Driver code
Python 3 implementation of above approach
Function to print a : b : c
To print the given proportion in simplest form .
Driver code
Get ratio a : b1
Get ratio b2 : c
Find the ratio a : b : c
Function to count number of divisors of N which are divisible by K
Variable to store count of divisors
Traverse from 1 to n
increase the count if both the conditions are satisfied
Driver code
Python3 program to calculate Volume and Surface area of Cone
Function to calculate Volume of Cone
Function To Calculate Surface Area of Cone
Driver Code
Printing value of volume and surface area
calculate sum upto Nth term of series
return the final sum
Driver code
Python3 program to find the N - th term of the series : 5 , 10 , 17 , 26 , 37 , 50 , 65 , 82 , ...
calculate Nth term of series
return the final sum
Driver code
function to return required value
Get the answer
Return the answer
Get the value of n
function call to prresult
calculate Nth term of series
Return Nth term
driver code
declaration of number of terms
Get the Nth term
Python 3 program to find sum of product of number in given series
function to calculate ( a ^ b ) % p
Initialize result
Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
function to return required answer
modulo inverse of denominator
calculating commentator part
calculating t !
accumulating the final answer
Driver Code
function call to print required sum
Function to calculate sum
Return sum
driver code
Python 3 Program to find minimum players required to win the game anyhow
function to calculate ( a ^ b ) % ( 10 ^ 9 + 7 ) .
function to find the minimum required player
computing the nenomenator
computing modulo inverse of denominator
final result
Driver Code
Using SieveOfEratosthenes to find smallest prime factor of all the numbers . For example , if N is 10 , s [ 2 ] = s [ 4 ] = s [ 6 ] = s [ 10 ] = 2 s [ 3 ] = s [ 9 ] = 3 s [ 5 ] = 5 s [ 7 ] = 7
Create a boolean list " prime [ 0 . . n ] " and initialize all entries in it as false .
Initializing smallest factor equal to 2 for all the even numbers
For odd numbers less then equal to n
s [ i ] for a prime is the number itself
For all multiples of current prime number
i is the smallest prime factor for number " i * j " .
Function to find sum of all prime factors
Declaring list to store smallest prime factor of i at i - th index
Filling values in s [ ] using sieve function calling
Current prime factor of N
Power of current prime factor
N is now Ns [ N ] . If new N also has smallest prime factor as currFactor , increment power
Update current prime factor as s [ N ] and initializing power of factor as 1.
Driver Code
Function to count number of multiples of 2 or 3 or 5 less than or equal to N
As we have to check divisibility by three numbers , So we can implement bit masking
we check whether jth bit is set or not , if jth bit is set , simply multiply to prod
check for set bit
check multiple of product
Driver code
Function to find the value of N
handling case for '0
handling case for '1
when number is completely divided by 4 then minimum ' x ' will be 'k
when number divided by 4 gives 3 as remainder then minimum ' x ' will be 'k-1
else it is not possible to get k for any value of x
let the given number be 7
Function to find no . of permutations
Driver Code
Function to calculate the time
Driver Code
Function to find twins
Create a boolean array " prime [ 0 . . high ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
Look for the smallest twin
If p is not marked , then it is a prime
Update all multiples of p
Now print the largest twin in range
Driver Code
Function to find ( b - 1 ) 's complement
Calculate number of digits in the given number
Largest digit in the number system with base b
Largest number in the number system with base b
return Complement
Function to find b 's complement
b ' s ▁ complement ▁ = ▁ ( b - 1 ) ' s complement + 1
Driver code
Function to return gcd of a and b
Function to count the elements with maximum number of divisors
to store number of divisors initialise with zero
to store the maximum number of divisors
to store required answer
Find the first divisible number
Count number of divisors
Find number of elements with maximum number of divisors
Driver code
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
Initialize result
Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y / 2
function to find nearest element in common
base conditions
Driver Code
module both A and D
function call
Function to print Cunningham chain of the first kind
Iterate till all elements are printed
check prime or not
Driver Code
Function to count number of odd pairs
variable for counting odd pairs
find all pairs
find AND operation check odd or even
return number of odd pair
Driver Code
calling function findOddPair and print number of odd pair
Function to return dig - sum
Function to print the Digital Roots
store the largest digital roots
Iterate till sqrt ( n )
if i is a factor
get the digit sum of both factors i and n / i
if digit sum is greater then previous maximum
if digit sum is greater then previous maximum
if digit sum is same as then previous maximum , then check for larger divisor
if digit sum is same as then previous maximum , then check for larger divisor
Print the digital roots
Driver Code
Function call to prdigital roots
Function to find sum of all elements upto nth row .
Initialize sum with 0
Calculate 2 ^ n
Driver unicode
Python3 program for above approach
Returns the quotient of dividend / divisor .
Calculate sign of divisor i . e . , sign will be negative only if either one of them is negative otherwise it will be positive
Remove signs of dividend and divisor
Zero division Exception .
Using Formula derived above .
Driver code
Function to return the required fraction in string format
If the numerator is zero , answer is 0
If any one ( out of numerator and denominator ) is - ve , sign of resultant answer - ve .
Calculate the absolute part ( before decimal point ) .
Output string to store the answer
Append sign
Append the initial part
If completely divisible , return answer .
Initialize Remainder
Position at which fraction starts repeating if it exists
If this remainder is already seen , then there exists a repeating fraction .
Index to insert parentheses
Calculate quotient , append it to result and calculate next remainder
If repeating fraction exists , insert parentheses .
Return result .
Driver code
Return if the nth term is even or odd .
If a is even
If b is even
If b is odd
If a is odd
If b is odd
If b is eve
Driver Code
Return " Yes " , if the mirror image of number is same as the given number Else return " No "
Checking if the number contain only 0 , 1 , 8.
Checking if the number is palindrome or not .
If corresponding index is not equal .
Driver Code
function to check polydivisible number
digit extraction of input number
store the digits in an array
n contains first i digits
n should be divisible by i
Driver Code
Python3 program to find if a number is power of d where d is power of 2.
Function to count the number of ways to paint N * 3 grid based on given conditions
Check if there is only one bit set in n
count 0 bits before set bit
If count is a multiple of log2 ( d ) then return true else false
If there are more than 1 bit set then n is not a power of 4
Driver Code
Function to find octahedral number
Formula to calculate nth octahedral number
Driver Code
print result
Function to calculate Centered tetrahedral number
Formula to calculate nth Centered tetrahedral number and return it into main function
Driver Code
Python 3 program to swap 4 variables without using temporary variable .
swapping a and b variables
swapping b and c variables
swapping c and d variables
initialising variables
Function call
Function to find the sum of series
Driver code
Python3 Program to check whether given matrix is centrosymmetric or not .
Finding the middle row of the matrix
for each row upto middle row .
If each element and its corresponding element is not equal then return false .
Driver Code
function for Centered Triangular number
Formula to calculate nth Centered Triangular number
Driver Code
For 3 rd Centered Triangular number
For 12 th Centered Triangular number
Python 3 implementation to generate the required array
Function to find gcd of array of numbers
Function to generate the array with required constraints .
computing GCD of the given set
Solution exists if GCD of array is equal to the minimum element of the array
Printing the built array
Driver function
Taking in the input and initializing the set STL set in cpp has a property that it maintains the elements in sorted order , thus we do not need to sort them externally
Calling the computing function .
Function returns value of Binomial Coefficient C ( n , k )
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Function to calculate the number of trees with exactly k leaves .
Function to calculate total number of Nodes of degree d in these trees .
Function to calculate the number of trees in which the root has degree r .
Driver code
Number of trees having 3 edges and exactly 2 leaves
Number of Nodes of degree 3 in a tree having 4 edges
Number of trees having 3 edges where root has degree 2
To find least value of k
To check n is coprime or not
to store R ( k ) mod n and 10 ^ k mod n value
Driver code
Python3 code to determine whether numbers 1 to N can be divided into two sets such that absolute difference between sum of these two sets is M and these two sum are co - prime
function that returns boolean value on the basis of whether it is possible to divide 1 to N numbers into two sets that satisfy given conditions .
initializing total sum of 1 to n numbers
since ( 1 ) total_sum = sum_s1 + sum_s2 and ( 2 ) m = sum_s1 - sum_s2 assuming sum_s1 > sum_s2 . solving these 2 equations to get sum_s1 and sum_s2
total_sum = sum_s1 + sum_s2 and therefore
if total sum is less than the absolute difference then there is no way we can split n numbers into two sets so return false
check if these two sums are integers and they add up to total sum and also if their absolute difference is m .
Now if two sum are co - prime then return true , else return false .
if two sums don 't add up to total  sum or if their absolute difference  is not m, then there is no way to  split n numbers, hence return false
Driver code
function call to determine answer
Python3 implementation of the above approach
converting array element into number
Check if divisible by 11
Driver Code
Function to cheek if number is Blum Integer
to store prime numbers from 2 to n
If prime [ i ] is not changed , then it is a prime
Update all multiples of p
to check if the given odd integer is Blum Integer or not
checking the factors are of 4 t + 3 form or not
give odd integer greater than 20
Python 3 program To calculate The Value Of nCr
Returns factorial of n
Driver code
Python3 program to illustrate ... Summation of series
function to calculate sum of series
Sum of n terms is n ^ 2
Driver Code
Python 3 code to verify Brahmagupta Fibonacci identity
represent the product as sum of 2 squares
check identity criteria
1 ^ 2 + 2 ^ 2
3 ^ 2 + 4 ^ 2
express product of sum of 2 squares as sum of ( sum of 2 squares )
Python3 Program to find the nth tetrahedral number
Function to find Tetrahedral Number
Driver Code
function to check euler four square identity
loops checking the sum of squares
sum of 2 squares
sum of 3 squares
sum of 4 squares
product of 2 numbers represented as sum of four squares i , j , k , l
product of 2 numbers a and b represented as sum of four squares i , j , k , l
given numbers can be represented as sum of 4 squares By euler 's four square identity product also can be represented as sum of 4 squares
Python Program to find number of possible values of X to satisfy A mod X = B
Returns the number of divisors of ( A - B ) greater than B
if N is divisible by i
count only the divisors greater than B
checking if a divisor isnt counted twice
Utility function to calculate number of all possible values of X for which the modular equation holds true
if A = B there are infinitely many solutions to equation or we say X can take infinitely many values > A . We return - 1 in this case
if A < B , there are no possible values of X satisfying the equation
the last case is when A > B , here we calculate the number of divisors of ( A - B ) , which are greater than B
Wrapper function for numberOfPossibleWaysUtil ( )
if infinitely many solutions available
Driver code
Python3 program to count number of numbers from 1 to n are of type x ^ y where x > 0 and y > 1
Function that keeps all the odd power numbers upto n
We need exclude perfect squares .
sort the vector
Return sum of odd and even powers .
Driver Code
Python3 program to find mean and variance of a matrix .
variance function declaration Function for calculating mean
Calculating sum
Returning mean
Function for calculating variance
subtracting mean from elements
a [ i ] [ j ] = fabs ( a [ i ] [ j ] ) ; squaring each terms
taking sum
declaring and initializing matrix
for mean
for variance
for standard deviation
displaying variance and deviation
Prints N arithmetic means between A and B .
Calculate common difference ( d )
For finding N the arithmetic mean between A and B
Driver code
function to calculate sum of series
Driver program
Python3 code to find Largest number in [ 2 , 3 , . . n ] which is co - prime with numbers in [ 2 , 3 , . . m ]
Returns true if i is co - prime with numbers in set [ 2 , 3 , ... m ]
Running the loop till square root of n to reduce the time complexity from n
Find the minimum of square root of n and m to run the loop until the smaller one
Check from 2 to min ( m , sqrt ( n ) )
def to find the largest number less than n which is Co - prime with all numbers from 2 to m
Iterating from n to m + 1 to find the number
checking every number for the given conditions
The first number which satisfy the conditions is the answer
If there is no number which satisfy the conditions , then print number does not exist .
Driver Code
Find transpose
Find product of a [ ] [ ] and its transpose
Since we are multiplying with transpose of itself . We use
Check if product is identity matrix
Driver Code
Python program to find if x is a perfect square .
Find floating point value of square root of x .
sqrt function returns floating value so we have to convert it into integer return boolean T / F
Driver code
function to print GP
starting number
Common ratio
N th term to be find
Python 3 program to find HCF of array of
find hcf of numerator series
return hcf of numerator
find lcm of denominator series
ans contains LCM of arr [ 0 ] [ 1 ] , . . arr [ i ] [ 1 ]
return lcm of denominator
Core Function
found hcf of numerator
found lcm of denominator
return result
Driver Code
Initialize the every row with size 2 ( 1 for numerator and 2 for denominator )
function for calculate the result
print the result
get second MSB
consectutively set all the bits
returns the second MSB
Multiply function
Function to calculate F [ ] [ ] raise to the power n
Base case
take 2D array to store number 's
run loop till MSB > 0
To return fibonacci number
Given n
Python program to print Brocot Sequence
loop to create sequence
adding sum of considered element and it 's precedent
adding next considered element
printing sequence . .
Driver code
adding first two element in the sequence
Python 3 program to Count the numbers within a given range in which when you subtract a number from its reverse , the difference is a product of k
function to check if the number and its reverse have their absolute difference divisible by k
Reverse the number
Driver code
Python program to check if two numbers are Amicable or not .
def to calculate sum of all proper divisors of a given number
Sum of divisors
find all divisors which divides 'num
if ' i ' is divisor of 'n
if both divisors are same then add it once else add both
Add 1 and n to result as above loop considers proper divisors greater than 1.
Returns true if x and y are Amicable else false .
Driver Code
Python 3 program to print first n non - square numbers .
Function to check perfect square
function to print all non square number
variable which stores the count
Not perfect square
Driver code
Python 3 program to print first n non - square numbers .
Returns n - th non - square number .
loop to print non squares below n
Driver code
Returns a list containing all Ludic numbers smaller than or equal to n .
ludics list contain all the ludic numbers
Here we have to start with index 1 and will remove nothing from the list
Here first item should be included in the list and the deletion is referred by this first item in the loop .
Remove_index variable is used to store the next index which we want to delete
Removing the next item
Remove_index is updated so that we get the next index for deletion
Driver code
function to detect prime number using sieve method https : www . geeksforgeeks . org / sieve - of - eratosthenes / to detect prime number
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
function to print prime triplets
Finding all primes from 1 to n
triplets of form ( p , p + 2 , p + 6 )
triplets of form ( p , p + 4 , p + 6 )
Driver code
Get max of the two fractions
Declare nume1 and nume2 for get the value of first numerator and second numerator
Compute ad - bc
Driver Code
Python3 program for the above approach
Function to find the nearest even and odd perfect squares for even and odd array elements
Traverse the array
Calculate square root of current array element
If both are of same parity
Otherwise
Driver Code
python3 program to check pentagonal numbers .
Function to determine if N is pentagonal or not .
Substitute values of i in the formula .
Driver method
Python3 Program to find the sum of forth powers of first n natural numbers
Return the sum of forth power of first n natural numbers
Driver method
Python3 Program to find the sum of forth powers of first n natural numbers
Return the sum of forth power of first n natural numbers
Driver method
Python3 code to find the unit digit of x raised to power y .
Find unit digit
Get last digit of x
Last cyclic modular value
Here we simply return the unit digit or the power of a number
Driver code
Get unit digit number here we pass the unit digit of x and the last cyclicity number that is y % 4
Function to calculate sum of all proper divisors
Driver Code
Function to get the average
Driver Code
Given function to be integrated
Function to perform calculations
Calculates value till integral limit
driver function
Python3 code for Max Water Container
Calculating the max area
Driver code
Function to determine the focal length of a lens
Variable to store the distance between the lens and the image
Variable to store the distance between the lens and the object
check if the number is divisible by the digits .
function to calculate the number of numbers
Driver function
Function to find the sum of given series
Computing sum term by term
Driver function
Python 3 program to find sum of given series
function to find sum of series
driver code
function to find the sum of the given series
sum of 1 st n natural numbers
sum of squares of 1 st n natural numbers
required sum
Driver program to test above
Return the sum of square of binomial coefficient
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Finding the sum of square of binomial coefficient .
Driver Code
Python3 Program to find sum of series 1 + 2 + 2 + 3 + . . . + n
Function that find sum of series .
Driver method
Function call
Python Program to find sum of even index term
Return the sum of even index term
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Finding sum of even index term
Driver method
Function to find triangular number
Driver code
function to check if a number can be written as sum of three consecutive integers .
if n is multiple of 3
else print " - 1" .
Driver Code
Python3 code to find sum of all divisor of number up to 'n
Utility function to find sum of all divisor of number up to 'n
Driver code
t1 = i * ( num / i - i + 1 ) adding i every time it appears with numbers greater than or equal to itself t2 = ( ( ( num / i ) * ( num / i + 1 ) ) / 2 ) - ( ( i * ( i + 1 ) ) / 2 ) adding numbers that appear with i and are greater than i
Driver code
function to find Nth polite number
Driver code
Modified Binary search function to solve the equation
if mid is solution to equation
if our solution to equation lies between mid and mid - 1
if solution to equation is greater than mid
if solution to equation is less than mid
driver code
call binary search method to solve for limits 1 to T
Because our pattern starts from 2 , 3 , 4 , 5. . . so , we subtract 1 from ans
Function to check whether there is overflow in a * b or not . It returns true if there is overflow .
Check if either of them is zero
Driver code
Python3 program to find sum of first n odd numbers
Returns the sum of first n odd numbers
Driver Code
Returns the sum of first n odd numbers
Driver Code
Returns the sum of first n odd numbers
Count prime factors of all numbers till B .
Print all numbers with k prime factors
Driver code
Python 3 program to find maximum differences between two prime numbers in given ranges
Precompute Sieve , Prefix array , Suffix array
Sieve of Eratosthenes
Precomputing Prefix array .
Precompute Suffix array .
Function to solve each query
Driver Code
Function to print the sum of the series
Driver Code
'' returns yes if exist else no. 
If difference is 0 , then x must be same as a .
Else difference between x and a must be divisible by d .
Driver code
Python3 program to count GP subsequences of size 3.
To calculate nCr DP approach
nC0 is 1
Compute next row of pascal triangle using the previous row
Returns count of G . P . subsequences with length 3 and common ratio r
hashing to maintain left and right array elements to the main count
Stores the answer
Traverse through the elements
IF RATIO IS ONE
Traverse the count in hash
calculating nC3 , where ' n ' is the number of times each number is repeated in the input
traverse through all elements and find out the number of elements as k1 * k2
Keep the count of left and right elements left is a [ i ] / r and right a [ i ] * r
if the current element is divisible by k , count elements in left hash .
Decrease the count in right hash
Number of right elements
Calculate the answer
left count of a [ i ]
returns answer
Driver code
function to check if there exist two numbers sum of whose squares is n .
driver Program
Python3 program for the above approach
Function to compute the matrix prefixCnt [ M ] [ N ] from mat [ M ] [ N ] such that prefixCnt [ i ] [ j ] stores the count of 0 's from (0, 0) to (i, j)
Initialize prefixCnt [ i ] [ j ] with 1 if mat [ i ] [ j ] is 0
Otherwise , assign with 0
Calculate prefix sum for each row
Calculate prefix sum for each column
Function to compute count of 0 's in submatrix from (pi, pj) to (qi, qj) from prefixCnt[M][N]
Initialize that count of 0 's  in the sub-matrix within  indices (0, 0) to (qi, qj)
Subtract count of 0 's within  indices (0, 0) and (pi-1, qj)
Subtract count of 0 's within  indices (0, 0) and (qi, pj-1)
Add prefixCnt [ pi - 1 ] [ pj - 1 ] because its value has been added once but subtracted twice
Function to count the 0 s in the each given submatrix
Stores the prefix sum of each row and column
Compute matrix prefixCnt [ ] [ ]
Function Call for each query
Driver Code
Given matrix
Function Call
Python3 program to find smallest value of root of an equation under given constraints .
function to check if the sum of digits is equal to the summation assumed
calculate the sum of digit
function to find the largest root possible .
iterate for all possible sum of digits .
check if discriminent is a perfect square .
check if discriminent is a perfect square and if it as perefect root of the equation
function returns answer
Driver Code
Function to calculate sum
Driver Code
Python3 program to represent a number as sum of a co - prime pair such that difference between them is minimum
function to check if pair is co - prime or not
function to find and print co - prime pair
Driver code
Function to calculate the modulus
Store the modulus of big number
Do step by step division
Update modulo by concatenating current digit .
Update quotient
Update mod for next iteration .
Flag used to remove starting zeros
Driver Code
Initialize global variable according to given condition so that it can be accessible to all function
Function to calculate all number having four distinct factors
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Initialize prime [ ] array which will contain all the primes from 1 - N
Iterate over all the prime numbers
Mark cube root of prime numbers
Mark product of prime numbers
Driver Code
A simple recursive program to find n - th leonardo number .
Driver code
Python3 program to decompose a matrix using Cholesky Decomposition
Decomposing a matrix into Lower Triangular
summation for diagonals
Evaluating L ( i , j ) using L ( j , j )
Displaying Lower Triangular and its Transpose
Lower Triangular
Transpose of Lower Triangular
Driver Code
Python3 Efficient solution to find sum of arithmetic series .
Driver code
Returns the sum of series
Driver Function
Return maximum value of | arr [ i ] - arr [ j ] | + | i - j |
Iterating two for loop , one for i and another for j .
Evaluating | arr [ i ] - arr [ j ] | + | i - j | and compare with previous maximum .
Driver Code
Return maximum | arr [ i ] - arr [ j ] | + | i - j |
Calculating first_array and second_array
Finding maximum and minimum value in first_array
Storing the difference between maximum and minimum value in first_array
Finding maximum and minimum value in second_array
Storing the difference between maximum and minimum value in second_array
Driver Code
Python3 program to count subarrays having product less than k .
Counter for single element
Multiple subarray
If this multiple is less than k , then increment
Driver Code
Function that returns the count of factors that are perfect cube
To store the count of number of times a prime number divides N
To store the count of factors that are perfect cube
Count number of 2 's that divides N
Calculate ans according to above formula
Check for all possible numbers that can divide it
Loop to check the number of times prime number i divides it
Calculate ans according to above formula
Given number
Function call
Python3 program to count number of factors of an array of integers
function to generate all prime factors of numbers from 1 to 10 ^ 6
Initializes all the positions with their value .
Initializes all multiples of 2 with 2
A modified version of Sieve of Eratosthenes to store the smallest prime factor that divides every number .
check if it has no prime factor .
Initializes of j starting from i * i
if it has no prime factor before , then stores the smallest prime divisor
function to calculate number of factors
stores the smallest prime number that divides n
stores the count of number of times a prime number divides n .
reduces to the next number after prime factorization of n
false when prime factorization is done
if the same prime number is dividing n , then we increase the count
if its a new prime factor that is factorizing n , then we again set c = 1 and change dup to the new prime factor , and apply the formula explained above .
prime factorizes a number
for the last prime factor
Driver Code
generate prime factors of number upto 10 ^ 6
function to produce and print Digit Product Sequence
Array which store sequence
Temporary variable to store product
Initialize first element of the array with 1
Run a loop from 1 to N . Check if previous number is single digit or not . If yes then product = 1 else take modulus . Then again check if previous number is single digit or not if yes then store previous number , else store its first value Then for every i store value in the array .
Print sequence
Value of N
Calling function
Python Program to calculate the geometric mean of the given array elements .
function to calculate geometric mean and return float value .
declare product variable and initialize it to 1.
Compute the product of all the elements in the array .
compute geometric mean through formula pow ( product , 1 / n ) and return the value to main function .
Driver function
Number of single digit prime numbers
function to check whether a number can be expressed as a product of single digit numbers
if ' n ' is a single digit number , then it can be expressed
define single digit prime numbers array
repeatedly divide ' n ' by the given prime numbers until all the numbers are used or ' n ' > 1
if true , then ' n ' can be expressed
Driver code
Returns sum of first n natural numbers
Driver code
Returns sum of first n natural numbers
If n is odd , ( n + 1 ) must be even
Driver code
Return maximum number of prime factors for any number in [ 1 , N ]
Based on Sieve of Eratosthenes
If p is prime
We simply multiply first set of prime numbers while the product is smaller than N .
Driver Code
Function to check if given number is palindrome or not without using the extra space
Find the appropriate divisor to extract the leading digit
If first and last digit not same return false
Removing the leading and trailing digit from number
Reducing divisor by a factor of 2 as 2 digits are dropped
Driver code
Returns true if n is power of 3 , else false
The maximum power of 3 value that integer can hold is 1162261467 ( 3 ^ 19 ) .
Driver code
To return demlo number Length of s is smaller than 10
Add numbers to res upto size of s then add in reverse
Driver Code
Python 3 program to count number of times we need to add digits to get a single digit .
Here the count variable store how many times we do sum of digits and temporary_sum always store the temporary sum we get at each iteration .
In this loop we always compute the sum of digits in temporary_ sum variable and convert it into string str till its length become 1 and increase the count in each iteration .
computing sum of its digits
converting temporary_sum into string str again .
increase the count
Driver Code
Function to calculate leaps
Driver code
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
Initialize result
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
function to calculate number of digits in x
function to print last k digits of a ^ b
Generating 10 ^ k
Calling modular exponentiation
Printing leftmost zeros . Since ( a ^ b ) % k can have digits less then k . In that case we need to print zeros
If temp is not zero then print temp If temp is zero then already printed
Driver Code
To reverse Digits of numbers
To square number
To check Adam Number
Square first number and square reverse digits of second number
If reverse of b equals a then given number is Adam number
Driver program to test above functions
Generating the look - up table while pre - processing
LOOK_UP is the macro expansion to generate the table
Function to find the parity
Number is considered to be of 32 bits
Dividing the number o 8 - bit chunks while performing X - OR
Masking the number with 0xff ( 11111111 ) to produce valid 8 - bit result
Driver code
Result is 1 for odd parity , 0 for even parity
Printing the desired result
Python3 program to count total number of digits we have to write from 1 to n
number_of_digits store total digits we have to write
In the loop we are decreasing 0 , 9 , 99 ... from n till ( n - i + 1 ) is greater than 0 and sum them to number_of_digits to get the required sum
Driver code
Generates all primes upto n and prints their squares
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
print squares of primes upto n .
Driver program
function to convert decimal to hexadecimal
char array to store hexadecimal number
counter for hexadecimal number array
temporary variable to store remainder
storing remainder in temp variable .
check if temp < 10
printing hexadecimal number array in reverse order
Driver Code
function to convert decimal to binary
array to store binary number
counter for binary array
storing remainder in binary array
printing binary array in reverse order
Driver Code
Function to count number of ways to make the given number n
Driver code
Function to flip the sign using only " + " operator ( It is simple with ' * ' allowed . We need to do a = ( - 1 ) * a
If sign is + ve turn it - ve and vice - versa
Check if a and b are of different signs
Function to subtract two numbers by negating b and adding them
Negating b
Function to multiply a by b by adding a to itself b times
because algo is faster if b < a
Adding a to itself b times
Check if final sign must be - ve or + ve
Function to divide a by b by counting how many times ' b ' can be subtracted from ' a ' before getting 0
Negating b to subtract from a
Subtracting divisor from dividend
Check if a and b are of similar symbols or not
Driver code
Program to find groups of 2 or 3 whose sum is divisible by 3
Initialize groups to 0
Increment group with specified remainder
Return groups using the formula
Driver code
Checking if a number is prime or not
check for numbers from 2 to sqrt ( x ) if it is divisible return false
Returns true if N can be written as sum of K primes
N < 2 K directly return false
If K = 1 return value depends on primality of N
if N is even directly return true ;
If N is odd , then one prime must be 2. All other primes are odd and cannot have a pair sum as even .
If K >= 3 return true ;
Driver function
Utility function to find GCD of two numbers
Utility function to find LCM of two numbers
Function to calculate all divisors in given range
Find LCM of a and b
Find common divisor by using LCM
Driver code
Function to print unique digit numbers in range from l to r .
Start traversing the numbers
Find digits and maintain its hash
if a digit occurs more than 1 time then break
num will be 0 only when above loop doesn 't get  break that means the  number is unique so  print it.
Driver code
Returns position of first Fibonacci number whose modulo p is 0.
add previous two remainders and then take its modulo p .
Driver code
A Simple Method to count cubes between a and b
Traverse through all numbers in given range and one by one check if number is prime
Check if current number ' i ' is perfect cube
Driver code
Function to convert Binary real number to String
Check if the number is Between 0 to 1 or Not
Setting a limit on length : 32 characters .
compare the number to .5
Now it become 0.25
Input value
function that manually calculates n ^ n and then removes digits until k digits remain
loop will terminate when there are only k digits left
Driver Code
Function to find that number divisible by 9 or not
Compute sum of digits
Check if sum of digits is divisible by 9.
Driver code
Returns XOR of all subarray xors
initialize result by 0 as ( a xor 0 = a )
select the starting element
select the eNding element
Do XOR of elements in current subarray
Driver code to test above methods
Returns XOR of all subarray xors
initialize result by 0 as ( a XOR 0 = a )
loop over all elements once
get the frequency of current element
if frequency is odd , then include it in the result
return the result
Driver Code
Python program to check whether number is superperfect or not
Function to calculate sum of all divisors
Final result of summation of divisors
find all divisors which divides 'num
if ' i ' is divisor of 'num
if both divisors are same then add it only once else add both
Returns true if n is superperfect else false
Find the sum of all divisors of number n
Again find the sum of all divisors of n1
Driver code
Function to count all divisors
Initialize result
If divisors are equal , count only one
else : Otherwise count both
Driver Code
Python3 implementation of Naive method to count all perfect divisors
Utility function to check perfect square number
function to count all perfect divisors
Initialize result
Consider every number that can be a divisor of n
If i is a divisor
Driver program to test above function
Python 3 program to print nearest element with at least one common prime factor .
Loop covers the every element of arr [ ]
Loop that covers from 0 to i - 1 and i + 1 to n - 1 indexes simultaneously
print position of closest element
Driver code
Efficient Python3 program to find length of the largest subsequence with GCD greater than 1.
prime [ ] for storing smallest prime divisor of element count [ ] for storing the number of times a particular divisor occurs in a subsequence
Simple sieve to find smallest prime factors of numbers smaller than MAX
Prime number will have same divisor
Returns length of the largest subsequence with GCD more than 1.
Fetch total unique prime divisor of element
Increment count [ ] of Every unique divisor we get till now
Find maximum frequency of divisor
Pre - compute smallest divisor of all numbers
Python3 program to count all binary digit numbers smaller than N
method returns count of binary digit numbers smaller than N
queue to store all intermediate binary digit numbers
binary digits start with 1
loop until we have element in queue
push next binary digit numbers only if current popped element is N
uncomment below line to print actual number in sorted order
Driver code to test above methods
Return the sum of product x * y
Iterating x from 1 to n
Finding y = n / x .
Adding product of x and y to answer .
Driven Program
function for calculating factorial
function for check Special_Factorial_Number
call fact function and the Modulo with k and check if condition is TRUE then return i
Driver Code
taking input
Returns maximum number of chocolates we can eat with given money , price of chocolate and number of wrapprices required to get a chocolate .
Corner case
First find number of chocolates that can be purchased with the given amount
Now just add number of chocolates with the chocolates gained by wrapprices
total money
cost of each candy
no of wrappers needs to be
exchanged for one chocolate .
Python program to check if it is possible to reach ( a , b ) from ( x , y ) . Returns GCD of i and j
Returns true if it is possible to go to ( a , b ) from ( x , y )
Find absolute values of all as sign doesn 't  matter.
If gcd is equal then it is possible to reach . Else not possible .
Driven Program Converting coordinate into positive integer
Python3 Program to find Equidigital Numbers till n
Array to store all prime less than and equal to MAX .
Utility function for sieve of sundaram
In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than MAX , we reduce MAX to half . This array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j
Main logic of Sundaram . Mark all numbers which do not generate prime number by doing 2 * i + 1
Since 2 is a prime number
Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .
Returns true if n is a Equidigital number , else false .
Count digits in original number
Count all digits in prime factors of n pDigit is going to hold this value .
Count powers of p in n
If primes [ i ] is a prime factor ,
Count the power of prime factors
Add its digits to pDigit .
Add digits of power of prime factors to pDigit .
If n != 1 then one prime factor still to be summed up ;
If digits in prime factors and digits in original number are same , then return true . Else return false .
Finding all prime numbers before limit . These numbers are used to find prime factors .
Python program to get maximum sum of Numbers with condition that their LCM should be N
Method returns maximum sum f distinct number whose LCM is N
find all divisors which divides 'N
if ' i ' is divisor of 'N
if both divisors are same then add it only once else add both
driver code
To calculate hcf
to calculate lcm
lcm ( a , b ) = ( a * b ) hcf ( a , b )
Assign a = lcm of n , n - 1
b = b - 1
Driver code
Function call pass n , n - 1 in function to find LCM of first n natural number
Python program to find the smallest number evenly divisible by all number 1 to n
Returns the lcm of first n numbers
Driver code
A sample function whose definite integral 's approximate value is computed using Trapezoidal rule
Declaring the function f ( x ) = 1 / ( 1 + x * x )
Function to evaluate the value of integral
Grid spacing
Computing sum of first and last terms in above formula
Adding middle terms in above formula
h / 2 indicates ( b - a ) / 2 n . Multiplying h / 2 with s .
Range of definite integral
Number of grids . Higher value means more accuracy
The main function that returns the max possible product
n equals to 2 or 3 must be handled explicitly
Keep removing parts of size 3 while n is greater than 4
Keep multiplying 3 to res
The last part multiplied by previous parts
Driver program to test above functions
Function to count odd squares
Driver code
Function to compute the number of factors of the given number
Vector to store the prime factors
While there are no two multiples in the number , divide it by 2
If the size is already greater than K , then return true
Computing the remaining divisors of the number
If n is divisible by i , then it is a divisor
If the size is already greater than K , then return true
If the size is already greater than K , then return true
If none of the above conditions satisfies , then return false
Function to check if it is possible to make a number having total N factors and K prime factors
If total divisors are less than the number of prime divisors , then print No
Find the number of factors of n
Driver Code
A Python3 Program to generate OTP ( One Time Password )
A Function to generate a unique OTP everytime
All possible characters of my OTP
String to hold my OTP
Driver code
Declare the length of OTP
Recursive function to return gcd of a and b
recursive implementation
lcm ( a , b ) = ( a * b / gcd ( a , b ) )
Driver code
Returns true if y is a power of x
The only power of 1 is 1 itself
Repeatedly compute power of x
Check if power of x becomes y
check the result for true / false and print
An Efficient Method to count squares between a and b
An efficient solution to count square between a and b
Driver Code
Naive Solution to find if count of divisors is even or odd
Function to count the divisors
Initialize count of divisors
Note that this loop runs till square root
If divisors are equal , increment count by one Otherwise increment count by 2
Driver Code
Python3 code for above approach
Driver code
Returns largest power of p that divides n !
Initialize result
Calculate x = n / p + n / ( p ^ 2 ) + n / ( p ^ 3 ) + ... .
Utility function to do modular exponentiation . It returns ( x ^ y ) % p
Initialize result Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Returns n ! % p
Use Sieve of Eratosthenes to find all primes smaller than n
Consider all primes found by Sieve
Find the largest power of prime ' i ' that divides n
Multiply result with ( i ^ k ) % p
Driver code
Returns count of all squares in a rectangle of size m x n
If n is smaller , swap m and n
Now n is greater dimension , apply formula
Driver Code
If y is positive , y times add 1 to x
If y is negative , y times subtract 1 from x
Driver code
Function to count factorial
Find the first factorial number ' fact ' greater than or equal to 'low
Count factorial numbers in range [ low , high ]
Return the count
Driver code
A date has day ' d ' , month ' m ' and year 'y
To store number of days in all months from January to Dec .
This function counts number of leap years before the given date
Check if the current year needs to be considered for the count of leap years or not
An year is a leap year if it is a multiple of 4 , multiple of 400 and not a multiple of 100.
This function returns number of days between two given dates
initialize count using years and day
Add days for months in given date
Since every leap year is of 366 days , Add a day for every leap year
SIMILARLY , COUNT TOTAL NUMBER OF DAYS BEFORE 'dt2
return difference between two counts
Driver Code
Function call
Function to find length of period in 1 / n
Find the ( n + 1 ) th remainder after decimal point in value of 1 / n
Store ( n + 1 ) th remainder
Count the number of remainders before next occurrence of ( n + 1 ) ' th ▁ remainder ▁ ' d
Driver Code
returns the number to be added to the input to replace all zeroes with five
amount to be added
unit decimal place
a number divisible by 10 , then this is a zero occurrence in the input
move one decimal place
Driver code
This function returns remainder of num / divisor without using % ( modulo ) operator
Driver program to test above functions
Function to return value of 1 / 1 ! + 1 / 2 ! + . . + 1 / n !
Update factorial
Update series sum
Driver program to test above functions
Python code to Print first k digits of 1 / n where n is a positive integer
Function to print first k digits after dot in value of 1 / n . n is assumed to be a positive integer .
Initialize remainder
Run a loop k times to print k digits
The next digit can always be obtained as doing ( 10 * rem ) / 10
Update remainder
Driver program to test above function
Function to return sum of 1 / 1 + 1 / 2 + 1 / 3 + . . + 1 / n
Driver Code
Recursive function to return gcd of a and b
Driver program to test above function
The function to rearrange an array in - place so that arr [ i ] becomes arr [ arr [ i ] ] .
First step : Increase all values by ( arr [ arr [ i ] ] % n ) * n
Second Step : Divide all values by n
A utility function to print an array of size n
Driver program
A utility function that prints a given arr [ ] of length size
The core function that recursively generates and prints all sequences of length k
A function that uses printSequencesRecur ( ) to prints all sequences from 1 , 1 , . .1 to n , n , . . n
Driver Code
Assumes that n is a positive integer
Driver Code
Python3 program for the above approach
Function to count number of pairs satisfying the given conditions
Stores the frequency of array elements
Stores the total number of pairs
Traverse the array
Add it to cnt
Update frequency of current array element
Print the count
Given array
Size of the array
Given value of K
Function to check whether only one bit is set or not
Function to perform Range - query
Function to count array elements with a single set bit for each range in a query
Initialize array for Prefix sum
Driver Code
Given array
Size of the array
Given queries
Size of queries array
Function to convert bit array to decimal number
Function to find minimum values of each bitwise AND operation on element of subarray of size K
Maintain an integer array bit of size 32 all initialized to 0
Create a sliding window of size k
Function call
Perform operation to removed element
Perform operation to add element
Taking minimum value
Return the result
Driver Code
Given array arr
Given subarray size K
Function call
Function to calculate power of 3
Function to return the count of the unset bit ( zeros )
Check the bit is 0 or not
Right shifting ( dividing by 2 )
Driver Code
Function to return the count of pairs which satisfy the given condition
Check if the count of set bits in the AND value is B [ j ]
Driver code
Function to find the count of required pairs
To store the count of elements which give remainder 0 i . e . even values
To store the count of elements which give remainder 1 i . e . odd values
Driver code
Function to alternate the values
Driver code
Python3 program to find highest power of 2 that divides n .
Driver code
Function to check whether bitwise AND of a number with any subset of an array is zero or not
variable to store the AND of all the elements
find the AND of all the elements of the array
if the AND of all the array elements and N is equal to zero
Driver Code
Function to find the parity
Rightmost bit of y holds the parity value if ( y & 1 ) is 1 then parity is odd else even
Driver code
function to check whether all the bits are set in the given range or not
calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits
new number which will only have one or more set bits in the range l to r and nowhere else
if both are equal , then all bits are set in the given range
else all bits are not set
function to check whether all the bits in the given range of two numbers are complement of each other
Driver Code
function to calculate sum of series
initialize sum to 0
loop to calculate sum of series
calculate 2 ^ i
Driver code
Function to print all the combinations
Iterate for all combinations
Initially 100 in binary if n is 3 as 1 << ( 3 - 1 ) = 100 in binary
Iterate in the array and assign signs to the array elements
If the j - th bit from left is set take ' + ' sign
Right shift to check if jth bit is set or not
re - initialize
Iterate in the array elements
If the jth from left is set
right shift
Driver code
function
__builtin_popcount function that count set bits in n
Iterate from n - 1 to 1
check if the number of set bits equals to temp increment count
Driver Code
function the return multiply a number with 4 using bitwise operator
returning a number with multiply with 4 using2 bit shifring right
derive function
Python3 program to print the Leftover element after performing alternate Bitwise OR and Bitwise XOR operations to the pairs .
array to store the tree
array to store the level of every parent
function to construct the tree
level of child is always 0
Recursive call
Increase the level of every parent , which is level of child + 1
If the parent is at odd level , then do a bitwise OR
If the parent is at even level , then do a bitwise XOR
Function that updates the tree
If it is a leaf and the leaf which is to be updated
out of range
not a leaf then recurse
recursive call
check if the parent is at odd or even level and perform OR or XOR according to that
Function that assigns value to a [ index ] and calls update function to update the tree
Driver Code
builds the tree
1 st query
2 nd query
Sets even bits of n and returns modified number .
Generate 101010. . .10 number and store in res .
if bit is even then generate number and or with res
return OR number
Driver code
return msb set number
set all bits
return msb increment n by 1 and shift by 1
return even seted number
get msb here
generate even bits like 101010. .
if bits is odd then shift by 1
return even set bits number
set all even bits here
take or with even set bits number
set all odd bit
res for store 010101. . number
generate number form of 010101. . ... till temp size
if bit is odd , then generate number and or with res
Driver code
Efficient python3 program to set all odd bits number
return MSB set number
set all bits including MSB .
return MSB
Returns a number of same size ( MSB at same position ) as n and all odd bits set .
generate odd bits like 010101. .
if bits is even then shift by 1
return odd set bits number
set all odd bits here
take OR with odd set bits number
Driver Program
function to print numbers in the range 1 to nhaving bits in alternate pattern
first number having bits in alternate pattern
display
loop until n < curr_num
generate next number having alternate bit pattern
if true then break
display
generate next number having alternate bit pattern
if true then break
display
Driven code
Function to find smallest perfect power of 2 greater than n
To store perfect power of 2
bitwise left shift by 1
bitwise right shift by 1
Required perfect power of 2
Driver program to test above
Python 3 program to find a unique pair in an array of pairs .
XOR each element and get XOR of two unique elements ( ans )
Get a set bit of XOR ( We get the rightmost set bit )
Now divide elements in two sets by comparing rightmost set bit of XOR with bit at same position in each element .
XOR of first set in arr [ ]
XOR of second set in arr [ ]
Driver code
function to find the next higher number with same number of set bits as in 'x
the approach is same as discussed in
function to find the mth smallest number having k number of set bits
smallest number having ' k ' number of set bits
finding the mth smallest number having k set bits
required number
Driver Code
An optimized Python program to count unset bits in an integer .
This makes sure two bits ( From MSB and including MSB ) are set
This makes sure 4 bits ( From MSB and including MSB ) are set
Count set bits in toggled number
Driver code
Function to get no of bits in binary representation of positive integer
Driver program
Function to toggle bits starting from MSB
temporary variable to use XOR with one of a n
Run loop until the only set bit in temp crosses MST of n .
Toggle bit of n corresponding to current set bit in temp .
Move set bit to next higher position .
Driver code
Python 3 program to find n - th number whose binary representation is palindrome .
Finds if the kth bit is set in the binary representation
Returns the position of leftmost set bit in the binary representation
Finds whether the integer in binary representation is palindrome or not
One by one compare bits
Compare left and right bits and converge
Start from 1 , traverse through all the integers
If we reach n , break the loop
Driver code
Function Call
Function returns 1 if set , 0 if not
Driver code
Function call
Finds if a and b are same
Driver code
function to toggle bits in the given range
calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits
toggle bits in the range l to r in ' n ' Besides this , we can calculate num as : num = ( 1 << r ) - l .
Driver code
Python implementation to find the position of rightmost different bit
Function to find the position of rightmost set bit in 'n
to handle edge case when n = 0.
Function to find the position of rightmost different bit in the binary representations of ' m ' and 'n
position of rightmost different bit
Driver code
Main Function to find next smallest number bigger than n
Compute c0 and c1
If there is no bigger number with the same no . of 1 's
Driver Code
input 1
input 2
Python code to find minimum bits to be flip
If both A [ i ] and B [ i ] are equal
if A [ i ] and B [ i ] are unequal
N represent total count of Bits
Assign c ' s ▁ value ▁ to ▁ a , ▁ a ' s value to b and b 's value to c.
Store XOR of all in a
After this , b has value of a [ 0 ]
After this , c has value of b
After this , a [ 0 ] has value of c
Driver code
Calling Function
Function to find two missing numbers in range [ 1 , n ] . This function assumes that size of array is n - 2 and all array elements are distinct
Get the XOR of all elements in arr [ ] and { 1 , 2 . . n }
Get a set bit of XOR ( We get the rightmost set bit )
Now divide elements in two sets by comparing rightmost set bit of XOR with bit at same position in each element .
XOR of first set in arr [ ]
XOR of second set in arr [ ]
XOR of first set in arr [ ] and { 1 , 2 , ... n }
XOR of second set in arr [ ] and { 1 , 2 , ... n }
Driver program to test above function
Range of numbers is 2 plus size of array
Returns XOR of x and y
Driver Code
Function to return temperature in the second thermometer
Calculate the temperature
Driver Code
Function to find maximum possible elements which divisible by 2
To store count of even numbers
All even numbers and half of odd numbers
Driver code
Function call
Python3 program to Select a Random Node from a tree
This is used to fill children counts .
Inserts Children count for each node
Returns number of children for root
Helper Function to return a random node
Returns Random node
Driver Code
Creating Above Tree
Python3 Program to print 0 , 1 or 2 with equal Probability
Random Function to that returns 0 or 1 with equal probability
randint ( 0 , 100 ) function will generate odd or even number [ 1 , 100 ] with equal probability . If rand ( ) generates odd number , the function will return 1 else it will return 0
Random Function to that returns 0 , 1 or 2 with equal probability 1 with 75 %
returns 0 , 1 , 2 or 3 with 25 % probability
Driver code to test above functions
A utility class to allocate a new node
deleteleaves ( )
inorder ( )
Driver Code
A binary tree node
Non - recursive function to delete an entrie binary tree
Base Case
Create a empty queue for level order traversal
Do level order traversal starting from root
Deletes a tree and sets the root as None
Create a binary tree
delete entire binary tree
Node Structure
Return size of tree
if tree is empty it will return 0
Using level order Traversal .
when the queue is empty : the pop ( ) method returns null .
Increment count
Enqueue left child
Increment count
Enqueue right child
creating a binary tree and entering the nodes
A binary tree node
Compute the " maxDepth " of a tree -- the number of nodes along the longest path from the root node down to the farthest leaf node
Compute the depth of each subtree
Use the larger one
Driver program to test above function
Python3 program for finding postorder traversal of BST from preorder traversal
Function to find postorder traversal from preorder traversal .
If entire preorder array is traversed then return as no more element is left to be added to post order array .
If array element does not lie in range specified , then it is not part of current subtree .
Store current value , to be printed later , after printing left and right subtrees . Increment preIndex to find left and right subtrees , and pass this updated value to recursive calls .
All elements with value between minval and val lie in left subtree .
All elements with value between val and maxval lie in right subtree .
Function to find postorder traversal .
To store index of element to be traversed next in preorder array . This is passed by reference to utility function .
Driver Code
Calling function
A binary tree node has data , pointer to left child and a pointer to right child
Base Case
left stores the result of left subtree , and right stores the result of right subtree
If both left and right returns 0 , it means there is no valid path till leaf node
Driver Code
Let us create binary tree shown in above diagram
This functio fills depth of i 'th element in parent[] The depth is filled in depth[i]
If depth [ i ] is already filled
If node at index i is root
If depth of parent is not evaluated before , then evaluate depth of parent first
Depth of this node is depth of parent plus 1
This function reutns height of binary tree represented by parent array
Create an array to store depth of all nodes and initialize depth of every node as 0 Depth of root is 1
fill depth of all nodes
The height of binary tree is maximum of all depths . Find the maximum in depth [ ] and assign it to ht
int parent [ ] = { 1 , 5 , 5 , 2 , 2 , - 1 , 3 } ;
A binary tree Node
function to check if tree is height - balanced or not
Base condition
for left and right subtree height allowed values for ( lh - rh ) are 1 , - 1 , 0
if we reach here means tree is not height - balanced tree
function to find height of binary tree
base condition when binary tree is empty
If tree is not empty then height = 1 + max of left height and right heights
Driver function to test the above function
Helper function that allocates a new node with the given data and None left and right poers .
Construct to create a new node
function to check if given node is a leaf node or node
If given node ' s ▁ left ' s right is pointing to given node and its right ' s ▁ left ▁ is ▁ pointing ▁ to ▁ the ▁ node ▁ itself ▁ ▁ then ▁ it ' s a leaf
Compute the height of a tree -- the number of Nodes along the longest path from the root node down to the farthest leaf node .
if node is None , return 0
if node is a leaf node , return 1
compute the depth of each subtree and take maximum
Driver Code
Given tree contains 3 leaf nodes
create circular doubly linked list out of leaf nodes of the tree set next pointer of linked list
set prev pointer of linked list
calculate height of the tree
A binary tree node
The function Compute the " height " of a tree . Height is the number of nodes along the longest path from the root node down to the farthest leaf node .
Base Case : Tree is empty
If tree is not empty then height = 1 + max of left height and right heights
Function to get the diameter of a binary tree
Base Case when tree is empty
Get the height of left and right sub - trees
Get the diameter of left and right sub - trees
Return max of the following tree : 1 ) Diameter of left subtree 2 ) Diameter of right subtree 3 ) Height of left subtree + height of right subtree + 1
Constructed binary tree is 1 / \ 2 3 / \ 4 5
Function Call
Function to find print path
If a [ 0 ] is 1
Printing path
Seeking for a [ i ] = 0 and a [ i + 1 ] = 1
Printing path
If a [ N - 1 ] = 0
Driver Code
Given Input
Function Call
Function to check if the given string can be converted to a balanced bracket sequence or not
Check if the first and last characters are equal
Initialize two variables to store the count of open and closed brackets
If the current character is same as the first character
If the current character is same as the last character
If count of open brackets becomes less than 0
Print the new string
If the current character is same as the first character
If bracket sequence is not balanced
Check for unbalanced bracket sequence
Print the sequence
Given Input
Function Call
A binary tree Node
utility class to pass height object
Optimised recursive function to find diameter of binary tree
to store height of left and right subtree
base condition - when binary tree is empty
diameter is also 0
ldiameter -- > diameter of left subtree rdiamter -- > diameter of right subtree height of left subtree and right subtree is obtained from lh and rh and returned value of function is stored in ldiameter and rdiameter
height of tree will be max of left subtree height and right subtree height plus1
function to calculate diameter of binary tree
Constructed binary tree is 1 / \ 2 3 / \ 4 5
Function Call
Tree node structure used in the program
Function to find height of a tree
update the answer , because diameter of a tree is nothing but maximum value of ( left_height + right_height + 1 ) for each node
Computes the diameter of binary tree with given root .
This will storethe final answer
Driver code
Run loop from 1 to length of pre
Prfrom pivot length - 1 to zero
Prfrom end to pivot length
Driver Code
Function to count the number of substrings made up of a single distinct character
Stores the required count
Stores the count of substrings possible by using current character
Stores the previous character
Traverse the string
If current character is same as the previous character
Increase count of substrings possible with current character
Reset count of substrings possible with current character
Update count of substrings
Update previous character
Driver Code
Utility function to find original array
Map to store all neighbors for each element
Vector to store original elements
Stotrs which array elements are visited
A djacency list to store neighbors of each array element
Find the first corner element
Stores first element of the original array
Push it into the original array
Mark as visited
Traversing the neighbors and check if the elements are visited or not
Traverse adjacent elements
If element is not visited
Push it into res
Mark as visited
Update the next adjacent
Print original array
Driver Code
Given pairs of adjacent elements
Function to construct the tree
Special case when d == 2 , only one edge
Tree is not possible
Satisfy the height condition by add edges up to h
Add d - h edges from 1 to satisfy diameter condition
Remaining edges at vertex 1 or 2 ( d == h )
Driver Code
Function to calculate the longest subarray consisting of 1 s only
Stores the maximum length of subarray containing 1 s only
Traverse the array
If current element is '1
Increment length
Otherwise
Reset length
Update maximum subarray length
Function to perform given queries
Stores count of queries
Traverse each query
Flip the character
Size of array
Given array
Given queries
Number of queries
Function to add count of numbers in the map for a subarray of length k
Set to store unique elements
Add elements to the set
Adding count in map
Function to check if there is any number which repeats itself in every subarray of length K
Check all number starting from 1
Check if i occurred n - k + 1 times
Print the smallest number
Print - 1 , if no such number found
Function to count frequency of each number in each subarray of length K
Traverse all subarrays of length K
Check and print the smallest number present in every subarray and print it
Function to generate the value of K
Function call
Driver Code
Given array
Size of array
Function call
Helper function that allocates a new node with the given data and None left and right poers .
Constructor to create a new node
utility function to return level of given node
create a queue for level order traversal
traverse until the queue is empty
Since we go level by level , the last stored right leaf node is deepest one
Driver Code
create a binary tree
Function to check if the strings can be made equal or not by reversing a substring of X
Store the first index from the left which contains unequal characters in both the strings
Store the first element from the right which contains unequal characters in both the strings
Checks for the first index from left in which characters in both the strings are unequal
Store the current index
Break out of the loop
Checks for the first index from right in which characters in both the strings are unequal
Store the current index
Break out of the loop
Reverse the subString X [ L , R ]
If X and Y are equal
Otherwise
Driver Code
Function Call
Python3 program for the above approach
Stores the segment tree node values
Function to find maximum length of subarray such that sum of maximum element in subarray in brr [ ] and sum of subarray in arr [ ] * K is at most C
Base Case
Let maximum length be 0
Perform Binary search
Find mid value
Check if the current mid satisfy the given condition
If yes , then store length
Otherwise
Return maximum length stored
Function to check if it is possible to have such a subarray of length K
Check for first window of size K
Calculate the total cost and check if less than equal to c
If it satisfy the condition
Find the sum of current subarray and calculate total cost
Include the new element of current subarray
Discard the element of last subarray
Calculate total cost and check <= c
If possible , then return true
If it is not possible
Function that builds segment Tree
If there is only one element
Find the value of mid
Build left and right parts of segment tree recursively
Update the value at current index
Function to find maximum element in the given range
If the query is out of bounds
If the segment is completely inside the query range
Calculate the mid
Return maximum in left & right of the segment tree recursively
Driver Code
Initialize and Build the Segment Tree
Function Call
Function to find maximum length of subarray such that sum of maximum element in subarray in brr [ ] and sum of subarray in [ ] arr * K is at most C
Base Case
Let maximum length be 0
Perform Binary search
Find mid value
Check if the current mid satisfy the given condition
If yes , then store length
Otherwise
Return maximum length stored
Function to check if it is possible to have such a subarray of length K
Finds the maximum element in each window of size k
Check for window of size K
For all possible subarrays of length k
Until deque is empty
Calculate the total cost and check if less than equal to c
Find sum of current subarray and the total cost
Include the new element of current subarray
Discard the element of last subarray
Remove all the elements in the old window
Calculate total cost and check <= c
If current subarray length satisfies
If it is not possible
Driver Code
Function to find the Nth number with exactly two bits set
Initialize variables
Initialize the range in which the value of ' a ' is present
Perform Binary Search
Find the mid value
Update the range using the mid value t
Find b value using a and N
Print the value 2 ^ a + 2 ^ b
Driver Code
Function Call
Function to find the longest subsequence from the given array with maximum sum
Stores the largest element of the array
If Max is less than 0
Print the largest element of the array
Traverse the array
If arr [ i ] is greater than or equal to 0
Print elements of the subsequence
Driver code
Python3 Program to implement the above approach
Function for finding minimum number of operations
Stores the length of strings
Stores frequency of characters in string s
Update frequencies of character in s
Traverse string s1
If any character in s1 is not present in s
Stores the indices of each character in s
Traverse string s
Store indices of characters
Stores index of last appended character
Traverse string s1
Find the index of next character that can be appended
Check if the current character be included in the current subsequence
Otherwise
Start a new subsequence
Update index of last character appended
Driver Code
If S2 cannot be obtained from subsequences of S1
Otherwise
Helper function to allocates a new node
Helper function to check if node is leaf node
A recursive method to sink a tree with odd root This method assumes that the subtrees are already sinked . This method is similar to Heapify of Heap - Sort
If None or is a leaf , do nothing
if left subtree exists and left child is even
swap root 's data with left child   and fix left subtree 
if right subtree exists and right child is even
swap root 's data with right child   and fix right subtree 
Function to sink all odd nodes to the bottom of binary tree . It does a postorder traversal and calls sink ( ) if any odd node is found
If None or is a leaf , do nothing
Process left and right subtrees before this node
If root is odd , sink it
Helper function to do Level Order Traversal of Binary Tree level by level . This function is used here only for showing modified tree .
Do Level order traversal
Print one level at a time
Line separator for levels
Constructed binary tree is 1 / \ 5 8 / \ / \ 2 4 9 10
Function to calculate the sum of digits of a number
Stores the sum of digits
Add the digit to sum
Remove digit
Returns the sum of digits
Function to check if a number is prime or not
If r has any divisor
Set r as non - prime
Function to check if a number is moran number
Calculate sum of digits
Check if n is divisible by the sum of digits
Calculate the quotient
If the quotient is prime
Function to print the first K Moran numbers from the array
Sort the given array
Initialise a set
Traverse the array from the end
If the current array element is a Moran number
Insert into the set
Driver Code
Python3 program to implement the above approach
Function to count all pairs whose sum is a power of two
Stores the frequency of each element of the array
Update frequency of array elements
Stores count of required pairs
Current power of 2
Traverse the array
If pair does not exist
Increment count of pairs
Return the count of pairs
Driver Code
Function to find the rock samples in the ranges
Iterate over the ranges
Driver Code
Function Call
Python3 program to find depth of the deepest odd level node Helper function that allocates a new node with the given data and None left and right poers .
Constructor to create a new node
Utility function which returns whether the current node is a leaf or not
function to return the longest odd level depth if it exists otherwise 0
Base case return from here
increment current level
if curr_level is odd and its a leaf node
A wrapper over deepestOddLevelDepth ( )
Driver Code
10 / \ 28 13 / \ 14 15 / \ 23 24 Let us create Binary Tree shown in above example
Function to store and check the difference of digits
Base Case
Last digit of the number to check the difference from the first digit
Condition to avoid repeated values
Update the string pt
Recursive Call
Update the string pt
Recursive Call
Any number can come in between first and last except the zero
Recursive Call
Function to place digit of the number
When N is 1 and K > 0 , then the single number will be the first and last digit it cannot have difference greater than 0
This loop place the digit at the starting
Recursive Call
Vector to store results
Generate all the resultant number
Print the result
Driver Code
Function Call
Function to find the minimum number of bullets required to penetrate all bricks
Sort the points in ascending order
Check if there are no points
Iterate through all the points
Increase the count
Return the count
Driver Code
Given coordinates of bricks
Function call
Function to get the count of values that can have the maximum value
Sort array in decreasing order
Stores the answer
mark stores the maximum value till each index i
Check if arr [ i ] can be maximum
Update the mark
Print the total count
Driver Code
Given array arr
Function call
Function to return Kth character from recursive string
If N is 1 then return A
Iterate a loop and generate the recursive string
Update current string
Change A to B and B to A
Reverse the previous string
Return the kth character
Driver Code
Python3 program for above approach
Function to find the maximum length of subarray of equal elements after performing at most K increments
Length of array
Stores the size of required subarray
Starting po of a window
Stores the sum of window
Iterate over array
Current element
Remove index of minimum elements from deque which are less than the current element
Insert current index in deque
Update current window sum
Calculate required operation to make current window elements equal
If cost is less than k
Shift window start pointer towards right and update current window sum
Return answer
Driver Code
Function call
A Binary tree node
A recursive function to find depth of the deepest odd level leaf node
Base Case
If this node is leaf and its level is odd , return its level
If not leaf , return the maximum value from left and right subtrees
Main function which calculates the depth of deepest odd level leaf . This function mainly uses depthOfOddLeafUtil ( )
Driver program to test above function
Function to check if it is possible to split an array into subarrays having GCD at least K
Iterate over the array arr [ ]
If the current element is less than or equal to k
If no array element is found to be less than or equal to k
Driver Code
Given array arr [ ]
Length of the array
Given K
Function call
Function to find the smallest subarray sum greater than or equal to target
Base Case
If sum of the array is less than target
If target is equal to the sum of the array
Required condition
Driver Code
Function to maintain the case , X >= Y
To maintain X >= Y
Replace ' p ' to 'r
Replace ' r ' to ' p ' .
Function to return the maximum cost
Stores the length of the string
To maintain X >= Y .
Stores the maximum cost
Stores the count of ' p ' after removal of all " pr " substrings up to str [ i ]
Stores the count of ' r ' after removal of all " pr " substrings up to str [ i ]
Stack to maintain the order of characters after removal of substrings
If substring " pr " is removed
Increase cost by X
If any substring " rp " left in the Stack
If any substring " rp " left in the Stack
Driver Code
Function to find if the array contains only one distinct element
Assume first element to be the unique element
Traversing the array
If current element is not equal to X then break the loop and print No
Compare and print the result
Driver Code
Function call
Function to find the maximum count of pairs having equal sum
Size of the array
Iterate through evey sum of pairs possible from the given array
Count of pairs with given sum
Check for a possible pair
Update count of possible pair
Update the answer by taking the pair which is maximum for every possible sum
Return the max possible pair
Function to return the count of pairs
Size of the array
Stores the frequencies
Count the frequency
Driver Code
Function to find the maximum subarray sum possible
Stores sum without squaring
Stores sum squaring
Stores the maximum subarray sum
Either extend the subarray or start a new subarray
Either extend previous squared subarray or start a new subarray by squaring the current element
Update maximum subarray sum
Return answer
Driver Code
Function call
Python3 program to implement the above approach
Function to find the length of the smallest subarray with sum K
Stores the frequency of prefix sums in the array
Initialize ln
If sum of array till i - th index is less than K
No possible subarray exists till i - th index
Find the exceeded value
If exceeded value is zero
Driver Code
Python3 program to find depth of the deepest odd level leaf node of binary tree
tree node returns a new tree Node
return max odd number depth of leaf node
create a queue for level order traversal
traverse until the queue is empty
traverse for complete level
check if the node is leaf node and level is odd if level is odd , then update result
check for left child
check for right child
Driver Code
construct a tree
Stores at each index if it 's a prime or not
Sieve of Eratosthenes to generate all possible primes
If p is a prime
Set all multiples of p as non - prime
Function to generate the required Fibonacci Series
Stores all primes between n1 and n2
Generate all primes between n1 and n2
Stores all concatenations of each pair of primes
Generate all concatenations of each pair of primes
Stores the primes out of the numbers generated above
Store the unique primes
Find the minimum
Find the minimum
Find N
Print the N - th term of the Fibonacci Series
Driver Code
Python3 program to implement the above approach
Function to print the count of Array elements greater than all elements on its left and next K elements on its right
Iterate over the array
If the stack is not empty and the element at the top of the stack is smaller than arr [ i ]
Store the index of next greater element
Pop the top element
Insert the current index
Stores the count
Driver Code
Python program to find the maximum count of 1 s
If arr [ i - 2 ] = = 1 then we increment the count of occurences of 1 's
Else we initialise the count with 0
If arr [ i + 2 ] = = 1 then we increment the count of occurences of 1 's
Else we initialise the count with 0
We get the maximum count by skipping the current and the next element .
Driver code
Function to find the minimum number of operations required to obtain the string s
Iterate the string s
If first occurrence of 1 is found
Mark the index
Base case : If no 1 occurred
No operations required
Stores the character for which last operation was performed
Stores minimum number of operations
Iterate from pos to n
Check if s [ i ] is 0
Check if last operation was performed because of 1
Set last to 0
Check if last operation was performed because of 0
Set last to 1
Return the answer
Driver Code
A Binary Tree Node Utility function to create a new tree node
maxLevel : keeps track of maximum level seen so far . res : Value of deepest node so far . level : Level of root
Update level and resue
Returns value of deepest node
Initialze result and max level
Updates value " res " and " maxLevel " Note that res and maxLen are passed by reference .
Driver Code
Function to count the number of clumps in the given array arr [ ]
Initialise count of clumps as 0
Traverse the arr [ ]
Whenever a sequence of same value is encountered
Return the count of clumps
Driver Code
length of the given array arr [ ]
Function Call
Find if string is K - Palindrome or not using all characters exactly once Python 3 program to find if string is K - Palindrome or not using all characters exactly once
when size of string is less than k
when size of string is equal to k
when size of string is greater than k to store the frequencies of the characters
to store the count of characters whose number of occurrences is odd .
iterating over the map
Driver code
A tree node with constructor
Utility function to find height of a tree , rooted at ' root ' .
levels : current Level Utility function to print all nodes at a given level .
Driver Code
Calculating height of tree
Printing the deepest node
Function to return the index of the pivot
Base cases
Check if element at ( mid - 1 ) is pivot Consider the cases like { 4 , 5 , 1 , 2 , 3 }
Decide whether we need to go to the left half or the right half
Function to check if a given array is sorted rotated or not
To check if the elements to the left of the pivot are in descending or not
To check if the elements to the right of the pivot are in ascending or not
If any of the above if or else is true Then the array is sorted rotated
Else the array is not sorted rotated
Driver code
A Python3 program to find value of the deepest node in a given binary tree by method 3
A tree node with constructor
constructor
Funtion to return the deepest node
Creating a Queue
Iterates untill queue become empty
Driver Code
Function to return the possible pair
ans1 , ans2 store value of x and y respectively
Driver Code
Function to print the name of student who stood first after updation in rank
Array of students
Store the name of the student
Update the marks of the student
Store the current rank of the student
Print the name and jump in rank
Names of the students
Marks of the students
Updates that are to be done
Number of students
Function to return the count of digits of a number
Function to return a number that contains only digit ' d ' repeated exactly count times
Function to return the count of integers that are composed of a single distinct digit only
Count of digits in L and R
First digits of L and R
If L has lesser number of digits than R
If the number that starts with firstDigitL and has number of digits = countDigitsL is within the range include the number
Exclude the number
If the number that starts with firstDigitR and has number of digits = countDigitsR is within the range include the number
Exclude the number
If both L and R have equal number of digits
Include the number greater than L upto the maximum number whose digit = coutDigitsL
Exclude the numbers which are greater than R
Return the count
Driver code
Python 3 program to check for pairs with given difference exits in the matrix or not
Function to check if a pair with given difference exist in the matrix
Store elements in a hash
Loop to iterate over the elements of the matrix
Input matrix
given difference
prints element and NSE pair for all elements of arr [ ] of size n
push the first element to stack
iterate for rest of the elements
if stack is not empty , then pop an element from stack . If the popped element is greater than next , then a ) print the pair b ) keep popping while elements are greater and stack is not empty
push next to stack so that we can find next smaller for it
After iterating over the loop , the remaining elements in stack do not have the next smaller element , so print - 1 for them
Driver Code
Helper function that allocates a new node with the given data and None left and right poers .
Constructor to create a new node
utility function to return deepest left leaf node
create a queue for level order traversal
traverse until the queue is empty
Since we go level by level , the last stored right leaf node is deepest one
Driver Code
create a binary tree
Node Structure
Utility to create a new node
A utility function to do preorder traversal of BST
Function for constructing all possible trees with given inorder traversal stored in an array from arr [ start ] to arr [ end ] . This function returns a vector of trees .
List to store all possible trees
if start > end then subtree will be empty so returning NULL in the list
Iterating through all values from start to end for constructing left and right subtree recursively
Constructing left subtree
Constructing right subtree
Looping through all left and right subtrees and connecting to ith root below
Making arr [ i ] as root
Connecting left subtree
Connecting right subtree
Adding this tree to list
Driver program to test above function
Python3 program to find if a string is suffix of another
Test case - sensitive implementation of endsWith function
Function to calculate the maximum number of equal elements possible with atmost K increment of values . Here we have done sliding window to determine that whether there are x number of elements present which on increment will become equal . The loop here will run in fashion like 0. . . x - 1 , 1. . . x , 2. . . x + 1 , ... . , n - x - 1. . . n - 1
It can be explained with the reasoning that if for some x number of elements we can update the values then the increment to the segment ( i to j having length -> x ) so that all will be equal is ( x * maxx [ j ] ) this is the total sum of segment and ( pre [ j ] - pre [ i ] ) is present sum So difference of them should be less than k if yes , then that segment length ( x ) can be possible return true
sort the array in ascending order
Initializing the prefix array and maximum array
Calculating prefix sum of the array
Calculating max value upto that position in the array
Binary search applied for computation here
printing result
Driver code
Python program which counts different palindromic characteristics of a string .
function which checks whether a substr [ i . . j ] of a given is a palindrome or not .
P [ i , j ] = True if substr [ i . . j ] is palindrome , else False
palindrome of single length
palindrome of length 2
Palindromes of length more then 2. This loop is similar to Matrix Chain Multiplication . We start with a gap of length 2 and fill P table in a way that gap between starting and ending indexes increases one by one by outer loop .
Pick starting point for current gap
Set ending point
If current string is palindrome
function which recursively counts if a str [ i . . j ] is a k - palindromic or not .
terminating condition for a which is a k - palindrome .
terminating condition for a which is not a k - palindrome .
increases the counter for the if it is a k - palindrome .
mid is middle pointer of the str [ i ... j ] .
if length of which is ( j - i + 1 ) is odd than we have to subtract one from mid else if even then no change .
if the is k - palindrome then we check if it is a ( k + 1 ) - palindrome or not by just sending any of one half of the to the Count_k_Palindrome def .
Finding all palindromic substrings of given string
counting k - palindromes for each and every sub of given string . .
Output the number of K - palindromic substrings of a given string .
Driver code
convert all numbers to strings
check if each number in the list has 1 , 2 and 3
sort all the numbers
Driver Code
Structure to store the start and end point
Function to find Kth smallest number in a vector of merged intervals
Traverse merged [ ] to find Kth smallest element using Linear search .
To combined both type of ranges , overlapping as well as non - overlapping .
Sorting intervals according to start time
Merging all intervals into merged
To check if starting point of next range is lying between the previous range and ending point of next range is greater than the Ending point of previous range then update ending point of previous range by ending point of next range .
If starting point of next range is greater than the ending point of previous range then store next range in merged [ ] .
Driver Code
Merge all intervals into merged [ ]
Processing all queries on merged intervals
Python3 program to count no of distinct countries from a given group of people
Answer is valid if adjacent sitting num people give same answer
someone gives different answer
check next person
one valid country group has been found
Driven code
A binary tree node
Constructor to create a new node
A utility function to find deepest leaf node . lvl : level of current node . maxlvl : pointer to the deepest left leaf node found so far isLeft : A bool indicate that this node is left child of its parent resPtr : Pointer to the result
Base CAse
Update result if this node is left leaf and its level is more than the max level of the current result
Recur for left and right subtrees
A wrapper for left and right subtree
Driver program to test above function
Function to check the array for elements in given range
Range is the no . of elements that are to be checked
Traversing the array
If an element is in range
Checking whether elements in range 0 - range are negative
Element from range is missing from array
All range elements are present
Defining Array and size
A is lower limit and B is the upper limit of range
True denotes all elements were present
False denotes any element was not present
function to print Minimum element using recursion
if size = 0 means whole array has been traversed
Driver Code
Utility function to check if current minimum value is feasible or not .
iterate over all books
check if current number of pages are greater than curr_min that means we will get the result after mid no . of pages
count how many students are required to distribute curr_min pages
increment student count
update curr_sum
if students required becomes greater than given no . of students , return False
else update curr_sum
function to find minimum pages
return - 1 if no . of books is less than no . of students
Count total number of pages
initialize start as 0 pages and end as total pages
traverse until start <= end
check if it is possible to distribute books by using mid as current minimum
update result to current distribution as it 's the best we have found till now.
as we are finding minimum and books are sorted so reduce end = mid - 1 that means
if not possible means pages should be increased so update start = mid + 1
at - last return minimum no . of pages
Number of pages in books
m = 2 No . of students
Tree node
Function to calculate the minimum depth of the tree
Corner Case . Should never be hit unless the code is called on root = NULL
Base Case : Leaf node . This acoounts for height = 1
If left subtree is Null , recur for right subtree
If right subtree is Null , recur for left subtree
Let us construct the Tree shown in the above figure
Function to print the most frequent array element exactly K times
Stores frequency array element
Count frequency of array element
Maximum array element
Traverse the Map
Find the element with maximum frequency
If the frequency is maximum , store that number in element
Print element as it contains the element having highest frequency
Decrease the frequency of the maximum array element
Reduce the number of operations
Given array
Size of the array
Given K
Function to find the maximum difference between the maximum and minimum in the array after K operations
Stores maximum difference between largest and smallest array element
Sort the array in descending order
Traverse the array arr [ ]
Update maxDiff
Driver Code
Function to get the minimum Cost to convert all characters of given string to 0 s
Stores the range of indexes of characters that need to be flipped
Stores the number of times current character is flipped
Stores minimum cost to get the required string
Traverse the given string
Remove all value from pq whose value is less than i
Update flip
Get the current number
If current character is flipped odd times
If current character contains non - zero value
Update flip
Update cost
Append R [ i ] into pq
Driver code
Function call
A Binary Tree node
Iterative method to find minimum depth of Binary Tree
Corner Case
Create an empty queue for level order traversal
Enqueue root and initialize depth as 1
Do level order traversal
Remove the front queue item
Get details of the removed item
If this is the first leaf node seen so far then return its depth as answer
If left subtree is not None , add it to queue
if right subtree is not None , add it to queue
Lets construct a binary tree shown in above diagram
Function to calculate the maximum Manhattan distance
List to store maximum and minimum of all the four forms
Sorting both the vectors
Driver code
Given Co - ordinates
Function call
Function calculates distance between two points
Function to find the maximum distance between any two points
Iterate over all possible pairs
Update maxm
Return actual distance
Driver Code
Number of points
Given points
Function Call
Function to print the required reordering of the array if possible
Sort the array in increasing order
If all elements are equal , then it is not possible
Else print the sorted array arr [ ]
Driver Code
Given array
Function Call
Function to find the maximum sum
If element of array a is smaller than that of array b , swap them .
Find sum of resultant array
Driver code
Function that Maximize the count of distinct element
Sort thr list
Keeping track of previous change
Decrement is possible
Remain as it is
Increment is possible
Driver Code
CheckSort function To check if array can be sorted
sortarr is sorted array of arr
if k = 1 then ( always possible to sort ) swapping can easily give sorted array
comparing sortarray with array
element at index j must be in j = i + l * k form where i = 0 , 1 , 2 , 3. . . where l = 0 , 1 , 2 , 3 , . . n - 1
if element is present then swapped
if element of sorted array does not found in its sequence then flag remain zero that means arr can not be sort after swapping
if flag is 0 Not possible else Possible
Driver code
size of step
array initialized
length of arr
calling function
A tree node structure
Helper function replaces the data with depth Note : Default value of level is 0 for root .
Base Case
Replace data with current depth
A utility function to prinorder traversal of a Binary Tree
Driver Code
Constructing tree given in the above figure
Python3 implementation of the approach
Function to return ( x ^ y ) mod p
Declaring size array globally
Initializing DSU data structure
Function to find the root of ith node in the disjoint set
Weighted union using Path Compression
size of set A is small than size of set B
size of set B is small than size of set A
Function to add an edge in the tree
Build the tree
Function to return the required product
Sorting the edges with respect to its weight
Start iterating in decreasing order of weight
Determine Current edge values
Calculate root of each node and size of each set
Using the formula
Calculating final result
Weighted union using Path Compression
Driver Code
Function that returns true if the array can be made strictly decreasing with at most one change
To store the number of modifications required to make the array strictly decreasing
Check whether the last element needs to be modify or not
Check whether the first element needs to be modify or not
Loop from 2 nd element to the 2 nd last element
Check whether arr [ i ] needs to be modified
Modifying arr [ i ]
Check if arr [ i ] is equal to any of arr [ i - 1 ] or arr [ i + 1 ]
If more than 1 modification is required
Driver code
Function to find maximal disjoint set
sort the list of intervals
First interval will always be included in set
End point of first interval
Check if given interval overlap with previously included interval , if not then include this interval and update the end point of last added interval
Driver code
Utility function to print the original indices of the elements of the array
Function to print the required permutations
To keep track of original indices
Sort the array
Count the number of swaps that can be made
Cannot generate 3 permutations
Print the first permutation
Find an index to swap and create second permutation
Print the last permutation
Driver code
Function call
A binary tree node
Function to get the maximum width of a binary tree
Get width of each level and compare the width with maximum width so far
Get width of a given level
Compute the " height " of a tree -- the number of nodes along the longest path from the root node down to the farthest leaf node .
compute the height of each subtree
use the larger one
Constructed binary tree is : 1 / \ 2 3 / \ \ 4 5 8 / \ 6 7
Function call
Function to print the answer if it exists using the concept of merge overlapping segments
Sort the indices based on their corresponding value in V
Resultant array Initialise all the values in resultant array with '2' except the first index of ' indices ' which is initialised as '1' Initialise maxR to store the maximum of all right values encountered so far
If the i - th index has any any point in common with the ( i - 1 ) th index classify it as '1' in resultant array and update maxR if necessary else we have found the breakpoint and we can exit the loop
Driver Code
This function prints all distinct elements
Creates an empty hashset
Traverse the input array
If not present , then put it in hashtable and increment result
Driver code
Python3 program for the above approach
Calculating next gap
Function for swapping
Merging the subarrays using shell sorting Time Complexity : O ( nlog n ) Space Complexity : O ( 1 )
merge sort makes log n recursive calls and each time calls merge ( ) which takes nlog n steps Time Complexity : O ( n * log n + 2 ( ( n / 2 ) * log ( n / 2 ) ) + 4 ( ( n / 4 ) * log ( n / 4 ) ) + ... . . + 1 ) Time Complexity : O ( logn * ( n * log n ) ) i . e . O ( n * ( logn ) ^ 2 ) Space Complexity : O ( 1 )
Calculating mid to slice the array in two halves
Recursive calls to sort left and right subarrays
UTILITY FUNCTIONS Function to pran array
Driver Code
Function to calculate the maximum points earned by making an optimal selection on the given array
Sorting the array
Variable to store the total points earned
Driver Code
Function to count the number of tower
first we sort the house numbers
for count number of towers
for iterate all houses
count number of towers
find find the middle location
traverse till middle location
this is point to middle house where we insert the tower
now find the last location
traverse till last house of the range
return the number of tower
Driver code
given elements
print number of towers
Function that checks whether the string is in alphabetical order or not
length of the string
create a character array of the length of the string
sort the character array
check if the character array is equal to the string or not
Driver code
check whether the string is in alphabetical order or not
function to sort the array
Sort first k elements in ascending order
Sort remaining n - k elements in descending order
Our arr contains 8 elements
A binary tree node
Function to get the maximum width of a binary tree
base case
Initialize result
Do Level order traversal keeping track of number of nodes at every level
Get the size of queue when the level order traversal for one level finishes
Update the maximum node count value
Iterate for all the nodes in the queue currently
Dequeue an node from queue
Driver program to test above function
Function call
Sorts input stack and returns sorted stack .
pop out the first element
while temporary stack is not empty and top of stack is greater than temp
pop from temporary stack and push it to the input stack
push temp in temporary of stack
Push contents of both stacks in result
Sort the result stack .
main function
This is the temporary stack
Python Program to create concatenation of all substrings in lexicographic order .
Creating an array to store substrings
finding all substrings of string
Sort all substrings in lexicographic order
Concatenating all substrings
Driver code
Iterative python program to sort an array by swapping elements
Utility function to print a Vector
Function performs insertion sort on vector V
Insert V [ i ] into list 0. . i - 1
Swap V [ j ] and V [ j - 1 ]
Decrement j
Driver Code
Python program to sort a string in descending order using library function
Driver code
function call
Python 3 program to sort a string of characters
function to print string in sorted order
Hash array to keep count of characters . Initially count of all charters is initialized to zero .
Traverse string and increment count of characters
' a ' - ' a ' will be 0 , ' b ' - ' a ' will be 1 , so for location of character in count array we wil do str [ i ] - ' a ' .
Traverse the hash array and print characters
Driver Code
Python program to find smallest number in array that is repeated exactly ' k ' times .
finds the smallest number in arr [ ]
Computing frequencies of all elements
Finding the smallest element with frequency as k
If frequency of any of the number is equal to k starting from 0 then return the number
Driver code
Python3 program to find subarray with sum closest to 0
Returns subarray with sum closest to 0.
To consider the case of subarray starting from beginning of the array
Store prefix sum with index
Sort on the basis of sum
Find two consecutive elements with minimum difference
Update minimum difference and starting and ending indexes
Return starting and ending indexes
Driver code
function to find index of element ' x ' in sorted ' arr ' uses binary search technique
function to check whether the given array is a ' k ' sorted array or not
auxiliary array 'aux
copy elements of ' arr ' to 'aux
sort 'aux
for every element of ' arr ' at index ' i ' , find its index ' j ' in 'aux
index of arr [ i ] in sorted array 'aux
if abs ( i - j ) > k , then that element is not at - most k distance away from its target position . Thus , ' arr ' is not a k sorted array
' arr ' is a k sorted array
Driver Code
Python3 program to perform basic timSort
Becomes 1 if any 1 bits are shifted off
This function sorts array from left index to to right index which is of size atmost RUN
Merge function merges the sorted runs
original array is broken in two parts left and right array
after comparing , we merge those two array in larger sub array
Copy remaining elements of left , if any
Copy remaining element of right , if any
Iterative Timsort function to sort the array [ 0. . . n - 1 ] ( similar to merge sort )
Sort individual subarrays of size RUN
Start merging from size RUN ( or 32 ) . It will merge to form size 64 , then 128 , 256 and so on ... .
Pick starting point of left sub array . We are going to merge arr [ left . . left + size - 1 ] and arr [ left + size , left + 2 * size - 1 ] After every merge , we increase left by 2 * size
Find ending point of left sub array mid + 1 is starting point of right sub array
Merge sub array arr [ left ... . . mid ] & arr [ mid + 1. ... right ]
Driver program to test above function
Function Call
Prints pendulam arrangement of arr [ ]
sorting the elements
Auxiliary array to store output
calculating the middle index
storing the minimum element in the middle i is index for output array and j is for input array .
adjustment for when no . of elements is even
Printing the pendulum arrangement
input Array
calling pendulum function
A binary tree node
Function to get the maximum width of a binary tree
Create an array that will store count of nodes at each level
Fill the count array using preorder traversal
Return the maximum value from count array
A function that fills count array with count of nodes at every level of given binary tree
Compute the " height " of a tree -- the number of nodes along the longest path from the root node down to the farthest leaf node .
compute the height of each subtree
use the larger one
Return the maximum value from count array
Constructed bunary tree is : 1 / \ 2 3 / \ \ 4 5 8 / \ 6 7
Returns minimum sum of product of two arrays with permutations allowed
Sort A and B so that minimum and maximum value can easily be fetched .
Multiplying minimum value of A and maximum value of B
Driven Program
Function to find the number of numbers that can be expressed in the form of the sum of two perfect powers
Stores all possible powers
Push 1 and 0 in it
Iterate over all the exponents
Iterate over all possible numbers
This loop will run for a maximum of sqrt ( R ) times
Push this power in the array pows [ ]
Increase the number
Stores if i can be expressed as the sum of perfect power or not
int ok [ R + 1 ] ; memset ( ok , 0 , sizeof ( ok ) ) ; Iterate over all possible pairs of the array pows [ ]
The number is valid
Find the prefix sum of the array ok [ ]
Return the count of required number
Driver Code
Python3 implementation for the above approach
Structure of Node
Function to calculate minimum absolute difference of subtrees after splitting the tree into two parts
Reference variable to store the answer
Function to store sum of values of current node , left subtree and right subtree in place of current node 's value
Function to perform every possible split and calculate absolute difference of subtrees
Absolute difference in subtrees if left edge is broken
Absolute difference in subtrees if right edge is broken
Update minDiff if a difference lesser than it is found
Construct the tree
Print the output
class to create a new tree node
get vertical width
traverse left
if curr is decrease then get value in minimum
if curr is increase then get value in maximum
traverse right
1 is added to include root in the width
Driver Code
Function to find the maximum sum with M flips
Declare a priority queue i . e . min heap
Declare the sum as zero
Push all elements of the array in it
Iterate for M times
Get the top element
Flip the sign of the top element
Remove the top element
Update the sum
Push the temp into the queue
Driver program
Given input
Function to find the minimum number of operations to make all the elements of the array equal
Store the sum of the array arr [ ]
Traverse through the array
If it is not possible to make all array element equal
Store the minimum number of operations needed
Traverse through the array
Finally , print the minimum number operation to make array elements equal
Driver Code
Given Input
Function Call
Function to find minimum operations needed to make the product of any two adjacent elements in prefix sum array negative
Stores the minimum operations
Stores the prefix sum and number of operations
Traverse the array
Update the value of sum
Check if i + r is odd
Check if prefix sum is not positive
Update the value of ans and sum
Check if prefix sum is not negative
Update the value of ans and sum
Update the value of res
Print the value of res
Driver code
Function to print the arrays
Function to reverse the subarray
Function to calculate the minimum product of same - indexed elements of two given arrays
Calculate initial product
Traverse all odd length subarrays
Remove the previous product
Add the current product
Check if current product is minimum or not
Traverse all even length subarrays
Remove the previous product
Add to the current product
Check if current product is minimum or not
Update the pointers
Reverse the subarray
Print the subarray
Driver Code
Function to find the maximum cost of removing substrings " ab " and " ba " from S
MaxStr is the substring char array with larger cost
MinStr is the substring char array with smaller cost ;
Denotes larger point
Denotes smaller point
Stores cost scored
Stack to keep track of characters
Traverse the string
If the substring is maxstr
Pop from the stack
Add maxp to cost
Push the character to the stack
Remaining string after removing maxstr
Find remaining string
Reversing the string retrieved from the stack
Removing all occurences of minstr
If the substring is minstr
Pop from the stack
Add minp to the cost
Otherwise
Return the maximum cost
Driver Code
Input String
Costs
A binary tree node has data , pointer to left child and a pointer to right child
Function to fill hd in set .
Third parameter is horizontal distance
Driver Code
Creating the above tree
Function to find the value of the expression a * b + ( b - a )
Function to find the maximum value of the expression a * b + ( b - a ) possible for any pair ( a , b )
Sort the vector in ascending order
Stores the maximum value
Update ans by choosing the pair of the minimum and 2 nd minimum
Update ans by choosing the pair of maximum and 2 nd maximum
Return the value of ans
Driver Code
Given inputs
Store previous flip events
Remove an item which is out range of window .
In a window , if A [ i ] is a even number with even times fliped , it need to be fliped again . On other hand , if A [ i ] is a odd number with odd times fliped , it need to be fliped again .
Insert
Driver code
We 're flipping the subarray from  A[i] to A[i+K-1]
' ' ▁ If ▁ we ▁ can ' t flip the entire subarray , its impossible
Driver Code
Function to calculate GCD of given array
Function to calculate GCD of two integers
Utility function to check for all the combinations
If a sequence of size N is obtained
If gcd of current combination is K
If current element from first array is divisible by K
Recursively proceed further
If current combination satisfies given condition
Remove the element from the combination
If current element from second array is divisible by K
Recursively proceed further
If current combination satisfies given condition
Remove the element from the combination
Function to check for all possible combinations
Stores the subsequence
If GCD of any sequence is not equal to K
Given arrays
Given value of K
Function call to generate a subsequence whose GCD is K
Function to find the K - th element in the required permutation
Stores the required permutation
Insert all the even numbers less than or equal to N
Now , insert all odd numbers less than or equal to N
Print the Kth element
Driver Code
functions call
Python3 program for the above approach
Function to count the minimum subsequences of a A required to be appended to obtain the B
Size of the string
Maps characters to their respective indices
Insert indices of characters into the sets
Stores the position of the last visited index in the A . Initially set it to - 1.
Stores the required count
Iterate over the characters of B
If the character in B is not present in A , return - 1
Fetch the next index from B [ i ] 's set
If the iterator points to the end of that set
If it doesn 't poto the  end, update previous
Prthe answer
Driver Code
Function to minimize array elements by shift operations
For checking all the left shift operations
Left shift
Consider the minimum possible value
Function to maximize array elements by shift operations
For checking all the left shift operations
Left shift
Consider the maximum possible value
Function to maximize the absolute difference between even and odd indexed array elements
To calculate the difference of odd indexed elements and even indexed elements
To calculate the difference between odd and even indexed array elements
Print the maximum value
Driver Code
Python program to determine whether vertical level l of binary tree is sorted or not .
Structure of a tree node .
Helper function to determine if vertical level l of given binary tree is sorted or not .
If root is null , then the answer is an empty subset and an empty subset is always considered to be sorted .
Variable to store previous value in vertical level l .
Variable to store current level while traversing tree vertically .
Variable to store current node while traversing tree vertically .
Declare queue to do vertical order traversal . A pair is used as element of queue . The first element in pair represents the node and the second element represents vertical level of that node .
Insert root in queue . Vertical level of root is 0.
Do vertical order traversal until all the nodes are not visited .
Check if level of node extracted from queue is required level or not . If it is the required level then check if previous value in that level is less than or equal to value of node .
If left child is not NULL then push it in queue with level reduced by 1.
If right child is not NULL then push it in queue with level increased by 1.
If the level asked is not present in the given binary tree , that means that level will contain an empty subset . Therefore answer will be true .
Driver Code
1 / \ 2 5 / \ 7 4 / 6
Function to find minimum count of steps required to remove all the array elements
Stores minimum count of steps required to remove all the array elements
Update N
Traverse each bit of N
If current bit is set
Update cntStep
Driver Code
Function to find the minimum number of operations required to empty the string
Initialize variables
Traverse the string
If current character is 0
Update maximum consecutive 0 s and 1 s
Print the minimum operation
Driver code +
input string
length of string
Function Call
Function to swap laterally inverted images of upper and lower triangular halves of a given matrix
Store the matrix elements from upper & lower triangular halves
Traverse the matrix mat [ ] [ ]
Find the index
If current element lies on the principal diagonal
If current element lies below the principal diagonal
If current element lies above the principal diagonal
Traverse again to swap values
Find the index
Principal diagonal
Below main diagonal
Above main diagonal
Traverse the matrix and pr
Driver Code
Given Matrix mat [ ] [ ]
Swap the upper and lower triangular halves
Function to find the prime power of X
Stores prime powers of X
Iterate over the range [ 2 , sqrt ( X ) ]
If X is divisible by i
Stores prime power
Calculate prime power of X
Update X
Update p
Insert prime powers into primePow [ ]
If X exceeds 1
Function to calculate the sum of array elements
Stores sum of array elements
Traverse the array
Update sum
Function to partition array into K groups such that sum of elements of the K groups is minimum
If count of prime powers is equal to pos
Stores minimum sum of of each partition of arr [ ] into K groups
Traverse the array arr [ ]
Include primePow [ pos ] into i - th groups
Update res
Remove factors [ pos ] from i - th groups
Utility function to calculate minimum sum of K positive integers whose LCM is X
Stores all prime powers of X
Stores count of prime powers
Stores minimum sum of K positive integers whose LCM is X
If n is less than or equal to k
Traverse primePow [ ] array
Update sum
Update sum
arr [ i ] : Stores element in i - th group by partitioning the primePow [ ] array
Update sum
Driver Code
Function to count minimum operations required to make the string an empty string
Stores count of 1 s by removing consecutive distinct subsequence
Stores count of 0 s by removing consecutive distinct subsequence
Traverse the string
If current character is 0
Update cntOne
Update cntZero
If current character is 1
Update cntZero
Update cntOne
Driver code
Function to calculate the minimum number of flips required
Dimensions of mat [ ] [ ]
Initialize answer
Count all ' D ' s in the last row
Count all ' R ' s in the last column
Print answer
Given matrix
Function call
Print answer
Python3 program to determine whether binary tree is level sorted or not .
Function to create new tree node .
Function to determine if given binary tree is level sorted or not .
to store maximum value of previous level .
to store minimum value of current level .
to store maximum value of current level .
to store number of nodes in current level .
queue to perform level order traversal .
find number of nodes in current level .
traverse current level and find minimum and maximum value of this level .
if minimum value of this level is not greater than maximum value of previous level then given tree is not level sorted .
maximum value of this level is previous maximum value for next level .
Driver Code
1 / 4 \ 6 / \ 8 9 / \ 12 10
Python3 program to implement the above approach
Function to print the smallest subsequence that satisfies the condition
Stores gcd of the array .
Traverse the given array
Update gcdArr
Traverse the given array .
If current element equal to gcd of array .
Generate all possible pairs .
If gcd of current pair equal to gcdArr
Print current pair of the array
Driver Code
Python3 program to implement the above approach
Function to get all the prime numbers in the range [ 1 , X ]
Stores the boolean value to check if a number is prime or not
Mark all non prime numbers as false
If i is prime number
Mark j as a composite number
Function to get the count of pairs whose product is a composite number
Stores the boolean value to check if a number is prime or not
Stores the count of 1 s
Stores the count of prime numbers
Traverse the given array .
Stores count of pairs whose product is not a composite number
Stores the count of pairs whose product is composite number
Driver Code
Python3 program to implement the above approach
Function to calculate X ^ n in log ( n )
Stores the value of X ^ n
If N is odd
Function to find the closest number > N having at most 1 non - zero digit
Stores the count of digits in N
Stores the power of 10 ^ ( n - 1 )
Stores the last ( n - 1 ) digits
Store the answer
Driver Code
Function call
Function to find the arrangement of array B [ ] such that element at each index of A [ ] and B [ ] are not equal
Length of array
Print not possible , if arrays only have single equal element
Reverse array B
Traverse over arrays to check if there is any index where A [ i ] and B [ i ] are equal
Swap B [ i ] with B [ i - 1 ]
Break the loop
Print required arrangement of array B
Given arrays A [ ] and B [ ]
Function call
Python3 program for the above approach
Function to iterate over the X quadrant and swap its element with Y quadrant
Iterate over X quadrant
Swap operations
Function to swap the elements of the two given quadrants
For Swapping 1 st and 2 nd Quadrant
For Swapping 1 st and 3 rd Quadrant
For Swapping 1 st and 4 th Quadrant
For Swapping 2 nd and 3 rd Quadrant
For Swapping 2 nd and 4 th Quadrant
For Swapping 3 rd and 4 th Quadrant
Print the resultant matrix
Function to print the matrix
Iterate over the rows
Iterate over the cols
Given matrix
Given quadrants
Function Call
Tree node class
Constructor of tree node
Method that prints the bottom view .
Initialize a variable ' hd ' with 0 for the root element .
TreeMap which stores key value pair sorted on key value
Queue to store tree nodes in level order traversal
Assign initialized horizontal distance value to root node and add it to the queue .
In STL , append ( ) is used enqueue an item
Loop until the queue is empty ( standard level order loop )
In STL , pop ( ) is used dequeue an item
Extract the horizontal distance value from the dequeued tree node .
Put the dequeued tree node to TreeMap having key as horizontal distance . Every time we find a node having same horizontal distance we need to replace the data in the map .
If the dequeued node has a left child , add it to the queue with a horizontal distance hd - 1.
If the dequeued node has a right child , add it to the queue with a horizontal distance hd + 1.
Traverse the map elements using the iterator .
Driver Code
Function to calculate the minimum number of steps required
Stores minimum difference
Driver Code
Function to find the minimum number of operations required
Maximum number of characters that can be changed in one operation
If length of the less than maximum number of characters that can be changed in an operation
Set the last index as the index for the operation
Otherwise
If size of the is equal to the maximum number of characters in an operation
Find the number of operations required
Find the starting position
Print i - th index
Shift to next index
Otherwise
Find the number of operations required
If n % div exceeds k
Print i - th index
Shift to next index
Driver Code
Function to find the length of the largest subsequence consisting of a pair of alternating digits
Variable initialization
Nested loops for iteration
Check if i is not equal to j
Initialize length as 0
Iterate from 0 till the size of the string
Increment length
Increment length
Update maxi
Check if maxi is not equal to 1 the print otherwise pr0
Driver Code
Given string
Function call
Tree node class
Constructor of tree node
printBottomViewUtil function
Base case
If current level is more than or equal to maximum level seen so far for the same horizontal distance or horizontal distance is seen for the first time , update the dictionary
recur for left subtree by decreasing horizontal distance and increasing level by 1
recur for right subtree by increasing horizontal distance and increasing level by 1
printBottomView function
Create a dictionary where key -> relative horizontal distance of the node from root node and value -> pair containing node 's  value and its level
Traverse the dictionary in sorted order of their keys and print the bottom view
Driver Code
Initialise to update the maximum gcd value from all the path
Node structure
Initialize constructor
Function to find gcd of a and b
Function to find the gcd of a path
Function to find the maximum value of gcd from root to leaf in a Binary tree
Check if root is not null
Find the maximum gcd of path value and store in global maxm variable
Traverse left of binary tree
Traverse right of the binary tree
Driver Code
Given Tree
Function call
Print the maximum AND value
Funciton to calculate the value of count
Stores the count of pairs
Set the two pointers
Check if the sum of pirs is equal to n
Increase the count of pairs
Move to the next pair
Driver code
Function to return the number of possible ways
Check if product can be - 1
driver code
Python3 program to find the maximum number of bridges in any path of the given graph
Stores the nodes and their connections
Store the tree with Bridges as the edges
Stores the visited nodes
For finding bridges
for Disjoint Set Union
For storing actual bridges
Stores the number of nodes and edges
For finding bridges
Function to find root of the component in which A lies
Doing path compression
Function to do union between a and b
If both are already in the same component
If both have same rank , then increase anyone 's rank
Function to find bridges
Initialize in time and low value
Update the low value of the parent
Perform DFS on its child updating low if the child has connection with any ancestor
Bridge found
Otherwise
Find union between parent and child as they are in same component
Function to find diameter of the tree for storing max two depth child
Finding max two depth from its children
Update diameter with the sum of max two depths
Return the maximum depth
Function to find maximum bridges bwtween any two nodes
DFS to find bridges
If no bridges are found
Iterate over all bridges
Find the endpoints
Generate the tree with bridges as the edges
Update the head
Return the diameter
Graph = > 1 -- -- 2 -- -- 3 -- -- 4 | | 5 -- -- 6
A Binary tree node
Function to get the count of leaf nodes in binary tree
create a tree
get leaf count of the abve tree
Function to find winner of the game
Array to Maintain frequency of the characters in S initialise freq array with 0
Maintain count of all distinct characters
Finding frequency of each character
Count unique duplicate characters
Loop to count the unique duplicate characters
Condition for Player - 1 to be winner
Else Player - 2 is always winner
Driven Code
Function call
Python3 program to count number of substring under given condition
Function return count of such substring
Selection of adequate x value
Store where 1 's are located
If there are no ones , then answer is 0
For ease of implementation
Count storage
Iterate on all k values less than fixed x
Keeps a count of 1 's occured  during string traversal
Iterate on string and modify the totCount
If this character is 1
Add to the final sum / count
Increase totCount at exterior position
Reduce totCount at index + k * n
Slightly modified prefix sum storage
Number of 1 's till i-1
Traversing over string considering each position and finding bounds and count using the inequalities
Calculating bounds for l and r
If valid then add to answer
Driver code
Function to return the largest number less than N
Iterate through all the numbers
Find the number of set bits for the current number
Check if this number has the highest set bits
Return the result
Driver code
Python3 program to count leaf nodes in a Binary Tree
Helper function that allocates a new Node with the given data and None left and right pointers .
Function to get the count of leaf Nodes in a binary tree
If tree is empty
Initialize empty queue .
Do level order traversal starting from root Initialize count of leaves
Driver Code
1 / \ 2 3 / \ 4 5 Let us create Binary Tree shown in above example
get leaf count of the above created tree
Function to return the Kth element in B [ ]
Initialize the count Array
Reduce N repeatedly to half its value
Add count to start
Subtract same count after end index
Store each element of Array [ ] with their count
Sort the elements wrt value
If Kth element is in range of element [ i ] return element [ i ]
If K is out of bound
Driver code
Function to find the lexicographically next balanced bracket expression if possible
Decrement the depth for every opening bracket
Increment for the closing brackets
Last opening bracket
Driver code
Function to print maximum number that can be formed using N segments
If n is odd
use 3 three segment to print 7
remaining to print 1
If n is even
print n / 2 1 s .
Driver 's Code
Function to find the sum of the odd and even positioned digits in a number
To store the respective sums
Converting integer to string
Traversing the string
Driver code
Node class
Program to count leaves
If the node itself is " None " return 0 , as there are no leaves
It the node is a leaf then both right and left children will be " None "
Now we count the leaves in the left and right subtrees and return the sum
Driver Code
get leaf count of the above created tree
Python 3 program to divide into maximum number of segments
Returns the maximum number of sorted subarrays in a valid partition
Find minimum value from right for every index
Finding the shortest prefix such that all the elements in the prefix are less than or equal to the elements in the rest of the array .
if current max is less than the right prefix min , we increase number of partitions .
Driver code
Find minimum value from right for every index
Function returns the minimum cost of the array
Driver Code
function to count minimum swaps required to make binary String alternating
stores total number of ones
stores total number of zeroes
checking impossible condition
odd length string
number of even positions
stores number of zeroes and ones at even positions
even length string
stores number of ones at odd and even position respectively
Driver code
Main method
n = 0 Count of North s = 0 Count of South e = 0 Count of East w = 0 Count of West
function to calculate the minimum cost
Minimum cost is n - 1 multiplied with minimum element .
driver code
class that allocates a new node with the given data and None left and right pointers .
Computes the number of non - leaf nodes in a tree .
Base cases .
If root is Not None and its one of its child is also not None
Driver Code
Python3 program to acquire all n coins
function to calculate min cost
sort the coins value
calculate no . of coins needed
calculate sum of all selected coins
Driver code
Function to allocate memory to blocks as per First fit algorithm
Stores block id of the block allocated to a process
pick each process and find suitable blocks according to its size ad assign to it
allocate block j to p [ i ] process
Reduce available memory in this block .
Driver code
Python3 program to find minimum number of denominations
All denominations of Indian Currency
Initialize Result
Traverse through all denomination
Find denominations
Print result
Driver Code
Function to minimize the removals of array elements such that atleast K elements are equal to their indices
Store the array as 1 - based indexing Copy of first array
Make a dp - table of ( N * N ) size
Delete the current element
Take the current element
Check for the minimum removals
Driver Code
Function to find the count of possible arrays such that the absolute difference between any adjacent elements is atmost 1
Stores the dp states where dp [ i ] [ j ] represents count of arrays of length i + 1 having their last element as j
Case where 1 st array element is missing
All integers in range [ 1 , M ] are reachable
Only reachable integer is arr [ 0 ]
Iterate through all values of i
If arr [ i ] is not missing
Only valid value of j is arr [ i ]
If arr [ i ] is missing
Iterate through all possible values of j in range [ 1 , M ]
Stores the count of valid arrays
Calculate the total count of valid arrays
Return answer
Driver Code
Function Call
Function to calculate maximum possible score using the given operations
Iterate through all possible len1gths of the subarray
Iterate through all the possible starting indices i having len1gth len1
Stores the rightmost index of the current subarray
Initial dp [ i ] [ j ] will be 0.
Iterate through all possible values of k in range [ i + 1 , j - 1 ]
Return the answer
Driver Code
Function Call
Function Call
Function to calculate longest substring with odd or even elements
Initializing dp Initializing dp with 1
ans will store the final answer
Traversing the array from index 1 to N - 1
Checking both current and previous element is even or odd
Updating dp with ( previous dp value ) + 1
Storing max element so far to ans
Returning the final answer
Input
Function call
python program for the above approach
Function to find number of ' N ' digit numbers such that the element is mean of sum of its adjacent digits
If digit = n + 1 , a valid n - digit number has been formed
If the state has already been computed
If current position is 1 , then any digit from [ 1 - 9 ] can be placed . If n = 1 , 0 can be also placed .
If current position is 2 , then any digit from [ 1 - 9 ] can be placed .
previous digit selected is the mean .
mean = ( current + prev2 ) / 2 current = ( 2 * mean ) - prev2
Check if current and current + 1 can be valid placements
return answer
Given Input
Function call
A node structure
Iterative Method to count half nodes of binary tree
Base Case
Create an empty queue for level order traversal
initialize count for half nodes
Enqueue left child
Enqueue right child
Driver Program to test above function
Python3 program for the above approach
Function to count N digit numbers whose digits are less than or equal to the absolute difference of previous two digits
If all digits are traversed
If the state has already been computed
If the current digit is 1 , any digit from [ 1 - 9 ] can be placed . If N == 1 , 0 can also be placed .
If the current digit is 2 , any digit from [ 0 - 9 ] can be placed
For other digits , any digit from 0 to abs ( prev1 - prev2 ) can be placed
Return the answer
Driver code
Input
Function call
Function to count number of 0 s present in the string
Stores the count of 0 s
Iterate over characters of string
Recursive Function to find the length of longest subset from given array of strings with at most A 0 s and B 1 s
If idx is equal to N or A + B is equal to 0
If the state is already calculated
Stores the count of 0 's
Stores the count of 1 's
Stores the length of longest by including arr [ idx ]
If zero is less than A and one is less than B
Stores the length of longest subset by excluding arr [ idx ]
Assign
Return
Function to find the length of the longest subset of an array of strings with at most A 0 s and B 1 s
Stores all Dp - states
Return
Driver Code
Python3 program for the above approach
Function to check if the pattern consisting of ' * ' , ' . ' and lowercase characters matches the text or not
Base Case
Stores length of text
Stores length of pattern
dp [ i ] [ j ] : Check if { text [ 0 ] , . . text [ i ] } matches { pattern [ 0 ] , ... pattern [ j ] } or not
Base Case
Iterate over the characters of the string pattern
Update dp [ 0 ] [ i + 1 ]
Iterate over the characters of both the strings
If current character in the pattern is '.
Update dp [ i + 1 ] [ j + 1 ]
If current character in both the strings are equal
Update dp [ i + 1 ] [ j + 1 ]
If current character in the pattern is '*
Update dp [ i + 1 ] [ j + 1 ]
Update dp [ i + 1 ] [ j + 1 ]
Return dp [ M ] [ N ]
Driver Code
Function to count the number of ways to paint N * 3 grid based on given conditions
Count of ways to pain a row with same colored ends
Count of ways to pain a row with different colored ends
Traverse up to ( N - 1 ) th row
For same colored ends
For different colored ends
Print the total number of ways
Driver Code
Function call
Function to find maximum sum of at most N with different index array elements such that at most X are from A [ ] , Y are from B [ ] and Z are from C [ ]
Base Cases
Selecting i - th element from A [ ]
Selecting i - th element from B [ ]
Selecting i - th element from C [ ]
i - th elements not selected from any of the arrays
Select the maximum sum from all the possible calls
Driver Code
Given X , Y and Z
Given A [ ]
Given B [ ]
Given C [ ]
Given Size
Function Call
Function to replace each even element by odd and vice - versa in a given array
Traverse array
If current element is even then swap it with odd
Perform Swap
Change the sign
If current element is odd then swap it with even
Perform Swap
Change the sign
Marked element positive
Print final array
Driver Code
Given array arr [ ]
Function Call
A node structure
Function to get the count of half Nodes in a binary tree
2 / \ 7 5 \ \ 6 9 / \ / 1 11 4 Let us create Binary Tree shown in above example
Function to find the minimum cost to reduce given array to a single element by replacing consecutive K array elements
Stores length of arr
If ( N - 1 ) is not multiple of ( K - 1 )
Store prefix sum of the array
Iterate over the range [ 1 , N ]
Update prefixSum [ i ]
dp [ i ] [ j ] : Store minimum cost to merge array elements interval [ i , j ]
L : Stores length of interval [ i , j ]
Iterate over each interval [ i , j ] of length L in in [ 0 , N ]
Stores index of last element of the interval [ i , j ]
If L is greater than K
Update dp [ i ] [ j ]
If ( L - 1 ) is multiple of ( K - 1 )
Update dp [ i ] [ j ]
Return dp [ 0 ] [ N - 1 ]
Driver Code
Function Call
Python3 program for the above approach
Utility function to check if it is possible to move from index 1 to N - 1
Successfully reached end index
memo [ i ] [ j ] is already calculated
Check if there is any index having value of A [ i ] + j - 1 , A [ i ] + j or A [ i ] + j + 1
If A [ k ] > A [ i ] + j + 1 , can 't make a move further
It 's possible to move A[k]
Check is it possible to move from index k having previously taken A [ k ] - A [ i ] steps
If yes then break the loop
Store value of flag in memo
Return memo [ i ] [ j ]
Function to check if it is possible to move from index 1 to N - 1
Stores the memoized state
Initialize all values as - 1
Initially , starting index = 1
Function call
Driver Code
Function Call
Function to find the maximum sum of a subsequence consisting of no K consecutive array elements
Stores states of dp
Stores the prefix sum
Update the prefix sum
Base case for i < K
For indices less than k take all the elements
For i >= K case
Skip each element from i to ( i - K + 1 ) to ensure that no K elements are consecutive
Update the current dp state
dp [ N ] stores the maximum sum
Driver Code
Given array arr [ ]
Function call
Function that finds the value of the Binomial Coefficient C ( n , k )
Stores the value of Binomial Coefficient in bottom up manner
Base Case
Find the value using previously stored values
Return the value of C ( N , K )
Function that count the number of ways to divide N into K integers >= P such that their sum is N
Update the value of N
Find the binomial coefficient recursively
Given K , N , and P
Function to find the minimum operations to make the array Non - increasing
Size of the array
Dp table initialization
dp [ i ] : Stores minimum number of operations required to make subarray { A [ i ] , ... , A [ N ] } non - increasing
Increment the value of j
Add current value to sum
Update the dp tables
Return the answer
Driver Code
A node structure
Iterative Method to count full nodes of binary tree
Base Case
Create an empty queue for level order traversal
Enqueue Root and initialize count
initialize count for full nodes
Enqueue left child
Enqueue right child
2 / \ 7 5 \ \ 6 9 / \ / 1 11 4 Let us create Binary Tree as shown
Function to count the distinct substrings placed consecutively in the given string
Length of the string
If length of the string does not exceed 1
Initialize a DP - table
Stores the distinct substring
Iterate from end of the string
Iterate backward until dp table is all computed
If character at i - th index is same as character at j - th index
Update dp [ i ] [ j ] based on previously computed value
Otherwise
Condition for consecutively placed similar substring
Return the count
Driver Code
Initializing the distance and Next array
No edge between node i and j
Function construct the shortest path between u and v
If there 's no path between  node u and v, simply return  an empty array
Storing the path in a vector
Standard Floyd Warshall Algorithm with little modification Now if we find that dis [ i ] [ j ] > dis [ i ] [ k ] + dis [ k ] [ j ] then we modify next [ i ] [ j ] = next [ i ] [ k ]
We cannot travel through edge that doesn 't exist
Print the shortest path
Driver code
Function to initialise the distance and Next array
Calling Floyd Warshall Algorithm , this will update the shortest distance as well as Next array
Path from node 1 to 3
Path from node 0 to 2
Path from node 3 to 2
Stores the factors of i - th element in v [ i ]
Function to find all the factors of N
Iterate upto sqrt ( N )
Function to return the count of sequences of length K having all terms divisible by its preceding term
Calculate factors of i
Initialize dp [ 0 ] [ i ] = 0 : No subsequence of length 0 ending with i - th element exists
Initialize dp [ 0 ] [ i ] = 1 : Only 1 subsequence of length 1 ending with i - th element exists
Iterate [ 2 , K ] to obtain sequences of each length
Calculate sum of all dp [ i - 1 ] [ vp [ j ] [ k ] ]
vp [ j ] [ k ] stores all factors of j
Store the sum in A [ i ] [ j ]
Sum of all dp [ K ] [ j ] obtain all K length sequences ending with j
Driver code
Function to calculate and return the length of square submatrix with maximum AND value
Extract dimensions
Auxiliary array Initialize auxiliary array
c : Stores the maximum value in the matrix p : Stores the number of elements in the submatrix having maximum AND value
Iterate over the matrix to fill the auxiliary matrix
Find the max element in the matrix side by side
Fill first row and column with 1 's
For every cell , check if the elements at the left , top and top left cells from the current cell are equal or not
Store the minimum possible submatrix size these elements are part of
Store 1 otherwise
Checking maximum value
If the maximum AND value occurs more than once
Update the maximum size of submatrix
Final output
Driver Code
Python3 program to implement the above approach
Function to return smallest power of 2 with N digits
Iterate through all powers of 2
Driver Code
Python3 implementation to find the maximum weighted edge in the simple path between two nodes in N - ary Tree
Depths of Nodes
Parent at every 2 ^ i level
Maximum node at every 2 ^ i level
Graph that stores destinations and its weight
Function to traverse the nodes using the Depth - First Search Traversal
Condition to check if its equal to its parent then skip
DFS Recursive Call
Function to find the ansector
Loop to set every 2 ^ i distance
Loop to calculate for each node in the N - ary tree
Storing maximum edge
Swaping if node a is at more depth than node b because we will always take at more depth
Difference between the depth of the two given nodes
Changing Node B to its parent at 2 ^ i distance
Subtracting distance by 2 ^ i
Take both a , b to its lca and find maximum
Loop to find the maximum 2 ^ ith parent the is different for both a and b
Updating ans
Changing value to its parent
Function to compute the Least common Ansector
Driver code
Undirected tree
Computing LCA
A binary tree Node has data , pointer to left child and a pointer to right child
Function to get the count of full Nodes in a binary tree
Driver code
2 / \ 7 5 \ \ 6 9 / \ / 1 11 4 Let us create Binary Tree as shown
A Dynamic programming based function to count decodings in digit sequence
For base condition "01123" should return 0
Using last two calculated values , calculate for ith index
Change boolean to int
Return the required answer
Driver Code
Function call
Function to find the maximum distance
Set up top row and left column
Pass one : top left to bottom right
Check if there was no " One " Cell
Set up top row and left column
Past two : bottom right to top left
Driver code
Function to return the minimum cost for N iterations
Construct the dp table
1 st row of dp table will be equal to the 1 st of cost matrix
Iterate through all the rows
To iterate through the columns of current row
Initialize val as infinity
To iterate through the columns of previous row
Fill the dp matrix
Returning the minimum value
Driver Code
Number of iterations
Number of tasks
Cost matrix
Function to precompute all the primes upto 1000000 and store it in a set using Sieve of Eratosthenes
Here str ( ) is used for converting int to string
A function to find the minimum number of segments the given string can be divided such that every segment is a prime
Declare a splitdp [ ] array and initialize to - 1
Call sieve function to store primes in primes array
Build the DP table in a bottom - up manner
If the prefix is prime then the prefix will be found in the prime set
If the Given Prefix can be split into Primes then for the remaining string from i to j Check if Prime . If yes calculate the minimum split till j
To check if the substring from i to j is a prime number or not
If it is a prime , then update the dp array
Return the minimum number of splits for the entire string
Driver code
connect nodes at same level using level order traversal
Node class
set nextRight of all nodes of a tree
null marker to represent end of current level
do level order of tree using None markers
next element in queue represents next node at current level
pus left and right children of current node
if queue is not empty , push NULL to mark nodes at this level are visited
Driver program to test above functions .
Constructed binary tree is 10 / \ 8 2 / \ 3 90
Populates nextRight pointer in all nodes
Let us check the values of nextRight pointers
print level by level
print inorder
Python3 implementation of the approach
Function to find the modular - inverse
While power > 1
Updating s and a
Updating power
Return the final answer
Function to return the count of ways
To store the final answer
To store pre - computed factorials
Computing factorials
Loop to find the occurrences of x and update the ans
Multiplying the answer by ( n - 1 ) !
Return the final answer
Driver code
Function to find the required subsequence
Sort the array
Keep a count of the length of the subsequence and the previous element Set the initial values
Maximum length of the subsequence and the last element
Run a loop for every element
Check for all the divisors
If the element is a divisor and the length of subsequence will increase by adding j as previous element of i
Increase the count
Update the max count
Get the last index of the subsequence
Print the element
Move the index to the previous element
Driver code
Function to compute minimum number of points which cover all segments
Sort the list of tuples by their second element .
To store the solution
Iterate over all the segments
Get the start point of next segment
Loop over all those segments whose start point is less than the end point of current segment
Print the possibles values of M
Driver Code
Starting points of segments
Ending points of segments
Insert ranges in points [ ]
Function Call
Python3 implementation of the approach
Function to find the minimum required sum using dynamic programming
dp [ i ] [ j ] = minimum val of accommodation till j 'th index of the string  using i+1 number of buckets.  Final ans will be in dp[n-1][K-1]  Initialise dp with all states as 0
Corner cases
Filling first row , if only 1 bucket then simple count number of zeros and ones and do the multiplication
If k = 0 then this arrangement is not possible
If no arrangement is possible then our answer will remain INT_MAX so return - 1
Driver code
K buckets
Python3 implementation of the approach
Array to store bit - wise prefix count
Function to find the prefix sum
Loop for each bit
Loop to find prefix count
Function to answer query
To store the answer
Loop for each bit
To store the number of variables with ith bit set
Condition for ith bit of answer to be set
Driver code
Function to traverse the DAG and apply Dynamic Programming to find the longest path
Mark as visited
Traverse for all its children
If not visited
Store the max of the paths
Function to add an edge
Function that returns the longest path
Dp array
Visited array to know if the node has been visited previously or not
Call DFS for every unvisited vertex
Traverse and find the maximum of all dp [ i ]
Driver Code
Example - 1
Recursive function to get the largest subset
Base case when it exceeds
If the state has been visited previously
Initialize
No elements in subset yet
First state which includes current index
Second state which does not include current index
If the rectangle fits in , then do not include the current index in subset
First state which includes current index
Second state which does not include current index
Function to get the largest subset
Sort the array
Get the answer
Driver code
( height , width ) pairs
Python3 implementation of the above approach
to compute least prime divisor of i
Function that returns the maximum length subsequence such that adjacent elements have a common factor .
Initialize dp array with 1.
p has appeared at least once .
Update latest occurrence of prime p .
Take maximum value as the answer .
Driver code
Helper class that allocates a new node with the given data and None left and right pointers .
This function returns the leftmost child of nodes at the same level as p . This function is used to getNExt right of p 's right child  If right child of is None then this can also be used for the left child 
Traverse nodes at p ' s ▁ level ▁ and ▁ find ▁ ▁ ▁ and ▁ return ▁ the ▁ first ▁ node ' s first child
If all the nodes at p 's level are   leaf nodes then return None 
Sets nextRight of all nodes of a tree with root as p
Set nextRight for root
set nextRight of all levels one by one
Connect all childrem nodes of p and children nodes of all other nodes at same level as p
Set the nextRight pointer for p 's left child 
If q has right child , then right child is nextRight of p and we also need to set nextRight of right child
Set nextRight for other nodes in pre order fashion
start from the first node of next level
Driver Code
Constructed binary tree is 10 / \ 8 2 / \ 3 90
Populates nextRight pointer in all nodes
For maximum length of input string
Declaring the DP table
Function to calculate the number of valid assignments
Return 1 if both subsequences are balanced
Increment the count if it is an opening bracket
Decrement the count if it a closing bracket
Driver code
Initial value for c_x and c_y is zero
Utility function to count odd numbers in ith row of Pascals 's triangle
Initialize count as zero
Return 2 ^ count
Function to generate gould 's Sequence
loop to generate gould 's  Sequence up to n
Driver code
Get n
Function call
N can be max 10 ^ 18 and hence digitsum will be 162 maximum .
If sum_so_far equals to given sum then return 1 else 0
Our constructed number should not become greater than N .
If tight is true then it will also be true for ( i + 1 ) digit .
Driver code
lds ( ) returns the length of the longest dividing subsequence in arr [ ] of size n
Compute optimized lds values in bottom up manner
Return maximum value in lds [ ]
Driver Code
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ] memoization applied in recursive solution
base case
if the same state has already been computed
if equal , then we store the value of the function call
store it in arr to avoid further repetitive work in future function calls
store it in arr to avoid further repetitive work in future function calls
Driver Code
Function to calculate the probabilities
Array where row represent the pass and the column represents the points on the line
Initially the person can reach left or right with one move
Calculate probabilities for N - 1 moves
When the person moves from ith index in right direction when i moves has been done
When the person moves from ith index in left direction when i moves has been done
Print the arr
Driver code
Python3 implementation of the approach
Function to perform BFS traversal to find minimum number of step needed to reach x from K
Calculate GCD of d1 and d2
If position is not reachable return - 1
Queue for BFS
Hash Table for marking visited positions
we need 0 steps to reach K
Mark starting position as visited
stp is the number of steps to reach position s
if position not visited add to queue and mark visited
Driver Code
Python 3 program to find no . of ways to fill a 3 xn board with 2 x1 dominoes .
Driver Code
Recursive function to find the n - th element of sequence
Driver code
A binary tree node
Sets the nextRight of root and calls connectRecur ( ) for other nodes
Set the nextRight for root
Set the next right for rest of the nodes ( other than root )
Set next right of all descendents of p . Assumption : p is a compete binary tree
Base case
Set the nextRight pointer for p 's   left child 
Set the nextRight pointer for p 's right  child p.nextRight will be None if p is   the right most child at its level 
Set nextRight for other nodes in pre order fashion
Driver Code
Constructed binary tree is 10 / \ 8 2 / 3
Populates nextRight pointer in all nodes
Let us check the values of nextRight pointers
Number of ways in which participant can take part .
Base condition
A participant can choose to consider ( 1 ) Remains single . Number of people reduce to ( x - 1 ) ( 2 ) Pairs with one of the ( x - 1 ) others . For every pairing , number of people reduce to ( x - 2 ) .
Driver code
Python program to find Number of ways in which participant can take part .
Driver code
Refer https : www . geeksforgeeks . org / longest - repeating - subsequence / for complete code . This function mainly returns LCS ( str , str ) with a condition that same characters at same index are not considered .
Create and initialize DP table
Fill dp table ( similar to LCS loops )
If characters match and indices are not same
If characters do not match
Python3 program to find number of ways to arrange items under given constraint
method returns number of ways with which items can be arranged
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
declare dp array to store result up to ith colored item
variable to keep track of count of items considered till now
loop over all different colors
populate next value using current value and stated relation
return value stored at last index
Driver code
Python3 implementation to count minimum cells required to be covered to reach destination
function to count minimum cells required to be covered to reach destination
to store min cells required to be covered to reach a particular cell
base case
building up the dp [ ] [ ] matrix
dp [ i ] [ j ] != MAX denotes that cell ( i , j ) can be reached from cell ( 0 , 0 ) and the other half of the condition finds the cell on the right that can be reached from ( i , j )
the other half of the condition finds the cell right below that can be reached from ( i , j )
it true then cell ( m - 1 , n - 1 ) can be reached from cell ( 0 , 0 ) and returns the minimum number of cells covered
cell ( m - 1 , n - 1 ) cannot be reached from cell ( 0 , 0 )
Driver program to test above
Python3 to find largest bitonic sequence such that
utility Binary search
function to find LIS in reverse form
leN = 1 it will always poto empty location
new smallest value
arr [ i ] wants to extend largest subsequence
arr [ i ] wants to be a potential candidate of future subsequence It will replace ceil value in tailIndices
put LIS into vector
function for finding longest bitonic seq
find LIS of array 1 in reverse form
reverse res to get LIS of first array
reverse array2 and find its LIS
print result
Driver program
Python 3 program to find maximum number of ones after one flipping in Binary Matrix
Return number of ones in square submatrix of size k x k starting from ( x , y )
Return maximum number of 1 s after flipping a submatrix
Precomputing the number of 1 s
Finding the maximum number of 1 s after flipping
Driver code
Python3 implementation to find the level having Maximum number of Nodes Importing Queue
Helper class that allocates a new node with the given data and None left and right pointers .
function to find the level having Maximum number of Nodes
Current level
Maximum Nodes at same level
Level having Maximum Nodes
Count Nodes in a level
If it is Maximum till now Update level_no to current level
Pop complete current level
Increment for next level
Driver Code
binary tree formation 2
/ \
1 3
/ \ \
4 6 8
/
5
A tabulation based solution in Python3
driver program
Returns the number of arrangements to form 'n
Base case
Python program to find maximum points that can be collected by two persons in a matrix .
To store points collected by Person P1 when he / she begins journy from start and from end .
To store points collected by Person P2 when he / she begins journey from start and from end .
Table for P1 's journey from  start to meeting cell
Table for P1 's journey from  end to meet cell
Table for P2 's journey from start to meeting cell
Table for P2 's journey from end to meeting cell
Now iterate over all meeting positions ( i , j )
Function to find the length of longest subsequence
Initialize the dp [ ] array with 1 as a single element will be of 1 length
Start traversing the given array
Compare with all the previous elements
If the element is consecutive then consider this subsequence and update dp [ i ] if required .
Longest length will be the maximum value of dp array .
Driver code
Longest subsequence with one difference is { 1 , 2 , 3 , 4 , 3 , 2 }
A dynamic programming based function to find nth Catalan number
Table to store results of subproblems
Fill entries in catalan [ ] using recursive formula
Return last entry
Returns count of ways to connect n points on a circle such that no two connecting lines cross each other and every point is connected with one other point .
Throw error if n is odd
Else return n / 2 'th Catalan number
Driver Code
Python3 program to count number of ways to arrange three types of balls such that no two balls of same color are adjacent to each other
table to store to store results of subproblems
Returns count of arrangements where last placed ball is ' last ' . ' last ' is 0 for ' p ' , 1 for ' q ' and 2 for 'r
if number of balls of any color becomes less than 0 the number of ways arrangements is 0.
If last ball required is of type P and the number of balls of P type is 1 while number of balls of other color is 0 the number of ways is 1.
Same case as above for ' q ' and 'r
If this subproblem is already evaluated
if last ball required is P and the number of ways is the sum of number of ways to form sequence with ' p - 1' P balls , q Q Balls and r R balls ending with Q and R .
Same as above case for ' q ' and 'r
( last == 2 )
Returns count of required arrangements
Three cases arise : Last required balls is type P Last required balls is type Q Last required balls is type R
Driver Code
Function to count derangements
Base cases
countDer ( n ) = ( n - 1 ) [ countDer ( n - 1 ) + der ( n - 2 ) ]
Driver Code
Function to count derangements
Create an array to store counts for subproblems
Base cases
Fill der [ 0. . n ] in bottom up manner using above recursive formula
Return result for n
Driver Code
Returns count of solutions for given rhs and coefficients coeff [ 0. . . n - 1 ]
Create and initialize a table to store results of subproblems
Fill table in bottom up manner
Driver Code
Function to print all distinct palindrome sub - strings of s
table for storing results ( 2 rows for odd - and even - length palindromes
Find all sub - string palindromes from the given input string insert ' guards ' to iterate easily over s s = " @ " + s + " "
rp = 0 length of 'palindrome radius
Attempt to expand palindrome centered at i
Assigning the found palindromic length to odd / even length array
remove guards
Put all obtained palindromes in a hash map to find only distinct palindrome
printing all distinct palindromes from hash map
Driver program
Python program to print largest value on each level of binary tree
Helper function that allocates a new node with the given data and None left and right pointers .
put in the data
function to find largest values
if tree is empty
push root to the queue ' q '
node count for the current level
if true then all the nodes of the tree have been traversed
maximum element for the current level
get the front element from 'q  
remove front element from 'q  
if true , then update 'max  
if left child exists
if right child exists
print maximum element of current level
Driver Code
Let us construct the following Tree 4 / \ 9 2 / \ \ 3 5 7
Function call
Tree node
Set next of p and all descendants of p by traversing them in reverse Inorder
The first visited node will be the rightmost node next of the rightmost node will be NULL
First set the next pointer in right subtree
Set the next as previously visited node in reverse Inorder
Change the prev for subsequent node
Finally , set the next pointer in left subtree
UTILITY FUNCTIONS Helper function that allocates a new node with the given data and None left and right pointers .
Driver Code Constructed binary tree is 10 / \ 8 12 / 3
Populates nextRight pointer in all nodes
Let us see the populated values
- 1 is printed if there is no successor
The main function that returns the max possible product
n equals to 2 or 3 must be handled explicitly
Keep removing parts of size 3 while n is greater than 4
Keep multiplying 3 to res
The last part multiplied by previous parts
Driver program to test above functions
The main function that returns number of ways to get sum ' x ' with ' n ' dice and ' m ' with m faces .
Create a table to store results of subproblems . One extra row and column are used for simpilicity ( Number of dice is directly used as row index and sum is directly used as column index ) . The entries in 0 th row and 0 th column are never used .
Table entries for only one dice
Fill rest of the entries in table using recursive relation i : number of dice , j : sum
Return value
Driver code
* Count ways * * @ param f * @ param d * @ param s * @ return
Create a table to store results of subproblems . One extra row and column are used for simpilicity ( Number of dice is directly used as row index and sum is directly used as column index ) . The entries in 0 th row and 0 th column are never used .
Table entries for no dices If you do not have any data , then the value must be 0 , so the result is 1
Iterate over dices
Iterate over sum
The result is obtained in two ways , pin the current dice and spending 1 of the value , so we have mem [ i - 1 ] [ j - 1 ] remaining combinations , to find the remaining combinations we would have to pin the values ? ? above 1 then we use mem [ i ] [ j - 1 ] to sum all combinations that pin the remaining j - 1 's. But there is a way, when "j-f-1> = 0" we would be adding  extra combinations, so we remove the combinations that only pin the extrapolated dice face and  subtract the extrapolated combinations.
Driver code
A Naive recursive program to find minimum number insertions needed to make a string palindrome
Recursive function to find minimum number of insertions
Base Cases
Check if the first and last characters are same . On the basis of the comparison result , decide which subrpoblem ( s ) to call
Driver Code
A utility function to get max of two egers
Returns the length of the longest palindromic subsequence in seq
Base Case 1 : If there is only 1 character
Base Case 2 : If there are only 2 characters and both are same
If the first and last characters match
If the first and last characters do not match
Driver Code
Python3 program to print smallest element in each level of binary tree .
A Binary Tree Node
return height of tree
Inorder Traversal Search minimum element in each level and store it into vector array .
height of tree for the size of vector array
vector for store all minimum of every level
save every level minimum using inorder traversal
print every level minimum
Utility function to create a new tree node
Driver code
Let us create binary tree shown in below diagram
7 / \ 6 5 / \ / \ 4 3 2 1
Python3 program to prminimum element in each level of binary tree . Importing Queue
Utility class to create a new tree node
return height of tree p
Iterative method to find every level minimum element of Binary Tree
Base Case
Create an empty queue for level order traversal
put the root for Change the level
for go level by level
for check the level
Get get of queue
if node == None ( Means this is boundary between two levels )
here queue is empty represent no element in the actual queue
increment level
Reset min for next level minimum value
get Minimum in every level
Enqueue left child
Enqueue right child
Driver Code
Let us create binary tree shown in above diagram
7 / \ 6 5 / \ / \ 4 3 2 1
Python3 implementation of the above approach
Function to find the count
Initialize hash for both strings
hash the frequency of letters of str1
hash the frequency of letters of str2
Find the count of str2 constructed from str1
Return answer
Driver code
Check if the character is vowel or not
Returns true if ' typed ' is a typed name given str
Traverse through all characters of str
If current characters do not match
If not vowel , simply move ahead in both
Count occurrences of current vowel in str
Count occurrence of current vowel in typed
Driver code
Python3 program to Get Level of a node in a Binary Tree Helper function that allocates a new node with the given data and None left and right pairs .
Constructor to create a new node
Helper function for getLevel ( ) . It returns level of the data if data is present in tree , otherwise returns 0
Returns level of given data value
Driver Code
Let us construct the Tree shown in the above figure
Function takes two parameter
Break down sentence by ' ▁ ' spaces and store each individual word in a different list
A new string to store the result
Creating the censor which is an asterisks " * " text of the length of censor word
count variable to access our word_list
Iterating through our list of extracted words
changing the censored word to created asterisks censor
join the words
Driver code
Python program for Finite Automata Pattern searching Algorithm
If the character c is same as next character in pattern , then simply increment state
Start from the largest possible value and stop when you find a prefix which is also suffix
This function builds the TF table which represents Finite Automata for a given pattern
Prints all occurrences of pat in txt
Process txt over FA .
Driver program to test above function
Function to find length of longest substring containing '1
Count the number of contiguous 1 's
Driver Code
Function to generate all possible string by replacing the characters with mapped symbols
Base Case
Function call with the P - th character not replaced
Replace the P - th character
Function call with the P - th character replaced
Driver Code
Function Call
Python3 program for the above approach
Function to check if S contains any pair of adjacent characters that are same
Traverse the String S
If current pair of adjacent characters are the same
Return true
Utility function to find the minimum number of swaps of pair of characters required to make all pairs of adjacent characters different
Check if the required String is formed already
Traverse the String S
Swap the characters at i and j position
Swap for Backtracking Step
Function to find the minimum number of swaps of pair of characters required to make all pairs of adjacent characters different
Stores the resultant minimum number of swaps required
Function call to find the minimum swaps required
Prvar the result
Driver code
Function to count the number of 0 s lying between the two 1 s for each query
Stores count of 0 ' s ▁ that ▁ are ▁ ▁ right ▁ to ▁ the ▁ most ▁ recent ▁ 1' s
Stores count of 0 ' s ▁ that ▁ are ▁ ▁ left ▁ to ▁ the ▁ most ▁ recent ▁ 1' s
Stores the count of zeros in a prefix / suffix of array
Stores the count of total 0 s
Traverse the string S
If current character is '1
Otherwise
Update the rightBound [ i ]
Update count and total to 0
Traverse the string S in reverse manner
If current character is '1
Otherwise
Update the leftBound [ i ]
Traverse given query array
Update the value of count
Print the count as the result to the current query [ L , R ]
Driver Code
Python3 program to find closest value in Binary search Tree
Helper function that allocates a new node with the given data and None left and right poers .
utility function to return level of given node
extra None is appended to keep track of all the nodes to be appended before level is incremented by 1
Driver Code
create a binary tree
return level of node
Struct binary tree node
Function to check if the is palindrome or not
Function to find the lexicographically smallest palindromic path in the Binary Tree
Base case
Append current node 's  data to the string
Check if a node is leaf or not
Check for the 1 st Palindromic Path
Store lexicographically the smallest palindromic path
Recursively traverse left subtree
Recursively traverse right subtree
Function to get smallest lexographical palindromic path
Variable which stores the final result
Function call to compute lexicographically smallest palindromic Path
Driver Code
Construct binary tree
Python3 program to find the mirror node in Binary tree
A binary tree node has data , reference to left child and a reference to right child
recursive function to find mirror
If any of the node is none then node itself and decendent have no mirror , so return none , no need to further explore !
if left node is target node , then return right 's key (that is mirror) and vice versa
first recur external nodes
if no mirror found , recur internal nodes
interface for mirror search
Driver
target node whose mirror have to be searched
python 3 program for the above approach
Function to check if the current string is balanced or not
For every character , check if there exists uppercase as well as lowercase characters
Function to find smallest length substring in the given string which is balanced
Store frequency of lowercase characters
Stores frequency of uppercase characters
Count frequency of characters
Mark those characters which are not present in both lowercase and uppercase
Initialize the frequencies back to 0
Marks the start and end of current substring
Marks the start and end of required substring
Stores the length of smallest balanced substring
Remove all characters obtained so far
Remove extra characters from front of the current substring
If substring ( st , i ) is balanced
No balanced substring
Store answer string
Driver Code
Given string
Function to return the minimum number of operation
Storing data
Initialize both arrays
Stores the index of character
Filling str1array , convChar and hashmap convertMap .
Not possible to convert
Calculate result Initializing return values
Iterating the character from the end
Increment the number of operations
Not possible to convert
To check whether the final element has been added in set S or not .
Check if v1 [ j ] is present in hashmap or not
Already converted then then continue
Not possible to convert
Print the result
Given strings
Function call
Helper class that allocates a new node with the given data and None left and right pointers .
Sets maxSize to size of largest subtree with identical left and right . maxSize is set with size of the maximum sized subtree . It returns size of subtree rooted with current node . This size is used to keep track of maximum size .
string to store structure of left and right subtrees
traverse left subtree and finds its size
traverse right subtree and finds its size
if left and right subtrees are similar update maximum subtree if needed ( Note that left subtree may have a bigger value than right and vice versa )
append left subtree data
append current node data
append right subtree data
function to find the largest subtree having identical left and right subtree
Driver Code
Let us construct the following Tree 50 / \ 10 60 / \ / \ 5 20 70 70 / \ / \ 65 80 65 80
Initialize set to see if all the possible permutations are present in the min length string
To keep min length string
Generate the required string
Iterate over all possible character
Append to make a new string
If the new string is not visited
Add in set
Call the dfs function on the last d characters
Base case
Append '0' n - 1 times
Call the DFS Function
Driver Code
Python3 program to check if a given string is a scrambled form of another string
Strings of non - equal length cant ' be scramble strings
Empty strings are scramble strings
Equal strings are scramble strings
Check for the condition of anagram
Check if S2 [ 0. . . i ] is a scrambled string of S1 [ 0. . . i ] and if S2 [ i + 1. . . n ] is a scrambled string of S1 [ i + 1. . . n ]
Check if S2 [ 0. . . i ] is a scrambled string of S1 [ n - i ... n ] and S2 [ i + 1. . . n ] is a scramble string of S1 [ 0. . . n - i - 1 ]
If none of the above conditions are satisfied
Driver Code
Function to return the smallest number possible
Arrays to store odd and even digits in the order of their appearance in the given string
Insert the odd and even digits
pointer to odd digit
pointer to even digit
In case number of even and odd digits are not equal If odd digits are remaining
If even digits are remaining
Removal of leading 0 's 
Driver Code
Function to convert BCD to Decimal
Iterating through the bits backwards
Forming the equivalent digit ( 0 to 9 ) from the group of 4.
Reinitialize all variables and compute the number
Update the answer
Reverse the number formed .
Driver Code
Function Call
Utility function to create a new node
This function increments count by number of single valued subtrees under root . It returns true if subtree under root is Singly , else false .
Return False to indicate None
Recursively count in left and right subtress also
If any of the subtress is not singly , then this cannot be singly
If left subtree is singly and non - empty , but data doesn 't match
same for right subtree
If none of the above conditions is True , then tree rooted under root is single valued , increment count and return true
This function mainly calss countSingleRec ( ) after initializing count as 0
initialize result
Recursive function to count
Let us construct the below tree 5 / \ 4 5 / \ \ 4 4 5
Function to Count minimum swap
Counter to count minimum swap
A loop which run in half string from starting
Left pointer
Right pointer
A loop which run from right pointer to left pointer
if both char same then break the loop if not same then we have to move right pointer to one step left
it denotes both pointer at same position and we don 't  have sufficient char to make  palindrome string
Driver Code
Length of string
Function calling
Function to return the bitwise XOR of all the binary strings
Get max size and reverse each string Since we have to perform XOR operation on bits from right to left Reversing the string will make it easier to perform operation from left to right
Add 0 s to the end of strings if needed
Perform XOR operation on each bit
Reverse the resultant string to get the final string
Return the final string
Driver code
stick [ ] stores the count of matchsticks required to represent the alphabets
number [ ] stores the count of matchsticks required to represent the numerals
Function that return the count of sticks required to represent the given string
For every char of the given string
Add the count of sticks required to represent the current character
Driver code
Function call to find the count of matchsticks
Python3 implementation of the above approach
Converting string to array
Delete counters for each to count the deletes
Counters to keep track of characters left from each type
Queue to simulate the process
Initializing the queue
Looping till at least 1 digit is left from both the type
If there is a floating delete for current character we will delete it and move forward otherwise we will increase delete counter for opposite digit
If 0 are left then answer is 0 else answer is 1
Driver Code
Input String
Length of String
Printing answer
Utility class to create a new node
This function finds closest leaf to root . This distance is stored at * minDist .
base case
If this is a leaf node , then check if it is closer than the closest so far
Recur for left and right subtrees
This function finds if there is closer leaf to x through parent node .
Base cases
Search x in left subtree of root
If left subtree has x
Find closest leaf in right subtree
Search x in right subtree of root
If right subtree has x
Find closest leaf in left subtree
Returns minimum distance of a leaf from given node x
Initialize result ( minimum distance from a leaf )
Find closest leaf down to x
See if there is a closer leaf through parent
Driver Code
Let us create Binary Tree shown in above example
Python program to find closest leaf of a given key in binary tree
A binary tree node
A utility function to find distance of closest leaf of the tree rooted under given root
Base Case
Return minum of left and right plus one
Returns destance of the closes leaf to a given key k The array ancestors us used to keep track of ancestors of current node and ' index ' is used to keep track of current index in 'ancestors[i]  
Base Case
if key found
Find closest leaf under the subtree rooted with given key
Traverse ll ancestors and update result if any parent node gives smaller distance
if key node found , store current node and recur for left and right childrens
The main function that return distance of the clses key to key '. It mainly uses recursive function findClosestUtil() to find the closes distance
Create an arrray to store ancestors Assumption : Maximum height of tree is 100
Let us construct the BST shown in the above figure
Function to return the required time
To store the resultant time
Hours are stored in h as integer
Minutes are stored in m as integer
Reverse of h
Reverse of h as a string
If MM < reverse of ( HH )
0 is added if HH < 10
0 is added if rev_h < 10
Increment hours
Reverse of the hour after incrementing 1
0 is added if HH < 10
0 is added if rev_h < 10
Driver code
Function to return the count of valid sub - Strings
Variable ans to store all the possible subStrings Initialize its value as total number of subStrings that can be formed from the given String
Stores recent index of the characters
If character is a update a 's index  and the variable ans
If character is b update b 's index  and the variable ans
If character is c update c 's index  and the variable ans
Driver code
Python3 program to implement above approach
To store the size of string and number of queries
To store parent and rank of ith place
To store maximum interval
Function for initialization
Function to find parent
Function to make union
Power function to calculate a raised to m1 under modulo 10000007
Function to take maxmium interval
Function to find different possible strings
make union of all chracters which are meant to be same
find number of different sets formed
return the required answer
Driver Code
queries
Iterative level order traversal based method to search in Binary Tree importing Queue
Helper function that allocates a new node with the given data and None left and right pointers .
An iterative process to search an element x in a given binary tree
Base Case
Create an empty queue for level order traversal
Enqueue Root and initialize height
Queue based level order traversal
See if current node is same as x
Remove current node and enqueue its children
Driver Code
Python3 program to populate inorder traversal of all nodes
A wrapper over populateNextRecur
The first visited node will be the rightmost node next of the rightmost node will be NULL
Set next of all descendants of p by traversing them in reverse Inorder
First set the next pointer in right subtree
Set the next as previously visited node in reverse Inorder
Change the prev for subsequent node
Finally , set the next pointer in right subtree
Function that returns true is str is valid
Assuming the string is binary If any two consecutive characters are equal then the string is invalid
If the string is alternating
Driver code
This function checks if there exists some character which appears in all K length substrings
Iterate over all possible characters
stores the last occurrence
set answer as true
No occurrence found of current character in first substring of length K
Check for every last substring of length K where last occurr - ence exists in substring
If last occ is not present in substring
current character is K amazing
This function performs binary search over the answer to minimise it
Check if answer is found try to minimise it
Driver Code
Pre - computed values of segment used by digit 0 to 9.
Check if it is possible to display the number
Finding sum of the segments used by each digit of the number
Driver Code
Function call to print required answer
A binary tree node has data , left child and right child
Construct to create a newNode
iterative process to search an element x in a given binary tree
Base Case
Create an empty stack and append root to it
Do iterative preorder traversal to search x
See the top item from stack and check if it is same as x
append right and left children of the popped node to stack
Driver Code
check whether the first string can be converted to the second string by increasing the ASCII value of prefix string of first string
length of two strings
If lengths are not equal
store the difference of ASCII values
difference of first element
traverse through the string
the ASCII value of the second string should be greater than or equal to first string , if it is violated return false .
store the difference of ASCII values
the difference of ASCII values should be in descending order
if the difference array is not in descending order
if all the ASCII values of characters of first string is less than or equal to the second string and the difference array is in descending order , return true
Driver code
create two strings
check whether the first string can be converted to the second string
check if a number is a palindrome
Function to return required count of palindromes
Range [ L , R ]
Upper limit
count odd length palindromes
if s = '1234
then , t = '1234321
count even length palindromes
if s = '1234
then , t = '12344321
Return count of super - palindromes
Driver program
function call to get required answer
Function that returns the N - th character
initially null string
starting integer
add integers in string
one digit numbers added
more than 1 digit number , generate equivalent number in a string s1 and concatenate s1 into s .
add the number in string
reverse the string
attach the number
if the length exceeds N
Driver Code
Function that counts all the sub - strings of length ' k ' which have all identical characters
count of sub - strings , length , initial position of sliding window
dictionary to store the frequency of the characters of sub - string
increase the frequency of the character and length of the sub - string
if the length of the sub - string is greater than K
remove the character from the beginning of sub - string
if the length of the sub string is equal to k and frequency of one of its characters is equal to the length of the sub - string i . e . all the characters are same increase the count
display the number of valid sub - strings
Driver code
Python 3 program to replace space with -
Get the String
Traverse the string character by character .
Changing the ith character to ' - ' if it 's a space.
Print the modified string .
Python program to find minimum operation require to make first and last character same
Function to find minimum operation require to make first and last character same
Base conditions
If answer found
If string is already visited
Decrement ending index only
Increment starting index only
Increment starting index and decrement index
Store the minimum value
Driver code
Function call
Function to check if any permutation of a large number is divisible by 8
Less than three digit number can be checked directly .
check for the reverse of a number
Stores the Frequency of characters in the n .
Iterates for all three digit numbers divisible by 8
stores the frequency of all single digit in three - digit number
check if the original number has the digit
when all are checked its not possible
Driver Code
Function to find the new string thus formed by removing characters
new string
Remove characters until the string is empty
Traverse to find the smallest character in the first k characters
append the smallest character
removing the lexicographically smallest character from the string
Driver Code
A binary tree node
For inorder traversal
Removes all nodes with only one child and returns new root ( note that root may change )
If current nodes is a half node with left child None then it 's right child is returned and   replaces it in the given tree
if current nodes is a half node with right child NULL right , then it 's right child is  returned and replaces it in the given tree 
Driver Program
Python3 program palindrome by swapping only one character
counts the number of differences which prevents the string from being palindrome .
keeps a record of the characters that prevents the string from being palindrome .
loops from the start of a string till the midpoint of the string
difference is encountered preventing the string from being palindrome
3 rd differences encountered and its no longer possible to make is palindrome by one swap
record the different character
store the different characters
its already palindrome
only one difference is found
if the middleChar matches either of the difference producing characters , return true
two differences are found
if the characters contained in the two sets are same , return true
Driver Code
utility function
convert each char to ASCII value
Convert ASCII value to binary
Driver Code
Python3 program to print all permutations of a string in sorted order .
Calculating factorial of a number
Method to find total number of permutations
Building Map to store frequencies of all characters .
Traversing map and finding duplicate elements .
Start traversing from the end and find position ' i - 1' of the first character which is greater than its successor
Finding smallest character after ' i - 1' and greater than temp [ i - 1 ]
Swapping the above found characters .
Sort all digits from position next to ' i - 1' to end of the string
Print the String
Sorting String
Print first permutation
Finding the total permutations
Driver Code
constructor to create a new node
A utility function swap left node and right node of tree of every k 'th level 
Base Case
If current level + 1 is present in swap vector then we swap left and right node
Recur for left and right subtree
This function mainly calls recursive function swapEveryKLevelUtil
Call swapEveryKLevelUtil function with initial level as 1
Method to find the inorder tree travesal
1 / \ 2 3 / / \ 4 7 8
Function which computes the sequence
length of input string
checking for space
calculating index for each character
output sequence
storing the sequence in array
function to calculate length of longest uncommon subsequence
creating an unordered map to map strings to their frequency
traversing all elements of vector strArr
Creating all possible subsequences , i . e 2 ^ n
( ( i >> j ) & 1 ) determines which character goes into t
If common subsequence is found , increment its frequency
traversing the map
if frequency equals 1
input strings
Function to round the number to the nearest number having one 's digit 0
Last character is 0 then return the original string
If last character is 1 or 2 or 3 or 4 or 5 make it 0
Process carry
Return final string
Driver code
Function call
Function to check even or odd .
Loop to traverse number from LSB
We ignore trailing 0 s after dot
If it is ' . ' we will check next digit and it means decimal part is traversed .
If digit is divisible by 2 means even number .
Driver Function
Python 3 Program to find minimum cost to construct a string
Initially all characters are un - seen
Marking seen characters
Count total seen character , and that is the cost
Driver Code
s is the string that needs to be constructed
utility that allocates a newNode with the given key
Function to store counts of different root to leaf path lengths in hash map m .
Base condition
If leaf node reached , increment count of path length of this root to leaf path .
Recursively call for left and right subtrees with path lengths more than 1.
A wrapper over pathCountUtil ( )
create an empty hash table
Recursively check in left and right subtrees .
Print all path lenghts and their counts .
Driver Code
Function to check whether it will stay inside or come out
marks all the positions that is visited
Initial starting point
initial assumption is it comes out
runs till it is inside or comes out
if the movement is towards left then we move left . The start variable and mark that position as visited if not visited previously . Else we break out
It will be inside forever
If the movement is towards right , then we move right . The start variable and mark that position as visited if not visited previously else we break out
it will be inside forever
Driver code
A iterative function that removes consecutive duplicates from string S
We don 't need to do anything for  empty or single character string.
j is used to store index is result string ( or index of current distinct character )
Traversing string
If current character S [ i ] is different from S [ j ]
Driver Code
function to simplify a Unix - styled absolute path
using vector in place of stack
forming the current directory .
if " . . " , we pop .
do nothing ( added for better understanding . )
push the current directory into the vector .
forming the ans
vector is empty
absolute path which we have to simplify .
Python 3 program to find the length of the smallest substring consisting of maximum distinct characters
Find maximum distinct characters in any string
Initialize all character 's  count with 0
Increase the count in array if a character is found
size of given string
Find maximum distinct characters in any string
result
Brute force approach to find all substrings
We have to check here both conditions together 1. substring ' s ▁ distinct ▁ characters ▁ is ▁ equal ▁ ▁ to ▁ maximum ▁ distinct ▁ characters ▁ ▁ 2 . ▁ substring ' s length should be minimum
Driver Code
Input String
Python3 program to evaluate value of an expression .
Evaluates boolean expression and returns the result
Traverse all operands by jumping a character after every iteration .
If operator next to current operand is AND .
If operator next to current operand is OR .
If operator next to current operand is XOR ( Assuming a valid input )
Driver code
Returns - 1 if all characters of str are unique . Assumptions : ( 1 ) str contains only characters from ' a ' to ' z ' ( 2 ) integers are stored using 32 bits
An integer to store presence / absence of 26 characters using its 32 bits .
If bit corresponding to current character is already set
set bit in checker
Driver code
collection of letters
function to check for a Pangrammatic Lipogram
variable to keep count of all the letters not found in the string
traverses the string for every letter of the alphabet
character not found in string then increment count
Driver program to test above function
Function to print nth permutation using next_permute ( )
Sort the string in lexicographically ascending order
Keep iterating until we reach nth position
check for nth iteration
print string after nth iteration
next_permutation method implementation
Driver Code
Python 3 program to split an alphanumeric string using STL
Driver code
Function to print all sub strings
Pick starting point in outer loop and lengths of different strings for a given starting point
Driver program to test above function
Python program for the above approach
outermost for loop this is for the selection of starting point
2 nd for loop is for selection of ending point
3 rd loop is for printing from starting point to ending point
changing the line after printing from starting point to ending point
Driver Code
calling the method to print the substring
Recursive function to calculate sum of maximum tip order taken by X and Y
When all orders have been taken
When X cannot take more orders
When Y cannot take more orders
When both can take order calculate maximum out of two
Driver code
Structure to store information of a suffix
To store original index
To store ranks and next rank pair
This is the main function that takes a string ' txt ' of size n as an argument , builds and return the suffix array for the given string
A structure to store suffixes and their indexes
Store suffixes and their indexes in an array of structures . The structure is needed to sort the suffixes alphabatically and maintain their old indexes while sorting
Sort the suffixes using the comparison function defined above .
At his point , all suffixes are sorted according to first 2 characters . Let us sort suffixes according to first 4 characters , then first 8 and so on
This array is needed to get the index in suffixes [ ] from original index . This mapping is needed to get next suffix .
Assigning rank and index values to first suffix
Assigning rank to suffixes
If first rank and next ranks are same as that of previous suffix in array , assign the same new rank to this suffix
Otherwise increment rank and assign
Assign next rank to every suffix
Sort the suffixes according to first k characters
Store indexes of all sorted suffixes in the suffix array
Return the suffix array
To construct and return LCP
To store LCP array
An auxiliary array to store inverse of suffix array elements . For example if suffixArr [ 0 ] is 5 , the invSuff [ 5 ] would store 0. This is used to get next suffix string from suffix array .
Fill values in invSuff [ ]
Initialize length of previous LCP
Process all suffixes one by one starting from first suffix in txt [ ]
If the current suffix is at n - 1 , then we dont have next substring to consider . So lcp is not defined for this substring , we put zero .
j contains index of the next substring to be considered to compare with the present substring , i . e . , next string in suffix array
Directly start matching from k 'th index as  at-least k-1 characters will match
Deleting the starting character from the string .
Return the constructed lcp array
Utility method to get sum of first N numbers
Returns Kth character in sorted concatenated substrings of str
Calculating suffix array and lcp array
Skipping characters common to substring ( n - suffixArr [ i ] ) is length of current maximum substring lcp [ i ] will length of common substring
If characters are more than K , that means Kth character belongs to substring corresponding to current lcp [ i ]
Loop from current lcp value to current string length
Again reduce K by current substring 's  length one by one and when it becomes less,  print Kth character of current substring
Driver code
Return the even number substrings .
If current digit is even , add count of substrings ending with it . The count is ( i + 1 )
Driven Program
A binary tree node
Returns the maximum consecutive path length
Get the vlue of current node The value of the current node will be prev node for its left and right children
If current node has to be a part of the consecutive path then it should be 1 greater thn the value of the previous node
a ) Find the length of the left path b ) Find the length of the right path Return the maximum of left path and right path
Find the length of the maximum path under subtree rooted with this node
Take the maximum previous path and path under subtree rooted with this node
A Wrapper over maxPathLenUtil ( )
Return 0 if root is None
Else compute maximum consecutive increasing path length using maxPathLenUtil
Driver program to test above function
Returns true if str1 [ ] is a subsequence of str2 [ ] . m is length of str1 and n is length of str2
Traverse str2 and str1 , and compare current character of str2 with first unmatched char of str1 , if matched then move ahead in str1
If all characters of str1 were found in str2
Returns the longest string in dictionary which is a subsequence of str .
Traverse through all words of dictionary
If current word is subsequence of str and is largest such word so far .
Return longest string
Driver program to test above function
The same function is used to encrypt and decrypt
Define XOR key Any character value will work
calculate length of input string
perform XOR operation of key with every character in string
Driver Code
Encrypt the string
Decrypt the string
Python3 program to check if any repeated subsequence exists in the String
A function to check if a String Str is palindrome
l and h are leftmost and rightmost corners of Str Keep comparing characters while they are same
The main function that checks if repeated subsequence exists in the String
Find length of input String
Create an array to store all characters and their frequencies in Str [ ]
Traverse the input String and store frequencies of all characters in freq [ ] array .
If the character count is more than 2 we found a repetition
In - place remove non - repeating characters from the String
check if the resultant String is palindrome
special case - if length is odd return true if the middle character is same as previous one
return false if String is a palindrome
return true if String is not a palindrome
Driver code
Function to compute the previous permutation
Find index of the last element of the string
Find largest index i such that str [ i - 1 ] > str [ i ]
if string is sorted in ascending order we 're at the last permutation
Note - str [ i . . n ] is sorted in ascending order . Find rightmost element 's index  that is less than str[i - 1]
Swap character at i - 1 with j
Reverse the substring [ i . . n ]
Driver code
Function to print the longest path of same values
Recursive calls to check for subtrees
Variables to store maximum lengths in two directions
If curr node and it 's left child has same value 
If curr node and it 's right child has same value 
Driver function to find length of longest same value path
Helper function that allocates a new node with the given data and None left and right pointers .
Driver code
Let us construct a Binary Tree 4 / \ 4 4 / \ \ 4 9 5
Returns true if edit distance between s1 and s2 is one , else false
Find lengths of given strings
If difference between lengths is more than 1 , then strings can 't be at one distance
count = 0 Count of isEditDistanceOne
If current characters dont match
If length of one string is more , then only possible edit is to remove a character
else : If lengths of both strings is same
Increment count of edits
else : if current characters match
if last character is extra in any string
Driver program
Python program for the above approach
Function to find the sum of digits of numbers in the range [ 0 , X ]
Check if count of digits in a number greater than count of digits in X
Check if sum of digits of a number is equal to Y
Check if current subproblem has already been comrputed
Stores count of numbers whose sum of digits is Y
Check if the number exceeds Y or not
Iterate over all possible values of i - th digits
Update res
Return res
Utility function to count the numbers in the range [ L , R ] whose sum of digits is Y
Base Case
Stores numbers in the form of its equivalent
Stores overlapping subproblems
Stores count of numbers in the range [ 0 , R ]
Update str
Stores count of numbers in the range [ 0 , L - 1 ]
Driver Code
Function to remove all spaces from a given string
Driver program
A simple Python 3 program to count number of substrings starting and ending with 1
Initialize result
Pick a starting point
Search for all possible ending point
Driver program to test above function
A utility function to reverse string str [ low . . high ]
Cycle leader algorithm to move all even positioned elements at the end .
odd index
even index
keep the back - up of element at new position
The main function to transform a string . This function mainly uses cycleLeader ( ) to transform
Step 1 : Find the largest prefix subarray of the form 3 ^ k + 1
Step 2 : Apply cycle leader algorithm for the largest subarrau
Step 4.1 : Reverse the second half of first subarray
Step 4.2 : Reverse the first half of second sub - string
Step 4.3 Reverse the second half of first sub - string and first half of second sub - string together
Increase the length of first subarray
Driver Code
New node of a tree
Utility method that actually removes the nodes which are not on the pathLen >= k . This method can change the root as well .
Base condition
Traverse the tree in postorder fashion so that if a leaf node path length is shorter than k , then that node and all of its descendants till the node which are not on some other path are removed .
If root is a leaf node and it 's level   is less than k then remove this node.   This goes up and check for the ancestor   nodes also for the same condition till  it finds a node which is a part of other   path(s) too. 
Return root
Method which calls the utitlity method to remove the short path nodes .
Method to print the tree in inorder fashion .
Driver Code
Python program to remove duplicate character from character array and print in sorted order
Create a set using String characters
Print content of the set
Driver code
Python3 program for the above approach
Stores the coordinates of the matrix cell
Stores coordinates of a cell and its distance
Check if the given cell is valid or not
Stores the moves of the directions of adjacent cells
Function to find the shortest path from the source to destination in the given matrix
Stores the distance for each cell from the source cell
Distance of source cell is 0
Initialize a visited array
Mark source cell as visited
Create a queue for BFS
Distance of source cell is 0
Enqueue source cell
Keeps track of whether destination is reached or not
Iterate until queue is not empty
Deque front of the queue
If the destination cell is reached , then find the path
Assign the distance of destination to the distance matrix
Stores the smallest path
Iterate until source is reached
Append D
Append U
Append R
Append L
Reverse the backtracked path
Explore all adjacent directions
If the current cell is valid cell and can be traversed
Mark the adjacent cells as visited
Enque the adjacent cells
Update the distance of the adjacent cells
If the destination is not reachable
Driver Code
Function that finds the string of possible combination of operations
If only one number left then check for result
If resultant value is K
; Else return 0
Choose all combination of numbers and operators and operate them
Choose the first two and operate it with '+
Place it to 0 th position
Place ( n - 1 ) th element on 1 st position
Evaluate the expression with current combination
Now , we have N - 1 elements
Try ' - ' operation
Evaluate the expression with current combination
Try reverse '-
Evaluate the expression with current combination
Try ' * ' operation
Evaluate the expression with current combination
Try '/
Evaluate the expression with current combination
Try reverse '/
Evaluate the expression with current combination
Backtracking Step
Return 0 if there doesnt exist any combination that gives K
Function that finds the possible combination of operation to get the resultant value K
Store the resultant operation
Function Call
Driver Code
Given array arr [ ]
Resultant value K
Function Call
Function to check if any of the two kings is unsafe or not
Find the position of both the kings
Check for all pieces which can attack White King
Check for Knight
Check for Pawn
Check for Rook
Check for Bishop
Check for Queen
Check for King
Check for all pieces which can attack Black King
Check for Knight
Check for Pawn
Check for Rook
Check for Bishop
Check for Queen
Check for King
Store all possible moves of the king
incrementing index values
checking boundary conditions and character match
Function to check if Queen can attack the King
Queen 's moves are a combination  of both the Bishop and the Rook
Function to check if bishop can attack the king
Check the lower right diagonal
Check the lower left diagonal
Check the upper right diagonal
Check the upper left diagonal
Check if
Check downwards
Check upwards
Check right
Check left
Check if the knight can attack the king
All possible moves of the knight
Incrementing index values
Checking boundary conditions and character match
Function to check if pawn can attack the king
Check for white pawn
Check for black pawn
Check if the indices are within the matrix or not
Checking boundary conditions
Chessboard instance
N is the size of the 2D matrix N * N
A utility function to print grid
Checks whether it will be legal to assign num to the given row , col
Check if we find the same num in the similar row , we return false
Check if we find the same num in the similar column , we return false
Check if we find the same num in the particular 3 * 3 matrix , we return false
Takes a partially filled - in grid and attempts to assign values to all unassigned locations in such a way to meet the requirements for Sudoku solution ( non - duplication across rows , columns , and boxes )
Check if we have reached the 8 th row and 9 th column ( 0 indexed matrix ) , we are returning true to avoid further backtracking
Check if column value becomes 9 , we move to next row and column start from 0
Check if the current position of the grid already contains value > 0 , we iterate for next column
Check if it is safe to place the num ( 1 - 9 ) in the given row , col -> we move to next column
Assigning the num in the current ( row , col ) position of the grid and assuming our assigned num in the position is correct
Checking for next possibility with next column
Removing the assigned num , since our assumption was wrong , and we go for next assumption with diff num value
0 means unassigned cells
function to check for the given sum in the array
checking for condition
driver code
A utility class to create a node
Utility method to return length of longest consecutive sequence of tree
if root data has one more than its parent then increase current length
update the maximum by current length
recursively call left and right subtree with expected value 1 more than root data
method returns length of longest consecutive sequence rooted at node root
call utility method with current length 0
Driver Code
Function to calculate ( A ^ N ! ) % P in O ( log y )
Initialize result
Update x if it is more than or Equal to p
In case x is divisible by p
If y is odd , multiply x with result
y must be even now
Returning modular power
Function to calculate resultant remainder
Initializing ans to store final remainder
Calculating remainder
Returning resultant remainder
Given input
Function Call
''Function to find Majority element in an array
'' if this element is previously seen,  increment count1.
'' if this element is previously seen,  increment count2.
'' if current element is different from  both the previously seen variables, decrement both the counts.
Function to multiply two complex numbers modulo M
Multiplication of two complex numbers is ( a + ib ) ( c + id ) = ( ac - bd ) + i ( ad + bc )
Return the multiplied value
Function to calculate the complex modular exponentiation
Here , res is initialised to ( 1 + i0 )
If k is odd
Multiply ' complex ' with 'res
Make complex as complex * complex
Make k as k / 2
Return the required answer
Driver code
Function call
Recursive Python program to compute modular power
Base Cases
If B is Even
If B is Odd
Driver Code
python program to count number of occurrences of each element in the array in O ( n ) time and O ( 1 ) space
check if the current element is equal to previous element .
reset the frequency
print the last element and its frequency
Iterative Function to calculate ( x ^ y ) in O ( log y )
Initialize result
If y is odd , multiply x with result
y must be even now y = y / 2
Change x to x ^ 2
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
Initialize result
Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now
Driver Code
Utility function to create a new node
Recursive function to calculate the path Length having maximum number of bends . The following are parameters for this function . node - . pointer to the current node Dir - . determines whether the current node is left or right child of it 's parent node bends -. number of bends so far in the current path. maxBends -. maximum number of bends in a path from root to leaf soFar -. Length of the current path so far traversed Len -. Length of the path having maximum number of bends
Base Case
Leaf node
Having both left and right child
Helper function to call findMaxBendsUtil ( )
Call for left subtree of the root
Call for right subtree of the root
Include the root node as well in the path Length
Driver code
Constructed binary tree is 10 / \ 8 2 / \ / 3 5 2 \ 1 / 9
Python3 program for the above approach
Function to find the magnitude of the given vector
Stores the final magnitude
Traverse the array
Return square root of magnitude
Function to find the dot product of two vectors
Stores dot product
Traverse the array
Return the product
Stores dot product of two vectors
Stores magnitude of vector A
Stores magnitude of vector B
Stores angle between given vectors
Print the angle
Driver Code
Given magnitude arrays
Size of the array
Function call to find the angle between two vectors
Function to find the sum of largest and smallest secondary polygons if possible
Count edges of primary polygon
Calculate edges present in the largest secondary polygon
Driver Code
Given Exterior Angle
Python3 implementation to find the equation of circle which inscribes equilateral triangle of median M
Function to find the equation of circle whose center is ( x1 , y1 ) and the radius of circle is r
Function to find the equation of circle which inscribes equilateral triangle of median M
Function to find the circle equation
Driver code
Function call
A Binary Tree Node
Utility function to create a new tree Node
Utility function to find the LCA of two given values n1 and n2 .
Base case
If either n1 or n2 matches with root 's key, report the presence by  returning root (Note that if a key  is ancestor of other, then the  ancestor key becomes LCA
Look for keys in left and right subtrees
If both of the above calls return Non - NULL , then one key is present in once subtree and other is present in other , So this node is the LCA
Otherwise check if left subtree or right subtree is LCA
function count number of turn need to reach given node from it 's LCA we have two way to
if found the key value in tree
Case 1 :
Case 2 :
Function to find nodes common to given two nodes
there is no path between these two node
case 1 :
count number of turns needs to reached the second node from LCA
count number of turns needs to reached the first node from LCA
case 2 :
count number of turns needs to reached the second node from LCA
count number of turns needs to reached the first node from LCA1
Driver Code
Let us create binary tree given in the above example
Function to find the type of triangle with the help of sides
Driver Code
Function Call
Function to check if sum of the three angles is 180 or not
Check condition
Driver code
function calling and print output
Python3 Program to find the biggest triangle which can be inscribed within the hexagon
Function to find the area of the triangle
side cannot be negative
area of the triangle
Driver code
Function to find equation of ellipse .
Driver Code
Utility function to create a new node
preorder traversal to place the node pointer in the respective even_ptrs or odd_ptrs list
place node ptr in even_ptrs list if node contains even number
else place node ptr in odd_ptrs list
function to create the even and odd loops
forming even loop
for the last element
Similarly forming odd loop
traversing the loop from any random node in the loop
Driver program to test above
Binary tree formation
traversing odd loop from any random odd node
traversing even loop from any random even node
Python3 program to find the area of circle which is inscribed in equilateral triangle
Function return the area of circle inscribed in equilateral triangle
Driver code
Python 3 implementation of above approach
Function to find the volume
Steps to calculate volume of a Tetrahedron using formula
Driver code
edge lengths
Function to check whether it is possible to make a regular polygon with a given angle .
N denotes the number of sides of polygons possible
Driver Code
function calling
Python3 Program to find the quadrant of a given coordinate w . rt . the centre of a circle
Thus function returns the quadrant number
Coincides with center
Outside circle
1 st quadrant
2 nd quadrant
3 rd quadrant
4 th quadrant
Coordinates of centre
Radius of circle
Coordinates of the given po
Function to calculate hexadecagonal number
Driver Code
Utility function to create a new tree Node
Prints the first non - matching leaf node in two trees if it exists , else prints nothing .
If any of the tree is empty
Create two stacks for preorder traversals
If traversal of one tree is over and other tree still has nodes .
Do iterative traversal of first tree and find first lead node in it as " temp1"
pushing right childfirst so that left child comes first while popping .
Do iterative traversal of second tree and find first lead node in it as " temp2"
If we found leaves in both trees
Driver Code
Returns maximum number of intersections
Driver code
Function to calculate the perimeter of a cylinder
Driver function
coordinates of A
coordinates of B
coordinates of C
A utility function to calculate area of triangle formed by ( x1 , y1 ) , ( x2 , y2 ) and ( x3 , y3 )
A function to check whether point P ( x , y ) lies inside the rectangle formed by A ( x1 , y1 ) , B ( x2 , y2 ) , C ( x3 , y3 ) and D ( x4 , y4 )
Calculate area of rectangle ABCD
Calculate area of triangle PAB
Calculate area of triangle PBC
Calculate area of triangle PCD
Calculate area of triangle PAD
Check if sum of A1 , A2 , A3 and A4 is same as A
Driver Code
Let us check whether the point P ( 10 , 15 ) lies inside the rectangle formed by A ( 0 , 10 ) , B ( 10 , 0 ) C ( 0 , - 10 ) D ( - 10 , 0 )
Get max of left element using Inorder traversal
Return maximum of three values 1 ) Recursive max in left subtree 2 ) Value in left node 3 ) Recursive max in right subtree
Utility class to create a new tree node
Driver Code
Let us create binary tree shown in above diagram
7 / \ 6 5 / \ / \ 4 3 2 1
Function for finding maximum pieces with n cuts .
Driver code
A Python3 program to find optimum location and total cost
Class defining a point
Class defining a line of ax + by + c = 0 form
Method to get distance of point ( x , y ) from point p
Utility method to compute total distance all points when choose point on given line has x - coordinate value as X
Calculating Y of chosen point by line equation
Utility method to find minimum total distance
Loop until difference between low and high become less than EPS
mid1 and mid2 are representative x co - ordiantes of search space
If mid2 point gives more total distance , skip third part
If mid1 point gives more total distance , skip first part
Compute optimum distance cost by sending average of low and high as X
Method to find optimum cost
Converting 2D array input to point array
Driver Code
Returns sum of lengths covered by union of given segments
Initialize empty points container
Create a vector to store starting and ending points
Sorting all points by point value
Initialize result as 0
To keep track of counts of current open segments ( Starting point is processed , but ending point is not )
Traverse through all points
If there are open points , then we add the difference between previous and current point .
If this is an ending point , reduce , count of open points .
Driver code
Function to find the duplicate and the missing elements over the range [ 1 , N ]
Stores the missing and duplicate numbers in the array arr [ ]
Traverse the given array arr [ ]
Check if the current element is not same as the element at index arr [ i ] - 1 , then swap
Otherwise , increment the index
Traverse the array again
If the element is not at its correct position
Stores the missing and the duplicate elements
Print the Missing Number
Print the Duplicate Number
Driver code
Function to check if it is possible to generate all numbers in range [ 0 , N - 1 ] using the sum of elements + in the multiset A and B mod N
If no more pair of elements can be selected
If the number of elements in C = N , then return true
Otherwise return false
Stores the value of final answer
Iterate through all the pairs in the given multiset A and B
Stores the set A without x
Stores the set A without y
Stores the set A without x + y % N
Recursive call
Return Answer
Function to check if it is possible to rearrange array elements such that ( arr [ i ] + i * K ) % N = i
Stores the values of arr [ ] modulo N
Stores all the values of i * K modulo N
Print Answer
Driver code
Python 3 program for the above approach
Function to find the height of the Factor Tree of the integer N
Stores the height of Factor Tree
Loop to iterate over values of N
Stores if there exist a factor of N or not
Loop to find the smallest factor of N
If i is a factor of N
Increment the height
If there are no factors of N i . e , N is prime , break loop
Return Answer
Driver Code
Function to find maximum value of k which makes bitwise AND zero .
Finding the power less than N
Driver Code
Python3 program for the above approach
Function to build the segment tree
Base case
Since the count of zero is required set leaf node as 1
If the value in array is not zero , store 0 in the leaf node
Find the mid
Recursive call for left subtree
Recursive call for right subtree
Parent nodes contains the count of zero in range tl to tr
Function to find the count of 0 s in range l to r
Base Case
Case when no two segment are combining
Finding the mid
When it is required to combine left subtree and right subtree to get the range l to r
Function that updates the segment tree nodes
Base Case
If array element is 0
If array element is not 0
Otherwise
Find the mid
Update the tree or count which is stored in parent node
Function to solve all the queries
When query type is 1
When query type is 2
Driver code
Python program to find a number in minimum steps
To represent data of a node in tree
Prints level of node n
Create a queue and insert root
Do level order traversal
Remove a node from queue
q . pop ( ) To avoid infinite loop
Check if dequeued number is same as n
Insert children of dequeued node to queue
Driver code
val [ ] is for storing maximum profit for each weight wt [ ] is for storing weights n number of item W maximum capacity of bag mat [ 2 ] [ W + 1 ] to store final result
matrix to store final result
iterate through all items
one by one traverse each element
traverse all weights j <= W
if i is odd that mean till now we have odd number of elements so we store result in 1 th indexed row
check for each value
include element
exclude element
if i is even that mean till now we have even number of elements so we store result in 0 th indexed row
Return mat [ 0 ] [ W ] if n is odd , else mat [ 1 ] [ W ]
Driver code
Python code for the above approach
If total candies are not multiple of 4 then its not possible to be left with 0 candies
If minimum candies of three bags are less than number of operations required then the task is not possible
Driver code
Function to find the difference between averages of the maximum and the minimum subarrays of length k
Stores min and max sum
Iterate through starting points
Sum up next K elements
Update max and min moving sum
Return the difference between max and min average
Given Input
Function Call
Python3 program to Find a number in minimum steps
Steps sequence
Current sum
Sign of the number
Basic steps required to get sum >= required value .
If we have reached ahead to destination .
If the last step was an odd number , then it has following mechanism for negating a particular number and decreasing the sum to required number Also note that it may require 1 more step in order to reach the sum .
If the current time instance is even and sum is odd than it takes 2 more steps and few negations in previous elements to reach there .
Driver code
Python 3 program for the above approach
Function to find maximum range for each i such that arr [ i ] is max in range
Vector to store the left and right index for each i such that left [ i ] > arr [ i ] and right [ i ] > arr [ i ]
Traverse the array
While s . top ( ) . first < a [ i ] remove the top element from the stack
Modify left [ i ]
Clear the stack
Traverse the array to find right [ i ] for each i
While s . top ( ) . first < a [ i ] remove the top element from the stack
Modify right [ i ]
Print the value range for each i
Driver Code
Given Input
Function Call
Function to find the nth number which has exactly 4 divisors
The divs [ ] array to store number of divisors of every element
The vis [ ] array to check if given number is considered or not
The cnt stores number of elements having exactly 4 divisors
Iterate while cnt less than n
If i is a prime
Iterate in the range [ 2 * i , 1000000 ] with increment of i
If the number j is already considered
Dividing currNum by i until currNum % i is equal to 0
Case a single prime in its factorization
Case of two distinct primes which divides j exactly once each
Given Input
Function Call
Function to find the maximum number formed by taking the maximum digit at the same position from each number
Stores the result
Stores the position value of a digit
Stores the digit at the unit place
Stores the digit at the unit place
Stores the digit at the unit place
Update A , B and C
Stores the maximum digit
Increment ans cur * a
Update cur
Return ans
Driver Code
Given Input
Function call
Python 3 program for the above approach
Function to calculate the number of distinct GCDs among all non - empty subsequences of an array
variables to store the largest element in array and the required count
Map to store whether a number is present in A
calculate largest number in A and mapping A to Mp
iterate over all possible values of GCD
variable to check current GCD
iterate over all multiples of i
If j is present in A
calculate gcd of all encountered multiples of i
current GCD is possible
return answer
Driver code
Input
Function calling
Python program for the above approach
Function to compress the elements in an array into an integer
Check for each bit position
Update the count of set and non - set bits
If number of set bits exceeds the number of non - set bits , then add set bits value to ans
Function to compress a given Binary Tree into an integer
Declare a map
Perform Inorder Traversal on the Binary Tree
Store all nodes of the same line together as a vector
Increase the vertical distance of left child
Vertical distance remains same for right child
Store all the compressed values of diagonal elements in an array
Compress the array into an integer
Driver Code Given Input
Function Call
Function to get minimum number of trials needed in worst case with n eggs and k floors
If there are no floors , then no trials needed . OR if there is one floor , one trial needed .
We need k trials for one egg and k floors
Consider all droppings from 1 st floor to kth floor and return the minimum of these values plus 1.
Driver Code
Function to find the kth digit from last in an eger n
If k is less than equal to 0
Divide the number n by 10 upto k - 1 times
If the number n is equal 0
Pr the right most digit
Driver code
Given Input
Function call
A Space efficient Dynamic Programming based Python3 program to find minimum number operations to convert str1 to str2
Create a DP array to memoize result of previous computations
Base condition when second String is empty then we remove all characters
Start filling the DP This loop run for every character in second String
This loop compares the char from second String with first String characters
If first String is empty then we have to perform add character operation to get second String
If character from both String is same then we do not perform any operation . here i % 2 is for bound the row number .
If character from both String is not same then we take the minimum from three specified operation
After complete fill the DP array if the len2 is even then we end up in the 0 th row else we end up in the 1 th row so we take len2 % 2 to get row
Driver code
Function to calculate sum of Bitwise XOR of elements of arr [ ] with k
Initialize sum to be zero
Iterate over each set bit
Stores contribution of i - th bet to the sum
If the i - th bit is set
Stores count of elements whose i - th bit is not set
Update value
Update value
Add value to sum
Move to the next power of two
Stores the count of elements whose i - th bit is set
Traverse the array
Iterate over each bit
If the i - th bit is set
Increase count
Driver Code
Function to execute k processes that can be gained in minimum amount of time
Stores all the array elements
Push all the elements to the priority queue
Stores the required result
Loop while the queue is not empty and K is positive
Store the top element from the pq
Add it to the answer
Divide it by 2 and push it back to the pq
Print the answer
Driver Code
Tree Node structure
Function to create a new BST node
Function to insert a new node with given key in BST
If the tree is empty , return a new node
Otherwise , recur down the tree
Return the node pointer
Function to find all the nodes that lies over the range [ node1 , node2 ]
If the tree is empty , return
Traverse for the left subtree
If a second node is found , then update the flag as false
Traverse the right subtree
Function to find the median of all the values in the given BST that lies over the range [ node1 , node2 ]
Stores all the nodes in the range [ node1 , node2 ]
Store the size of the array
Print the median of array based on the size of array
Given BST
Function to compute totient of all numbers smaller than or equal to N
Iterate over the range [ 2 , N ]
If phi [ p ] is not computed already then p is prime
Phi of a prime number p is ( p - 1 )
Update phi values of all multiples of p
Add contribution of p to its multiple i by multiplying with ( 1 - 1 / p )
Function to count the pairs ( i , j ) from the range [ 1 , N ] , satisfying the given condition
Stores the counts of first and second type of pairs respectively
Count of first type of pairs
Stores the phi or totient values
Calculate the Phi values
Iterate over the range [ N / 2 + 1 , N ]
Update the value of cnt_type2
Print the total count
Driver Code
Stores the sum closest to K
Stores the minimum absolute difference
Function to choose the elements from the array B [ ]
If absolute difference is less then minimum value
Update the minimum value
Update the value of ans
If absolute difference between curr and K is equal to minimum
Update the value of ans
If i is greater than M - 1
Includes the element B [ i ] once
Includes the element B [ i ] twice
Excludes the element B [ i ]
Function to find a subset sum whose sum is closest to K
Traverse the array A [ ]
Function Call
Return the ans
Driver Code
Input
Function Call
Store the indegree of every node
Store the nodes having indegree equal to 0
Traverse the array
If the indegree of i - th node is 0
Increment count0 by 1
If the number of operations needed is at most floor ( n / 2 )
Otherwise
Driver Code
Given number of nodes
Given Directed Tree
Functio to convert obtained binary representation to decimal value
Stores the resultant number
Traverse string arr
Return the number formed
Function to count the number of set bits in the number num
Stores the count of set bits
Iterate until num > 0
Function to check if the given matrix satisfies the given condition or not
To get P , S , MR , and MC
Stores decimal equivalents of binary representations
Gett the number of set bits
Print the answer
Driver Code
Python3 program for the above approach
Function to assign values to nodes of the tree s . t . sum of values of nodes of path between any 2 nodes is not divisible by length of path
Stores the adjacency list
Create a adjacency list
Stores whether any node is visited or not
Stores the node values
Variable used to assign values to the nodes alternatively to the parent child
Declare a queue
Push the 1 st node
Assign K value to this node
Dequeue the node
Mark it as visited
Upgrade the value of K
Assign K to the child nodes
If the child is unvisited
Enqueue the child
Assign K to the child
Print the value assigned to the nodes
Driver Code
Function Call
Return the number of all possible full binary tree with given product property .
Finding the minimum and maximum values in given array .
Marking the presence of each array element and initialising the number of possible full binary tree for each integer equal to 1 because single node will also contribute as a full binary tree .
From minimum value to maximum value of array finding the number of all possible Full Binary Trees .
Find if value present in the array
For each multiple of i , less than equal to maximum value of array
If multiple is not present in the array then continue .
Finding the number of possible Full binary trees for multiple j by multiplying number of possible Full binary tree from the number i and number of possible Full binary tree from i / j .
Condition for possiblity when left chid became right child and vice versa .
Driver Code
Python3 program for the above approach
Stores the sieve of prime numbers
Function that performs the Sieve of Eratosthenes
Iterate over the range [ 2 , 1000 ]
If the current element is a prime number
Mark all its multiples as false
Function to find the minimum number of subtraction of primes numbers required to make all array elements the same
Perform sieve of eratosthenes
Find the minimum value
Stores the value to each array element should be reduced
If an element exists with value ( M + 1 )
Stores the minimum count of subtraction of prime numbers
Traverse the array
If D is equal to 0
If D is a prime number
Increase count by 1
If D is an even number
Increase count by 2
If D - 2 is prime
Increase count by 2
Otherwise , increase count by 3
Driver Code
Function to print unique elements
Reverse the list
Traverse the list
Function which check for all unique digits
Stores the final number
Stores the count of unique digits
Converting string to integer to remove leading zeros
Stores count of digits
Iterate over the digits of N
Retrieve the last digit of N
Increase the count of the last digit
Remove the last digit of N
Converting string to integer again
Iterate over the digits of N
Retrieve the last digit of N
If the value of this digit is not visited
If its frequency is 1 ( unique )
Mark the digit visited
Remove the last digit of N
Passing this list to print the reversed list
Function to concatenate array elements
Stores the concatenated number
Traverse the array
Convert to equivalent string
Concatenate the string
Passing string to checkUnique function
Driver Code
Function call to print unique digits present in the concatenation of array elements
Function to calculate sum of Bitwise AND of same indexed elements of the arrays p [ ] and arr [ ]
Stores the resultant sum
Traverse the array
Update sum of Bitwise AND
Return the value obtained
Function to generate all permutations and calculate the maximum sum of Bitwise AND of same indexed elements present in any permutation and an array arr [ ]
If the size of the array is N
Calculate cost of permutation
Generate all permutations
Update chosen [ i ]
Update the permutation p [ ]
Generate remaining permutations
Return the resultant sum
Function to find the maximum sum of Bitwise AND of same indexed elements in a permutation of first N natural numbers and arr [ ]
Stores the resultant maximum sum
Stores the generated permutation P
Function call to store result
Print the result
Driver Code
Function Call
Function to count the number of set bits in an integer N
Stores the count of set bits
Iterate until N is non - zero
Stores the resultant count
Function to calculate sum of all array elements whose count of set bits are unique
Stores frequency of all possible count of set bits
Stores the sum of array elements
Traverse the array
Count the number of set bits
Traverse the array and Update the value of ans
If frequency is 1
Driver Code
Function to check if array can be split into three equal sum subarrays by removing a pair
Stores prefix sum array
Traverse the array
Stores sums of all three subarrays
Sum of left subarray
Sum of middle subarray
Sum of right subarray
Check if sum of subarrays are equal
Prthe possible pair
If no such pair exists , pr - 1
Driver Code
Given array
Size of the array
Function to check if array can be split into three equal sum subarrays by removing a pair
Two pointers l and r
Stores prefix sum array
Traverse the array
Two pointer approach
Sum of left subarray
Sum of middle subarray
Sum of right subarray
Print split indices if sum is equal
Move left pointer if lsum < rsum
Move right pointer if rsum > lsum
Move both pointers if lsum = rsum but they are not equal to msum
If no possible pair exists , print - 1
Driver Code
Given array
Size of the array
Helper class that allocates a new Node with the given data and None left and right pointers .
Returns count of subtrees having odd count of even numbers
base condition
count even nodes in left subtree
Add even nodes in right subtree
Check if root data is an even number
if total count of even numbers for the subtree is odd
Total count of even nodes of the subtree
A wrapper over countRec ( )
Driver Code
binary tree formation 2
/ \
1 3
/ \ / \
4 10 8 5
/
6
A Binary Tree Node Utility function to create a new tree node
function to find left most node in a tree
function to find right most node in a tree
recursive function to find the Inorder Scuccessor when the right child of node x is None
function to find inorder successor of a node
Case1 : If right child is not None
Case2 : If right child is None
case3 : If x is the right most node
Driver Code
Case 1
case 2
case 3
Class containing left and right child of current node and key value
Driver code
A class to create a new Binary Tree Node
Returns - 1 if x doesn 't exist in tree. Else returns distance of x from root
Base case
Initialize distance
Check if x is present at root or in left subtree or right subtree .
Driver Code
A class to create a new Binary Tree Node
Method to find right sibling
GET Parent pointer whose right child is not a parent or itself of this node . There might be case when parent has no right child , but , current node is left child of the parent ( second condition is for that ) .
Move to the required child , where right sibling can be present
find right sibling in the given subtree ( from current node ) , when level will be 0
Iterate through subtree
if no child are there , we cannot have right sibling in this path
This is the case when we reach 9 node in the tree , where we need to again recursively find the right sibling
Driver Code
passing 10
class to create a new tree node
Function to find next node for given node in same level in a binary tree by using pre - order traversal
return None if tree is empty
if desired node is found , set value_level to current level
if value_level is already set , then current node is the next right node
recurse for left subtree by increasing level by 1
if node is found in left subtree , return it
recurse for right subtree by increasing level by 1
Function to find next node of given node in the same level in given binary tree
A utility function to test above functions
Driver Code
Let us create binary tree given in the above example
Helper function that allocates a new Node with the given data and None left and right pointers .
function to find three largest element
if data is greater than first large number update the top three list
if data is greater than second large number and not equal to first update the bottom two list
if data is greater than third large number and not equal to first & second update the third highest list
Driver Code
A class to create a new node
Constructor that allocates a new node with the given data and NULL left and right pointers .
Returns maximum value in a given Binary Tree
Base case
Return maximum of 3 values : 1 ) Root 's data 2) Max in Left Subtree 3) Max in right subtree
Driver Code
Function call
Returns the min value in a binary tree
A binary tree node
Main function which extracts all leaves from given Binary Tree . The function returns new root of Binary Tree ( Note thatroot may change if Binary Tree has only one node ) . The function also sets * head_ref as head of doubly linked list . left pointer of tree is used as prev in DLL and right pointer is used as next
Utility function for printing tree in InOrder
Utility function for printing double linked list .
Driver program to test above function
A Binary Tree Node
Function to create a new Node .
function that prints the inorder successor of a target node . next will point the last tracked node , which will be the answer .
if root is None then return
if target node found , then enter this condition
Driver Code
Let 's construct the binary tree   as shown in above diagram.
Case 1
case 2
case 3
Adds an edge to undirected graph
Add an edge from source to destination . A new element is inserted to adjacent list of source .
Add an dge from destination to source . A new element is inserted to adjacent list of destination .
A utility function to print the adjacency list representation of graph
Search for a given edge in graph
Driver code
Create the graph given in the above figure
Print adjacenecy list representation of graph
Search the given edge in a graph
Python program to find K - Cores of a graph
This class represents a undirected graph using adjacency list representation
No . of vertices
default dictionary to store graph
function to add an edge to undirected graph
A recursive function to call DFS starting from v . It returns true if vDegree of v after processing is less than k else false It also updates vDegree of adjacent if vDegree of v is less than k . And if vDegree of a processed adjacent becomes less than k , then it reduces of vDegree of v also ,
Mark the current node as visited
Recur for all the vertices adjacent to this vertex
vDegree of v is less than k , then vDegree of adjacent must be reduced
If adjacent is not processed , process it
If vDegree of adjacent after processing becomes less than k , then reduce vDegree of v also
Return true if vDegree of v is less than k
Prints k cores of an undirected graph
INITIALIZATION Mark all the vertices as not visited
Store vDegrees of all vertices
DFS traversal to update vDegrees of all vertices , in case they are unconnected
PRINTING K CORES
Only considering those vertices which have vDegree >= K after DFS
Traverse adjacency list of v and print only those adjacent which have vvDegree >= k after DFS
Create a graph given in the above diagram
Python3 program for nth node of inorder traversal
A Binary Tree Node
Given a binary tree , print the nth node of inorder traversal
first recur on left child
when count = n then prelement
now recur on right child
Driver Code
Python3 program to find minimum initial vertices to reach whole matrix
( n , m ) is current source cell from which we need to do DFS . N and M are total no . of rows and columns .
Marking the vertex as visited
If below neighbor is valid and has value less than or equal to current cell 's value
If right neighbor is valid and has value less than or equal to current cell 's value
If above neighbor is valid and has value less than or equal to current cell 's value
If left neighbor is valid and has value less than or equal to current cell 's value
Storing the cell value and cell indices in a vector .
Sorting the newly created array according to cell values
Create a visited array for DFS and initialize it as false .
Applying dfs for each vertex with highest value
If the given vertex is not visited then include it in the set
Driver code
Python3 program to reach a prime number from another by changing single digits and using only prime numbers .
Finding all 4 digit prime numbers
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Forming a vector of prime numbers
in1 and in2 are two vertices of graph which are actually indexes in pset [ ]
Returns true if num1 and num2 differ by single digit .
To compare the digits
If the numbers differ only by a single digit return true else false
Generate all 4 digit
Create a graph where node numbers are indexes in pset [ ] and there is an edge between two nodes only if they differ by single digit .
Since graph nodes represent indexes of numbers in pset [ ] , we find indexes of num1 and num2 .
Driver code
Python3 Program to determine level of each node and print level
function to determine level of each node starting from x using BFS
array to store level of each node
create a queue
enqueue element x
initialize level of source node to 0
marked it as visited
do until queue is empty
get the first element of queue
traverse neighbors of node x
b is neighbor of node x
if b is not marked already
enqueue b in queue
level of b is level of x + 1
mark b
display all nodes and their levels
Driver Code
adjacency graph for tree
call levels function with source as 0
function to apply DFS
set the parent marked
if the node has not been visited set it and its children marked
link which digits must be equal
connect the two indices
set everything connected to first character as 1
Driver Code
A Binary Tree Node Utility function to create a new tree node
function to find the N - th node in the postorder traversal of a given binary tree
left recursion
right recursion
prints the n - th node of preorder traversal
Driver Code
prints n - th node found
Python3 program to find out path in a rectangle containing circles .
Function to find out if there is any possible path or not .
Take an array of m * n size and initialize each element to 0.
Now using Pythagorean theorem find if a cell touches or within any circle or not .
If the starting cell comes within any circle return false .
Now use BFS to find if there is any possible path or not . Initialize the queue which holds the discovered cells whose neighbors are not discovered yet .
Discover cells until queue is not empty
Discover the eight adjacent nodes . check top - left cell
check top cell
check top - right cell
check left cell
check right cell
check bottom - left cell
check bottom cell
check bottom - right cell
Now if the end cell ( i . e . bottom right cell ) is 1 ( reachable ) then we will send true .
Driver Code
Test case 1
Function call
Test case 2
Function call
DFS on tree
Printing traversed node
Traversing adjacent edges
Not traversing the parent node
Driver Code
Number of nodes
Adjacency List
Designing the tree
Function call
To store counts of nodes with two colors
Increment count of nodes with current color
Traversing adjacent nodes
Not recurring for the parent node
Finds maximum number of edges that can be added without violating Bipartite property .
Do a DFS to count number of nodes of each color
Driver code To store counts of nodes with two colors
Function to count minimum steps
Function to sort the array
Run while loop
Condition to check whether sum exceed the target or not
Increment the step by 1
Return minimum steps
Given array arr [ ]
Given target value
Function call
Stick [ ] stores the count of sticks required to represent the alphabets
Number [ ] stores the count of sticks required to represent the numerals
Function that return the count of sticks required to represent the given string str
Loop to iterate over every character of the string
Add the count of sticks required to represent the current character
Function to sort the array according to the number of sticks required to represent it
Vector to store the number of sticks required with respective strings
Inserting number of sticks with respective strings
Sort the vector
Print the sorted vector
Driver Code
Returns number of pairs in arr [ 0. . n - 1 ] with positive sum
Initialize result
Consider all possible pairs and check their sums
If arr [ i ] & arr [ j ] form valid pair
Driver 's Code
Function call to find the count of pairs
Python implementation of the approach
Function that returns true if the assignment of directions is possible
Structure to hold details of each interval
Sort the intervals based on velocity
Test the condition for all intervals with same velocity
If for any velocity , 3 or more intervals share a common poreturn false
Driver code
Function to return the modified string
To store the previous character
To store the starting indices of all the groups
Starting index of the first group
If the current character and the previous character differ
Push the starting index of the new group
The current character now becomes previous
Sort the first group
Sort all the remaining groups
print ( ''.join(st))
Return the modified string
Driver code
Python3 implementation of the approach
Recursively moving to add all the numbers upto a limit with sum of digits as m
Max nber of digits allowed in a nber for this implementation
Function to return the kth number with sum of digits as m
The kth smallest number is found
Driver code
Python3 program to remove minimum elements from the array such that 2 * min becomes more than max
Function to remove minimum elements from the array such that 2 * min becomes more than max
Sort the array
To store the required answer
Traverse from left to right
Update the answer
Return the required answer
Driver code
Function call
defining a class Queue
Function to push element in last by popping from front until size becomes 0
Base condition
pop front element and push this last in a queue
Recursive call for pushing element
Function to push an element in the queue while maintaining the sorted order
Base condition
If current element is less than the element at the front
Call stack with front of queue
Recursive call for inserting a front element of the queue to the last
Push front element into last in a queue
Recursive call for pushing element in a queue
Function to sort the given queue using recursion
Return if queue is empty
Get the front element which will be stored in this variable throughout the recursion stack
Recursive call
Push the current element into the queue according to the sorting order
Driver code
Data is inserted into Queue using put ( ) Data is inserted at the end
Sort the queue
Print the elements of the queue after sorting
This function takes last element as pivot , places the pivot element at its correct position in sorted array , and places all smaller ( smaller than pivot ) to left of pivot and all greater elements to right of pivot
pivot
Index of smaller element
If current element is smaller than or equal to pivot Instead of values , ASCII % m values are compared
Increment index of smaller element
swap
The main function that implements QuickSort arr [ ] -- > Array to be sorted , low -- > Starting index , high -- > Ending index
pi is partitioning index , arr [ p ] is now at right place
Separately sort elements before partition and after partition
Function to print the given array
Driver code
Sort the given array
Print the sorted array
Linked List Node
Function to sort a linked list using selection sort algorithm by swapping the next pointers
While b is not the last node
While d is pointing to a valid node
If d appears immediately after b
Case 1 : b is the head of the linked list
Move d before b
Swap b and d pointers
Update the head
Skip to the next element as it is already in order
Case 2 : b is not the head of the linked list
Move d before b
Swap b and d pointers
Skip to the next element as it is already in order
If b and d have some non - zero number of nodes in between them
Case 3 : b is the head of the linked list
Swap b . next and d . next
Swap b and d pointers
Skip to the next element as it is already in order
Update the head
Case 4 : b is not the head of the linked list
Swap b . next and d . next
Swap b and d pointers
Skip to the next element as it is already in order
Update c and skip to the next element as it is already in order
Function to print the list
Driver Code
Python 3 implementation of the approach
Utility function to print the contents of an array
Function to find the required numbers
Sort array in decreasing order
Count frequency of each element
Size of the resultant array
Store the highest element in the resultant array
Decrement the frequency of that element
Compute GCD
Decrement GCD value by 2
Driver code
Python3 implementation of the above approach
Function to find the bitwise AND of all the binary strings
To store the largest and the smallest string ' s ▁ size , ▁ We ▁ need ▁ this ▁ to ▁ add ▁ ' 0 's  in the resultant string
Reverse each string Since we need to perform AND operation on bits from Right to Left
Update the respective length values
Traverse bits from 0 to smallest string 's size
If at this bit position , there is a 0 in any of the given strings then AND operation on current bit position will be 0
Add resultant bit to result
Add 0 's to the string.
Reverse the string Since we started from LEFT to RIGHT
Return the resultant string
Driver code
Python3 program to print all paths of source to destination in given graph
Utility function for printing the found path in graph
Utility function to check if current vertex is already present in path
Utility function for finding paths in graph from source to destination
Create a queue which stores the paths
Path vector to store the current path
If last vertex is the desired destination then print the path
Traverse to all the nodes connected to current vertex and push new path to queue
Driver code
Number of vertices
Construct a graph
Function for finding the paths
Python3 implementation of the above approach
Sort the array
v1 = list ( ) to insert even values v2 = list ( ) to insert odd values
Set flag to true if first element is even
Start rearranging array
If first element is even
Else , first element is Odd
Print the rearranged array
Driver code
Function to return the number to be added
If difference of the current consecutive elements is different from the common difference
If number has already been chosen then it 's not possible to add  another number
If the current different is twice the common difference then a number can be added midway from current and previous element
Number has been chosen
It 's not possible to maintain  the common difference
Return last element + common difference if no element is chosen and the array is already in AP
Else return the chosen number
Driver code
Function to return the minimum cells that are connected via the minimum length path
Array to store column number of the given cells
Sort cells in ascending order of row number
Middle row number
Set pair to store required cells
Range of column number
Store all cells of middle row within column number range
Final step to store all the column number of 1 st and 3 rd cell upto MidRow
Driver Code
vector pair to store X , Y , Z
Function to count the total number of items
Sort the prices
Choose the last element
Initial count of item
Sum to keep track of the total price of free items
If total is less than or equal to z then we will add 1 to the answer
Function to sort elements with set bits equal to k
initialise two vectors
first vector contains indices of required element
second vector contains required elements
sorting the elements in second vector
replacing the elements with k set bits with the sorted elements
printing the new sorted array elements
Driver code
Function to return number of boxes
Sort the boxes in ascending order
Try to fit smallest box with current heaviest box ( from right side )
Driver code
Python3 implementation to count triplets in a sorted doubly linked list whose product is equal to a given value 'x
structure of node of doubly linked list
function to count triplets in a sorted doubly linked list whose product is equal to a given value 'x
unordered_map ' um ' implemented as hash table
insert the tuple in 'um
generate all possible pairs
p_product = product of elements in the current pair
if ' x / p _ product ' is present in ' um ' and either of the two nodes are not equal to the ' um [ x / p _ product ] ' node
increment count
required count of triplets division by 3 as each triplet is counted 3 times
A utility function to insert a new node at the beginning of doubly linked list
allocate node
put in the data
Driver code
start with an empty doubly linked list
insert values in sorted order
Function to find profit
Calculating profit for each gadget
sort the profit array in descending order
variable to calculate total profit
check for best M profits
Driver Code
Function to generate largest possible number with given digits
sort the given array in descending order
generate the number
Driver code
Python 3 program to count minimum number of partitions of size 2 and sum smaller than or equal to given key .
sort the array
if sum of ith smaller and jth larger element is less than key , then pack both numbers in a set otherwise pack the jth larger number alone in the set
After ending of loop i will contain minimum number of sets
Driver Code
structure of a node
Function to insert a node at the beginning of a linked list
Function to print nodes in a given linked list
Bubble sort the given linked list
Checking for empty list
Driver code
start with empty linked list
Create linked list from the array arr [ ] . Created linked list will be 1.11 . 2.56 . 12
print list before sorting
sort the linked list
print list after sorting
Alternative code to sort substrings
sort the input array
repeated length should be the same string
two different strings with the same length input array cannot be sorted
validate that each string is a substring of the following one
get first element
The array is valid and sorted print the strings in order
Test 1
Test 2
Python3 program for Number of paths from one vertex to another vertex in a Directed Acyclic Graph
to make graph
function to add edge in graph
there is path from a to b .
function to make topological sorting
insert all vertices which don 't have any parent.
using kahn 's algorithm  for topological sorting
insert front element of queue to vector
go through all it 's childs
whenever the frequency is zero then add this vertex to queue .
Function that returns the number of paths
make topological sorting
to store required answer .
answer from destination to destination is 1.
traverse in reverse order
Driver code
here vertices are numbered from 0 to n - 1.
to count number of vertex which don 't  have any parents.
to add all edges of graph
Function that returns the number of paths
Utility binary search
Function
Sort the array
Traverse the array
For every arr [ i ] < 0 element , do a binary search for arr [ i ] > 0.
If found , print the pair .
Driver code
Python3 program to check if two given multisets are equivalent
sort the elements of both multisets
Return true if both multisets are same .
Driver code
Python3 program to find minimum edge between given two vertex of Graph
function for finding minimum no . of edge using BFS
visited [ n ] for keeping track of visited node in BFS
Initialize distances as 0
queue to do BFS .
update distance for i
function for addition of edge
Driver Code
To store adjacency list of graph
Function to find minimum swaps .
Here we are getting number of smaller and greater elements of k .
Here we are calculating the actual position of k in the array .
Implementing binary search as per the above - discussed cases .
If we find the k .
If we need minimum element swap .
Else the element is at the right position .
If we need maximum element swap .
Else element is at the right position
Calculating the required swaps .
If it is impossible .
Driver function
Function which break string into two halves Sorts the two halves separately Compares the two halves return true if any index has non - zero value
Declaration and initialization of counter array
Driver function
Example input = [ 0 , 1 , 2 , 2 , 0 , 0 ] output = [ 0 , 0 , 0 , 1 , 2 , 2 ]
Python3 program to count number of visible boxes .
return the minimum number of visible boxes
New Queue of integers .
sorting the array
traversing the array
checking if current element is greater than or equal to twice of front element
Pushing each element of array
driver Program
A Python program to sort a binary array
if number is smaller than 1 then swap it with j - th number
Driver program
Python 3 program to find smallest number in array that is repeated exactly ' k ' times .
finds the smallest number in arr [ ] that is repeated k times
Since arr [ ] has numbers in range from 1 to MAX
set count to 1 as number is present once
Driver code
finds the smallest number in arr [ ] that is repeated k times
Sort the array
Find the first element with exactly k occurrences .
Driver code
Python 3 program to find longest common prefix of given array of words .
if size is 0 , return empty string
sort the array of strings
find the minimum length from first and last string
find the common prefix between the first and last string
Driver Code
Python implementation to find the minimum and maximum amount
function to find the maximum and the minimum cost required
Sort the array
print the minimum cost
print the maximum cost
Driver Code
Function call
Returns true if it is possible to sort else false /
We need to do something only if previousl element is greater
If difference is more than one , then not possible
Driver code
Function to print the sorted array of string
Function to Sort the array of string according to lengths . This function implements Insertion Sort .
Insert s [ j ] at its correct position
Driver code
Function to perform sorting
Calling the function to print result
This function takes first element as pivot , and places all the elements smaller than the pivot on the left side and all the elements greater than the pivot on the right side . It returns the index of the last element on the smaller side
Find leftmost element greater than or equal to pivot
Find rightmost element smaller than or equal to pivot
If two pointers met .
The main function that implements QuickSort arr -- > Array to be sorted , low -- > Starting index , high -- > Ending index
pi is partitioning index , arr [ p ] is now at right place
Separately sort elements before partition and after partition
Function to pran array
Driver code
Return the K - th smallest element .
sort ( arr , arr + n )
Checking if k lies before 1 st element
If k is the first element of array arr [ ] .
If k is more than last element
If first element of array is 1.
Reducing k by numbers before arr [ 0 ] .
Finding k 'th smallest element  after removing array elements.
Finding count of element between i - th and ( i - 1 ) - th element .
Driver Code
Python3 program to count nodes inside K distance range from marked nodes
Utility bfs method to fill distance vector and returns most distant marked node from node u
push node u in queue and initialize its distance as 0
loop untill all nodes are processed
if node is marked , update lastMarked variable
loop over all neighbors of u and update their distance before pushing in queue
if not given value already
return last updated marked value
method returns count of nodes which are in K - distance range from marked nodes
vertices in a tree are one more than number of edges
fill vector for graph
fill boolean array mark from marked array
vectors to store distances
first bfs ( from any random node ) to get one distant marked node
second bfs to get other distant marked node and also dl is filled with distances from first chosen marked node
third bfs to fill dr by distances from second chosen marked node
loop over all nodes
increase res by 1 , if current node has distance less than K from both extreme nodes
Driver Code
Returns true if n is even , else odd
n & 1 is 1 , then odd , else even
Driver code
Python3 program to count number of times S appears as a subsequence in T
T can 't appear as a subsequence in S
mat [ i ] [ j ] stores the count of occurrences of T ( 1. . i ) in S ( 1. . j ) .
Initializing first column with all 0 s . x An empty string can 't have another  string as suhsequence
Initializing first row with all 1 s . An empty string is subsequence of all .
Fill mat [ ] [ ] in bottom up manner
If last characters don 't match,  then value is same as the value  without last character in S.
Else value is obtained considering two cases . a ) All substrings without last character in S b ) All substrings without last characters in both .
Driver Code
Python3 program for the above approach
pi is partitioning index , arr [ p ] is now at right place
Separately sort elements before partition and after partition
Function to check possible RBS from the given strings
Stores the values { sum , min_prefix }
Iterate over the range
Stores the total sum
Stores the minimum prefix
Check for minimum prefix
Store these values in vector
Store values according to the mentioned approach
Sort the positive vector
Stores the extra count of open brackets
No valid bracket sequence can be formed
Sort the negative vector
Stores the count of the negative elements
No valid bracket sequence can be formed
Check if open is equal to negative
Driver Code
Python program for the above approach
Function to find the maximum number of unique squares that can be formed from the given N points
Stores the resultant count of squares formed
Base Case
Subtract the maximum possible grid size as sqrt ( N )
Find the total squares till now for the maximum grid
A i * i grid contains ( i - 1 ) * ( i - 1 ) + ( i - 2 ) * ( i - 2 ) + ... + 1 * 1 squares
When N >= len then more squares will be counted
Return total count of squares
Driver Code
Function to find the lexicographically smallest permutation such that the given array is a subsequence of it
Stores the missing elements in arr in the range [ 1 , K ]
Stores if the ith element is present in arr or not
Loop to mark all integers present in the array as visited
Loop to insert all the integers not visited into missing
Append INT_MAX at end in order to prevent going out of bounds
Pointer to the current element
Pointer to the missing element
Stores the required permutation
Loop to construct the permutation using greedy approach
If missing element is smaller that the current element insert missing element
Insert current element
Print the required Permutation
Driver Code
Function Call
Python 3 program for the above approach
Function to find last remaining index after repeated removal of perfect square indices
Initialize the ans variable as N
Iterate a while loop and discard the possible values
Total discarded values
Check if this forms a perfect square
Decrease answer by 1
Subtract the value from the current value of N
Return the value remained
Function to find last remaining element after repeated removal of array element at perfect square indices
Find the remaining index
Print the element at that index as the result
Driver Code
Given input
Import library for Queue
Function to find min edge
Initialize queue and push [ 1 , 0 ]
Create visited array to keep the track if node is visited or not
Run infinite loop
If node is N , terminate loop
Travel adjacent nodes of crnt
Check whether we visited previously or not
Push into queue and make as true
Function to Find time required to reach 1 to N
Check color of node is red or green
Add C sec from next green color time
Add C
Return the answer
Driver Code
Given Input
Function Call
Print total time
Python program for the above approach
Function to check number has distinct prime
While N has factors of two
Traversing till sqrt ( N )
If N has a factor of i
While N has a factor of i
Covering case , N is Prime
Function to check wheather num can be added to the subset
Recursive Function to count subset
Base Case
If currSubset is empty
If Unique [ pos ] can be added to the Subset
Function to count the subsets
Initialize unique
Check it is a product of distinct primes
Count frequency of unique element
Function Call
Driver Code
Given Input
Function Call
Recursive function for finding the lexicographically largest string
If either of the string length is 0 , return the other string
If s1 is lexicographically larger than s2
Take first character of s1 and call the function
Take first character of s2 and recursively call function for remaining string
Driver code
Given Input
Function call
This function is used to find the required the minimum distances of repeating characters
Define dictionary and list
Traverse through string
If character present in dictionary
Difference between current position and last stored value
Updating current position
Storing difference in list
If character not in dictionary assign it with initial of its position
If no element inserted in list i . e . no repeating characters
Return minimum distance
Given Input
Function Call
Python3 code for the above approach
Function that counts the number of doors opens after the Nth turn
Find the number of open doors
Return the resultant count of open doors
Driver Code
Function to count the minimum number of candies that is to be distributed
Stores total count of candies
Stores the amount of candies allocated to a student
If the value of N is 1
Traverse the array arr [ ]
If arr [ i + 1 ] is greater than arr [ i ] and ans [ i + 1 ] is at most ans [ i ]
Assign ans [ i ] + 1 to ans [ i + 1 ]
Iterate until i is atleast 0
If arr [ i ] is greater than arr [ i + 1 ] and ans [ i ] is at most ans [ i + 1 ]
Assign ans [ i + 1 ] + 1 to ans [ i ]
If arr [ i ] is equals arr [ i + 1 ] and ans [ i ] is less than ans [ i + 1 ]
Assign ans [ i + 1 ] + 1 to ans [ i ]
Increment the sum by ans [ i ]
Return the resultant sum
Driver Code
Function to find the maximum profit by selling M number of products
Initialize a Max - Heap to keep track of the maximum value
Stores the maximum profit
Traverse the array and push all the elements in max_heap
Iterate a loop until M > 0
Decrement the value of M by 1
Pop the maximum element from the heap
Update the maxProfit
Push ( X - 1 ) to max heap
Print the result
Driver code
Python program for the above approach Function to generate the resultant sequence of first N natural numbers
Initialize an array of size N
Stores the sum of positive and negative elements
Mark the first N - K elements as negative
Update the value of arr [ i ]
Update the value of sumNeg
Mark the remaining K elements as positive
Update the value of arr [ i ]
Update the value of sumPos
If the sum of the sequence is negative , then pr - 1
Pr the required sequence
Driver Code
Function to find the row index for every row of a matrix from which one can exit the grid after entering from left
Iterate over the range [ 0 , M - 1 ]
Stores the direction from which a person enters a cell
Row index from which one enters the grid
Column index from which one enters the grid
Iterate until j is atleast N - 1
If Mat [ i ] [ j ] is equal to 1
If entry is from left cell
Decrement i by 1
Assign ' D ' to dir
If entry is from upper cell
Decrement j by 1
Assign ' R ' to dir
If entry is from right cell
Increment i by 1
Assign ' U ' to dir
If entry is from bottom cell
Increment j by 1
Assign ' L ' to dir
Otherwise ,
If entry is from left cell
Increment i by 1
Assign ' U ' to dir
If entry is from upper cell
Increment j by 1
Assign ' L ' to dir
If entry is from right cell
Decrement i by 1
Assign ' D ' to dir
If entry is from lower cell
Decrement j by 1
Assign ' R ' to dir
If i or j is less than 0 or i is equal to M or j is equal to N
If j is equal to N
Otherwise
Input
Function call
Function to calculate sum of digits of an integer
Function to calculate maximum sum of array after removing pairs whose concatenation is divisible by 3
Stores the sum of digits of array element
Find the sum of digits
If i is divisible by 3
Otherwise , if i modulo 3 is 1
Otherwise , if i modulo 3 is 2
Return the resultant sum of array elements
Driver Code
Python3 program to find min edge reversal to make every node reachable from root
Method to dfs in tree and populates disRev values
Visit current node
Looping over all neighbors
Distance of v will be one more than distance of u
Initialize back edge count same as parent node 's count
If there is a reverse edge from u to i , then only update
Return total reversal in subtree rooted at u
Method prints root and minimum number of edge reversal
Number of nodes are one more than number of edges
Data structure to store directed tree
disRev stores two values - distance and back edge count from root node
Add 0 weight in direction of u to v
Add 1 weight in reverse direction
Initialize all variables
dfs populates disRev data structure and store total reverse edge counts
for ( i = 0 i < V i ++ ) { cout < < i < < " ▁ : ▁ " << disRev [ i ] [ 0 ] << " ▁ " << disRev [ i ] [ 1 ] << endl }
Loop over all nodes to choose minimum edge reversal
( reversal in path to i ) + ( reversal in all other tree parts )
Choose minimum among all values
Print the designated root and total edge reversal made
Driver code
Function to check if the S can be obtained by ( K + 1 ) non - empty substrings whose concatenation and concatenation of the reverse of these K strings
Stores the size of the string
If n is less than 2 * k + 1
Stores the first K characters
Stores the last K characters
Reverse the string
If both the strings are equal
Driver Code
Function to count the minimum number of socks to be picked
Stores the total count of pairs of socks
Find the total count of pairs
If K is greater than pairs
Otherwise
Driver Code
Function to count the number of bit flips required on A and B such that Bitwise OR of A and B is C
Stores the count of flipped bit
Iterate over the range [ 0 , 32 ]
Check if i - th bit of A is set
Check if i - th bit of B is set or not
Check if i - th bit of C is set or not
If i - th bit of C is unset
Check if i - th bit of A is set or not
Check if i - th bit of B is set or not
Check if i - th bit of C is set or not
Check if i - th bit of both A and B is set
Return the count of bits flipped
Driver Code
Store the number of set bits at each position
Function to precompute the prefix count array
Iterate over the range [ 0 , 31 ]
Set the bit at position i if arr [ 0 ] is set at position i
Traverse the array and take prefix sum
Update prefixCount [ i ] [ j ]
Function to find the Bitwise AND of all array elements
Stores the required result
Iterate over the range [ 0 , 31 ]
Stores the number of set bits at position i
If temp is N , then set ith position in the result
Print the result
Function to update the prefix count array in each query
Iterate through all the bits of the current number
Store the bit at position i in the current value and the new value
If bit2 is set and bit1 is unset , then increase the set bits at position i by 1
If bit1 is set and bit2 is unset , then decrease the set bits at position i by 1
Function to find the bitwise AND of the array after each query
Fill the prefix count array
Traverse the queries
Store the index and the new value
Store the current element at the index
Update the array element
Apply the changes to the prefix count array
Print the bitwise AND of the modified array
Driver Code
Function to find the winning player in a game of donating i candies to opponent in i - th move
Steps in which number of candies of player A finishes
Steps in which number of candies of player B finishes
If A 's candies finishes first
Otherwise
Candies possessed by player A
Candies possessed by player B
Python3 program for the above approach
Function to check if the point ( x , y ) lies inside , on or outside the given hyperbola
Stores the value of the equation
Generate output based on value of p
Driver Code
Function to count the number of subarrays having even Bitwise XOR
Store the required result
Generate subarrays with arr [ i ] as the first element
Store XOR of current subarray
Generate subarrays with arr [ j ] as the last element
Calculate Bitwise XOR of the current subarray
If XOR is even , increase ans by 1
Prthe result
Driver Code
Given array
Stores the size of the array
Function Call
Function to find the Kth element in the required permutation
Store the required result
If K is in the first N / 2 elements , print K * 2
Otherwise , K is greater than N / 2
If N is even
If N is odd
Print the required result
Driver Code
Function to modify a string such that there doesn 't exist any pair of indices consisting of 1s, whose GCD is 1 and are divisible by each other
Flips characters at indices 4 N , 4 N - 2 , 4 N - 4 . ... upto N terms
Print the string
Driver code
Initialize the string S
function call
Function to check if any character is a vowel or not
Lowercase vowels
Uppercase vowels
Otherwise
Function to check if string S can be split into two substrings with equal number of vowels
Stores the count of vowels in the string S
Traverse over the string
If S [ i ] is vowel
Stores the count of vowels upto the current index
Traverse over the string
If S [ i ] is vowel
If vowelsTillNow and totalVowels are equal
Otherwise
Driver Code
Python3 program to implement the above approach
Function to calculate maximum sum possible of a matrix by multiplying pairs of adjacent elements with - 1 any number of times ( possibly zero )
Store the maximum sum of matrix possible
Stores the count of negative values in the matrix
Store minimum absolute value present in the matrix
Traverse the matrix row - wise
Update sum
If current element is negative , increment the negative count
If current value is less than the overall minimum in A [ ] , update the overall minimum
If there are odd number of negative values , then the answer will be sum of the absolute values of all elements - 2 * minVal
Print maximum sum
Driver Code
Given matrix
Dimensions of matrix
Function to find the total area of walls painted in N row - houses
Stores total area of N row - houses that needs to be painted
Traverse the array of wall heights
Update total area painted
Update total
Traverse all the houses and print the shared walls
Update total
Print total area needs to paint
Driver Code
Given N , W & L
Given heights of houses
Function Call
Python 3 program for the above approach
Function to find the maximum sum of count of distinct prime factors of K array elements
Stores the count of distinct primes
Stores 1 and 0 at prime and non - prime indices respectively
Initialize the count of factors to 0
Sieve of Eratosthenes
Count of factors of a prime number is 1
Increment CountDistinct of all multiples of i
Mark its multiples non - prime
Stores the maximum sum of distinct prime factors of K array elements
Stores the count of all distinct prime factors
Traverse the array to find count of all array elements
Maximum sum of K prime factors of array elements
Check for the largest prime factor
Increment sum
Decrement its count and K
Print the maximum sum
Driver code
Given array
Size of the array
Given value of K
Function to count the changes required such that no palindromic subof length exceeding 1 is present in the string
Stores the count
Iterate over the string
Palindromic Subof Length 2
Replace the next character
Increment changes
Palindromic Subof Length 3
Replace the next character
Increment changes
Driver Code
Function to find smallest integer K such that incrementing or decrementing each element by K at most once makes all elements equal
Store distinct array elements
Traverse the array , A [ ]
Count elements into the set
Iterator to store first element of B
If M is greater than 3
If M is equal to 3
Stores the first smallest element
Stores the second smallest element
Stores the largest element
IF difference between B_2 and B_1 is equal to B_3 and B_2
If M is equal to 2
Stores the smallest element
Stores the largest element
If difference is an even
If M is equal to 1
Driver Code
Given array
Given size
Print the required smallest integer
Function to find lps [ ] for given pattern pat [ 0. . M - 1 ]
Length of the previous longest prefix suffix
lps [ 0 ] is always 0
Iterate string to calculate lps [ i ]
If the current character of the pattern matches
Otherwise
Otherwise
Function to implement KMP algorithm
Stores the longest prefix and suffix values for pattern
Preprocess the pattern and find the lps [ ] array
Index for txt [ ]
Index for pat [ ]
If pattern is found return 1
Mismatch after j matches
Don 't match lps[0, lps[j - 1]]  characters they will  match anyway
Return 0 if the pattern is not found
Function to find the maximum value K for which S2 concatenated K times is a subof S1
Store the required maximum number
Create a temporary to store word
Store the maximum number of times S2 can occur in S1
Traverse in range [ 0 , numWords - 1 ]
If curWord is found in sequence
Concatenate word to curWord
Increment resCount by 1
Otherwise break the loop
Print the answer
Driver Code
Function Call
Function to count the number of strings that can be generated by placing spaces between pair of adjacent characters
Length of the string
Count of positions for spaces
Count of possible strings
Driver Code
Function to calculate minimum time required to achieve given score target
Store the frequency of elements
Traverse the array p [ ]
Update the frequency
Stores the minimim time required
Store the current score at any time instant t
Iterate until sum is at least equal to target
Increment time with every iteration
Traverse the map
Increment the points
Prthe time required
Driver Code
Function Call
Python3 program for the above approach
Function to construct array B [ ] that stores MEX of array A [ ] excluding A [ i ]
Stores elements present in arr [ ]
Mark all values 1 , if present
Initialize variable to store MEX
Find MEX of arr [ ]
Stores MEX for all indices
Traverse the given array
Update MEX
MEX default
Prthe array B
Driver Code
Given array
Size of array
Function call
Function to print smallest element left in the array and the pairs by given operation
Stores array elements and return the minimum element of arr [ ] in O ( 1 )
Stores all the pairs that can be selected by the given operations
Traverse the array arr [ ]
Traverse pq while count of elements left in pq greater than 1
Stores top element of pq
Pop top element of pq
Stores top element of pq
Pop top element of pq
Insert ( X + Y + 1 ) / 2 in pq
Insert the pair ( X , Y ) in pairsArr [ ]
Print element left in pq by performing the given operations
Stores count of elements in pairsArr [ ]
Print the pairs that can be selected in given operations
If i is the first index of pairsArr [ ]
Print pairs of pairsArr [ ]
If i is not the last index of pairsArr [ ]
If i is the last index of pairsArr [ ]
Driver Code
DFS method to traverse among states of weighting scales
If we reach to more than required steps , return true
Try all possible weights and choose one which returns 1 afterwards
Try this weight only if it is greater than current residueand not same as previous chosen weight
assign this weight to array and recur for next state
if any weight is not possible , return false
method prints weights for alternating scale and if not possible prints ' not ▁ possible '
call dfs with current residue as 0 and current steps as 0
Driver Code
Python3 program for the above approach
Function to find the minimum elements having sum x
Initialize dp table
Pre - compute subproblems
If mod is smaller than element
Minimum elements with sum j upto index i
Return answer
Function to find minimum number of removals to make sum % M in remaining array is equal to X
Sum of all elements
Sum to be removed
Print answer
Driver Code
Given array
Given size
Given mod and x
Function call
Function that finds the minimum count of steps required to make the string special
Stores the frequency of the left & right half of string
Find frequency of left half
Find frequency of left half
Make all characters equal to character c
Case 1 : For s [ i ] < s [ j ]
Subtract all the characters on left side that are <= d
Adding all characters on the right side that same as d
Find minimum value of count
Similarly for Case 2 : s [ i ] > s [ j ]
Return the minimum changes
Driver Code
Given string S
Function Call
Function to rearrange the string to get the longest palindromic substring
Stores the length of str
Store the count of occurrence of each character
Traverse the string , str
Count occurrence of each character
Store the left half of the longest palindromic substring
Store the right half of the longest palindromic substring
Traverse the array , hash [ ]
Append half of the characters to res1
Append half of the characters to res2
reverse string res2 to make res1 + res2 palindrome
Store the remaining characters
Check If any odd character appended to the middle of the resultant string or not
Append all the character which occurs odd number of times
If count of occurrence of characters is odd
Driver Code
Python3 program for the above approach
Function to calculate the number of subsequences that can be formed
Stores the number of subsequences
Iterate over the map
Count the number of subsequences that can be formed from x . first
Number of occurrences of x . first which are left
Return the number of subsequences
Function to create the maximum count of subsequences that can be formed
Stores the frequency of arr [ ]
Update the frequency
Print the number of subsequences
Driver Code
Given array arr [ ]
Function Call
Python3 program for the above approach
Function to check if it is possible to obtain array by concatenating the arrays in list pieces [ ]
Stores the index of element in the given array arr [ ]
Traverse over the list pieces
If item size is 1 and exists in map
If item contains > 1 element then check order of element
If end of the array
Check the order of elements
If order is same as the array elements
Increment idx
If order breaks
Otherwise
Return false if the first element doesn 't exist in m
Return true
Driver Code
Given target list
Given array of list
Function call
Function to modify array to make sum of odd and even indexed elements equal
Stores the count of 0 s , 1 s
Stores sum of odd and even indexed elements respectively
Count 0 s
Count 1 s
Calculate odd_sum and even_sum
If both are equal
Print the original array
Otherwise
Print all the 0 s
For checking even or odd
Update total count of 1 s
Print all 1 s
Given array arr [ ]
Function call
Python3 program for the above approach
Boolean array to set or unset prime non - prime indices
Stores the prefix sum of the count of prime numbers
Function to check if a number is prime or not from 0 to N
If p is a prime
Set its multiples as non - prime
Function to store the count of prime numbers
Function to count the operations to reduce the array to one element by replacing each pair with its LCM
Generating Prime Number
Corner Case
Driver code
Given array arr
Function call
Function to find the winner of game between A and B
win = 1 means B is winner win = 0 means A is winner
If size is even , winner is B
If size is odd , winner is A
Stone will be removed by B
B will take n - 1 stones from current pile having n stones and force A to pick 1 stone
Stone will be removed by A
A will take n - 1 stones from current pile having n stones and force B to pick 1 stone
Print the winner accordingly
Driver Code
Given piles of stone
Function call
Check if ( x2 , y2 ) can be reached from ( x1 , y1 )
Reduce x2 by y2 until it is less than or equal to x1
Reduce y2 by x2 until it is less than or equal to y1
If x2 is reduced to x1
Check if y2 can be reduced to y1 or not
If y2 is reduced to y1
Check if x2 can be reduced to x1 or not
Driver Code
Function to check which player can win the game
Driver Code
Python3 program to implement the above approach
Function to precalculate all the prime up to 10 ^ 6
Initialize prime to true
Iterate [ 2 , sqrt ( N ) ]
If p is prime
Mark all multiple of p as true
Function that finds the length of longest subarray K distinct primes
Precompute all prime up to 2 * 10 ^ 6
Keep track occurrence of prime
Initialize result to - 1
If number is prime then increment its count and decrease k
Decrement K
Remove required elements till k become non - negative
Decrease count so that it may appear in another subarray appearing after this present subarray
Increment K
Take the max value as length of subarray
Return the final length
Given array arr [ ]
Function call
Initializing the max value
Function to generate N prime numbers using Sieve of Eratosthenes
Stores the primes
Setting all numbers to be prime initially
If a prime number is encountered
Set all its multiples as composites
Store all the prime numbers
Function to find the square of the ( N + 1 ) - th prime number
Driver Code
Stores all prime numbers
Python3 program for the above approach
Function to print the required N - th subset
Nearest power of 2 <= N
Now insert k ^ p in the answer
Update N
Print the subset
Driver Code
Returns position of leftmost set bit The rightmost position is taken as 0
Function that gives the position of previous leftmost set bit in n
Function that returns count of set bits present in all numbers from 1 to n
Get the position of leftmost set bit in n
Use the position
Function to count the set bits between the two numbers N and M
Base Case
Get position of next leftmost set bit
If n is of the form 2 ^ x - 1
Update n for next recursive call
Function that counts the set bits between L and R
Driver Code
Given L and R
Function Call
Function to print the required permutation
push odd elements in ' odd ' and even elements in 'even
Check if it possible to arrange the elements
else print the permutation
Print remaining odds are even . and even elements
Driver Code
Function to obtain the maximum gcd of all pairs from 1 to n
Print the answer
Driver Code
Function call
Python3 program to count pairs of array elements which are divisible by K when concatenated
Function to calculate and return the count of pairs
Compute power of 10 modulo k
Calculate length of a [ i ]
Increase count of remainder
Calculate ( a [ i ] * 10 ^ lenj ) % k
Calculate ( k - ( a [ i ] * 10 ^ lenj ) % k ) % k
Increase answer by count
If a pair ( a [ i ] , a [ i ] ) is counted
Return the count of pairs
Driver Code
Function to count the number of N - digit numbers such that sum of every k consecutive digits are equal
Range of numbers
Extract digits of the number
Store the sum of first K digits
Check for every k - consecutive digits using sliding window
Driver Code
Given integer N and K
Function to return the new array private static List < Integer >
Length of the arraylist
Initialize the Arraylist
Sum of absolute differences of element with all elements
Initialize sum to 0
Add the value of sum to ans
Return the final ans
Driver Code
Given array arr [ ]
Function call
Counts number of vertices connected in a component containing x . Stores the count in k .
Incrementing the number of node in a connected component .
Return the number of count of non - accessible cells .
Initialize count of connected vertices found by DFS starting from i .
Update result
Inserting the edge between edge .
Mapping the cell coordinate into node number .
Inserting the edge .
Driver Code
Function to return the minimum distinct powers of 2 required to express s
Reverse the string to start from lower powers
Check if the character is 1
Add in range provided range
Initialize the counter
Check if the character is not 0
Increment the counter
Print the result
Driver Code
Python3 program of the above approach
Function that returns true if Fibonacci sequence is found
Base condition : If pos is equal to length of S and seq length is greater than 3
Return true
Stores current number
Add current digit to num
Avoid integer overflow
Avoid leading zeros
If current number is greater than last two number of seq
If seq length is less 2 or current number is is equal to the last two of the seq
Add to the seq
Recur for i + 1
Remove last added number
If no sequence is found
Function that prints the Fibonacci sequence from the split of string S
Initialize a vector to store the sequence
Call helper function
If sequence length is greater than 3
Print the sequence
If no sequence is found
Print - 1
Driver Code
Given String
Function Call
Function to return the count of all concatenated string with each vowel at least once
Creating a hash array with initial value as 0
Traversing through each string and getting hash value for each of them
Initializing the weight of each string
Find the hash value for each string
Increasing the count of the hash value
Getting all possible pairs of indexes in hash array
Check if the pair which has hash value 31 and multiplying the count of string and add it strCount
Corner case , for strings which independently has all the vowels
Return thre final count
Given array of strings
Python3 program to color a grid such that all same color cells are connected either horizontally or vertically
Current color
Final grid
If even row
Traverse from left to right
If color has been exhausted , move to the next color
Color the grid at this position print ( i , j )
Reduce the color count
Traverse from right to left for odd rows
Print the grid
Driver code
Function to find the count of 0 s to be flipped
Loop traversal to mark K adjacent positions to the right of already existing 1 s .
Loop traversal to mark K adjacent positions to the left of already existing 1 s .
Loop to count the maximum number of 0 s that will be replaced by 1 s
Driver code
Python3 program for the above approach
Keeps a track of directions that is up , down , left , right
Function to perform the dfs traversal
Mark the current node as visited
Increment length from this node
Update the diameter length
Move to next cell in x - direction
Move to next cell in y - direction
Check if cell is invalid then continue
Perform DFS on new cell
Decrement the length
Function to find the maximum length of connected 1 s in the given grid
Increment the id
Traverse the grid [ ]
Find start point of start dfs call
DFS Traversal from cell ( x , y )
Print the maximum length
Driver Code
Given grid [ ] [ ]
Function Call
Function to find the last two digits of 7 ^ N
Case 4
Case 3
Case 2
Case 1
Given number
Function call
Function to find the subsequence with maximum absolute difference
To store the resultant subsequence
First element should be included in the subsequence
Traverse the given array arr [ ]
If current element is greater than the previous element
If the current element is not the local maxima then continue
Else push it in subsequence
If the current element is less then the previous element
If the current element is not the local minima then continue
Else push it in subsequence
Last element should also be included in subsequence
Print the element
Driver Code
Given array
Function Call
Returns maximum length path in subtree rooted at u after removing edge connecting u and v
To find lengths of first and second maximum in subtrees . currMax is to store overall maximum .
loop through all neighbors of u
if neighbor is v , then skip it
call recursively with current neighbor as root
get max from one side and update
store total length by adding max and second max
update current max by adding 1 , i . e . current node is included
method returns maximum product of length of two non - intersecting paths
one by one removing all edges and calling dfs on both subtrees
calling dfs on subtree rooted at g [ i ] [ j ] , excluding edge from g [ i ] [ j ] to i .
calling dfs on subtree rooted at i , edge from i to g [ i ] [ j ]
Utility function to add an undirected edge ( u , v )
Driver code
there are N edges , so + 1 for nodes and + 1 for 1 - based indexing
Function to find a minimum number of steps to reach N from 1
Check until N is greater than 1 and operations can be applied
Condition to choose the operations greedily
Driver code
Function that returns the maximum difference after two given operations on a number
Initialize the strings to make operations
Store length of the string
Make the maximum number using the first operation
Find the first digit which is not equal to '9
Store the digit for the given operation
Replace all the selected ' digit ' with '9
Break after the operation is completed
Check if first digit is equal to '1'
Find the first digit which is greater than '1
Store the digit for the given operation
Replace all the selected ' digit ' with '0
Break after the operation is completed
Select the first digit for the given operation
Return the difference after converting into integers
Driver Code
Python3 implementation to check if the square of X is divisible by K
Function to return if square of X is divisible by K
Finding gcd of x and k
Dividing k by their gcd
Check for divisibility of X by reduced K
Driver Code
Python3 program to find the minimum value of the given expression over all pairs of the array
Function to find the minimum value of the expression
The expression simplifies to finding the minimum xor value pair Sort given array
Calculate min xor of consecutive pairs
Driver code
Function to find maximum length of normal substrings
keeps count of normal characters
indexes of substring
maintain length of longest substring with at most K normal characters
get position of character
check if current character is normal
check if normal characters count exceeds K
update answer with substring length
get position of character
check if character is normal then decrement count
Driver code
initialise the string
Function to count the total number of operations needed to make all array element even
Traverse the given array
If an odd element occurs then increment that element and next adjacent element by 1
Traverse the array if any odd element occurs then return - 1
Returns the count of operations
Driver code
Function to count the number of pairs whose difference is atmost K in an array
Sorting the Array
Variable to store the count of pairs whose difference is atmost K
Loop to consider the consecutive pairs of the array
if Pair found increment the index by 2
Driver Code
Function Call
Function to calculate max profit
Prefix sum array for profitA [ ]
Suffix sum array for profitB [ ]
If all the items are sold in market A
Find the maximum profit when the first i items are sold in market A and the rest of the items are sold in market B for all possible values of i
If all the items are sold in market B
Driver code
Function to calculate max profit
Function to find print path
If a [ 0 ] is 1
Printing path
Seeking for a [ i ] = 0 and a [ i + 1 ] = 1
Printing path
If a [ N - 1 ] = 0
Driver Code
Given Input
Function Call
Function to return the minimum number of edges that need to be added to the given graph such that it contains at least one triangle
adj is the adjacency matrix such that adj [ i ] [ j ] = 1 when there is an edge between i and j
As the graph is undirected so there will be an edge between ( i , j ) and ( j , i )
To store the required count of edges
For every possible vertex triplet
If the vertices form a triangle
If no edges are present
If only 1 edge is required
Two edges are required
Driver code
Number of nodes
Storing the edges in a vector of pairs
Function to check if the given string can be converted to a balanced bracket sequence or not
Check if the first and last characters are equal
Initialize two variables to store the count of open and closed brackets
If the current character is same as the first character
If the current character is same as the last character
If count of open brackets becomes less than 0
Print the new string
If the current character is same as the first character
If bracket sequence is not balanced
Check for unbalanced bracket sequence
Print the sequence
Given Input
Function Call
Function to find the length of the longest subsequence such that the XOR of adjacent elements in the subsequence must be non - decreasing
Computing xor of all the pairs of elements and store them along with the pair ( i , j )
Sort all possible xor values
Initialize the dp array
Calculating the dp array for each possible position and calculating the max length that ends at a particular index
Taking maximum of all position
Driver code
DFS method to traverse through edges , calculating subtree Sum at each node and updating the difference between subtrees
loop for all neighbors except parent and aggregate Sum over all subtrees
store Sum in current node 's  subtree index
at one side subtree Sum is ' Sum ' and other side subtree Sum is ' totalSum ▁ - ▁ Sum ' so their difference will be totalSum - 2 * Sum , by which we 'll update res
Method returns minimum subtree Sum difference
Calculating total Sum of tree and initializing subtree Sum 's  by vertex values
filling edge data structure
calling DFS method at node 0 , with parent as - 1
Driver Code
Function to calculate gcd of two numbers
function to get minimum operation needed
The priority queue holds a minimum element in the top position
push value one by one from the given array
store count of minimum operation needed
All elements are now >= k
It is impossible to make as there are no sufficient elements available
Take two smallest elements and replace them by their LCM first smallest element
Second smallest element
Increment the count
Driver code
Function to check whether the matrices can be made strictly increasing with the given operation
Swap only when a [ i ] [ j ] > b [ i ] [ j ]
Check if rows are strictly increasing
Check if columns are strictly increasing
Driver code
Function to return the required string
First character will always be 'a
To store the resultant string
Since length of the string should be greater than 0 and first element of array should be 1
Check one by one all element of given prefix array
If the difference between any two consecutive elements of the prefix array is greater than 1 then there will be no such string possible that satisfies the given array . Also , string cannot have more than 26 distinct characters
If difference is 0 then the ( i + 1 ) th character will be same as the ith character
If difference is 1 then the ( i + 1 ) th character will be different from the ith character
Return the resultant string
Driver code
Python3 implementation of the approach
Function that returns true if num can be formed with the digits in digits [ ] array
Copy of the digits array
Get last digit
If digit array doesn 't contain  current digit
One occurrence is used
Remove the last digit
Function to return the count of required alphabets
To store the occurrences of digits ( 0 - 9 )
Get last digit
Update the occurrence of the digit
Remove the last digit
If any lowercase character can be picked from the current digits
If any uppercase character can be picked from the current digits
Return the required count of alphabets
Driver code
Function to return the greatest number <= X having at most K set bits .
Remove rightmost set bits one by one until we count becomes k
Return the required number
Driver code
Python3 program to find the minimum numbers of moves needed to move from source to destination .
add edge to graph
Level BFS function to find minimum path from source to sink
Base case
make initial distance of all vertex - 1 from source
Create a queue for BFS
Mark the source node level [ s ] = '0
it will be used to get all adjacent vertices of a vertex
Dequeue a vertex from queue
Get all adjacent vertices of the dequeued vertex s . If a adjacent has not been visited ( level [ i ] < '0' ) , then update level [ i ] = = parent_level [ s ] + 1 and enqueue it
Else , continue to do BFS
return minimum moves from source to sink
Returns minimum numbers of moves from a source ( a cell with value 1 ) to a destination ( a cell with value 2 )
create graph with n * n node each cell consider as node Number of current vertex
connect all 4 adjacent cell to current cell
source index
destination index
find minimum moves
Driver Code
Python 3 program to find two numbers whose sum and GCD is given
Function to find two numbers whose sum and gcd is given
sum != gcd checks that both the numbers are positive or not
Driver code
Function to calculate the maximum distance between any city and its nearest station
Initialize boolean list
Assign True to cities containing station
Function that prints the required sequence
If we cannot split the number into exactly ' N ' parts
If x % n == 0 then the minimum difference is 0 and all numbers are x / n
upto n - ( x % n ) the values will be x / n after that the values will be x / n + 1
Driver code
returns the minimum time required to reach 'X
Stores the minimum time
increment ' t ' by 1
update the sum
Driver code
Driver code
creating a list which stores the frequency of each character
Checking if a character is uppercase or not
Increasing by 1 if uppercase
Decreasing by 1 if lower case
Storing the sum of positive numbers in the frequency array
Storing the sum of negative numbers in the frequency array
If all character balances out then its Yes
If there is only 1 character which does not balances then also it is Yes
Function to count the number of substrings made up of a single distinct character
Stores the required count
Stores the count of substrings possible by using current character
Stores the previous character
Traverse the string
If current character is same as the previous character
Increase count of substrings possible with current character
Reset count of substrings possible with current character
Update count of substrings
Update previous character
Driver Code
Utility pair
function to find minimum sum of difference of consecutive element
ul to store upper limit ll to store lower limit
storethe lower range in ll and upper range in ul
initialize the answer with 0
iterate for all ranges
case 1 , in this case the difference will be 0
change upper limit and lower limit
case 2
store the difference
case 3
store the difference
array of range
Python3 code to implement maximum perfect cube formed after deleting minimum digits
Returns vector of Pre Processed perfect cubes
convert the cube to string and push into preProcessedCubes vector
Utility function for findLargestCube ( ) . Returns the Largest cube number that can be formed
reverse the preProcessed cubes so that we have the largest cube in the beginning of the vector
iterate over all cubes
check if the current digit of the cube matches with that of the number num
if control reaches here , the its not possible to form a perfect cube
wrapper for findLargestCubeUtil ( )
pre process perfect cubes
convert number n to String
Driver Code
number of houses and number of pipes
Array rd stores the ending vertex of pipe
Array wd stores the value of diameters between two pipes
Array cd stores the starting end of pipe
List a , b , c are used to store the final output
Function performing calculations .
If a pipe has no ending vertex but has starting vertex i . e is an outgoing pipe then we need to start DFS with this vertex .
We put the details of component in final output array
main function
set the value of the araray to zero
Function to print simple string
If any two adjacent characters are equal
Initialize it to ' a '
Traverse the loop until it is different from the left and right letter .
Driver Function
Python3 code to find winner of game
if the number of steps is more then n - 1
initially the best is 0 and no of wins is 0.
traverse through all the numbers
if the value of array is more then that of previous best
best is replaced by a [ i ]
if not the first index
no of wins is 1 now
if any position has more then k wins then return
Maximum element will be winner because we move smaller element at end and repeat the process .
driver code
Returns min number of squares needed
swap if a is small size side .
Iterate until small size side is greater then 0
Update result
Driver code
Function to count the total number of possible valid arrays
Make a 2D DP table
Make a 2D prefix sum table
Base Case
Initialize the prefix values
Iterate over the range and update the dp table accordingly
Add the dp values to the prefix sum
Update the prefix sum table
Find the result count of arrays formed
Return the total count of arrays
Driver Code
Function to calculate the longest subarray consisting of 1 s only
Stores the maximum length of subarray containing 1 s only
Traverse the array
If current element is '1
Increment length
Otherwise
Reset length
Update maximum subarray length
Function to perform given queries
Stores count of queries
Traverse each query
Flip the character
Size of array
Given array
Given queries
Number of queries
Stores the upper limit of the range
Stores the overlapping states
Recursive Function to calculate the count of valid integers in the range [ 1 , s ] using memoization
Base Case
If current integer has even count of digits and is not repeated
If current state is already considered
Stores the maximum valid digit at the current index
Stores the count of valid integers
If the current digit is not the most significant digit , i . e , the integer is already started
Iterate through all valid digits
Recursive call for ith digit at the current index
Recursive call for integers having leading zeroes in the beginning
Iterate through all valid digits as most significant digits
Recursive call for ith digit at the current index
Return answer
Function to calculate valid number in the range [ 1 , X ]
Initialize dp array with - 1
Store the range in form of string
Return Count
Function to find the count of integers in the range [ L , R ] such that the frequency of each digit is even
Driver Code
Python program for the above approach
Function to find the minimum cost required to swap every set bit with an unset bit
Stores the indices of set and unset bits of the string S
Traverse the string S
Store the indices
Initialize a dp table of size n1 * n2
Set unreachable states to INF
Fill the dp Table according to the given recurrence relation
Update the value of dp [ i ] [ j ]
Return the minimum cost
Driver Code
Python3 program for the above approach
Function to find the minimum difference between adjacent array element over the given range [ L , R ] for Q Queries
Find the sum of all queries
Left and right boundaries of current range
Print the sum of the current query range
Function to find the minimum absolute difference of adjacent array elements for the given range
Stores the absolute difference of adjacent elements
Find the minimum difference of adjacent elements
Driver Code
Python3 program for the above approach
If index = N + 1
Find count of distinct prime numbers by counting number of set bits .
If count of distinct prime numbers is equal to 4 return 1.
If the state has already been computed
If current position is 1 , then any digit from [ 1 - 9 ] can be placed . If N = 1 , 0 can be also placed .
If the digit is a prime number , set the index of the digit to 1 in the bitmask .
For remaining positions , any digit from [ 0 - 9 ] can be placed
If the digit is a prime number , set the index of the digit to 1 in the bitmask .
Return the answer .
Driver Code
Indexing prime numbers in ascending order
Given Input
Function call .
Function to count the minimum number of operations required to make strings A and B equal
Stores all dp - states
Iterate rate over the range [ 1 , N ]
If A [ i - 1 ] equals to B [ i - 1 ]
Assign Dp [ i - 1 ] to Dp [ i ]
Otherwise
Update dp [ i ]
If swapping is possible
Update dp [ i ]
Return the minimum number of steps required
Given Input
Function Call
Python program for the above approach
Function to find the number of N digit numbers such that at least one digit occurs more than once
Base Case
If repeated is true , then for remaining positions any digit can be placed
If the current state has already been computed , then return it
Stores the count of number for the current recursive calls
If n = 1 , 0 can be also placed
If a digit has occurred for the second time , then set repeated to 1
Otherwise
For remaining positions any digit can be placed
If a digit has occurred for the second time , then set repeated to 1
Return the resultant count for the current recursive call
Function to count all the N - digit numbers having at least one digit 's occurrence more than once
Function to count all possible number satisfying the given criteria
Driver Code
Function to find the maximum number among the two numbers S and T
If "0" exists in the string S
If "0" exists in the string T
Else return the maximum number formed
Recursive function to find maximum number formed such that the sum of cost of digits of formed number is K
Base Case
Return the stored state
Including the digit ( idx + 1 )
Excluding the digit ( idx + 1 )
Store the result and return
Function to find the maximum number formed such that the sum of the cost digits in the formed number is K
Stores all Dp - states
Recursive Call
Return the result
Driver Code
Python3 program for the above approach
Function to calculate count of ' N ' digit numbers such that bitwise AND of adjacent digits is 0.
If digit = n + 1 , a valid n - digit number has been formed
If the state has already been computed
If current position is 1 , then any digit from [ 1 - 9 ] can be placed . If n = 1 , 0 can be also placed .
For remaining positions , any digit from [ 0 - 9 ] can be placed after checking the conditions .
Check if bitwise AND of current digit and previous digit is 0.
Return answer
Driver code
Given Input
Function call
dp array
Function to calculate the number of permutations of N , where only K bars are visible from the left .
If subproblem has already been calculated , return
Only ascending order is possible
N is placed at the first position The nest N - 1 are arranged in ( N - 1 ) ! ways
Recursing
Input
Initialize dp array
Function call
Power function to calculate long powers with mod
Function for finding number of ways to create string with length N and atmost K contiguous vowels
Array dp to store number of ways
dp [ i ] [ 0 ] = ( dp [ i - 1 ] [ 0 ] + dp [ i - 1 ] [ 1 ] . . dp [ i - 1 ] [ k ] ) * 21
Now setting sum to be dp [ i ] [ 0 ]
If j > i , no ways are possible to create a string with length i and vowel j
If j = i all the character should be vowel
dp [ i ] [ j ] relation with dp [ i - 1 ] [ j - 1 ]
Adding dp [ i ] [ j ] in the sum
Driver Code
Input
Function Call
Function to find maximum length of the upper boundary formed by placing each of the rectangles either horizontally or vertically
Stores the intermediate transition states
Place the first rectangle horizontally
Place the first rectangle vertically
Place horizontally
Stores the difference in height of current and previous rectangle
Take maximum out of two options
Place Vertically
Stores the difference in height of current and previous rectangle
Take maximum out two options
Print maximum of horizontal or vertical alignment of the last rectangle
Driver Code
Function to find the Nth number with exactly two bits set
Initialize variables
Initialize the range in which the value of ' a ' is present
Perform Binary Search
Find the mid value
Update the range using the mid value t
Find b value using a and N
Print the value 2 ^ a + 2 ^ b
Driver Code
Function Call
Function to find the longest subsequence from the given array with maximum sum
Stores the largest element of the array
If Max is less than 0
Print the largest element of the array
Traverse the array
If arr [ i ] is greater than or equal to 0
Print elements of the subsequence
Driver code
Function to find the total number of ways to represent N as the sum of integers over the range [ 1 , K ]
Initialize a list
Update dp [ 0 ] to 1
Iterate over the range [ 1 , K + 1 ]
Iterate over the range [ 1 , N + 1 ]
If col is greater than or equal to row
Update current dp [ col ] state
Return the total number of ways
Given inputs
Function to check if the given range of queries form an AP or not in the given array arr [ ]
Stores length of the longest subarray forming AP for every array element
Iterate over the range [ 0 , N ]
Stores the index of the last element of forming AP
Iterate until the element at index ( j , j + 1 ) forms AP
Increment j by 1
Traverse the current subarray over the range [ i , j - 1 ]
Update the length of the longest subarray at index k
Update the value of i
Traverse the given queries
Print the result
Otherwise
Driver Code
Python3 program for the above approach
Stores the values at recursive states
Function to find the minimum difference between sum of two K - length subsets
Base Case
If k1 and k2 are 0 , then return the absolute difference between sum1 and sum2
Otherwise , return INT_MAX
If the result is already computed , return the result
Store the 3 options
Including the element in first subset
Including the element in second subset
Not including the current element in both the subsets
Store minimum of 3 values obtained
Return the value for the current states
Driver Code
Function to calculate the N - th Geek - onacci Number
Stores the geekonacci series
Store the first three terms of the series
Iterate over the range [ 3 , N ]
Update the value of arr [ i ] as the sum of previous 3 terms in the series
Return the last element of arr [ ] as the N - th term
Driver Code
Python program for the above approach
Function to find maximum sum of a subsequence satisfying the given conditions
Stores the maximum sum
Starting index of the subsequence
Stores the pair of maximum value and the index of that value
Traverse the array
Increment the first value of deque by arr [ i ] and store it in dp [ i ]
Delete all the values which are less than dp [ i ] in deque
Append the current pair of value and index in deque
If first value of the queue is at a distance > K
Return the value at the last index
Driver Code
Function to find minimum count of days required to give a cure such that the high risk person and risk person does not get a dose on same day .
Stores count of persons whose age is less than or equal to 10 and greater than or equal to 60.
Stores the count of persons whose age is in the range [ 11 , 59 ]
Traverse the array arr [ ]
If age less than or equal to 10 or greater than or equal to 60
Update risk
Update normal_risk
Calculate days to cure risk and normal_risk persons
Prthe days
Driver Code
Given array
Size of the array
Given P
Python 3 program to implement the above approach
Function to count numbers in the range [ 0 , X ] whose product of digit is K
If count of digits in a number greater than count of digits in X
If product of digits of a number equal to K
If overlapping subproblems already occurred
Stores count of numbers whose product of digits is K
Check if the numbers exceeds K or not
Iterate over all possible value of i - th digits
if number contains leading 0
Update res
Update res
Return res
Utility function to count the numbers in the range [ L , R ] whose prod of digits is K
Stores numbers in the form of string
Stores overlapping subproblems
Stores count of numbers in the range [ 0 , R ] whose product of digits is k
Update str
Stores count of numbers in
the range [ 0 , L - 1 ] whose product of digits is k
Driver Code
Function to find the number of vowel permutations possible
To avoid the large output value
Initialize 2D dp array
Initialize dp [ 1 ] [ i ] as 1 since string of length 1 will consist of only one vowel in the string
Directed graph using the adjacency matrix
Iterate over the range [ 1 , N ]
Traverse the directed graph
Traversing the list
Update dp [ i + 1 ] [ u ]
Stores total count of permutations
Return count of permutations
Driver code
Maximum Number of nodes
Adjacency list
Stores Bitwise OR of each node
Function to add edges to the Tree
Traverse the edges
Add edges
Function to perform DFS Traversal on the given tree
Initialize answer with bitwise OR of current node
Iterate over each child of the current node
Skip parent node
Call DFS for each child
Taking bitwise OR of the answer of the child to find node 's OR value
Function to call DFS from the '= root for precomputing answers
Function to calculate and print the Bitwise OR for Q queries
Perform preprocessing
Iterate over each given query
Utility function to find and print bitwise OR for Q queries
Function to add edges to graph
Function call
Driver Code
Number of nodes
Function call
Python program for the above approach
Function to return the maximum of two elements
Function to find the maximum sum of selecting K elements from the given 2D array arr
dp table of size ( K + 1 ) * ( N + 1 )
Initialize dp [ 0 ] [ i ] = 0
Initialize dp [ i ] [ 0 ] = 0
Selecting i elements
Select i elements till jth row
sum = 0 , to keep track of cummulative elements sum
Traverse arr [ j ] [ k ] until number of elements until k > i
Select arr [ j ] [ k - 1 ] th item
Store the maxSum in dp [ i ] [ j + 1 ]
Return the maximum sum
Driver Code
Function Call
Function to find all the subsequences of the str1ing with non - repeating ch1aracters
Base case
Insert current subsequence
If str1 [ i ] is not present in the current subsequence
Insert str1 [ i ] into the set
Insert str1 [ i ] into the current subsequence
Remove str1 [ i ] from current subsequence
Remove str1 [ i ] from the set
Not including str1 [ i ] from the current subsequence
Utility function to print all subsequences of str1ing with non - repeating ch1aracters
Stores all possible subsequences with non - repeating ch1aracters
Stores subsequence with non - repeating ch1aracters
Traverse all possible subsequences containing non - repeating ch1aracters
Print subsequence
Driver Code
Function to count K - length strings from first N alphabets
To keep track of column sum in dp
Auxiliary 2d dp array
Initialize dp [ 0 ] [ i ] = 1 and update the column_sum
Iterate for K times
Iterate for N times
dp [ i ] [ j ] : Stores the number of ways to form i - length strings consisting of j letters
Update the column_sum
Print number of ways to arrange K - length strings with N alphabets
Driver Code
Given N and K
Function Call
Function to count N - length strings consisting of vowels only sorted lexicographically
Stores count of strings consisting of vowels sorted lexicographically of all possible lengths
Initialize DP [ 1 ] [ 1 ]
Traverse the matrix row - wise
Base Case
Return the result
Driver Code
Function Call
Python3 program for the above approach
Function to perform the DFS Traversal on the given Tree
To check if v is leaf vertex
Initialize answer for vertex v
Traverse adjacency list of v
Update maximum subtree sum
If v is leaf
Function to calculate maximum subtree sum for each vertex
Add Edegs to the list
Calculate answer
Prthe result
Driver Code
Given nodes
Give N edges
Given values
Function Call
Function to prcount of char y present in the range [ l , r ]
Length of the string
Stores the precomputed results
Iterate the given string
Increment dp [ i ] [ y - ' a ' ] by 1
Pre - compute
Number of queries
Traverse each query
Print the result for each query
Driver Code
Given string
Given Queries
Function Call
Function to find lower_bound
Function to find length of the longest common subsequence
Find position where element is to be inserted
Return the length of LCS
Function to find the minimum cost required to convert the sequence A exactly same as B
Auxiliary array
Stores positions of elements of A [ ] Initialize index array with - 1
Update the index array with index of corresponding elements of B
Place only A 's array values  with its mapped values  into nums array
Find LCS
No of elements to be added in array A [ ]
Stores minimum cost
Print the minimum cost
Given array A [ ]
Given C
Size of arr A
Size of arr B
Function call
Function that count the maximum number of elements to obtain sum V
Stores the maximum number of elements required to obtain V
Base Case
Initialize all table values as Infinite
Find the max arr required for all values from 1 to V
Go through all arr smaller than i
If current coin value is less than i
Update table [ i ]
Return the final count
Driver Code
Given array
Given sum V
Function Call
Function to get the maximum path sum from top - left cell to all other cells of the given matrix
Store the maximum path sum Initialize the value of dp [ i ] [ j ] to 0.
Base case
Compute the value of dp [ i ] [ j ] using the recurrence relation
Print maximum path sum from the top - left cell
Driver code
Function to find the length of the longest palindromic subString
Length of String str
Stores the dp states
All subStrings of length 1 are palindromes
Check for sub - String of length 2
If adjacent character are same
Update table [ i ] [ i + 1 ]
Check for lengths greater than 2 k is length of subString
Fix the starting index
Ending index of subString of length k
Check for palindromic subString str [ i , j ]
Mark True
Update the maximum length
Return length of LPS
Driver Code
Given String str
Function Call
Python3 program for the above approach
Function to find the maximum sum after flipping a subarray
Stores the total sum of array
Initialize the maximum sum
Iterate over all possible subarrays
Initialize sum of the subarray before flipping sign
Initialize sum of subarray after flipping sign
Calculate the sum of original subarray
Subtract the original subarray sum and add the flipped subarray sum to the total sum
Return the max_sum
Driver Code
Function call
INF is the maximum value which indicates Impossible state
Stores the dp states
Recursive Function that considers all possible even divisors of cur
Indicates impossible state
Check dp [ cur ] is already calculated or not
Initially it is set to INF that meanswe cur can 't be transform to M
Loop to find even divisors of cur
if i is divisor of cur
if i is even
Find recursively for cur + i
Check another divisor
Find recursively for cur + ( cur / i )
Finally store the current state result and return the answer
Function that counts the minimum operation to reduce N to M
Initialise dp state
Function Call
Driver code
Given N and M
Function Call
INF indicates impossible state
Function to find the maximum sum possible by given moves from the array
Checking for boundary
If previously computed subproblem occurs
If element can be moved left
Calculate maximum possible sum by moving left from current index
If element can be moved right
Calculate maximum possible sum by moving right from current index and update the maximum sum
Store the maximum sum
Driver Code
Function call
Function to select the array elements to maximize the sum of the selected elements
If the entire array is solved
Memoized subproblem
Calculate sum considering the current element in the subsequence
Calculate sum without considering the current element in the subsequence
Update the maximum of the above sums in the dp [ ] [ ] table
Driver Code
Initialize the dp array
Function call
Variables used to store data globally
Adjacency list representation of tree
Function to perform DFS Traversal
Mark the node as true
Traverse adjacency list of child node
If already visited then omit the node
Add number of nodes in subtree
Increment the count
Return the nodes
Function to add edges in graph
Function that finds the number of nodes to be removed such that every subtree has size at most K
Function Call to find the number of nodes to remove
Print Removed Nodes
Driver Code
Insert of nodes in graph
Required subtree size
Function Call
MAX size
Graph with { destination , weight }
For storing the sum for ith node
Leaves in subtree of ith .
dfs to find sum of distance of leaves in the subtree of a node
flag is the node is leaf or not
Skipping if parent
Setting flag to false
Doing dfs call
Doing calculation in postorder .
If the node is leaf then we just increment the no . of leaves under the subtree of a node
Adding num of leaves
Calculating answer for the sum in the subtree
dfs function to find the sum of distance of leaves outside the subtree
Number of leaves other than the leaves in the subtree of i
Adding the contribution of leaves outside to the ith node
Adding the leafs outside to ith node 's leaves.
Calculating the sum of distance of leaves in the subtree of a node assuming the root of the tree is 1
Calculating the sum of distance of leaves outside the subtree of node assuming the root of the tree is 1
Answering the queries
Driver Code
1 ( 4 ) / \ ( 2 ) / \ 4 2 ( 5 ) / \ ( 3 ) / \ 5 3
Initialising tree
Function for counting changes
Maximum distance possible is ( n - 1 + m - 1 )
Stores the maximum element
Update the maximum
Stores frequencies of values for respective distances
Initialize frequencies of cells as 0
Count frequencies of cell values in the matrix
Increment frequency of value at distance i + j
Store the most frequent value at i - th distance from ( 0 , 0 ) and ( N - 1 , M - 1 )
Calculate max frequency and total cells at distance i
Count changes required to convert all cells at i - th distance to most frequent value
Driver code
Table to store solution of each subproblem
Function to calculate all possible numbers
Check if position reaches end that is equal to length of N
Check if the result is already computed simply return it
Maximum limit upto which we can place digit . If tight is false , means number has already become smaller so we can place any digit , otherwise N [ pos ]
Chekc if start is false the number has not started yet
Check if we do not start the number at pos then recur forward
If we start the number we can place any digit from 1 to upper_limit
Finding the new tight
Condition if the number has already started
We can place digit upto upperbound & absolute difference with previous digit much be atmost K
Absolute difference atmost K
Store the solution to this subproblem
Driver code
Function call
Python3 program for the above approach
Function to find the total minimum cost of merging two consecutive numbers
Find the size of numbers [ ]
If array is empty , return 0
To store the prefix Sum of numbers array numbers [ ]
Traverse numbers [ ] to find the prefix sum
dp table to memoised the value
For single numbers cost is zero
Iterate for length >= 1
Find sum in range [ i . . j ]
Initialise dp [ i ] [ j ] to _MAX
Iterate for all possible K to find the minimum cost
Update the minimum sum
Return the final minimum cost
Given set of numbers
Function call
Stores the maximum sum possible for every node by including them in a segment with their successors
Stores the maximum sum possible for every node by including them in a segment with their ancestors
Store the maximum sum for every node by including it in a segment with its successors
Update the maximum sums for each node by including them in a sequence with their ancestors
Condition to check , if current node is not root
Add edges
Function to find the maximum answer for each node
Compute the maximum sums with successors
Store the computed maximums
Update the maximum sums by including their ancestors
Print the desired result
Driver code
Number of nodes
Graph
Add edges
Weight of each node
Compute the max sum of segments for each node
Print the answer for every node
Function to get the count of values that can have the maximum value
Sort array in decreasing order
Stores the answer
mark stores the maximum value till each index i
Check if arr [ i ] can be maximum
Update the mark
Print the total count
Driver Code
Given array arr
Function call
Function to return the count of Pairs
Get the maximum element
Array to store count of bits of all elements upto maxm
Store the set bits for powers of 2
Compute the set bits for the remaining elements
Store the frequency of respective counts of set bits
Driver Code
Python3 implementation to find largest subarray sum among all connected components
Function to traverse the undirected graph using the Depth first traversal
Marking the visited vertex as true
Store the connected chain
Recursive call to the DFS algorithm
Function to return maximum subarray sum of each connected component using Kadane 's Algorithm
Following loop finds maximum subarray sum based on Kadane 's  algorithm
Global maximum subarray sum
Returning the sum
Function to find the maximum subarray sum among all connected components
Initializing boolean array to mark visited vertices
maxSum stores the maximum subarray sum
Following loop invokes DFS algorithm
Variable to hold temporary length
Variable to hold temporary maximum subarray sum values
Container to store each chain
DFS algorithm
Variable to hold each chain size
Container to store values of vertices of individual chains
Storing the values of each chain
Function call to find maximum subarray sum of current connection
Conditional to store current maximum subarray sum
Printing global maximum subarray sum
Initializing graph in the form of adjacency list
Defining the number of edges and vertices
Assigning the values for each vertex of the undirected graph
Constructing the undirected graph
List to contain the final result
Function to get the number of desirable binary strings
If we reach end of string and groups are exhausted , return 1
If length is exhausted but groups are still to be made , return 0
If length is not exhausted but groups are exhausted , return 0
If both are negative just return 0
If already calculated , return it
Initialise answer for each state
Loop through every possible m
Driver code
Function to print the matrix
Loop to iterate over the matrix
Function to find the maximum neighbor within the distance of less than equal to K
Loop to find the maximum element within the distance of less than K
Driver Code
Prime list
Sieve array of prime
DP array
Sieve of Eratosthenes .
Push all the primes into prime vector
Function to get the number of distinct ways to get sum as K different primes
If index went out of prime array size or the sum became larger than n return 0
If sum becomes equal to n and j becomes exactly equal to k . Return 1 , else if j is still not equal to k , return 0
If sum != n and still j as exceeded , return 0
If that state is already calculated , return directly the ans
Include the current prime
Exclude the current prime
Return by memoizing the ans
Driver code
Precompute primes by sieve
Vector to store factors of each integer
Initialize the dp array
Precompute all the factors of every integer
Function to count the minimum factor jump
0 jumps required to reach the first cell
Iterate over all cells
calculating for each jump
If a cell is in bound
Return minimum jumps to reach last cell
Driver code
Pre - calculating the factors
Function call
Dynamic programming table
Function to obtain the mask for any integer
List of prime numbers till 50
Iterate through all prime numbers to obtain the mask
Set this prime 's bit ON in the mask
Return the mask value
Function to count the number of ways
Check if subproblem has been solved
Excluding current element in the subset
Check if there are no common prime factors then only this element can be included
Calculate the new mask if this element is included
Store and return the answer
Function to find the count of subarray with all digits unique
Driver code
Function return the maximum sum possible under given condition
Base case
When i is odd
When i is even
Maximum of if we pick last element or not
Driver code
Python3 program for implementation of Optimal Strategy for the Divisor Game using Dynamic Programming
Recursive function to find the winner
check if N = 1 or N = 3 then player B wins
check if N = 2 then player A wins
check if current state already visited then return the previously obtained ans
check if currently it is player A 's turn  then initialise the ans to 0
Traversing across all the divisors of N which are less than N
check if current value of i is a divisor of N
check if it is player A 's turn  then we need at least one true
Else if it is player B 's turn  then we need at least one false
Return the current ans
Driver code
initialise N
Python3 program find the count of mountains in a given Matrix
Function to count number of mountains in a given matrix of size n
form another matrix with one extra layer of border elements . Border elements will contain INT_MIN value .
For border elements , set value as INT_MIN
For rest elements , just copy it into new matrix
Check for mountains in the modified matrix
check for all directions
Driver code
Python3 implementation to find the minimum length of the array
Function to find the length of minimized array
Creating the required dp tables Initialising the dp table by - 1
base case
Check if the two subarray can be combined
Initialising dp1 table with max value
Check if the subarray can be reduced to a single element
Minimal partition of [ 1 : j - 1 ] + 1
Driver code
Memoizing by the use of a table
Function to calculate maximum score
Bse case
If the same state has already been computed
Sum of array in range ( l , r )
If the operation is even - numbered the score is decremented
Exploring all paths , and storing maximum value in DP table to avoid further repetitive recursive calls
Function to find the max score
Prefix sum array
Calculating prefix_sum
Initialising the DP table , - 1 represents the subproblem hasn 't been solved yet
Driver code
Table to store the solution of every sub problem
Here , pos : keeps track of current position . f1 : is the flag to check if current number is less than N or not . pr : represents the previous digit
Base case
Check if this subproblem has already been solved
Placing 0 at the current position as it does not violate the condition
Here flag will be 1 for the next recursive call
Placing 1 at this position only if the previously inserted number is 0
If the number is smaller than N
If the digit at current position is 1
Storing the solution to this subproblem
Function to find the number of integers less than or equal to N with no consecutive 1 aTMs in binary representation
Convert N to binary form
Loop to convert N from Decimal to binary
Calling the function
Driver code
Function which returns total no . of ways to reach nth step from sth steps
Initialize dp array
Initialize ( s - 1 ) th index to 1
Iterate a loop from s to n
starting range for counting ranges
Calculate Maximum moves to Reach ith step
For nth step return dp [ n - 1 ]
Driver Code
no of steps
Atmost steps allowed
starting range
Function to find the maximum sum subsequence such that two adjacent element have atleast difference of K in their indices
DP Array to store the maximum sum obtained till now
Either select the first element or Nothing
Either Select the ( i - 1 ) element or let the previous best answer be the current best answer
Either select the best sum till previous_index or select the current element + best_sum till index - k
Driver Code
Python3 implementation of the approach
Function to return the count of all possible binary strings
Base cases
dp [ i ] [ j ] is the number of possible strings such that '1' just appeared consecutively j times upto ith index
Taking previously calculated value
Taking all the possible cases that can appear at the Nth position
Driver code
Python program to find the maximum count of 1 s
If arr [ i - 2 ] = = 1 then we increment the count of occurences of 1 's
Else we initialise the count with 0
If arr [ i + 2 ] = = 1 then we increment the count of occurences of 1 's
Else we initialise the count with 0
We get the maximum count by skipping the current and the next element .
Driver code
Count the ways to sum up with odd by choosing one element form each pair
Initialize two array with 0
if element is even
store count of even number in i 'th pair
if the element is odd
store count of odd number in i 'th pair
Initial state of dp array
dp [ i ] [ 0 ] = total number of ways to get even sum upto i 'th pair
dp [ i ] [ 1 ] = total number of ways to odd even sum upto i 'th pair
dp [ n - 1 ] [ 1 ] = total number of ways to get odd sum upto n 'th pair
Driver code
Function to return the length of longest consecuetive subsequence after inserting an element
Variable to find maximum value of the array
Calculating maximum value of the array
Declaring the DP table
Variable to store the maximum length
Iterating for every value present in the array
Recurrence for dp [ val ] [ 0 ]
No value can be inserted before 1 , hence the element value should be greater than 1 for this recurrance relation
Recurrence for dp [ val ] [ 1 ]
Maximum length of consecutive sequence ending at 1 is equal to 1
Update the ans variable with the new maximum length possible
Return the ans
Input array
This function checks if an integer n is a Stepping Number
Initalize prevDigit with - 1
Iterate through all digits of n and compare difference between value of previous and current digits
Get Current digit
Single digit is consider as a Stepping Number
Check if absolute difference between prev digit and current digit is 1
A brute force approach based function to find all stepping numbers .
Iterate through all the numbers from [ N , M ] and check if its a stepping number .
Driver code
Display Stepping Numbers in the range [ n , m ]
Python code to count number in the range having the sum of even digits greater than the sum of odd digits
Base Case
check if condition satisfied or not
If this result is already computed simply return it
Maximum limit upto which we can place digit . If tight is 0 , means number has already become smaller so we can place any digit , otherwise num [ index ]
if current digit is odd
if current digit is even
Function to convert n into its digit vector and uses memo ( ) function to return the required count
Initialize dp
Driver Code
Function to return the maximum sum of the sub - sequence such that two consecutive elements have a difference of at least 3 in their indices in the given array
If there is a single element in the array
Either select it or don 't
If there are two elements
Either select the first element or don 't
Either select the first or the second element or don 't select any element
Either select the first element or don 't
Either select the first or the second element or don 't select any element
Either select first , second , third or nothing
For the rest of the elements
Either select the best sum till previous_index or select the current element + best_sum till index - 3
Driver code
Python3 implementation of the above approach
we will only store min counts of sum upto 100
memo [ 0 ] = 0 as 0 is made from 0 elements
fill memo array with min counts of elements that will constitute sum upto 100
min_count will store min count of elements chosen
starting from end iterate over each 2 digits and add min count of elements to min_count
Driver code
Python3 implementation of the approach
Function to return the number of subsequences which have at least one consecutive pair with difference less than or equal to 1
Not required sub - sequences which turn required on adding i
Required sub - sequence till now will be required sequence plus sub - sequence which turns required
Similarly for not required
Also updating total required and not required sub - sequences
Also , storing values in dp
Driver code
Python implementation of above approach
Initialize dp array by - 1
Base cases Index can 't be less than 0
No element is picked hence average cannot be calculated
If remainder is non zero , we cannot divide the sum by count i . e . the average will not be an integer
If we find an average return 1
If we have already calculated this function simply return it instead of calculating it again
If we don 't pick the current element  simple recur for index -1
If we pick the current element add it to our current sum and increment count by 1
Store the value for the current function
Function to return the number of ways
Push - 1 at the beginning to make it 1 - based indexing
Call recursive function waysutil to calculate total ways
Driver code
Python3 Code for above implementation
Variable to store states of dp
Function to return the number closer to integer s
To find the sum closest to zero Since sum can be negative , we will add MAX to it to make it positive
Base cases
Checks if a state is already solved
Recurrence relation
Returning the value
Function to calculate the closest sum value
Calculate the Closest value for every subarray arr [ i - 1 : n ]
Driver function
Input array
Recursive function to return the total paths from grid [ i ] [ j ] to grid [ n - 1 ] [ n - 1 ]
Out of bounds
If the current state hasn 't been solved before 
Only valid move is right
Only valid move is down
Right and down , both are valid moves
Recursive function to return the maximum sum along the path from grid [ i , j ] to grid [ n - 1 , n - 1 ]
Out of bounds
If the current state hasn 't been solved before 
Only valid move is right
Only valid move is down
Right and down , both are valid moves
Driver code
Fill the dp [ n ] [ n ] array with - 1
When source and destination are same then there is only 1 path
Print the count of paths from grid [ 0 , 0 ] to grid [ n - 1 ] [ n - 1 ]
Fill the dp [ n ] [ n ] array again with - 1
When source and destination are same then the sum is grid [ n - 1 ] [ n - 1 ]
Print the maximum sum among all the paths from grid [ 0 , 0 ] to grid [ n - 1 ] [ n - 1 ]
Python3 implementation of the approach
Array to store bit - wise prefix count
Function to find the prefix sum
Loop for each bit
Loop to find prefix count
Function to answer query
To store the answer
Loop for each bit
To store the number of variables with ith bit set
Condition for ith bit of answer to be set
Driver code
Python3 implementation of the approach
Function to return the count of distinct palindromic sub - strings of the given string s
To store the positions of palindromic sub - strings
Map to store the sub - strings
Sub - strings of length 1 are palindromes
Store continuous palindromic sub - strings
Store palindromes of size 2
If str [ i ... ( i + 1 ) ] is not a palindromic then set dp [ i ] [ i + 1 ] = 0
Find palindromic sub - strings of length >= 3
End of palindromic substring
If s [ start ] = = s [ end ] and dp [ start + 1 ] [ end - 1 ] is already palindrome then s [ start ... . end ] is also a palindrome
Set dp [ start ] [ end ] = 1
Not a palindrome
Return the count of distinct palindromes
Driver code
Python 3 implementation of the approach
Input matrix
DP matrix
Function to return the sum of the cells arr [ i1 ] [ j1 ] and arr [ i2 ] [ j2 ]
Recursive function to return the required maximum cost path
Column number of second path
Base Case
If already calculated , return from DP matrix
Recurring for neighbouring cells of both paths together
Saving result to the DP matrix for current state
Driver code
set initial value
Python3 program for Bellman - Ford 's single source shortest path algorithm.
The main function that finds shortest distances from src to all other vertices using Bellman - Ford algorithm . The function also detects negative weight cycle The row graph [ i ] represents i - th edge with three values u , v and w .
Initialize distance of all vertices as infinite .
initialize distance of source as 0
Relax all edges | V | - 1 times . A simple shortest path from src to any other vertex can have at - most | V | - 1 edges
check for negative - weight cycles . The above step guarantees shortest distances if graph doesn 't contain  negative weight cycle. If we get a  shorter path, then there is a cycle.
Driver Code
Every edge has three values ( u , v , w ) where the edge is from vertex u to v . And weight of the edge is w .
Python3 implementation of the approach
Function to perform simple DFS
Finding the number of times each bit is set in all the values of a subtree rooted at v
Checking for each bit whether the numbers with that particular bit as set are either zero in both the resulting trees or greater than zero in both the resulting trees
Driver code
Number of nodes
ArrayList to store the tree
Array to store the value of nodes
Array to store the number of times each bit is set in all the values in complete tree
Finding the set bits in the value of node i
append edges
Python 3 implementation of the above approach
Function to generate the dp array
combination of three integers
take the maximum number of summands
Function to find the maximum number of summands
If n is a smaller number , less than 16 , return dp [ n ]
Else , find a minimal number t as explained in solution
Driver code
Generate dp array
Python3 implementation of the approach
for calculating the number of elements
Allocating Memo table and initializing with INT_MAX
Base case
For every element relax every reachable element ie relax next k elements
reaching next k element
Relaxing the element
return the last element in the array
Driver Code
Function to find the diameter of the tree using Dynamic Programming
Store the first maximum and secondmax
Traverse for all children of node
Call DFS function again
Find first max
Secondmaximum
elif dp1 [ i ] > secondmax : Find secondmaximum
Base case for every node
if firstmax != - 1 : Add
Find dp [ 2 ]
Return maximum of both
Driver Code
Constructed tree is 1 / \ 2 3 / \ 4 5
create undirected edges
Find diameter by calling function
Python implementation of the approach
Function to return the sum of the sub - matrix
Function that returns true if it is possible to find the sub - matrix with required sum
2 - D array to store the sum of all the sub - matrices
Filling of dp [ ] [ ] array
Checking for each possible sub - matrix of size k X k
Sub - matrix with the given sum not found
Driver code
Function call
Prints all stepping numbers reachable from num and in range [ n , m ]
Queue will contain all the stepping Numbers
Get the front element and pop from the queue
If the Stepping Number is in the range [ n , m ] then display
If Stepping Number is 0 or greater than m , no need to explore the neighbors
Get the last digit of the currently visited Stepping Number
There can be 2 cases either digit to be appended is lastDigit + 1 or lastDigit - 1
If lastDigit is 0 then only possible digit after 0 can be 1 for a Stepping Number
If lastDigit is 9 then only possible digit after 9 can be 8 for a Stepping Number
Prints all stepping numbers in range [ n , m ] using BFS .
For every single digit Number ' i ' find all the Stepping Numbers starting with i
Driver code
Display Stepping Numbers in the range [ n , m ]
Python3 implementation of the approach
Global variables for grid , minDistance and visited array
Queue for BFS
Function to find whether the move is valid or not
Function to return the minimum distance from source to the end of the grid
If source is one of the destinations
Set minimum value
Precalculate minDistance of each grid with R * C
Insert source position in queue
Update minimum distance to visit source
Set source to visited
BFS approach for calculating the minDistance of each cell from source
Iterate over all four cells adjacent to current cell
Initialize position of current cell
Cell below the current cell
Push new cell to the queue
Update one of its neightbor 's distance
Above the current cell
Right cell
Left cell
Minimum distance in the first row
Minimum distance in the last row
Minimum distance in the first column
Minimum distance in the last column
If no path exists
Return the minimum distance
Driver code
Function to return the minimum operations required to sum to a number reprented by the binary string S
Reverse the string to consider it from LSB to MSB
initialise the dp table
If S [ 0 ] = '0' , there is no need to perform any operation
If S [ 0 ] = '1' , just perform a single operation ( i . e Add 2 ^ 0 )
Irrespective of the LSB , dp [ 0 ] [ 1 ] is always 1 as there is always the need of making the suffix of the binary string of the form "11 . . . . 1" as suggested by the definition of dp [ i ] [ 1 ]
Transition from dp [ i - 1 ] [ 0 ]
1. Transition from dp [ i - 1 ] [ 1 ] by just doing 1 extra operation of subtracting 2 ^ i 2. Transition from dp [ i - 1 ] [ 0 ] by just doing 1 extra operation of subtracting 2 ^ ( i + 1 )
Transition from dp [ i - 1 ] [ 1 ]
1. Transition from dp [ i - 1 ] [ 1 ] by just doing 1 extra operation of adding 2 ^ ( i + 1 ) 2. Transition from dp [ i - 1 ] [ 0 ] by just doing 1 extra operation of adding 2 ^ i
Driver Code
Function that finds the Nth element of K - Fibonacci series
If N is less than K then the element is '1
first k elements are 1
( K + 1 ) th element is K
find the elements of the K - Fibonacci series
subtract the element at index i - k - 1 and add the element at index i - i from the sum ( sum contains the sum of previous ' K ' elements )
set the new sum
Driver code
get the Nth value of K - Fibonacci series
Python 3 program to find the Minimum sum possible of any bracket sequence of length N using the given values for brackets
DP array
Recursive function to check for correct bracket expression
Not a proper bracket expression
If reaches at end
If proper bracket expression
if not , return max
If already visited
To find out minimum sum
Driver Code
We have input values of N and an array Coins that holds all of the coins . We use data type of because long we want to be able to test large values without integer overflow
Create the ways array to 1 plus the amount to stop overflow
Set the first way to 1 because its 0 and there is 1 way to make 0 with 0 coins
Go through all of the coins
Make a comparison to each index value of ways with the coin value .
Update the ways array
return the value at the Nth position of the ways array .
Driver code
Function to find the minimum cost of sweets
Defining the sweet array
DP array to store the values
Since index starts from 1 we reassign the array into sweet
Assigning base cases for dp array
At 0 it is free
Package not available for desirable amount of sweets
Buying the ' k ' kg package and assigning it to dp array
If no solution , select from previous k - 1 packages
If solution does not exist
Print the solution
Driver Function
Calling the desired function
Recursive Function to find total length of the array where 1 is greater than zero
If reaches till end
If dp is saved
Finding for each length
If the character scanned is 1
If one is greater than zero , add total length scanned till now
Continue with next length
Return the value for start index
Driver Code
Size of string
Calling the function to find the value of function
function to check whether ' ch ' is a vowel or not
function to find the length of longest common subsequence which contains all vowel characters
Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note that L [ i ] [ j ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]
L [ m ] [ n ] contains length of LCS for X [ 0. . n - 1 ] and Y [ 0. . m - 1 ] which contains all vowel characters
Driver Code
function to check if i - th index is valid or not
function to find the minimum number of single digit prime numbers required which when summed up equals to a given number N .
Not possible
Driver Code
Function to print all th distinct sum
Declare a boolean array of size equal to total sum of the array
Fill the first row beforehand
dp [ j ] will be true only if sum j can be formed by any possible addition of numbers in given array upto index i , otherwise false
Iterate from maxSum to 1 and avoid lookup on any other row
Do not change the dp array for j less than arr [ i ]
If dp [ j ] is true then print
Function to find the total sum and print the distinct sum
find the sum of array elements
Function to print all the distinct sum
Driver Code
Python program for SP - Wolfish
Function to find the maxCost of path from ( n - 1 , n - 1 ) to ( 0 , 0 ) | recursive approach
base condition
reaches the point
i + j
check if it is a power of 2 , then only move diagonally
if not a power of 2 then move side - wise
Function to return the maximum cost
calling dp function to get the answer
Driver Code
Function calling to get the answer
Python3 program to memoize recursive implementation of LCS problem
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ] memoization applied in recursive solution
base case
if the same state has already been computed
if equal , then we store the value of the function call
store it in arr to avoid further repetitive work in future function calls
store it in arr to avoid further repetitive work in future function calls
Driver Code
assign - 1 to all positions
Prints all stepping numbers reachable from num and in range [ n , m ]
If Stepping Number is in the range [ n , m ] then display
If Stepping Number is 0 or greater than m , then return
Get the last digit of the currently visited Stepping Number
There can be 2 cases either digit to be appended is lastDigit + 1 or lastDigit - 1
If lastDigit is 0 then only possible digit after 0 can be 1 for a Stepping Number
If lastDigit is 9 then only possible digit after 9 can be 8 for a Stepping Number
Method displays all the stepping numbers in range [ n , m ]
For every single digit Number ' i ' find all the Stepping Numbers starting with i
Driver code
Display Stepping Numbers in the range [ n , m ]
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ] memoization applied in recursive solution
base case
if the same state has already been computed
if equal , then we store the value of the function call
store it in arr to avoid further repetitive work in future function calls
store it in arr to avoid further repetitive work in future function calls
Driver code
Function to find number of unique BST
DP to store the number of unique BST with key i
Base case
fill the dp table in top - down approach .
n - i in right * i - 1 in left
Driver Code
Python 3 program for Minimum splits in a string such that substring is a power of 4 or 6.
Function to find if given number is power of another number or not .
Divide given number repeatedly by base value .
return False not a power
Function to find minimum number of partitions of given binary string so that each partition is power of 4 or 6.
DP table to store results of partitioning done at differentindices .
If the last digit is 1 , hence 4 ^ 0 = 1 and 6 ^ 0 = 1
Fix starting position for partition
Binary representation with leading zeroes is not allowed .
Iterate for all different partitions starting from i
Find integer value of current binary partition .
Check if the value is a power of 4 or 6 or not apply recurrence relation
If no partitions are possible , then make dp [ i ] = - 1 to represent this .
Driver code
Return summation of r * nCr
Driver Code
Function to return the count of digits of a number
Function to return a number that contains only digit ' d ' repeated exactly count times
Function to return the count of integers that are composed of a single distinct digit only
Count of digits in L and R
First digits of L and R
If L has lesser number of digits than R
If the number that starts with firstDigitL and has number of digits = countDigitsL is within the range include the number
Exclude the number
If the number that starts with firstDigitR and has number of digits = countDigitsR is within the range include the number
Exclude the number
If both L and R have equal number of digits
Include the number greater than L upto the maximum number whose digit = coutDigitsL
Exclude the numbers which are greater than R
Return the count
Driver code
Python3 program for maximum average sum partition
bottom up approach to calculate score
storing averages from starting to each i ;
Driver Code
atmost partitioning size
Function to find maximum subarray product .
As maximum product can be negative , so initialize ans with minimum integer value .
Variable to store maximum product until current value .
Variable to store minimum product until current value .
If current element is positive , update maxval . Update minval if it is negative .
If current element is zero , maximum product cannot end at current element . Update minval with 1 and maxval with 0. maxval is updated to 0 as in case all other elements are negative , then maxval is 0.
If current element is negative , then new value of maxval is previous minval * arr [ i ] and new value of minval is previous maxval * arr [ i ] . Before updating maxval , store its previous value in prevMax to be used to update minval .
Update ans if necessary .
If maxval is zero , then to calculate product for next iteration , it should be set to 1 as maximum product subarray does not include 0. The minimum possible value to be considered in maximum product subarray is already stored in minval , so when maxval is negative it is set to 1.
Driver Code
Python3 program to find the maximum and minimum values of an Algebraic expression of given form
Finding sum of array elements
shifting the integers by 50 so that they become positive
dp [ i ] [ j ] represents true if sum j can be reachable by choosing i numbers
if dp [ i ] [ j ] is true , that means it is possible to select i numbers from ( n + m ) numbers to sum upto j
k can be at max n because the left expression has n numbers
checking if a particular sum can be reachable by choosing n numbers
getting the actual sum as we shifted the numbers by 50 to avoid negative indexing in array
Driver Code
Python3 program to check if any valid sequence is divisible by M
Base case
check if sum is divisible by M
check if the current state is already computed
1. Try placing '+
2. Try placing '-
calculate value of res for recursive case
store the value for res for current states and return for parent call
Driver code
Python3 code to find the maximum path length considering any node as root
function to pre - calculate the array inn [ ] which stores the maximum height when travelled via branches
initially every node has 0 height
traverse in the subtree of u
if child is same as parent
dfs called
recursively calculate the max height
function to pre - calculate the array ouut [ ] which stores the maximum height when traveled via parent
stores the longest and second longest branches
traverse in the subtress of u
compare and store the longest and second longest
traverse in the subtree of u
if longest branch has the node , then consider the second longest branch
recursively calculate out [ i ]
dfs function call
function to prall the maximum heights from every node
traversal to calculate inn [ ] array
traversal to calculate out [ ] array
prall maximum heights
Driver Code
initialize the tree given in the diagram
function to print the maximum height from every node
Return the nth element of Golomb sequence
base case
Recursive Step
Print the first n term of Golomb Sequence
Finding first n terms of Golomb Sequence .
Driver Code
Prints the items which are put in a knapsack of capacity W
Build table K [ ] [ ] in bottom up manner
stores the result of Knapsack
either the result comes from the top ( K [ i - 1 ] [ w ] ) or from ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] ) as in Knapsack table . If it comes from the latter one / it means the item is included .
This item is included .
Since this weight is included its value is deducted
Driver code
To sort the array and return the answer
sort the array
Fill all stated with - 1 when only one element
As dp [ 0 ] = 0 ( base case ) so min no of elements to be removed are n - 1 elements
Iterate from 1 to n - 1
Driver code
function to find the maximum number of segments
stores the maximum number of segments each index can have
0 th index will have 0 segments base case
traverse for all possible segments till n
conditions if ( i + a <= n ) : avoid buffer overflow
if ( i + b <= n ) : avoid buffer overflow
if ( i + c <= n ) : avoid buffer overflow
Driver code
function to maximize the sum of selected numbers
maximum in the sequence
stores the occurrences of the numbers
marks the occurrence of every number in the sequence
ans to store the result
Using the above mentioned approach
if occurence is greater than 0
add it to ans
decrease i - 1 th element by 1
decrease ith element by 1
decrease i
Driver code
Function to find the n - th element
Declare array to store sequence
driver code
Returns the length of the longest common subsequence with a minimum of length of K consecutive segments
length of strings
declare the lcs and cnt array
iterate from i = 1 to n and j = 1 to j = m
stores the maximum of lcs [ i - 1 ] [ j ] and lcs [ i ] [ j - 1 ]
when both the characters are equal of s1 and s2
when length of common segment is more than k , then update lcs answer by adding that segment to the answer
formulate for all length of segments to get the longest subsequence with consecutive Common Segment of length of min k length
update lcs value by adding segment length
Driver code
Python3 program to find if there is path from top left to right bottom
to find the path from top left to bottom right
directions
queue
insert the top right corner .
until queue is empty
mark as visited
destination is reached .
check all four directions
using the direction array
not blocked and valid
Given array
path from arr [ 0 ] [ 0 ] to arr [ row ] [ col ]
prints element and NSE pair for all elements of arr [ ] of size n
push the first element to stack
iterate for rest of the elements
if stack is not empty , then pop an element from stack . If the popped element is greater than next , then a ) print the pair b ) keep popping while elements are greater and stack is not empty
push next to stack so that we can find next smaller for it
After iterating over the loop , the remaining elements in stack do not have the next smaller element , so print - 1 for them
Return Entringer Number E ( n , k )
Base cases
Finding dp [ i ] [ j ]
Driven Program
Returns value of Binomial Coefficient C ( n , k )
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Return the Lm , n Lobb Number .
Driven Program
Return the number of lists with given constraints .
Initialising dp [ 0 ] and dp [ 1 ]
Computing f ( i ) for each 2 <= i <= n .
Driven code
Python3 program to count number of subsequences of given length .
Precompute the prefix and suffix array .
Precompute the prefix 2D array
Precompute the Suffix 2D array .
Find the number of palindromic subsequence of length k
If k is 1.
If k is 2
Adding all the products of prefix array
For k greater than 2. Adding all the products of value of prefix and suffix array .
Driven Program
Python3 program to calculate Minimum cost to make Longest Common Subsequence of length k
Return Minimum cost to make LCS of length k
If k is 0
If length become less than 0 , return big number
If state already calculated
Finding cost
Driver Code
Python3 implementation to find the maximum sum path in a matrix
function to find the maximum sum path in a matric
if there is a single elementif there is a single element only only
dp [ ] [ ] matrix to store the results of each iteration
base case , copying elements of last row
building up the dp [ ] [ ] matrix from bottom to the top row
finding the maximum diagonal element in the ( i + 1 ) th row if that cell exists
adding that ' max ' element to the mat [ i ] [ j ] element
finding the maximum value from the first row of dp [ ] [ ]
required maximum sum
Driver program to test above
This function mainly returns LCS ( str , str ) with a condition that same characters at same index are not considered .
This part of code is same as below post it fills dp [ ] [ ] https : www . geeksforgeeks . org / longest - repeating - subsequence / OR the code mentioned above
This part of code finds the result string using dp [ ] [ ] Initialize result
Traverse dp [ ] [ ] from bottom right
If this cell is same as diagonally adjacent cell just above it , then same characters are present at str [ i - 1 ] and str [ j - 1 ] . Append any of them to result .
Otherwise we move to the side that gave us maximum result .
Since we traverse dp [ ] [ ] from bottom , we get result in reverse order .
Driver Program
Tree traversal to compute minimum difference
Initial min difference is the color of node
Traversing its children
Not traversing the parent
If the child is Adding positively to difference , we include it in the answer Otherwise , we leave the sub - tree and include 0 ( nothing ) in the answer
DFS for colour difference : 1 colour - 2 colour
Minimum colour difference is maximum answer value
Clearing the current value to check for colour2 as well
Interchanging the colours
DFS for colour difference : 2 colour - 1 colour
Checking if colour2 makes the minimum colour difference
Nodes
Adjacency list representation
Edges
Index represent the colour of that node There is no Node 0 , so we start from index 1 to N
Printing the result
Function to calculate the maximum number of equal elements possible with atmost K increment of values . Here we have done sliding window to determine that whether there are x number of elements present which on increment will become equal . The loop here will run in fashion like 0. . . x - 1 , 1. . . x , 2. . . x + 1 , ... . , n - x - 1. . . n - 1
It can be explained with the reasoning that if for some x number of elements we can update the values then the increment to the segment ( i to j having length -> x ) so that all will be equal is ( x * maxx [ j ] ) this is the total sum of segment and ( pre [ j ] - pre [ i ] ) is present sum So difference of them should be less than k if yes , then that segment length ( x ) can be possible return true
sort the array in ascending order
Initializing the prefix array and maximum array
Calculating prefix sum of the array
Calculating max value upto that position in the array
Binary search applied for computation here
printing result
Driver Code
Python 3 program to find maximum score we can get by removing elements from either end .
If only one element left .
If already calculated , return the value .
Computing Maximum value when element at index i and index j is to be choosed .
Driver Code
function to find the maximum sum bitonic subarray
' msis [ ] ' to store the maximum sum increasing subarray up to each index of ' arr ' from the beginning ' msds [ ] ' to store the maximum sum decreasing subarray from each index of ' arr ' up to the end
to store the maximum sum bitonic subarray
building up the maximum sum increasing subarray for each array index
building up the maximum sum decreasing subarray for each array index
for each array index , calculating the maximum sum of bitonic subarray of which it is a part of
if true , then update ' max ' bitonic subarray sum
required maximum sum
Driver Code
Structure to store the start and end point
Function to find Kth smallest number in a vector of merged intervals
Traverse merged [ ] to find Kth smallest element using Linear search .
To combined both type of ranges , overlapping as well as non - overlapping .
Sorting intervals according to start time
Merging all intervals into merged
To check if starting point of next range is lying between the previous range and ending point of next range is greater than the Ending point of previous range then update ending point of previous range by ending point of next range .
If starting point of next range is greater than the ending point of previous range then store next range in merged [ ] .
Driver Code
Merge all intervals into merged [ ]
Processing all queries on merged intervals
Prints super sequence of a [ 0. . m - 1 ] and b [ 0. . n - 1 ]
Fill table in bottom up manner
Below steps follow above recurrence
Following code is used to print supersequence
Create a string of size index + 1 to store the result
Start from the right - most - bottom - most corner and one by one store characters in res [ ]
If current character in a [ ] and b are same , then current character is part of LCS
Put current character in result
reduce values of i , j and indexs
If not same , then find the larger of two and go in the direction of larger value
Copy remaining characters of string 'a
Copy remaining characters of string 'b
Print the result
Driver Code
Python3 program to write characters in minimum time by inserting , removing and copying operation
method returns minimum time to write ' N ' characters
declare dp array and initialize with zero
first char will always take insertion time
loop for ' N ' number of times
if current char count is even then choose minimum from result for ( i - 1 ) chars and time for insertion and result for half of chars and time for copy
if current char count is odd then choose minimum from result for ( i - 1 ) chars and time for insertion and result for half of chars and time for copy and one extra character deletion
Driver Code
function to count the total number of ways
table to store values of subproblems
Fill the table upto value n
recurrence relation
base cases
i = = m
required number of ways
Driver code
Function for finding longest alternating subsequence
" inc " and " dec " initialized as 1 as single element is still LAS
Iterate from second element
" inc " changes iff " dec " changes
" dec " changes iff " inc " changes
Return the maximum length
Driver Code
Function Call
Utility function for calculating Minimum element to delete
Condition to compare characters
Recursive function call
Return value , increamenting by 1 return minimum Element between two values
Function to calculate the minimum Element required to delete for Making string pelindrom
Utility function call
Driver code
function definition
base cases
checking the ndesired condition
if yes increment the cunt
if no
return the value form the table
else store the max tranforamtion from the subsequence
return the dp [ - 1 ] [ - 1 ]
initialize the array with - 1
Python3 program to find the largest sum zigzag sequence
Returns largest sum of a Zigzag sequence starting from ( i , j ) and ending at a bottom cell .
If we have reached bottom
Find the largest sum by considering all possible next elements in sequence .
Returns largest possible sum of a Zizag sequence starting from top and ending at bottom .
Consider all cells of top row as starting point
Driver Code
Python3 program to get number of ways to increase LCS by 1
Method returns total ways to increase LCS length by 1
Fill positions of each character in vector vector < int > position [ M ] ;
Initializing 2D array by 0 values
Filling LCS array for prefix substrings
Filling LCS array for suffix substrings
Looping for all possible insertion positions in first string
Trying all possible lower case characters
Now for each character , loop over same character positions in second string
If both , left and right substrings make total LCS then increase result by 1
Driver code to test above methods
n is total number of characters . bCount and cCount are counts of ' b ' and ' c ' respectively .
Base cases
Three cases , we choose , a or b or c In all three cases n decreases by 1.
Driver code
Total number of characters
Python3 program to find Maximum path sum start any column in row '0' and ends up to any column in row 'n-1
function find maximum sum path
create 2D matrix to store the sum of the path initialize all dp matrix as '0
copy all element of first column into dp first column
Find maximum path sum that end ups at any column of last row 'N-1
return maximum sum path
driver program to test above function
Dynamic and Logarithm approach find probability of at least k heads
dp [ i ] is going to store Log ( i ! ) in base 2
Initialize result
Iterate from k heads to n heads
Preprocess all the logarithm value on base 2
Driver code
Probability of getting 2 head out of 3 coins
Probability of getting 3 head out of 6 coins
Probability of getting 500 head out of 10000 coins
Function returns true if n people can vote using two machines in x time .
dp [ i ] [ j ] stores maximum possible number of people among arr [ 0. . i - 1 ] can vote in j time .
Find sum of all times
Fill dp [ ] [ ] in bottom up manner ( Similar to knapsack ) .
If remaining people can go to other machine .
Driver Code
Python3 program to print maximum path sum ending with each position x such that all path step positions divide x .
Create an array such that dp [ i ] stores maximum path sum ending with i .
Calculating maximum sum path for each element .
Finding previous step for arr [ i ] Moving from 1 to sqrt ( i + 1 ) since all the divisiors are present from sqrt ( i + 1 ) .
Checking if j is divisior of i + 1.
Checking which divisor will provide greater value .
Printing the answer ( Maximum path sum ending with every position i + 1 ) .
Driver Program
function to calculate min sum using dp
if elements are less than or equal to 4
save start four element as it is
compute sum [ ] for all rest elements
sum [ i ] = ar [ i ] + ( * min_element ( sum + i - 4 , sum + i ) ) ;
Since one of the last 4 elements must be present
Driver Code
Return sum of maximum sum alternating sequence starting with arr [ 0 ] and is first decreasing .
handling the edge case
Stores sum of decreasing and increasing sub - sequence
store sum of increasing and decreasing sun - sequence
As per question , first element must be part of solution .
Traverse remaining elements of array
IF current sub - sequence is decreasing the update dec [ j ] if needed . dec [ i ] by current inc [ j ] + arr [ i ]
Revert the flag , if first decreasing is found
If next element is greater but flag should be 1 i . e . this element should be counted after the first decreasing element gets counted
If current sub - sequence is increasing then update inc [ i ]
Find maximum sum in b / w inc [ ] and dec [ ]
Return maximum sum alternate sun - sequence
Driver program
Function to calculate padovan number P ( n )
0 th , 1 st and 2 nd number of the series are 1
Driver Code
A function to check if a given cell ( row , col ) can be included in DFS
row number is in range , column number is in range and value is 1 and not yet visited
A utility function to do DFS for a 2D boolean matrix . It only considers the 8 neighbours as adjacent vertices
These arrays are used to get row and column numbers of 8 neighbours of a given cell
Mark this cell as visited
Recur for all connected neighbours
increment region length by one
The main function that returns largest length region of a given boolean 2D matrix
Make a bool array to mark visited cells . Initially all cells are unvisited
Initialize result as 0 and travesle through the all cells of given matrix
If a cell with value 1 is not
visited yet , then new region found
maximum region
Driver Code
Function call
Iterative function
declaring base values for positions 0 and 1
generating number
Driver Code
A Dynamic programming based Python program to find maximum sum by recursively breaking a number in 3 parts .
Function to find the maximum sum
base conditions
Fill in bottom - up manner using recursive formula .
Driver program to run the case
Returns the longest repeating non - overlapping substring in str
building table in bottom - up manner
( j - i ) > LCSRe [ i - 1 ] [ j - 1 ] to remove overlapping
updating maximum length of the substring and updating the finishing index of the suffix
If we have non - empty result , then insert all characters from first character to last character of string
Driver Code
Python3 program to find minimum cost to get exactly W Kg with given packets
Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces
Build the table val [ ] in bottom up manner and return the last entry from the table
Driver code
Utility function to calculate sum of all vector elements
Function to construct Maximum Sum Increasing Subsequence
L [ i ] - The Maximum Sum Increasing Subsequence that ends with arr [ i ]
L [ 0 ] is equal to arr [ 0 ]
start from index 1
for every j less than i
L [ i ] = { MaxSum ( L [ j ] ) } + arr [ i ] where j < i and arr [ j ] < arr [ i ]
L [ i ] ends with arr [ i ]
L [ i ] now stores Maximum Sum Increasing Subsequence of arr [ 0. . i ] that ends with arr [ i ]
find max
max will contain result
Driver Code
construct and prMax Sum IS of arr
Utility function to print LIS
Function to construct and print Longest Increasing Subsequence
L [ i ] - The longest increasing sub - sequence ends with arr [ i ]
L [ 0 ] is equal to arr [ 0 ]
start from index 1
do for every j less than i
L [ i ] = { Max ( L [ j ] ) } + arr [ i ] where j < i and arr [ j ] < arr [ i ]
L [ i ] ends with arr [ i ]
L [ i ] now stores increasing sub - sequence of arr [ 0. . i ] that ends with arr [ i ]
LIS will be max of all increasing sub - sequences of arr
max will contain LIS
Driver Code
construct and print LIS of arr
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]
Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note that L [ i ] [ j ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]
L [ m ] [ n ] contains length of LCS for X and Y
find if given string is K - Palindrome or not
Find reverse of string
find longest palindromic subsequence of given string
If the difference between longest palindromic subsequence and the original string is less than equal to k , then the string is k - palindrome
Driver program
Function that matches input strr with given wildcard pattern
empty pattern can only match with empty string
lookup table for storing results of subproblems
empty pattern can match with empty string
Only ' * ' can match with empty string
fill the table in bottom - up fashion
Two cases if we see a ' * ' a ) We ignore a * aTM character and move to next character in the pattern , i . e . , a * aTM indicates an empty sequence . b ) ' * ' character matches with ith character in input
Current characters are considered as matching in two cases ( a ) current character of pattern is ' ? ' ( b ) characters actually match
If characters don 't match
Driver code
char pattern [ ] = " ba * * * * * ab " char pattern [ ] = " ba * ab " char pattern [ ] = " a * ab " char pattern [ ] = " a * * * * * ab " char pattern [ ] = " * a * * * * * ab " char pattern [ ] = " ba * ab * * * * " char pattern [ ] = " * * * * " char pattern [ ] = " * " char pattern [ ] = " aa ? ab " char pattern [ ] = " b * b " char pattern [ ] = " a * a " char pattern [ ] = " baaabab " char pattern [ ] = " ? baaabab " char pattern [ ] = " * baaaba * "
Find if given string is K - Palindrome or not
If first string is empty , the only option is to remove all characters of second string
If second string is empty , the only option is to remove all characters of first string
If last characters of two strings are same , ignore last characters and get count for remaining strings .
If last characters are not same , 1. Remove last char from str1 and recur for m - 1 and n 2. Remove last char from str2 and recur for m and n - 1 Take minimum of above two operations res = 1 + min ( isKPalRec ( str1 , str2 , m - 1 , n ) , Remove from str1 ( isKPalRec ( str1 , str2 , m , n - 1 ) ) ) Remove from str2
Returns true if str is k palindrome .
Driver program
arr [ ] represents time taken by n given tasks
Corner Cases
Initialize value for the case when there is only one task in task list . First task is included
First task is exluded
Process remaining n - 1 tasks
Time taken if current task is included There are two possibilities ( a ) Previous task is also included ( b ) Previous task is not included
Time taken when current task is not included . There is only one possibility that previous task is also included .
Update incl and excl for next iteration
Return maximum of two values for last task
Driver code
A utility function to multiply two matrices a [ ] [ ] and b [ ] [ ] . Multiplication result is stored back in b [ ] [ ]
Creating an auxiliary matrix to store elements of the multiplication matrix
storing the multiplication result in a [ ] [ ]
Updating our matrix
Function to compute F raise to power n - 2.
Multiply it with initial values i . e with F ( 0 ) = 0 , F ( 1 ) = 1 , F ( 2 ) = 1
Multiply it with initial values i . e with F ( 0 ) = 0 , F ( 1 ) = 1 , F ( 2 ) = 1
Return n 'th term of a series defined using below recurrence relation. f(n) is defined as f(n) = f(n-1) + f(n-2) + f(n-3), n>=3 Base Cases : f(0) = 0, f(1) = 1, f(2) = 1
Driver code
Returns count of count of ways to place 1 x 4 tiles on n x 4 grid .
Create a table to store results of subproblems dp [ i ] stores count of ways for i x 4 grid .
Fill the table from d [ 1 ] to dp [ n ]
Base cases
dp ( i - 1 ) : Place first tile horizontally dp ( n - 4 ) : Place first tile vertically which means 3 more tiles have to be placed vertically .
Driver code to test above
Returns nCr % p
Optimization for the cases when r is large compared to n - r
The array C is going to store last row of pascal triangle at the end . And last entry of last row is nCr .
Top row of Pascal Triangle
One by constructs remaining rows of Pascal Triangle from top to bottom
Fill entries of current row using previous row values
nCj = ( n - 1 ) Cj + ( n - 1 ) C ( j - 1 )
Driver Program
Base Case
Variables for storing previous values
using above recursive formula
Return result for n
Driver Code
Explicitly fill for j = 0
Fill for remaining values of j
Driver program
Function returns count of ways to cover ' dist '
Initialize base values . There is one way to cover 0 and 1 distances and two ways to cover 2 distance
Fill the count array in bottom up manner
driver program
Returns the count of even length sequences
Calculate SUM ( ( nCr ) ^ 2 )
Compute nCr using nC ( r - 1 ) nCr / nC ( r - 1 ) = ( n + 1 - r ) / r ;
Driver Code
A utility function to find minimum in arr [ l . . h ]
A utility function to find maximum in arr [ l . . h ]
Returns the minimum number of removals from either end in arr [ l . . h ] so that 2 * min becomes greater than max .
Create a table to store solutions of subproblems
Fill table using above recursive formula . Note that the table is filled in diagonal fashion ( similar to http : goo . gl / PQqoS ) , from diagonal elements to table [ 0 ] [ n - 1 ] which is the result .
Driver Code
function to return count of possible paths to reach cell at row number m and column number n from the topmost leftmost cell ( cell at 1 , 1 )
If either given row number is first or given column number is first
If diagonal movements are allowed then the last addition is required .
Driver program to test above function
Python3 program to count all possible paths from top left to top bottom using combinatorics
We have to calculate m + n - 2 C n - 1 here which will be ( m + n - 2 ) ! / ( n - 1 ) ! ( m - 1 ) ! path = 1 ;
Driver code
Returns length of the longest AP subset in a given set
Create a table and initialize all values as 2. The value of L [ i ] [ j ] stores LLAP with set [ i ] and set [ j ] as first two elements of AP . Only valid entries are the entries where j > i
Initialize the result
Fill entries in last column as 2. There will always be two elements in AP with last number of set as second element in AP
Consider every element as second element of AP
Search for i and k for j
Before changing i , set L [ i ] [ j ] as 2
Found i and k for j , LLAP with i and j as first two elements are equal to LLAP with j and k as first two elements plus 1. L [ j ] [ k ] must have been filled before as we run the loop from right side
Update overall LLAP , if needed
Change i and k to fill more L [ i ] [ j ] values for current j
If the loop was stopped due to k becoming more than n - 1 , set the remaining entities in column j as 2
Driver Code
Function to calculate the maximum Manhattan distance
List to store maximum and minimum of all the four forms
Sorting both the vectors
Driver code
Given Co - ordinates
Function call
A recursive function to calculate cost of optimal binary search tree
Base cases if j < i : no elements in this subarray
one element in this subarray
Get sum of freq [ i ] , freq [ i + 1 ] , ... freq [ j ]
Initialize minimum value
One by one consider all elements as root and recursively find cost of the BST , compare the cost with min and update min if needed
Return minimum value
The main function that calculates minimum cost of a Binary Search Tree . It mainly uses optCost ( ) to find the optimal cost .
Here array keys [ ] is assumed to be sorted in increasing order . If keys [ ] is not sorted , then add code to sort keys , and rearrange freq [ ] accordingly .
A utility function to get sum of array elements freq [ i ] to freq [ j ]
Driver Code
A utility function to print the solution l [ ] represents lengths of different words in input sequence . For example , l [ ] = { 3 , 2 , 2 , 5 } is for a sentence like " aaa ▁ bb ▁ cc ▁ ddddd " . n is size of l [ ] and M is line width ( maximum no . of characters that can fit in a line )
l [ ] represents lengths of different words in input sequence . For example , l [ ] = { 3 , 2 , 2 , 5 } is for a sentence like " aaa ▁ bb ▁ cc ▁ ddddd " . n is size of l [ ] and M is line width ( maximum no . of characters that can fit in a line )
extras [ i ] [ j ] will have number of extra spaces if words from i to j are put in a single line
lc [ i ] [ j ] will have cost of a line which has words from i to j
c [ i ] will have total cost of optimal arrangement of words from 1 to i
p [ ] is used to print the solution .
calculate extra spaces in a single line . The value extra [ i ] [ j ] indicates extra spaces if words from word number i to j are placed in a single line
Calculate line cost corresponding to the above calculated extra spaces . The value lc [ i ] [ j ] indicates cost of putting words from word number i to j in a single line
Calculate minimum cost and find minimum cost arrangement . The value c [ j ] indicates optimized cost to arrange words from word number 1 to j .
Driver Code
Python code for implementation of Naive Recursive approach
Driver code
Driver code
Function to check if input string is pallindrome or not
Using two pointer technique to check pallindrome
Function to find keys for the Hashmap
Returns the minimum number of cuts needed to partition a string such that every part is a palindrome
Key for the Input String
If the no of partitions for string " ij " is already calculated then return the calculated value using the Hashmap
Every String of length 1 is a pallindrome
Make a cut at every possible location starting from i to j
If left cut is found already
If right cut is found already
Recursively calculating for left and right strings
Taking minimum of all k possible cuts
Return the min cut value for complete string .
Driver code
lbs ( ) returns the length of the Longest Bitonic Subsequence in arr [ ] of size n . The function mainly creates two temporary arrays lis [ ] and lds [ ] and returns the maximum lis [ i ] + lds [ i ] - 1. lis [ i ] == > Longest Increasing subsequence ending with arr [ i ] lds [ i ] == > Longest decreasing subsequence starting with arr [ i ]
allocate memory for LIS [ ] and initialize LIS values as 1 for all indexes
Compute LIS values from left to right
allocate memory for LDS and initialize LDS values for all indexes
Compute LDS values from right to left for i in reversed ( range ( n - 1 ) ) : loop from n - 2 downto 0 for j in reversed ( range ( i - 1 , n ) ) : loop from n - 1 downto i - 1
Return the maximum value of ( lis [ i ] + lds [ i ] - 1 )
Driver program to test the above function
A Dynamic Programming based Python Program for the Egg Dropping Puzzle
Function to get minimum number of trials needed in worst case with n eggs and k floors
A 2D table where entry eggFloor [ i ] [ j ] will represent minimum number of trials needed for i eggs and j floors .
We need one trial for one floor and0 trials for 0 floors
We always need j trials for one egg and j floors .
Fill rest of the entries in table using optimal substructure property
eggFloor [ n ] [ k ] holds the result
Driver program to test to pront printDups
Returns the maximum value that can be put in a knapsack of capacity W
Base Case
If weight of the nth item is more than Knapsack of capacity W , then this item cannot be included in the optimal solution
return the maximum of two cases : ( 1 ) nth item included ( 2 ) not included
Driver Code
Python3 program for the above approach
For 1 st column
For 1 st row
For rest of the 2d matrix
Returning the value in last cell
Driver code
To make use of recursive calls , this function must return two things : 1 ) Length of LIS ending with element arr [ n - 1 ] . We use max_ending_here for this purpose 2 ) Overall maximum as the LIS may end with an element before arr [ n - 1 ] max_ref is used this purpose . The value of LIS of full array of size n is stored in * max_ref which is our final result
Base Case
maxEndingHere is the length of LIS ending with arr [ n - 1 ]
Recursively get all LIS ending with arr [ 0 ] , arr [ 1 ] . . arr [ n - 2 ] IF arr [ n - 1 ] is maller than arr [ n - 1 ] , and max ending with arr [ n - 1 ] needs to be updated , then update it
Compare maxEndingHere with overall maximum . And update the overall maximum if needed
Return length of LIS ending with arr [ n - 1 ]
The wrapper function for _lis ( )
maximum variable holds the result
The function _lis ( ) stores its result in maximum
returns max
Driver program to test the above function
A function to find factorial of a given number
Calculate value of [ 1 * ( 2 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- - * 1 ]
Since C ( n , k ) = C ( n , n - k )
Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- - * 1 ]
A Binomial coefficient based function to find nth catalan number in O ( n ) time
Calculate value of 2 nCn
return 2 nCn / ( n + 1 )
A function to count number of BST with n nodes using catalan
find nth catalan number
return nth catalan number
A function to count number of binary trees with n nodes
find count of BST with n numbers
return count * n !
Driver Code
find count of BST and binary trees with n nodes
print count of BST and binary trees with n nodes
Function to find the missing numbers
Traverse the array arr [ ]
Update
Traverse the array arr [ ]
If Num is not present
Given Input
Function Call
Function to find the Kth smallest odd length palindrome number
Store the original number K
Removing the last digit of K
Generate the palindrome by appending the reverse of K except last digit to itself
Find the remainder
Add the digit to palin
Divide K by 10
Return the resultant palindromic number formed
Driver Code
Function to find length of the longest substring consisting only of vowels in non - increasing order
Stores all vowels in decreasing order
Stores current index of array ch [ ]
Stores the result
Stores the count of current substring
Declare a HashSet to store the vowels
Traverse the string , S
If S [ i ] is equal to ch [ j ]
Increment count by 1
Add S [ i ] in the mp
If length of mp is 5 , update res
Else if j + 1 is less than 5 and S [ i ] is equal to ch [ j + 1 ]
Add the S [ i ] in the mp
Increment count by 1
Increment j by 1
If length of mp is 5 , update res
Clear the mp
If S [ i ] is 'u
Add S [ i ] in the mp
Update j and assign 1 to count
Else assign 0 to j and count
Return the result
Driver Code
Given Input
Function Call
Function to find the maximum length of a subsequence of same characters after at most K increment operations
Store the size of S
sort tempArray
Stores the maximum length and the sum of the sliding window
Traverse the S
Add the current character to the window
Decrease the window size
Update the value of sum
Increment the value of start
Update the maximum window size
Print the resultant maximum length of the subsequence
Driver Code
Function to check if N can be expressed as the product of K consecutive integers
Stores the K - th root of N
Stores the product of K consecutive integers
Traverse over the range [ 1 , K ]
Update the product
If product is N , then return " Yes "
Otherwise , traverse over the range [ 2 , Kthroot ]
Update the value of product
If product is equal to N
Otherwise , return " No "
Driver Code
Function to check if difference between the sum of odd and even indexed elements after removing the first element is K or not
Stores the sum of elements at odd and even indices
Return 1 if difference is K
Function to check if difference between the sum of odd and even indexed elements after removing the second element is K or not
Stores the sum of elements at odd and even indices
Return 1 if difference is K
Function to count number of elements to be removed to make sum of differences between odd and even indexed elements equal to K
Size of given array
Base Conditions
Stores prefix and suffix sums
Base assignments
Store prefix sums of even indexed elements
Store prefix sums of odd indexed elements
Similarly , store suffix sums of elements at even and odd indices
Stores the count of possible removals
Traverse and remove the ith element
If the current element is excluded , then previous index ( i - 1 ) points to ( i + 2 ) and ( i - 2 ) points to ( i + 1 )
Find count when 0 th element is removed
Find count when 1 st element is removed
Count gives the required answer
Driver Code
Function call
Function that replace all ' ? ' with lowercase alphabets such that each adjacent character is different
Store the given String
If the first character is '?
Traverse the String [ 1 , N - 1 ]
If the current character is '?
Change the character
Check equality with the previous character
Check equality with the next character
Check equality with the previous character
If the last character is '?
Change character
Check with previous character
Return the resultant String
Driver Code
Given String S
Function Call
Function to check if the given string is reverse bitonic
Check for decreasing sequence
If end of string has been reached
Check for increasing sequence
If the end of string hasn 't  been reached
If reverse bitonic
Driver Code
Python3 Program to find the smallest number whose square has N digits
Function to return smallest number whose square has N digits
Calculate N - th term of the series
Driver Code
Function to to count the number of K - countdowns for multiple queries
flag which stores the current value of value in the countdown
count of K - countdowns
Loop to iterate over the elements of the array
condition check if the elements of the array is equal to K
condition check if the elements of the array is in continuous order
condition check if the elements of the array are not in continuous order
condition check to increment the counter if the there is a K - countdown present in the array
returning the count of K - countdowns
Driver Code
Function Call
Function to convert decimal to hexadecimal
char array to store hexadecimal number
Counter for hexadecimal number array
Temporary variable to store remainder
Storing remainder in temp variable .
Check if temp < 10
Return the equivalent hexadecimal color code
Function to convert the RGB code to Hex color code
The hex color code doesn 't exist
Driver Code
Function that returns true if the array can be made strictly decreasing with at most one change
Check whether the last element needs to be modify or not
Check whether the first element needs to be modify or not
Loop from 2 nd element to the 2 nd last element
Check whether arr [ i ] needs to be modified
Modifying arr [ i ]
Check if arr [ i ] is equal to any of arr [ i - 1 ] or arr [ i + 1 ]
If more than 1 modification is required
Driver code
Function to print the strings which satisfy the mentioned conditions
Iterate through all the strings in the array .
check function to check the conditions for every string
Function to check whether the string contains any consecutive repetitive characters and any characters other than those in str
Valid characters check
Nonrepetitive check
Driver code
Function for the state Q1
Condition to check end of string
State transitions ' a ' takes to q1 , and ' b ' takes to q2
Function for the state Q2
Condition to check end of string
State transitions ' a ' takes to q1 , and ' b ' takes to q2
Function for the state Q3
Condition to check end of string
State transitions ' a ' takes to q4 , and ' b ' takes to q3
Function for the state Q4
Condition to check end of string
State transitions ' a ' takes to q4 , and ' b ' takes to q3
Function for the state Q0
Condition to check end of string
State transitions ' a ' takes to q1 , and ' b ' takes to q3
Driver Code
Since q0 is the starting state Send the string to q0
Function to find Longest prefix string with the highest frequency
storing all indices where first element is found
if the first letter in the string does not occur again then answer will be the whole string
loop till second appearance of the first element
check one letter after every stored index
If there is no mismatch we move forward
otherwise we stop
Driver Code
Function to generate a permutation of integers from 1 to N such that the absolute difference of all the two consecutive integers give K distinct integers
To store the permutation
For sequence 1 2 3. . .
For sequence N , N - 1 , N - 2. . .
Flag is used to alternate between the above if else statements
If last element added was r + 1
If last element added was l - 1
Print the permutation
Driver code
calculate factorial of N
calculate Nth term of series
Driver Code
d is the number of characters in the input alphabet
pat -> pattern txt -> text q -> A prime number
hash value for pattern t = 0 hash value for txt
The value of h would be " pow ( d , ▁ M - 1 ) % q "
Calculate the hash value of pattern and first window of text
Slide the pattern over text one by one
Check the hash values of current window of text and pattern if the hash values match then only check for characters on by one
Check for characters one by one
if p == t and pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]
Calculate hash value for next window of text : Remove leading digit , add trailing digit
We might get negative values of t , converting it to positive
Driver Code
A prime number
Function Call
Python program for the above approach
Stores smallest prime factor
Function to find the smallest prime factor for every number till MAXN
Marking smallest prime factor for every number to be itself
Separately marking spf for every even number as 2
Checking if i is prime
Marking SPF for all numbers divisible by i
Function to find all the distinct prime factors of the given number x
Find the prime factors for X
Find the spf [ ] of x
Return the prime factors for x
Function to find string after flipping the characters at indices of prime factors of array elements arr [ ]
Precalculating Smallest Prime Factor
Stores the frequency of each prime factor
Iterate over all elements of the array arr [ ]
Stores prime factors of arr [ i ]
Increment the frequency of all prime factors of arr [ i ]
Iterate over all elements of the array frequency [ ]
If frequency [ i ] is odd
Flip bits of all indices that are multiple of i
Return Answer
Driver Code
Function to check whether in a given binary string can we make number of 1 ' s ▁ greater ▁ than ▁ the ▁ number ▁ of ▁ 0' s by doing the given operation
Stores the count of 0 's
Stores the count of 1 's
Traverse through the string S
Check current character is 1
Update cnt1
Update cnt0
Traverse through the string S
Check curretn character is 1
Check if left adjacent character is 0
Change the left adjacent character to _
Update the cnt0
Check if right adjacent character is 0
Change the right adjacent character to _
Update the cnt0
Check count of 1 ' s ▁ is ▁ greater ▁ ▁ than ▁ the ▁ count ▁ of ▁ 0' s
Driver Code
Function to find the minimum number of operations required to convert all the characters to 1 by flipping the substrings of size K
Stores the minimum number of operations required
Traverse the string S
If the character is 0
Flip the substrings of size K starting from i
Increment the minimum count of operations required
After performing the operations check if string S contains any 0 s
If S contains only 1 's
Driver Code
Function to check a valid insertion
Store the size of string
Maintain a stack for characters
Iterate through the string
push the current character on top of the stack
If the current character is the last character of string S2 then pop characters until S2 is not formed
index of last character of the string S2
pop characters till 0 - th index
Check if stack in non - empty
Driver Code
Function to count the number of tower
first we sort the house numbers
for count number of towers
for iterate all houses
count number of towers
find find the middle location
traverse till middle location
this is point to middle house where we insert the tower
now find the last location
traverse till last house of the range
return the number of tower
Driver code
given elements
print number of towers
Function to check whether elements of an array can form a palindrome
create an empty string to append elements of an array
append each element to the string str to form a string so that we can solve it in easy way
Create a freq array and initialize all values as 0
For each character in formed string , increment freq in the corresponding freq array
Count odd occurring characters
Return true if odd count is 0 or 1 ,
Driver Code
Function to find the minimum number of flips required to make string increasing
Length of s
Total number of zero in s
Stores count of 1 s till ith index
Stores the minimum count of flips
Traverse the given string S
Update the value of res and count of 1 s
Return the minimum number of flips
Given String
Function Call
Function to return a set of all substrings of given string which have length less than or equal to k
Function to print the lexicographically smallest substring of length atmost k which is not present in given string s
All substrings of length atmost k present in string s are stored in this set
Loop to change length of substring
String with length = len which has all characters as 'a
If the substrings set does not contain this string then we have found the answer
Changing the likes of ' azz ' and ' daz ' to ' baa ' and ' dba ' respectively
Reached a string like ' zz ' or ' zzz ' increase the length of the substring
Driver Code
Given Input
Function Call
Function to find the maximum value of K such that flipping substrings of size at least K make all characters 0 s
Stores the maximum value of K
Traverse the given string S
Store the minimum of the maximum of LHS and RHS length
Flip performed
If no flips performed
Return the possible value of K
Driver Code
Function to check whether a pair of strings exists satisfying the conditions
Stores the visited strings
Iterate over the array arr [ ]
If first character of current string is K
Otherwise
Adding to the visited
Driver Code
Given Input
Function to calculate minimum number of moves required to convert the string
Stores Count of upper and lower case characters
Traverse the S
If current character is uppercase
Increment count of Uppercase characters
Otherwise ,
Increment count of Lowercase characters
Stores minimum number of moves needed
If there are more upper case characters
Iterate until upper is greater than N / 2
Convert uppercase into lowercase until upper = N / 2
Increment the pointer
If there are more lower case characters
Iterate until lower is greater than N / 2
Convert lowercase into uppercase until lower = N / 2
Increment the pointer
Print moves required
Print resultant string
Driver Code
Given string
Function call
Function to print any string in zigzag fashion
Store the gap between the major columns
Traverse through rows
Store the step value for each row
Iterate in the range [ 1 , N - 1 ]
Print the character
Print the spaces before character s [ j + step ]
Print the character
Print the spaces after character after s [ j + step ]
Print the spaces for first and last rows
Driver Code
Given Input
Function Call
Function to count substrings having even frequency of each character
Stores the count of a character
Stores bitmask
Stores the count of substrings with even count of each character
Traverse the string S
Flip the ord ( i ) - 97 bits in pre
Increment the count by hash [ pre ]
Increment count of pre in hash
Return the total count obtained
Driver Code
Python 3 program for the above approach
Function to count number of substrings having atleast k distinct characters
Stores the size of the string
Initialize a HashMap
Stores the start and end indices of sliding window
Stores the required result
Iterate while the end pointer is less than n
Include the character at the end of the window
Increment end pointer by 1
Iterate until count of distinct characters becomes less than K
Remove the character from the beginning of window
If its frequency is 0 , remove it from the map
Update the answer
Print the result
Driver Code
Function to check if a string can be modified such that it can be split into palindromic substrings of length >= 2
Stores frequencies of characters
Traverse the string
Update frequency of each character
Traverse the frequency array
Update values of odd and eve
Print the result
Driver Code
Python program to find smallest number in array that is repeated exactly ' k ' times .
Computing frequencies of all elements
Finding the smallest element with frequency as k
If frequency of any of the number is equal to k starting from 0 then return the number
Driver code
Function to count maximum number of occurrences of s2 as subsequence in s1 by concatenating s1 , n1 times and s2 , n2 times
Stores number of times s1 is traversed
Stores number of times s2 is traversed
Mapping index of s2 to number of times s1 and s2 are traversed
Stores index of s1 circularly
Stores index of s2 circularly
Traverse the string s1 , n1 times
If current character of both the string are equal
Update j
Update i
If j is length of s2
Update j for circular traversal
Update s2_reps
If i is length of s1
Update i for circular traversal
Update s1_reps
If already mapped j to ( s1_reps , s2_reps )
Mapping j to ( s1_reps , s2_reps )
If s1 already traversed n1 times
Otherwis , traverse string s1 by multiple of s1_reps and update both s1_reps and s2_reps
Update s2_reps
Update s1_reps
If s1 is traversed less than n1 times
If current character in both the string are equal
Update j
Update i
If i is length of s1
Update i for circular traversal
Update s1_reps
If j is length of ss
Update j for circular traversal
Update s2_reps
Function to count maximum number of occurrences of s2 as subsequence in s1 by concatenating s1 , n1 times and s2 , n2 times
Function to find the number of deletions required such that characters of the string can be rearranged to form a palindrome
Stores frequency of characters
Store the frequency of each character in frequency array
Count number of characters with odd frequency
If count is 1 or 0 , return 0
Otherwise , return count - 1
Driver Code
Function call to find minimum number of deletions required
Prints pendulam arrangement of arr [ ]
sorting the elements
Auxiliary array to store output
calculating the middle index
storing the minimum element in the middle i is index for output array and j is for input array .
adjustment for when no . of elements is even
Printing the pendulum arrangement
input Array
calculating the length of array A
calling pendulum function
Function to calculate the score of the parentheses using stack
To keep track of the score
Initially , push 0 to stack
Traverse the string s
If ' ( ' is encountered , then push 0 to stack
Otherwise
Balance the last ' ( ' , and store the score of inner parentheses
If tmp is not zero , it means inner parentheses exists
Otherwise , it means no inner parentheses exists
Pass the score of this level to parent parentheses
Print the score
Driver Code
Function call
Function to find the count of non - empty substrings of p present in s
Stores the required answer
Stores the length of substring present in p
Stores the current length of substring that is present in string s starting from each character of p
Iterate over the characters of the string
Check if the current character can be added with previous substring to form the required substring
Increment current length
To avoid repetition
Update arr [ cur ]
Print the answer
Driver Code
Function call to find the count of non - empty substrings of p present in s
Function to remove each digit from the given integer
Convert into string
Stores final string
Traverse the string
Append it to the final string
Return integer value
Function to find the minimum sum by removing occurences of each digit
Iterate in range [ 0 , 9 ]
Traverse the array
Update the minimum sum
Print the minimized sum
Driver code
Utility function to find maximum count of unique substrings by splitting the string
Stores maximum count of unique substring by splitting the string into substrings
Iterate over the characters of the string
Stores prefix substring
Check if the current substring already exists
Insert tmp into set
Recursively call for remaining characters of string
Remove from the set
Return answer
Driver Code
Function to remove all possible valid bracket subsequences
Stores indexes of ' ( ' in valid subsequences
Stores indexes of ' { ' in valid subsequences
Stores indexes of ' [ ' in valid subsequences
vis [ i ] : Check if character at i - th index is removed or not
Iterate over the characters of string
If current character is '(
If current character is '{
If current character is '[
If current character is ' ) ' and top element of A is '(
Mark the top element of A as removed
Mark current chacracter as removed
If current character is ' } ' and top element of B is '{
Mark the top element of B as removed
Mark current chacracter as removed
If current character is ' ] ' and top element of B is '[
Mark the top element of C as removed
Mark current chacracter as removed
Print the remaining characters which is not removed from S
Driver Code
Given string
Size of the string
Function Call
Python3 program for the above approach
Function to update frequency of a character in Fenwick tree
Update frequency of ( idx + ' a ' )
Update i
Function to find the frequency of a character ( idx + ' a ' ) in range [ 1 , i ]
Stores frequency of character , ( idx + ' a ' ) in range [ 1 , i ]
Update ans
Update i
Function to find difference between maximum and minimum frequency of a character in given range
BIT [ i ] [ j ] : Stores frequency of ( i + ' a ' ) If j is a power of 2 , then it stores the frequency ( i + ' a ' ) of from [ 1 ] [ j ]
Stores length of String
Iterate over the characters of the String
Update the frequency of s [ i ] in fenwick tree
Stores count of queries
Iterate over all the queries
Stores maximum frequency of a character in range [ l , r ]
Stores minimum frequency of a character in range [ l , r ]
Iterate over all possible characters
Stores frequency of ( j + ' a ' ) in range [ 1 , r ]
Stores frequency of ( j + ' a ' ) in range [ 1 , l - 1 ]
Update mx
If a character ( i + ' a ' ) present in range [ l , r ]
Update mn
Print the difference between max and min freq
Given String
Given queries
Function Call
Function to find the minimum count of operations required to make all Strings equal by replacing characters of Strings
Stores minimum count of operations required to make all Strings equal
Stores length of the String
hash [ i ] [ j ] : Stores frequency of character i present at j - th index of all Strings
Traverse the array arr
Iterate over characters of current String
Update frequency of arr [ i ] [ j ]
Traverse hash array
Stores sum of i - th column
Stores the largest element of i - th column
Iterate over all possible characters
Update Sum
Update Max
Update cntMinOP
Driver Code
Function call
Function to find the desired number of strings
Store the count of strings
Store the length of the string
Initialize variable to indicate the start of the substring
Traverse the string
If sum of adjacent characters is K mark the starting index and set flag to 1
If sum of adjacent characters is not K and the flag variable is set , end the substring here
Set flag to 0 denoting the end of substring
Check if the length of the substring formed is odd
Update the answer
If flag is set and end of string is reached , mark the end of substring
Update the answer
Print the answer
Driver Code
Function Call
Function to find the minimum integer having sum of digits of a number multiplied by n equal to sum of digits of n
Initialize answer
Convert string to character array
Find sum of digits of N
Multiply N with x
Sum of digits of the new number
If condition satisfies
Print answer
Driver Code
Function call
Function to find the distinct strings from the given array
Stores distinct strings from the given array
Traverse the array
If current string not present into the set
Insert current string into the set
Traverse the set DistString
Print distinct string
Driver Code
Stores length of the array
Function to perform the reversal operation on the given string
Size of string
Stores the count of indices
Count the positions where reversals will begin
Store the count of reversals beginning at position i
Check if the count [ i ] is odd the swap the character
Return the updated string
Driver Code
Given str
Given array of reversing index
Function Call
Python3 program for the above approach
Function to convert the floating values into fraction
Initialize variables
Traverse the floating string
Check if decimal part exist
Check if recurrence sequence exist
Retrieve decimal part and recurrence resquence
Traverse the string
Convert to integer
If no recurrence sequence exist
Initialize numerator & denominator
No reccuring term
Print the result
If reccuring term exist
Convert reccuring term to integer
reccu . size ( ) is num of digit in reccur term
eq 2 - eq 1
Print the result
Driver Code
Given str
Function Call
Function to find the lexicographically largest string possible
If sum is less than 0
If sum is equal to 0
If sum is less than 0
Add current character
Check if selecting current character generates lexicographically largest string
Backtrack if solution not found
Find the lexicographically largest string excluding the current character
Function to print the lexicographically largest string generated
Function call
Stores the string
Print the lexicographically largest string formed
Driver code
Cost of adding each alphabet
Cost of generating the string
Function to find the factorial of a number
Loop to find the factorial of the given number
Function to find the number of permutations possible for a given string
Function to find the total number of combinations possible
Driver Code
Number of vertices
mark the vertex vert as visited
if the path of length ( n - 1 ) is found
mark vert as un - visited to make it usable again .
Check if vertex vert can end with vertex start
For searching every possible path of length ( n - 1 )
DFS for searching path by decreasing length by 1
marking vert as unvisited to make it usable again .
Counts cycles of length N in an undirected and connected graph .
all vertex are marked un - visited initially .
Searching for cycle by using v - n + 1 vertices
ith vertex is marked as visited and will not be visited again .
main :
Function to calculate the hash of a string
P and M
Loop to calculate the hash value by iterating over the elements of string
Driver Code
Given string
Python3 implementation to find the first non - repeating element of the string using Linked List
Function to find the first non - repeating element of the given string using Linked List
Driver Code
Function Call
Function for state A transition
If at index 0 ' a ' if found then call stateB function with passing n [ 1 : ] to it
If at index 0 ' b ' if found then call stateQ function with passing n to it
Function for state B transition
Length of string become 0 then print Accepted
If at index 0 ' a ' if found then call stateC function with passing n [ 1 : ] to it
If at index 0 ' b ' if found then call stateD function with passing n [ 1 : ] to it
Function for state C transition
Length of string become 0 then print Accepted
If at index 0 ' a ' if found then call stateC function with passing n [ 1 : ] to it
If at index 0 ' b ' if found then call stateQ function with passing n to it
Function for state D transition
Length of string become 0 then print Accepted
If at index 0 ' a ' if found then call stateB function with passing n [ 1 : ] to it
If at index 0 ' b ' if found then call stateD function with passing n [ 1 : ] to it
Function for state Q transition
In dead state it shows string not accepted
Take string input
Call stateA to check the input
Function to return the required count of substrings
Store the count
Store the count of distinct characters in every window
Store the frequency of the first K length substring
Increase frequency of i - th character
If K distinct characters exist
Traverse the rest of the substring
Increase the frequency of the last character of the current substring
Decrease the frequency of the first character of the previous substring
If the character is not present in the current substring
If the count of distinct characters is 0
Return the count
Driver code
string str
Integer K
Print the count of K length substrings with k distinct characters
Function to find the minimum number of operations to make all the elements of the array equal
Store the sum of the array arr [ ]
Traverse through the array
If it is not possible to make all array element equal
Store the minimum number of operations needed
Traverse through the array
Finally , print the minimum number operation to make array elements equal
Driver Code
Given Input
Function Call
Declaring unordered map globally
Python3 program to check if a given string is a scrambled form of another string
Strings of non - equal length cant ' be scramble strings
Empty strings are scramble strings
Equal strings are scramble strings
Check for the condition of anagram
Checking if both Substrings are in map or are already calculated or not
Declaring a flag variable
Check if S2 [ 0. . . i ] is a scrambled string of S1 [ 0. . . i ] and if S2 [ i + 1. . . n ] is a scrambled string of S1 [ i + 1. . . n ]
Check if S2 [ 0. . . i ] is a scrambled string of S1 [ n - i ... n ] and S2 [ i + 1. . . n ] is a scramble string of S1 [ 0. . . n - i - 1 ]
Storing calculated value to map
If none of the above conditions are satisfied
Driver Code
Function to find the longest prefix which is palindrome
Find the length of the given string
For storing the length of longest Prefix Palindrome
Loop to check the substring of all length from 1 to n which is palindrome
String of length i
To store the value of temp
Reversing the value of temp
If string temp is palindromic then update the length
Print the palindromic string of max_len
Driver code
Function call
Function to find minimum operations needed to make the product of any two adjacent elements in prefix sum array negative
Stores the minimum operations
Stores the prefix sum and number of operations
Traverse the array
Update the value of sum
Check if i + r is odd
Check if prefix sum is not positive
Update the value of ans and sum
Check if prefix sum is not negative
Update the value of ans and sum
Update the value of res
Print the value of res
Driver code
Python program to find the K - th lexicographical string of length N
Initialize the array to store the base 26 representation of K with all zeroes , that is , the initial string consists of N a 's
Start filling all the N slots for the base 26 representation of K
Store the remainder
Reduce K
If K is greater than the possible number of strings that can be represented by a string of length N
Store the Kth lexicographical string
Driver Code
Reducing k value by 1 because our stored value starts from 0
Python3 program to find the length of the smallest substring of which contains all vowels
Map to store the frequency of vowels
Store the indices which contains the vowels
If all vowels are not present in the string
If the frequency of the vowel at i - th index exceeds 1
Decrease the frequency of that vowel
Move to the left
Otherwise set flag1
If the frequency of the vowel at j - th index exceeds 1
Decrease the frequency of that vowel
Move to the right
Otherwise set flag2
If both flag1 and flag2 are set , break out of the loop as the substring length cannot be minimized
Return the length of the substring
Driver Code
Returns true if x is consonants .
'' Function to check whether a character  is consonants or not 
Function to find the longest subsequence which contain all consonants
Driver code
Function call
Python3 program to find the longest subsequence with first K alphabets having same frequency
Function to return the length of the longest subsequence with first K alphabets having same frequency
Map to store frequency of all characters in the string
Variable to store the frequency of the least frequent of first K alphabets
Driver code
Number of vertices in the graph
Define Infinite as a large enough value . This value will be used for vertices not connected to each other
Returns true if graph has negative weight cycle else false .
dist [ ] [ ] will be the output matrix that will finally have the shortest distances between every pair of vertices
Initialize the solution matrix same as input graph matrix . Or we can say the initial values of shortest distances are based on shortest paths considering no intermediate vertex .
Add all vertices one by one to the set of intermediate vertices . -- -> Before start of a iteration , we have shortest distances between all pairs of vertices such that the shortest distances consider only the vertices in set { 0 , 1 , 2 , . . k - 1 } as intermediate vertices . -- -- > After the end of a iteration , vertex no . k is added to the set of intermediate vertices and the set becomes { 0 , 1 , 2 , . . k }
Pick all vertices as source one by one
Pick all vertices as destination for the above picked source
If vertex k is on the shortest path from i to j , then update the value of dist [ i ] [ j ]
If distance of any vertex from itself becomes negative , then there is a negative weight cycle .
Let us create the following weighted graph 1 ( 0 ) -- -- -- -- -- -> ( 1 ) / | \ | | | - 1 | | - 1 | \ | / ( 3 ) < -- -- -- -- -- - ( 2 ) - 1
Function to convert given sum into string
Loop to extract digit one by one from the given sum and concatenate into the string
Type casting for concatenation
Return converted string
Function to get individual digit sum from string
Loop to get individual digit sum
Function call to convert sum into string
Function to calculate the digital root of a very large number
Base condition
Function call to get individual digit sum
Recursive function to get digital root of a very large number
Driver code
Function to print final digit
Function to count the matching characters
Traverse the string 1 char by char
This will check if str1 [ i ] is present in str2 or not str2 . find ( str1 [ i ] ) returns - 1 if not found otherwise it returns the starting occurrence index of that character in str2
Driver code
Function to count the number of alphabets
Counter to store the number of alphabets in the string
Every character in the string is iterated
To check if the character is an alphabet or not
Function to count the number of numbers
Counter to store the number of alphabets in the string
Every character in the string is iterated
To check if the character is a digit or not
Function to check if the count of alphabets is equal to the count of numbers or not
Driver code
Python3 implementation of the above approach .
function to find minimum cost
graph
adjacency matrix
initialising adjacency matrix
creating adjacency list
pushing left adjacent elelemt for index 'k
pushing right adjacent element for index 'k
queue to perform BFS
visited array
variable to store depth of BFS
BFS
number of elements in the current level
inner loop
current element
base case
checking if the current node is required node
iterating through the current node
updating depth
input variables
function to find the minimum cost
This function returns true if the current subpart of the forest is two colorable , else false .
Assign first color to source
Create a queue ( FIFO ) of vertex numbers and enqueue source vertex for BFS traversal
Run while there are vertices in queue ( Similar to BFS )
Find all non - colored adjacent vertices
An edge from u to v exists and destination v is not colored
Assign alternate color to this adjacent v of u
An edge from u to v exists and destination v is colored with same color as u
This function returns true if graph G [ V ] [ V ] is two colorable , else false
Create a color array to store colors assigned to all veritces . Vertex number is used as index in this array . The value ' - 1' of colorArr [ i ] is used to indicate that no color is assigned to vertex ' i ' . The value 1 is used to indicate first color is assigned and value 0 indicates second color is assigned .
As we are dealing with graph , the input might come as a forest , thus start coloring from a node and if true is returned we 'll know that   we successfully colored the subpart of our   forest and we start coloring again from a new   uncolored node. This way we cover the entire forest. 
Returns false if an odd cycle is present else true int info [ ] [ ] is the information about our graph int n is the number of nodes int m is the number of informations given to us
Declaring adjacency list of a graph Here at max , we can encounter all the edges with even weight thus there will be 1 pseudo node for each edge
For odd weight edges , we directly add it in our graph
For even weight edges , we break it
Entering a pseudo node between u -- - v
Keeping a record of number of pseudo nodes inserted
Making a new pseudo node for next time
We pass number graph G [ ] [ ] and total number of node = actual number of nodes + number of pseudo nodes added .
Driver function
' n ' correspond to number of nodes in our graph while ' m ' correspond to the number of information about this graph .
This function break the even weighted edges in two parts . Makes the adjacency representation of the graph and sends it for two coloring .
Python3 implementation of the approach
Function to perform the queries
L [ i ] [ j ] stores the largest i such that ith character appears exactly jth times in str [ 0. . . i ]
F [ i ] [ j ] stores the smallest i such that ith character appears exactly jth times in str [ 0. . . i ]
To store the frequency of each of the character of str
Current character of str
Update its frequency
For every lowercase character of the English alphabet
If it is equal to the character under consideration then update L [ ] [ ] and R [ ] [ ] as it is cnt [ j ] th occurrence of character k
Only update L [ ] [ ] as k has not been occurred so only index has to be incremented
Perform the queries
Type 1 query
Type 2 query
Driver code
Queries
Perform the queries
Function to find number of pairs of integers i , j such that s [ i ] is an anagram of s [ j ] .
To store the count of sorted strings
Traverse all strings and store in the map
Sort the string
If string exists in map , increment count Else create key value pair with count = 1
To store the number of pairs
Traverse through the map
Count the pairs for each string
Return the required answer
Driver code
Function call
Function to insert the character
To store last position where the insertion is done
To store size of the string
To store the modified string
To store characters
Add first character to the string
Update the size
Update the index of last insertion
Insert all other characters to the string
Take the character
Take substring upto ind
Take modulo value of k with the size of the string
Check if we need to move to the start of the string
If we don 't need to move to start of the string
Take substring from upto temp
Take substring which will be after the inserted character
Insert into the string
Store new inserted position
Store size of the new string Technically sz + 1
If we need to move to start of the string
Take substring which will before the inserted character
Take substring which will be after the inserted character
Insert into the string
Store new inserted position
Store size of the new string Technically sz + 1
Return the required character
Driver Code
Function call
Python3 program to rearrange the given string such that all prime multiple indexes have same character
To store answer
Function to rearrange the given string such that all prime multiple indexes have the same character .
Initially assume that we can kept any symbol at any positions . If at any index contains one then it is not counted in our required positions
To store number of positions required to store elements of same kind
Start sieve
For all multiples of i
map to store frequency of each character
Store all characters in the vector and sort the vector to find the character with highest frequency
If most occured character is less than required positions
In all required positions keep character which occured most times
Fill all other indexes with remaining characters
If character frequency becomes zero then go to next character
Driver code
Function call
A simple Graph DFS based recursive function to check if there is cycle in graph with vertex v as root of DFS . Refer below article for details . https : www . geeksforgeeks . org / detect - cycle - in - a - graph /
There is a cycle if an adjacent is visited and present in recursion call stack recur [ ]
Returns true if arr [ ] has cycle
Create a graph using given moves in arr [ ]
Do DFS traversal of graph to detect cycle
Driver code
Maximum distinct characters possible
To store the frequency of the characters
Function to pre - calculate the frequency array
Only the first character has frequency 1 till index 0
Starting from the second character of the string
For every possible character
Current character under consideration
If it is equal to the character at the current index
Function to return the frequency of the given character in the sub - string str [ l ... r ]
Function to return the last non - repeating character
Starting from the last character
Current character
If frequency of the current character is 1 then return the character
All the characters of the sub - string are repeating
Driver Code
Pre - calculate the frequency array
Function to pre - process the sub - strings in sorted order
Generate all substrings
Iterate to find all sub - strings
Store the sub - string in the vector
Sort the substrings lexicographically
Driver code
To store all the sub - strings
Perform queries
Python3 program to implement the above approach
Function to print the smallest subsequence that satisfies the condition
Stores gcd of the array .
Traverse the given array
Update gcdArr
Traverse the given array .
If current element equal to gcd of array .
Generate all possible pairs .
If gcd of current pair equal to gcdArr
Print current pair of the array
Driver Code
Function to return the minimum cost
Initialize result
To store the frequency of characters of the string
Update the frequencies of the characters of the string
Loop to check all windows from a - z where window size is K
Starting index of window
Ending index of window
Check if the string contains character
Check if the character is on left side of window find the cost of modification for character add value to count calculate nearest distance of modification
Check if the character is on right side of window find the cost of modification for character add value to count calculate nearest distance of modification
Find the minimum of all costs for modifying the string
Loop to check all windows Here window contains characters before z and after z of window size K
Starting index of window
Ending index of window
Check if the string contains character
If characters are outside window find the cost for modifying character add value to count
Find the minimum of all costs for modifying the string
Driver code
Utility function to print the given binary string
This function will be called recursively to generate the next bit for given binary string according to its current state
Base - case : if the generated binary string meets the required length and the pattern "01" appears twice
nextbit needs to be 0 because each time we call the function recursively , we call 2 times for 2 cases : next bit is 0 or 1 The is to assure that the binary string is printed one time only
Generate the next bit for str and call recursive
Assign first bit
The next generated bit will either be 0 or 1
If pattern "01" occurrence is < 2
Set next bit
If pattern "01" appears then increase the occurrence of pattern
Else pattern "01" occurrence equals 2
If previous bit is 0 then next bit cannot be 1
Otherwise
Driver code
Length of the resulting strings must be at least 4
Generate all binary strings of length n with sub - string "01" appearing twice
Function to print the last character of each word in the given string
Now , last word is also followed by a space
If current character is a space
Then previous character must be the last character of some word
Driver code
Function to return the length of the longest balanced sub - string
To store the count of parentheses
Traversing the string
Check type of parentheses and incrementing count for it
Sum all pair of balanced parentheses
Driven code
Function to return the bitwise OR of all the binary strings
Get max size and reverse each string Since we have to perform OR operation on bits from right to left Reversing the string will make it easier to perform operation from left to right
Add 0 s to the end of strings if needed
Perform OR operation on each bit
Reverse the resultant string to get the final string
Return the final string
Driver code
Function to return the minimum cost to make the configuration of both the strings same
Iterate and find the cost
Find the minimum cost
Driver Code
Function that returns true if sub - string s [ 0. . . k ] is repeated a number of times to generate String s
Function to return the count of common divisors
If the length of the sub - string divides length of both the strings
If prefixes match in both the strings
If both the strings can be generated
Driver code
Python3 program to print levels line by line
A Binary Tree Node
Function to do level order traversal line by line
Create an empty queue for level order traversal
Pushing root node into the queue .
Pushing delimiter into the queue .
Condition to check occurrence of next level .
Pushing left child of current node .
Pushing left child current node
Pushing right child of current node .
Driver code
Let us create binary tree shown above
Function to return the index of the character that has 0 occurrence starting from index i
If current character has 0 occurrence
If no character has 0 occurrence
Function to return the modified string which consists of distinct characters
String cannot consist of all distinct characters
Count the occurrences for each of the character
Index for the first character that hasn 't appeared in the string
If current character appeared more than once then it has to be replaced with some character that hasn 't occurred yet
Decrement current character 's occurrence by 1
Replace the character
Update the new character ' s ▁ occurrence ▁ ▁ This ▁ step ▁ can ▁ also ▁ be ▁ skipped ▁ as ▁ ▁ we ' ll never encounter this character in the string because it has been added just now
Find the next character that hasn 't occurred yet
Driver code
Function to extract the secret message
Replacing all occurrences of Sub in Str by empty spaces
Removing unwanted spaces in the start and end of the string
Driver code
Function to return the count of sub - strings starting from startIndex that are also the prefixes of string
Function to return the count of all possible sub - strings of string that are also the prefixes of string
If current character is equal to the starting character of str
Driver Code
Function Call
Returns index of x if it is present in arr [ ] , else return - 1
Check if x is present at mid
If x greater , ignore left half
If x is smaller , ignore right half
Driver Code
Python3 implementation of above approach
Function to find prime characters in the string
USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a Boolean array " prime [ 0 . . n ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
0 and 1 are not primes
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Traverse all the characters
Driver program
print required answer
Function to find the length of the largest subsequence consisting of a pair of alternating digits
Variable initialization
Nested loops for iteration
Check if i is not equal to j
Initialize length as 0
Iterate from 0 till the size of the string
Increment length
Increment length
Update maxi
Check if maxi is not equal to 1 the print otherwise pr0
Driver Code
Given string
Function call
Function to find the list of students having maximum average score
Variables to store maximum average score
List to store names of students having maximum average score
Traversing the file data
finding average score of a student
Clear the list and add name of student having current maximum average score in the list
Printing the maximum average score and names of students having this maximum average score as per the order in the file .
Driver Code
Number of elements in string array
Python3 program to find the number of sub - strings of s1 which are anagram of any sub - string of s2
This function returns true if contents of arr1 [ ] and arr2 [ ] are same , otherwise false .
This function search for all permutations of string pat [ ] in string txt [ ]
countP [ ] : Store count of all characters of pattern countTW [ ] : Store count of current window of text
Traverse through remaining characters of pattern
Compare counts of current window of text with counts of pattern [ ]
cout << pat << " ▁ " << txt << " ▁ " ;
Add current character to current window
Remove the first character of previous window
Check for the last window in text
Function to return the number of sub - strings of s1 that are anagrams of any sub - string of s2
initializing variables
outer loop for picking starting point
loop for different length of substrings
If s2 has any substring which is anagram of s1 . substr ( i , len )
increment the count
Driver Code
Function to find string score
Driver code
checks whether a string has similar characters side by side
If similar chars side by side , continue
If we have found a char equal to current char and does not exist side to it , return false
counts min swap operations to convert a string that has similar characters side by side
Base case
considering swapping of i and l chars
Backtrack
not considering swapping of i and l chars
taking min of above two
Driver Code
Naive implementation of find
Naive implementation of union ( )
Function to return the K - th letter from new String .
finding size = length of new string S
get the K - th letter
Driver Code
Function to return required minimum number
maintain balance of string
It is guaranteed bal >= - 1
Driver code
Function to print required answer
Function to check whether the string is a palindrome
Reverse the string and assign it to new variable for comparison
check if both are same
Function to check whether the string has prefix and suffix substrings of length greater than 1 which are palindromes .
check all prefix substrings
check if the prefix substring is a palindrome
If we did not find any palindrome prefix of length greater than 1.
check all suffix substrings , as the string is reversed now
check if the suffix substring is a palindrome
If we did not find a suffix
Driver code
Function to return the number of possible ways
Check if product can be - 1
driver code
function to calculate total odd equivalent
Driver code
Python3 program to find minimum operation require to make first and last character same
Return the minimum operation require to make string first and last character same .
Store indexes of first occurrences of characters .
Initialize result
Traverse through all characters
Find first occurrence
Update result for subsequent occurrences
Driver Code
Python 3 program to find lexicographically largest and smallest substrings of size k .
Initialize min and max as first substring of size k
Consider all remaining substrings . We consider every substring ending with index i .
Print result .
Driver Code
Python program to print the initials of a name with the surname
to remove any leading or trailing spaces
to store extracted words
forming the word
when space is encountered it means the name is completed and thereby extracted
printing the first letter of the name in capital letters
for the surname , we have to print the entire surname and not just the initial string " t " has the surname now
first letter of surname in capital letter
rest of the letters in small
printing surname
Driver Code
Python3 program to print the number of times str2 can be formed from str1 using the characters of str1 only once
Function to find the number of str2 that can be formed using characters of str1
iterate and mark the frequencies of all characters in str1
find the minimum frequency of every character in str1
Driver Code
function to check if conversion is possible or not
if lengths are different
iterate to check if both strings have 1
to check if there is even one 1 in string s1
to check if there is even one 1 in string s2
if both string do not have a '1' .
Driver code
Returns the smallest character from the given set of letters that is greater than K
Take the first element as l and the rightmost element as r
if this while condition does not satisfy simply return the first element .
Return the smallest element
Driver Code
Function call
Function to calculate maximum length of substring containing only zero
loop to calculate longest substring in string containing 0 's
if all elements in string a are '0
Else , find prefix and suffix containing only zeroes
Calculate length of the prefix containing only zeroes
Calculate length of the suffix containing only zeroes
if k <= 1 , no need to take suffix + prefix into account
Driver program to test above function
Function to return the largest number less than N
Iterate through all the numbers
Find the number of set bits for the current number
Check if this number has the highest set bits
Return the result
Driver code
function to generate the nth term
first term
generating each term of the sequence
loop to generate the ith term
add character from the original string
add alternate 0 and 1 in between
if previous added term was '0' then add '1
now current term becomes previous term
if previous added term was '1' , then add '0
now current term becomes previous term
s becomes the ith term of the sequence
Driver Code
generate nth term of dragon curve sequence
Printing output
Python3 program to count number of substrings of a string
driver code
Python 3 program to count number of substrings in which each character has count less than or equal to k .
variable to store count of substrings .
array to store count of each character .
increment character count
check only the count of current character because only the count of this character is changed . The ending point is incremented to current position only if all other characters have count at most k and hence their count is not checked . If count is less than k , then increase ans by 1.
if count is less than k , then break as subsequent substrings for this starting point will also have count greater than k and hence are reduntant to check .
return the final count of substrings .
Driver code
Python3 program to check if characters of one string can be swapped to form other
if length is not same print no
Count frequencies of character in first string .
iterate through the second string decrement counts of characters in second string
Since lengths are same , some value would definitely become negative if result is false .
Driver Code
Returns true if d is present as digit in number x .
Breal loop if d is present as digit
If loop broke
function to display the values
Check all numbers one by one
checking for digit
Driver code
Python3 program to find extra character in one string
store string values in map
store second string in map with frequency
store first string in map with frequency
if the frequency is 1 then this character is which is added extra
Driver Code
given string
find Extra Character
Python 3 program to find extra character in one string
result store the result
traverse string A till end and xor with res
xor with res
traverse string B till end and xor with res
xor with res
print result at the end
given string
Python Program to find extra character in one string
Determine string with extra character
Add Character codes of both the strings
Add last character code of large string
Minus the character code of smaller string from the character code of large string The result will be the extra character code
Driver code
Function to copy one string to other
Driver code
Function to find the sum of given array
if string is empty
stoi function to convert string into integer
stoi function to convert string into integer
Find operator
If operator is equal to ' + ' , add value in sum variable else subtract
Driver Function
Function to find string with maximum number of unique characters .
Index of string with maximum unique characters
Iterate through all strings
Array indicating any alphabet included or not included
count number of unique alphabets in each string
keep track of maximum number of alphabets
print result
Driver code
Python program to find the number of characters in the longest word in the sentence .
Driver Code
function to encode a alphabet as Morse code
refer to the Morse table image attached in the article
for space
character by character print Morse code
Driver Code
function to display polybius cipher text
convert each character to its encrypted code
finding row of the table
finding column of the table
if character is 'k
if character is greater than 'j
Driver 's Code
print the cipher of " geeksforgeeks "
function to find minimum removal of characters
hash to store frequency of each character to set hash array to zeros
count frequency of each character
count the odd frequency characters
if count is 0 , return 0 otherwise return count
Driver 's Code
Python3 program to implement Union - Find with union by rank and path compression .
Arr to represent parent of index i
Size to represent the number of nodes in subgxrph rooted at index i
set parent of every node to itself and size of node to one
Each time we follow a path , find function compresses it further until the path length is greater than or equal to 1.
while we reach a node whose parent is equal to itself
Skip one level
Move to the new level
A function that does union of two nodes x and y where xr is root node of x and yr is root node of y
Make yr parent of xr
Make xr parent of yr
The main function to check whether a given graph contains cycle or not
Itexrte through all edges of gxrph , find nodes connecting them . If root nodes of both are same , then there is cycle in gxrph .
find root of i
find root of adj [ i ] [ j ]
If same parent
Make them connect
Driver Code
Initialize the values for arxry Arr and Size
Adjacency list for graph
call is_cycle to check if it contains cycle
Python3 program to find occurrence of character in substring l to r
To store count of all character
To pre - process string from 0 to size of string
Store occurrence of character i
Store occurrence o all character upto i
To return occurrence of character in range l to r
Return occurrence of character from 0 to r minus its occurrence from 0 to l
Driver Code
Python program to find longest uncommon subsequence using naive method
function to calculate length of longest uncommon subsequence
Case 1 : If strings are equal
for case 2 and case 3
input strings
Function to concatenate two different halves of given strings
Creating new strings by exchanging the first half of a and b . Please refer below for details of substr . https : www . geeksforgeeks . org / stdsubstr - in - ccpp /
Driver function
Function performing the calculations
Length of string a
Length f string b
Pointers for string a and string b
pa and pb denote the number of characters of both a and b extracted
If entire substring of length k can be extracted
If the remaining string is of length less than k
If the string has been traversed
If entire substring of length k can be extracted
If the remaining string is of length less than k
If the string has been traversed
Driver function
Python3 implementation to find the length of the longest substring having frequency of each character less than equal to k
Function to find the length of the longest sub having frequency of each character less than equal to k
Hash table to store frequency of each table
' start ' index of the current substring
To store the maximum length
Traverse the 'str
Get the current character as 'ch
Increase frequency of ' ch ' in 'freq[]
If frequency of ' ch ' becomes more than 'k
update 'maxLen
decrease frequency of each character as they are encountered from the ' start ' index until frequency of ' ch ' is greater than 'k
decrement frequency by '1
increment 'start
Update maxLen
required length
Driver Code
Function to count number of magical indices .
Array to store parent node of traversal .
Array to determine whether current node is already counted in the cycle .
Initialize the arrays .
Check if current node is already traversed or not . If node is not traversed yet then parent value will be - 1.
Traverse the graph until an already visited node is not found .
Check parent value to ensure a cycle is present .
Count number of nodes in the cycle .
Driver code
visited [ ] array to make nodes visited src is starting node for DFS traversal prev_len is sum of cable length till current node max_len is pointer which stores the maximum length of cable value after DFS traversal
Mark the src node visited
curr_len is for length of cable from src city to its adjacent city
Adjacent is pair type which stores destination city and cable length
Traverse all adjacent
Adjacent element
If node or city is not visited
Total length of cable from src city to its adjacent
Call DFS for adjacent city
If total cable length till now greater than previous length then update it
make curr_len = 0 for next adjacent
n is number of cities or nodes in graph cable_lines is total cable_lines among the cities or edges in graph
maximum length of cable among the connected cities
call DFS for each city to find maximum length of cable
initialize visited array with 0
Call DFS for src vertex i
Driver Code
n is number of cities
create undirected graph first edge
second edge
third edge
fourth edge
fifth edge
A Binary Tree Node
Function to prthe level order of given binary tree . Direction of printing level order traversal of binary tree changes after every two levels
For null root
Maintain a queue for normal level order traversal
Maintain a stack for printing nodes in reverse order after they are popped out from queue .
sz is used for storing the count of nodes in a level
Used for changing the direction of level order traversal
Used for changing the direction of level order traversal
Push root node to the queue
Run this while loop till queue got empty
Do a normal level order traversal
For printing nodes from left to right , simply prthe nodes in the order in which they are being popped out from the queue .
For printing nodes from right to left , push the nodes to stack instead of printing them .
for printing the nodes in order from right to left
Change the direction of printing nodes after every two levels .
Driver program to test above functions
Let us create binary tree
Function to find out minimum valued node among the nodes which are not yet included in MST
Loop through all the values of the nodes which are not yet included in MST and find the minimum valued one .
Function to find out the MST and the cost of the MST .
Array to store the parent node of a particular node .
Array to store key value of each node .
Boolean Array to hold bool values whether a node is included in MST or not .
Set all the key values to infinite and none of the nodes is included in MST .
Start to find the MST from node 0. Parent of node 0 is none so set - 1. key value or minimum cost to reach 0 th node from 0 th node is 0.
Find the rest n - 1 nodes of MST .
First find out the minimum node among the nodes which are not yet included in MST .
Now the uth node is included in MST .
Update the values of neighbor nodes of u which are not yet included in MST .
Find out the cost by adding the edge values of MST .
Driver Code
Input 1
Input 2
A Python3 program for getting minimum product spanning tree The program is for adjacency matrix representation of the graph
Number of vertices in the graph
A utility function to find the vertex with minimum key value , from the set of vertices not yet included in MST
Initialize min value
A utility function to print the constructed MST stored in parent [ ] and print Minimum Obtaiable product
Function to construct and print MST for a graph represented using adjacency matrix representation inputGraph is sent for printing actual edges and logGraph is sent for actual MST operations
Array to store constructed MST
Key values used to pick minimum
weight edge in cut To represent set of vertices not
Always include first 1 st vertex in MST Make key 0 so that this vertex is
Picked as first vertex First node is always root of MST
The MST will have V vertices
Pick the minimum key vertex from the set of vertices not yet included in MST
Add the picked vertex to the MST Set
Update key value and parent index of the adjacent vertices of the picked vertex . Consider only those vertices which are not yet included in MST
logGraph [ u ] [ v ] is non zero only for adjacent vertices of m mstSet [ v ] is false for vertices not yet included in MST . Update the key only if logGraph [ u ] [ v ] is smaller than key [ v ]
Print the constructed MST
Method to get minimum product spanning tree
Constructing logGraph from original graph
Applyting standard Prim 's MST algorithm  on Log graph.
Driver code
Let us create the following graph 2 3 ( 0 ) -- ( 1 ) -- ( 2 ) | / \ | 6 | 8 / \ 5 | 7 | / \ | ( 3 ) -- -- -- - ( 4 ) 9
Print the solution
A binary tree node has key , pointer to left child and a pointer to right child
Inorder traversal of a binary tree
function to insert element in binary tree
Do level order traversal until we find an empty place .
Driver code
function that tries every possible solution by calling itself recursively
checks whether the it is going out of bound
checks that the numbers of elements left are not less than the number of elements required to form the solution
consider the cases when current element is not included in the solution
add the current element to the solution
checks if a solution is formed
checks if the solution formed is better than the best solution so far
consider the cases where current element is included in the solution
removes current element before returning to the caller of this function
main function that generate an arr
the boolean array that contains the inclusion and exclusion of an element in current set . The number excluded automatically form the other set
The inclusion / exclusion array for final solution
Find the solution using recursive function TOWUtil ( )
Print the solution
Driver Code
Python3 program to solve Knight Tour problem using Backtracking Chessboard Size
A utility function to check if i , j are valid indexes for N * N chessboard
A utility function to print Chessboard matrix
This function solves the Knight Tour problem using Backtracking . This function mainly uses solveKTUtil ( ) to solve the problem . It returns false if no complete tour is possible , otherwise return true and prints the tour . Please note that there may be more than one solutions , this function prints one of the feasible solutions .
Initialization of Board matrix
move_x and move_y define next move of Knight . move_x is for next value of x coordinate move_y is for next value of y coordinate
Since the Knight is initially at the first block
Checking if solution exists or not
A recursive utility function to solve Knight Tour problem
Try all next moves from the current coordinate x , y
Backtracking
Driver Code
Function Call
Maze size
A utility function to print solution matrix sol
A utility function to check if x , y is valid index for N * N Maze
if ( x , y outside maze ) return false
This function solves the Maze problem using Backtracking . It mainly uses solveMazeUtil ( ) to solve the problem . It returns false if no path is possible , otherwise return true and prints the path in the form of 1 s . Please note that there may be more than one solutions , this function prints one of the feasable solutions .
A recursive utility function to solve Maze problem
if ( x , y is goal ) return True
Check if maze [ x ] [ y ] is valid
Check if the current block is already part of solution path .
mark x , y as part of solution path
Move forward in x direction
If moving in x direction doesn 't give solution  then Move down in y direction
If moving in y direction doesn 't give solution then  Move back in x direction
If moving in backwards in x direction doesn 't give solution  then Move upwards in y direction
If none of the above movements work then BACKTRACK : unmark x , y as part of solution path
Driver program to test above function
A utility function to prsolution
check if the colored graph is safe or not
check for every edge
This function solves the m Coloring problem using recursion . It returns false if the m colours cannot be assigned , otherwise , return true and prints assignments of colours to all vertices . Please note that there may be more than one solutions , this function prints one of the feasible solutions .
if current index reached end
if coloring is safe
Prthe solution
Assign each color from 1 to m
Recur of the rest vertices
Driver code
Create following graph and test whether it is 3 colorable ( 3 ) -- - ( 2 ) | / | | / | | / | ( 0 ) -- - ( 1 )
Number of colors
Initialize all color values as 0. This initialization is needed correct functioning of isSafe ( )
Python3 program for the above approach
A node class which stores the color and the edges connected to the node
Create a visited array of n nodes , initialized to zero
maxColors used till now are 1 as all nodes are painted color 1
Do a full BFS traversal from all unvisited starting points
If the starting point is unvisited , mark it visited and push it in queue
BFS Travel starts here
Checking all adjacent nodes to " top " edge in our queue
IMPORTANT : If the color of the adjacent node is same , increase it by 1
If number of colors used shoots m , return 0
If the adjacent node is not visited , mark it visited and push it in queue
Driver code
Number of colors
Create a vector of n + 1 nodes of type " node " The zeroth position is just dummy ( 1 to n to be used )
Add edges to each node as per given input
Connect the undirected graph
Display final answer
Function to count maximum number of steps to make ( N - 1 ) array elements to 0
Stores maximum count of steps to make ( N - 1 ) elements equal to 0
Stores array elements
Traverse the array
Insert arr [ i ] into PQ
Extract top 2 elements from the array while ( N - 1 ) array elements become 0
Stores top element of PQ
Pop the top element of PQ .
Stores top element of PQ
Pop the top element of PQ .
Update X
Update Y
If X is not equal to 0
Insert X into PQ
if Y is not equal to 0
Insert Y into PQ
Update cntOp
Driver Code
Function to flip all K - bits of an unsigned number N
Stores ( 2 ^ K ) - 1
Update N
Print the answer
Driver Code
Function to construct a matrix such that the sum elements in both diagonals of every 2 * 2 matrices is even
Stores odd numbers
Stores even numbers
Store matrix elements such that sum of elements in both diagonals of every 2 * 2 submatrices is even
Fill all the values of matrix elements
Update odd
Update even
Prthe matrix
Driver Code
Function to build the segment tree
If current node is a leaf node of the segment tree
Update tree [ index ]
Update tree [ index ]
Divide the segment tree
Update on L segment tree
Update on R segment tree
Find the sum from L subtree and R subtree
Function to update elements at index pos by val in the segment tree
If current node is a leaf node
If current index is even
Update tree [ index ]
Update tree [ index ]
Divide the segment tree elements into L and R subtree
If element lies in L subtree
Update tree [ index ]
Function to find the sum of array elements in the range [ L , R ]
If start and end not lies in the range [ L , R ]
If start and end comleately lies in the range [ L , R ]
Stores sum from left subtree
Stores sum from right subtree
Driver code
Function to split the array into minimum count of subarrays such that each subarray is either non - increasing or non - decreasing
Initialize variable to keep track of current sequence
Stores the required result
Traverse the array , arr [ ]
If current sequence is neither non - increasing nor non - decreasing
If previous element is greater
Update current
If previous element is equal to the current element
Update current
Otherwise
Update current
If current sequence is in non - decreasing
I f previous element is less than or equal to the current element
Otherwise
Update current as N and increment answer by 1
If current sequence is Non - Increasing
If previous element is greater or equal to the current element
Otherwise
Update current as N and increment answer by 1
Print the answer
Driver Code
Given array
Given size of array
Function to construct a matrix of size A * B from the given matrix elements
Initialize a new matrix
Traverse the matrix , mat [ ] [ ]
Update idx
Print the resultant matrix
Driver Code
Function to print the final array after reducing each array element by its next smaller element
Initialize stack
To store the corresponding element
If stack is not empty
If top element is smaller than the current element
Keep popping until stack is empty or top element is greater than the current element
If stack is not empty
Push current element
Final array
Driver Code
Given array
Function Call
Function to construct array of differences of counts on the left and right of the given array
Initialize left and right frequency arrays
Construct left cumulative frequency table
Construct right cumulative frequency table
Print the result
Driver Code
Function Call
Structure of a singly Linked List
Stores data value of a Node
Stores pointer to next Node
Function to add a node at the beginning of the singly Linked List
Create a new Node
Insert the data into the Node
Insert pointer to the next Node
Update head_ref
Function to find the largest element from the linked list
Stores the largest element in the linked list
Iterate over the linked list
If max is less than head . data
Update max
Update head
Function to store all Fibonacci numbers up to the largest element of the list
Store all Fibonacci numbers up to Max
Stores first element of Fibonacci number
Stores second element of Fibonacci number
Insert prev into hashmap
Insert curr into hashmap
Insert all elements of Fibonacci numbers up to Max
Stores current fibonacci number
Insert temp into hashmap
Update prev
Update curr
Function to find the mean of odd Fibonacci nodes
Stores the largest element in the linked list
Stores all fibonacci numbers up to Max
Stores current node of linked list
Stores count of odd Fibonacci nodes
Stores sum of all odd fibonacci nodes
Traverse the linked list
if the data value of current node is an odd number
if data value of the node is present in hashmap
Update cnt
Update sum
Remove current fibonacci number from hashmap so that duplicate elements can 't be counted
Update curr
Return the required mean
Driver Code
Stores head node of the linked list
Insert all data values in the linked list
Function to prthe required sequence
Print ith odd number
Driver Code
Function to calculate the salary of the person
Condition to compute the allowance for the person
Calculate gross salary
Driver code
Function call
Python3 program to implement the above approach
Function to perform the given operations
Dequeue to store the array elements
Insert all element of the array into the dequeue
Stores the size of the queue
Traverse each query
Query for left shift .
Extract the element at the front of the queue
Pop the element at the front of the queue
Push the element at the back of the queue
Query for right shift
Extract the element at the back of the queue
Pop the element at the back of the queue
Push the element at the front of the queue
Query for update
Query to get the value
Driver Code
All possible Queries
Python3 program to implement the above approach
Function ot find the length of the smallest subarray
Stores ( prefix Sum , index ) as ( key , value ) mappings
Iterate till N
Update the prefixSum
Update the length
Put the latest index to find the minimum length
Update the length
Return the answer
Function to find the length of the largest subarray
Stores the sum of all array elements after modification
Change greater than k to 1
Change smaller than k to - 1
Change equal to k to 0
Update total_sum
No deletion required , return 0
Delete smallest subarray that has sum = total_sum
Driver Code
Function call
Python3 program to convert positive decimals into balanced ternary system
Driver Code
Python3 implementation to find the Spt Function to given number
Variable to store spt function of a number
Function to add value of frequency of minimum element among all representations of n
Find the value of frequency of minimum element
Calculate spt
Recursive function to find different ways in which n can be written as a sum of at one or more positive integers
If sum becomes n , consider this representation
Start from previous element in the representation till n
Include current element from representation
Call function again with reduced sum
Backtrack - remove current element from representation
Function to find the spt function
Using recurrence find different ways in which n can be written as a sum of at 1 or more positive integers
Driver Code
Python3 program for the above approach
Function to implement the extended euclid algorithm
Base Case
Recursively find the gcd
Function to prlet the solutions of the given equations ax + by = c
Condition for infinite solutions
Condition for no solutions exist
Condition for no solutions exist
Print the solution
Given coefficients
Function Call
Function to check if x is power of 2
Returns true if x is a power of 2
Function to return the number of valid pairs
Iterate for all possible pairs
Bitwise and value of the pair is passed
Return the final count
Given array
Function Call
Python3 implementation of the above approach
Function checks if n is prime or not
Corner case
Check from 2 to sqrt ( n )
Function returns sum of all elements of matrix
Stores the sum of the matrix
Function to check if all a [ i ] [ j ] with prime ( i + j ) are prime
If index is prime
If element not prime
Driver code
Check for both conditions
Function to return the answer
Generate all possible pairs
Increment the count if both even or both odd
Driver Code
Function to return smallest number whose sum of digits is n ^ 2
Driver Code
Function to find N - th term in the series
Driver code
Function call
function to check if N is prime
Corner cases
This is checked so that we can skip middle five numbers in below loop
function to check if n is a weakly prime Number
number should be prime
converting N to string
loop to change digit at every character one by one .
loop to store every digit one by one at index j
Driver code
function to check if N is prime
Corner cases
This is checked so that we can skip middle five numbers in below loop
function to check if n is a unprimeable Number
number should be composite
converting N to string
loop to change digit at every character one by one .
loop to store every digit one by one at index j
Driver code
Function Call
Function to find the elements of rowIndex in Pascal 's Triangle
1 st element of every row is 1
Check if the row that has to be returned is the first row
Generate the previous row
Generate the elements of the current row by the help of the previous row
Return the row
Driver Program
Function to print all possible values of floor ( N / K )
Iterate from 1 to N + 1
Driver code
Python3 program for the above approach
Function to print greatest odd factor
Initialize i with 1
Iterate till i <= pow_2
find the pow ( 2 , i )
If factor is odd , then print the number and break
Given Number
Function Call
Structure of a node for the linked list
Function to find and return the element with frequency of at least N / 3
Candidates for being the required majority element
Store the frequencies of the respective candidates
Iterate all nodes
Increase frequency of candidate s
Increase frequency of candidate t
Set the new sting as candidate for majority
Set the new sting as second candidate for majority
Decrease the frequency
Check the frequency of two final selected candidate linklist
Increase the frequency of first candidate
Increase the frequency of second candidate
Return the string with higher frequency
Driver code
Function to find the minimum number which have maximum length
Find Maximum length of number
Find minimum number WHich have maximum length
Driver Code
Function to check if two intervals overlap with each other
Condition to check if the intervals overlap
Function to check if there is a existing overlapping intervals
Path compression
Union of two intervals Returns True if there is a overlapping with the same another interval
Both have same another overlapping interval
Function to check if the intervals can be added by X to form non - overlapping intervals
If the intervals overlaps we will union them
There is no cycle
Driver Code
Python3 program to find the Kth number formed after repeated addition of smallest divisor of N
If N is even
If N is odd
Add smallest divisor to N
Updated N is even
Driver code
Python3 program to find last digit in factorial n .
Explicitly handle all numbers less than or equal to 4
For all numbers greater than 4 the last digit is 0
Driver code
Function to convert Haxadecimal to BCD
Iterating through the digits
Conversion into equivalent BCD
Driver code
Function call
Function to find the N - th heptadecagonal number
Formula to calculate nth heptadecagonal number
Function to find the sum of the first N heptadecagonal numbers
Variable to store the sum
Iterate from 1 to N
Finding the sum
Driver code
Python3 program for the above approach
Function to check if number N is a centered pentagonal number
Condition to check if N is a centered pentagonal number
Given Number
Function call
Python3 program for the above approach
Function to check if number N is a dodecagonal number or not
Condition to check if the N is a dodecagonal number
Given Number
Function call
Python3 implementation to find the previous and next power of K
Function to return the highest power of k less than or equal to n
Function to return the smallest power of k greater than or equal to n
Driver Code
Prefix array to precompute the sum of all composite number
Function that return number num if num is composite else return 0
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to precompute the sum of all composite numbers upto 100000
checkcomposite ( ) return the number i if i is composite else return 0
Function to print the sum for each query
Function to prsum of all composite numbers between
Function that pre computes the sum of all composite numbers
Iterate over all Queries to print the sum
Driver code
Queries
Function that print the the sum of all composite number in Range [ L , R ]
Python3 implementation to find the probability of getting a perfect square number
Function to return the probability of getting a perfect square number in a range
Count of perfect squares
Total numbers in range l to r
Calculating probability
Driver code
Function Call
check whether the first string can be converted to the second string by increasing the ASCII value of prefix string of first string
length of two strings
If lengths are not equal
store the difference of ASCII values
difference of first element
traverse through the string
the ASCII value of the second string should be greater than or equal to first string , if it is violated return false .
store the difference of ASCII values
the difference of ASCII values should be in descending order
if the difference array is not in descending order
if all the ASCII values of characters of first string is less than or equal to the second string and the difference array is in descending order , return true
Driver code
create two strings
check whether the first string can be converted to the second string
A optimised program to find the number of digits in a factorial in base b
Returns the number of digits present in n ! in base b Since the result can be large long long is used as return type
factorial of - ve number doesn 't exists
base case
Use Kamenetsky formula to calculate the number of digits
Driver Code
calling findDigits ( Number , Base )
Python3 implementation to find the sum of all non - fibonacci numbers in a range from L to R
Array to precompute the sum of non - fibonacci numbers
Function to find if a number is a perfect square
Function that returns N if N is non - fibonacci number
N is Fibinacci if one of 5 * n * n + 4 or 5 * n * n - 4 or both are perferct square
Function to precompute sum of non - fibonacci Numbers
Function to find the sum of all non - fibonacci numbers in a range
Pre - computation
Loop to find the sum for each query
Python 3 program to count Twin Prime pairs in array
A utility function to check if the number n is prime or not
Base Cases
Check to skip middle five numbers in below loop
If n is divisible by i and i + 2 then it is not prime
A utility function that check if n1 and n2 are Twin Primes or not
Function to find Twin Prime pairs from the given array
Iterate through all pairs
Increment count if twin prime pair
Driver 's code
Function call to find Twin Primes pair
Function to fill the position with arr [ i ] = 0
Inserting all elements in missing [ ] set from 1 to N
Inserting unfilled positions
Removing allocated_elements
Loop for filling the positions with arr [ i ] != i
Checking for any arr [ i ] = i
Finding the suitable position in the array to swap with found i for which arr [ i ] = i
Checking if the position is present in unfilled_position
Swapping arr [ i ] & arr [ pos ] ( arr [ pos ] = pos )
Function to Print the array
Driver Code
Function to find number of pairs
Negative and Negative
Add Possible Pairs
Positive and Positive
Add Possible pairs
Negative and Positive
Add Possible pairs
Function to find the kth element in the list
Separate Positive and Negative elements
Sort the Elements
Binary search
Return the required answer
Driver code
Function call
Function to return the square root of a number using Newtons method
Assuming the sqrt of n as n only
To count the number of iterations
Calculate more closed x
Check for closeness
Update root
Driver code
Python3 program to count the occurrence of nth term in first n terms of Van Eck 's sequence 
Utility function to compute Van Eck 's sequence 
Loop to generate sequence
Check if sequence [ i ] has occured previously or is new to sequence
If occurrence found then the next term will be how far back this last term occured previously
Utility function to count the occurrence of nth term in first n terms of the sequence
Get nth term of the sequence
Count the occurrence of nth term in first n terms of the sequence
Return count
Driver code
Pre - compute Van Eck 's sequence 
Print count of the occurrence of nth term in first n terms of the sequence
Print count of the occurrence of nth term in first n terms of the sequence
Python3 program to count the occurrence of nth term in first n terms of Van Eck 's sequence 
Utility function to compute Van Eck 's sequence 
Loop to generate sequence
Check if sequence [ i ] has occured previously or is new to sequence
If occurrence found then the next term will be how far back this last term occured previously
Utility function to count the occurrence of nth term in first n terms of the sequence
Initialize count as 1
Increment count if ( i + 1 ) th term is non - zero
Previous occurrence of sequence [ i ] will be it ( i - sequence [ i + 1 ] ) th position
Return the count of occurrence
Driver code
Pre - compute Van Eck 's sequence 
Print count of the occurrence of nth term in first n terms of the sequence
Print count of the occurrence of nth term in first n terms of the sequence
Function to find the remaining time
Formula for total remaining minutes = 1440 - 60 h - m
Remaining hours
Remaining minutes
Current time
Get the remaining time
Function to check if a number can be represent as as a sum of 3 prime
Driver code
Python3 implementation of the approach
To store the factorial and factorial mod inverse of the numbers
Function to find ( a ^ m1 ) % mod
Function to find the factorial of all the numbers
Function to find the factorial modinverse of all the numbers
Function to return nCr
Function to return the number of ways to reach ( X , Y ) in a matrix with the given moves starting from the origin
Driver code
Python3 program to find nth even palindromic number of only even length composing of 4 ' s ▁ and ▁ 5' s .
Utility function to compute n 'th palindrome number 
Calculate the length from above formula as discussed above
Calculate rank for length L
Mask to check if i 't bit   is set or not 
If bit is set append '5' else append '4'
Driver Code
Function for the binomial coefficient
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Function to return the maximum value in the nth level of the Pascal 's triangle
Driver code
Python 3 program to find the length of the smallest substring consisting of maximum distinct characters
Find maximum distinct characters in any string
Initialize all character 's  count with 0
Increase the count in array if a character is found
size of given string
Find maximum distinct characters in any string
result
Brute force approach to find all substrings
We have to check here both conditions together 1. substring ' s ▁ distinct ▁ characters ▁ is ▁ equal ▁ ▁ to ▁ maximum ▁ distinct ▁ characters ▁ ▁ 2 . ▁ substring ' s length should be minimum
Driver Code
Input String
Python3 implementation of the approach
Function to find the required numbers
GCD of the given numbers
Printing the required numbers
Driver code
Function to find the balance
Check if the transaction can be successful or not
Transaction is successful
Transaction is unsuccessful
Driver Code
Python Program to count pairs whose sum divisible by 'K
Program to count pairs whose sum divisible by ' K '
Create a frequency array to count occurrences of all remainders when divided by K
To store count of pairs .
Traverse the array , compute the remainder and add k - remainder value hash count to ans
Count number of ( A [ i ] , ( K - rem ) % K ) pairs
Increment count of remainder in hash map
Driver code
Python3 code for the above approach
Driver code
Find the solution
Return the even number substrings .
If current digit is even , add count of substrings ending with it . The count is ( i + 1 )
Driven Program
Function that generates the array b [ ] when n is even
Fill the first half of the final array with reversed sequence
Fill the second half
Function that generates the array b [ ] when n is odd
Fill the first half of the final array with reversed sequence
Fill the second half
Function to find the final array b [ ] after n operations of given type
Create the array b
If the array size is even
Print the final array elements
Driver code
Function to find the sum of the first half elements and second half elements of an array
Add elements in first half sum
Add elements in the second half sum
Driver Code
Function call
Function to return the minimized sum
If k is divisible by n then the answer will be 0
Else the answer will be 1
Driver code
Python3 implementation of the approach
Function to print the first n terms of the lower Wythoff sequence
Calculate value of phi
Find the numbers
a ( n ) = floor ( n * phi )
Print the nth numbers
Driver code
Node class
Function to insert node in a linked list
Function which returns new linked list
Compare for greater node
Driver Code
First linked list
Second linked list
Python 3 implementation of the approach
Function to return the count of quadruplets having gcd = k
To store the required count
Check every quadruplet pair whether its gcd is k
Return the required count
Driver code
Function to return the index i such that the absolute difference between product of elements up to that index and the product of rest of the elements of the array is minimum
To store the required index
Prefix product array
Compute the product array
Iterate the product array to find the index
Driver code
Python3 program to implement the above approach
Function to print all the numbers
Iterate for every element in the array
Find the gcd
Iterate till gcd is 1 of number and x
Divide the number by gcd
Find the new gcdg
If the number is 1 at the end then print the number
If no numbers have been there
Driver Code
Function to print the final radiations
Function to create the array of the resultant radiations
Resultant radiations
Declaring index counter for left and right radiation
Effective radiation for left and right case
Radiation for i - th station
Radiation increment for left stations
Radiation increment for right stations
Print the resultant radiation for each of the stations
Driver code
1 - based indexing
A utility function to reverse string str [ low . . high ]
Cycle leader algorithm to move all even positioned elements at the end .
odd index
even index
keep the back - up of element at new position
The main function to transform a string . This function mainly uses cycleLeader ( ) to transform
Step 1 : Find the largest prefix subarray of the form 3 ^ k + 1
Step 2 : Apply cycle leader algorithm for the largest subarrau
Step 4.1 : Reverse the second half of first subarray
Step 4.2 : Reverse the first half of second sub - string
Step 4.3 Reverse the second half of first sub - string and first half of second sub - string together
Increase the length of first subarray
Driver Code
Function to return the maximum difference
Iteratively check from back
Different numbers
Iteratively check from the beginning
Different numbers
Driver code
Python3 program to find the Kth node in the DFS traversal of the subtree of given vertex V in a Tree
To store nodes
To store the current index of vertex in DFS
To store the starting index and ending index of vertex in the DFS traversal array
To store the DFS of vertex 1
Function to add edge between two nodes
Initialize the vectors
Function to perform DFS of a vertex 1. stores the DFS of the vertex 1 in vector p , 2. store the start index of DFS of every vertex 3. store the end index of DFS of every vertex
store staring index of node ch
store ending index
Function to find the Kth node in DFS of vertex V
check if kth number exits or not
number of nodes
add edges
store DFS of 1 st node
Function to return sum
Driver code
Function to check whether a number is prime or not .
Count variable to store the number of factors of 'num
Counting the number of factors
If number is prime return true
Function to check for divisibility
if ' n ' equals 1 then divisibility is possible
Else check whether ' n + 1' is prime or not
If ' n + 1' is prime then ' n ! ' is not divisible by 'n*(n+1)/2
else divisibility occurs
Test for n = 3
Test for n = 4
Python3 implementation of the above approach
Function to count number of sub - arrays whose sum is k ^ p where p >= 0
If m [ a + b ] = c , then add c to the current sum .
Increase count of prefix sum .
If m [ a + b ] = c , then add c to the current sum .
Increase count of prefix sum .
b = k ^ p , p >= 0
k ^ m can be maximum equal to 10 ^ 14.
If m [ a + b ] = c , then add c to the current sum .
Increase count of prefix sum .
Driver code
Python 3 implementation of the approach
Function to return the required result
Reverse the strings
Count the number of set bits in b
To store the powers of 2
power [ i ] = pow ( 2 , i ) % mod
To store the final answer
Add power [ i ] to the ans after multiplying it with the number of set bits in b
Divide by 2 means right shift b >> 1 if b has 1 at right most side than number of set bits will get decreased
If no more set bits in b i . e . b = 0
Return the required answer
Driver code
Function to find the sum of largest and smallest secondary polygons if possible
Count edges of primary polygon
Calculate edges present in the largest secondary polygon
Driver Code
Given Exterior Angle
Python3 implementation of the above approach
Function to store the primes
Function to return the sum of digits
Function to print additive primes
If the number is prime
Check if it 's digit sum is prime
Driver code
function to calculate nth term of the series
variable nth will store the nth term of series
if n is even
if n is odd
return nth term
Driver code
Function to return the nth term of the given series
nth term
Driver code
Function to return the count of the divisors of a number
Count the number of 2 s that divide n
n must be odd at this point . So we can skip one element
While i divides n
This condition is to handle the case when n is a prime number > 2
Count the total elements that have divisors exactly equal to as that of k 's
Exclude k from the result if it is smaller than n .
Driver code
Function to return the nth term of the given series
Common difference
First term
nth term
nth term of the given series
Driver code
Function to find the type of triangle with the help of sides
Driver Code
Function Call
Python3 program to count the number of intervals in which a given value lies
Function to count the number of intervals in which a given value lies
Variables to store overall minimumimum and maximumimum of the intervals
Frequency array to keep track of how many of the given intervals an element lies in
Constructing the frequency array
Driver Code
length of the array
Function to check if sum of the three angles is 180 or not
Check condition
Driver code
function calling and print output
Function to print N groups of equal sum
No . of Groups
n / 2 pairs
Driver code
Python 3 program to find Break Even Point
Function to calculate Break Even Point
Calculating number of articles to be sold
Driver Code
function to return the product of distinct prime factors of a numberdef minSteps ( str ) :
find distinct prime
Driver code
Function to find the count of all possible N digit numbers which are divisible by 5 formed from M digits
If it is not possible to form n digit number from the given m digits without repetition
If both zero and five exists
Remaining N - 1 iterations
Remaining N - 1 iterations
Driver code
Python implementation to find the smallest of three elements
Function to find the maximum sum
Maximum AND is maximum element
Maximum OR is bitwise OR of all .
Driver code
Python3 program to count magic squares
function to check is subgrid is Magic Square
Elements of grid must contain all numbers from 1 to 9 , sum of all rows , columns and diagonals must be same , i . e . , 15.
Function to count total Magic square subgrids
if condition true skip check
check for magic square subgrid
return total magic square
Driver Code
Function call to print required answer
Function to return required minimum sum
getting number of element strictly larger than A [ i ] on Left .
get elements from stack until element greater than A [ i ] found
getting number of element larger than A [ i ] on Right .
get elements from stack until element greater or equal to A [ i ] found
calculating required resultult
Driver Code
function call to get required resultult
Python 3 implementation of the above approach
Function to find the minimum element
Function to find the maximum element
Driver code
Function to find a number
If d is 0 , k has to be 1
Print k - 1 zeroes
Driver code
Function to count numbers having exactly 9 divisors
Sieve array , initially prime [ i ] = i
use sieve concept to store the first prime factor of every number
mark all factors of i
check for all numbers if they can be expressed in form p * q
p prime factor
q prime factor
if both prime factors are different if p * q <= n and q !=
Check if it can be expressed as p ^ 8
Driver Code
Utility function to check if a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to check if the given number is interprime or not
Smallest Interprime is 4 So the number less than 4 can not be a Interprime
Calculate first prime number < n
Calculate first prime number > n
check if next_prime and prev_prime have the same average
Driver Code
Function to find the unit 's place digit
Let us write for cases when N is smaller than or equal to 4.
We know following ( 1 ! + 2 ! + 3 ! + 4 ! ) % 10 = 3
Driver code
Python3 program to find sum of squares of Fibonacci numbers in O ( Log n ) time .
Create an array for memoization
Returns n 'th Fibonacci number using table f[]
Base cases
If fib ( n ) is already computed
Applying above formula [ Note value n & 1 is 1 if n is odd , else 0 ] .
Function to calculate sum of squares of Fibonacci numbers
Driver Code
function to find the number of solutions for the equation x + y + z <= n , such that 0 <= x <= X , 0 <= y <= Y , 0 <= z <= Z .
to store answer
for values of x
for values of y
maximum possible value of z
if z value greater than equals to 0 then only it is valid
find minimum of temp and z
return required answer
Driver code
calculate Nth term of series
Driver code
Python 3 program to find numbers that are product of exactly two distinct prime numbers
Function to check whether a number is a PerfectSquare or not
Function to check if a number is a product of exactly two distinct primes
Function to find numbers that are product of exactly two distinct prime numbers .
Vector to store such numbers
insert in the vector
Print all numbers till n from the vector
Driver function
calculate Nth term of series
return final sum
Driver code
Function for calculating Nth term of series
Driver code
Taking n as 4
Printing the nth term
calculate Nth term of series
Driver Function
Get the value of N
Get the sum of the series
Python3 program to find N - th term of the series : 9 , 23 , 45 , 75 , 113 , 159. . ... .
calculate Nth term of series
Driver Code
Get the value of N
Find the Nth term and print it
Python3 program to find the value of cos ( n - theta )
Function to calculate the binomial coefficient upto 15
use simple DP to find coefficient
Function to find the value of cos ( n - theta )
store required answer
use to toggle sign in sequence .
calculate numerator
calculate denominator
Driver code
Function for finding maximum pieces with n cuts .
Driver code
A Python3 program to find optimum location and total cost
Class defining a point
Class defining a line of ax + by + c = 0 form
Method to get distance of point ( x , y ) from point p
Utility method to compute total distance all points when choose point on given line has x - coordinate value as X
Calculating Y of chosen point by line equation
Utility method to find minimum total distance
Loop until difference between low and high become less than EPS
mid1 and mid2 are representative x co - ordiantes of search space
If mid2 point gives more total distance , skip third part
If mid1 point gives more total distance , skip first part
Compute optimum distance cost by sending average of low and high as X
Method to find optimum cost
Converting 2D array input to point array
Driver Code
Python program to find sum of first n terms
Sn = n * ( 4 * n * n + 6 * n - 1 ) / 3
number of terms to be included in the sum
find the Sn
Function to find the duplicate and the missing elements over the range [ 1 , N ]
Stores the missing and duplicate numbers in the array arr [ ]
Traverse the given array arr [ ]
Check if the current element is not same as the element at index arr [ i ] - 1 , then swap
Otherwise , increment the index
Traverse the array again
If the element is not at its correct position
Stores the missing and the duplicate elements
Print the Missing Number
Print the Duplicate Number
Driver code
Function to print a , b and c
first loop
check for 1 st number
second loop
check for 2 nd number
third loop
Check for 3 rd number
Driver Code
Function to calculate the percentage
Driver code
Function calling
maximum size of number
array to store smallest prime factor of number
array to store sum of digits of a number
boolean array to check given number is countable for required answer or not .
prefix array to store answer
Calculating SPF ( Smallest Prime Factor ) for every number till MAXN .
marking smallest prime factor for every number to be itself .
separately marking spf for every even number as 2
checking if i is prime
marking SPF for all numbers divisible by i
marking spf [ j ] if it is not previously marked
Function to find sum of digits in a number
find sum of digits of all numbers up to MAXN
add sum of digits of least prime factor and n / spf [ n ]
if it is valid make isValid true
prefix sum to compute answer
Driver code
print answer for required range
print answer for required range
Function to calculate count
Driver Code
Python3 program to answer queries for N - th prime factor of a number
2 - D vector that stores prime factors
Function to pre - store prime factors of all numbers till 10 ^ 6
calculate unique prime factors for every number till 10 ^ 6
find prime factors
store if prime factor
Function that returns answer for every query
Function to pre - store unique prime factors
1 st query
2 nd query
3 rd query
4 th query
Recursive function to return gcd of a and b
Driver program to test above function
function to count no of digits
function to implement above approach
if difference between power and n doesn 't exceed d
loop to build a number from the appropriate no of digits containing only 9
if the build number is same as original number ( n )
observation
Driver Code
variable that stores no of digits in n
Python3 program to find optimal number of trials for k floors and 2 eggs .
Driver Code
Python3 program to find the Area and volume of Icosahedron
Function to find area of Icosahedron
Formula to calculate area
Function to find volume of Icosahedron
Formula to calculate volume
Driver Code
Function call to find area of Icosahedron .
Function call to find volume of Icosahedron .
Function to return number of ways
for n = 1
for n = 2
iterate to find Fibonacci term
total number of places
python3 program to find count of digits in N factorial raised to N
we take sum of logarithms as explained in the approach
multiply the result with n
Driver Code
Python3 program to convert centimeter into meter and kilometer
Converting centimeter into meter and kilometer
Driver Code
Python3 program to find if two people starting from different positions ever meet or not .
If speed of a person at a position before other person is smaller , then return false .
Making sure that x1 is greater
checking if relative speed is a factor of relative distance or not
Driver code
Python 3 program for the above approach
Function to calculate the number of distinct GCDs among all non - empty subsequences of an array
variables to store the largest element in array and the required count
Map to store whether a number is present in A
calculate largest number in A and mapping A to Mp
iterate over all possible values of GCD
variable to check current GCD
iterate over all multiples of i
If j is present in A
calculate gcd of all encountered multiples of i
current GCD is possible
return answer
Driver code
Input
Function calling
Python3 program to find math . ceil ( a / b ) without using math . ceil ( ) function
taking input 1
example of perfect division taking input 2
Python 3 program to find sum in the given range in the sequence 1 3 5 7 ... . . N 2 4 6. . . N - 1
Function that returns sum in the range 1 to x in the sequence 1 3 5 7. ... . N 2 4 6. . . N - 1
number of odd numbers
number of extra even numbers required
Driver code
Python program to illustrate ... To print total number of twin prime using Sieve of Eratosthenes
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
check twin prime numbers display the twin prime numbers
driver program
Calling the function
Python3 Program to print all cube free numbers smaller than or equal to n .
Returns true if n is a cube free number , else returns false .
check for all possible divisible cubes
Print all cube free numbers smaller than n .
Driver program
Function to convert given decimal number of gray code into its inverse in decimal form
Taking xor until n becomes zero
Driver Code
Python program to find product of unique prime factors of a number
A function to print all prime factors of a given number n
Handle prime factor 2 explicitly so that can optimally handle other prime factors .
n must be odd at this point . So we can skip one element ( Note i = i + 2 )
While i divides n , print i and divide n
This condition is to handle the case when n is a prime number greater than 2
Driver Code
Returns the Maximum probability for Drawing 1 copy of number A from N containers with N copies each of numbers A and B
Pmax = N / ( N + 1 )
1. N = 1
2. N = 2
3. N = 10
Python Program to implement standard deviation of grouped data .
Function to find mean of grouped data .
Function to find standard deviation of grouped data .
Formula to find standard deviation of grouped data .
Declare and initialize the lower limit of interval .
Declare and initialize the upper limit of interval .
Calculating the size of array .
Function to find average of sum of first n even numbers
sum of first n even numbers
calculating Average
driver code
Return the average of sum of first n even numbers
Driven Program
Python3 code to find sum of square of first n odd numbers
driver code
Function checks whether given number is prime or not .
Check if n is a multiple of 2
If not , then just check the odds
Return next prime number
Start with next number
Breaks after finding next prime number
Check given three numbers are adjacent primes are not
Check given three numbers are primes are not
Find next prime of a
If next is not same as 'a
If next next is not same as 'c
Driver code for above functions
Python3 Program to find sum of series 1 + 2 + 2 + 3 + . . . + n
Function that find sum of series .
Driver method
Function call
Python3 Program to find sum of series 1 + 2 + 2 + 3 + . . . + n
Function that find sum of series .
Driver method
Returns value of Binomial Coefficient C ( n , k )
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Return maximum binomial coefficient term value .
if n is even
if n is odd
Driver Code
Python3 code to find smallest n digit number which is divisible by x , y and z .
LCM for x , y , z
returns smallest n digit number divisible by x , y and z
find the LCM
find power of 10 for least number
reminder after
If smallest number itself divides lcm .
add lcm - reminder number for next n digit number
this condition check the n digit number is possible or not if it is possible it return the number else return 0
driver code
if number is possible then it print the number
Return the sum of square of first n natural numbers
Driven Program
Python3 program to calculate distance between two points
Function to calculate distance
Calculating distance
Drivers Code
to find sum
function to check if a large number is divisible by 15
length of string
check divisibility by 5
Sum of digits
if divisible by 3
Driver Code
Define number of vertices in the graph and inifinite value
A naive recursive function to count walks from u to v with k edges
Base cases
Initialize result
Go to all adjacents of u and recur
Driver Code
Let us create the graph shown in above diagram
Define number of vertices in the graph and inifinite value
A Dynamic programming based function to find the shortest path from u to v with exactly k edges .
Table to be filled up using DP . The value sp [ i ] [ j ] [ e ] will store weight of the shortest path from i to j with exactly k edges
Loop for number of edges from 0 to k
for source
for destination
initialize value
from base cases
go to adjacent only when number of edges is more than 1
There should be an edge from i to a and a should not be same as either i or j
Let us create the graph shown in above diagram
Returns shortest distance from 0 to N - 1.
dist [ i ] is going to store shortest distance from node i to node N - 1.
Calculating shortest path for rest of the nodes
Initialize distance from i to destination ( N - 1 )
Check all nodes of next stages to find shortest distance from i to N - 1.
Reject if no edge exists
We apply recursive equation to distance to target through j . and compare with minimum distance so far .
Driver code
Graph stored in the form of an adjacency Matrix
A binary tree node
Function to print reverse level order traversal
Print nodes at a given level
Compute the height of a tree -- the number of nodes along the longest path from the root node down to the farthest leaf node
Compute the height of each subtree
Use the larger one
Let us create trees shown in above diagram
Set of nodes which are traversed in each launch of the DFS
Function traversing the graph using DFS approach and updating the set of nodes
Building a undirected graph
Computes the minimum number of disconnected components when a bi - directed graph is converted to a undirected graph
Declaring and initializing a visited array
We check if each node is visited once or not
We only launch DFS from a node iff it is unvisited .
Clearing the set of nodes on every relaunch of DFS
Relaunching DFS from an unvisited node .
Iterating over the node set to count the number of nodes visited after making the graph directed and storing it in the variable count . If count / 2 == number of nodes - 1 , then increment count by 1.
Driver code
Building graph in the form of a adjacency list
a struct to represent edges
vector to store edges @ SuppressWarnings ( " unchecked " )
calculates the shortest path
initializing all distances as - 1
shortest distance From first vertex to in tself consisting of 0 edges
filling up the dp table
Returns minimum value of average weight of a cycle in graph .
array to store the avg values
Compute average values for all vertices using weights of shortest paths store in dp .
Find minimum value in avg [ ]
Driver Code
Python3 program for the above approach
Function to find the frequency
freq stores frequency of each english lowercase character
dp [ i ] [ j ] stores the count of subsequence with ' a ' + i and ' a ' + j character
Increment the count of subsequence j and s [ i ]
Update the frequency array
For 1 length subsequence
For 2 length subsequence
Return the final result
Given string str
Function call
Function to construct the array
Creating a list of size K , initialised with 0
Initialising the first element with the given XOR
Driver code
Python3 implementation for two player game in which a player can remove all occurrences of a number
Function that print whether player1 can wins or loses
Storing the number of occurrence of elements in unordered map
Variable to check if the occurrence of repeated elements is >= 4 and multiple of 2 or not
Count elements which occur more than once
Driver code
Python3 program to number of elements which form a cycle in an array
Function to count number of elements forming a cycle
Array to store parent node of traversal .
Array to determine whether current node is already counted in the cycle .
Check if current node is already traversed or not . If node is not traversed yet then parent value will be - 1.
Traverse the graph until an already visited node is not found .
Check parent value to ensure a cycle is present .
Count number of nodes in the cycle .
Driver code
Add edge between U and V in tree
Edge from U to V
Edge from V to U
DFS to find the first End Node of diameter
Calculating level of nodes
Go in opposite direction of parent
Function to clear the levels of the nodes
Set all value of lvl [ ] to 0 for next dfs
Set maximum with 0
DFS will calculate second end of the diameter
Calculating level of nodes
Store the node with maximum depth from end1
Go in opposite direction of parent
Function to find the distance of the farthest distant node
Storing distance from end1 to node u
Function to find the distance of nodes from second end of diameter
Storing distance from end2 to node u
Joining Edge between two nodes of the tree
Find the one end of the diameter of tree
Find the other end of the diameter of tree
Find the distance to each node from end1
Find the distance to each node from end2
Comparing distance between the two ends of diameter
Driver code
Function Call
Node of Linked List
Function to insert a node at the beginning of the singly Linked List
Insert the data
Link old list to the new node
Move head to pothe new node
Function to find the digit sum for a number
Return the sum
Function to find the required sum and product
Initialise the sum and product to 0 and 1 respectively
Traverse the given linked list
If current node has even digit sum then include it in resultant sum and product
Find the sum and the product
Print the final Sum and Product
Driver Code
Head of the linked list
Create the linked list 15 . 16 . 8 . 6 . 13
Function call
Function return the shortest palindromic substring
One by one consider every character as center point of even and length palindromes
Find the longest odd length palindrome with center point as i
Find the even length palindrome with center points as i - 1 and i .
Smallest substring which is not empty
Driver code
Function to return the minimum number of given operations required to sort the array
Number of elements in the array
Smallest element in the array
Largest element in the array
dp ( i , j ) represents the minimum number of operations needed to make the array [ 0 . . i ] sorted in non - decreasing order given that ith element is j
Fill the dp [ ] ] [ array for base cases
Using results for the first ( i - 1 ) elements , calculate the result for the ith element
Driver code
Function to return the minimum number of operations needed to partition the array in k contiguous groups such that all elements of a given group are identical
n is the size of the array
dp ( i , j ) represents the minimum cost for partitioning the array [ 0. . i ] into j groups
Base case , cost is 0 for parititoning the array [ 0. .0 ] into 1 group
Fill dp ( i , j ) and the answer will be stored at dp ( n - 1 , k )
The maximum groups that the segment 0. . i can be divided in is represented by maxGroups
Initialize dp ( i , j ) to infinity
Divide segment 0. . i in 1 group
map and freqOfMode are together used to keep track of the frequency of the most occurring element in [ 0. . i ]
Change all the elements in the range 0. . i to the most frequent element in this range
If the jth group is the segment from it . . i , we change all the elements in this range to this range 's most occurring element
Number of elements we need to change in the jth group i . e . the range it . . i
For all the possible sizes of the jth group that end at the ith element we pick the size that gives us the minimum cost for dp ( i , j ) elementsToChange is the cost of making all the elements in the jth group identical and we make use of dp ( it - 1 , j - 1 ) to find the overall minimal cost
Return the minimum cost for partitioning array [ 0. . n - 1 ] into k groups which is stored at dp ( n - 1 , k )
Driver code
Python3 implementation of the approach
Function to return the LCM of two numbers
Function to print the required numbers
To store the lcm of array a [ ] elements and the gcd of array b [ ] elements
Finding LCM of first array
Finding GCD of second array
No such element exists
All the multiples of lcmA which are less than or equal to gcdB and evenly divide gcdB will satisfy the conditions
Driver code
Python3 implementation of the above approach
Returns value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate value of
Iterative Function to calculate ( x ^ y ) in O ( log y )
Initialize result
If y is odd , multiply x with result
y must be even now y = y / 2
Change x to x ^ 2
Function to find probability
Calculate total possible ways and favourable ways .
Divide by gcd such that they become relatively coprime
Driver code
Python3 implementation of the approach
Python3 program to find the largest perfect square number among n numbers
Function to check if a number is perfect square number or not
takes the sqrt of the number
checks if it is a perfect square number
Function to find the largest perfect square number in the array
stores the maximum of all perfect square numbers
Traverse all elements in the array
store the maximum if current element is a perfect square
Driver code
Function to find the maximum number of parallelograms can be made
Finding the length of the frequency array
Increasing the occurrence of each segment
To store the count of parallelograms
Counting parallelograms that can be made using 4 similar sides
counting segments which have occurrence left >= 2
Adding parallelograms that can be made using 2 similar sides
Driver code
Python3 implementation of above approach
Function to find the LCM
Function to count the pairs
Driver code
Represents node of a doubly linked list
Count of elements in given range
Count frequencies of all elements
Traverse through range . For every element , print it its count times .
Driver Code
Function to check if the array can be divided into subsequences of K consecutive integers in increasing order
If N is not divisible by K or K > N , no possible set of required subsequences exist
Stores the indices of each element in a set
Stores the index of each number
Stores if the integer at current index is already included in a subsequence
Stores the count of total visited elements
If current integer is already in a subsequence
Stores the value of last element of the current subsequence
Stores the index of last element of the current subsequence
Marked visited
Increment the visited count
Find the next K - 1 elements of the subsequence starting from index i
No valid index found
Find index of j such that it is greater than last_index
Update last index
Increment total_visited by 1
Remove the index
Return the result
Driver code
Function to check if it is possible to add K points such that the maximum distance between adjacent points is D
Stores the count of point used
Iterate over all given points
Add number of points required to be placed between ith and ( i + 1 ) th point
Return answer
Function to find the minimum value of maximum distance between adjacent points after adding K points any where between
Stores the lower bound and upper bound of the given range
Perform binary search
Find the middle value
Update the current range to lower half
Driver Code
Python 3 program for the above approach
Function to find a Binary String of same length other than the Strings present in the array
Map all the strings present in the array
Find all the substring that can be made
If num already exists then increase counter
If not found print
If all the substrings are present then print - 1
Driver Code
Python 3 implementation for the above approach
stores information about which cell are already visited in a particular BFS
Stores the final result grid
Stores the count of cells in the largest connected component
Function checks if a cell is valid , i . e . it is inside the grid and equal to 1
Map to count the frequency of each connected component
function to calculate the largest connected component
Iterate over every cell
Stores the indices of the matrix cells
Mark the starting cell as visited and push it into the queue
Iterate while the queue is not empty
Go to the adjacent cells
Drivers Code
Given input array of 1 s and 0 s
queries array
sizeof queries array
Count the frequency of each connected component
Iterate over the given queries array and And answer the queries
Function to check if there exists an X that satisfies the given conditions
Find the required value of the given expression
Function to find the minimum value of X using binary search .
Boundaries of the Binary Search
Find the middle value
Check for the middle value
Update the upper
Update the lower
Driver Code
Function to count the number of pairs ( i , j ) such that arr [ i ] * arr [ j ] is equal to abs ( i - j )
Stores the resultant number of pairs
Iterate over the range [ 0 , N )
Now , iterate from the value arr [ i ] - ( i % arr [ i ] ) till N with an increment of arr [ i ]
If the given criteria satisfy then increment the value of count
Return the resultant count
Driver Code
Function to print every occurence of every characters in every string
Iterate over the vector arr [ ]
Traverse the string arr [ i ]
Push the pair of { i + 1 , j + 1 } in mp [ arr [ i ] [ j ] ]
Print the occurences of every character
Driver Code
Input
Function call
Function to calculate the number of subarrays where X ( 1 <= X <= N ) is the most frequent element
array to store the final answers
Array to store current frequencies
Variable to store the current most frequent element
Update frequency array
Update answer
Pranswer
Driver code
Input
Function call
Python program for the above approach
Function to count array elements whose highest power of 2 is less than or equal to that number is present in the given array
Stores the resultant count of array elements
Stores frequency of visited array elements
Traverse the array
Calculate log base 2 of the element arr [ i ]
Highest power of 2 whose value is at most arr [ i ]
Increment the count by 1
Return the resultant count
Driver Code
Python 3 program for the above approach
Function to find the maximum number of intersections one segment has with all the other given segments
Stores the resultant maximum count
Stores the starting and the ending points
Sort arrays points in the ascending order
Traverse the array arr [ ]
Find the count of segments on left of ith segment
Find the count of segments on right of ith segment
Find the total segments not intersecting with the current segment
Store the count of segments that intersect with the ith segment
Update the value of count
Return the resultant count
Driver Code
Function to find the Nth Composite Numbers using Sieve of Eratosthenes
Sieve of prime numbers
Iterate over the range [ 2 , 1000005 ]
If IsPrime [ p ] is true
Iterate over the range [ p * p , 1000005 ]
Stores the list of composite numbers
Iterate over the range [ 4 , 1000005 ]
If i is not prime
Return Nth Composite Number
Driver Code
Structure of a node of a Linked List
Function to find the intersection point of the two Linked Lists
Traverse the first linked list and multiply all values by - 1
Update a . data
Update a
Traverse the second Linked List and find the value of the first node having negative value
Intersection point
Update b
Function to create linked lists
Linked List L1
Linked List L2
Driver Code
TreeNode class
Function to check if the nodes are in increasing order or not
Perform Level Order Traversal
Current length of queue
If queue is empty
Level order traversal
Pop element from front of the queue
If previous value exceeds current value , return false
Function to arrange node values of each level in increasing order
Perform level order traversal
Calculate length of queue
If queue is empty
Level order traversal
Pop element from front of the queue
Initialize the optimal element by the initial element
Check for all left shift operations
Left shift
If the current shifting gives optimal solution
Replacing initial element by the optimal element
Push the LST
Push the RST
Print the result
Function to print the Tree after modification
Performs level order traversal
Calculate size of the queue
Iterate until queue is empty
Driver Code
Function to remove duplicate characters across the strings
Stores distinct characters
Size of the array
Stores the list of modified strings
Traverse the array
Stores the modified string
Iterate over the characters of the modified string
If character is already present
Insert character into the Set
Print the list of modified strings
Print each string
Driver Code
Given array of strings
Function Call to modify the given array of strings
Function to check if a number is prime or not
Corner cases
Check if n is a multiple of 2 or 3
Above condition allows to check only for every 6 th number , starting from 5
If n is a multiple of i and i + 2
Function to find the sum of array elements which are prime factors of K
Stores the required sum
Traverse the given array
If current element is a prime factor of k , add it to the sum
Print the result
Given arr [ ]
Store the size of the array
Python3 Program to implement the above approach
Function to count the minimum number of operations required to reduce x to 0
If sum of the array is less than x
Stores the count of operations
Two pointers to traverse the array
Reduce x by the sum of the entire array
Iterate until l reaches the front of the array
If sum of elements from the front exceeds x
Shift towards left
If sum exceeds 0
Reduce x by elements from the right
If x is reduced to 0
Update the minimum count of operations required
Driver Code
Function to count subarrays with even product
Total number of subarrays
Counter variables
Traverse the array
If current element is odd
Update count of subarrays with odd product up to index i
Print count of subarrays with even product
Driver code
Input
Length of an array
Function call to count even product subarrays
Function to check if all 1 s are placed adjacently in an array or not
Base Case
Stores the sum of XOR of all pair of adjacent elements
Calculate sum of XOR of all pair of adjacent elements
Check for corner cases
Return true
Function to check if all the rows have all 1 s grouped together or not
Traverse each row
Check if all 1 s are placed together in the ith row or not
Function to check if all 1 s in a row are grouped together in a matrix or not
Print the result
Given matrix
Function Call
Function to find the product of digits of a number
Stores the product of digits of a number
Return the product
Function to print all numbers upto N having product of digits equal to K
Stores whether any number satisfying the given conditions exists or not
Iterate over the range [ 1 , N ]
If product of digits of arr [ i ] is equal to K or not
Print that number
If no numbers are found
Driver Code
Given value of N & K
Function call to print all numbers from [ 1 , N ] with product of digits K
Function to minimize difference between maximum and minimum array elements by removing a K - length subarray
Size of array
Stores the maximum and minimum in the suffix subarray [ i . . N - 1 ]
Traverse the array
Stores the maximum and minimum in the prefix subarray [ 0 . . i - 1 ]
Store the minimum difference
Traverse the array
If the suffix doesn 't exceed  the end of the array
Store the maximum element in array after removing subarray of size K
Stores the maximum element in array after removing subarray of size K
Update minimum difference
Updating the maxPrefix and minPrefix with current element
Print the minimum difference
Driver Code
Pyhton3 program for the above approach
Function to find the minimum number of segments required to be deleted
Stores the start and end points
Traverse segments and fill the startPoints and endPoints
Sort the startPoints
Sort the startPoints
Store the minimum number of deletions required and initialize with ( N - 1 )
Traverse the array segments [ ]
Store the starting point
Store the ending point
Store the number of segments satisfying the first condition of non - intersection
Store the number of segments satisfying the second condition of non - intersection
Update answer
Print the answer
Driver Code
Function Call
Function to find the length of the longest substring
Store the required answer
Create a frequency map of the characters of the string
Store the length of the string
Traverse the string , s
Increment the frequency of the current character by 1
Stores count of unique characters
Find the number of unique characters in string
Iterate in range [ 1 , unique ]
Initialize frequency of all characters as 0
Stores the start and the end of the window
Stores the current number of unique characters and characters occuring atleast K times
New unique character
New character which occurs atleast k times
Expand window by incrementing end by 1
Check if this character is present atleast k times
Check if this character is unique
Shrink the window by incrementing start by 1
If there are curr_unique characters and each character is atleast k times
Update the overall maximum length
Print the answer
Direction vectors
Function to check if current position is valid or not
Check if the cell is out of bounds
Check if the cell is visited or not
Utility function to prmatrix elements using DFS Traversal
Mark the current cell visited
Print element at the cell
Traverse all four adjacent cells of the current element
Check if x and y is valid index or not
Function to print matrix elementsdef
Function call to prmatrix elements by DFS traversal
Driver Code
Given matrix
Row of the matrix
Column of the matrix
Direction vectors
Function to check if curruent position is valid or not
Check if the cell is out of bounds
Check if the cell is visited
Function to print the matrix elements
Stores if a position in the matrix been visited or not
Initialize stack to implement DFS
Push the first position of grid [ ] [ ] in the stack
Mark the cell ( 0 , 0 ) visited
Stores top element of stack
Delete the top ( ) element of stack
Print element at the cell
Traverse in all four adjacent sides of current positions
Check if x and y is valid position and then push the position of current cell in the stack
Push the current cell
Mark current cell visited
Given matrix
Row of the matrix
Column of the matrix
Function to count the minimum number of operations required to segregate all 1 s and 0 s in a binary string
Stores the count of unequal pair of adjacent characters
If an unequal pair of adjacent characters occurs
For odd count
For even count
Given string
Length of the string
Prints the minimum count of operations required
Function to count prime triplets having sum of the first two elements equal to the third element
Sieve of Eratosthenes Boolean array to mark prime numbers
To count the prime triplets having the sum of the first two numbers equal to the third element
Checks for the prime numbers having difference equal to2
Update count of triplets
Print the answer
Driver Code
Function to print the array element which differs in parity with the remaining array elements
Multimaps to store even and odd numbers along with their indices
Traverse the array
If array element is even
Otherwise
If only one even element is present in the array
If only one odd element is present in the array
Given array
Size of the array
Function to print the count of indices in which the maximum in prefix arrays is less than that in the suffix array
If size of array is 1
pre [ ] : Prefix array suf [ ] : Suffix array
Stores the required count
Find the maximum in prefix array
Find the maximum in suffix array
Traverse the array
If maximum in prefix array is less than maximum in the suffix array
Print the answer
Driver Code
Function Call
Function to find maximum length of subsequence
Stores maximum length of subsequence
HashMap to store the longest length of subsequence ending at an integer , say X
Stores the maximum length of subsequence ending at index i
Base case
Iterate over the range [ 1 , N - 1 ]
If dpj is not NULL
Update dp [ i ]
Update ans
Update the maximum length of subsequence ending at element is a [ i ] in HashMap
Return the ans if ans >= 2. Otherwise , return 0
Driver Code
Input
Print the length of the longest subsequence
Binary tree node
Constructor to set the data of the newly created tree node
Function to allocate a new node with the given data and null in its left and right pointers
DFS function to calculate the sum of depths of all subtrees depth sum
Store total number of node in its subtree and total sum of depth in its subtree
Check if left is not null
Call recursively the DFS function for left child
Increment the sum of depths by ptemp . first + p . temp . first
Increment p . first by count of noded in left subtree
Check if right is not null
Call recursively the DFS function for right child
Increment the sum of depths by ptemp . first + p . temp . first
Increment p . first by count of nodes in right subtree
Increment the result by total sum of depth in current subtree
Return p
Given Tree
Print the result
Function to return the minimum time to fill all the slots
Stores visited slots
Checks if a slot is visited or not
Insert all filled slots
Iterate until queue is not empty
Iterate through all slots in the queue
Front index
If previous slot is present and not visited
If next slot is present and not visited
Increment the time at each level
Print the answer
Driver Code
Function Call
Maximum digits in N
Utility function to find count of N such that N + D = reverse ( N )
If d is a multiple of 9 , no such value N found
Divide D by 9 check reverse of number and its sum
B [ i ] : Stores power of ( 10 , i )
Calculate power ( 10 , i )
Update B [ i ]
Stores count of N such that N + D = reverse ( N )
Iterate over the range [ 1 , MAXL ]
Update ans
Function to find count of possible values of N such that N + D = reverse ( N )
Base Case
If D is not qual to 0
Stores count of possible values of N such that N + D = reverse ( N )
Update ans
If l is even
Update ans
Stores count of possible values of N such that N + D = reverse ( N )
Iterae over the range [ - 9 , 9 ]
Update ans
Driver Code
Function call
Function to find the index of the peak element in the array
Stores left most index in which the peak element can be found
Stores right most index in which the peak element can be found
Stores mid of left and right
If element at mid is less than element at ( mid + 1 )
Update left
Update right
Function to perform binary search in an a subarray if elements of the subarray are in an ascending order
Stores mid of left and right
If X found at mid
If X is greater than mid
Update left
Update right
Function to perform binary search in an a subarray if elements of the subarray are in an ascending order
Stores mid of left and right
If X found at mid
Update right
Update left
Function to find the smallest index of X
Stores index of peak element in array
Stores index of X in the array
If X greater than or equal to first element of array and less than the peak element
Update res
If element not found on left side of peak element
Update res
Print res
Driver Code
Given X
Given array
Function Call
Function to rearrange the array according to the given condition
Using 2 nd operation making all values positive
Sort the array
Assign K = N - K
Count number of zeros
If number of zeros if greater
Using 2 nd operation convert it into one negative
Using 2 nd operation convert it into one negative
Print array
Driver Code
Function Call
Function to find the maximum product of subarray in the array , arr [ ]
Maximum positive product ending at the i - th index
Minimum negative product ending at the current index
Maximum product up to i - th index
Check if an array element is positive or not
Traverse the array
If current element is positive
Update max_ending_here
Update min_ending_here
Update flag
If current element is 0 , reset the start index of subarray
Update max_ending_here
Update min_ending_here
If current element is negative
Stores max_ending_here
Update max_ending_here
Update min_ending_here
Update max_so_far , if needed
If no array elements is positive and max_so_far is 0
Function to find the maximum product of either increasing subarray or the decreasing subarray
Stores start index of either increasing subarray or the decreasing subarray
Initially assume maxProd to be 1
Traverse the array
Store the longest either increasing subarray or the decreasing subarray whose start index is i
Check for increasing subarray
Insert elements of increasing subarray
Check for decreasing subarray
Insert elements of decreasing subarray
Stores maximum subarray product of current increasing or decreasing subarray
Update maxProd
Update i
Finally prmaxProd
Driver Code
Stores the parent of each vertex
Function to find the topmost parent of vertex a
If current vertex is the topmost vertex
Otherwise , set topmost vertex of its parent as its topmost vertex
Function to connect the component having vertex a with the component having vertex b
Connect edges
Function to find unique top most parents
Traverse all vertices
Insert all topmost vertices obtained
Print count of connected components
Function to print answer
Setting parent to itself
Traverse all edges
Print answer
Given N
Given edges
Function call
Function to remove the rows or columns from the matrix which contains all 0 s elements
Stores count of rows
col [ i ] : Stores count of 0 s in current column
row [ i ] : Stores count of 0 s in current row
Traverse the matrix
Stores count of 0 s in current row
Update col [ j ]
Update count
Update row [ i ]
Traverse the matrix
If all elements of current row is 0
If all elements of current column is 0
Driver Code
Function Call
Function to find a pair ( i , j ) such that i - th interval lies within the j - th interval
Store interval and index of the interval in the form of { { l , r } , index }
Traverse the array , arr [ ] [ ]
Stores l - value of the interval
Stores r - value of the interval
Push current interval and index into tup
Sort the vector based on l - value of the intervals
Stores r - value of current interval
Stores index of current interval
Traverse the vector , tup [ ]
Stores l - value of previous interval
Stores l - value of current interval
If Q and R are equal
Print the index of interval
Stores r - value of current interval
If T is less than or equal to curr
Update curr
Update currPos
If such intervals found
Given l - value of segments
Given r - value of segments
Given size
Function Call
Structure of a tree node
Function to replace each node with the sum of nodes at the same diagonal
IF root is NULL
Replace nodes
Traverse the left subtree
Traverse the right subtree
Function to find the sum of all the nodes at each diagonal of the tree
If root is not NULL
If update sum of nodes at current diagonal
Traverse the left subtree
Traverse the right subtree
Function to print the nodes of the tree using level order traversal
Stores node at each level of the tree
Stores count of nodes at current level
Stores front element of the queue
Insert left subtree
Insert right subtree
Update length
Driver code
Build tree
Store sum of nodes at each diagonal of the tree
Find sum of nodes at each diagonal of the tree
Replace nodes with the sum of nodes at the same diagonal
Print tree
Function to count pairs whose concatenation is divisible by 3 and each element can be present in at most one pair
Stores count pairs whose concatenation is divisible by 3 and each element can be present in at most one pair
Check if an element present in any pair or not
Generate all possible pairs
If the element already present in a pair
If the element already present in a pair
If concatenation of elements is divisible by 3
Update ans
Mark i is True
Mark j is True
Driver Code
To display the result
Function to find longest strictly increasing sequence using boundary elements
Maintains rightmost element in the sequence
Pointer to start of array
Pointer to end of array
Stores the required sequence
Traverse the array
If arr [ i ] > arr [ j ]
If arr [ j ] is greater than rightmost element of the sequence
Push arr [ j ] into the sequence
Update rightmost element
Push arr [ i ] into the sequence
Update rightmost element
If arr [ i ] < arr [ j ]
If arr [ i ] > rightmost element
Push arr [ i ] into the sequence
Update rightmost element
If arr [ j ] > rightmost element
Push arr [ j ] into the sequence
Update rightmost element
If arr [ i ] is equal to arr [ j ]
If i and j are at the same element
If arr [ i ] > rightmostelement
Push arr [ j ] into the sequence
Update rightmost element
Traverse array from left to right
Stores the increasing sequence from the left end
Traverse array from left to right
Push arr [ k ] to max_left vector
Traverse the array from right to left
Stores the increasing sequence from the right end
Traverse array from right to left
Push arr [ k ] to max_right vector
If size of max_left is greater than max_right
Push max_left elements to the original sequence
Otherwise
Push max_right elements to the original sequence
Print the sequence
Driver Code
Print the longest increasing sequence using boundary elements
Structure of the Tree node
Stores the result
Function for finding maximum subtree average
Checks if current node is not None and doesn 't have any children
Stores sum of its subtree in index 0 and count number of nodes in index 1
Traverse all children of the current node
Recursively calculate max average of subtrees among its children
Increment sum by sum of its child 's subtree
Increment number of nodes by its child 's node
Increment sum by current node 's value
Increment number of nodes by one
Take maximum of ans and current node 's average
Finally return pair of { sum , count }
Driver Code
Given tree
Function call
Print answer
Function to check if string A can be transformed to string B by reversing substrings of A having even number of 1 s
Store the size of string A
Store the size of string B
Store the count of 1 s in A and B
Stores cntA for string A and cntB for string B
Traverse the string A
If current character is 1
Increment 1 s count
Otherwise , update odd1A or even1A depending whether count1A is odd or even
Traverse the string B
If current character is 1
Increment 1 s count
Otherwise , update odd1B or even1B depending whether count1B is odd or even
If the condition is satisfied
If True , prYes
Otherwise , prNo
Driver Code
Function Call
Function to print the common elements for all subarray lengths
Function to find and store the minimum element present in all subarrays of all lengths from 1 to n
Skip lengths for which answer [ i ] is - 1
Initialize minimum as the first element where answer [ i ] is not - 1
Updating the answer array
If answer [ i ] is - 1 , then minimum can be substituted in that place
Find minimum answer
Function to find the minimum number corresponding to every subarray of length K , for every K from 1 to N
Stores the minimum common elements for all subarray lengths Initialize with - 1.
Find for every element , the minimum length such that the number is present in every subsequence of that particular length or more
To store first occurence and gaps between occurences
To cover the distance between last occurence and the end of the array
To find the distance between any two occurences
Update and store the answer
Print the required answer
Function to find the smallest element common in all subarrays for every possible subarray lengths
Initializing indices array
Store the numbers present in the array
Push the index in the indices [ A [ i ] ] and also store the numbers in set to get the numbers present in input array
Function call to calculate length of subarray for which a number is present in every subarray of that length
Given array
Size of array
Function Call
function to find the smallest element left in the array by the given operations
Base Case
If this subproblem has occurred previously
Including i - th array element into the first subset
If i - th array element is not selected
Update dp [ i ] [ sum ]
Utility function to find smallest element left in the array by the given operations
Stores sum of the array elements
Traverse the array
Update total
Stores overlapping subproblems
Driver Code
Function to find minimize the remaining array element by removing pairs and replacing them by their absolute difference
Stores sum of array elements
Traverse the array
Update totalSum
Stores half of totalSum
dp [ i ] : True if sum i can be obtained as a subset sum
Base case
Stores closest sum that can be obtained as a subset sum
Traverse the array
Iterate over all possible value of sum
Update dp [ j ]
If sum i can be obtained from array elements
Update reach
Driver Code
Function to count the minimum number of substrings of str1 such that replacing even - indexed characters of those substrings converts the str1 to str2
Stores length of str1
Stores minimum count of operations to convert str1 to str2
Traverse both the given string
If current character in both the strings are equal
Stores current index of the string
If current character in both the strings are not equal
Replace str1 [ ptr ] by str2 [ ptr ]
Update ptr
Update cntOp
Driver Code
Python3 program for the above approach
Function to check if a number is composite or not
Corner cases
Check if the number is divisible by 2 or 3 or not
Check if n is a multiple of any other prime number
Function to check if a number is a Perfect Square or not
Function to check if a number is a Fibonacci number or not
If 5 * n ^ 2 + 4 or 5 * n ^ 2 - 4 or both are perfect square
Function to check if GCD of composite numbers from the array a [ ] which are divisible by k is a Fibonacci number or not
Traverse the array
If array element is composite and divisible by k
Calculate GCD of all elements in compositeset
If GCD is Fibonacci
Driver Code
Function to find the length of the longest subarray in which all elements are a factor of K
Stores length of the longest subarray in which all elements are a factor of K
Stores length of the current subarray
Traverse the array arr [ ]
If A [ i ] is a factor of K
Update Len
Update MaxLen
If A [ i ] is not a factor of K
Reset Len
Driver Code
Python3 program to implement the above approach
Function to find the minimum time to attend exactly one meeting
Stores minimum time to attend exactly one meeting
Sort entrance [ ] array
Sort exit [ ] time
Traverse meeting [ ] [ ]
Stores start time of current meeting
Stores end time of current meeting
Find just greater value of u in entrance [ ]
Find just greater or equal value of u in entrance [ ]
Stores enter time to attend the current meeting
Stores exist time after attending the meeting
Update start lies in range [ 0 , m - 1 ] and end lies in the range [ 0 , p - 1 ]
Update ans
Return answer
Driver Code
Stores interval of meeting
Stores entrance timings
Stores exit timings
Stores total count of meetings
Stores total entrance timings
Stores total exit timings
Minimum time
Function to split the given array into two separate arrays satisfying given condition
Stores resultant arrays
Traverse the array
If a [ i ] is smaller than or equal to k / 2
Print first array
Print second array
Driver Code
Given K
Given array
Given size
Function to find the queen closest to king in an attacking position
Function to find all the queens attacking the king in the chessboard
Iterating over the coordinates of the queens
If king is horizontally on the right of current queen
Set current queen as the attacker
If king is horizontally on the left of current queen
Set current queen as the attacker
If the king is attacked by a queen from the left by a queen diagonal above
Set current queen as the attacker
If the king is attacked by a queen from the left by a queen diagonally below
Set current queen as the attacker
If the king is attacked by a queen from the right by a queen diagonally above
Set current queen as the attacker
If the king is attacked by a queen from the right by a queen diagonally below
Set current queen as the attacker
If a king is vertically below the current queen
Set current queen as the attacker
If a king is vertically above the current queen
Set current queen as the attacker
Return the coordinates
Print all the coordinates of the queens attacking the king
Driver Code
Python3 program to implement the above approach
Function to find the smallest prime factor of all the numbers in range [ 0 , MAX ]
Stores smallest prime factor of all the numbers in the range [ 0 , MAX ]
No smallest prime factor of 0 and 1 exists
Traverse all the numbers in the range [ 1 , MAX ]
Update spf [ i ]
Update all the numbers whose smallest prime factor is 2
Traverse all the numbers in the range [ 1 , sqrt ( MAX ) ]
Check if i is a prime number
Update all the numbers whose smallest prime factor is i
Check if j is a prime number
Function to find count of prime factor of num
Stores count of prime factor of num
Calculate count of prime factor
Update count
Update num
Function to precalculate the count of numbers in the range [ 0 , i ] whose count of prime factors is a prime number
Stores the sum of all the numbers in the range [ 0 , i ] count of prime factor is a prime number
Traverse all the numbers in the range [ 1 , MAX ]
Stores count of prime factor of i
If count of prime factor is a prime number
Update sum [ i ]
Update sum [ i ]
Driver code
Stores smallest prime factor of all the numbers in the range [ 0 , MAX ]
Stores the sum of all the numbers in the range [ 0 , i ] count of prime factor is a prime number
N = sizeof ( Q ) / sizeof ( Q [ 0 ] ) ;
Function to check a number is Perfect Number or not
Stores sum of divisors
Find all divisors and add them
If sum of divisors is equal to N
Function to return maximum sum of a subarray of size K
If k is greater than N
Compute sum of first window of size K
Compute sums of remaining windows by removing first element of previous window and adding last element of current window
Return the answer
Function to find all the perfect numbers in the array
The given array is converted into binary array
Driver Code
Function to print the count of greater elements on left of each array element
Function to get the count of greater elements on left of each array element
Store distinct array elements in sorted order
Stores the count of greater elements on the left side
Traverse the array
Insert array elements into the set
Find previous greater element
Find the distance between the previous greater element of arr [ i ] and last element of the set
Driver code
Function to find the minimum cost to convert string A to string B
Length of string
Initialize maxlen as 0
Traverse the string A
Stores the length of substrings of string A
Traversing string B for each character of A
Shift i pointer towards right and increment length , if A [ i ] equals B [ j ]
If traverse till end
Update maxlen
Return minimum cost
Driver Code
Given two strings A and B
Function call
Function to find lexicographic rank of among all its substring
Length of string
Traverse the given string and store the indices of each character
Extract the index
Store it in the vector
Traverse the alphaIndex array lesser than the index of first character of given string
If alphaIndex [ i ] size exceeds 0
Traverse over the indices
Add count of substring equal to n - alphaIndex [ i ] [ j ]
Store all substrings in a vector strr starting with the first character of the given string
Insert the current character to substring
Store the subformed
Sort the substring in the lexicographical order
Find the rank of given string
Increase the rank until the given is same
If substring is same as the given string
Add 1 to rank of the given string
Driver Code
Given string
Function call
Function to find the H - index
Set the range for binary search
Check if current citations is possible
Check to the right of mid
Update h - index
Since current value is not possible , check to the left of mid
Print the h - index
citations
Function to check if all strings are equal after swap operations
Stores the frequency of characters
Stores the length of string
Traverse the array
Traverse each string
Check if frequency of character is divisible by N
Driver Code
Function to find the maximum sum
Base Case
Create a key to map the values
Check if mapped key is found in the dictionary
Traverse the array
Store left prefix sum
Store right prefix sum
Compare the left and right values
Store the value in dp array
Return the final answer
Function to print maximum sum
Stores prefix sum
Store results of subproblems
Traversing the array
Add prefix sum of array
Print the answer
Driver Code
Function Call
Binary tree node
Function to create new node
Utility function which calculates smallest three nodes of all leaf nodes
Check if current root is a leaf node
Traverse the left and right subtree
Function to find the K smallest nodes of the Binary Tree
Sorting the Leaf nodes array
Loop to print the K smallest Leaf nodes of the array
Driver Code
Construct binary tree
Function Call
Python3 implementation of the above approach
Function to check if all the pairs of the array are coprime with each other or not
Check if GCD of the pair is not equal to 1
All pairs are non - coprime Return false
Driver code
Python3 program of the above approach
Function to return smallest power of 2 with N digits
Driver Code
Function to find the subsequence of length K forming valid sequence
Stores the resultant string
Check whether character at index i is visited or not
Traverse the string
Push index of open bracket
Pop and mark visited
Increment count by 2
Append the characters and create the resultant string
Return the resultant string
Driver Code
Function call
Stores the nodes to be deleted
Structure of a Tree node
Function to compare the current node key with keys received from it left & right tree by Post Order traversal
Base Case
Find nodes lesser than the current root in the left subtree
Find nodes lesser than the current root in the right subtree
Stores all the nodes less than the current node 's
Add the nodes which are less than current node in left [ ]
Add the nodes which are less than current node in right [ ]
Create a combined vector for pass to it 's parent
Stores key that has maximum nodes
Return the vector of nodes
Driver Code
Given Tree
Function Call
Print the node value
Function to find the maximum sum path in the grid
Dimensions of grid [ ] [ ]
Stores maximum sum at each cell sum [ i ] [ j ] from cell sum [ 0 ] [ 0 ]
Iterate to compute the maximum sum path in the grid
Update the maximum path sum
Return the maximum sum
Driver Code
Function to find maximum cost to remove consecutive characters
Initialize the count
Maximum cost
Traverse from 0 to len ( s ) - 2
If characters are identical
Add cost [ i ] if its maximum
Add cost [ i + 1 ] if its maximum
Increment i
Return the final max count
Given string s
Given cost of removal
Function Call
Lookup table
Function to count the value of S after adding arr [ i ] or arr [ i - 1 ] to the sum S at each time
Base Case
Store the mod value
If the mod value lies in the range then return 1
Else return 0
Store the current state
If already computed , return the computed value
Recursively adding the elements to the sum adding ai value
Adding arr [ i ] - 1 value
Return the maximum count to check for root value as well
Avoid counting idx = 0 as possible solution we are using idx != 0
Return the value of current state
Driver Code
Python3 program for the above approach
Function to check if cell with value 1 doesn 't reaches the bottom right cell or not
Number of rows and columns
Initialise the deque
Traverse the matrix
Push 1 to front of queue
Push 2 to back of queue
Store all the possible direction of the current cell
Run multi - source BFS
Get the front element
If 1 reached corner first
Insert new poin queue
If 1 can 't reach the bottom  right then return false
Driver Code
Given matrix
Function call
Python3 program for the above approach
Function to returns a smallest elements of all KxK submatrices of a given NxM matrix
Stores the dimensions of the given matrix
Stores the required smallest elements
Update the smallest elements row - wise
Update the minimum column - wise
Store the final submatrix with required minimum values
Return the resultant matrix
Function call
Print resultant matrix with the minimum values of KxK sub - matrix
Given matrix
Given K
Python3 Program to implement the above approach Function to find the kth greatest character from the string
Sorting the in non - increasing Order
Function to prthe K - th character from the subS [ l ] . . S [ r ]
0 - based indexing
Subof strr from the indices l to r .
Extract kth Largest character
Function to replace character at pos of strr by the character s
Index of S to be updated .
Character to be replaced at index in S
Driver Code
Given string
Count of queries
Queries
Python3 program for the above approach
Function to return minimum difference between sum of two subarrays
To store total sum of array
Calculate the total sum of the array
Stores the prefix sum
Stores the minimum difference
Traverse the given array
To store minimum difference
Update minDiff
Return minDiff
Given array
Length of the array
Function to count the maximum number of subarrays with sum K
Stores all the distinct prefixSums obtained
Stores the prefix sum of the current subarray
Stores the count of subarrays with sum K
If a subarray with sum K is already found
Increase count
Reset prefix sum
Clear the set
Insert the prefix sum
Driver Code
Function to check if a number is prime or not .
If n has any factor other than 1 , then n is non - prime .
Function to return the count of subarrays made up of prime numbers only
Stores the answer
Stores the count of continuous prime numbers in an array
If the current array element is prime
Increase the count
Update count of subarrays
If the array ended with a continuous prime sequence
Driver Code
Function to count the minimum number of subarray flips required
Iterate the array
If arr [ i ] and flag are equal
Return the answer
Driver Code
Function to obtain the minimum possible sum from the array by K reductions
Insert elements into the MaxHeap
Remove the maximum
Insert maximum / 2
Stores the sum of remaining elements
Driver code
Python3 program to implement the above approach
Function to add index of the deleted character
If index is beyond the range
Insert the index of the deleted characeter
Search over the subtrees to find the desired index
Function to return count of deleted indices which are to the left of the current index
Function to generate the sum of indices
Stores the original index of the characters in sorted order of key
Traverse the map
Extract smallest index of smallest character
Delete the character from the map if it has no remaining occurrence
Stores the original index
Count of elements removed to the left of current character
Current index of the current character
For 1 - based indexing
Insert the deleted index in the segment tree
Final answer
Driver Code
Python3 program to implement the above approach
Smallest prime factor array
Stores if a number is prime or not
Function to compute all primes using Sieve of Eratosthenes
Function for finding smallest prime factors for every integer
Function to find the sum of prime factors of number
Add smallest prime factor to the sum
Reduce N
Return the answer
Function to return the length of sequence of for the given number
If the number is prime
If a previously computed subproblem occurred
Calculate the sum of prime factors
Function to return the maximum length of sequence for the given range
Pre - calculate primes
Precalculate smallest prime factors
Iterate over the range
Update maximum length
Driver Code
Python3 program to implement the above approach
Function to find largest subarray with no duplicates
Stores index of array elements
Update j based on previous occurrence of a [ i ]
Update ans to store maximum length of subarray
Store the index of current occurrence of a [ i ]
Return final ans
Driver Code
Function to count the number of ways
Base Case : Reached the end of the array
Sum is equal to the required sum
Recursively check if required sum can be obtained by adding current element or by subtracting the current index element
Function to call dfs ( ) to calculate the number of ways
Driver Code
Function to create a new node
Function to count the frequency of node value present in the tree
Function that returns the max distance between the nodes that have the same key
If right and left subtree did not have node whose key is value
Check if the current node is equal to value
If the left subtree has no node whose key is equal to value
If the right subtree has no node whose key is equal to value
Function that finds if the distance between any same nodes is at most K
Create the mp to look for same value of nodes
Counting the frequency of nodes
If the returned value of distance is exceeds dist
Print the result
Driver Code
Python3 Program to implement the above approach
Function to find the minimum sum of two elements that are atleast K distance apart
Length of the array
Iterate over the array
Initialize the min value
Iterate from i + k to N
Find the minimum
Update the minimum sum
Prthe answer
Driver Code
Node of the singly linked list
Function to insert a node at the beginning of the singly Linked List
Allocate node
Insert data
Point to the head
Make the new Node the new head
Function to return the count of distinct absolute values in the linked list
Create the Head
Insert nodes
Python3 program to implement the above approach
Stores the found edges
Stores the number of nodes
Stores the capacity of each edge
Stores the cost per unit flow of each edge
Stores the distance from each node and picked edges for each node
Function to check if it is possible to have a flow from the src to sink
Initialise found [ ] to false
Initialise the dist [ ] to INF
Distance from the source node
Iterate untill src reaches N
If already found
Evaluate while flow is still in supply
Obtain the total value
If dist [ k ] is > minimum value
Update
If dist [ k ] is > minimum value
Update
Update src to best for next iteration
Return the value obtained at sink
Function to obtain the maximum Flow
If a path exist from src to sink
Set the default amount
Return pair total cost and sink
Driver Code
Creating an object flow
Recursive function to return gcd of a and b
Function to calculate and return LCM of two numbers
Function to count pairs whose sum of GCD and LCM is equal to N
Driver code
Python3 program to find the minimum cost to color all vertices of an Undirected Graph
Function to add edge in the given graph
Function to perform DFS traversal and find the node with minimum cost
Update the minimum cost
Recur for all connected nodes
Function to calculate and return the minimum cost of coloring all vertices of the Undirected Graph
Marks if a vertex is visited or not
Perform DFS traversal
If vertex is not visited
Update minimum cost
Return the final cost
Driver Code
Python3 program to implement the above approach
Node class
Initialise constructor
Function to count the number of 1 in number
Function to find the maximum count of setbits in a root to leaf
Check if root is null
Update the maximum count of setbits
Traverse left of binary tree
Traverse right of the binary tree
Driver code
Function to return minimum number of moves required
Stores the number of moves required to obtain respective values from the given array
Traverse the array
Insert 0 into V [ a [ i ] ] as it is the initial state
Insert the moves required to obtain current a [ i ]
Traverse v [ ] to obtain minimum count of moves
Check if there are at least K equal elements for v [ i ]
Add the sum of minimum K moves
Update answer
Return the final answer
Driver Code
Function to return length of longest subarray with odd product
If even element is encountered
Update maximum
Driver code
Function to get the maximum of all the subarrays of size Y
ith index of maxarr array will be the index upto which Arr [ i ] is maximum
Stack is used to find the next larger element and keeps track of index of current iteration
Loop for remaining indexes
j < i used to keep track whether jth element is inside or outside the window
Return submax
Function to get the minimum for all subarrays of size Y
ith index of minarr array will be the index upto which Arr [ i ] is minimum
Stack is used to find the next smaller element and keeping track of index of current iteration
Loop for remaining indexes
j < i used to keep track whether jth element is inside or outside the window
Return submin
Function to get minimum difference
Create submin and submax arrays
Store initial difference
Calculate temporary difference
Final minimum difference
Given array arr [ ]
Given subarray size
Function call
Python3 program for the above approach
Function to calculate value of quadratic equation for some x
Function to calculate the minimum value of x such that F ( x ) >= K using binary search
Start and end value for binary search
Binary Search
Computing F ( mid ) and F ( mid - 1 )
If F ( mid ) >= K and F ( mid - 1 ) < K return mid
If F ( mid ) < K go to mid + 1 to end
If F ( mid ) > K go to start to mid - 1
If no such value exist
Given coefficients of Equations
Find minimum value of x
To create tree
Function to store the path from given vertex to the target vertex in a vector path
If the target node is found , push it into path vector
To prevent visiting a node already visited
Recursive call to the neighbours of current node inorder to get the path
Function to obtain and return the farthest node from a given vertex
If the current height is maximum so far , then save the current node
Iterate over all the neighbours of current node
This is to prevent visiting a already visited node
Next call will be at 1 height higher than our current height
Function to add edges
Reset to - 1
Reset to - 1
Stores one end of the diameter
Reset the maxHeight
Stores the second end of the diameter
Store the diameter into the vector path
Diameter is equal to the path between the two farthest nodes leaf1 and leaf2
Driver code
Python3 program to find k - th term of N merged Arithmetic Progressions
Function to count and return the number of values less than equal to N present in the set
Check whether j - th bit is set bit or not
Function to implement Binary Search to find K - th element
Find middle index of the array
Search in the left half
Search in the right half
If exactly K elements are present
Driver Code
Function to find points at minimum distance
Hash to store points that are encountered
Queue to store initial set of points
Vector to store integral points
Using bfs to visit nearest points from already visited points
Get first element from queue
Check if ( x - 1 ) is not encountered so far
Update hash with this new element
Insert ( x - 1 ) into queue
Push ( x - 1 ) as new element
Decrement counter by 1
Check if ( x + 1 ) is not encountered so far
Update hash with this new element
Insert ( x + 1 ) into queue
Push ( x + 1 ) as new element
Decrement counter by 1
Print result array
Driver code
Python3 implementation to find the Leftmost Column with atleast a 1 in a sorted binary matrix
Function to search for the leftmost column of the matrix with atleast a 1 in sorted binary matrix
Loop to iterate over all the rows of the matrix
Binary Search to find the leftmost occurence of the 1
Condition if the column contains the 1 at this position of matrix
If there is a better solution then update the answer
Condition if the solution doesn 't exist in the matrix
Driver Code
Python3 implementation of the approach Function to find largest index for each distinct character occuring exactly K times .
Function to find largest index for each distinct character occuring exactly K times
Finding all characters present in S
Finding all distinct characters in S
To store result for each character
Loop through each lower case English character
If current character is absent in s
Getting current character
Finding count of character ch in S
To store max Index encountred so far
Printing required result
If no such character exists , print - 1
Driver code
Function to find the smallest number greater than or equal to n represented as the sum of distinct powers of k
Vector P to store the base k representation of the number
If the representation is >= 2 , then this power of k has to be added once again and then increase the next power of k and make the current power 0
Reduce all the lower power of k to 0
Check if the most significant bit also satisfy the above conditions
Converting back from the k - nary representation to decimal form .
Driver code
Function that returns true if the can be balanced
Count to check the difference between the frequencies of ' ( ' and ' ) ' and count_1 is to find the minimum value of freq ( ' ( ' ) - freq ( ' ) ' )
Traverse the given string
Increase the count
Decrease the count
Find the minimum value of freq ( ' ( ' ) - freq ( ' ) ' )
If the minimum difference is greater than or equal to - 1 and the overall difference is zero
Driver code
Function to find the absolute difference between the XOR of non - primes and the XOR of primes in the given array
Find maximum value in the array
USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array " prime [ 0 . . n ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
Remaining part of SIEVE
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Store the XOR of primes in X1 and the XOR of non primes in X2
The number is prime
The number is non - prime
Return the absolute difference
Driver code
Find the absolute difference
Python3 program to traverse in bottom up manner
Trie node
endOfWord is true if the node represents end of a word
Function will return the new node ( initialized to NULLs )
Function will insert the string in a trie recursively
Insert a new node
Recursive call for insertion of string
Make the endOfWord true which represents the end of string
Function call to insert a string
Function call with necessary arguments
Function to search the string in a trie recursively
When a string or any character of a string is not found
Condition of finding string successfully
Return true when endOfWord of last node containes true
Recursive call and return value of function call stack
Function call to search the string
If string found
Driver code
Function call to insert the string
Function call to search the string
Python3 implementation of the approach
Representation of node
Function to push a node at the beginning
Function to count the number of duplicate nodes in the linked list
print ( 1 ) Starting from the next node
print ( 2 ) If some duplicate node is found
Return the count of duplicate nodes
Driver code
Function that returns true if it is possible to form B from A satisfying the given conditions
List to store the frequency of characters in A
Vector to store the count of characters used from a particular group of characters
Store the frequency of the characters
If a character in B is not present in A
If count of characters used from a particular group of characters exceeds m
Update low to the starting index of the next group
If count of characters used from a particular group of characters has not exceeded m
Python3 program to convert fractional decimal to binary number
Find total sum and frequencies of elements
Find minimum value to be subtracted .
Find maximum sum after removal
Driver Code
Python3 implementation of the approach
Function to calculate the prefix
Creating one based indexing
Initializing and creating prefix array
Creating a prefix array for every possible value in a given range
Function to return the kth largest element in the index range [ l , r ]
Binary searching through the 2d array and only checking the range in which the sub array is a part
Driver code
Creating the prefix array for the given array
Queries
Perform queries
Class to represent Disjoint Set Data structure
Initially , all elements are in their own set .
Finds the representative of the set that x is an element of
if x is not the parent of itself , then x is not the representative of its set . so we recursively call Find on its parent and move i 's node directly under the  representative of this set
Unites the set that includes x and the set that includes y
Find the representatives ( or the root nodes ) for x an y
Elements are in the same set , no need to unite anything .
If x ' s ▁ rank ▁ is ▁ less ▁ than ▁ y ' s rank Then move x under y so that depth of tree remains less
Else if y ' s ▁ rank ▁ is ▁ less ▁ than ▁ x ' s rank Then move y under x so that depth of tree remains less
Else if their ranks are the same
Then move y under x ( doesn 't matter which one goes where)
And increment the result tree 's  rank by 1
Returns number of islands in a [ ] [ ]
The following loop checks for its neighbours and unites the indexes if both are 1.
If cell is 0 , nothing to do
Check all 8 neighbours and do a Union with neighbour 's set if neighbour is  also 1
Array to note down frequency of each set
If frequency of set is 0 , increment numberOfIslands
Driver Code
Python implementation of the approach
Function to return the sum of the squares of first N natural numbers
Function to return the maximum N such that the sum of the squares of first N natural numbers is not more than X
Iterate till maxvalue of N
If the condition fails then return the i - 1 i . e sum of squares till i - 1
Driver code
Python3 implementation of the above approach
function to calculate max - min
There should be at - least two elements
To store first and second minimums
To store first and second maximums
Driver code
function to find the smallest number 's index
Do a binary search
find the mid element
Check for break point
Return the index
Driver code
print the smallest number
Python3 implementation of the approach
If found new minimum
If arr [ i ] = min then rightmost index for min will change
If found new maximum
If arr [ i ] = max then rightmost index for max will change
Driver code
Function to find smallest and largest element from principal and secondary diagonal
take length of matrix
declare and initialize variables with appropriate value
Condition for principal diagonal
take new smallest value
take new largest value
Condition for secondary diagonal
take new smallest value
take new largest value
Declare and initialize 5 X5 matrix
Python program for Indexed Sequential Search
Storing element
Storing the index
Driver code
Element to search
Function call
Python3 implementation of the approach
Sorting the vector
Count of numbers which are greater than v [ i ]
Driver codemain ( )
Function to count number of segments
Iterate in the array
check if array element greater then X or not
if flag is true
After iteration complete check for the last segment
Driver Code
Python 3 program to find the elements whose frequency lies in the range [ l , r ]
Hash map which will store the frequency of the elements of the array .
Increment the frequency of the element by 1.
Print the element whose frequency lies in the range [ l , r ]
Driver Code
''Function returns the  count of the triplets
Iterate for all triples pairs ( i , j , l )
If the condition is satisfied
Driver code
Python 3 program of kth smallest / largest in a small range unsorted array
Storing counts of elements
Traverse hash array build above until we reach k - th smallest element .
Driver Code
Function to show the working of Meta binary search
Set number of bits to represent
largest array index while ( ( 1 << lg ) < n - 1 ) : lg += 1
Incrementally construct the index of the target value
find the element in one direction and update position
if element found return pos otherwise - 1
Driver code
Python program to check if the number lies in given range
Function that answers every query
container to store all range
hash the L and R
Push the element to container and hash the L and R
sort the elements in container
each query
get the number same or greater than integer
if it lies
check if greater is hashed as 2
check if greater is hashed as 1
Driver Code
function call to answer queries
This function returns median of a [ ] and b [ ] . Assumptions in this function : Both a [ ] and b [ ] are sorted arrays
Current index of i / p array a [ ]
Current index of i / p array b [ ]
Below is to handle the case where all elements of a [ ] are smaller than smallest ( or first ) element of b [ ] or a [ ] is empty
Below is to handle case where all elements of b [ ] are smaller than smallest ( or first ) element of a [ ] or b [ ] is empty
Below is to handle the case where sum of number of elements of the arrays is even
Below is to handle the case where sum of number of elements of the arrays is odd
Driver Code
prints element and NSE pair for all elements of list
Driver program to test above function
Python 3 code to find longest subarray with difference between max and min as at - most 1.
longest constant range length
first number
If we see same number
If we see different number , but same as previous .
If number is neither same as previous nor as current .
Driver Code
A Binary Tree Node
' data ' is input . We need to reverse path from root to data . level ' ▁ is ▁ current ▁ level . ▁ ▁ temp ' that stores path nodes . nextpos ' used to pick next item for reversing.
return None if root None
Final condition if the node is found then
store the value in it 's level
change the root value with the current next element of the map
increment in k for the next element
store the data in perticular level
We go to right only when left does not contain given data . This way we make sure that correct path node is stored in temp [ ]
If current node is part of the path , then do reversing .
return None if not element found
Reverse Tree path
store per level data
it is for replacing the data
reverse tree path
INORDER
Utility function to create a new tree node
Driver code
Let us create binary tree shown in above diagram
7 / \ 6 5 / \ / \ 4 3 2 1
Reverse Tree Path
Traverse inorder
Search function for searching the first element of the subarray which is greater or equal to the last element ( num )
Returns length of the longest array with first element smaller than the last element .
Search space for the potential first elements .
It will store the Indexes of the elements of search space in the original array .
Initially the search space is empty .
We will add an ith element in the search space if the search space is empty or if the ith element is greater than the last element of the search space .
we will search for the index first element in the search space and we will use it find the index of it in the original array .
Update the answer if the length of the subarray is greater than the previously calculated lengths .
Driver Code
Python3 program for the above approach
Driver code
Python 3 program to find if a string is suffix of another
Driver Code
Test case - sensitive implementation of endsWith function
function to find if all occurrences of a character appear together in a string .
To indicate if one or more occurrences of ' c ' are seen or not .
Traverse given string
If current character is same as c , we first check if c is already seen .
If this is very first appearance of c , we traverse all consecutive occurrences .
To indicate that character is seen once .
Driver Code
Python program to implement front and back search
Start searching from both ends
Keep searching while two indexes do not cross .
Driver code
Python3 code to find max ( X , Y ) / min ( X , Y ) after P turns
1 st test case
2 nd test case
function to calculate sum between two indices in list
bottom up tabular dp
initialize table
base cases k = 1
n = 1
2 to k partitions for i in range ( 2 , k + 1 ) : 2 to n boards
track minimum
i - 1 th separator before position arr [ p = 1. . j ]
required
Driver Code
Calculate size of array .
Function return count of cross line in an array
Move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position
increment cross line by one
Driver Code
function to return maximum element using recursion
if n = 0 means whole array has been traversed
Driver Code
Function calling
Python program to remove vowels from a string Function to remove vowels
Driver program
Function to find the maximum score obtained by the players A and B
Sort the array in descending order
Stores the maximum amount of money obtained by A
Stores the maximum amount of money obtained by B
If the value of N is 1
Update the amountA
Prthe amount of money obtained by both players
Update the amountA
Update the amountB
Traverse the array arr [ ]
If i is an odd number
Update the amountB
Update the amountA
Driver Code
Function to find the minimum number of swaps required to sort the array in increasing order
Stores the array elements with its index
Sort the array in the increasing order
Keeps the track of visited elements
Stores the count of swaps required
Traverse array elements
If the element is already swapped or at correct position
Find out the number of nodes in this cycle
Update the value of j
Move to the next element
Increment cycle_size
Update the ans by adding current cycle
Function to find the minimum number of swaps required to sort the array in decreasing order
Stores the array elements with its index
Sort the array in the descending order
Keeps track of visited elements
Stores the count of resultant swap required
Traverse array elements
If the element is already swapped or at correct position
Find out the number of node in this cycle
Update the value of j
Move to the next element
Increment the cycle_size
Update the ans by adding current cycle size
Function to find minimum number of swaps required to minimize the sum of absolute difference of adjacent elements
Sort in ascending order
Sort in descending order
Return the minimum value
Drive Code
Function to sort the array having array element only 0 , 1 , 2 , and 3
Iterate until mid <= j
If arr [ mid ] is 0
Swap integers at indices i and mid
Increment i
Increment mid
Otherwise if the value of arr [ mid ] is 3
Swap arr [ mid ] and arr [ j ]
Decrement j
Otherwise if the value of arr [ mid ] is either 1 or 2
Increment the value of mid
Iterate until i <= j
If arr [ i ] the value of is 2
Swap arr [ i ] and arr [ j ]
Decrement j
Otherwise , increment i
Print the sorted array arr [ ]
Driver Code
Function to find if is it possible to make the array strictly increasing by removing at most one element
Stores the count of numbers that are needed to be removed
Store the index of the element that needs to be removed
Traverse the range [ 1 , N - 1 ]
If arr [ i - 1 ] is greater than or equal to arr [ i ]
Increment the count by 1
Update index
If count is greater than one
If no element is removed
If only the last or the first element is removed
If a [ index ] is removed
If a [ index - 1 ] is removed
Driver Code
Function to arrange the vowels in sorted order in the string at their respective places
Store the size of the string
Stores vowels of string S
Traverse the string , S and push all the vowels to string vow
If vow is empty , then print S and return
Sort vow in alphabetical order
Traverse the string , S
Replace S [ i ] with vow [ j ] iif S [ i ] is a vowel , and increment j by 1
Print the string
Driver Code
Function to find the maximum number of buckets that can be filled with the amount of water available
Find the total available water
Sort the array in ascending order
Check if bucket can be filled with available water
Print count of buckets
Driver code
Function to find the number of strictly increasing subsequences in an array
Sort the array
Stores final count of subsequences
Traverse the array
Stores current element
Stores frequency of the current element
Count frequency of the current element
If current element frequency is greater than count
Print the final count
Given array
Size of the array
Function call to find the number of strictly increasing subsequences
Function to count the number of triplets ( a , b , c ) Such that the equations ax ^ 2 + bx + c = 0 has real roots
sort he array in ascending order
store count of triplets ( a , b , c ) such that ax ^ 2 + bx + c = 0 has real roots
base case
Traverse the given array
if value of a and c are equal to b
increment a
Decrement c
condition for having real roots for a quadratic equation
if b lies in between a and c
update count
update count
increment a
Decrement c
for each pair two values are possible of a and c
Driver code
Function to maximize difference of the sum of absolute difference of an element with the rest of the elements in the array
Sort the array in ascending order
Stores prefix sum at any instant
Store the total array sum
Initialize minimum and maximum absolute difference
Traverse the array to find the total array sum
Traverse the array arr [ ]
Store the number of elements to its left
Store the number of elements to its right
Update the sum of elements on its left
Store the absolute difference sum
Update the Minimum
Update the Maximum
Update sum of elements on its left
Prthe result
Driven Code
Function to find the maximum count of pairs required to be removed such that no pairs exist whose sum equal to K
Stores maximum count of pairs required to be removed such that no pairs exist whose sum equal to K
Base Case
Sort the array
Stores index of left pointer
Stores index of right pointer
Stores sum of left and right pointer
If s equal to k
Update cntPairs
Update left
Update right
If s > k
Update right
Update left
Return the cntPairs
Driver Code
Function call
Function to find the minimum cost to split array into K subsets
Sort the array in descending order
Stores minimum cost to split the array into K subsets
Stores position of elements of a subset
Iterate over the range [ 1 , N ]
Calculate the cost to select X - th element of every subset
Update min_cost
Update X
Driver code
Function call
Function to find minimum difference between largest and smallest element after K replacements
Sort array in ascending order
Length of array
Minimum difference
Check for all K + 1 possibilities
Return answer
Driver Code
Given array
Prints the minimum possible difference
Python3 program for above approach
Function to find minimum difference between the largest and smallest element after K replacements
Create a MaxHeap
Create a MinHeap
Update maxHeap and MinHeap with highest and smallest K elements respectively
Insert current element into the MaxHeap
If maxHeap size exceeds K + 1
Remove top element
Insert current element into the MaxHeap
If maxHeap size exceeds K + 1
Remove top element
Store all max element from maxHeap
Store all min element from minHeap
Generating all K + 1 possibilities
Return answer
Given array
Function call
Function to check all subset - sums of K - length subsets in A [ ] is greater that that in the array B [ ] or not
Sort the array in ascending order
Sort the array in descending order
Stores sum of first K elements of A [ ]
Stores sum of first K elements of B [ ]
Traverse both the arrays
Update sum1
Update sum2
If sum1 exceeds sum2
Driver Code
Function to sort first K array elements in descending and last N - K in ascending order
Sort the array in descending order
Sort last ( N - K ) array elements in ascending order
Driver Code
Function to calculate the median of all possible subsets by given operations
Stores sum of elements of arr [ ]
Traverse the array arr [ ]
Update sum
Sort the array
DP [ i ] [ j ] : Stores total number of ways to form the sum j by either selecting ith element or not selecting ith item .
Base case
Fill dp [ i ] [ 0 ]
Base case
Fill all the DP states based on the mentioned DP relation
If j is greater than or equal to arr [ i ]
Update dp [ i ] [ j ]
Update dp [ i ] [ j ]
Stores all possible subset sum
Traverse all possible subset sum
Stores count of subsets whose sum is j
Itearate over the range [ 1 , M ]
Insert j into sumSub
Stores middle element of sumSub
Driver Code
Function to prthe index from where the operation can be started
Initialize B
Initialize save
Make B equals to arr
Sort the array B
Traverse from N - 1 to 1
If B [ i ] & B [ i - 1 ] are unequal
If all elements are same
If arr [ 1 ] is maximum element
If arr [ N - 1 ] is maximum element
Find the maximum element
Driver Code
Given array arr
Length of array
Function Call
Function to find the lexicographically smallest subsequence of length N - 1
Generate all subsequence of length N - 1
Store main value of string str
Erasing element at position i
Sort the vector
Print first element of vector
Driver Code
Given string S
Function Call
Function to find the maximum even sum of any subsequence of length K
If count of elements is less than K
Stores maximum even subsequence sum
Stores Even numbers
Stores Odd numbers
Traverse the array
If current element is an odd number
Insert odd number
Insert even numbers
Sort Odd [ ] array
Sort Even [ ] array
Stores current index Of Even [ ] array
Stores current index Of Odd [ ] array
If K is odd
If count of elements in Even [ ] >= 1
Update maxSum
Update i
If count of elements in Even [ ] array is 0.
Update K
If count of elements in Even [ ] and odd [ ] >= 2
Update maxSum
Update j .
Update maxSum
Update i
Update K
If count of elements in Even [ ] array >= 2.
Update maxSum
Update i .
Update K .
If count of elements in Odd [ ] array >= 2
Update maxSum
Update i .
Update K .
Driver Code
Function to calculate weighted median
Store pairs of arr [ i ] and W [ i ]
Sort the list of pairs w . r . t . to their arr [ ] values
If N is odd
Traverse the set pairs from left to right
Update sums
If sum becomes > 0.5
If N is even
For lower median traverse the set pairs from left
Update sums
When sum >= 0.5
For upper median traverse the set pairs from right
Update sums
When sum >= 0.5
Driver Code
Given array arr [ ]
Given weights W [ ]
Function Call
Function to get the Kth smallest element from an array of intervals
Store all the intervals so that it returns the minimum element in O ( 1 )
Insert all Intervals into the MinHeap
Stores the count of popped elements
Iterate over MinHeap
Stores minimum element from all remaining intervals
Remove minimum element
Check if the minimum of the current interval is less than the maximum of the current interval
Insert new interval
Driver Code
Intervals given
Size of the arr
Python3 program for the above approach
Function to calculate the maximum Manhattan distance
Stores the maximum distance
Find Manhattan distance using the formula | x1 - x2 | + | y1 - y2 |
Updating the maximum
Driver code
Given co - ordinates
Function call
Function to find the length of the longest increasing sorted sequence
Stores the count of all elements
Store the original array
Sort the array
If adjacent element are not same
Increment count
Store frequency of each element
Initialize a DP array
Iterate over the array ar [ ]
Length of the longest increasing sorted sequence
Iterate over the array
Current element
If the element has been encountered the first time
If all the x - 1 previous elements have already appeared
Otherwise
If all x - 1 elements have already been encountered
Increment the count of the current element
Update maximum subsequence size
Return the maximum subsequence size
Driver Code
Function call
Function to maximize the Kth column sum
Store all the elements of the resultant matrix of size N * N
Store value of each elements of the matrix
Fill all the columns < K
Fill all the columns >= K
Function to print the matrix
Driver Code
Function to calculate the sum between the given range as per value of m
Stores the sum
Condition for a to print the sum between ranges [ a , b ]
Return sum
Function to precalculate the sum of both the vectors
Make Prefix sum array
Function to compute the result for each query
Take a dummy vector and copy the element of arr in brr
Sort the dummy vector
Compute prefix sum of both vectors
Performs operations
Function Call to find sum
Function Call to find sum
Driver Code
Given arr [ ]
Number of queries
Given queries
Function Call
Python3 program to implement the above approach
Function to calculate the XOR of the sum of every pair
Stores the maximum bit
Look for all the k - th bit
Stores the modulo of elements B [ ] with ( 2 ^ ( k + 1 ) )
Calculate modulo of array B [ ] with ( 2 ^ ( k + 1 ) )
Sort the array C [ ]
Stores the total number whose k - th bit is set
Calculate and store the modulo of array A [ ] with ( 2 ^ ( k + 1 ) )
Lower bound to count the number of elements having k - th bit in the range ( 2 ^ k - x , 2 * 2 ^ ( k ) - x )
Add total number i . e ( r - l ) whose k - th bit is one
Lower bound to count the number of elements having k - th bit in range ( 3 * 2 ^ k - x , 4 * 2 ^ ( k ) - x )
If count is even , Xor of k - th bit becomes zero , no need to add to the answer . If count is odd , only then , add to the final answer
Return answer
Driver code
Function call
Function to find the minimum count of subsets of required type
Stores the result
Store the maximum and minimum element of the current subset
Update current maximum
If difference exceeds K
Update count
Update maximum and minimum to the current subset
Driver Code
Python3 Program to implement the above approach
Function to rearrange the second array such that the sum of its product of same indexed elements from both the arrays is minimized
Stores ( i - 1 ) * ( n - i ) * a [ i ] for every i - th element
Updating the value of pro according to the function
Sort the array in reverse order
Sort the products
Updating the ans
Return the ans
Driver code
Function call
Python3 program for the above approach Function to perform the rearrangement
Initialize variables
Loop until i crosses j
This check is to find the minimum values in the ascending order
Condition to alternatively iterate variable i and j
Perform swap operation
Increment i
Assign the value of min
Perform swap
Decrement i
Assign the value of min
Print the array
Driver Code
Given Array arr [ ]
Function call
Function to find the maximum number of elements greater than X by equally distributing
Sorting the array
Loop to iterate over the elements of the array
If no more elements can become larger than x
Driver Code
Python3 program for the above approach
Function to print the remaining element
Priority queue can be used to construct max - heap
Insert all element of arr [ ] into priority queue . Default priority queue in Python is min - heap so use - 1 * arr [ i ]
Perform operation until heap size becomes 0 or 1
Remove largest element
Remove 2 nd largest element
If extracted elements are not equal
Find X - Y and push it to heap
If heap size is 1 , then print the remaining element
Else print " - 1"
Driver Code
Given array arr [ ]
Size of array arr [ ]
Function call
Returns count of character in the string
Check for vowel
Function to sort the string according to the frequency
Vector to store the frequency of characters with respective character
Inserting frequency with respective character in the vector pair
Sort the vector , this will sort the pair according to the number of characters
Print the sorted vector content
Driver code
Function to find maximum sum after rearranging array elements
Auxiliary array to find the count of each selected elements Initialize with 0
Finding count of every element to be selected
Making it to 0 - indexing
Prefix sum array concept is used to obtain the count array
Iterating over the count array to get the final array
Variable to store the maximum sum
Sorting both the arrays
Loop to find the maximum sum
Driver code
Python 3 implementation to find the sum of maximum distinct digit sum of at most M numbers from 1 to N that are factors of K
Function to find the factors of K in N
Initialise a vector
Find out the factors of K less than N
Find the digit sum of each factor
Sum of digits for each element in vector
Find the largest M distinct digit sum from the digitSum vector
Find the sum of last M numbers .
Find the at most M numbers from N natural numbers whose digit sum is distinct and those M numbers are factors of K
Find out the factors of K less than N
Sum of digits for each element in vector
Sorting the digitSum vector
Removing the duplicate elements
Finding the sum and returning it
Driver Code
Function Call
Partition function which will partition the array and into two parts
Compare hash values of objects
Classic quicksort algorithm
Function to sort and print the objects
As the sorting order is blue objects , red objects and then yellow objects
Quick sort function
Printing the sorted array
Let 's represent objects as strings
Function to return the product of the digits of n
Function to sort the array according to the product of the digits of elements
Vector to store the digit product with respective elements
Inserting digit product with elements in the vector pair
Sort the vector , this will sort the pair according to the product of the digits
Print the sorted vector content
Driver code
Function to return the minimum steps required to reduce all the elements to 0
Maximum element from the array
Driver code
Return the maximum water that can be stored
Check all possible pairs of buildings
Maximum so far
Driver code
Python 3 implementation of the approach
Function that returns true if arr [ ] contains all the divisors of some integer
Maximum element from the array
Vector to store divisors of the maximum element i . e . X
Store all the divisors of X
If the lengths of a [ ] and b are different return false
Sort a [ ] and b
If divisors are not equal return false
Driver code
Function to print Kth node for each node
Vector to store nodes directly connected to ith node along with their values
Add edges to the vector along with the values of the node
Sort neighbors of every node and find the Kth node
Get the kth node
If total nodes are < k
Driver code
Function to Calculate the Minimum value of M
To store the minimum M for each point in array
Sort the array
Index at which atleast required point are inside square of length 2 * M
Driver Code
Function to find out the path It takes the adjacency matrix representation of the graph as input
Find out number of edges each vertex has
Find out how many vertex has odd number edges
If number of vertex with odd number of edges is greater than two return " No ▁ Solution " .
If there is a path find the path Initialize empty stack and path take the starting current as discussed
Loop will run until there is element in the stack or current edge has some neighbour .
If current node has not any neighbour add it to path and pop stack set new current to the popped element
If the current vertex has at least one neighbour add the current vertex to stack , remove the edge between them and set the current to its neighbour .
Print the path
Driver Code
Test case 1
Test case 2
Test case 3
Function to return the minimized sum
Sort the array
Median of the array
Calculate the minimized sum
Return the required sum
Driver code
function to prin the odd and even indexed digits
lists to store the odd and even positioned digits
traverse through all the indexes in the integer
if the digit is in odd_index position append it to odd_position list
else append it to the even_position list
print the elements in the list in sorted order
Driver Code
Function to return the count of valid pairs
Storing occurrences of each element
Sort the array in deceasing order
Start taking largest element each time
If element has already been paired
Find the number which is greater than a [ i ] and power of two
If there is a number which adds up with a [ i ] to form a power of two
Edge case when a [ i ] and crr - a [ i ] is same and we have only one occurrence of a [ i ] then it cannot be paired
Remove already paired elements
Return the count
Driver code
Returns the number of positions where A ( i + 1 ) is greater than A ( i ) after rearrangement of the array
Creating a HashMap containing char as a key and occurrences as a value
Find the maximum frequency
Driver code
Function to print required permutation
Storing elements and indexes
Filling the answer array
pair element of A and B
Fill the remaining elements of answer
Output required permutation
Driver Code
Function to sort all the multiples of x from the array in ascending order
Insert all multiples of 5 to a vector
Sort the vector
update the array elements
Driver code
Print the result
Function to return the minimum increase in side lengths of the triangle
push the three sides to a array
sort the array
check if sum is greater than third side
Driver code
function to find min sum after operation
Sort the array
Pick middle value
Sum of absolute differences .
Driver Code
Python 3 program to print run length encoding of a string
Counting occurrences of s [ i ]
Driver Code
Python3 program to find length of the shortest chain transformation from source to target
Returns length of shortest chain to reach ' target ' from ' start ' using minimum number of adjacent moves . D is dictionary
If the target is not present in the dictionary
To store the current chain length and the length of the words
Push the starting word into the queue
While the queue is non - empty
Increment the chain length
Current size of the queue
Since the queue is being updated while it is being traversed so only the elements which were already present in the queue before the start of this loop will be traversed for now
Remove the first word from the queue
For every character of the word
Retain the original character at the current position
Replace the current character with every possible lowercase alphabet
If the new word is equal to the target word
Remove the word from the set if it is found in it
And push the newly generated word which will be a part of the chain
Restore the original character at the current position
Driver code
Make dictionary
Python3 code to check if cyclic order is possible among strings under given constrainsts
Utility method for a depth first search among vertices
Returns true if all vertices are strongly connected i . e . can be made as loop
Initialize all vertices as not visited
Perform a dfs from s
Now loop through all characters
I character is marked ( i . e . it was first or last character of some string ) then it should be visited in last dfs ( as for looping , graph should be strongly connected )
If we reach that means graph is connected
return true if an order among strings is possible
Create an empty graph
Initialize all vertices as not marked
Initialize indegree and outdegree of every vertex as 0.
Process all strings one by one
Find first and last characters
Mark the characters
Increase indegree and outdegree count
Add an edge in graph
If for any character indegree is not equal to outdegree then ordering is not possible
Driver code
Finding the root of node i
union of two nodes a and b
union based on rank
Returns true if two nodes have same root
Performing an operation according to query type
type 1 query means checking if node x and y are connected or not
If roots of x and y is same then yes is the answer
type 2 query refers union of x and y
If x and y have different roots then union them
Driver Code
No . of nodes
The following two arrays are used to implement disjoset data structure . arr [ ] holds the parent nodes while rank array holds the rank of subset
initializing both array and rank
number of queries
A binary tree ndoe
Given a perfect binary tree print its node in specific order
Let us print root and next level first
Since it is perfect Binary tree , one of the node is needed to be checked
Do anythong more if there are nodes at next level in given perfect Binary Tree
Create a queue and enqueue left and right children of root
We process two nodes at a time , so we need two variables to stroe two front items of queue
Traversal loop
Pop two items from queue
Print children of first and second in reverse order
If first and second have grandchildren , enqueue them in reverse order
Driver program to test above function Perfect Binary Tree of Height 4
Python program for implementation of Ford Fulkerson algorithm
Returns true if there is a path from source ' s ' to sink ' t ' in residual graph . Also fills parent [ ] to store the path
Mark all the vertices as not visited
Create a queue for BFS
Standard BFS Loop
If we find a connection to the sink node , then there is no point in BFS anymore We just have to set its parent and can return true
We didn 't reach sink in BFS starting  from source, so return false
Returns tne maximum flow from s to t in the given graph
This class represents a directed graph using adjacency matrix representation
This array is filled by BFS and to store path
There is no flow initially
Augment the flow while there is path from source to sink
Find minimum residual capacity of the edges along the path filled by BFS . Or we can say find the maximum flow through the path found .
update residual capacities of the edges and reverse edges along the path
Add path flow to overall flow
Return the overall flow
Create a graph given in the above diagram
A Depth First Search based recursive function that returns true if a matching for vertex u is possible
Try every receiver one by one
If sender u has packets to send to receiver v and receiver v is not already mapped to any other sender just check if the number of packets is greater than '0' because only one packet can be sent in a time frame anyways
Mark v as visited
If receiver ' v ' is not assigned to any sender OR previously assigned sender for receiver v ( which is matchR [ v ] ) has an alternate receiver available . Since v is marked as visited in the above line , matchR [ v ] in the following recursive call will not get receiver ' v ' again
Returns maximum number of packets that can be sent parallely in 1 time slot from sender to receiver
Initially all receivers are not mapped to any senders
Count of receivers assigned to senders
Mark all receivers as not seen for next sender
Find if the sender ' u ' can be assigned to the receiver
Driver Code
If v is not in MST and weight of ( u , v ) is smaller than current key of v
Updating key of v
To add an edge
Print adjacency list representaion ot graph
Driver code
Python3 program for the above approach
index of city having the maximum distance to it 's  closest center
updating the distance of the cities to their closest centers
updating the index of the city with the maximum distance to it 's closest center
Printing the maximum distance of a city to a center that is our answer print ( )
Printing the cities that were chosen to be made centers
Driver Code
Function Call
Python3 program to print Eulerian circuit in given directed graph using Hierholzer algorithm
adj represents the adjacency list of the directed graph edge_count represents the number of edges emerging from a vertex
find the count of edges to keep track of unused edges
empty graph Maintain a stack to keep vertices
vector to store final circuit
start from any vertex
Current vertex
If there 's remaining edge
Push the vertex
Find the next vertex using an edge
and remove that edge
Move to next vertex
back - track to find remaining circuit
Back - tracking
we 've got the circuit, now print it in reverse
Driver Code
Input Graph 1
Build the edges
Input Graph 2
Linked List node
Given a perfect binary tree , print its nodes in specific level order
for level order traversal
Stack to print reverse
vector to store the level
considering size of the level
push data of the node of a particular level to vector
push vector containing a level in Stack
print the Stack
Finally pop all Nodes from Stack and prints them .
finally print root
Driver code
Number of vertices in the graph
Utility function for matrix multiplication
Utility function to calculate trace of a matrix ( sum ofdiagnonal elements )
Utility function for calculating number of triangles in graph
To Store graph ^ 2
To Store graph ^ 3
Initialising aux matrices with 0
aux2 is graph ^ 2 now printMatrix ( aux2 )
after this multiplication aux3 is graph ^ 3 printMatrix ( aux3 )
Driver Code
Python3 implementation to count subsequences in first which are anagrams of the second
Returns value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- -- * 1 ]
Function to count subsequences in first which are anagrams of the second
Hash tables to store frequencies of each character
Store frequency of each character of 'str1
Store frequency of each character of 'str2
To store the total count of subsequences
if character ( i + ' a ' ) exists in 'str2
if this character ' s ▁ frequency ▁ ▁ in ▁ ' str2 ' ▁ in ▁ less ▁ than ▁ or ▁ ▁ equal ▁ to ▁ its ▁ frequency ▁ in ▁ ▁ ' str1 ' ▁ then ▁ accumulate ▁ its ▁ ▁ contribution ▁ to ▁ the ▁ count ▁ ▁ of ▁ subsequences . ▁ If ▁ its ▁ ▁ frequency ▁ in ▁ ' str1 ' ▁ is ▁ ' n ' ▁ ▁ and ▁ in ▁ ' str2 ' ▁ is ▁ ' r ', then  its contribution will be nCr,  where C is the binomial  coefficient.
else return 0 as there could be no subsequence which is an anagram of 'str2
required count of subsequences
Driver code
arrays to store results of preprocessing
function to preprocess the strings
initialize it as 0.
store subsequence count in forward direction
store number of matches till now
store subsequence count in backward direction
store number of matches till now
function that gives the output
length of remaining String A is less than B 's length
Driver Code
two queries
Function to find number of occurrences of a subsequence of length three in a string
variable to store no of occurrences
loop to find first character
loop to find 2 nd character
loop to find 3 rd character
increment count if subsequence is found
Driver Code
Function to find number of occurrences of a subsequence of length three in a string
calculate length of string
auxiliary array to store occurrences of first character
auxiliary array to store occurrences of third character
calculate occurrences of first character upto ith index from left
calculate occurrences of third character upto ith index from right
variable to store total number of occurrences
loop to find the occurrences of middle element
if middle character of subsequence is found in the string
multiply the total occurrences of first character before middle character with the total occurrences of third character after middle character
Driver code
function to form the largest palindromic number using atmost two swaps
if length of number is less than '3' then no higher palindromic number can be formed
find the index of last digit in the 1 st half of 'num
as only the first half of ' num [ ] ' is being considered , therefore for the rightmost digit in the first half of ' num [ ] ' , there will be no greater right digit
index of the greatest right digit till the current index from the right direction
traverse the array from second right element in the first half of ' num [ ] ' up to the left element
if ' num [ i ] ' is less than the greatest digit encountered so far
there is no greater right digit for 'num[i]
update ' right ' index
traverse the ' rightMax [ ] ' array from left to right
if for the current digit , greater right digit exists then swap it with its greater right digit and also perform the required swap operation in the right halft of ' num [ ] ' to maintain palindromic property , then break
performing the required swap operations
Driver Code
Required as string object do not support item assignment
Function which take the given string and the position from which the reversing shall be done and returns the modified string
Creating a string having reversed alphabetical order
The string up to the point specified in the question , the string remains unchanged and from the point up to the length of the string , we reverse the alphabetical order
Driver function
function to find Lexicographically smallest string with hamming distance k
If k is 0 , output input string
Copying input string into output string
Traverse all the character of the string
If current character is not 'a
copy character ' a ' to output string
If hamming distance became k , break ;
If k is less than p
Traversing string in reverse order
Driver Code
Python3 implementation of lexicographically first alternate vowel and consonant string
' ch ' is vowel or not
create alternate vowel and consonant string str1 [ 0. . . l1 - 1 ] and str2 [ start ... l2 - 1 ]
first adding character of vowel / consonant then adding character of consonant / vowel
function to find the required lexicographically first alternate vowel and consonant string
hash table to store frequencies of each character in ' str ' char_freq = [ 0 ] * SIZE initialize all elements of char_freq [ ] to 0
count vowels
count consonants
update frequency of ' ch ' in char_freq [ ]
no such string can be formed
form the vowel string ' vstr ' and consonant string ' cstr ' which contains characters in lexicographical order
remove first character of vowel string then create alternate string with cstr [ 0. . . nc - 1 ] and vstr [ 1. . . nv - 1 ]
remove first character of consonant string then create alternate string with vstr [ 0. . . nv - 1 ] and cstr [ 1. . . nc - 1 ]
if both vowel and consonant strings are of equal length start creating string with consonant
start creating string with vowel
Driver Code
Python 3 program to print all strings that can be made by placing spaces
Function to print all subsequences
Driver code
Python3 program to print n - th permutation
Utility for calculating factorials
Function for nth permutation
length of given string
Count frequencies of all characters
out string for output string
iterate till sum equals n
We update both n and sum in this loop .
check for characters present in freq [ ]
Remove character
calculate sum after fixing a particular char
if sum > n fix that char as present char and update sum and required nth after fixing char at that position
if sum < n , add character back
if sum == n means this char will provide its greatest permutation as nth permutation
print result
Driver Code
Function for counting deletions
If two consecutive characters are the same , delete one of them .
Driver code
Function call to print answer
Returns count of words with frequency exactly 2.
Driver code
Python3 program to find out whether a given graph is Bipartite or not using recursion .
color this pos as c and all its neighbours and 1 - c
start is vertex 0
two colors 1 and 0
Driver Code
Python3 program to find n = th even length string .
Function to find nth even length Palindrome
string r to store resultant palindrome . Initialize same as s
In this loop string r stores reverse of string s after the string s in consecutive manner .
Driver code
Function call
Function to allocate memory to blocks as per First fit algorithm
Stores block id of the block allocated to a process
pick each process and find suitable blocks according to its size ad assign to it
allocate block j to p [ i ] process
Reduce available memory in this block .
Driver code
Python program to illustrate string with unique characters using brute force technique
If at any time we encounter 2 same characters , return false
If no duplicate characters encountered , return true
Driver Code
Return if the given string can be split or not .
We can always break a of size 10 or more into four distinct strings .
Brute Force
Making 4 from the given
Checking if they are distinct or not .
Driver Code
Multiplies str1 and str2 , and prints result .
will keep the result number in vector in reverse order
Below two indexes are used to find positions in result .
Go from right to left in num1
To shift position to left after every multiplication of a digit in num2
Go from right to left in num2
Take current digit of second number
Multiply with current digit of first number and add result to previously stored result at current position .
Carry for next iteration
Store result
store carry in next cell
To shift position to left after every multiplication of a digit in num1 .
ignore '0' s from the right
If all were '0' s - means either both or one of num1 or num2 were '0
generate the result string
Driver code
Method to find an equal index
Store the number of opening brackets at each index
Store the number of closing brackets at each index
check if there is no opening or closing brackets
check if there is any index at which both brackets are equal
Driver Code
Function to convert decimal to binary upto k - precision after decimal point
Fetch the integral part of decimal number
Fetch the fractional part decimal number
Conversion of integral part to binary equivalent
Append 0 in binary
Reverse string to get original binary equivalent
Append point before conversion of fractional part
Conversion of fractional part to binary equivalent
Find next bit in fraction
Driver code
Returns true if str1 is smaller than str2 , else false .
Calculate lengths of both string
Function for finding difference of larger numbers
Before proceeding further , make sure str1 is not smaller
Take an empty string for storing result
Calculate lengths of both string
Initially take carry zero
Traverse from end of both strings
Do school mathematics , compute difference of current digits and carry
Subtract remaining digits of str1 [ ]
Remove preceding 0 's
Reverse resultant string
Driver code
Function call
Driver code
Optimized Python3 program to check if two strings are k anagram or not .
Function to check if str1 and str2 are k - anagram or not
If both strings are not of equal length then return false
Store the occurrence of all characters in a hash_array
Store the occurrence of all characters in a hash_array
Return true if count is less than or equal to k
Driver code
Method to get dth digit of number N
Method to return Nth character in concatenated decimal string
sum will store character escaped till now
dist will store numbers escaped till now
loop for number lengths
nine * len will be incremented characters and nine will be incremented numbers
restore variables to previous correct state
get distance from last one digit less maximum number
d will store dth digit of current number
method will return dth numbered digit of ( dist + diff ) number
Driver code to test above methods
function for checking string is palindrome or not
Driver code
if string becomes palindrome then break
erase the last element of the string
print the number of insertion at front
Function to count the number of characters at same position as in English alphabets
Traverse the input string
Check that index of characters of string is same as of English alphabets by using ASCII values and the fact that all lower case alphabetic characters come together in same order in ASCII table . And same is true for upper case .
Driver Code
Utility method to check if substring from low to high is palindrome or not .
This method returns - 1 if it is not possible to make string a palindrome . It returns - 2 if string is already a palindrome . Otherwise it returns index of character whose removal can make the whole string palindrome .
Initialize low and right by both the ends of the string
loop until low and high cross each other
If both characters are equal then move both pointer towards end
If removing str [ low ] makes the whole string palindrome . We basically check if substring str [ low + 1. . high ] is palindrome or not .
If removing str [ high ] makes the whole string palindrome We basically check if substring str [ low + 1. . high ] is palindrome or not
We reach here when complete string will be palindrome if complete string is palindrome then return mid character
Driver Code
Function to count the number of ways to paint N * 3 grid based on given conditions
Count of ways to pain a row with same colored ends
Count of ways to pain a row with different colored ends
Traverse up to ( N - 1 ) th row
For same colored ends
For different colored ends
Print the total number of ways
Driver Code
Function call
Recursive function to generate all binary strings formed by replacing each wildcard character by 0 or 1
replace ' ? ' by '0' and recurse
replace ' ? ' by '1' and recurse
NOTE : Need to backtrack as string is passed by reference to the function
Driver code
Function to replace each even element by odd and vice - versa in a given array
Traverse array
If current element is even then swap it with odd
Perform Swap
Change the sign
If current element is odd then swap it with even
Perform Swap
Change the sign
Marked element positive
Print final array
Driver Code
Given array arr [ ]
Function Call
Simple function to count occurrences of digit d in x
count = 0 ; Initialize count of digit d
Increment count if current digit is same as d
Returns the max occurring digit in x
Handle negative number
Traverse through all digits
Count occurrences of current digit
Update max_count and result if needed
Driver Code
Removes recurring digits in num [ ]
Index in modified string
Traverse digits of given number one by one
Copy the first occurrence of new digit
Remove repeating occurrences of digit
Driver code
A simple Python program to find max subarray XOR
Initialize result
Pick starting points of subarrays
to store xor of current subarray
Pick ending points of subarrays starting with i
Driver code
Recursive function to compute atoi ( )
base case , we 've hit the end of the string,  we just return the last value
If more than 1 digits , recur for ( n - 1 ) , multiplu result with 10 and add last digit
Driver Code
Function to print the given string in respective pattern
Print characters at corresponding places satisfying the two conditions
Print blank space at rest of places
Driver code
Python program to find the longest substring with k unique characters in a given string
This function calculates number of unique characters using a associative array count [ ] . Returns true if no . of characters are less than required else returns false .
Return true if k is greater than or equal to val
Finds the maximum substring with exactly k unique characters
Associative array to store the count
Tranverse the string , fills the associative array count [ ] and count number of unique characters
If there are not enough unique characters , show an error message .
Otherwise take a window with first element in it . start and end variables .
Also initialize values for result longest window
Initialize associative array count [ ] with zero
put the first character
Start from the second character and add characters in window according to above explanation
Add the character ' s [ i ] ' to current window
If there are more than k unique characters in current window , remove from left side
Update the max window size if required
Driver function
Python program function to find Number of customers who could not get a computer
n is number of computers in cafe . ' seq ' is given sequence of customer entry , exit events
seen [ i ] = 0 , indicates that customer ' i ' is not in cafe seen [ 1 ] = 1 , indicates that customer ' i ' is in cafe but computer is not assigned yet . seen [ 2 ] = 2 , indicates that customer ' i ' is in cafe and has occupied a computer .
Initialize result which is number of customers who could not get any computer .
To keep track of occupied
Traverse the input sequence
Find index of current character in seen [ 0. . .25 ]
If first occurrence of 'seq[i]
set the current character as seen
If number of occupied computers is less than n , then assign a computer to new customer
Set the current character as occupying a computer
Else this customer cannot get a computer , increment
If this is second occurrence of 'seq[i]
Decrement occupied only if this customer was using a computer
Driver program
Python3 implementation of above approach .
bitvector to store the record of which character appear odd and even number of times
Driver Code
Python3 program to find best meeting point in 2D array
function to check whether two strings are anagram of each other
Create two count arrays and initialize all values as 0
For each character in input strings , increment count in the corresponding count array
If both strings are of different length . Removing this condition will make the program fail for strings like " aaca " and " aca "
See if there is any non - zero value in count array
This function prints all anagram pairs in a given array of strings
Driver Code
A function to check if n is palindrome
Find reverse of n
If n and rev are same , then n is palindrome
prints palindrome between min and max
Driver Code
Python3 program to find the length of the longest substring without repeating characters
Result
Note : Default values in visited are false
If current character is visited Break the loop
Else update the result if this window is larger , and mark current character as visited .
Remove the first character of previous window
Driver code
Creating a set to store the last positions of occurrence
starting the initial point of window to index 0
Checking if we have already seen the element or not
If we have seen the number , move the start pointer to position after the last occurrence
Updating the last seen value of the character
Driver Code
Python solution
Starting index of ans
Answer Length of ans
creating map
References of Window
Traversing the window
Calculating
Condition matching
calculating answer .
Sliding I Calculation for removing I
Driver code
Python3 program to implement run length encoding
Count occurrences of current character
Print character and its count
Driver code
Python program to print the list items containing all characters of a given word
Prints list items having all characters of word
Set the values in map
Get the length of given word
Check each item of list if has all characters of words
unset the bit so that strings like sss not printed
Set the values in map for next item
Driver program to test the above function
Python program to print the first non - repeating character
Returns an array of size 256 containing count of characters in the passed char array
The function returns index of first non - repeating character in a string . If all characters are repeating then returns - 1
Driver program to test above function
Function to print n equal parts of string
Check if string can be divided in n equal parts
Calculate the size of parts to find the division points
Driver program to test the above function Length of string is 28
Print 4 equal parts of the string
Function to check if we reached on of the entry / exit ( corner ) point .
Function to check if the index is within the matrix boundary .
Recursive helper function
If any corner is reached push the string t into ans and return
For all the four directions
The new ith index
The new jth index
The direction R / L / U / D
If the new cell is within the matrix boundary and it is not previously visited in same path
mark the new cell visited
Store the direction
Backtrack to explore other paths
Function to find all possible paths
Create a direction array for all the four directions
stores the result
Initialise variable
function call
Print the result
Node of the tree
Function to print tree level wise
Base Case
Create an empty queue for level order traversal
Enqueue Root
Print front of queue and remove it from queue
If left child is present
Otherwise
If right child is present
Otherwise
Function to remove subtrees
Base Case
Search for required condition in left and right half
If the node is even and leaf node
Driver Code
Function Call
Print answer
Utility Function to count total ways
Base condition When reach to the destination
Make vertex visited
Recursive function , for count ways
Backtracking Make vertex unvisited
Return total ways
Function to count total ways to reach destination
Loop to make all vertex unvisited , Initially
Make source visited
Print total ways
Function to print the path
Base condition
Pop stores elements
Recursive call for printing stack In reverse order
Function to store the path into The stack , if path exist
Base condition
Push current elements
Condition to check whether reach to the Destination or not
Increment ' x ' ordinate of source by ( 2 * x + y ) Keeping ' y ' constant
Increment ' y ' ordinate of source by ( 2 * y + x ) Keeping ' x ' constant
Pop current elements form stack
If no path exists
Utility function to check whether path exist or not
To store x co - ordinate
To store y co - ordinate
Function to find the path
Print - 1 , if path doesn 't exist
Driver code
Function call
A Tree node
Utility function to count the even path in a given Binary tree
Base Condition , when node pointer becomes null or node value is odd
Increment count when encounter leaf node with all node value even
Left recursive call , and save the value of count
Right recursive call , and return value of count
Function to count the even paths in a given Binary tree
Function call with count = 0
Driver Code
Tree
Function call
Function to sum of all subsets of a given array
Base case
Recursively calling subsetSum
Function to generate the subsets
Base - case
Finding the sum of all the subsets of the generated subset
Recursively accepting and rejecting the current number
Driver code
Python3 program to print the complete DFS - traversal of graph using back - tracking
Function to print the complete DFS - traversal
Check if all th node is visited or not and count unvisited nodes
If all the node is visited return
Mark not visited node as visited
Track the current edge
Print the node
Check for not visited node and proceed with it .
Call the DFs function if not visited
Backtrack through the last visited nodes
Function to call the DFS function which prints the DFS - traversal stepwise
Create a array of visited node
Vector to track last visited road
Initialize all the node with false
Call the function
Function to insert edges in Graph
Driver Code
Number of nodes and edges in the graph
Function call to create the graph
Call the function to print
Python3 program to find maximum integer possible by doing at - most K swap operations on its digits .
function to find maximum integer possible by doing at - most K swap operations on its digits
return if no swaps left
consider every digit
and compare it with all digits after it
if digit at position i is less than digit at position j , swap it and check for maximum number so far and recurse for remaining swaps
swap string [ i ] with string [ j ]
If current num is more than maximum so far
recurse of the other k - 1 swaps
backtrack
Driver Code
Python3 program to Print all possible paths from top left to bottom right of a mXn matrix
if we reach the bottom of maze , we can only move right
path . append ( maze [ i ] [ k ] )
if we hit this block , it means one path is completed . Add it to paths list and print
if we reach to the right most corner , we can only move down
path . append ( maze [ j ] [ k ] ) if we hit this block , it means one path is completed . Add it to paths list and print
add current element to the path list path . append ( maze [ i ] [ j ] )
move down in y direction and call findPathsUtil recursively
move down in y direction and call findPathsUtil recursively
Driver code
Function to find and print pair
Driver code
Function that sorts the input array and returns the number of inversions in the array
Recursive function that sorts the input array and returns the number of inversions in the array
Divide the array into two parts and call _mergeSortAndCountInv ( ) for each of the parts
Inversion count will be sum of the inversions in the left - part , the right - part and the number of inversions in merging
Merge the two parts
Function that merges the two sorted arrays and returns the inversion count in the arrays
i is the index for the left subarray
j is the index for the right subarray
k is the index for the resultant merged subarray
First pass to count number of significant inversions
i is the index for the left subarray
j is the index for the right subarray
k is the index for the resultant merged subarray
Second pass to merge the two sorted arrays
Copy the remaining elements of the left subarray ( if there are any ) to temp
Copy the remaining elements of the right subarray ( if there are any ) to temp
Copy back the merged elements to the original array
Driver code
Python3 implementation for above approach
To store the tree in lazy propagation
To store the different numbers
Function to update in the range [ x , y ) with given value
check out of bound
check for complete overlap
find the mid number
check for pending updates
make lazy [ id ] = 0 , so that it has no pending updates
call for two child nodes
Function to find non - zero integersin the range [ l , r )
if id contains positive number
There is no need to see the children , because all the interval have same number
check for out of bound
find the middle number
call for two child nodes
Driver code
size of the array and number of queries
Update operation for l , r , x , id , 0 , n
Query operation to get answer in the range [ 0 , n - 1 ]
Print the count of non - zero elements
Python3 program to find n - th term of a recursive function using matrix exponentiation .
This power function returns first row of { Transformation Matrix } ^ n - 1 * Initial Vector
This is an identity matrix .
this is Transformation matrix .
Matrix exponentiation to calculate power of { tMat } ^ n - 1 store res in " res " matrix .
res store { Transformation matrix } ^ n - 1 hence will be first row of res * Initial Vector .
Driver code
Function to shuffle an array of size 2 n
Rotate the element to the left
swap a [ j - 1 ] , a [ j ]
Driver Code
Returns true if it is possible to arrange k elements of arr [ 0. . n - 1 ] with minimum distance given as mid .
Place first element at arr [ 0 ] position
Initialize count of elements placed .
Try placing k elements with minimum distance mid .
Place next element if its distance from the previously placed element is greater than current mid
Return if all elements are placed successfully
Returns largest minimum distance for k elements in arr [ 0. . n - 1 ] . If elements can 't be placed, returns -1.
Sort the positions
Initialize result .
Consider the maximum possible distance
Do binary search for largest minimum distance
If it is possible to place k elements with minimum distance mid , search for higher distance .
Change value of variable max to mid iff all elements can be successfully placed
If not possible to place k elements , search for lower distance
Driver code
It prints number of occurrences of each element in the array .
HashMap to store frequencies
traverse the array
update the frequency
traverse the hashmap
Driver function
Returns floor of square root of x
Base cases
Do Binary Search for floor ( sqrt ( x ) )
If x is a perfect square
Since we need floor , we update answer when mid * mid is smaller than x , and move closer to sqrt ( x )
If mid * mid is greater than x
driver code
Python3 program for the above approach
Function to calculate remaining two sides
Calculate angle B
Convert angles to their respective radians for using trigonometric functions
Sine rule
Print the answer
Input
Function Call
Python3 program to reverse alternate levels of a binary tree
A Binary Tree node
A utility function to create a new Binary Tree Node
Function to store nodes of alternate levels in an array
Base case
Store elements of left subtree
Store this node only if this is a odd level node
Function to modify Binary Tree ( All odd level nodes areupdated by taking elements from array in inorder fashion )
Base case
Update nodes in left subtree
Update this node only if this is an odd level node
Update nodes in right subtree
A utility function to reverse an array from index 0 to n - 1
The main function to reverse alternate nodes of a binary tree
Create an auxiliary array to store nodes of alternate levels
First store nodes of alternate levels
Reverse the array
Update tree by taking elements from array
A utility function to print indorder traversal of a binary tree
Driver code
Python3 program for the above approach
Function to find slope of given line
Special case when slope of line is infinity or is perpendicular to x - axis
Function to find equations of lines passing through the given point and making an angle with given line
Store slope of given line
Convert degrees to radians
Special case when slope of given line is infinity : In this case slope of one line will be equal to alfa and the other line will be equal to ( 180 - alfa )
In this case slope of required lines can 't be  infinity
g and f are the variables of required equations
Print first line equation
Print second line equation
Special case when slope of required line becomes infinity
General case
g and f are the variables of required equations
Print first line equation
Print second line equation
Driver Code
Given Input
Function Call
Function to calculate the slope
Store the coordinates the center of the circle
If slope becomes infinity
Stores the slope
If slope is zero
Return the result
Function to find the equation of the normal to a circle from a given point
Stores the slope of the normal
If slope becomes infinity
If slope is zero
Otherwise , print the equation of the normal
Given Input
Function Call
Function to find the sum of squares of distance between all distinct pairs
Stores final answer
Traverse the array
Adding the effect of this point for all the previous x - points
Temporarily add the square of x - coordinate
Add the effect of this point for all the previous y - points
Print the desired answer
Driver Code
Python implementation of above approach
Traverse the array
Stores if a point lies above the diameter or not
Stores if the R is less than or equal to the distance between center and point
Driver Code
Function to find pairs whose distance between the points of is an integer value .
Stores count of pairs whose distance between points is an integer
Traverse the array , points [ ]
Stores distance between points ( i , j )
Traverse all the points of current pair
Update temp
Update dist
If dist is a perfect square
Update ans
Given value of K
Given points
Given value of N
Function Call
Program to find Circumradius of a cyclic quadrilateral using sides
Function to return the Circumradius of a cyclic quadrilateral using sides
Find semiperimeter
Calculate the radius
Driver Code
Function Call
Print the radius
Python3 program to calculate the area of a triangle when the length of two adjacent sides and the angle between them is provided
Function to return the area of triangle using Side - Angle - Side formula
Driver Code
Function Call
Print the final answer
Function to find the line given two points
Function which converts the input line to its perpendicular bisector . It also inputs the points whose mid - lies o on the bisector
Find the mid point
x coordinates
y coordinates
c = - bx + ay
Assign the coefficient of a and b
Returns the intersection of two lines
Find determinant
Returns the intersection of two lines
Find determinant
Function to find the point lies inside , outside or on the circle
Store the coordinates radius of circumcircle
Line PQ is represented as ax + by = c
Line QR is represented as ex + fy = g
Converting lines PQ and QR to perpendicular bisectors . After this , L = ax + by = c M = ex + fy = g
The of intersection of L and M gives r as the circumcenter
Length of radius
Distance between radius and the given D
Condition for lies inside circumcircle
Condition for lies on circumcircle
Condition for lies outside circumcircle
Driver Code
Given Points
Function call to find the lies inside , outside or on the circle
Python3 program to find the maximum angle at which we can tilt the bottle without spilling any water
Now we have the volume of rectangular prism a * a * b
Now we have 2 cases !
Taking the tangent inverse of value d As we want to take out the required angle
Taking the tangent inverse of value d As we want to take out the required angle
As of now the angle is in radian . So we have to convert it in degree .
Driver Code
Enter the Base square side length
Enter the Height of rectangular prism
Enter the Base square side length
Function to return the count of rectangles when n is odd
Calculating number of dots in vertical level
Calculating number of ways to select two points in the horizontal level i
Multiply both to obtain the number of rectangles formed at that level
Calculating number of dots in vertical level
Calculating number of ways to select two points in the horizontal level i
Multiply both to obtain the number of rectangles formed at that level
Function to return the count of rectangles when n is even
Driver code
If n is odd
Structure for storing contact details .
A utility function to fill entries in adjacency matrix representation of graph
Initialize the adjacency matrix
Traverse through all contacts
Add mat from i to j and vice versa , if possible . Since length of each contact field is at max some constant . ( say 30 ) so body execution of this for loop takes constant time .
A recuesive function to perform DFS with vertex i as source
Finds similar contacrs in an array of contacts
vector for storing the solution
Declare 2D adjaceny matrix for mats
visited array to keep track of visited nodes
Fill adjacency matrix
Since , we made a graph with contacts as nodes with fields as links . Two nodes are linked if they represent the same person . So , total number of connected components and nodes in each component will be our answer .
Add delimeter to separate nodes of one component from other .
Print the solution
Driver Code
Function to find the area of the ellipse
The sides cannot be negative
Area of the ellipse
Driver code
Python3 program to determine the number of squares that line will pass through
Function to return the required position
Driver Code
Function to return the value of nCk
Since C ( n , k ) = C ( n , n - k )
Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- - * 1 ]
Function to return the number of paths
Difference between the ' x ' coordinates of the given points
Difference between the ' y ' coordinates of the given points
Driver code
Python3 program implementation of above approach
Area of the Reuleaux triangle
Driver Code
Function to find the section of the line
Applying section formula
Printing result
Driver code
Python3 Program to find the radius of the circumcircle of the given polygon
Function to find the radius of the circumcircle
these cannot be negative
Radius of the circumcircle
Return the radius
Driver code
Find the radius of the circumcircle
Function to find the radius of the incircle
the sides cannot be negative
semi - perimeter of the circle
area of the triangle
Radius of the incircle
Return the radius
Driver code
Get the sides of the triangle
Find the radius of the incircle
Python code to calculate area of triangle if vectors of 2 adjacent sides are given
function to calculate area of triangle
driver code
Python 3 Program to find the biggest trapezoid which can be inscribed within the semicircle
Function to find the area of the biggest trapezoid
the radius cannot be negative
area of the trapezoid
Driver code
Function to find the area of the biggest rectangle
the radius cannot be negative
area of the rectangle
Driver Code
Python3 program to find maximum number of lines which can pass through a single point
function to find maximum lines which passes through a single point
Driver Code
Python code to calculate area of parallelogram if vectors of 2 adjacent sides are given
Function to calculate area of parallelogram
driver code
Function to print the maximum intersection
Case 1
Case 2
Case 3
Driver Code
Python 3 program for the haversine formula
distance between latitudes and longitudes
convert to radians
apply formulae
Driver code
Function to find nth Heptagonal number
Driver Code
Function to calculate Icosidigonal number
Formula for finding nth Icosidigonal number
Driver Code
function to find power of 2
Dricer code
Python3 Program for find the 180 degree reflection of one point around another point .
Driver Code
To check for parallel line
checking for parallel to X and Y axis condition
To display the output
Driver 's Code
Python program to find X - th triangular matchstick number
Driver code
Python program to find total area of two overlapping Rectangles Returns Total Area of two overlap rectangles
Area of 1 st Rectangle
Area of 2 nd Rectangle
Length of intersecting part i . e start from max ( l1 [ x ] , l2 [ x ] ) of x - coordinate and end at min ( r1 [ x ] , r2 [ x ] ) x - coordinate by subtracting start from end we get required lengths
Driver 's Code
Function call
Function to find area of square
Radius of a circle
Call Function to find an area of square
function to check if three sides form a triangle or not
check condition
driver code
function calling and print output
Returns LCS X and Y
Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note that L [ i ] [ j ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]
Following code is used to print LCS
Create a string length index + 1 and fill it with \ 0
Start from the right - most - bottom - most corner and one by one store characters in lcs [ ]
If current character in X [ ] and Y are same , then current character is part of LCS
Put current character in result
reduce values of i , j and index
If not same , then find the larger of two and go in the direction of larger value
Returns longest palindromic subsequence of str
Find reverse of str
Return LCS of str and its reverse
Driver Code
Declaring the size of the matrix
Absolute Difference between the height of two consecutive blocks
Function To calculate the Total surfaceArea .
Traversing the matrix .
If we are traveling the topmost row in the matrix , we declare the wall above it as 0 as there is no wall above it .
If we are traveling the leftmost column in the matrix , we declare the wall left to it as 0 as there is no wall left it .
If its not the topmost row
If its not the leftmost column
Summing up the contribution of by the current block
If its the rightmost block of the matrix it will contribute area equal to its height as a wall on the right of the figure
If its the lowest block of the matrix it will contribute area equal to its height as a wall on the bottom of the figure
Adding the contribution by the base and top of the figure
Driver Code
Python3 Program to Calculate area of tetrahedron
Driver Code
Python code to find the volume of a tetrahedron
Function to calculate volume
Driver Code
Number of ways in which participant can take part .
Driver code
Python3 program to find slope
Function to find the slope of a straight line
Driver code
Python3 program to calculate Area and Perimeter of equilateral Triangle
Function to calculate Area of equilateral triangle
Function to calculate Perimeter of equilateral triangle
Driver code
Making set of coordinates such that any two points are non - integral distance apart
Used to avoid duplicates in result
Driver code
utility function
driver function
Python3 code to find circumference of circle
utility function
driver function
function to check if point collinear or not
Driver Code
Python3 program to count number of rectangles in a n x m grid
Driver code
Python3 program to count rotationally equivalent rectangles with n unit squares
height >= length is maintained
Driver code
Main method
coordinates of A
coordinates of B
coordinates of C
function to calculate m and c that best fit points represented by x [ ] and y [ ]
Driver main function
define the size of incidence matrix
def to find star graph
initialize number of vertex with deg 1 and n - 1
check for S1
check for S2
check for Sn ( n > 2 )
Driver code
Python 3 program to add given a point p to a given convext hull . The program assumes that the point of given convext hull are in anti - clockwise order .
checks whether the point crosses the convex hull or not
Returns the square of distance between two input points
Checks whether the point is inside the convex hull or not
Initialize the centroid of the convex hull
Multiplying with n to avoid floating point arithmetic .
if the mid and the given point lies always on the same side w . r . t every edge of the convex hull , then the point lies inside the convex hull
Adds a point p to given convex hull a [ ]
If point is inside p
point having minimum distance from the point p
Find the upper tangent
Find the lower tangent
Initialize result
making the final hull by traversing points from up to low of given convex hull .
Modify the original vector
Driver code
the set of points in the convex hull
Print the modified Convex Hull
Python3 code to find all three angles of a triangle given coordinate of all three vertices
returns square of distance b / w two points
Square of lengths be a2 , b2 , c2
length of sides be a , b , c
From Cosine law
Converting to degree
printing all the angles
Driver code
Python3 program to find triangle with no point inside
method to get square of distance between ( x1 , y1 ) and ( x2 , y2 )
Method prints points which make triangle with no point inside
any point can be chosen as first point of triangle
choose nearest point as second point of triangle
Get distance from first point and choose nearest one
Pick third point by finding the second closest point with different slope .
if already chosen point then skip them
get distance from first point
here cross multiplication is compared instead of division comparison
Driver code
A tabulation based solution in Python3
driver program
Python program for the above approach
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .
Function to count minimum number of swaps required
To count the minimum number of swaps required to convert the array into perfectly prime
To count total number of prime indexes in the array
To count the total number of prime numbers in the array
Check whether index is prime or not
Element is not prime
If the total number of prime numbers is greater than or equal to the total number of prime indices , then it is possible to convert the array into perfectly prime
Driver Code
Pre - calculate prime [ ]
Function to find the largest possible subset having Bitwise AND positive
Stores the number of set bits at each bit position
Traverse the given array arr [ ]
Current bit position
Loop till array element becomes zero
If the last bit is set
Increment frequency
Divide array element by 2
Decrease the bit position
Size of the largest possible subset
Driver Code
Function to perform the find operation to find the parent of a disjoint set
FUnction to perform union operation of disjoint set union
If the rank are the same
Update the maximum value
Function to find the maximum element of the set which belongs to the element queries [ i ]
Stores the parent elements of the sets
Stores the rank of the sets
Stores the maxValue of the sets
Update parent [ i ] and maxValue [ i ] to i
Add arr [ i ] . first and arr [ i ] . second elements to the same set
Find the parent element of the element queries [ i ]
Print the maximum value of the set which belongs to the element P
Driver Code
Python 3 program for the above approach
Stores the maximum integer of the sets for each query
Function to perform the find operation of disjoint set union
Function to perform the Union operation of disjoint set union
Find the parent of a and b
Update the parent
Update the sum of set a
Function to find the maximum element from the sets after each operation
Stores the rank of the sets
Stores the sum of the sets
Stores the maximum element for each query
Initially set is empty
Update the sum as the current element
After the last query set will be empty and sum will be 0
Check if the current element is not in any set then make parent as current element of the queries
Check left side of the queries [ i ] is not added in any set
Add the queries [ i ] and the queries [ i ] - 1 in one set
Check right side of the queries [ i ] is not added in any set
Add queries [ i ] and the queries [ i ] + 1 in one set
Update the maxAns
Push maxAns to the currMax
Print currMax values in the reverse order
Driver Code
Structure of a tree node
Function to create a new node
Function to perform zig zag traversal of the given tree
Stores the vectors containing nodes in each level of tree respectively
Create a queue for BFS
Enqueue Root of the tree
Standard Level Order Traversal code using queue
Stores the element in the current level
Iterate over all nodes of the current level
Insert all children of the current node into the queue
Insert curLevel into result
Loop to Print the ZigZag Level order Traversal of the given tree
If i + 1 is even reverse the order of nodes in the current level
Print the node of ith level
Function Call
Function to calculate the distances from node 1 to N
Vector to store our edges
Storing the edgees in the Vector
Initialize queue
BFS from first node using queue
Pop from queue
Traversing its adjacency list
Initialize queue
BFS from last node using queue
Pop from queue
Traversing its adjacency list
Printing the minimum distance including node i
If not reachable
Path exists
Driver Code
Given Input
Function Call
Function to check if it is possible to form an array whose sum and the product is the same or not
Find the sum of the array
Find the product of the array
Check a complete integer y for every x
If got such y
If no such y exist
Driver Code
Python3 program for the above approach
Function to check if all the digits in the number N is the same or not
Get the length of N
Form the number M of the type K * 111. . . where K is the rightmost digit of N
Check if the numbers are equal
Otherwise
Driver Code
Stores the maximum sum of a path
Structure of a node in the tree
Utility function to create a new node in the tree
Recursive function to calculate the maximum sum in a path using DFS
If current node is a leaf node
Traversing all children of the current node
Recursive call for all the children nodes
Given Generic Tree
Function Call
Function to count number of triplets with even sum in range l , r for each query
Initialization of array
Initialization of variables
Traversing array
If element is odd
If element is even
Storing count of even and odd till each i
Traversing each query
Count of odd numbers in l to r
Count of even numbers in l to r
Finding the ans
Printing the ans
Driver Code
Given Input
Function Call
Function to calculate maximum value of Rightmost element
Calculating maximum value of Rightmost element
Checking if arr [ i ] is operationable
Performing operation of i - th element
Decreasing the value of k by 1
Printing rightmost element
Given Input
Function Call
Function to find the value of nCr
Base Case
Find nCr recursively
Function to find the expected minimum values of all the subsets of size K
Find the factorials that will be used later
Find the factorials
Total number of subsets
Stores the sum of minimum over all possible subsets
Iterate over all possible minimum
Find the mean over all subsets
Driver Code
To find maximum number of pairs in array with conversion of at most one element
Initialize count of even elements
Initialize count of odd elements
If current number is even then increment x by 1
If current number is odd then increment y by 1
Initialize the answer by min ( x , y )
If difference in count of odd and even is more than 2 than increment answer
Return final answer
Driver code
Given array
Function to calculate the Pairwise Product Sum in range from L to R
Loop to iterate over all possible pairs from L to R
Print answer
Function to update the Array element at index P to X
Update the value at Pth index in the array
Function to solve Q queries
If Query is of type 1
If Query is of type 2
Driver Code
Python program to implement above approach
copying original array
loop till length of array become 2.
find middle element
pop element from front and rear
find remainder
append remainder to a
now since length of array is 2 take product and divide it by n
if remainder is present is original array return 1 , else return 0
calling function Reduced
if x = 1 print YES else NO
Python 3 program for the above approach
Function to find the two integers from the given sum and Bitwise OR value
Check if Z is non negative
Iterate through all the bits
Find the kth bit of A & B
Find the kth bit of A | B
If bit1 = 1 and bit2 = 0 , then there will be no possible pairs
Print the possible pairs
Driver Code
Function to find the frequency of the most common element in each M length subarrays
Stores frequency of array element
Stores the maximum frequency
Iterate for the first sub - array and store the maximum
Print the maximum frequency for the first subarray
Iterate over the range [ M , N ]
Subtract the A [ i - M ] and add the A [ i ] in the map
Find the maximum frequency
Print the maximum frequency for the current subarray
Driver Code
Function to count the maximum number of pairs having different element from the given array
Stores the frequency of array element
Stores maximum count of pairs
Increasing the frequency of every element
Stores the frequencies of array element from highest to lowest
Pushing the frequencies to the priority queue
Iterate until size of PQ > 1
Stores the top two element
Form the pair between the top two pairs
Decrement the frequencies
Insert updated frequencies if it is greater than 0
Return the total count of resultant pairs
Driver Code
Python3 program for above approach
Function to print target array
Sort the given array
Seeking for index of elements with minimum diff .
Seeking for index
To store target array
Copying element
Copying remaining element
Printing target array
Driver Code
Given Input
Function Call
Structure of the tree
Function to create a new node with the value val
Return the newly created node
Function to create the Perfect Binary Tree
If preStart > preEnd return NULL
Initialize root as pre [ preStart ]
If the only node is left , then return node
Parameters for further recursion
Recursive Call to build the subtree of root node
Return the created root
Function to build Perfect Binary Tree
Function to print the Inorder of the given Tree
Base Case
Left Recursive Call
Print the data
Right Recursive Call
Driver Code
Function Call
Print Inorder Traversal
Create adjacency list
Function to add an edges in graph
Function to perform the DFS of graph recursively from a given vertex u
Check for the condition for the flipping of node 's initial value
Traverse all the children of the current source node u
Swap foo and foo1 signifies there is change of level
Function to perform the DFSUtil ( ) for all the unvisited vertices
Traverse the given set of nodes
If the current node is unvisited
Print the number of operations
Function to count the number of flips required to change initial node values to final node value
Add the given edges
DFS Traversal
Driver code
Function to find the minimum number of moves to make N and M equal .
Array to maintain the numbers included .
Pair of vertex , count
Run bfs from N
If we reached goal
Iterate in the range
If i is a factor of aux
If i is less than M - aux and is not included earlier .
If aux / i is less than M - aux and is not included earlier .
Not possible
Driver code
Function to perform the DFS Traversal to find the count of connected components
Marking vertex visited
DFS call to neighbour vertices
If the current node is not visited , then recursively call DFS
Function to find the number of ways to choose two astronauts from the different countries
Stores the Adjacency list
Constructing the graph
Stores the visited vertices
Stores the size of every connected components
DFS call to the graph
Store size of every connected component
Stores the total number of ways to count the pairs
Traverse the array
Print the value of ans
Driver Code
python 3 program for the above approach
Function to check whether a number is perfect Number
Stores sum of divisors
Itearate over the range [ 2 , sqrt ( N ) ]
If sum of divisors is equal to N , then N is a perfect number
Function to find count of perfect numbers in a given range
Stores the count of perfect Numbers upto a every number less than MAX
Iterate over the range [ 1 , MAX ]
Traverse the array arr [ ]
Print the count of perfect numbers in the range [ arr [ i ] [ 0 ] , arr [ i ] [ 1 ] ]
Driver Code
Python3 program for the above approach
Stores the count of steps needed
Traverse over the range [ 2 , N ]
Iterate while N is divisible by d
Increment the value of ans by d
Divide N by d
If N is not 1
Return the ans
Driver Code
Function to find the remaining two rectangle coordinates
Pairs to store the position of given two coordinates of the rectangle .
Pairs to store the remaining two coordinates of the rectangle .
Traverse through matrix and find pairs p1 and p2
First Case
Second Case
Third Case
Print the matrix
Driver code
Given Input
Function Call
Python3 program for the above approach
Function to find sum of prime divisors of the given number N
Add the number 2 if it divides N
Traverse the loop from [ 3 , sqrt ( N ) ]
If i divides N , add i and divide N
This condition is to handle the case when N is a prime number greater than 2
Driver code
Given input
Function call
A Naive recursive program to find minimum number insertions needed to make a string palindrome
Recursive function to find minimum number of insertions
Base Cases
Check if the first and last characters are same . On the basis of the comparison result , decide which subrpoblem ( s ) to call
Driver Code
Python 3 program for the above approach
Function to count bases having MSB of N as a set bit
Store the required count
Iterate over the range [ 2 , N ]
Store the MSB of N
If MSB is 1 , then increment the count by 1
Return the count
Driver Code
Function to find the kth digit from last in an integer n
If k is less than equal to 0
Convert integer into string
If k is greater than length of the temp
Print the k digit from last
Driver code
Given Input
Function call
Function to count ways to split array into three subarrays with equal Bitwise XOR
Stores the XOR value of arr [ ]
Update the value of arr_xor
Stores the XOR value of prefix and suffix array respectively
Stores the ending points of all the required prefix arrays
Stores the count of suffix arrays whose XOR value is equal to the total XOR value at each index
Find all prefix arrays with XOR value equal to arr_xor
Update pref_xor
Fill the values of suff_inds [ ]
Update suff_xor
Update suff_inds [ i ]
Stores the total number of ways
Count total number of ways
Return the final count
Driver Code
Given Input
Function Call
2D array for memoization
Recursive Function to count pairs ( x , y ) such that x + y = x ^ y
If the string is traversed completely
If the current subproblem is already calculated
If bound = 1 and s [ i ] = = '0' , only ( 0 , 0 ) can be placed
Otherwise
Placing ( 0 , 1 ) and ( 1 , 0 ) are equivalent . Hence , multiply by 2.
Place ( 0 , 0 ) at the current position .
Return the answer
Utility Function to convert N to its binary representation
Function to count pairs ( x , y ) such that x + y = x ^ y
Convert the number to equivalent binary representation
Print answer returned by recursive function
Driver code
Input
Function call
Function to find the average of the fourth power of first N natural numbers
Stores the sum of the fourth powers of first N natural numbers
Calculate the sum of fourth power
Return the average
Driver Code
A function to print the adjacency matrix .
n is number of vertices
For each pair of vertex decrement the degree of both vertex .
Print the result in specified form
Driver Code
Function to find the decimal equivalent of the new binary array constructed from absolute decimal of floor and the round - off values
Traverse the givenarray from the end
Stores the absolute difference between floor and round - off each array element
If bit / difference is 1 , then calculate the bit by proper power of 2 and add it to result
Increment the value of power
Print the result
Driver Code
Function to find the total money placed in boxes after N days
Stores the total money
Iterate for N days
Adding the Week number
Adding previous amount + 1
Return the total amount
Input
Function call to find total money placed
Stores the count of occurrences and previous index of every element
Constructor
Function to calculate the sum of absolute differences of indices of occurrences of array element
Stores the count of elements and their previous indices
Initialize 2 arrays left [ ] and right [ ] of size N
Traverse the given array
If arr [ i ] is present in the Map
Update left [ i ] to 0 and update the value of arr [ i ] in map
Otherwise , get the value from the map and update left [ i ]
Clear the map to calculate right [ ] array
Traverse the array arr [ ] in reverse
If arr [ i ] is present in theMap
Update right [ i ] to 0 and update the value of arr [ i ] in the Map
Otherwise get the value from the map and update right [ i ]
Iterate in the range [ 0 , N - 1 ] and print the sum of left [ i ] and right [ i ] as the result
Driver Code
Python3 program for the above approach
Function to check if a digit x is present in the number N or not
Convert N to string
Traverse the num
Return first occurrence of the digit x
Function to remove the character at a given index from the number
Convert N to string
Store the resultant string
Traverse the num
If the number becomes empty after deletion , then return - 1
Return the number
Function to check if A can be reduced to B by performing the operations any number of times
Create a queue
Push A into the queue
Hashmap to check if the element is present in the Queue or not
Set A as visited
Iterate while the queue is not empty
Store the front value of the queue and pop it from it
If top is equal to B , then return true
Traverse the array , D [ ]
Divide top by D [ i ] if it is possible and push the result in q
If D [ i ] is present at the top
Remove the first occurrence of D [ i ] from the top and store the new number
Push newElement into the queue q
Return false if A can not be reduced to B
Driver Code
Python3 program for the above approach
Stores 1 and 0 at indices which are prime and non - prime respectively
Function to find all prime numbers from the range [ 0 , N ]
Iterate over the range [ 2 , sqrt ( N ) ]
If p is a prime
Update all tultiples of p as false
Function to find all prime triplets satisfying the given conditions
Generate all primes up to N
Iterate over the range [ 3 , N ]
Check for the condition
Store the triplets
Print all the stored triplets
Driver Code
Python 3 program for the above approach
Function check if a number is prime or not
Corner cases
Check if n is divisible by 2 or 3
Check for every 6 th number . The above checking allows to skip middle 5 numbers
Function to store primes in an array
Function to find the smallest number which is not coprime with any element of the array arr [ ]
Store the prime numbers
Function call to fill the prime numbers
Stores the answer
Generate all non - empty subsets of the primes [ ] array
Stores product of the primes
Checks if temp is coprime with the array or not
Check if the product temp is not coprime with the whole array
If the product is not co - prime with the array
Print the answer
Driver Code
Given array
Stores the size of the array
Python 3 program for the above approach
Function to check if a number N can be expressed as sum of its digits raised to the power of the count of digits
Stores the number of digits
Stores the resultant number
Return true if both the numbers are same
Function to precompute and store for all numbers whether they can be expressed
Mark all the index which are plus perfect number
If true , then update the value at this index
Compute prefix sum of the array
Function to count array elements that can be expressed as the sum of digits raised to the power of count of digits
Precompute the results
Traverse the queries
Print the resultant count
Driver Code
Function call
Function to find the sum of the path from root to the current node
Sum of nodes in the path
Iterate until root is reached
Update the node value
Print the resultant sum
Function to print the path sum for each query
Traverse the queries
arraylist to store integers
Python 3 program for the above approach
Function to count the minimum removals required to make frequency of all array elements equal
Stores frequency of all array elements
Traverse the array
Stores all the frequencies
Traverse the map
Sort the frequencies
Count of frequencies
Stores the final count
Traverse the vector
Count the number of removals for each frequency and update the minimum removals required
Print the final count
Driver Code
Given array
Size of the array
Function call to print the minimum number of removals required
Check if the character is vowel or not
Returns true if ' typed ' is a typed name given str
Traverse through all characters of str
If current characters do not match
If not vowel , simply move ahead in both
Count occurrences of current vowel in str
Count occurrence of current vowel in typed
Driver code
Python3 program to find whether a universal sink exists in a directed graph
constructor to initialize number of vertices and size of adjacency matrix
make adjacency_matrix [ i ] [ j ] = 1 if there is an edge from i to j
if any element in the row i is 1 , it means that there is an edge emanating from the vertex , which means it cannot be a sink
if any element other than i in the column i is 0 , it means that there is no edge from that vertex to the vertex we are testing and hence it cannot be a sink
if none of the checks fails , return true
we will eliminate n - 1 non sink vertices so that we have to check for only one vertex instead of all n vertices
If the index is 1 , increment the row we are checking by 1 else increment the column
If i exceeds the number of vertices , it means that there is no valid vertex in the given vertices that can be a sink
Driver Code
input set 1 g . insert ( 1 , 6 ) g . insert ( 2 , 6 ) g . insert ( 3 , 6 ) g . insert ( 4 , 6 ) g . insert ( 5 , 6 ) input set 2
returns 0 based indexing of vertex . returns - 1 if no sink exits . returns the vertex number - 1 if sink is found
Python3 program to reverse alternate levels of a tree A Binary Tree Node Utility function to create a new tree node
Base cases
Swap subtrees if level is even
Recur for left and right subtrees ( Note : left of root1 is passed and right of root2 in first call and opposite in second call .
This function calls preorder ( ) for left and right children of root
Inorder traversal ( used to print initial and modified trees )
A utility function to create a new node
Driver Code
class to create a node with data , left child and right child .
Inorder traversal of a binary tree
function to delete the given deepest node ( d_node ) in binary tree
Do level order traversal until last node
function to delete element in binary tree
Do level order traversal to find deepest node ( temp ) and node to be deleted ( key_node )
Driver code
Return the number of Sink NOdes .
Array for marking the non - sink node .
Marking the non - sink node .
Counting the sink nodes .
Driver Code
Number of vertices
function to calculate max subset size
set for number of vertices
loop for deletion of vertex from set
if subset has only 1 vertex return 0
for each vertex iterate and keep removing a vertix while we find a vertex with all edges of same color .
note down different color values for each vertex
if only one color is found erase that vertex ( bad vertex )
If no vertex was removed in the above loop .
Driver Code
Adjacency list representation of graph
add edge to graph
Returns count of edge in undirected graph
traverse all vertex
add all edge that are linked to the current vertex
The count of edge is always even because in undirected graph every edge is connected twice between two vertices
Driver Code
making above uhown graph
Python3 program to find out whether a given graph can be converted to two Cliques or not .
This function returns true if subgraph reachable from src is Bipartite or not .
Create a queue ( FIFO ) of vertex numbers and enqueue source vertex for BFS traversal
Run while there are vertices in queue ( Similar to BFS )
Dequeue a vertex from queue
Find all non - colored adjacent vertices
An edge from u to v exists and destination v is not colored
Assign alternate color to this adjacent v of u
An edge from u to v exists and destination v is colored with same color as u
If we reach here , then all adjacent vertices can be colored with alternate color
Returns true if a Graph G [ ] [ ] is Bipartite or not . Note that G may not be connected .
Create a color array to store colors assigned to all veritces . Vertex number is used as index in this array . The value ' - 1' of colorArr [ i ] is used to indicate that no color is assigned to vertex ' i ' . The value 1 is used to indicate first color is assigned and value 0 indicates second color is assigned .
One by one check all not yet colored vertices .
Returns true if G can be divided into two Cliques , else false .
Find complement of G [ ] [ ] All values are complemented except diagonal ones
Return true if complement is Bipartite else false .
Driver Code
Function returns true for tree false for graph
Find sum of all degrees
It is tree if sum is equal to 2 ( n - 1 )
main
A Python3 program to find size of minimum vertex cover using Binary Search
Global array to store the graph Note : since the array is global , all the elements are 0 initially
Returns true if there is a possible subSet of size ' k ' that can be a vertex cover
Set has first ' k ' bits high initially
to mark the edges covered in each subSet of size ' k '
ReSet visited array for every subSet of vertices
Set counter for number of edges covered from this subSet of vertices to zero
selected vertex cover is the indices where ' Set ' has its bit high
Mark all edges emerging out of this vertex visited
If the current subSet covers all the edges
Generate previous combination with k bits high Set & - Set = ( 1 << last bit high in Set )
Returns answer to graph stored in gr [ ] [ ]
Binary search the answer
at the end of while loop both left and right will be equal , / as when they are not , the while loop won 't exit the   minimum size vertex cover = left = right 
Inserts an edge in the graph
Undirected graph
6 / 1 -- -- - 5 vertex cover = { 1 , 2 } / | \ 3 | \  \ | \ 2 4
Let us create another graph
2 -- -- 4 -- -- 6 / | | 1 | | vertex cover = { 2 , 3 , 4 } \ | | 3 -- -- 5
Python program for Morris Preorder traversal A binary tree Node
Preorder traversal without recursion and without stack
If left child is null , print the current node data . And , update the current pointer to right child .
Find the inorder predecessor
If the right child of inorder predecessor already points to the current node , update the current with it 's right child
else If right child doesn ' t ▁ point ▁ ▁ to ▁ the ▁ current ▁ node , ▁ then ▁ print ▁ this ▁ ▁ node ' s data and update the right child pointer with the current node and update the current with it 's left child
Function for sStandard preorder traversal
Driver program to test
To add an edge
Find the sum of all dependencies
Just find the size at each vector 's index
Driver code
This function is in LinkedList class Function to insert a new node at the beginning
1 & 2 : Allocate the Node & Put in the data
3. Make next of new Node as head
4. Move the head to point to new Node
This function is in LinkedList class . Inserts a new node after the given prev_node . This method is defined inside LinkedList class shown above
1. check if the given prev_node exists
2. Create new node & 3. Put in the data
4. Make next of new Node as next of prev_node
5. make next of prev_node as new_node
A binary tree node
An iterative process to print preorder traveral of BT
Base CAse
create an empty stack and push root to it
Pop all items one by one . Do following for every popped item a ) print it b ) push its right child c ) push its left child Note that right child is pushed first so that left is processed first
Pop the top item from stack and print it
Push right and left children of the popped node to stack
Driver program to test above function
Node class
Linked List class contains a Node object
Function to initialize head
This function is in LinkedList class . It inserts a new node at the beginning of Linked List .
1 & 2 : Allocate the Node & Put in the data
3. Make next of new Node as head
4. Move the head to point to new Node
This function counts number of nodes in Linked List recursively , given ' node ' as starting node .
Base case
Count is this node plus rest of the list
A wrapper over getCountRec ( )
Code execution starts here
Start with the empty list
Tree Node
Iterative function to do Preorder traversal of the tree
start from root node ( set current node to root node )
run till stack is not empty or current is not NULL
Print left children while exist and keep appending right into the stack .
We reach when curr is NULL , so We take out a right child from stack
Driver Code
Counts the no . of occurrences of a node ( search_for ) in a linked list ( head )
Link list node
allocate node
put in the data
link the old list off the new node
move the head to point to the new node
Returns true if there is a loop in linked list else returns false .
If this node is already traverse it means there is a cycle ( Because you we encountering the node for the second time ) .
If we are seeing the node for the first time , mark its flag as 1
Driver program to test above function
Start with the empty list
Create a loop for testing
Python3 program to return first node of loop A binary tree node has data , pointer to left child and a pointer to right child Helper function that allocates a new node with the given data and None left and right pointers
A utility function to pra linked list
Function to detect first node of loop in a linked list that may contain loop
Create a temporary node
This condition is for the case when there is no loop
Check if next is already pointing to temp
Store the pointer to the next node in order to get to it in the next step
Make next poto temp
Get to the next node in the list
Driver Code
Create a loop for testing ( 5 is pointing to 3 )
Node class
Function to initialize head
Function to check if given linked list is pallindrome or not
To handle odd size list
Initialize result
Get the middle of the list . Move slow_ptr by 1 and fast_ptrr by 2 , slow_ptr will have the middle node
We need previous of the slow_ptr for linked lists with odd elements
fast_ptr would become NULL when there are even elements in the list and not NULL for odd elements . We need to skip the middle node for odd case and store it somewhere so that we can restore the original list
Now reverse the second half and compare it with first half
NULL terminate first half
Reverse the second half
Compare
Reverse the second half again
If there was a mid node ( odd size case ) which was not part of either first half or second half .
Function to reverse the linked list Note that this function may change the head
Function to check if two input lists have same data
Both are empty return 1
Will reach here when one is NULL and other is not
Function to insert a new node at the beginning
Allocate the Node & Put in the data
Link the old list off the new one
Move the head to point to new Node
A utility function to print a given linked list
Driver code
Start with the empty list
Python program to swap two given nodes of a linked list
head of list
Function to swap Nodes x and y in linked list by changing links
Nothing to do if x and y are same
Search for x ( keep track of prevX and CurrX )
Search for y ( keep track of prevY and currY )
If either x or y is not present , nothing to do
If x is not head of linked list
make y the new head
If y is not head of linked list
make x the new head
Swap next pointers
Function to add Node at beginning of list .
1. alloc the Node and put the data
2. Make next of new Node as head
3. Move the head to point to new Node
This function prints contents of linked list starting from the given Node
Driver program to test above function
The constructed linked list is : 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7
A binary tree node has data , pointer to left child and a pointer to right child
Helper function that allocates a new node with the given data and NULL left and right pointers .
Visited left subtree
Visited right subtree
Print node
Driver program to test above functions
A Binary Tree Node Utility function to create a new tree node
Visited left subtree
Visited right subtree
Print node
Driver Code
structure for a node in circular linked list
Function to find the only person left after one in every m - th node is killed in a circle of n nodes
Create a circular linked list of size N .
Connect last node to first
while only one node is left in the linked list
Find m - th node
Remove the m - th node
Driver program to test above functions
A binary tree node
root - root of the binary tree d - distance of current line from rightmost - topmost slope . diagonalPrint - multimap to store Diagonal elements ( Passed by Reference )
Base Case
Store all nodes of same line together as a vector
Increase the vertical distance if left child
Vertical distance remains same for right child
Print diagonal traversal of given binary tree
Create a dict to store diagnoal elements
Driver Program
Adding a node at the front of the list
1 & 2 : Allocate the Node & Put in the data
3. Make next of new node as head and previous as NULL
4. change prev of head node to new node
5. move the head to point to the new node
Given a node as prev_node , insert a new node after the given node
1. check if the given prev_node is NULL
2. allocate node & 3. put in the data
4. Make next of new node as next of prev_node
5. Make the next of prev_node as new_node
6. Make prev_node as previous of new_node
7. Change previous of new_node 's next node 
Add a node at the end of the DLL
1. allocate node 2. put in the data
3. This new node is going to be the last node , so make next of it as NULL
4. If the Linked List is empty , then make the new node as head
5. Else traverse till the last node
6. Change the next of last node
7. Make last node as previous of new node
Python3 implementation of tree using array numbering starting from 0 to n - 1.
create root
create left son of root
create right son of root
Print tree
Driver Code
A Linked List node
Utility function to insert a node at the beginning @ args : data : value of node
Print linked list
count number of node in linked list
Function for swapping kth nodes from both ends of linked list
Count nodes in linked list
check if k is valid
If x ( kth node from start ) and y ( kth node from end ) are same
Find the kth node from beginning of linked list . We also find previous of kth node because we need to update next pointer of the previous .
Similarly , find the kth node from end and its previous . kth node from end is ( n - k + 1 ) th node from beginning
If x_prev exists , then new next of it will be y . Consider the case when y -> next is x , in this case , x_prev and y are same . So the statement " x _ prev - > next ▁ = ▁ y " creates a self loop . This self loop will be broken when we change y -> next .
Same thing applies to y_prev
Swap next pointers of x and y . These statements also break self loop if x -> next is y or y -> next is x
Change head pointers when k is 1 or n
Driver Code
Structure of node of doubly linked list
Function to find pair whose sum equal to given value x .
Set two pointers , first to the beginning of DLL and second to the end of DLL .
To track if we find a pair or not
The loop terminates when they cross each other ( second . next == first ) , or they become same ( first == second )
Pair found
Move first in forward direction
Move second in backward direction
If pair is not present
A utility function to insert a new node at the beginning of doubly linked list
Driver code
A binary tree node has data , pointer to left child and a pointer to right child
Function to print diagonal view
base case
queue of treenode
Append root
Append delimiter
If current is delimiter then insert another for next diagonal and cout nextline
If queue is empty then return
Print output on nextline
append delimiter again
If left child is present append into queue
current equals to right child
Driver Code
Structure of node of doubly linked list
Function to count pairs whose sum equal to given 'value  
The loop terminates when either of two pointers become None , or they cross each other ( second . next == first ) , or they become same ( first == second )
Pair found
Increment count
Move first in forward direction
Move second in backward direction
If sum is greater than ' value ' move second in backward direction
Else move first in forward direction
Required count of pairs
Function to count triplets in a sorted doubly linked list whose sum is equal to a given value 'x  
If list is empty
Get pointer to the last node of the doubly linked list
Traversing the doubly linked list
For each current node
count pairs with sum ( x - current . data ) in the range first to last and add it to the ' count ' of triplets
Required count of triplets
A utility function to insert a new node at the beginning of doubly linked list
Allocate node
Put in the data temp . next = temp . prev = None
Driver code
Start with an empty doubly linked list
Insert values in sorted order
Node of a linked list
Function to delete a node in a Doubly Linked List . head_ref - . pointer to head node pointer . del - . pointer to node to be deleted .
base case
If node to be deleted is head node
Change next only if node to be deleted is NOT the last node
Change prev only if node to be deleted is NOT the first node
function to remove duplicates from an unsorted doubly linked list
if DLL is empty or if it contains only a single node
pick elements one by one
Compare the picked element with the rest of the elements
if duplicate , then delete it
store pointer to the node next to 'ptr2  
delete node pointed to by 'ptr2  
update 'ptr2  
else simply move to the next node
Function to insert a node at the beginning of the Doubly Linked List
allocate node
put in the data
since we are adding at the beginning , prev is always None
link the old list off the new node
change prev of head node to new node
move the head to point to the new node
Function to print nodes in a given doubly linked list
if list is empty
Driver Code
Create the doubly linked list : 8 < .4 < .4 < .6 < .4 < .8 < .4 < .10 < .12 < .12
remove duplicate nodes
a node of the doubly linked list
Function to delete a node in a Doubly Linked List . head_ref -- > pointer to head node pointer . del -- > pointer to node to be deleted .
base case
If node to be deleted is head node
Change next only if node to be deleted is NOT the last node
Change prev only if node to be deleted is NOT the first node
function to remove duplicates from an unsorted doubly linked list
if doubly linked list is empty
unordered_set ' us ' implemented as hash table
traverse up to the end of the list
if current data is seen before
store pointer to the node next to ' current ' node
delete the node pointed to by 'current  
update 'current  
insert the current data in 'us  
move to the next node
Function to insert a node at the beginning of the Doubly Linked List
allocate node
put in the data
since we are adding at the beginning , prev is always None
link the old list off the new node
change prev of head node to new node
move the head to point to the new node
Function to print nodes in a given doubly linked list
if list is empty
Driver Code
Create the doubly linked list : 8 < -> 4 < -> 4 < -> 6 < -> 4 < -> 8 < -> 4 < -> 10 < -> 12 < -> 12
remove duplicate nodes
Linked List node
Function to insetail new node
If first node to be insetailed in doubly linked list
If node to be insetailed has value less than first node
If node to be insetailed has value more than last node
Find the node before which we need to insert p .
Insert new node before temp
Function to print nodes in from left to right
Driver program to test above functions
Structure of a Node
Function to insert at the end
If the list is empty , create a single node circular and doubly list
Find last node
Create Node dynamically
Start is going to be next of new_node
Make new node previous of start
Make last preivous of new node
Make new node next of old last
Function to insert Node at the beginning of the List ,
Pointer points to last Node
Inserting the data
setting up previous and next of new node
Update next and previous pointers of start and last .
Update start pointer
Function to insert node with value as value1 . The new node is inserted after the node with with value2
Inserting the data
Find node having value2 and next node of it
insert new_node between temp and next .
Driver Code
Start with the empty list
Insert 5. So linked list becomes 5. None
Insert 4 at the beginning . So linked list becomes 4.5
Insert 7 at the end . So linked list becomes 4.5 . 7
Insert 8 at the end . So linked list becomes 4.5 . 7.8
Insert 6 , after 5. So linked list becomes 4.5 . 6.7 . 8
A binary tree node
A simple function to print leaf nodes of a Binary Tree
Print it if it is a leaf node
A function to print all left boundary nodes , except a leaf node . Print the nodes in TOP DOWN manner
to ensure top down order , print the node before calling itself for left subtree
A function to print all right boundary nodes , except a leaf node . Print the nodes in BOTTOM UP manner
to ensure bottom up order , first call for right subtree , then print this node
A function to do boundary traversal of a given binary tree
Print the left boundary in top - down manner
Print all leaf nodes
Print the right boundary in bottom - up manner
Driver program to test above function
Link list node
Function to reverse the linked list
For each node , print proper number of spaces before printing it
use of carriage return to move back and print .
Function to push a node
Function to print linked list and find its length
i for finding length of list
Start with the empty list
list nodes are as 6 5 4 3 2 1
printlist print the list and return the size of list
print reverse list with help of carriage return function
A linked list node
Prints a linked list in reverse manner
prints alternate nodes of a Linked List , first from head to end , and then from end to head .
Given a reference ( pointer to pointer ) to the head of a list and an int , push a new node on the front of the list .
put in the data
link the old list off the new node
move the head to poto the new node
Start with the empty list
Using push ( ) to construct below list 1.2 . 3.4 . 5
A binary tree node
Function to compute height and size of a binary tree
compute height of each subtree
increase size by 1
return larger of the two
function to calculate density of a binary tree
To store size
Finds height and size
Driver Code
Python3 program to find sqrt ( n ) 'th node  of a linked list  Node class 
Function to initialise the node object
Function to get the sqrt ( n ) th node of a linked list
Traverse the list
check if j = sqrt ( i )
for first node
increment j if j = sqrt ( i )
return node 's data 
function to add a new node at the beginning of the list
allocate node
put in the data
link the old list off the new node
move the head to point to the new node
Driver Code
Start with the empty list
Python3 program to find fractional node in a linked list
Linked list node
Function to create a new node with given data
Function to find fractional node in the linked list
Corner cases
Traverse the given list
For every k nodes , we move fractionalNode one step ahead .
First time we see a multiple of k
A utility function to print a linked list
Driver Code
Python3 program to find modular node in a linked list
Linked list node
Function to create a new node with given data
Function to find modular node in the linked list
Corner cases
Traverse the given list
Driver Code
Linked list node
Function to insert a node at the beginning of the linked list
allocate node
put in the data
link the old list at the end of the new node
move the head to point to the new node
Split the nodes of the given list into front and back halves , and return the two lists using the reference parameters . Uses the fast / slow pointer strategy .
Advance ' fast ' two nodes , and advance ' slow ' one node
' slow ' is before the midpoint in the list , so split it in two at that point .
Function to reverse the linked list
perfrom the required subtraction operation on the 1 st half of the linked list
traversing both the lists simultaneously
subtraction operation and node data modification
function to concatenate the 2 nd ( back ) list at the end of the 1 st ( front ) list and returns the head of the new list
function to modify the contents of the linked list
if list is empty or contains only single node
split the list into two halves front and back lists
reverse the 2 nd ( back ) list
modify the contents of 1 st half
agains reverse the 2 nd ( back ) list
concatenating the 2 nd list back to the end of the 1 st list
pointer to the modified list
function to print the linked list
Driver Code
creating the linked list
modify the linked list
print the modified linked list
Linked list node
Function to insert a node at the beginning of the linked list
Allocate node
Put in the data
Link the old list at the end of the new node
Move the head to point to the new node
Function to print the linked list
Function to middle node of list .
Advance ' fast ' two nodes , and advance ' slow ' one node
If number of nodes are odd then update slow by slow . next ;
Function to modify the contents of the linked list .
Create Stack .
Traverse the list by using temp until stack is empty .
Driver code
creating the linked list
Call Function to Find the starting point of second half of list .
Call function to modify the contents of the linked list .
Print the modified linked list
A utility function to search a given key in BST
Base Cases : root is null or key is present at root
Key is greater than root 's key
Key is smaller than root 's key
A binary tree node has data , left child and right child
Function to modify tree
if the left tree exists
get the right - most of the original left subtree
set root right to left subtree
if the right subtree does not exists we are done !
set right pointer of right - most of the original left subtree
modify the rightsubtree
printing using right pointer only
Driver code
Constructed binary tree is 10 / \ 8 2 / \ 3 5
Python implementation to construct a BST from its level order traversal
node of a BST
function to get a new node
Allocate memory
put in the data
function to construct a BST from its level order traversal
function to print the inorder traversal
Driver program
A binary tree node has data , left child and right child
An iterative process to set the right pointer of Binary tree
Base Case
Create an empty stack and append root to it
Pop all items one by one . Do following for every popped item a ) prit b ) append its right child c ) append its left child Note that right child is appended first so that left is processed first
Pop the top item from stack
append right and left children of the popped node to stack
check if some previous node exists
set the right pointer of previous node to currrent
set previous node as current node
printing using right pointer only
Constructed binary tree is 10 / \ 8 2 / \ 3 5
A binary tree node has data , left child and right child
To create a Tree with n levels . We always insert new node to left if it is less than previous value .
Please refer below post for details of this function . www . geeksforgeeks . org / a - program - to - check - if - a - binary - tree - is - bst - or - not / https :
Allow only distinct values
Returns tree if given array of size n can represent a BST of n levels .
Driver code
Driver Code
This element can be inserted to the right of the previous element , only if it is greater than the previous element and in the range .
max remains same , update min
This element can be inserted to the left of the previous element , only if it is lesser than the previous element and in the range .
min remains same , update max
if the loop completed successfully without encountering else condition
Python3 program to convert a left unbalanced BST to a balanced BST
A binary tree node has data , pointer to left child and a pointer to right child
This function traverse the skewed binary tree and stores its nodes pointers in vector nodes [ ]
Base case
Store nodes in Inorder ( which is sorted order for BST )
Recursive function to construct binary tree
base case
Get the middle element and make it root
Using index in Inorder traversal , construct left and right subtress
This functions converts an unbalanced BST to a balanced BST
Store nodes of given BST in sorted order
Constucts BST from nodes [ ]
Function to do preorder traversal of tree
Driver code
Constructed skewed binary tree is 10 / 8 / 7 / 6 / 5
A binary tree node
Give a binary search tree and a number , inserts a new node with the given number in the correct place in the tree . Returns the new root pointer which the caller should then use ( the standard trick to avoid using reference parameters ) .
1. If the tree is empty , return a new , single node
2. Otherwise , recur down the tree
Return the ( unchanged ) node pointer
Given a non - empty binary search tree , return the minimum data value found in that tree . Note that the entire tree does not need to be searched .
loop down to find the lefmost leaf
Driver program
To store details of a node like node ' s ▁ ▁ data , ▁ ' min ' ▁ and ▁ ' max ' ▁ to ▁ obtain ▁ the ▁ ▁ range ▁ of ▁ values ▁ where ▁ node ' s left and right child 's should lie 
function to check if the given array can represent Level Order Traversal of Binary Search Tree
if tree is empty
queue to store NodeDetails
index variable to access array elements
node details for the root of the BST
until there are no more elements in arr [ ] or queue is not empty
extracting NodeDetails of a node from the queue
check whether there are more elements in the arr [ ] and arr [ i ] can be left child of ' temp . data ' or not
Create NodeDetails for newNode / and add it to the queue
check whether there are more elements in the arr [ ] and arr [ i ] can be right child of ' temp . data ' or not
Create NodeDetails for newNode / and add it to the queue
given array represents level order traversal of BST
given array do not represent level order traversal of BST
Driver code
A binary tree node
Recursive function to construct binary of size len from Inorder traversal in [ ] and Preorder traversal pre [ ] . Initial values of inStrt and inEnd should be 0 and len - 1. The function doesn 't  do any error checking for cases where inorder and preorder  do not form a tree 
Pich current node from Preorder traversal using preIndex and increment preIndex
If this node has no children then return
Else find the index of this node in Inorder traversal
Using index in Inorder Traversal , construct left and right subtrees
Function to find index of value in arr [ start ... end ] The function assumes that value is rpesent in inOrder [ ]
This funtcion is here just to test buildTree ( )
first recur on left child
then print the data of node
now recur on right child
Driver program to test above function
Let us test the build tree by priting Inorder traversal
A recursive python program to find LCA of two nodes n1 and n2 A Binary tree node
Function to find LCA of n1 and n2 . The function assumes that both n1 and n2 are present in BST
If both n1 and n2 are smaller than root , then LCA lies in left
If both n1 and n2 are greater than root , then LCA lies in right
Let us construct the BST shown in the figure
Helper function that allocates a new node with the given data and None left and right poers .
Returns true if given tree is BST .
Base condition
if left node exist then check it has correct data or not i . e . left node ' s ▁ data ▁ ▁ should ▁ be ▁ less ▁ than ▁ root ' s data
if right node exist then check it has correct data or not i . e . right node ' s ▁ data ▁ ▁ should ▁ be ▁ greater ▁ than ▁ root ' s data
check recursively for every node .
Driver Code
Python3 program to check if a given tree is BST .
A binary tree node has data , pointer to left child and a pointer to right child
traverse the tree in inorder fashion and keep track of prev node
Allows only distinct valued nodes
Driver Code
A BST node
Recursive function to insert an key into BST
Function to find k 'th largest element in BST. Here count denotes the number of nodes processed so far
Base case
Search in left subtree
If k 'th smallest is found in  left subtree, return it
If current element is k 'th  smallest, return it
Else search in right subtree
Function to find k 'th largest element in BST
Maintain index to count number of nodes processed so far
Driver code
A BST node
Recursive function to insert an key into BST
If a node is inserted in left subtree , then lCount of this node is increased . For simplicity , we are assuming that all keys ( tried to be inserted ) are distinct .
Function to find k 'th largest element in BST. Here count denotes the number of nodes processed so far
Base case
Else search in right subtree
Driver code
A binary tree node has data , poer to left child and a poer to right child
Recursive function to construct binary of size len from Inorder traversal in [ ] and Preorder traversal pre [ ] . Initial values of inStrt and inEnd should be 0 and len - 1. The function doesn 't do any error checking for cases where inorder and preorder do not form a tree
Pick current node from Preorder traversal using preIndex and increment preIndex
If this node has no children then return
Else find the index of this node in Inorder traversal
Using index in Inorder traversal , construct left and right subtress
This function mainly creates an unordered_map , then calls buildTree ( )
This funtcion is here just to test buildTree ( )
Driver code
Let us test the built tree by pring Insorder traversal
Check if each internal node of BST has only one child
driver program to test above function
Check if each internal node of BST has only one child approach 2
Initialize min and max using last two elements
Every element must be either smaller than min or greater than max
Driver program to test above function
A BST node
A function to find
Count to iterate over elements till we get the kth smallest number
store the Kth smallest
to store the current node
Like Morris traversal if current does not have left child rather than printing as we did in inorder , we will just increment the count as the number will be in an increasing order
if count is equal to K then we found the kth smallest , so store it in ksmall
go to current 's right child
we create links to Inorder Successor and count using these links
building links
link made to Inorder Successor
While breaking the links in so made temporary threaded tree we will check for the K smallest condition
Revert the changes made in if part ( break link from the Inorder Successor )
If count is equal to K then we found the kth smallest and so store it in ksmall
return the found value
A utility function to insert a new node with given key in BST
If the tree is empty , return a new node
Otherwise , recur down the tree
return the ( unchanged ) node pointer
Driver Code
Let us create following BST 50 / \ 30 70 / \ / \ 20 40 60 80
Constructor to create a new node
A utility function to insert a given key to BST
function to check if given sorted sub - sequence exist in BST index . iterator for given sorted sub - sequence seq [ ] . given sorted sub - sequence
We traverse left subtree first in Inorder
If current node matches with se [ index [ 0 ] ] then move forward in sub - sequence
We traverse left subtree in the end in Inorder
A wrapper over seqExistUtil . It returns true if seq [ 0. . n - 1 ] exists in tree .
Initialize index in seq [ ]
Do an inorder traversal and find if all elements of seq [ ] were present
index would become n if all elements of seq [ ] were present
Driver Code
Function that returns true if array is Inorder traversal of any Binary Search Tree or not .
Array has one or no element
Unsorted pair found
No unsorted pair found
Driver code
Python3 program to construct a tree using inorder and preorder traversal
Function to build tree using given traversal
Function to prtree in_t Inorder
first recur on left child
then prthe data of node
now recur on right child
Driver code
BST Node
Utility function to create Node
function to insert elements of the tree to map m
function to check if the two BSTs contain same set of elements
Base cases
Create two hash sets and store elements both BSTs in them .
Return True if both hash sets contain same elements .
First BST
Second BST
check if two BSTs have same set of elements
BST Node
Utility function to create Node
function to insert elements of the tree to map m
function to check if the two BSTs contain same set of elements
Base cases
Create two hash sets and store elements both BSTs in them .
Return True if both hash sets contain same elements .
First BST
Second BST
check if two BSTs have same set of elements
Python3 program to find distance between two nodes in BST
Standard BST insert function
This function returns distance of x from root . This function assumes that x exists in BST and BST is not NULL .
Returns minimum distance beween a and b . This function assumes that a and b exist in BST .
Both keys lie in left
Both keys lie in right same path
Lie in opposite directions ( Root is LCA of two nodes )
This function make sure that a is smaller than b before making a call to findDistWrapper ( )
Driver code
Python3 code to print BST keys in given Range in constant space using Morris traversal . Helper function to create a new node
Function to print the keys in range
check if current node lies between n1 and n2
finding the inorder predecessor - inorder predecessor is the right most in left subtree or the left child , i . e in BST it is the maximum ( right most ) in left subtree .
check if current node lies between n1 and n2
Driver Code
Constructed binary tree is 4 / \ 2 7 / \ / \ 1 3 6 10
A utility function to check if data of root is in range from low to high
A recursive function to get count of nodes whose subtree is in range from low to high . This function returns true if nodes in subtree rooted under ' root ' are in range .
Base case
Recur for left and right subtrees
If both left and right subtrees are in range and current node is also in range , then increment count and return true
A wrapper over getCountUtil ( ) . This function initializes count as 0 and calls getCountUtil ( )
Utility function to create new node
Driver Code
Let us construct the BST shown in the above figure
Let us constructed BST shown in above example 10 / \ 5 50 / / \ 1 40 100
Python 3 program to delete leaf Node from binary search tree . Create a newNode in binary search tree .
Constructor to create a new node
Insert a Node in binary search tree .
Function for inorder traversal in a BST .
Delete leaf nodes from binary search tree .
Else recursively delete in left and right subtrees .
Driver code
Python3 program to find Sum Of All Elements smaller than or equal to Kth Smallest Element In BST
utility that allocates a newNode with the given key
A utility function to insert a new Node with given key in BST and also maintain lcount , Sum
If the tree is empty , return a new Node
Otherwise , recur down the tree
return the ( unchanged ) Node pointer
function return sum of all element smaller than and equal to Kth smallest element
Base cases
Compute sum of elements in left subtree
Add root 's data
Add current Node
If count is less than k , return right subtree Nodes
Wrapper over ksmallestElementSumRec ( )
Driver Code
20 / \ 8 22 / \ 4 12 / \ 10 14
utility function new Node of BST
A utility function to insert a new Node with given key in BST and also maintain lcount , Sum
If the tree is empty , return a new Node
Otherwise , recur down the tree
increment lCount of current Node
increment current Node sum by adding key into it
return the ( unchanged ) Node pointer
function return sum of all element smaller than and equal to Kth smallest element
if we fount k smallest element then break the function
store sum of all element smaller than current root ;
decremented k and call right sub - tree
call left sub - tree
Wrapper over ksmallestElementSumRec ( )
Driver Code
20 / \ 8 22 / \ 4 12 / \ 10 14
A binary tree node
Given a binary search tree and a number , inserts a new node with the given number in the correct place in the tree . Returns the new root pointer which the caller should then use ( the standard trick to avoidusing reference parameters )
1 ) If tree is empty then return a new singly node
2 ) Otherwise , recur down the tree
return the unchanged node pointer
Step 1 of the above algorithm
Step 2 of the above algorithm
Given a non - empty binary search tree , return the minimum data value found in that tree . Note that the entire tree doesn 't need to be searched
loop down to find the leftmost leaf
Driver progam to test above function
A Binary Tree Node Utility function to create a new tree node
since inorder traversal results in ascendingorder visit to node , we can store the values of the largest o which is smaller than a ( predecessor ) and smallest no which is large than a ( successor ) using inorder traversal
If root is None return
traverse the left subtree
root data is greater than a
q stores the node whose data is greater than a and is smaller than the previously stored data in * q which is successor
if the root data is smaller than store it in p which is predecessor
traverse the right subtree
Driver Code
Function that finds predecessor and successor of key in BST .
Search for given key in BST .
If root is given key .
the minimum value in right subtree is predecessor .
the maximum value in left subtree is successor .
If key is greater than root , then key lies in right subtree . Root could be predecessor if left subtree of key is null .
If key is smaller than root , then key lies in left subtree . Root could be successor if right subtree of key is null .
A utility function to create a new BST node
A utility function to insert a new node with given key in BST
Driver Code
Key to be searched in BST
Let us create following BST 50 / \ / \ 30 70 / \ / \ / \ / \ 20 40 60 80
Python3 program to find a pair with given sum using hashing
Driver code
A utility function to create a new BST node with key as given num
Constructor to create a new node
A utility function to insert a given key to BST
store storeInorder traversal in auxiliary array
Function to find pair for given sum in different bst vect1 [ ] -- > stores storeInorder traversal of first bst vect2 [ ] -- > stores storeInorder traversal of second bst
Initialize two indexes to two different corners of two lists .
find pair by moving two corners .
If we found a pair
If sum is more , move to higher value in first lists .
If sum is less , move to lower value in second lists .
Prints all pairs with given " sum " such that one element of pair is in tree with root1 and other node is in tree with root2 .
Store inorder traversals of two BSTs in two lists .
Now the problem reduces to finding a pair with given sum such that one element is in vect1 and other is in vect2 .
Driver Code
first BST
second BST
Utility that allocates a new node with the given key and NULL left and right pointers .
Function to find node with minimum absolute difference with given K min_diff -- > minimum difference till now min_diff_key -- > node having minimum absolute difference with K
If k itself is present
update min_diff and min_diff_key by checking current node value
if k is less than ptr -> key then move in left subtree else in right subtree
Wrapper over maxDiffUtil ( )
Initialize minimum difference
Find value of min_diff_key ( Closest key in tree with k )
Driver Code
Helper function that allocates a new node
Function to insert nodes in level order
Base case for recursion
insert left child
insert right child
Function to print tree nodes in InOrder fashion
Driver Code
A binary tree node has data , pointer to left child and a pointer to right child
A recursive function to construct Full from pre [ ] and post [ ] . preIndex is used to keep track of index in pre [ ] . l is low index and h is high index for the current subarray in post [ ]
Base case
The first node in preorder traversal is root . So take the node at preIndex from preorder and make it root , and increment preIndex
If the current subarry has only one element , no need to recur
Search the next element of pre [ ] in post [ ]
Use the index of element found in postorder to divide postorder array in two parts . Left subtree and right subtree
The main function to construct Full Binary Tree from given preorder and postorder traversals . This function mainly uses constructTreeUtil ( )
A utility function to print inorder traversal of a Binary Tree
Driver code
Converts tree with given root to threaded binary tree . This function returns rightmost child of root .
Base cases : Tree is empty or has single node
Find predecessor if it exists
Find predecessor of root ( Rightmost child in left subtree )
Link a thread from predecessor to root .
If current node is rightmost child
Recur for right subtree .
A utility function to find leftmost node in a binary tree rooted with ' root ' . This function is used in inOrder ( )
Function to do inorder traversal of a threaded binary tree
Find the leftmost node in Binary Tree
If this Node is a thread Node , then go to inorder successor
Else go to the leftmost child in right subtree
A utility function to create a new node
Driver Code
1 / \ 2 3 / \ / \ 4 5 6 7
A utility function to create a new BST node
A utility function to insert a new node with given key in BST
If the tree is empty , return a new node
Otherwise , recur down the tree
return the ( unchanged ) node pointer
Function to print inorder traversal using parent pointer
Start traversal from root
If left child is not traversed , find the leftmost child
Print root 's data
Mark left as done
If right child exists
If right child doesn 't exist, move to parent
If this node is right child of its parent , visit parent 's parent first
Driver Code
Python3 Code for Sorted order printing of a given array that represents a BST
print left subtree
print root
print right subtree
Driver Code
A Binary tree node
Function to find ceil of a given input in BST . If input is more than the max key in BST , return - 1
Base Case
We found equal key
If root 's key is smaller, ceil must be in right subtree
Else , either left subtre or root has the ceil value
Driver program to test above function
Utility function to create a new tree node
A utility function to print inorder traversal of a Binary Tree
A recursive function to construct Full binary tree from pre [ ] and preM [ ] . preIndex is used to keep track of index in pre [ ] . l is low index and h is high index for the current subarray in preM [ ]
Base case
The first node in preorder traversal is root . So take the node at preIndex from preorder and make it root , and increment preIndex
If the current subarry has only one element , no need to recur
Search the next element of pre [ ] in preM [ ]
construct left and right subtrees recursively
return root
function to construct full binary tree using its preorder traversal and preorder traversal of its mirror tree
Driver code
A binary tree node has key , . left child and right child
Helper function to find floor and ceil of a given key in BST
Display the floor and ceil of a given key in BST . If key is less than the min key in BST , floor will be - 1 ; If key is more than the max key in BST , ceil will be - 1 ;
Variables ' floor ' and ' ceil ' are passed by reference
Driver code
A utility function to create a new BST node
A utility function to do inorder traversal of BST
A utility function to insert a new node with given key in BST
If the tree is empty , return a new node
If key already exists in BST , increment count and return
Otherwise , recur down the tree
return the ( unchanged ) node pointer
Given a non - empty binary search tree , return the node with minimum key value found in that tree . Note that the entire tree does not need to be searched .
loop down to find the leftmost leaf
Given a binary search tree and a key , this function deletes a given key and returns root of modified tree
base case
If the key to be deleted is smaller than the root 's key, then it lies in left subtree
If the key to be deleted is greater than the root 's key, then it lies in right subtree
if key is same as root 's key
If key is present more than once , simply decrement count and return
ElSE , delete the node node with only one child or no child
node with two children : Get the inorder successor ( smallest in the right subtree )
Copy the inorder successor 's content  to this node
Delete the inorder successor
Driver Code
Let us create following BST 12 ( 3 ) / \ 10 ( 2 ) 20 ( 1 ) / \ 9 ( 1 ) 11 ( 1 )
A utility function to create a new BST node
A utility function to do inorder traversal of BST
A utility function to insert a new node with given key in BST
If the tree is empty , return a new node
Otherwise , recur down the tree
return the ( unchanged ) node pointer
Given a non - empty binary search tree , return the node with minimum key value found in that tree . Note that the entire tree does not need to be searched .
loop down to find the leftmost leaf
Given a binary search tree and a key , this function deletes the key and returns the new root
base case
If the key to be deleted is smaller than the root 's key, then it lies in left subtree
If the key to be deleted is greater than the root 's key, then it lies in right subtree
if key is same as root 's key, then  this is the node to be deleted
node with only one child or no child
node with two children : Get the inorder successor ( smallest in the right subtree )
Copy the inorder successor 's content  to this node
Delete the inorder successor
Function to decrease a key value in Binary Search Tree
First delete old key value
Then insert new key value
Return new root
Driver Code
Let us create following BST 50 / \ 30 70 / \ / \ 20 40 60 80
BST is modified to 50 / \ 30 70 / / \ 20 60 80 / 10
A utility function to create a new node
Function two print common elements in given two trees
Create two stacks for two inorder traversals
append the Nodes of first tree in stack s1
append the Nodes of second tree in stack s2
Both root1 and root2 are NULL here
If current keys in two trees are same
move to the inorder successor
If Node of first tree is smaller , than that of second tree , then its obvious that the inorder successors of current Node can have same value as that of the second tree Node . Thus , we pop from s2
root2 is set to NULL , because we need new Nodes of tree 1
Both roots and both stacks are empty
A utility function to do inorder traversal
A utility function to insert a new Node with given key in BST
If the tree is empty , return a new Node
Otherwise , recur down the tree
return the ( unchanged ) Node pointer
Driver Code
Create first tree as shown in example
Create second tree as shown in example
Binary Search
Poto the index in preorder .
Function to prLeaf Nodes by doing preorder traversal of tree using preorder and inorder arrays .
If l == r , therefore no right or left subtree . So , it must be leaf Node , print it .
If array is out of bound , return .
Finding the index of preorder element in inorder array using binary search .
Incrementing the index .
Finding on the left subtree .
Finding on the right subtree .
Finds leaf nodes from given preorder traversal .
To store inorder traversal
Copy the preorder into another array .
Finding the inorder by sorting the array .
Print the Leaf Nodes .
Driver Code
Print the leaf node from the given preorder of BST .
Since rightmost element is always leaf node .
Driver code
Print the leaf node from the given preorder of BST .
Driver code
A utility function to create a new BST Node
A utility function to do inorder traversal of BST
A utility function to insert a new Node with given key in BST
If the tree is empty , return a new Node
Otherwise , recur down the tree
Set parent of root of left subtree
Set parent of root of right subtree
return the ( unchanged ) Node pointer
Driver Code
Let us create following BST 50 / \ 30 70 / \ / \ 20 40 60 80
print iNoder traversal of the BST
Utility function to create a new Binary Tree node
A recursive function to create a Binary Tree from given pre [ ] preLN [ ] arrays . The function returns root of tree . index_ptr is used to update index values in recursive calls . index must be initially passed as 0
store the current value
of index in pre [ ] Base Case : All nodes are constructed
Allocate memory for this node and increment index for subsequent recursive calls
If this is an internal node , construct left and right subtrees and link the subtrees
A wrapper over constructTreeUtil ( )
Initialize index as 0. Value of index is used in recursion to maintain the current index in pre [ ] and preLN [ ] arrays .
This function is used only for testing
first recur on left child
then print the data of node
now recur on right child
Driver Code
function for finding pairs and min value
initialize smallest and count
iterate over all pairs
is abs value is smaller than smallest update smallest and reset count to 1
if abs value is equal to smallest increment count value
print result
Driver Code
Python3 program to find rank of an element in a stream .
Inserting a new Node .
Updating size of left subtree .
Function to get Rank of a Node x .
Step 1.
Step 2.
Step 3.
Driver code
Driver code
A Tree node
Function to create a new node
If the tree is empty , return a new node
If key is smaller than root 's key,  go to left subtree and set successor  as current node
return the ( unchanged ) node pointer
Function to find if number is special or not
sum_of_digits , prod_of_digits Check if number is two digit or not
Function to count number of special two digit number
Driver code
Function call , to check each node for special two digit number
Recursive function to construct binary of size len from Inorder traversal inorder [ ] . Initial values of start and end should be 0 and len - 1.
Find index of the maximum element from Binary Tree
Pick the maximum value and make it root
If this is the only element in inorder [ start . . end ] , then return it
Using index in Inorder traversal , construct left and right subtress
Function to find index of the maximum value in arr [ start ... end ]
Helper class that allocates a new node with the given data and None left and right pointers .
This funtcion is here just to test buildTree ( )
first recur on left child
then print the data of node
now recur on right child
Driver Code
Assume that inorder traversal of following tree is given 40 / \ 10 30 / \ 5 28
Let us test the built tree by printing Insorder traversal
Python program to find sum of middle row and column in matrix
loop for sum of row
loop for sum of column
Driver code
taking MAX 10000 so that time difference can be shown
accessing element row wise
accessing element column wise
Driver code
Time taken by row major order
Time taken by column major order
size of matrix
function to rotate matrix by k times
temporary array of size M
within the size of matrix
copy first M - k elements to temporary array
copy the elements from k to end to starting
copy elements from temporary array to end
function to display the matrix
Driver code
rotate matrix by k
display rotated matrix
Program to implement involutory matrix .
Function for matrix multiplication .
Function to check involutory matrix .
multiply function call .
Driver Code
Function call . If function return true then if part will execute otherwise else part will execute .
Python code to swap the element of first and last row and display the result
swapping of element between first and last rows
input in the array
printing the interchanged matrix
A node structure
Creates a node with key as ' i ' . If i is root , then it changes root . If parent of i is not created , then it creates parent first
If this node is already created
Create a new node and set created [ i ]
If ' i ' is root , change root pointer and return
If parent is not created , then create parent first
Find parent pointer
If this is first child of parent
If second child
Creates tree from parent [ 0. . n - 1 ] and returns root of the created tree
Create and array created [ ] to keep track of created nodes , initialize all entries as None
Inorder traversal of tree
Driver Method
Python3 code to sort 2D matrix row - wise
loop for rows of matrix
loop for column of matrix
loop for comparison and swapping
swapping of elements
printing the sorted matrix
Driver code
Python3 code to sort 2D matrix row - wise
One by one sort individual rows .
printing the sorted matrix
Driver code
Python 3 code to check Markov Matrix
Outer loop to access rows and inner to access columns
Find sum of current row
Matrix to check
Calls the function check ( )
Python3 Program to check if matrix is diagonal matrix or not .
Function to check matrix is diagonal matrix or not .
condition to check other elements except main diagonal are zero or not .
Driver function
Program to check matrix is scalar matrix or not .
Function to check matrix is scalar matrix or not .
Check all elements except main diagonal are zero or not .
Check all diagonal elements are same or not .
Driver function
Function call
Recursive function to construct binary of size n from Inorder traversal in [ ] and Postorder traversal post [ ] . Initial values of inStrt and inEnd should be 0 and n - 1. The function doesn 't do any error checking for cases where inorder and postorder do not form a tree
Base case
Pick current node from Postorder traversal using postIndex and decrement postIndex
If this node has no children then return
Else find the index of this node in Inorder traversal
Using index in Inorder traversal , construct left and right subtress
This function mainly initializes index of root and calls buildUtil ( )
Function to find index of value in arr [ start ... end ] . The function assumes that value is postsent in in [ ]
Helper function that allocates a new node
This funtcion is here just to test
Driver code
Python3 program to check whether a given matrix is magic matrix or not
Returns true if mat [ ] [ ] is magic square , else returns false .
calculate the sum of the prime diagonal
the secondary diagonal
For sums of Rows
check if every row sum is equal to prime diagonal sum
For sums of Columns
check if every column sum is equal to prime diagonal sum
Driver Code
function to count all sub - arrays divisible by k
create auxiliary hash array to count frequency of remainders
Traverse original array and compute cumulative sum take remainder of this current cumulative sum and increase count by 1 for this remainder in mod array
as the sum can be negative , taking modulo twice
Initialize result
Traverse mod
If there are more than one prefix subarrays with a particular mod value .
add the subarrays starting from the arr [ i ] which are divisible by k itself
function to count all sub - matrices having sum divisible by the value 'k  
Variable to store the final output
Set the left column
Set the right column for the left column set by outer loop
Calculate sum between current left and right for every row 'i  
Count number of subarrays in temp having sum divisible by ' k ' and then add it to 'tot_count  
required count of sub - matrices having sum divisible by 'k  
Driver Code
Function to find minimum operation required to make sum of each row and column equals
Initialize the sumRow [ ] and sumCol [ ] array to 0
Calculate sumRow [ ] and sumCol [ ] array
Find maximum sum value in either row or in column
Find minimum increment required in either row or column
Add difference in corresponding cell , sumRow [ ] and sumCol [ ] array
Update the count variable
If ith row satisfied , increment ith value for next iteration
If jth column satisfied , increment jth value for next iteration
Utility function to print matrix
Driver code
Python program to find the frequency of k in matrix where m ( i , j ) = i + j
Driver Code
function that prints given number of 1 ' s , ▁ 2' s , 3 ' s ▁ . . . . k ' s in zig - zag way .
two - dimensional array to store numbers .
for even row .
for each column .
storing element .
decrement element at kth index .
if array contains zero then increment index to make this next index
for odd row .
for each column .
storing element .
decrement element at kth index .
if array contains zero then increment index to make this next index .
printing the stored elements .
Driver code
Python3 program to find out the maximum product in the matrix which four elements are adjacent to each other in one direction
function to find max product
iterate the rows .
iterate the columns .
check the maximum product in horizontal row .
check the maximum product in vertical row .
check the maximum product in diagonal going through down - right
check the maximum product in diagonal going through up - right
Driver code
A binary tree node has data , pointer to left child and a pointer to right child
Recursive function to construct binary of size n from Inorder traversal in [ ] and Postorder traversal post [ ] . Initial values of inStrt and inEnd should be 0 and n - 1. The function doesn 't do any error checking for cases where inorder and postorder do not form a tree
Base case
Pick current node from Postorder traversal using postIndex and decrement postIndex
If this node has no children then return
Else finnd the inndex of this node inn Inorder traversal
Using inndex inn Inorder traversal , construct left and right subtress
This function mainly creates an unordered_map , then calls buildTreeUtil ( )
Store indexes of all items so that we we can quickly find later
Index in postorder
This funtcion is here just to test
Driver Code
Python3 code to find minimum flip required to make Binary Matrix symmetric along main diagonal
Return the minimum flip required to make Binary Matrix symmetric along main diagonal .
finding the transpose of the matrix
Finding the number of position where element are not same .
Driver Program
Python3 code to find minimum flip required to make Binary Matrix symmetric along main diagonal
Return the minimum flip required to make Binary Matrix symmetric along main diagonal .
Comparing elements across diagonal
Driver Program
Python Program to Find the frequency of even and odd numbers in a matrix
Function for calculating frequency
modulo by 2 to check even and odd
print Frequency of numbers
Driver code
Python 3 Program to check if the center element is equal to the individual sum of all the half diagonals
Function to Check center element is equal to the individual sum of all the half diagonals
Find sums of half diagonals
Driver code
Python code to print identity matrix Function to print identity matrix
Here end is used to stay in same line
Driver Code
Python3 program to check if a given matrix is identity
Driver Code
Returns a raised power t under modulo mod
Counting number of ways of filling the matrix
Function calculating the answer
if sum of numbers of rows and columns is odd i . e ( n + m ) % 2 == 1 and k = - 1 then there are 0 ways of filiing the matrix .
If there is one row or one column then there is only one way of filling the matrix
If the above cases are not followed then we find ways to fill the n - 1 rows and m - 1 columns which is 2 ^ ( ( m - 1 ) * ( n - 1 ) ) .
Driver Code
Simple Python3 program to find mirror of matrix across diagonal .
for diagonal which start from at first row of matrix
traverse all top right diagonal
here we use stack for reversing the element of diagonal
push all element back to matrix in reverse order
do the same process for all the diagonal which start from last column
here we use stack for reversing the elements of diagonal
push all element back to matrix in reverse order
Utility function to pra matrix
Driver code
Efficient Python3 program to find mirror of matrix across diagonal .
traverse a matrix and swap mat [ i ] [ j ] with mat [ j ] [ i ]
Utility function to pra matrix
Driver code
Python program to find all rectangles filled with 0
flag to check column edge case , initializing with 0
flag to check row edge case , initializing with 0
loop breaks where first 1 encounters
set the flag
pass because already processed
loop breaks where first 1 encounters
set the flag
fill rectangle elements with any number so that we can exclude next time
when end point touch the boundary
when end point touch the boundary
retrieving the column size of array
output array where we are going to store our output
It will be used for storing start and end location in the same index
storing initial position of rectangle
will be used for the last position
driver code
Searches the element x in mat [ ] [ ] . If the element is found , then prints its position and returns true , otherwise prints " not ▁ found " and returns false
Traverse through the matrix
If the element is found
Driver code
Searches the element x in mat [ ] [ ] . If the element is found , then prints its position and returns true , otherwise prints " not ▁ found " and returns false
set indexes for top right element
if mat [ i ] [ j ] < x
if ( i == n j == - 1 )
Driver Code
Function to pralternating rectangles of 0 and X
k - starting row index m - ending row index l - starting column index n - ending column index i - iterator
Store given number of rows and columns for later use
A 2D array to store the output to be printed
Iniitialize the character to be stoed in a [ ] [ ]
Fill characters in a [ ] [ ] in spiral form . Every iteration fills one rectangle of either Xs or Os
Fill the first row from the remaining rows
Fill the last column from the remaining columns
Fill the last row from the remaining rows
Print the first column from the remaining columns
Flip character for next iteration
Print the filled matrix
Driver Code
we will use a 2D vector to store the diagonals of our array the 2D vector will have ( n + m - 1 ) rows that is equal to the number of diagnols
Driver Code
Function call
implementation to find the total energy required to rearrange the numbers
function to find the total energy required to rearrange the numbers
nested loops to access the elements of the given matrix
store quotient
final destination location ( i_des , j_des ) of the element mat [ i ] [ j ] is being calculated
energy required for the movement of the element mat [ i ] [ j ] is calculated and then accumulated in the 'tot_energy  
required total energy
Driver Program
Python3 program to count unique cells in a matrix
Returns true if mat [ i ] [ j ] is unique
checking in row calculating sumrow will be moving column wise
checking in column calculating sumcol will be moving row wise
Driver code
Efficient Python3 program to count unique cells in a binary matrix
Count number of 1 s in each row and in each column
Using above count arrays , find cells
Driver code
Python 3 code to check if a matrix is sparse .
Count number of zeros in the matrix
Driver Function
Python3 program to find common elements in two diagonals .
Returns count of row wise same elements in two diagonals of mat [ n ] [ n ]
Driver Code
Python3 program to check the if sum of a row is same as corresponding column
Function to check the if sum of a row is same as corresponding column
number of rows
number of columns
Creating new Node
Adds a sibling to a list with starting with n
Add child Node to a Node
Check if child list is not empty .
Traverses tree in depth first order
Driver code
python program to find row with maximum 1 in row sorted binary matrix
function for finding row with maximum 1
find left most position of 1 in a row find 1 st zero in a row
driver program
Python3 program to pra square matrix in Z form
Driver code
Python 3 program to print all palindromic paths from top left to bottom right in a grid .
i and j are row and column indexes of current cell ( initially these are 0 and 0 ) .
If we have not reached bottom right corner , keep exlporing
If we reach bottom right corner , we check if the path used is palindrome or not .
Driver code
Python3 program to find number of possible moves of knight
To calculate possible moves
All possible moves of a knight
Check if each possible move is valid or not
Position of knight after move
count valid moves
Return number of possible moves
Driver code
A simple Python program to find sum of diagonals
Condition for principal diagonal
Condition for secondary diagonal
Driver code
A simple Python3 program to find sum of diagonals
Driver code
Python3 program to create a tree with left child right sibling representation
Creating new Node
Adds a sibling to a list with starting with n
Add child Node to a Node
Check if child list is not empty
Traverses tree in level order
Corner cases
Create a queue and enque root
Take out an item from the queue
Print next level of taken out item and enque next level 's children
Driver code
Python program to print boundary element of the matrix .
Driver code
Python program to print boundary element of the matrix .
Driver code
Python3 program to print a matrix in spiral form .
Driver code
Function calling
Python program to interchange the diagonals of matrix
Function to interchange diagonals
swap elements of diagonal
Driver Code
Python3 program to find the difference between the sum of diagonal .
Initialize sums of diagonals
finding sum of primary diagonal
finding sum of secondary diagonal
Absolute difference of the sums across the diagonals
Driver Code
Python3 program to find the difference between the sum of diagonal .
Initialize sums of diagonals
Absolute difference of the sums across the diagonals
Driver Code
Fills a [ m ] [ n ] with values from 1 to m * n in spiral fashion .
Initialize value to be filled in matrix .
k - starting row index m - ending row index l - starting column index n - ending column index
Print the first row from the remaining rows .
Print the last column from the remaining columns .
Print the last row from the remaining rows .
Print the first column from the remaining columns .
Driver program
Prints edges of tree represented by give Prufer code
Initialize the array of vertices
Number of occurrences of vertex in code
Find the smallest label not present in prufer .
If j + 1 is not present in prufer set
Remove from Prufer set and print pair .
For the last element
Driver code
Python3 program for finding MAXimum and MINimum in a matrix .
Finds MAXimum and MINimum in arr [ 0. . n - 1 ] [ 0. . n - 1 ] using pair wise comparisons
Traverses rows one by one
Compare elements from beginning and end of current row
Driver Code
Python 3 program to print matrix in anti - spiral form
k - starting row index m - ending row index l - starting column index n - ending column index i - iterator
Print the first row from the remaining rows
Print the last column from the remaining columns
Print the last row from the remaining rows
Print the first column from the remaining columns
Driver Code
Return minimum operation required to make all 1 s .
check if this cell equals 0
increase the number of moves
flip from this cell to the start point
flip the cell
Driver Code
Python 3 program to check whether given matrix is skew - symmetric or not
Utility function to create transpose matrix
Utility function to check skew - symmetric matrix condition
Utility function to print a matrix
Driver program to test above functions
Function create transpose matrix
Check whether matrix is skew - symmetric or not
Return sum of matrix element where each element is division of its corresponding row and column .
For each column .
count the number of elements of each column . Initialize to i - 1 because number of zeroes are i - 1.
For multiply
Driver Code
Python3 program to find number of countOpsation to make two matrix equals
Update matrix A [ ] [ ] so that only A [ ] [ ] has to be countOpsed
Check necessary condition for condition for existence of full countOpsation
If countOpsation is possible calculate total countOpsation
Driver code
Python3 program to build full k - ary tree from its preorder traversal and to print the postorder traversal of the tree .
Utility function to create a new tree node with k children
Function to build full k - ary tree
For None tree
For adding k children to a node
Check if ind is in range of array Check if height of the tree is greater than 1
Recursively add each child
Function to find the height of the tree
Function to prpostorder traversal of the tree
Driver Code
Prcoils in a matrix of size 4 n x 4 n
Number of elements in each coil
Let us fill elements in coil 1.
First element of coil1 4 * n * 2 * n + 2 * n
Fill remaining m - 1 elements in coil1 [ ]
Fill elements of current step from down to up
Next element from current element
Fill elements of current step from up to down .
get coil2 from coil1
Prboth coils
Driver code
Return the sum of matrix in which each element is absolute difference of its corresponding row and column number row
Generate matrix
Compute sum
Driver Code
Return the sum of matrix in which each element is absolute difference of its corresponding row and column number row
Driver code
Return the sum of matrix in which each element is absolute difference of its corresponding row and column number row
Driver Code
function returns sum of diagonals
as order should be only odd we should pass only odd integers
Driver program
Python3 program to find perimeter of area covered by 1 in 2D matrix consisits of 0 ' s ▁ and ▁ 1' s .
Find the number of covered side for mat [ i ] [ j ] .
UP
LEFT
DOWN
RIGHT
Returns sum of perimeter of shapes formed with 1 s
Traversing the matrix and finding ones to calculate their contribution .
Driver Code
Helper class that allocates a new node
This funtcion is here just to test
function to return the index of close parenthesis
Inbuilt stack
if open parenthesis , push it
if close parenthesis
if stack is empty , this is the required index
if not found return - 1
function to conStruct tree from String
Base case
new root
if next char is ' ( ' find the index of its complement ')  
if index found
call for left subtree
call for right subtree
Driver Code
Python 3 program to print matrix in diagonal order
Initialize indexes of element to be printed next
Direction is initially from down to up
Traverse the matrix till all elements get traversed
If isUp = True then traverse from downward to upward
Set i and j according to direction
If isUp = 0 then traverse up to down
Set i and j according to direction
Revert the isUp to change the direction
Driver program
Initialize matrix
n - size mode - switch to derive up / down traversal it - iterator count - increases until it reaches n and then decreases
2 n will be the number of iterations
Function to find maximum difference of sum of elements of two rows such that second row appears before first row .
auxiliary array to store sum of all elements of each row
calculate sum of each row and store it in rowSum array
calculating maximum difference of two elements such that rowSum [ i ] < rowsum [ j ]
if current difference is greater than previous then update it
if new element is less than previous minimum element then update it so that we may get maximum difference in remaining array
Driver program to run the case
Python3 program to get total coverage of all zeros in a binary matrix
Returns total coverage of all zeros in mat [ ] [ ]
looping for all rows of matrix
1 is not seen yet
looping in columns from left to right direction to get left ones
If one is found from left
If 0 is found and we have found a 1 before .
Repeat the above process for right to left direction .
Traversing across columms for up and down directions .
1 is not seen yet
Driver code
Function to count all sorted rows in a matrix
Initialize result
Start from left side of matrix to count increasing order rows
Check if there is any pair ofs element that are not in increasing order .
If the loop didn 't break (All elements of current row were in increasing order)
Start from right side of matrix to count increasing order rows ( reference to left these are in decreasing order )
Check if there is any pair ofs element that are not in decreasing order .
Note c > 1 condition is required to make sure that a single column row is not counted twice ( Note that a single column row is sorted both in increasing and decreasing order )
Driver code
Python3 program to Find maximum XOR value in matrix either row / column wise maximum number of row and column
Function return the maximum xor value that is either row or column wise
For row xor and column xor
Traverse matrix
xor row element
for each column : j is act as row & i act as column xor column element
update maximum between r_xor , c_xor
return maximum xor value
Driver Code
Function which tells the Current direction
Driver code
k - starting row index m - ending row index l - starting column index n - ending column index i - iterator
check the first row from the remaining rows
check the last column from the remaining columns
check the last row from the remaining rows
check the first column from the remaining columns
Driver program to test above functions
Python3 program for Kth element in spiral form of matrix
function for Kth element
Element is in first row
Element is in last column
Element is in last row
Element is in first column
Recursion for sub - matrix . & A [ 1 ] [ 1 ] is address to next inside sub matrix .
Driver code
Python3 program to check whether given matrix is a Toeplitz matrix or not
Function to check if all elements present in descending diagonal starting from position ( i , j ) in the matrix are all same or not
mismatch found
we only reach here when all elements in given diagonal are same
Function to check whether given matrix is a Toeplitz matrix or not
do for each element in first row
check descending diagonal starting from position ( 0 , j ) in the matrix
do for each element in first column
check descending diagonal starting from position ( i , 0 ) in the matrix
we only reach here when each descending diagonal from left to right is same
Driver Code
Function call
Python3 program to check whether given matrix is a Toeplitz matrix or not
row = number of rows col = number of columns
dictionary to store key , value pairs
if key value exists in the map ,
we check whether the current value stored in this key matches to element at current index or not . If not , return false
else we put key , value pair in map
Driver Code
Function call
Python program to count number of 0 s in the given row - wise and column - wise sorted binary matrix .
Function to count number of 0 s in the given row - wise and column - wise sorted binary matrix .
start from bottom - left corner of the matrix
stores number of zeroes in the matrix
move up until you find a 0
if zero is not found in current column , we are done
add 0 s present in current column to result
move right to next column
Driver Code
For Queue Size
A tree node
A queue node
A utility function to create a new tree node
A utility function to create a new Queue
Standard Queue Functions
A utility function to check if a tree node has both left and right children
Function to insert a new node in complete binary tree
Create a new node for given data
If the tree is empty , initialize the root with new node .
get the front node of the queue .
If the left child of this front node doesn t exist , set the left child as the new node
If the right child of this front node doesn t exist , set the right child as the new node
If the front node has both the left child and right child , Dequeue ( ) it .
Enqueue ( ) the new node for later insertions
Standard level order traversal to test above function
Driver code
size of binary square matrix
Function to find the size of the largest ' + ' formed by all 1 's in given binary matrix
left [ j ] [ j ] , right [ i ] [ j ] , top [ i ] [ j ] and bottom [ i ] [ j ] store maximum number of consecutive 1 's present to the left,  right, top and bottom of mat[i][j] including  cell(i, j) respectively
initialize above four matrix
initialize first row of top
initialize last row of bottom
initialize first column of left
initialize last column of right
fill all cells of above four matrix
calculate left matrix ( filled left to right )
calculate top matrix
calculate new value of j to calculate value of bottom ( i , j ) and right ( i , j )
calculate bottom matrix
calculate right matrix
revert back to old j
n stores length of longest ' + ' found so far
compute longest +
find minimum of left ( i , j ) , right ( i , j ) , top ( i , j ) , bottom ( i , j )
largest + would be formed by a cell that has maximum value
4 directions of length n - 1 and 1 for middle cell
matrix contains all 0 's
Driver Code
Returns left of str in an expanding matrix of a , b , c , and d .
Start from rightmost position
If the current character is b or d , change to a or c respectively and break the loop
If the current character is a or c , change it to b or d respectively
Driver Code
Prints spiral matrix of size n x n containing numbers from 1 to n x n
Finds minimum of four inputs
For upper right half
For lower left half
Driver code
print a n x n spiral matrix in O ( 1 ) space
Python program to find the shortest path between a given source cell to a destination cell .
To store matrix cell cordinates
A data structure for queue used in BFS
The cordinates of the cell
Cell 's distance from the source
Check whether given cell ( row , col ) is a valid cell or not
return true if row number and column number is in range
These arrays are used to get row and column numbers of 4 neighbours of a given cell
Function to find the shortest path between a given source cell to a destination cell .
check source and destination cell of the matrix have value 1
Mark the source cell as visited
Create a queue for BFS
Distance of source cell is 0
Enqueue source cell
Do a BFS starting from source cell
If we have reached the destination cell , we are done
Otherwise enqueue its adjacent cells
if adjacent cell is valid , has path and not visited yet , enqueue it .
mark cell as visited and enqueue it
Return - 1 if destination cannot be reached
Driver code
Binary tree Node class has data , left and right child
This is a utility function to convert the binary tree to doubly linked list . Most of the core task is done by this function .
Base case
Convert left subtree and link to root
Convert the left subtree
Find inorder predecessor , After this loop , left will point to the inorder predecessor of root
Make root as next of predecessor
Make predecessor as previous of root
Convert the right subtree and link to root
Convert the right subtree
Find inorder successor , After this loop , right will point to the inorder successor of root
Make root as previous of successor
Make successor as next of root
The main function that first calls bintree2listUtil ( ) , then follows step 3 of the above algorithm
Base case
Convert to doubly linked list using BLLToDLLUtil
We need pointer to left most node which is head of the constructed Doubly Linked list
Function to print the given doubly linked list
Driver Code
Let us create the tree shown in above diagram
Convert to DLL
Print the converted list
Python3 Code For A Boolean Matrix Question
Initialize all values of row [ ] as 0
Initialize all values of col [ ] as 0
Store the rows and columns to be marked as 1 in row [ ] and col [ ] arrays respectively
Modify the input matrix mat [ ] using the above constructed row [ ] and col [ ] arrays
A utility function to print a 2D matrix
Driver Code
Python3 Code For A Boolean Matrix Question
variables to check if there are any 1 in first row and column
updating the first row and col if 1 is encountered
Modify the input matrix mat [ ] using the first row and first column of Matrix mat
modify first row if there was any 1
modify first col if there was any 1
A utility function to print a 2D matrix
Driver Code
Python program to find k such that all elements in k ' th ▁ row ▁ ▁ ▁ are ▁ 0 ▁ and ▁ k ' th column are 1
start from top right - most corner
initialise result
find the index ( This loop runs at most 2 n times , we either increment row number or decrement column number )
if the current element is 0 , then this row may be a solution
check for all the elements in this row
if all values are 0 , update result as row number
if found a 1 in current row , the row can 't be a   solution, increment row number
if the current element is 1
check for all the elements in this column
if all elements are 1 , update result as col number
if found a 0 in current column , the column can 't be a  solution, decrement column number
if we couldn ' t ▁ find ▁ result ▁ in ▁ above ▁ loop , ▁ result ▁ doesn ' t exist
check if the above computed res value is valid
test find ( arr ) function
Given a binary matrix of M X N of integers , you need to return only unique rows of binary array
The main function that prints all unique rows in a given matrix .
Traverse through the matrix
Check if there is similar column is already printed , i . e if i and jth column match .
If no row is similar
Print the row
Driver Code
Python3 code to print unique row in a given binary matrix
Driver Code
Python 3 program to find the largest rectangle of 1 's with swapping of columns allowed.
Returns area of the largest rectangle of 1 's
An auxiliary array to store count of consecutive 1 's in every column.
Step 1 : Fill the auxiliary array hist [ ] [ ]
First row in hist [ ] [ ] is copy of first row in mat [ ] [ ]
Fill remaining rows of hist [ ] [ ]
Step 2 : Sort rows of hist [ ] [ ] in non - increasing order
counting occurrence
Traverse the count array from right side
Step 3 : Traverse the sorted hist [ ] [ ] to find maximum area
Since values are in decreasing order , The area ending with cell ( i , j ) can be obtained by multiplying column number with value of hist [ i ] [ j ]
Driver Code
Python 3 program to compute submatrix query sum in O ( 1 ) time
Function to preprcess input mat [ M ] [ N ] . This function mainly fills aux [ M ] [ N ] such that aux [ i ] [ j ] stores sum of elements from ( 0 , 0 ) to ( i , j )
Copy first row of mat [ ] [ ] to aux [ ] [ ]
Do column wise sum
Do row wise sum
A O ( 1 ) time function to compute sum of submatrix between ( tli , tlj ) and ( rbi , rbj ) using aux [ ] [ ] which is built by the preprocess function
result is now sum of elements between ( 0 , 0 ) and ( rbi , rbj )
Remove elements between ( 0 , 0 ) and ( tli - 1 , rbj )
Remove elements between ( 0 , 0 ) and ( rbi , tlj - 1 )
Add aux [ tli - 1 ] [ tlj - 1 ] as elements between ( 0 , 0 ) and ( tli - 1 , tlj - 1 ) are subtracted twice
Driver Code
Python 3 program to find rank of a matrix
Function for exchanging two rows of a matrix
Find rank of a matrix
Before we visit current row ' row ' , we make sure that mat [ row ] [ 0 ] , ... . mat [ row ] [ row - 1 ] are 0. Diagonal element is not zero
This makes all entries of current column as 0 except entry 'mat[row][row]  
Diagonal element is already zero . Two cases arise : 1 ) If there is a row below it with non - zero entry , then swap this row with that row and process that row 2 ) If all elements in current column below mat [ r ] [ row ] are 0 , then remvoe this column by swapping it with last column and reducing number of columns by 1.
Find the non - zero element in current column
Swap the row with non - zero element with this row .
If we did not find any row with non - zero element in current columnm , then all values in this column are 0.
Reduce number of columns
copy the last column here
process this row again
self . Display ( Matrix , self . R , self . C )
Function to Display a matrix
Driver Code
Finds the maximum area under the histogram represented by histogram . See below article for details .
Create an empty stack . The stack holds indexes of hist array / The bars stored in stack are always in increasing order of their heights .
Top of stack
Initialize max area in current
row ( or histogram ) Initialize area with current top
Run through all bars of given histogram ( or row )
If this bar is higher than the bar on top stack , push it to stack
If this bar is lower than top of stack , then calculate area of rectangle with stack top as the smallest ( or minimum height ) bar . ' i ' is ' right ▁ index ' for the top and element before top in stack is 'left index  
Now pop the remaining bars from stack and calculate area with every popped bar as the smallest bar
Returns area of the largest rectangle with all 1 s in A
Calculate area for first row and initialize it as result
iterate over row to find maximum rectangular area considering each row as histogram
if A [ i ] [ j ] is 1 then add A [ i - 1 ] [ j ]
Update result if area with current row ( as last row ) of rectangle ) is more
Driver Code
A structure to represent a cell index
r is row , varies from 0 to R - 1
c is column , varies from 0 to C - 1
A simple solution to find sums for a given array of cell indexes
Iterate through all cell indexes
Compute sum for current cell index
Driver Code
Python3 implementation of the approach A structure to represent a cell index
r is row , varies from 0 to R - 1
c is column , varies from 0 to C - 1
Compute sum of all elements , sum of every row and sum every column
Compute the desired sum for all given cell indexes
Driver Code
This function takes a matrix of ' X ' and ' O ' and returns the number of rectangular islands of ' X ' where no two islands are row - wise or column - wise adjacent , the islands may be diagonaly adjacent
Initialize result
Traverse the input matrix
If current cell is ' X ' , then check whether this is top - leftmost of a rectangle . If yes , then increment count
Driver Code
Specify number of rows and columns
Returns common element in all rows of mat [ M ] [ N ] . If there is no common element , then - 1 is returned
An array to store indexes of current last column
Initialize min_row as first row
Keep finding min_row in current last column , till either all elements of last column become same or we hit first column .
Find minimum in current last column
eq_count is count of elements equal to minimum in current last column .
Traverse current last column elements again to update it
Decrease last column index of a row whose value is more than minimum .
Reduce last column index by 1
If equal count becomes M , return the value
Driver Code
Python3 implementation of the approach
Specify number of rows and columns
Returns common element in all rows of mat [ M ] [ N ] . If there is no common element , then - 1 is returned
A hash map to store count of elements
Increment the count of first element of the row
Starting from the second element of the current row
If current element is different from the previous element i . e . it is appearing for the first time in the current row
Find element having count equal to number of rows
No such element found
Driver Code
Size of given matrix is M x N
A recursive function to replace previous value ' prevV ' at ' ( x , ▁ y ) ' and all surrounding values of ( x , y ) with new value ' newV ' .
Base Cases
Replace the color at ( x , y )
Recur for north , east , south and west
Returns size of maximum size subsquare matrix surrounded by 'X  
Step 1 : Replace all ' O ' s with '-  
Call floodFill for all ' - ' lying on edges Left Side
Right side
Top side
Bottom side
Step 3 : Replace all ' - ' with 'X  
Driver code
A Binary Tree node
Standard Inorder traversal of tree
Changes left pointers to work as previous pointers in converted DLL The function simply does inorder traversal of Binary Tree and updates left pointer using previously visited node
Changes right pointers to work as nexr pointers in converted DLL
Find the right most node in BT or last node in DLL
Start from the rightmost node , traverse back using left pointers While traversing , change right pointer of nodes
The leftmost node is head of linked list , return it
The main function that converts BST to DLL and returns head of DLL
Set the previous pointer
Set the next pointer and return head of DLL
Traversses the DLL from left to right
Let us create the tree shown in above diagram
Size of given matrix is N X N
Initialize maxside with 0
Fill the dp matrix horizontally . for contiguous ' X ' increment the value of x , otherwise make it 0
Fill the dp matrix vertically . For contiguous ' X ' increment the value of y , otherwise make it 0
Now check , for every value of ( i , j ) if sub - square is possible , traverse back horizontally by value val , and check if vertical contiguous ' X ' enfing at ( i , j - val + 1 ) is greater than equal to val . Similarly , check if traversing back vertically , the horizontal contiguous ' X ' ending at ( i - val + 1 , j ) is greater than equal to val .
Store the final answer in maxval
Return the final answe .
Driver code
Function call
Dimentions of paint screen
A recursive function to replace previous color ' prevC ' at ' ( x , ▁ y ) ' and all surrounding pixels of ( x , y ) with new color ' newC ' and
Base cases
Replace the color at ( x , y )
Recur for north , east , south and west
It mainly finds the previous color on ( x , y ) and calls floodFillUtil ( )
Driver Code
A Memoization based program to find maximum collection using two traversals of a grid
checks whether a given input is valid or not
Driver function to collect max value
if P1 or P2 is at an invalid cell
if both traversals reach their destinations
If both traversals are at last row but not at their destination
If subproblem is already solved
Initialize answer for this subproblem
this variable is used to store gain of current cell ( s )
Recur for all possible cases , then store and return the one with max value
This is mainly a wrapper over recursive function getMaxUtil ( ) . This function creates a table for memoization and calls getMaxUtil ( )
Create a memoization table and initialize all entries as - 1
Calculation maximum value using memoization based function getMaxUtil ( )
Driver program to test above functions
A Naive Recursive Python 3 program to find maximum number of coins that can be collected before hitting a dead end
to check whether current cell is out of the grid or not
dir = 0 for left , dir = 1 for facing right . This function returns number of maximum coins that can be collected starting from ( i , j ) .
If this is a invalid cell or if cell is a blocking cell
Check if this cell contains the coin ' C ' or if its empty ' E ' .
Get the maximum of two cases when you are facing right in this cell
Direction is right
Direction is left Get the maximum of two cases when you are facing left in this cell
Driver program to test above function
As per the question initial cell is ( 0 , 0 ) and direction is right
Python3 program to find the longest consecutive path
tool matrices to recur for adjacent cells .
dp [ i ] [ j ] Stores length of longest consecutive path starting at arr [ i ] [ j ] .
check whether mat [ i ] [ j ] is a valid cell or not .
Check whether current character is adjacent to previous character ( character processed in parent call ) or not .
i , j are the indices of the current cell and prev is the character processed in the parent call . . also mat [ i ] [ j ] is our current character .
If this cell is not valid or current character is not adjacent to previous one ( e . g . d is not adjacent to b ) or if this cell is already included in the path than return 0.
If this subproblem is already solved , return the answer
Initialize answer
recur for paths with different adjacent cells and store the length of longest path .
save the answer and return
Returns length of the longest path with all characters consecutive to each other . This function first initializes dp array that is used to store results of subproblems , then it calls recursive DFS based function getLenUtil ( ) to find max length path
check for each possible starting point
recur for all eight adjacent cells
Driver program
Python3 program to find the longest path in a matrix with given constraints
Returns length of the longest path beginning with mat [ i ] [ j ] . This function mainly uses lookup table dp [ n ] [ n ]
Base case
If this subproblem is already solved
To store the path lengths in all the four directions
Since all numbers are unique and in range from 1 to n * n , there is atmost one possible direction from any cell
If none of the adjacent fours is one greater we will take 1 otherwise we will pick maximum from all the four directions
Returns length of the longest path beginning with any cell
Initialize result
Create a lookup table and fill all entries in it as - 1
Compute longest path beginning from all cells
Update result if needed
Driver program
Python3 program to find minimum initial points to reach destination
dp [ i ] [ j ] represents the minimum initial points player should have so that when starts with cell ( i , j ) successfully reaches the destination cell ( m - 1 , n - 1 )
Base case
Fill last row and last column as base to fill entire table
fill the table in bottom - up fashion
Driver code
This function changes a tree to hold children sum property
If tree is empty or it 's a   leaf node then return true 
convert left and right subtrees
If left child is not present then 0 is used as data of left child
If right child is not present then 0 is used as data of right child
get the diff of node 's data   and children sum 
If node ' s ▁ children ▁ sum ▁ is ▁ greater ▁ ▁ ▁ than ▁ the ▁ node ' s data
THIS IS TRICKY - . If node 's data is   greater than children sum, then increment  subtree by diff 
- diff is used to
This function is used to increment subtree by diff
IF left child is not None then increment it
Recursively call to fix the descendants of node . left
Else increment right child
Recursively call to fix the descendants of node . right
Given a binary tree , printInorder ( ) prints out its inorder traversal
first recur on left child
then print the data of node
now recur on right child
Helper function that allocates a new node with the given data and None left and right poers .
Driver Code
Python3 program to implement Queue using two stacks with costly enQueue ( )
Move all elements from s1 to s2
Push item into self . s1
Push everything back to s1
Dequeue an item from the queue
if first stack is empty
Return top of self . s1
Driver code
Python3 program to convert left - right to down - right representation of binary tree Helper function that allocates a new node with the given data and None left and right poers .
Construct to create a new node
An Iterative level order traversal based function to convert left - right to down - right representation .
Base Case
Recursively convert left an right subtrees
If left child is None , make right child as left as it is the first child .
If left child is NOT None , then make right child as right of left child
Set root 's right as None
A utility function to traverse a tree stored in down - right form .
Driver Code
1 / \ 2 3 / \ 4 5 / / \ 6 7 8
Node defintion
Convert a given tree to a tree where every node contains sum of values of nodes in left and right subtrees in the original tree
Base case
Store the old value
Recursively call for left and right subtrees and store the sum as new value of this node
Return the sum of values of nodes in left and right subtrees and old_value of this node
A utility function to print inorder traversal of a Binary Tree
Utility function to create a new Binary Tree node
Driver Code
Constructing tree given in the above figure
Print inorder traversal of the converted tree to test result of toSumTree ( )
Find the peak element in the array
first or last element is peak element
check for every other element
check if the neighbors are smaller
Driver code .
A binary search based function that returns index of a peak element
Find index of middle element ( low + high ) / 2
Compare middle element with its neighbours ( if neighbours exist )
If middle element is not peak and its left neighbour is greater than it , then left half must have a peak element
If middle element is not peak and its right neighbour is greater than it , then right half must have a peak element
A wrapper over recursive function findPeakUtil ( )
Driver code
Print Repeating function
Driver code
Function
Driver code
Python3 code for Find the two repeating elements in a given array
printRepeating function
S is for sum of elements in arr [ ]
P is for product of elements in arr [ ]
Calculate Sum and Product of all elements in arr [ ]
S is x + y now
P is x * y now
D is x - y now
factorial of n
Driver code
Python3 code to Find the two repeating elements in a given array
Will hold xor of all elements
Will have only single set bit of xor
Get the xor of all elements in arr [ ] and 1 , 2 . . n
Get the rightmost set bit in set_bit_no
Now divide elements in two sets by comparing rightmost set bit of xor with bit at same position in each element .
XOR of first set in arr [ ]
XOR of second set in arr [ ]
XOR of first set in arr [ ] and 1 , 2 , ... n
XOR of second set in arr [ ] and 1 , 2 , ... n
Driver code
Function to print repeating
Driver code
Returns true if the there is a subarray of arr [ ] with sum equal to ' sum ' otherwise returns false . Also , prints the result
Pick a starting point
try all subarrays starting with 'i  
Driver program
Returns true if the there is a subarray of arr [ ] with sum equal to ' sum ' otherwise returns false . Also , prints the result .
Initialize curr_sum as value of first element and starting point as 0
Add elements one by one to curr_sum and if the curr_sum exceeds the sum , then remove starting element
If curr_sum exceeds the sum , then remove the starting elements
If curr_sum becomes equal to sum , then return true
Add this element to curr_sum
If we reach here , then no subarray
Driver program
Function to find maximum number
Function to find minimum number
Finds and prints the smallest Difference Triplet
sorting all the three arrays
To store resultant three numbers
pointers to arr1 , arr2 , arr3 respectively
Loop until one array reaches to its end Find the smallest difference .
maximum number
Find minimum and increment its index .
Comparing new difference with the previous one and updating accordingly
Print result
Driver code
returns true if there is triplet with sum equal to ' sum ' present in A [ ] . Also , prints the triplet
Fix the first element as A [ i ]
Fix the second element as A [ j ]
Now look for the third number
If we reach here , then no triplet was found
Driver program to test above function
returns true if there is triplet with sum equal to ' sum ' present in A [ ] . Also , prints the triplet
Sort the elements
Now fix the first element one by one and find the other two elements
To find the other two elements , start two index variables from two corners of the array and move them toward each other index of the first element in the remaining elements
index of the last element
A [ i ] + A [ l ] + A [ r ] > sum
If we reach here , then no triplet was found
Driver program to test above function
returns true if there is triplet with sum equal to ' sum ' present in A [ ] . Also , prints the triplet
Fix the first element as A [ i ]
Find pair in subarray A [ i + 1. . n - 1 ] with sum equal to sum - A [ i ]
If we reach here , then no triplet was found
Driver program to test above function
Prints all subarrays in arr [ 0. . n - 1 ]
Pick starting point
Pick ending point
Print subarray between current starting and ending points
Driver program
Python3 code to generate all possible subsequences . Time Complexity O ( n * 2 ^ n )
Number of subsequences is ( 2 * * n - 1 )
Run from counter 000. . 1 to 111. . 1
Check if jth bit in the counter is set If set then print jth element from arr [ ]
Driver program
Function to print product array for a given array arr [ ] of size n
Base case
Allocate memory for the product array
In this loop , temp variable contains product of elements on left side excluding arr [ i ]
Initialize temp to 1 for product on right side
In this loop , temp variable contains product of elements on right side excluding arr [ i ]
Print the constructed prod array
Driver Code
The function checks if the array elements are consecutive . If elements are consecutive , then returns true , else returns false
1 ) Get the Minimum element in array
2 ) Get the Maximum element in array
3 ) Max - Min + 1 is equal to n , then only check all elements
Create a temp array to hold visited flag of all elements . Note that , calloc is used here so that all values are initialized as false
If we see an element again , then return false
If visited first time , then mark the element as visited
If all elements occur once , then return true
if ( Max - Min + 1 != n )
Driver Code
Helper functions to get minimum and maximum in an array The function checks if the array elements are consecutive . If elements are consecutive , then returns true , else returns false
1 ) Get the minimum element in array
2 ) Get the maximum element in array
3 ) max - min + 1 is equal to n then only check all elements
if the value at index j is negative then there is repetition
If we do not see a negative value then all elements are distinct
if ( max - min + 1 != n )
UTILITY FUNCTIONS
Driver Code
Python program to find all those elements of arr1 [ ] that are not present in arr2 [ ]
If current element in arr2 [ ] is greater , then arr1 [ i ] can 't be  present in arr2[j..m-1]
Skipping smaller elements of arr2 [ ]
Equal elements found ( skipping in both arrays )
Printing remaining elements of arr1 [ ]
Driver code
function for calculating min operations
max elements of array
iterate for all elements
check if element can make equal to max or not if not then return - 1
else update res fo required operations
return result
driver program
python code for above approach .
assigning the length - 1 value to each of three variables
calculating min difference from last index of lists
checking condition
calculating max term from list
Moving to smaller value in the array with maximum out of three .
driver code
Linearly search x in arr [ ] . If x is present then return the index , otherwise return - 1
Driver Code
Returns index of x in arr if present , else - 1
If element is present at the middle itself
If element is smaller than mid , then it can only be present in left subarray
Else the element can only be present in right subarray
Element is not present in the array
Driver Code
It returns location of x in given array arr if present , else returns - 1
Check if x is present at mid
If x is greater , ignore left half
If x is smaller , ignore right half
If we reach here , then the element was not present
Driver Code
Python3 code to implement Jump Search
Finding block size to be jumped
Finding the block where element is present ( if it is present )
Doing a linear search for x in block beginning with prev .
If we reached next block or end of array , element is not present .
If element is found
Driver code to test function
Find the index of ' x ' using Jump Search
Print the index where ' x ' is located
If x is present in arr [ 0. . n - 1 ] , then returns index of it , else returns - 1.
Since array is sorted , an element present in array must be in range defined by corner
Probing the position with keeping uniform distribution in mind .
Condition of target found
If x is larger , x is in right subarray
If x is smaller , x is in left subarray
Array of items in which search will be conducted
Element to be searched
If element was found
Returns the position of first occurrence of x in array
IF x is present at first location itself
Find range for binary search j by repeated doubling
Call binary search for the found range
A recurssive binary search function returns location of x in given array arr [ l . . r ] is present , otherwise - 1
If the element is present at the middle itself
If the element is smaller than mid , then it can only be present in the left subarray
Else he element can only be present in the right
We reach here if the element is not present
Driver Code
A function to do counting sort of arr [ ] according to the digit represented by exp .
The output array elements that will have sorted arr
initialize count array as 0
Store count of occurrences in count [ ]
Change count [ i ] so that count [ i ] now contains actual position of this digit in output array
Build the output array
Copying the output array to arr [ ] , so that arr now contains sorted numbers
Method to do Radix Sort
Find the maximum number to know number of digits
Do counting sort for every digit . Note that instead of passing digit number , exp is passed . exp is 10 ^ i where i is current digit number
Driver code
Function Call
To find next gap from current
Shrink gap by Shrink factor
Function to sort arr [ ] using Comb Sort
Initialize gap
Initialize swapped as true to make sure that loop runs
Keep running while gap is more than 1 and last iteration caused a swap
Find next gap
Initialize swapped as false so that we can check if swap happened or not
Compare all elements with current gap
Driver code to test above
Function sort the array using Cycle sort
count number of memory writes
Loop through the array to find cycles to rotate .
initialize item as starting point
Find where to put the item .
If the item is already there , this is not a cycle .
Otherwise , put the item there or right after any duplicates .
put the item to it 's right position
Rotate the rest of the cycle .
Find where to put the item .
Put the item there or right after any duplicates .
put the item to it 's right position
driver code
Function takes last element as pivot , places the pivot element at its correct position in sorted array , and places all smaller ( smaller than pivot ) to left of pivot and all greater elements to right of pivot
The main function that implements QuickSort arr [ ] -- > Array to be sorted , low -- > Starting index , high -- > Ending index Function to do Quick sort
pi is partitioning index , arr [ p ] is now at right place
Driver Code
This function is same in both iterative and recursive
Function to do Quick sort arr [ ] -- > Array to be sorted , l -- > Starting index , h -- > Ending index
Create an auxiliary stack
initialize top of stack
push initial values of l and h to stack
Keep popping from stack while is not empty
Pop h and l
Set pivot element at its correct position in sorted array
If there are elements on left side of pivot , then push left side to stack
If there are elements on right side of pivot , then push right side to stack
Driver code to test above
Function calling
A function to do counting sort of arr [ ] according to the digit represented by exp .
output array
Store count of occurrences in count [ ]
Change count [ i ] so that count [ i ] now contains actual position of this digit in output [ ]
Build the output array
Copy the output array to arr [ ] , so that arr [ ] now contains sorted numbers according to current digit
The main function to that sorts arr [ ] of size n using Radix Sort
Do counting sort for first digit in base n . Note that instead of passing digit number , exp ( n ^ 0 = 1 ) is passed .
Do counting sort for second digit in base n . Note that instead of passing digit number , exp ( n ^ 1 = n ) is passed .
Driver Code
Since array size is 7 , elements should be from 0 to 48
A recursive binary search based function . It returns index of x in given array arr [ l . . r ] is present , otherwise - 1
If the element is present at one of the middle 3 positions
If element is smaller than mid , then it can only be present in left subarray
Else the element can only be present in right subarray
We reach here when element is not present in array
Driver Code
Python3 program to find the pair from two sorted arays such that the sum of pair is closest to a given number x
ar1 [ 0. . m - 1 ] and ar2 [ 0. . n - 1 ] are two given sorted arrays and x is given number . This function prints the pair from both arrays such that the sum of the pair is closest to x .
Initialize the diff between pair sum and x .
Start from left side of ar1 [ ] and right side of ar2 [ ]
If this pair is closer to x than the previously found closest , then update res_l , res_r and diff
If sum of this pair is more than x , move to smaller side
move to the greater side
Print the result
Driver program to test above functions
Python3 program to find the pair with sum closest to a given no . A sufficiently large value greater than any element in the input array
Prints the pair with sum closest to x
To store indexes of result pair
Initialize left and right indexes and difference between pair sum and x
While there are elements between l and r
Check if this pair is closer than the closest pair so far
If this pair has more sum , move to smaller values .
Move to larger values
Driver code to test above
Returns counts of 1 's in arr[low..high]. The array is assumed to be sorted in non-increasing order
get the middle index
check if the element at middle index is last 1
If element is not last 1 , recur for right side
else recur for left side
Driver Code
Function that returns the minimum swaps
Index of leftmost largest element
Index of rightmost smallest element
Driver code
Prints a maximum set of activities that can be done by a single person , one at a time n -- > Total number of activities s [ ] -- > An array that contains start time of all activities f [ ] -- > An array that contains finish time of all activities
The first activity is always selected
Consider rest of the activities
If this activity has start time greater than or equal to the finish time of previously selected activity , then select it
Driver program to test above function
Returns count of the maximum set of activities that can be done by a single person , one at a time .
Sort jobs according to finish time
The first activity always gets selected
Consider rest of the activities
If this activity has start time greater than or equal to the finish time of previously selected activity , then select it
Driver code
global variable to store the maximum
To make use of recursive calls , this function must return two things : 1 ) Length of LIS ending with element arr [ n - 1 ] . We use max_ending_here for this purpose 2 ) Overall maximum as the LIS may end with an element before arr [ n - 1 ] max_ref is used this purpose . The value of LIS of full array of size n is stored in * max_ref which is our final result
Base Case
maxEndingHere is the length of LIS ending with arr [ n - 1 ]
Recursively get all LIS ending with arr [ 0 ] , arr [ 1 ] . . arr [ n - 2 ] IF arr [ n - 1 ] is maller than arr [ n - 1 ] , and max ending with arr [ n - 1 ] needs to be updated , then update it
Compare maxEndingHere with overall maximum . And update the overall maximum if needed
Return length of LIS ending with arr [ n - 1 ]
The wrapper function for _lis ( )
maximum variable holds the result
The function _lis ( ) stores its result in maximum
returns max
Driver program to test the above function
lis returns length of the longest increasing subsequence in arr of size n
Declare the list ( array ) for LIS and initialize LIS values for all indexes
Compute optimized LIS values in bottom up manner
Initialize maximum to 0 to get the maximum of all LIS
Pick maximum of all LIS values
Driver program to test above function
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]
Driver program to test the above function
Dynamic Programming implementation of LCS problem
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]
Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion Note : L [ i ] [ j ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]
L [ m ] [ n ] contains the length of LCS of X [ 0. . n - 1 ] & Y [ 0. . m - 1 ]
end of function lcs Driver program to test the above function
A Space efficient Dynamic Programming based Python3 program to find minimum number operations to convert str1 to str2
Create a DP array to memoize result of previous computations
Base condition when second String is empty then we remove all characters
Start filling the DP This loop run for every character in second String
This loop compares the char from second String with first String characters
If first String is empty then we have to perform add character operation to get second String
If character from both String is same then we do not perform any operation . here i % 2 is for bound the row number .
If character from both String is not same then we take the minimum from three specified operation
After complete fill the DP array if the len2 is even then we end up in the 0 th row else we end up in the 1 th row so we take len2 % 2 to get row
Driver code
If any string is empty , return the remaining characters of other string
To check if the recursive tree for given n & m has already been executed
If characters are equal , execute recursive function for n - 1 , m - 1
If characters are nt equal , we need to find the minimum cost out of all 3 operations .
temp variables
Driver code
A Naive recursive implementation of MCP ( Minimum Cost Path ) problem
A utility function that returns minimum of 3 integers
Returns cost of minimum cost path from ( 0 , 0 ) to ( m , n ) in mat [ R ] [ C ]
Driver program to test above functions
Dynamic Programming Python implementation of Min Cost Path problem
Instead of following line , we can use int tc [ m + 1 ] [ n + 1 ] or dynamically allocate memoery to save space . The following line is used to keep te program simple and make it working on all compilers .
Initialize first column of total cost ( tc ) array
Initialize first row of tc array
Construct rest of the tc array
Driver program to test above functions
Python3 program for the above approach
For 1 st column
For 1 st row
For rest of the 2d matrix
Returning the value in last cell
Driver code
Returns the maximum value that can be put in a knapsack of capacity W
Base Case
If weight of the nth item is more than Knapsack of capacity W , then this item cannot be included in the optimal solution
return the maximum of two cases : ( 1 ) nth item included ( 2 ) not included
Driver Code
Returns the maximum value that can be put in a knapsack of capacity W
Build table K [ ] [ ] in bottom up manner
Driver code
Function to get minimum number of trials needed in worst case with n eggs and k floors
If there are no floors , then no trials needed . OR if there is one floor , one trial needed .
We need k trials for one egg and k floors
Consider all droppings from 1 st floor to kth floor and return the minimum of these values plus 1.
Driver Code
A Dynamic Programming based Python Program for the Egg Dropping Puzzle
Function to get minimum number of trials needed in worst case with n eggs and k floors
A 2D table where entry eggFloor [ i ] [ j ] will represent minimum number of trials needed for i eggs and j floors .
We need one trial for one floor and0 trials for 0 floors
We always need j trials for one egg and j floors .
Fill rest of the entries in table using optimal substructure property
eggFloor [ n ] [ k ] holds the result
Driver program to test to pront printDups
A utility function to get max of two integers
Returns the length of the longest palindromic subsequence in seq
Base Case 1 : If there is only 1 character
Base Case 2 : If there are only 2 characters and both are same
If the first and last characters match
If the first and last characters do not match
Driver Code
Returns the length of the longest palindromic subsequence in seq
Create a table to store results of subproblems
Strings of length 1 are palindrome of length 1
Build the table . Note that the lower diagonal values of table are useless and not filled in the process . The values are filled in a manner similar to Matrix Chain Multiplication DP solution ( See https : www . geeksforgeeks . org / dynamic - programming - set - 8 - matrix - chain - multiplication / cl is length of substring
Driver program to test above functions
lbs ( ) returns the length of the Longest Bitonic Subsequence in arr [ ] of size n . The function mainly creates two temporary arrays lis [ ] and lds [ ] and returns the maximum lis [ i ] + lds [ i ] - 1. lis [ i ] == > Longest Increasing subsequence ending with arr [ i ] lds [ i ] == > Longest decreasing subsequence starting with arr [ i ]
allocate memory for LIS [ ] and initialize LIS values as 1 for all indexes
Compute LIS values from left to right
allocate memory for LDS and initialize LDS values for all indexes
Compute LDS values from right to left
Return the maximum value of ( lis [ i ] + lds [ i ] - 1 )
Driver program to test the above function
Python code for implementation of Naive Recursive approach
Driver code
minCut function
Driver code
Using memoizatoin to solve the partition problem . Function to check if input string is pallindrome or not
Using two pointer technique to check pallindrome
Function to find keys for the Hashmap
Returns the minimum number of cuts needed to partition a string such that every part is a palindrome
Key for the Input String
If the no of partitions for string " ij " is already calculated then return the calculated value using the Hashmap
Every String of length 1 is a pallindrome
Make a cut at every possible location starting from i to j
If left cut is found already
If right cut is found already
Recursively calculating for left and right strings
Taking minimum of all k possible cuts
Return the min cut value for complete string .
Driver code
A Dynamic programming solution for Word Wrap Problem
A utility function to print the solution
l [ ] represents lengths of different words in input sequence . For example , l [ ] = { 3 , 2 , 2 , 5 } is for a sentence like " aaa ▁ bb ▁ cc ▁ ddddd " . n is size of l [ ] and M is line width ( maximum no . of characters that can fit in a line )
For simplicity , 1 extra space is used in all below arrays extras [ i ] [ j ] will have number of extra spaces if words from i to j are put in a single line
lc [ i ] [ j ] will have cost of a line which has words from i to j
c [ i ] will have total cost of optimal arrangement of words from 1 to i
p [ ] is used to print the solution .
calculate extra spaces in a single line . The value extra [ i ] [ j ] indicates extra spaces if words from word number i to j are placed in a single line
Calculate line cost corresponding to the above calculated extra spaces . The value lc [ i ] [ j ] indicates cost of putting words from word number i to j in a single line
Calculate minimum cost and find minimum cost arrangement . The value c [ j ] indicates optimized cost to arrange words from word number 1 to j .
Driver Code
This function divides a by greatest divisible power of b
Function to check if a number is ugly or not
Function to get the nth ugly number
ugly number count
Check for all integers untill ugly count becomes n
Driver code
Function to pra subString str [ low . . high ]
This function prints the longest palindrome subString It also returns the length of the longest palindrome
Get length of input String
All subStrings of length 1 are palindromes
Nested loop to mark start and end index
Check palindrome
Palindrome
Return length of LPS
Driver Code
Python program
A utility function to print a substring str [ low . . high ]
This function prints the longest palindrome substring of st [ ] . It also returns the length of the longest palindrome
get length of input string
table [ i ] [ j ] will be false if substring str [ i . . j ] is not palindrome . Else table [ i ] [ j ] will be true
All substrings of length 1 are palindromes
check for sub - string of length 2.
Check for lengths greater than 2. k is length of substring
Fix the starting index
Get the ending index of substring from starting index i and length k
checking for sub - string from ith index to jth index iff st [ i + 1 ] to st [ ( j - 1 ) ] is a palindrome
return length of LPS
Driver program to test above functions
A utility function to get sum of array elements freq [ i ] to freq [ j ]
A recursive function to calculate cost of optimal binary search tree
Base cases no elements in this subarray
one element in this subarray
Get sum of freq [ i ] , freq [ i + 1 ] , ... freq [ j ]
Initialize minimum value
One by one consider all elements as root and recursively find cost of the BST , compare the cost with min and update min if needed
Return minimum value
The main function that calculates minimum cost of a Binary Search Tree . It mainly uses optCost ( ) to find the optimal cost .
Here array keys [ ] is assumed to be sorted in increasing order . If keys [ ] is not sorted , then add code to sort keys , and rearrange freq [ ] accordingly .
Driver Code
Dynamic Programming code for Optimal Binary Search Tree Problem
A utility function to get sum of array elements freq [ i ] to freq [ j ]
A Dynamic Programming based function that calculates minimum cost of a Binary Search Tree .
Create an auxiliary 2D matrix to store results of subproblems
For a single key , cost is equal to frequency of the key
Now we need to consider chains of length 2 , 3 , ... . L is chain length .
i is row number in cost
Get column number j from row number i and chain length L
Try making all keys in interval keys [ i . . j ] as root
c = cost when keys [ r ] becomes root of this subtree
Driver Code
A utility function to find max of two integers
A binary tree node has data , pointer to left child and a pointer to right child
The function returns size of the largest independent set in a given binary tree
Calculate size excluding the current node
Calculate size including the current node
Return the maximum of two sizes
A utility function to create a node
Let us construct the tree given in the above diagram
Returns count of all possible parenthesizations that lead to result true for a boolean expression with symbols like true and false and operators like & , | and ^ filled between symbols
Fill diaginal entries first All diagonal entries in T [ i ] [ i ] are 1 if symbol [ i ] is T ( true ) . Similarly , all F [ i ] [ i ] entries are 1 if symbol [ i ] is F ( False )
Now fill T [ i ] [ i + 1 ] , T [ i ] [ i + 2 ] , T [ i ] [ i + 3 ] ... in order And F [ i ] [ i + 1 ] , F [ i ] [ i + 2 ] , F [ i ] [ i + 3 ] ... in order
Find place of parenthesization using current value of gap
Store Total [ i ] [ k ] and Total [ k + 1 ] [ j ]
Follow the recursive formulas according to the current operator
Driver Code
There are 4 ways ( ( T T ) & ( F ^ T ) ) , ( T | ( T & ( F ^ T ) ) ) , ( ( ( T T ) & F ) ^ T ) and ( T | ( ( T & F ) ^ T ) )
CountWays function
Base Condition
Count number of True in left Partition
Count number of False in left Partition
Count number of True in right Partition
Count number of False in right Partition
Evaluate AND operation
Evaluate OR operation
Evaluate XOR operation
Driver code
We obtain the string T | T & F ^ T
There are 4 ways ( ( T T ) & ( F ^ T ) ) , ( T | ( T & ( F ^ T ) ) ) , ( ( ( T T ) & F ) ^ T ) and ( T | ( ( T & F ) ^ T ) )
Return count of all possible numbers of length n in a given numeric keyboard
left , up , right , down move from current location
taking n + 1 for simplicity - count [ i ] [ j ] will store number count starting with digit i and length j count [ 10 ] [ n + 1 ]
count numbers starting with digit i and of lengths 0 and 1
Bottom up - Get number count of length 2 , 3 , 4 , ... , n
Loop on keypad row
Loop on keypad column
Process for 0 to 9 digits
Here we are counting the numbers starting with digit keypad [ i ] [ j ] and of length k keypad [ i ] [ j ] will become 1 st digit , and we need to look for ( k - 1 ) more digits
move left , up , right , down from current location and if new location is valid , then get number count of length ( k - 1 ) from that new digit and add in count we found so far
Get count of all possible numbers of length " n " starting with digit 0 , 1 , 2 , ... , 9
Driver code
Return count of all possible numbers of length n in a given numeric keyboard
odd [ i ] , even [ i ] arrays represent count of numbers starting with digit i for any length j
for j = 1
Bottom Up calculation from j = 2 to n
Here we are explicitly writing lines for each number 0 to 9. But it can always be written as DFS on 4 X3 grid using row , column array valid moves
Get count of all possible numbers of length " n " starting with digit 0 , 1 , 2 , ... , 9
Driver program to test above function
Recursive function to count ' n ' digit numbers with sum of digits as ' sum ' This function considers leading 0 's also as digits, that is why not directly called
Base case
Initialize answer
Traverse through every digit and count numbers beginning with it using recursion
This is mainly a wrapper over countRec . It explicitly handles leading digit and calls countRec ( ) for remaining digits .
Initialize final answer
Traverse through every digit from 1 to 9 and count numbers beginning with it
Driver program
A lookup table used for memoization
Memoization based implementation of recursive function
Base case
If this subproblem is already evaluated , return the evaluated value
Initialize answer
Traverse through every digit and recursively count numbers beginning with it
This is mainly a wrapper over countRec . It explicitly handles leading digit and calls countRec ( ) for remaining n .
Initialize final answer
Traverse through every digit from 1 to 9 and count numbers beginning with it
Driver Code
Python3 program to Count of n digit numbers whose sum of digits equals to given sum
in case n = 2 start is 10 and end is ( 100 - 1 ) = 99
Driver Code
Python3 program to count non - decreasing number with n digits
dp [ i ] [ j ] contains total count of non decreasing numbers ending with digit i and of length j
Fill table for non decreasing numbers of length 1. Base cases 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9
Fill the table in bottom - up manner
Compute total numbers of non decreasing numbers of length 'len  
sum of all numbers of length of len - 1 in which last digit x is <= 'digit  
There total nondecreasing numbers of length n won 't be dp[0][n] +  dp[1][n] ..+ dp[9][n]
Driver Code
python program to count non - decreasing numner with n digits
Compute value of N * ( N + 1 ) / 2 * ( N + 2 ) / 3 * ... . * ( N + n - 1 ) / n
Driver program
Returns count of minimum squares that sum to n
base cases
getMinSquares rest of the table using recursive formula Maximum squares required is n ( 1 * 1 + 1 * 1 + . . )
Go through all smaller numbers to recursively find minimum
Driver code
A dynamic programming based Python program to find minimum number of squares whose sum is equal to a given number
Returns count of minimum squares that sum to n
getMinSquares table for base case entries
getMinSquares rest of the table using recursive formula
max value is i as i can always be represented as 1 * 1 + 1 * 1 + ...
Go through all smaller numbers to recursively find minimum
Store result
Driver code
Python3 program for the above approach
Function to count minimum squares that sum to n
Creating visited vector of size n + 1
Queue of pair to store node and number of steps
Initially ans variable is initialized with inf
Push starting node with 0 0 indicate current number of step to reach n
Mark starting node visited
If node reaches its destination 0 update it with answer
Loop for all possible path from 1 to i * i <= current node ( p . first )
If we are standing at some node then next node it can jump to will be current node - ( some square less than or equal n )
Check if it is valid and not visited yet
Mark visited
Push it it Queue
Return ans to calling function
Driver code
A Naive recursive python program to find minimum of coins to make a given change V
m is size of coins array ( number of different coins )
base case
Initialize result
Try every coin that has smaller value than V
Check for INT_MAX to avoid overflow and see if result can minimized
Driver program to test above function
A Dynamic Programming based Python3 program to find minimum of coins to make a given change V
m is size of coins array ( number ofdifferent coins )
table [ i ] will be storing the minimum number of coins required for i value . So table [ V ] will have result
Base case ( If given value V is 0 )
Initialize all table values as Infinite
Compute minimum coins required for all values from 1 to V
Go through all coins smaller than i
Driver Code
A Naive recursive python program to find length of the shortest supersequence
Driver Code
Returns length of the shortest supersequence of X and Y
Fill table in bottom up manner
Below steps follow above recurrence
Driver Code
Returns sum of all digits in numbers from 1 to n
initialize result
One by one compute sum of digits in every number from 1 to n
A utility function to compute sum of digits in a given number x
Driver Program
PYTHON 3 program to compute sum of digits in numbers from 1 to n
Function to computer sum of digits in numbers from 1 to n . Comments use example of 328 to explain the code
base case : if n < 10 return sum of first n natural numbers
d = number of digits minus one in n . For 328 , d is 2
computing sum of digits from 1 to 10 ^ d - 1 , d = 1 a [ 0 ] = 0 ; d = 2 a [ 1 ] = sum of digit from 1 to 9 = 45 d = 3 a [ 2 ] = sum of digit from 1 to 99 = a [ 1 ] * 10 + 45 * 10 ^ 1 = 900 d = 4 a [ 3 ] = sum of digit from 1 to 999 = a [ 2 ] * 10 + 45 * 10 ^ 2 = 13500
computing 10 ^ d
Most significant digit ( msd ) of n , For 328 , msd is 3 which can be obtained using 328 / 100
EXPLANATION FOR FIRST and SECOND TERMS IN BELOW LINE OF CODE First two terms compute sum of digits from 1 to 299 ( sum of digits in range 1 - 99 stored in a [ d ] ) + ( sum of digits in range 100 - 199 , can be calculated as 1 * 100 + a [ d ] . ( sum of digits in range 200 - 299 , can be calculated as 2 * 100 + a [ d ] The above sum can be written as 3 * a [ d ] + ( 1 + 2 ) * 100 EXPLANATION FOR THIRD AND FOURTH TERMS IN BELOW LINE OF CODE The last two terms compute sum of digits in number from 300 to 328. The third term adds 3 * 29 to sum as digit 3 occurs in all numbers from 300 to 328. The fourth term recursively calls for 28
Driver Program
Python program to compute sum of digits in numbers from 1 to n
Function to computer sum of digits in numbers from 1 to n
Driver code
Returns count of possible ways for N sections
Base case
2 for one side and 4 for two sides
countB is count of ways with a building at the end countS is count of ways with a space at the end prev_countB and prev_countS are previous values of countB and countS respectively . Initialize countB and countS for one side
Use the above recursive formula for calculating countB and countS using previous values
Result for one side is sum of ways ending with building and ending with space
Result for 2 sides is square of result for one side
Driver program
Returns number of ways to reach score n .
table [ i ] will store count of solutions for value i . Initialize all table values as 0.
Base case ( If given value is 0 )
One by one consider given 3 moves and update the table [ ] values after the index greater than or equal to the value of the picked move .
Driver Program
Python3 program for Naive Pattern Searching algorithm
A loop to slide pat [ ] one by one
For current index i , check for pattern match
if pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]
Driver Code
d is the number of characters in the input alphabet
pat -> pattern txt -> text q -> A prime number
hash value for pattern
hash value for txt
The value of h would be " pow ( d , ▁ M - 1 ) % q "
Calculate the hash value of pattern and first window of text
Slide the pattern over text one by one
Check the hash values of current window of text and pattern if the hash values match then only check for characters on by one
Check for characters one by one
if p == t and pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]
Calculate hash value for next window of text : Remove leading digit , add trailing digit
We might get negative values of t , converting it to positive
Driver Code
A prime number
Function Call
Python program for A modified Naive Pattern Searching algorithm that is optimized for the cases when all characters of pattern are different
For current index i , check for pattern match
if pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]
slide the pattern by j
Driver program to test the above function
Python program for Finite Automata Pattern searching Algorithm
If the character c is same as next character in pattern , then simply increment state
ns stores the result which is next state ns finally contains the longest prefix which is also suffix in " pat [ 0 . . state - 1 ] c " Start from the largest possible value and stop when you find a prefix which is also suffix
This function builds the TF table which represents Finite Automata for a given pattern
Prints all occurrences of pat in txt
Process txt over FA .
Driver program to test above function
Python3 Program for Bad Character Heuristic of Boyer Moore String Matching Algorithm
The preprocessing function for Boyer Moore 's bad character heuristic  
Initialize all occurrence as - 1
Fill the actual value of last occurrence
A pattern searching function that uses Bad Character Heuristic of Boyer Moore Algorithm
create the bad character list by calling the preprocessing function badCharHeuristic ( ) for given pattern
s is shift of the pattern with respect to text
there are n - m + 1 potential allignments
Keep reducing index j of pattern while characters of pattern and text are matching at this shift s
If the pattern is present at current shift , then index j will become - 1 after the above loop
Shift the pattern so that the next character in text aligns with the last occurrence of it in pattern . The condition s + m < n is necessary for the case when pattern occurs at the end of text
Shift the pattern so that the bad character in text aligns with the last occurrence of it in pattern . The max function is used to make sure that we get a positive shift . We may get a negative shift if the last occurrence of bad character in pattern is on the right side of the current character .
Driver program to test above function
Python program to search all anagrams of a pattern in a text
This function returns true if contents of arr1 [ ] and arr2 [ ] are same , otherwise false .
This function search for all permutations of pat [ ] in txt [ ]
countP [ ] : Store count of all characters of pattern countTW [ ] : Store count of current window of text
Traverse through remaining characters of pattern
Compare counts of current window of text with counts of pattern [ ]
Add current character to current window
Remove the first character of previous window
Check for the last window in text
Driver program to test above function
Python program to implement Manacher 's Algorithm
Position count
LPS Length Array
centerPosition
centerRightPosition
currentRightPosition
currentLeftPosition
Uncomment it to print LPS Length array printf ( " % d ▁ % d ▁ " , L [ 0 ] , L [ 1 ] ) ;
get currentLeftPosition iMirror for currentRightPosition i
If currentRightPosition i is within centerRightPosition R
Attempt to expand palindrome centered at currentRightPosition i Here for odd positions , we compare characters and if match then increment LPS Length by ONE If even position , we just increment LPS by ONE without any character comparison
Track maxLPSLength
If palindrome centered at currentRightPosition i expand beyond centerRightPosition R , adjust centerPosition C based on expanded palindrome .
Uncomment it to print LPS Length array printf ( " % d ▁ " , L [ i ] ) ;
Driver program
N is the size of the 2D matrix N * N
A utility function to print grid
Checks whether it will be legal to assign num to the given row , col
Check if we find the same num in the similar row , we return false
Check if we find the same num in the similar column , we return false
Check if we find the same num in the particular 3 * 3 matrix , we return false
Takes a partially filled - in grid and attempts to assign values to all unassigned locations in such a way to meet the requirements for Sudoku solution ( non - duplication across rows , columns , and boxes )
Check if we have reached the 8 th row and 9 th column ( 0 indexed matrix ) , we are returning true to avoid further backtracking
Check if column value becomes 9 , we move to next row and column start from 0
Check if the current position of the grid already contains value > 0 , we iterate for next column
Check if it is safe to place the num ( 1 - 9 ) in the given row , col -> we move to next column
Assigning the num in the current ( row , col ) position of the grid and assuming our assined num in the position is correct
Checking for next possibility with next column
Removing the assigned num , since our assumption was wrong , and we go for next assumption with diff num value
Driver Code 0 means unassigned cells
This function returns median of ar1 [ ] and ar2 [ ] . Assumptions in this function : Both ar1 [ ] and ar2 [ ] are sorted arrays Both have n elements
Since there are 2 n elements , median will be average of elements at index n - 1 and n in the array obtained after merging ar1 and ar2
Below is to handle case where all elements of ar1 [ ] are smaller than smallest ( or first ) element of ar2 [ ]
Below is to handle case where all elements of ar2 [ ] are smaller than smallest ( or first ) element of ar1 [ ]
equals sign because if two arrays have some common elements
Store the prev median
Store the prev median
Driver code to test above function
while loop to swap all smaller numbers to arr1
Driver program
A divide and conquer program in Python3 to find the smallest distance from a given set of points .
A class to represent a Point in 2D plane
A utility function to find the distance between two points
A Brute Force method to return the smallest distance between two points in P [ ] of size n
A utility function to find the distance beween the closest points of strip of given size . All points in strip [ ] are sorted accordint to y coordinate . They all have an upper bound on minimum distance as d . Note that this method seems to be a O ( n ^ 2 ) method , but it 's a O(n) method as the inner loop runs at most 6 times
Initialize the minimum distance as d
Pick all points one by one and try the next points till the difference between y coordinates is smaller than d . This is a proven fact that this loop runs at most 6 times
A recursive function to find the smallest distance . The array P contains all points sorted according to x coordinate
If there are 2 or 3 points , then use brute force
Find the middle point
keep a copy of left and right branch
Consider the vertical line passing through the middle point calculate the smallest distance dl on left of middle point and dr on right side
Find the smaller of two distances
Build an array strip [ ] that contains points close ( closer than d ) to the line passing through the middle point
< -- REQUIRED
Find the self . closest points in strip . Return the minimum of d and self . closest distance is strip [ ]
The main function that finds the smallest distance . This method mainly uses closestUtil ( )
Use recursive function closestUtil ( ) to find the smallest distance
Driver code
A Python3 program to find if 2 given line segments intersect or not
Given three colinear points p , q , r , the function checks if point q lies on line segment ' pr '
to find the orientation of an ordered triplet ( p , q , r ) function returns the following values : 0 : Colinear points 1 : Clockwise points 2 : Counterclockwise See https : www . geeksforgeeks . org / orientation - 3 - ordered - points / amp / for details of below formula .
Counterclockwise orientation
The main function that returns true if the line segment ' p1q1' and ' p2q2' intersect .
Find the 4 orientations required for the general and special cases
General case
Special Cases p1 , q1 and p2 are colinear and p2 lies on segment p1q1
p1 , q1 and q2 are colinear and q2 lies on segment p1q1
p2 , q2 and p1 are colinear and p1 lies on segment p2q2
p2 , q2 and q1 are colinear and q1 lies on segment p2q2
If none of the cases
Driver program to test above functions :
A utility function to calculate area of triangle formed by ( x1 , y1 ) , ( x2 , y2 ) and ( x3 , y3 )
A function to check whether point P ( x , y ) lies inside the triangle formed by A ( x1 , y1 ) , B ( x2 , y2 ) and C ( x3 , y3 )
Calculate area of triangle ABC
Calculate area of triangle PBC
Calculate area of triangle PAC
Calculate area of triangle PAB
Check if sum of A1 , A2 and A3 is same as A
Let us check whether the point P ( 10 , 15 ) lies inside the triangle formed by A ( 0 , 0 ) , B ( 20 , 0 ) and C ( 10 , 30 )
Returns 1 if n is a lucky number otherwise returns 0
Function attribute will act as static variable just for readability , can be removed and used n instead
Calculate next position of input number
Driver Code Acts as static variable
Works only if a >= 0 and b >= 0
driver code
A recursive function to get x * y *
driver program to test above functions *
Returns count of numbers which are in range from 1 to n and don 't contain 3 as a digit
Base Cases ( n is not negative )
Calculate 10 ^ ( d - 1 ) ( 10 raise to the power d - 1 ) where d is number of digits in n . po will be 100 for n = 578
Find the MSD ( msd is 5 for 578 )
For 578 , total will be 4 * count ( 10 ^ 2 - 1 ) + 4 + ccount ( 78 )
For 35 total will be equal to count ( 29 )
Driver Program
Function to return the maximum number
array to store the number of distinct primes
true if index ' i ' is a prime
initializing the number of factors to 0 and
Used in Sieve
condition works only when ' i ' is prime , hence for factors of all prime number , the prime status is changed to false
Number is prime
number of factor of a prime number is 1
incrementing factorCount all the factors of i
and changing prime status to false
Initialize the max and num
Gets the maximum number
Gets the maximum number
Driver code
Calling function
A utility function to find factorial of n
A utility function to count smaller characters on right of arr [ low ]
A function to find rank of a string in all permutations of characters
count number of chars smaller than str [ i ] fron str [ i + 1 ] to str [ len - 1 ]
Driver program to test above function
A O ( n ) solution for finding rank of string
all elements of count [ ] are initialized with 0
A utility function to find factorial of n
Construct a count array where value at every index contains count of smaller characters in whole string
Removes a character ch from count [ ] array constructed by populateAndIncreaseCount ( )
A function to find rank of a string in all permutations of characters
Populate the count array such that count [ i ] contains count of characters which are present in str and are smaller than i
count number of chars smaller than str [ i ] fron str [ i + 1 ] to str [ len - 1 ]
Reduce count of characters greater than str [ i ]
Driver code
An optimized version that uses reverse instead of sort for finding the next permutation A utility function to reverse a string str [ l . . h ]
Print all permutations of str in sorted order
Get size of string
Sort the string in increasing order
Print permutations one by one
Print this permutation
Find the rightmost character which is smaller than its next character . Let us call it ' first ▁ char '
If there is no such character , all are sorted in decreasing order , means we just printed the last permutation and we are done .
Find the ceil of ' first ▁ char ' in right of first character . Ceil of a character is the smallest character greater than it
Swap first and second characters
Reverse the string on right of 'first char  
Function to calculate value using sum of first n terms of Taylor Series
initialize sum of series
Driver program to test above function
Python3 program to generate random numbers according to given frequency distribution
Utility function to find ceiling of r in arr [ l . . h ]
Same as mid = ( l + h ) / 2
The main function that returns a random number from arr [ ] according to distribution array defined by freq [ ] . n is size of arrays .
Create and fill prefix array
prefix [ n - 1 ] is sum of all frequencies . Generate a random number with value from 1 to this sum
Find index of ceiling of r in prefix arrat
Driver code
Let us generate 10 random numbers accroding to given distribution
python program to check if x is a perfect square
A utility function that returns true if x is perfect square
Returns true if n is a Fibinacci Number , else false
n is Fibinacci if one of 5 * n * n + 4 or 5 * n * n - 4 or both is a perferct square
A utility function to test above functions
Function to return trailing 0 s in factorial of n
Initialize result
Keep dividing n by 5 & update Count
Driver program
A recursive function to find nth catalan number
Base Case
Catalan ( n ) is the sum of catalan ( i ) * catalan ( n - i - 1 )
Driver Code
A dynamic programming based function to find nth Catalan number
Table to store results of subproblems
Initialize first two values in table
Fill entries in catalan [ ] using recursive formula
Return last entry
Driver code
Returns value of Binomial Coefficient C ( n , k )
since C ( n , k ) = C ( n , n - k )
Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- -- * 1 ]
A Binomial coefficient based function to find nth catalan number in O ( n ) time
Calculate value of 2 nCn
return 2 nCn / ( n + 1 )
Driver Code
Function to print the number
For the first number C ( 0 )
Iterate till N
Calculate the number and print it
Driver code
Function call
This function generates ' x ' with probability px / 100 , ' y ' with probability py / 100 and ' z ' with probability pz / 100 : Assumption : px + py + pz = 100 where px , py and pz lie between 0 to 100
Generate a number from 1 to 100
r is smaller than px with probability px / 100
r is greater than px and smaller than or equal to px + py with probability py / 100
r is greater than px + py and smaller than or equal to 100 with probability pz / 100
Python program to find Excel column name from a given column number
Function to print Excel column name for a given column number
To store current index in str which is result
Find remainder
if remainder is 0 , then a ' Z ' must be there in output
If remainder is non - zero
Reverse the string and print result
Driver program to test the above Function
Step 1 : Converting to number assuming 0 in number system
Step 2 : Getting rid of 0 , as 0 is not part of number system
Driver code
Function to Calculate angle b / w hour hand and minute hand
validate the input
Calculate the angles moved by hour and minute hands with reference to 12 : 00
Find the difference between two angles
Return the smaller angle of two possible angles
Driver Code
A utility function to count inversions in given array ' arr [ ] '
Value 0 is used for empty space
This function returns true if given 8 puzzle is solvable .
Count inversions in given 8 puzzle
return true if inversion count is even .
Driver code
Python3 code to approximate number of people in Birthday Paradox problem
Returns approximate number of people for a given probability
Driver Code
This function counts number of pairs ( x , y ) that satisfy the inequality x * x + y * y < n .
Driver program to test above function
This function counts number of pairs ( x , y ) that satisfy the inequality x * x + y * y < n .
Find the count of different y values for x = 0.
One by one increase value of x , and find yCount for current x . If yCount becomes 0 , then we have reached maximum possible value of x .
Add yCount ( count of different possible values of y for current x ) to result
Increment x
Update yCount for current x . Keep reducing yCount while the inequality is not satisfied .
Driver program to test above function
Python3 implementation of Bisection Method for solving equations
An example function whose solution is determined using Bisection Method . The function is x ^ 3 - x ^ 2 + 2
Prints root of func ( x ) in interval [ a , b ]
Initialize result
Find the point that touches x axis
Check if the above found point is root
Decide the side to repeat the steps
Initial values assumed
An example function whose solution is determined using Bisection Method . The function is x ^ 3 - x ^ 2 + 2
Derivative of the above function which is 3 * x ^ x - 2 * x
Function to find the root
x ( i + 1 ) = x ( i ) - f ( x ) / f '(x)
Initial values assumed
Method to find the element that occur only once
one & arr [ i ] " gives the bits that  are there in both 'ones' and new  element from arr[]. We add these  bits to 'twos' using bitwise OR
one & arr [ i ] " gives the bits that  are there in both 'ones' and new  element from arr[]. We add these  bits to 'twos' using bitwise OR
The common bits are those bits which appear third time . So these bits should not be there in both ' ones ' and ' twos ' . common_bit_mask contains all these bits as 0 , so that the bits can be removed from ' ones ' and 'twos  
Remove common bits ( the bits that appear third time ) from 'ones  
Remove common bits ( the bits that appear third time ) from 'twos  
driver code
Python3 code to find the element that occur only once
Initialize result
Iterate through every bit
Find sum of set bits at ith position in all array elements
The bits with sum not multiple of 3 , are the bits of element with single occurrence .
Driver program
Function to detect signs
Driver Code
Returns count of set bits present in all numbers from 1 to n
initialize the result
A utility function to count set bits in a number x
Driver program
Function which counts set bits from 0 to n
ans store sum of set bits from 0 to n
while n greater than equal to 2 ^ i
This k will get flipped after 2 ^ i iterations
change is iterator from 2 ^ i to 1
This will loop from 0 to n for every bit position
When change = 1 flip the bit
again set change to 2 ^ i
increment the position
Driver code
Returns position of leftmost set bit . The rightmost position is considered as 0
Given the position of previous leftmost set bit in n ( or an upper bound onleftmost position ) returns the new position of leftmost set bit in n
The main recursive function used by countSetBits ( ) def _countSetBits ( n , m ) Returns count of set bits present in all numbers from 1 to n
Get the position of leftmost set bit in n . This will be used as an upper bound for next set bit function
Use the position
Base Case : if n is 0 , then set bit count is 0
get position of next leftmost set bit
If n is of the form 2 ^ x - 1 , i . e . , if n is like 1 , 3 , 7 , 15 , 31 , . . etc , then we are done . Since positions are considered starting from 0 , 1 is added to m
update n for next recursive call
Driver code
Python program to swap bits in a given number
Move all bits of first set to rightmost side
Moce all bits of second set to rightmost side
XOR the two sets
Put the xor bits back to their original positions
XOR the ' xor ' with the original number so that the two sets are swapped
Driver code
Setting bit at p1 position to 1
Setting bit at p2 position to 1
value1 and value2 will have 0 if num at the respective positions - p1 and p2 is 0.
check if value1 and value2 are different i . e . at one position bit is set and other it is not
if bit at p1 position is set
unset bit at p1 position
set bit at p2 position
if bit at p2 position is set
set bit at p2 position
unset bit at p2 position
return final result
Driver code
Python3 program to find Smallest of three integers without comparison operators
Driver Code
Python3 implementation of above approach
Function to find minimum of x and y
Function to find minimum of 3 numbers x , y and z
Driver code
Using division operator to find minimum of three numbers
Same as " if ▁ ( y ▁ < ▁ x ) "
Driver Code
Driver code
This function returns next higher number with same number of set bits as x .
right most set bit
reset the pattern and set next higher bit left part of x will be here
nextHigherOneBit is now part [ D ] of the above explanation . isolate the pattern
right adjust pattern
correction factor
rightOnesPattern is now part [ A ] of the above explanation . integrate new pattern ( Add [ D ] and [ A ] )
Driver Code
Python3 code to add 1 one to a given number
Flip all the set bits until we find a 0
flip the rightmost 0 bit
Driver program
Python3 code to add 1 to a given number
Driver program
Python 3 program to multiply a number with 3.5
Driver program to test above functions
unsets the rightmost set bit of n and returns the result
Driver code
Function to check if x is power of 4
Driver code
Function to check if x is power of 4
Check if there is only one bit set in n
count 0 bits before set bit
If count is even then return true else false
Driver code
Python3 program to check if given number is power of 4 or not
Driver code
Python3 program to check if given number is power of 4 or not
0 is not considered as a power of 4
Driver code
Python3 program to check if given number is power of 4 or not
Driver code
Function to find minimum of x and y
Function to find maximum of x and y
Driver program to test above functions
Python3 implementation of the approach
Function to find minimum of x and y
Function to find maximum of x and y
Driver code
absbit32 function
max function
min function
Driver code
This function sets the values of * x and * y to non - repeating elements in an array arr [ ] of size n
Xor all the elements of the array all the elements occuring twice will cancel out each other remaining two unnique numbers will be xored
Bitwise & the sum with it ' s ▁ 2' s Complement Bitwise & will give us the sum containing only the rightmost set bit
sum1 and sum2 will contains 2 unique elements elements initialized with 0 box number xored with 0 is number itself
Traversing the array again
Bitwise & the arr [ i ] with the sum Two possibilities either result == 0 or result > 0
If result > 0 then arr [ i ] xored with the sum1
If result == 0 then arr [ i ] xored with sum2
Print the the two unique numbers
Driver Code
function to find the element occurring odd number of times
driver code
Function calling
function to find the element occurring odd number of times
Putting all elements into the HashMap
Iterate through HashMap to check an element occurring odd number of times and return it
Driver code
Function that count set bits
Function that return count of flipped number
Return count of set bits in a XOR b
Driver code
Python Code for Position of rightmost set bit
driver code
function to find the rightmost set bit
Position variable initialize with 1 m variable is used to check the set bit
left shift
Driver Code
function call
Python 3 implementation of above approach
counting the position of first set bit
Driver code
Program to find position of rightmost set bit
Iterate till number > 0
Checking if last bit is set
Increment position and right shift number
set bit not found .
Driver Code
Function call
bin function
Driver Code
Function to convert decimal to binary number
Driver code
Function for swapping even and odd bits
Get all even bits of x
Get all odd bits of x
Right shift even bits
Left shift odd bits
Combine even and odd bits
00010111
Output is 43 ( 00101011 )
A utility function to check whether n is power of 2 or not .
Returns position of the only set bit in 'n  
Iterate through bits of n till we find a set bit i & n will be non - zero only when ' i ' and ' n ' have a set bit at same position
Unset current bit and set the next bit in 'i  
increment position
Driver Code
A utility function to check whether n is power of 2 or not
Returns position of the only set bit in 'n  
One by one move the only set bit to right till it reaches end
increment count of shifts
Driver program to test above function
Python3 program to swap two numbers without using temporary variable
code to swap x ' ▁ and ▁ ' y ' x now becomes 50
y becomes 10
x becomes 5
Python3 code to swap using XOR
Code to swap ' x ' and ' y ' x now becomes 15 ( 1111 )
y becomes 10 ( 1010 )
x becomes 5 ( 0101 )
Swap function
Driver code
Function to swap the numbers
Same as a = a + b
Same as b = a - b
Same as a = a - b
Driver code
Function call
Python3 program to solve N Queen Problem using Branch or Bound
A utility function to pri nt solution
A Optimized function to check if a queen can be placed on board [ row ] [ col ]
A recursive utility function to solve N Queen problem
base case : If all queens are placed then return True
Consider this column and try placing this queen in all rows one by one
Check if queen can be placed on board [ i ] [ col ]
Place this queen in board [ i ] [ col ]
recur to place rest of the queens
Remove queen from board [ i ] [ col ]
If queen can not be place in any row in this colum col then return False
This function solves the N Queen problem using Branch or Bound . It mainly uses solveNQueensUtil ( ) to solve the problem . It returns False if queens cannot be placed , otherwise return True or prints placement of queens in the form of 1 s . Please note that there may be more than one solutions , this function prints one of the feasible solutions .
helper matrices
arrays to tell us which rows are occupied
keep two arrays to tell us which diagonals are occupied
initialize helper matrices
solution found
Driver Cde
Method to check a given sentence for given rules
Calculate the length of the string .
Check that the first character lies in [ A - Z ] . Otherwise return false .
If the last character is not a full stop ( . ) no need to check further .
Maintain 2 states . Previous and current state based on which vertex state you are . Initialise both with 0 = start state .
Keep the index to the next character in the string .
Loop to go over the string .
Set states according to the input characters in the string and the rule defined in the description . If current character is [ A - Z ] . Set current state as 0.
If current character is a space . Set current state as 1.
If current character is a space . Set current state as 2.
If current character is a space . Set current state as 3.
Validates all current state with previous state for the rules in the description of the problem .
If we have reached last state and previous state is not 1 , then check next character . If next character is ' \0' , then return true , else false
Set previous state as current state before going over to the next character .
Driver program
Returns index of 0 to be replaced with 1 to get longest continuous sequence of 1 s . If there is no 0 in array , then it returns - 1.
for maximum number of 1 around a zero
for storing result
index of previous zero
index of previous to previous zero
Traverse the input array
If current element is 0 , then calculate the difference between curr and prev_prev_zero
Update result if count of 1 s around prev_zero is more
Update for next iteration
Check for the last encountered zero
Driver program
Utility functions to find minimum and maximum of two elements
Returns length of the longest contiguous subarray
Initialize result
Initialize min and max for all subarrays starting with i
Consider all subarrays starting with i and ending with j
Update min and max in this subarray if needed
If current subarray has all contiguous elements
Return result
Driver Code
A utility function to print contents of arr [ 0. . k - 1 ]
A recursive function to print all increasing sequences of first n natural numbers . Every sequence should be length k . The array arr [ ] is used to store current sequence .
If length of current increasing sequence becomes k , print it
Decide the starting number to put at current position : If length is 0 , then there are no previous elements in arr [ ] . So start putting new numbers with 1. If length is not 0 , then start from value of previous element plus 1.
Increase length
Put all numbers ( which are greater than the previous element ) at new position .
This is important . The variable ' len ' is shared among all function calls in recursion tree . Its value must be brought back before next iteration of while loop
This function prints all increasing sequences of first n natural numbers . The length of every sequence must be k . This function mainly uses printSeqUtil ( )
An array to store individual sequences
Initial length of current sequence
Driver Code
Returns true if str1 [ ] is a subsequence of str2 [ ] .
Base Cases
If last characters of two strings are matching
If last characters are not matching
Driver program to test the above function
Python3 Program for above approach
Function to find the triplet
If number of elements < 3 then no triplets are possible
Track best sequence length ( not current sequence length )
min number in array
Least max number in best sequence i . e . track arr [ j ] ( e . g . in array { 1 , 5 , 3 } our best sequence would be { 1 , 3 } with arr [ j ] = 3 )
Save arr [ i ]
Iterate from 1 to nums . size ( )
This condition is only hit when current sequence size is 2
Update best sequence max number to a smaller value ( i . e . we 've found a smaller value for arr[j])
Store best sequence start value i . e . arr [ i ]
Increase best sequence length & save next number in our triplet
We 've found our arr[k]!  Print the output
No triplet found
Driver Code
Function Call
Returns the product of max product subarray .
Initializing result
traversing in current subarray
updating result every time to keep an eye over the maximum product
updating the result for ( n - 1 ) th index .
Driver code
Function to replace every element with the next greatest element
Initialize the next greatest element
The next greatest element for the rightmost element is always - 1
Replace all other elements with the next greatest
Store the current element ( needed later for updating the next greatest element )
Replace current element with the next greatest
Update the greatest element , if needed
Utility function to print an array
Driver function to test above function
The function returns maximum circular contiguous sum in a [ ]
Corner Case
Initialize sum variable which store total sum of the array .
Initialize every variable with first value of array .
Concept of Kadane 's Algorithm
Kadane 's Algorithm to find Maximum subarray sum.
Kadane 's Algorithm to find Minimum subarray sum.
returning the maximum value
Driver code
Binary search
Add boundary case , when array n is zero Depend on smart pointers
Initialized with - 1
it will always point to empty location
new smallest value
arr [ i ] wants to extend largest subsequence
arr [ i ] wants to be a potential condidate of future subsequence It will replace ceil value in tailIndices
driver code
Return the maximum Sum of difference between consecutive elements
Sorting the array
Subtracting a1 , a2 , a3 , ... . . , a ( n / 2 ) - 1 , an / 2 twice and adding a ( n / 2 ) + 1 , a ( n / 2 ) + 2 , a ( n / 2 ) + 3 , . ... . , an - 1 , an twice .
Driver Program
Partitions arr [ 0. . n - 1 ] around [ lowVal . . highVal ]
Initialize ext available positions for smaller ( than range ) and greater lements
Traverse elements from left
If current element is smaller than range , put it on next available smaller position .
If current element is greater than range , put it on next available greater position .
Driver code
Function to generates and prints all sorted arrays from alternate elements of ' A [ i . . m - 1 ] ' and ' B [ j . . n - 1 ] ' If ' flag ' is true , then current element is to be included from A otherwise from B . ' len ' is the index in output array C [ ] . We print output array each time before including a character from A only if length of output array is greater than 0. We try than all possible combinations
Include valid element from A
Print output if there is at least one ' B ' in output array 'C  
Recur for all elements of A after current index
this block works for the very first call to include the first element in the output array
don 't increment lem  as B is included yet
include valid element from A and recur
Include valid element from B and recur
Wrapper function
output array
A utility function to print an array
Driver program
This function updates indexes of elements ' a ' and 'b  
This function returns minimum number of swaps required to arrange all elements of arr [ i . . n ] become arranged
If all pairs procesed so no swapping needed return 0
If current pair is valid so DO NOT DISTURB this pair and move ahead .
Swap pair of arr [ i ] with arr [ i + 1 ] and recursively compute minimum swap required if this move is made .
Backtrack to previous configuration . Also restore the previous indices , of one and two
Now swap arr [ i ] with pair of arr [ i + 1 ] and recursively compute minimum swaps required for the subproblem after this move
Backtrack to previous configuration . Also restore 3 the previous indices , of one and two
Return minimum of two cases
Returns minimum swaps required
To store indices of array elements
Store index of each element in array index
Call the recursive function
For simplicity , it is assumed that arr [ 0 ] is not used . The elements from index 1 to n are only valid elements
if ( a , b ) is pair than we have assigned elements in array such that pairs [ a ] = b and pairs [ b ] = a
Number of pairs n is half of total elements
If there are n elements in array , then there are n pairs
python program to replace two elements with equal values with one greater .
Function to replace consecutive equal elements
Index in result
to print new array
Driver Code
Function which arrange the given string
Counting number of 0 ' s ▁ and ▁ 1' s in the given string .
Printing first all 0 ' s ▁ x - times ▁ ▁ and ▁ decrement ▁ count ▁ of ▁ 0' s x - times and do the similar task with '1  
Driver code
Python program to shuffle an array in the form of a1 , b1 , a2 , b2 , ...
function to rearrange the array
if size is null or odd return because it is not possible to rearrange
start from the middle index
each time we will set two elements from the start to the valid position by swapping
Driver Code
The function assumes that there are at least two elements in array . The function returns a negative value if the array is sorted in decreasing order . Returns 0 if elements are equal
Driver program to test above function
Function calling
The function assumes that there are at least two elements in array . The function returns a negative value if the array is sorted in decreasing order and returns 0 if elements are equal
Initialize Result
Initialize max element from right side
Driver Code
Function calling
The function assumes that there are at least two elements in array . The function returns a negative value if the array is sorted in decreasing order and returns 0 if elements are equal
Initialize diff , current sum and max sum
Calculate current diff
Calculate current sum
Update max sum , if needed
Driver Code
Function calling
Python3 program to find maximum element
Driver program to check above functions
Base Case : Only one element is present in arr [ low . . high ]
If there are two elements and first is greater then the first element is maximum
If there are two elements and second is greater then the second element is maximum
If we reach a point where arr [ mid ] is greater than both of its adjacent elements arr [ mid - 1 ] and arr [ mid + 1 ] , then arr [ mid ] is the maximum element
If arr [ mid ] is greater than the next element and smaller than the previous element then maximum lies on left side of mid
when arr [ mid ] is greater than arr [ mid - 1 ] and smaller than arr [ mid + 1 ]
Driver program to check above functions
initialize all the counts in countSmaller array as 0
Utility function that prints out an array on a line
Driver code
Utility function that puts all non - positive ( 0 and negative ) numbers on left side of arr [ ] and return count of such numbers
increment count of non - positive integers
Find the smallest positive missing number in an array that contains all positive integers
Mark arr [ i ] as visited by making arr [ arr [ i ] - 1 ] negative . Note that 1 is subtracted because index start from 0 and positive numbers start from 1
Return the first index value at which is positive
1 is added because indexes start from 0
Find the smallest positive missing number in an array that contains both positive and negative integers
First separate positive and negative numbers
Shift the array and call findMissingPositive for positive part
Driver code
Python3 implementation
Function to find the number of array elements with frequency more than n / k times
Calculating n / k
Counting frequency of every element using Counter
Traverse the map and print all the elements with occurrence more than n / k times
Driver code
This function returns the sum of elements on maximum path from beginning to end
initialize indexes for ar1 [ ] and ar2 [ ]
Initialize result and current sum through ar1 [ ] and ar2 [ ]
Below 3 loops are similar to merge in merge sort
Add elements of ar1 [ ] to sum1
Add elements of ar2 [ ] to sum2
we reached a common point
Take the maximum of two sums and add to result
update sum1 and sum2 to be considered fresh for next elements
update i and j to move to next element in each array
Add remaining elements of ar1 [ ]
Add remaining elements of b [ ]
Add maximum of two sums of remaining elements
Driver code
Function call
Simple Python3 program to find smallest greater element in whole array for every element .
Find the closest greater element for arr [ j ] in the entire array .
Check if arr [ i ] is largest
Driver code
Efficient Python3 program to find smallest greater element in whole array for every element
lowerbound function
Driver code
d is the number of characters in input alphabet
q is a prime number used for evaluating Rabin Karp 's Rolling hash
Length of input string
A single character is always a palindrome
Return if string has only one character
Initialize first half reverse and second half for as firstr and second characters
Now check for palindromes from second character onward
If the hash values of ' firstr ' and ' second ' match , then only check individual characters
Check if str [ 0. . i ] is palindrome using simple character by character match
Calculate hash values for next iteration . Don 't calculate hash for next characters if  this is the last character of string
If i is even ( next i is odd )
Add next character after first half at beginning of 'firstr  
Add next character after second half at the end of second half .
If next i is odd ( next i is even ) then we need not to change firstr , we need to remove first character of second and append a character to it .
Driver program
m is maximum of number zeroes allowed to flip , n is size of array
Left and right indexes of current window
Left index and size of the widest window
Count of zeroes in current window
While right boundary of current window doesn 't cross right end
If zero count of current window is less than m , widen the window toward right
If zero count of current window is more than m , reduce the window from left
Updqate widest window if this window size is more
Print positions of zeroes in the widest window
Driver program
Python3 program to count number of strictly increasing subarrays
Initialize count of subarrays as 0
Pick starting point
Pick ending point
If subarray arr [ i . . j ] is not strictly increasing , then subarrays after it , i . e . , arr [ i . . j + 1 ] , arr [ i . . j + 2 ] , ... . cannot be strictly increasing
Driver code
Python3 program to count number of strictlyincreasing subarrays in O ( n ) time .
Initialize result
Initialize length of current increasing subarray
Traverse through the array
If arr [ i + 1 ] is greater than arr [ i ] , then increment length
Else Update count and reset length
If last length is more than 1
Driver program
utility function for array sum
function for finding maximum group difference of array
sort the array
find array sum
difference for k - smallest diff1 = ( arraysum - k_smallest ) - k_smallest
reverse array for finding sum 0f 1 st k - largest
difference for k - largest diff2 = ( arraysum - k_largest ) - k_largest
return maximum difference value
Driver Code
Returns count of elements to be added to make median x . This function assumes that a [ ] has enough extra space .
to sort the array in increasing order .
Driver code
Python3 program to find minimum number of elements to add so that its median equals x .
no . of elements equals to x , that is , e .
no . of elements greater than x , that is , h .
no . of elements smaller than x , that is , l .
subtract the no . of elements that are equal to x .
Driver code
Utility method to construct left and right array
initialize first left index as that index only
if current value is greater than previous , update last increasing
initialize last right index as that index only
if current value is greater than next , update first decreasing
method returns true if arr [ L . . R ] is in mountain form
return true only if right at starting range is greater than left at ending range
Driver code
Python3 program to find number of prime numbers in a subarray and performing updates
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
A utility function to get the middle index from corner indexes .
A recursive function to get the number of primes in a given range of array indexes . The following are parameters for this function . st -- > Pointer to segment tree index -- > Index of current node in the segment tree . Initially 0 is passed as root is always at index 0 ss & se -- > Starting and ending indexes of the segment represented by current node , i . e . , st [ index ] qs & qe -- > Starting and ending indexes of query range
If segment of this node is a part of given range , then return the number of primes in the segment
If segment of this node is outside the given range
If a part of this segment overlaps with the given range
A recursive function to update the nodes which have the given index in their range . The following are parameters st , si , ss and se are same as getSumUtil ( ) i -- > index of the element to be updated . This index is in input array . diff -- > Value to be added to all nodes which have i in range
Base Case : If the input index lies outside the range of this segment
If the input index is in range of this node , then update the value of the node and its children
The function to update a value in input array and segment tree . It uses updateValueUtil ( ) to update the value in segment tree
Check for erroneous input index
Update the value in array
Case 1 : Old and new values both are primes
Case 2 : Old and new values both non primes
Case 3 : Old value was prime , new value is non prime
Case 4 : Old value was non prime , new_val is prime
Update the values of nodes in segment tree
Return number of primes in range from index qs ( query start ) to qe ( query end ) . It mainly uses queryPrimesUtil ( )
A recursive function that constructs Segment Tree for array [ ss . . se ] . si is index of current node in segment tree st
If there is one element in array , check if it is prime then store 1 in the segment tree else store 0 and return
if arr [ ss ] is prime
If there are more than one elements , then recur for left and right subtrees and store the sum of the two values in this node
Function to construct segment tree from given array . This function allocates memory for segment tree and calls constructSTUtil ( ) to fill the allocated memory
Height of segment tree
Maximum size of segment tree
Fill the allocated memory st
Return the constructed segment tree
Driver code
Preprocess all primes till MAX . Create a boolean array " isPrime [ 0 . . MAX ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
Build segment tree from given array
Query 1 : Query ( start = 0 , end = 4 )
Query 2 : Update ( i = 3 , x = 6 ) , i . e Update a [ i ] to x
Query 3 : Query ( start = 0 , end = 4 )
Prints if subarray is even or odd
if arr [ r ] = 1 print odd
if arr [ r ] = 0 print even
Driver code
vector of 1000 elements , all set to 0
vector of 1000 elements , all set to 0
Function to check number of trailing zeros in multiple of 2
Function to check number of trailing zeros in multiple of 5
Function to solve the queries received
If the query is of typee 1.
Counting the number of zeros in the given value of x
The value x has been multiplied to their respective indices
The value obtained above has been added to their respective vectors
If the query is of typee 2.
Counting the number of zero in the given value of x
The value y has been replaced to their respective indices
The value obtained above has been added to their respective vectors
If the query is of typee 2
As the number of trailing zeros for each case has been found for each array element then we simply add those to the respective index to a variable
Compare the number of zeros obtained in the multiples of five and two consider the minimum of them and add them
Input the Size of array and number of queries
Running the while loop for m number of queries
Python 3 program to find floor value of mean in range l to r
To find mean of range in l to r
Both sum and count are initialize to 0
To calculate sum and number of elements in range l to r
Calculate floor value of mean
Returns mean of array in range l to r
Driver Code
Python3 program to find floor value of mean in range l to r
To calculate prefixSum of array
Calculate prefix sum of array
To return floor of mean in range l to r
Sum of elements in range l to r is prefixSum [ r ] - prefixSum [ l - 1 ] Number of elements in range l to r is r - l + 1
Driver Code
Update function for every command
If q == 0 , add ' k ' and ' - k ' to ' l - 1' and ' r ' index
If q == 1 , add ' - k ' and ' k ' to ' l - 1' and ' r ' index
Function to generate the final array after executing all commands
Generate final array with the help of DP concept
Driver Code
Generate final array
Printing the final modified array
Function to calculate Product in the given range .
As our array is 0 based and L and R are given as 1 based index .
Driver code
Returns modulo inverse of a with respect to m using extended Euclid Algorithm . Assumption : a and m are coprimes , i . e . , gcd ( a , m ) = 1
q is quotient
m is remainder now , process same as Euclid 's algo
Make x1 positive
calculating pre_product array
Cacluating inverse_product array .
Function to calculate Product in the given range .
As our array is 0 based as and L and R are given as 1 based index .
Driver Code
Array
Prime P
Calculating PreProduct and InverseProduct
Range [ L , R ] in 1 base index
Python3 program to answer queries for count of primes in given range .
prefix [ i ] is going to store count of primes till i ( including i ) .
Create a boolean array value in prime [ i ] will " prime [ 0 . . n ] " . A finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Build prefix array prefix [ 0 ] = prefix [ 1 ] = 0 ;
Returns count of primes in range from L to R ( both inclusive ) .
Driver code
function for toggle
function for final processing of array
function for printing result
Driver Code
function call for toggle
process array
print result
function to increment values in the given range by a value d for multiple queries
for each ( start , end ) index pair perform the following operations on 'sum[]  
increment the value at index ' start ' by the given value ' d ' in 'sum[]  
if the index ' ( end + 1 ) ' exists then decrement the value at index ' ( end + 1 ) ' by the given value ' d ' in 'sum[]  
Now , perform the following operations : accumulate values in the ' sum [ ] ' array and then add them to the corresponding indexes in 'arr[]  
function to print the elements of the given array
Driver Code
modifying the array for multiple queries
Python3 code to find number of distinct numbers in a subarray
structure to store queries
updating the bit array
querying the bit array
initialising bit array
holds the rightmost index of any number as numbers of a [ i ] are less than or equal to 10 ^ 6
answer for each query
If last visit is not - 1 update - 1 at the idx equal to last_visit [ arr [ i ] ]
Setting last_visit [ arr [ i ] ] as i and updating the bit array accordingly
If i is equal to r of any query store answer for that query in ans [ ]
print answer for each query
Driver Code
Python program to implement toggle and count queries on a binary array .
segment tree to store count of 1 's within range
bool type tree to collect the updates for toggling the values of 1 and 0 in given range
function for collecting updates of toggling node -- > index of current node in segment tree st -- > starting index of current node en -- > ending index of current node us -- > starting index of range update query ue -- > ending index of range update query
If lazy value is non - zero for current node of segment tree , then there are some pending updates . So we need to make sure that the pending updates are done before making new updates . Because this value may be used by parent after recursive calls ( See last line of this function )
Make pending updates using value stored in lazy nodes
checking if it is not leaf node because if it is leaf node then we cannot go further
We can postpone updating children we don ' t ▁ ▁ need ▁ their ▁ new ▁ values ▁ now . ▁ ▁ Since ▁ we ▁ are ▁ not ▁ yet ▁ updating ▁ children ▁ of ▁ ' node ',  we need to set lazy flags for the children
out of range
Current segment is fully in range
Add the difference to current node
same logic for checking leaf node or not
This is where we store values in lazy nodes , rather than updating the segment tree itelf Since we don 't need these updated values now  we postpone updates by storing values in lazy[]
If not completely in rang , but overlaps , recur for children ,
And use the result of children calls to update this node
function to count number of 1 's within given range
current node is out of range
If lazy flag is set for current node of segment tree , then there are some pending updates . So we need to make sure that the pending updates are done before processing the sub sum query
Make pending updates to this node . Note that this node represents sum of elements in arr [ st . . en ] and all these elements must be increased by lazy [ node ]
checking if it is not leaf node because if it is leaf node then we cannot go further
Since we are not yet updating children os si , we need to set lazy values for the children
At this point we are sure that pending lazy updates are done for current node . So we can return value If this segment lies in range
If a part of this segment overlaps with the given range
Driver Code
Toggle 1 2
Toggle 2 4
count 2 3
Toggle 2 4
count 1 4
Python3 program to calculate the number pairs satisfying th condition
function to calculate the number of pairs
traverse through all elements
current number 's divisor
use binary search to find the element after k multiples of x
use binary search to find the element after k + 1 multiples of x so that we get the answer bu subtracting
the difference of index will be the answer
Driver code
function call to get the number of pairs
Function to return probability
Count occurrences of maximum element in A [ ]
Count occurrences of maximum element in B [ ]
Returning probability
Driver code
function to count Dearrangement
create a copy of original array
sort the array
traverse sorted array for counting mismatches
reverse the sorted array
traverse reverse sorted array for counting mismatches
return minimum mismatch count
Driven code
function to calculate the max of all the minimum segments
if we have to divide it into 1 segment then the min will be the answer
If k >= 3 , return maximum of all elements .
Driver code
Function to calculate minimum product of pair
Initialize first and second minimums . It is assumed that the array has at least two elements .
Traverse remaining array and keep track of two minimum elements ( Note that the two minimum elements may be same if minimum element appears more than once ) more than once )
Driver code
function to calculate number of triples
Sort the array
Count occurrences of third element
If all three elements are same ( minimum element appears at l east 3 times ) . Answer is nC3 .
If minimum element appears once . Answer is nC2 .
Minimum two elements are distinct . Answer is nC1 .
Driver code
Return true , if reversing the subarray will sort the array , else return false .
Copying the array
Sort the copied array .
Finding the first mismatch .
Finding the last mismatch .
If whole array is sorted
Checking subarray is decreasing or not .
Driver code
Python3 program to check whether reversing a sub array make the array sorted or not
Return True , if reversing the subarray will sort the array , else return False .
Find first increasing part
Find reversed part
Find last increasing part
To handle cases like 1 , 2 , 3 , 4 , 20 , 9 , 16 , 17
Driver Code
Python 3 program to find minimum increment / decrement operations to make array elements same .
sorting both arrays in ascending order
variable to store the final result
After sorting both arrays . Now each array is in non - decreasing order . Thus , we will now compare each element of the array and do the increment or decrement operation depending upon the value of array b [ ] .
Driver code
Sort whole array a [ ] except elements in range a [ l . . r ]
Copy all those element that need to be sorted to an auxiliary array b [ ]
sort the array b
Copy sorted elements back to a [ ]
Driver code
Python3 program to sort all elements except element at index k .
Move k - th element to end
Sort all elements except last
Store last element ( originally k - th )
Move all elements from k - th to one position ahead .
Restore k - th element
Driver code
Linked list node
Function to insert a node at the beginning of the linked list
function to print the linked list
Function that sort list in order of apperaing elements in an array
Store frequencies of elements in a hash table .
One by one put elements in lis according to their appearance in array
Update ' frequency ' nodes with value equal to arr [ i ]
Modify list data as element appear in an array
Driver Code
creating the linked list
Function call to sort the list in order elements are apperaing in an array
print the modified linked list
Function to find maximum partitions .
Find maximum in prefix arr [ 0. . i ]
If maximum so far is equal to index , we can make a new partition ending at index i .
Driver code
Python Code to find rank of elements
Rank Vector
Sweep through all elements in A for each element count the number of less than and equal elements separately in r and s .
Use formula to obtain rank
Driver code
Function to count minimum no of operation
Count how many times we have to subtract .
Check an additional subtraction is required or not .
Modify the value of arr [ i ] .
Count total no of operation / subtraction .
Driver Code
Python program to find the maximum value of i * arr [ i ]
Sort the array
Finding the sum of arr [ i ] * i
Driver Program
Function to count pairs
Driver code
Python code to find count of Pairs with difference less than K .
to sort the array
Keep incrementing result while subsequent elements are within limits .
Driver code
Function to merge array in sorted order
Sorting a [ ] and b [ ]
Merge two sorted arrays into res [ ]
Merging remaining elements of a [ ] ( if any )
Merging remaining elements of b [ ] ( if any )
Driver code
Final merge list
Returns count of maximum pairs that can be formed from a [ ] and b [ ] under given constraints .
Sorting the first array .
Sorting the second array .
To keep track of visited elements of b [ ]
For every element of a [ ] , find a pair for it and break as soon as a pair is found .
Increasing the count if a pair is formed .
Making the corresponding flag array element as 1 indicating the element in the second array element has been used .
We break the loop to make sure an element of a [ ] is used only once .
Driver code
Returns count of maximum pairs that caan be formed from a [ ] and b [ ] under given constraints .
Sorting the first array .
Sorting the second array .
Increasing array pointer of both the first and the second array .
Increasing array pointer of the second array .
Driver code
function to find the sum of minimum absolute difference
sort the given array
initialize sum
min absolute difference for the 1 st array element
min absolute difference for the last array element
find min absolute difference for rest of the array elements and add them to sum
required sum
Driver code
Python 3 Code to find Smallest Difference between two Arrays
function to calculate Small result between two arrays
Sort both arrays using sort function
Initialize result as max value
Scan Both Arrays upto sizeof of the Arrays
Move Smaller Value
return final sma result
Input given array A
Input given array B
Calculate size of Both arrays
Call function to print smallest result
Prints elements larger than n / 2 element
Sort the array in ascending order
Print last ceil ( n / 2 ) elements
Driver program
singleelement function
Driver code
A Simple Python 3 program to count triplets with sum smaller than a given value include < bits / stdc ++ . h >
Initialize result
Fix the first element as A [ i ]
Fix the second element as A [ j ]
Now look for the third number
Driver program
Python3 program to count triplets with sum smaller than a given value
Sort input array
Initialize result
Every iteration of loop counts triplet with first element as arr [ i ] .
Initialize other two elements as corner elements of subarray arr [ j + 1. . k ]
Use Meet in the Middle concept
If sum of current triplet is more or equal , move right corner to look for smaller values
Else move left corner
This is important . For current i and j , there can be total k - j third elements .
Driver program
function to count the number of unique triplets whose xor is 0
To store values that are present
stores the count of unique triplets
traverse for all i , j pairs such that j > i
xor of a [ i ] and a [ j ]
if xr of two numbers is present , then increase the count
returns answer
Driver code
getMissingNo takes list as argument
Driver program to test the above function
a represents the array n : Number of elements in array a
Driver Code
getMissingNo takes list as argument
Driver program to test above function
Returns number of times x occurs in arr [ 0. . n - 1 ]
Driver code
A recursive binary search function . It returns location of x in given array arr [ l . . r ] is present , otherwise - 1
If the element is present at the middle itself
If element is smaller than mid , then it can only be present in left subarray
Else the element can only be present in right subarray
Returns number of times x occurs in arr [ 0. . n - 1 ]
If element is not present
Count elements on left side .
Count elements on right side .
Driver code
A sufficiently large value greater than any element in the input array
Prints the pair with sum closest to x
To store indexes of result pair
Initialize left and right indexes and difference between pair sum and x
While there are elements between l and r
Check if this pair is closer than the closest pair so far
If this pair has more sum , move to smaller values .
Move to larger values
Driver code to test above
Returns counts of 1 's in arr[low..high]. The array is assumed to be sorted in non-increasing order
get the middle index
check if the element at middle index is last 1
If element is not last 1 , recur for right side
else recur for left side
Driver Code
Function to find missing element based on binary search approach . arr1 [ ] is of larger size and N is size of it . arr1 [ ] and arr2 [ ] are assumed to be in same order .
special case , for only element which is missing in second array
special case , for first element missing
Initialize current corner points
loop until lo < hi
If element at mid indices are equal then go to right subarray
if lo , hi becomes contiguous , break
missing element will be at hi index of bigger array
This function mainly does basic error checking and calls findMissingUtil
Driver Code
This function mainly does XOR of all elements of arr1 [ ] and arr2 [ ]
Do XOR of all element
Driver Code
Python3 code to Find the repeating and the missing elements
Driver program to test above function
The output of this function is stored at x and y
Will hold xor of all elements and numbers from 1 to n
Get the xor of all array elements
XOR the previous result with numbers from 1 to n
Will have only single set bit of xor1
Now divide elements into two sets by comparing a rightmost set bit of xor1 with the bit at the same position in each element . Also , get XORs of two sets . The two XORs are the output elements . The following two for loops serve the purpose
arr [ i ] belongs to first set
arr [ i ] belongs to second set
i belongs to first set
i belongs to second set
Driver code
Python3 program to find the repeating and missing elements using Maps
A naive solution to print all combination of 4 elements in A [ ] with sum equal to X
Fix the first element and find other three
Fix the second element and find other two
Fix the third element and find the fourth
find the fourth
Driver program to test above function
The function finds four elements with given summ X
Store summs of all pairs in a hash table
Traverse through all pairs and search for X - ( current pair summ ) .
If X - summ is present in hash table ,
Making sure that all elements are distinct array elements and an element is not considered more than once .
Driver code
Function call
Function to find 4 elements that add up to given sum
Iterate from 0 to temp . length
Iterate from 0 to length of arr
Iterate from i + 1 to length of arr
Store curr_sum = arr [ i ] + arr [ j ]
Check if X - curr_sum if present in map
Store pair having map value X - curr_sum
Print the output
Function for two Sum
Driver code
Function call
x is the element to be searched in arr [ 0. . n - 1 ]
Traverse the given array starting from leftmost element
If x is found at index i
Jump the difference between current array element and x
Driver program to test above function
Python 3 program to find third Largest element in an array of distinct elements
There should be atleast three elements
Find first largest element
Find second largest element
Find third largest element
Driver Code
Python3 program to find third Largest element in an array
There should be atleast three elements
Initialize first , second and third Largest element
Traverse array elements to find the third Largest
If current element is greater than first , then update first , second and third
If arr [ i ] is in between first and second
If arr [ i ] is in between second and third
Driver Code
Function to check whether two elements exist whose sum is equal to sum of rest of the elements .
Find sum of whole array
/ If sum of array is not even than we can not divide it into two part
For each element arr [ i ] , see if there is another element with value sum - arr [ i ]
If element exist than return the pair
Driver Code
function to search an element in minimum number of comparisons
1 st comparison
no termination condition and thus no comparison
this would be executed at - most n times and therefore at - most n comparisons
replace arr [ n - 1 ] with its actual element as in original 'arr[]  
if ' x ' is found before the ' ( n - 1 ) th ' index , then it is present in the array final comparison
else not present in the array
Driver Code
Assumptions : vector a is sorted , max - difference of two adjacent elements is 1
if a [ m ] = m + a [ 0 ] , there is no repeating character in [ s . . m ]
if a [ m ] < m + a [ 0 ] , there is a repeating character in [ s . . m ]
Driver code
Python 3 code to find majority element in a sorted array
Driver Code
Python3 program to find maximum difference between adjacent elements in a circular array .
Checking normal adjacent elements
Checking circular link
Driver Code
A Python program to find the first , second and third minimum element in an array
Check if current element is less than firstmin , then update first , second and third
Check if current element is less than secmin then update second and third
Check if current element is less than , then upadte third
driver program
Python3 program to find minimum ( or maximum ) element in an array .
If there is single element , return it . Else return minimum of first element and minimum of remaining array .
If there is single element , return it . Else return maximum of first element and maximum of remaining array .
Driver code
Python3 program to find minimum ( or maximum ) element in an array .
Driver Code
Python implementation to find result from target array for closest element
Function for printing resultant array
sort list for ease
list for result
calculate resultant array
check location of upper bound element
if no element found push - 1
else puch the element
add to resultant
Driver code
Function to find counts of all elements present in arr [ 0. . n - 1 ] . The array elements must be range from 1 to n
Hashmap
Traverse all array elements
Update the frequency of array [ i ]
Increase the index
Driver code
Function to find counts of all elements present in arr [ 0. . n - 1 ] . The array elements must be range from 1 to n
Traverse all array elements
If this element is already processed , then nothing to do
Find index corresponding to this element For example , index for 5 is 4
If the elementIndex has an element that is not processed yet , then first store that element to arr [ i ] so that we don 't lose anything.
After storing arr [ elementIndex ] , change it to store initial count of 'arr[i]  
If this is NOT first occurrence of arr [ i ] , then decrement its count .
And initialize arr [ i ] as 0 means the element ' i + 1' is not seen so far
Driver program to test above function
Function to find counts of all elements present in arr [ 0. . n - 1 ] . The array elements must be range from 1 to n
Subtract 1 from every element so that the elements become in range from 0 to n - 1
Use every element arr [ i ] as index and add ' n ' to element present at arr [ i ] % n to keep track of count of occurrences of arr [ i ]
To print counts , simply print the number of times n was added at index corresponding to every element
Driver code
This function removes an element x from arr [ ] and returns new size after removal ( size is reduced only when x is present in arr [ ]
Search x in array
If x found in array
reduce size of array and move all elements on space ahead
Driver Code
Delete x from arr [ ]
This function removes an element x from arr [ ] and returns new size after removal . Returned size is n - 1 when element is present . Otherwise 0 is returned to indicate failure .
If x is last element , nothing to do
Start from rightmost element and keep moving elements one position ahead .
If element was not found
Else move the next element in place of x
Driver code
Delete x from arr [ ]
Returns count of inversions of size 3
Initialize result
Count all smaller elements on right of arr [ i ]
Count all greater elements on left of arr [ i ]
Update inversion count by adding all inversions that have arr [ i ] as middle of three elements
Driver program to test above function
Function to return the maximum water that can be stored
To store the maximum water that can be stored
For every element of the array
Find the maximum element on its left
Find the maximum element on its right
Update the maximum water
Driver code
Python program to find maximum amount of water that can be trapped within given set of bars .
left [ i ] contains height of tallest bar to the left of i 'th bar including itself
Right [ i ] contains height of tallest bar to the right of ith bar including itself
Initialize result
Fill left array
Fill right array
Calculate the accumulated water element by element consider the amount of water on i 'th bar, the  amount of water accumulated on this particular  bar will be equal to min(left[i], right[i]) - arr[i] .
Driver program
Python program to find maximum amount of water that can be trapped within given set of bars . Space Complexity : O ( 1 )
initialize output
maximum element on left and right
indices to traverse the array
update max in left
water on curr element = max - curr
update right maximum
Driver program
Function to return the maximum water that can be stored
Let the first element be stored as previous , we shall loop from index 1
To store previous wall 's index
To store the water until a larger wall is found , if there are no larger walls then delete temp value from water
If the current wall is taller than the previous wall then make current wall as the previous wall and its index as previous wall 's index  for the subsequent loops
Because larger or same height wall is found
Since current wall is shorter than the previous , we subtract previous wall ' s ▁ height ▁ from ▁ the ▁ current ▁ wall ' s height and add it to the water
Store the same value in temp as well If we dont find any larger wall then we will subtract temp from water
If the last wall was larger than or equal to the previous wall then prev_index would be equal to size of the array ( last element ) If we didn 't find a wall greater than or equal  to the previous wall from the left then  prev_index must be less than the index  of the last element
Temp would ' ve ▁ stored ▁ the ▁ water ▁ collected ▁ ▁ from ▁ previous ▁ largest ▁ wall ▁ till ▁ the ▁ end ▁ ▁ of ▁ array ▁ if ▁ no ▁ larger ▁ wall ▁ was ▁ found ▁ then ▁ ▁ it ▁ has ▁ excess ▁ water ▁ and ▁ remove ▁ that ▁ ▁ from ▁ ' water ' var
We start from the end of the array , so previous should be assigned to the last element
Loop from the end of array up to the ' previous ▁ index ' which would contain the " largest ▁ wall ▁ from ▁ the ▁ left "
Right end wall will be definitely smaller than the ' previous ▁ index ' wall
Return the maximum water
Driver code
Function to return the maximum water that can be stored
Stores the indices of the bars
size of the array
Stores the final result
Loop through the each bar
Remove bars from the stack until the condition holds
store the height of the top and pop it .
If the stack does not have any bars or the the popped bar has no left boundary
Get the distance between the left and right boundary of popped bar
Calculate the min . height
If the stack is either empty or height of the current bar is less than or equal to the top bar of stack
Driver code
Function to return the maximum water that can be stored
indices to traverse the array
To store Left max and right max for two pointers left and right
To store the total amount of rain water trapped
We need check for minimum of left and right max for each element
Add the difference between current value and right max at index r
Update right max
Update right pointer
Add the difference between current value and left max at index l
Update left max
Update left pointer
Driver code
Python code for median with case of returning double value when even number of elements are present in both array combinely
def to find max
def to find minimum
def to find median of two sorted arrays
if i = n , it means that Elements from a [ ] in the second half is an empty set . and if j = 0 , it means that Elements from b [ ] in the first half is an empty set . so it is necessary to check that , because we compare elements from these two groups . Searching on right
if i = 0 , it means that Elements from a [ ] in the first half is an empty set and if j = m , it means that Elements from b [ ] in the second half is an empty set . so it is necessary to check that , because we compare elements from these two groups . searching on left
we have found the desired halves .
this condition happens when we don 't have any elements  in the first half from a[]  so we returning the last  element in b[] from the  first half.
and this condition happens when we don 't have any  elements in the first half  from b[] so we returning the  last element in a[] from the  first half.
calculating the median . If number of elements is odd there is one middle element .
Elements from a [ ] in the second half is an empty set .
Elements from b [ ] in the second half is an empty set .
Driver code
we need to define the smaller array as the first parameter to make sure that the time complexity will be O ( log ( min ( n , m ) ) )
Function to find median of given two sorted arrays
if i = n , it means that Elements from a [ ] in the second half is an empty set . If j = 0 , it means that Elements from b [ ] in the first half is an empty set . so it is necessary to check that , because we compare elements from these two groups . searching on right
if i = 0 , it means that Elements from a [ ] in the first half is an empty set and if j = m , it means that Elements from b [ ] in the second half is an a [ ] in the first half is an empty set that , because we compare elements from these two groups . searching on left
we have found the desired halves .
this condition happens when we don 't have  any elements in the first half from a[] so  we returning the last element in b[] from  the first half.
and this condition happens when we don 't  have any elements in the first half from  b[] so we returning the last element in  a[] from the first half.
Function to find maximum
Driver code
we need to define the smaller array as the first parameter to make sure that the time complexity will be O ( log ( min ( n , m ) ) )
Python 3 program to find uncommon elements of two sorted arrays
If not common , print smaller
Skip common element
printing remaining elements
Driver code
Python 3 program to find the least frequent element in an array .
Sort the array
find the min frequency using linear traversal
If last element is least frequent
Driver program
Python3 program to find the most frequent element in an array .
Insert all elements in Hash .
find the max frequency
Driver Code
Python3 program to find maximum sum by selecting a element from n arrays
To calculate maximum sum by selecting element from each array
Sort each array
Store maximum element of last array
Selecting maximum element from previoulsy selected element
j = - 1 means no element is found in a [ i ] so return 0
Driver Code
Python3 program to find maximum sum by selecting a element from n arrays
To calculate maximum sum by selecting element from each array
Store maximum element of last array
Selecting maximum element from previoulsy selected element
max_smaller equals to INT_MIN means no element is found in a [ i ] so return 0
Driver Code
Program to find pairs count
function to count the required pairs
sort the given array
for each A [ i ] traverse rest array
count Aj such that Ai * k ^ x = Aj
increase x till Ai * k ^ x <= largest element
driver program
Function to return min distance
case a
case b
case c
driver program
Function to Find the value of k
Search for k . After every successful search , double k .
Driver 's Code
Python3 code to print last duplicate element and its index in a sorted array
if array is null or size is less than equal to 0 return
compare elements and return last duplicate and its index
If we reach here , then no duplicate found .
Driver Code
Function to find smallest num
Traverse for all elements
Stores the minimum if it divides all
Driver code
Function to find the smallest element
Function to find smallest num
Find the smallest element
Check if all array elements are divisible by smallest .
Driver code
Function to find the index of Max element that satisfies the condition
Finding index of max of the array
Returns - 1 if the max element is not twice of the i - th element .
Driver code
Python3 code to find maximum number of consecutive steps
Function to count consecutive steps
count the number of consecutive increasing height building
Driver code
Python 3 program to find minimum difference between groups of highest and lowest
Sorting the whole array .
Driver code
Python3 program to find minimum difference between groups of highest and lowest sums .
Sorting the whole array .
Generating sum groups .
Driver Code
Returns minimum difference between any two pair in arr [ 0. . n - 1 ]
Sort array elements
Compare differences of adjacent pairs to find the minimum difference .
Traverse array again and print all pairs with difference as minDiff .
Driver code
Brute force Python 3 program to calculate the maximum absolute difference of an array .
Utility function to calculate the value of absolute difference for the pair ( i , j ) .
Function to return maximum absolute difference in brute force .
Variable for storing the maximum absolute distance throughout the traversal of loops .
Iterate through all pairs .
If the absolute difference of current pair ( i , j ) is greater than the maximum difference calculated till now , update the value of result .
Driver program
Function to return maximum absolute difference in linear time .
max and min variables as described in algorithm .
Updating max and min variables as described in algorithm .
Calculating maximum absolute difference .
Driver program to test above function
function to find local extremum
start loop from position 1 till n - 1
check if a [ i ] if greater than both its neighbours , then add 1 to x
check if a [ i ] if less than both its neighbours , then add 1 to x
driver program
Returns element closest to target in arr [ ]
Corner cases
Doing binary search
If target is less than array element , then search in left
If target is greater than previous to mid , return closest of two
Repeat for left half
If target is greater than mid
update i
Only single element left after search
Method to compare which one is the more close . We find the closest by taking the difference between the target and both values . It assumes that val2 is greater than val1 and target lies between these two .
Driver code
Python program to count pairs with maximum sum
traverse through all the pairs
traverse through all pairs and keep a count of the number of maximum pairs
driver code
Python 3 program to count pairs with maximum sum .
Function to find the number of maximum pair sums
Find maximum and second maximum elements . Also find their counts .
If maximum element appears more than once .
If maximum element appears only once .
Driver Code
Prints first k natural numbers in arr [ 0. . n - 1 ]
Find first positive number
Now find missing numbers between array elements
Find missing numbers after maximum .
Driver code
Program to print first k missing number
creating a hashmap
Iterate over array
Iterate to find missing element
Driver Code
Returns a Noble integer if present , else returns - 1.
If count of greater elements is equal to arr [ i ]
Driver code
Python3 code to find Noble elements in an array
Return a Noble element if present before last
In case of duplicates we reach last occurrence here
Driver code
Python3 program to find minimum sum of absolute differences of two arrays .
Sort both arrays
Find sum of absolute differences
Both a [ ] and b [ ] must be of same size .
def to find maximum product of a subset
Find count of negative numbers , count of zeros , maximum valued negative number , minimum valued positive number and product of non - zero numbers
If number is 0 , we don 't  multiply it with product.
Count negatives and keep track of maximum valued negative .
Track minimum positive number of array
If there are all zeros or no negative number present
If there are all positive
If there are even number of negative numbers and count_neg not 0
Otherwise result is product of all non - zeros divided by maximum valued negative .
Driver code
Python program to repeatedly search an element by doubling it after every successful search
Sort the given array so that binary search can be applied on it
Maximum array element
search for the element b present or not in array
Driver code
Python3 code for above implementation
Function to find the maximum sum
Sort the array first
First multiply negative numbers pairwise and sum up from starting as to get maximum sum .
Second multiply positive numbers pairwise and summed up from the last as to get maximum sum .
To handle case if positive and negative numbers both are odd in counts .
If one of them occurs odd times
Driver code
A linked list node
Function to reverse the linked list using 2 pointers
Function to push a node
Function to print linked list
Start with the empty list
deletes alternate nodes of a list starting with head
Change the next link of head
Recursively call for the new next of head
Linked list Node
head of list
Returns true if linked lists a and b are identical , otherwise false
If we reach here , then a and b are not null and their data is same , so move to next nodes in both lists
If linked lists are identical , then ' a ' and ' b ' must be null at this point .
Given a reference ( pointer to pointer ) to the head of a list and an int , push a new node on the front of the list .
1 & 2 : Allocate the Node & Put in the data
3. Make next of new Node as head
4. Move the head to point to new Node
Driver Code
The constructed linked lists are : llist1 : 3 -> 2 -> 1 llist2 : 3 -> 2 -> 1
A recursive Python3 function to check if two linked lists are identical or not
If both lists are empty
If both lists are not empty , then data of current nodes must match , and same should be recursively true for rest of the nodes .
If we reach here , then one of the lists is empty and other is not
Link list node
This function rotates a linked list counter - clockwise and updates the head . The function assumes that k is smaller than size of linked list .
Let us understand the below code for example k = 4 and list = 10.20 . 30.40 .50 . 60.
Traverse till the end .
Traverse the linked list to k - 1 position which will be last element for rotated array .
Update the head_ref and last element pointer to None
Function to push a node
Allocate node
Put in the data
Link the old list off the new node
Move the head to point to the new node
Function to print linked list
Driver code
Start with the empty list
Create a list 10.20 . 30.40 .50 . 60
Python program to sort a linked list of 0 , 1 and 2
head of list
Linked list Node
initialise count of 0 1 and 2 as 0
count total number of '0' , '1' and '2' * count [ 0 ] will store total number of '0' s * count [ 1 ] will store total number of '1' s * count [ 2 ] will store total number of '2' s
Let say count [ 0 ] = n1 , count [ 1 ] = n2 and count [ 2 ] = n3 * now start traversing list from head node , * 1 ) fill the list with 0 , till n1 > 0 * 2 ) fill the list with 1 , till n2 > 0 * 3 ) fill the list with 2 , till n3 > 0
Inserts a new Node at front of the list .
1 & 2 : Allocate the Node & Put in the data
3. Make next of new Node as head
4. Move the head to point to new Node
Function to print linked list
Constructed Linked List is 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 8 -> 9 -> null
A linked list node has data , next pointer and child pointer
Linked List Node
A utility function to create a new node
Rearranges given linked list such that all even positioned nodes are before odd positioned . Returns new head of linked List .
Corner case
Initialize first nodes of even and odd lists
Remember the first node of even list so that we can connect the even list at the end of odd list .
If there are no more nodes , then connect first node of even list to the last node of odd list
Connecting odd nodes
If there are NO more even nodes after current odd .
Connecting even nodes
A utility function to print a linked list
Function to insert a new node at the beginning
Driver code
Node class
Function to create a new node with given data
Recursively add 1 from end to beginning and returns carry after all nodes are processed .
If linked list is empty , then return carry
Add carry returned be next node call
Update data and return new carry
This function mainly uses addWithCarry ( ) .
Add 1 to linked list from end to beginning
If there is carry after processing all nodes , then we need to add a new node to linked list
New node becomes head now
A utility function to print a linked list
Driver program to test above function
Node class
Function to reverse the linked list
This function populates arbit pointer in every node to the greatest value to its right .
Reverse given linked list
Initialize pointer to maximum value node
Traverse the reversed list
Connect max through arbit pointer
Update max if required
Move ahead in reversed list
Reverse modified linked list and return head .
Utility function to print result linked list
Function to create a new node with given data
Driver code
Node class
This function populates arbit pointer in every node to the greatest value to its right .
using static maxNode to keep track of maximum orbit node address on right side
if head is null simply return the list
if head . next is null it means we reached at the last node just update the max and maxNode
Calling the populateArbit to the next node
updating the arbit node of the current node with the maximum value on the right side
if current Node value id greater then the previous right node then update it
Utility function to prresult linked list
Driver code
Node class
A utility function to check if str is palindrome or not
Match characters from beginning and end .
Returns true if string formed by linked list is palindrome
Append all nodes to form a string
Utility function to print the linked LinkedList
Driver program to test above function
A linked list Node
Function to delete the last occurrence
If found key , update
If the last occurrence is the last node
If it is not the last node
Utility function to create a new node with given key
This function prints contents of linked list starting from the given Node
Driver code
Link list Node
A utility function to create a new node
Function to make two separate lists and return head after concatenating
Let us initialize first and last nodes of three linked lists 1 ) Linked list of values smaller than x . 2 ) Linked list of values equal to x . 3 ) Linked list of values greater than x .
Now iterate original list and connect nodes of appropriate linked lists .
If current node is equal to x , append it to the list of x values
If current node is less than X , append it to the list of smaller values
Append to the list of greater values
Fix end of greater linked list to None if this list has some nodes
If smaller list is empty
If smaller list is not empty and equal list is empty
If both smaller and equal list are non - empty
Function to print linked list
Start with the empty list
Node class
Function to find loop starting node . loop_node - . Pointer to one of the loop nodes head - . Pointer to the start node of the linked list
Count the number of nodes in loop
Fix one pointer to head
And the other pointer to k nodes after head
Move both pointers at the same pace , they will meet at loop starting node
This function detects and find loop starting node in the list
Start traversing list and detect loop
If slow_p and fast_p meet then find the loop starting node
Return starting node of loop
Utility function to check if a linked list with loop is palindrome with given starting point .
Traverse linked list until last node is equal to loop_start and store the elements till start in a stack
Traverse linked list until last node is equal to loop_start second time
Compare data of node with the top of stack If equal then continue
Else return False
Return True if linked list is palindrome
Function to find if linked list is palindrome or not
Find the loop starting node
Check if linked list is palindrome
Driver code
Create a loop for testing
Linked List node
function for counting the common elements
loop to count coomon in the list starting from node a and b
increment the count for same values
Returns length of the longest palindrome sublist in given list
loop till the end of the linked list
The sublist from head to current reversed .
check for odd length palindrome by finding longest common list elements beginning from prev and from next ( We exclude curr )
check for even length palindrome by finding longest common list elements beginning from curr and from next
update prev and curr for next iteration
Utility function to create a new list node
Let us create a linked lists to test the functions Created list is a : 2 -> 4 -> 3 -> 4 -> 2 -> 15
Creating a list
Elements to be added at the end . in the above created list .
Elements of list are retrieved through iterator .
Linked List node
A urility function to create a new node .
Utility function to print the elements in Linked list
Moves all occurrences of given key to end of linked list .
Keeps track of locations where key is present .
Traverse list
If current pointer is not same as pointer to a key location , then we must have found a key in linked list . We swap data of pCrawl and pKey and move pKey to next position .
Find next position where key is present
Moving to next Node
Driver code
A Linked list Node
Function to remove key to end
Node to keep pointing to tail
Node to point to last of linked list
Node prev2 to point to previous when head . data != key
Loop to perform operations to remove key to end
Function to display linked list
Driver Code
Python3 program to delete every k - th Node of a singly linked list .
Linked list Node
To remove complete list ( Needed forcase when k is 1 )
Deletes every k - th node and returns head of modified list .
If linked list is empty
Initialize ptr and prev before starting traversal .
Traverse list and delete every k - th node
increment Node count
check if count is equal to k if yes , then delete current Node
put the next of current Node in the next of previous Node delete ( prev . next )
set count = 0 to reach further k - th Node
update prev if count is not 0
Function to print linked list
Utility function to create a new node .
Driver Code
Start with the empty list
Defining structure
Function to check the length of linklist
Push function
Allocating node
Next of new node to head
head points to new node
Driver code
Adding elements to Linked List
Checking for length of linklist
Linked List node
function to insert a node at the beginning of the linked list
allocate node
put in the data
link the old list to the new node
move the head to point to the new node
utility function to find the sum of last ' n ' nodes
if n == 0
traverses the list from left to right
push the node ' s ▁ data ▁ onto ▁ the ▁ stack ▁ ' st
move to next node
pop ' n ' nodes from ' st ' and add them
required sum
Driver Code
create linked list 10.6 .8 .4 .12
A Linked list Node
Function to insert a Node at the beginning of the linked list
Allocate Node
Put in the data
Link the old list to the new Node
Move the head to poto the new Node
utility function to find the sum of last ' n ' Nodes
if n == 0
reverse the linked list
traverse the 1 st ' n ' Nodes of the reversed linked list and add them
accumulate Node ' s ▁ data ▁ to ▁ ' sum
move to next Node
reverse back the linked list
required sum
Driver code
create linked list 10.6 .8 .4 .12
A Linked list Node
Function to insert a Node at the beginning of the linked list
Allocate Node
Put in the data
Link the old list to the new Node
Move the head to poto the new Node
Utility function to find the sum of last ' n ' Nodes
If n == 0
Calculate the length of the linked list
Count of first ( len - n ) Nodes
Just traverse the 1 st ' c ' Nodes
Move to next Node
Now traverse the last ' n ' Nodes and add them
Accumulate Node 's data to sum
Move to next Node
Required sum
Driver code
Create linked list 10 -> 6 -> 8 -> 4 -> 12
Structure for a linked list node
Given a reference ( pointer to pointer ) to the head of a list and an int , push a new node on the front of the list .
Allocate node
Put in the data
Link the old list off the new node
Move the head to point to the new node
Function to merge two sorted linked lists LL1 and LL2 without using any extra space .
Run till either one of a or b runs out
For each element of LL1 , compare it with first element of LL2 .
Swap the two elements involved if LL1 has a greater element
To keep LL2 sorted , place first element of LL2 at its correct place
Find mismatch by traversing the second linked list once
Correct the pointers
Move LL1 pointer to next element
Function to print the linked link
Driver code
Link list Node
Count of nodes
Deletes middle node and returns head of the modified list
Base cases
Find the count of nodes
Find the middle node
Delete the middle node
Delete the middle node
A utility function to print a given linked list
Utility function to create a new node .
Driver Code
Start with the empty list
A Linked List node
Function to prnodes in a given linked list
The main function that takes an array of lists arr [ 0. . last ] and generates the sorted output
Traverse form second list to last
head of both the lists , 0 and ith list .
Break if list ended
Smaller than first element
Traverse the first list
Smaller than next element
go to next node
if last node
Driver code
Number of linked lists
Number of elements in each list
an array of pointers storing the head nodes of the linked lists
Merge all lists
Python3 program to merge two sorted linked lists in - place .
Function to create newNode in a linkedlist
A utility function to print linked list
Merges two given lists in - place . This function mainly compares head nodes and calls mergeUtil ( )
start with the linked list whose head data is the least
Driver Code
1.3 . 5 LinkedList created
0.2 . 4 LinkedList created
Linked List node
Function to create newNode in a linkedlist
A utility function to print linked list
Merges two lists with headers as h1 and h2 . It assumes that h1 ' s ▁ data ▁ is ▁ smaller ▁ than ▁ or ▁ equal ▁ to ▁ h2' s data .
if only one node in first list simply point its head to second list
Initialize current and next pointers of both lists
if curr2 lies in between curr1 and next1 then do curr1 . curr2 . next1
now let curr1 and curr2 to point to their immediate next pointers
if more nodes in first list
else point the last node of first list to the remaining nodes of second list
Merges two given lists in - place . This function mainly compares head nodes and calls mergeUtil ( )
start with the linked list whose head data is the least
Driver program
1.3 . 5 LinkedList created
0.2 . 4 LinkedList created
Linked List node
function to swap nodes ' currX ' and ' currY ' in a linked list without swapping data
make ' currY ' as new head
adjust links
Swap next pointers
function to sort the linked list using recursive selection sort technique
if there is only a single node
' min ' - pointer to store the node having minimum data value
' beforeMin ' - pointer to store node previous to ' min ' node
traverse the list till the last node
if true , then update ' min ' and 'beforeMin  
if ' min ' and ' head ' are not same , swap the head node with the ' min ' node
recursively sort the remaining list
function to sort the given linked list
if list is empty
sort the list using recursive selection sort technique
function to insert a node at the beginning of the linked list
allocate node
put in the data
link the old list to the new node
move the head to point to the new node
function to print the linked list
Driver code
create linked list 10.12 .8 .4 .6
sort the linked list
Linked List node
function to get a new node
allocate memory for the node
put in the data
function to insert a node after the nth node from the end
if list is empty
get a new node for the value 'x  
find length of the list , i . e , the number of nodes in the list
traverse up to the nth node from the end
insert the ' newNode ' by making the necessary adjustment in the links
function to print the list
Creating list 1 -> 3 -> 4 -> 5
Structure of a node
Function to get a new node
Allocate memory for the node
Function to insert a node after the nth node from the end
If list is empty
Get a new node for the value 'x  
Initializing the slow and fast pointers
Move ' fast _ ptr ' to point to the nth node from the beginning
Iterate until ' fast _ ptr ' points to the last node
Move both the pointers to the respective next nodes
Insert the ' newNode ' by making the necessary adjustment in the links
Function to print the list
Driver code
Creating list 1.3 . 4.5
Linked List node
function to get the middle node set it as the beginning of the linked list
to traverse nodes one by one
to traverse nodes by skipping one
to keep track of previous middle
for previous node of middle node
move one node each time
move two nodes each time
set middle node at head
To insert a node at the beginning of linked list .
allocate new node
link the old list to new node
move the head to point the new node
A function to print a given linked list
Create a list of 5 nodes
Given a node as prev_node , insert a new node after the given node
1. check if the given prev_node is NULL
2. allocate node & 3. put in the data
4. Make next of new node as next of prev_node
5. Make the next of prev_node as new_node
6. Make prev_node as previous of new_node
7. Change previous of new_node 's next node 
Python3 implementation for Sorted merge of two sorted doubly circular linked list
A utility function to insert a new node at the beginning of doubly circular linked list
allocate space
put in the data
if list is empty
pointer points to last Node
setting up previous and next of new node
update next and previous pointers of head_ref and last .
update head_ref pointer
function for Sorted merge of two sorted doubly linked list
If first list is empty
If second list is empty
Pick the smaller value and adjust the links
function for Sorted merge of two sorted doubly circular linked list
if 1 st list is empty
if 2 nd list is empty
get pointer to the node which will be the last node of the final list last_node
store None to the ' next ' link of the last nodes of the two lists
sorted merge of head1 and head2
' prev ' of 1 st node pointing the last node ' next ' of last node pointing to 1 st node
function to print the list
Driver Code
list 1 :
list 2 :
Python3 Program to Reverse a List using Data Swapping
Insert a new node at the head of the list
Function to reverse the list
Traverse the list and set right pointer to end of list
Swap data of left and right pointer and move them towards each other until they meet or cross each other
Swap data of left and right pointer
Advance left pointer
Advance right pointer
Driver code
Structure of node
Given a reference ( pointer to pointer ) to the head of a list and an int , inserts a new node on the front of the list .
Function to check if list is palindrome or not
Find rightmost node
Driver program
A binary tree node
Given a binary tree , print nodes form level number ' low ' to level number 'high  
Marker node to indicate end of level
Initialize level number
Enqueue the only first level node and marker node for end of level
print Q Simple level order traversal loop
Remove the front item from queue
print Q Check if end of level is reached
print a new line and increment level number
Check if marker node was last node in queue or level nubmer is beyond the given upper limit
Enqueue the marker for end of next level
If this is marker , then we don 't need print it  and enqueue its children
If level is equal to or greater than given lower level , print it
Enqueue children of non - marker node
Driver program to test the above function
A Binary tree node
Constructed binary tree is 1 / \ 2 3 / \ / 4 5 8
Node of binary tree Function to add a new node
Function to prnodes of given level
extra None is appended to keep track of all the nodes to be appended before level is incremented by 1
prwhen level is equal to k
break the loop if level exceeds the given level number
Driver Code
create a binary tree
Binary tree node
Function to print leaf nodes from left to right
If node is null , return
If node is leaf node , print its data
If left child exists , check for leaf recursively
If right child exists , check for leaf recursively
Driver Code
Let us create binary tree shown in above diagram
print leaf nodes of the given tree
A binary tree node
Recursive function to print all the nodes at distance k int the tree ( or subtree ) rooted with given root . See
Base Case
If we reach a k distant node , print it
Recur for left and right subtee
Prints all nodes at distance k from a given target node The k distant nodes may be upward or downward . This function returns distance of root from target node , it returns - 1 if target node is not present in tree rooted with root
Base Case 1 : IF tree is empty return - 1
If target is same as root . Use the downward function to print all nodes at distance k in subtree rooted with target or root
Recur for left subtree
Check if target node was found in left subtree
If root is at distance k from target , print root Note : dl is distance of root 's left child  from target
Else go to right subtreee and print all k - dl - 2 distant nodes Note : that the right child is 2 edges away from left chlid
Add 1 to the distance and return value for for parent calls
MIRROR OF ABOVE CODE FOR RIGHT SUBTREE Note that we reach here only when node was not found in left subtree
If target was neither present in left nor in right subtree
Let us construct the tree shown in above diagram
A Binary Tree Node
Function to print all non - root nodes that don 't have a sibling
Base Case
If this is an internal node , recur for left and right subtrees
If left child is NULL , and right is not , print right child and recur for right child
If right child is NULL and left is not , print left child and recur for left child
Let us create binary tree given in the above example
utility that allocates a new Node with the given key
This function prints all nodes that are distance k from a leaf node path [ ] - . Store ancestors of a node visited [ ] - . Stores true if a node is printed as output . A node may be k distance away from many leaves , we want to print it once
Base case
append this Node to the path array
it 's a leaf, so print the ancestor at  distance k only if the ancestor is  not already printed
If not leaf node , recur for left and right subtrees
Given a binary tree and a nuber k , print all nodes that are k distant from a leaf
Driver Code
Let us create binary tree given in the above example
Python3 program to print corner node at each level of binary tree
A binary tree node has key , pointer to left child and a pointer to right child
Function to print corner node at each level
If the root is null then simply return
star node is for keeping track of levels
pushing root node and star node
Do level order traversal using a single queue
n denotes the size of the current level in the queue
If it is leftmost corner value or rightmost corner value then print it
push the left and right children of the temp node
Driver Code
Python3 Program to print binary tree in 2D
Binary Tree Node
Constructor that allocates a new node with the given data and null left and right pointers .
Function to print binary tree in 2D It does reverse inorder traversal
Base case
Increase distance between levels
Process right child first
Print current node after space count
Process left child
Wrapper over print2DUtil ( )
space = [ 0 ] Pass initial space count as 0
Driver Code
A binary tree node
Recursive function pritn left view of a binary tree
Base Case
If this is the first node of its level
Recur for left and right subtree
A wrapper over leftViewUtil ( )
Driver program to test above function
Utility function to create a new tree node
function to print left view of binary tree
number of nodes at current level
Traverse all nodes of current level
Print the left most element at the level
Add left node to queue
Add right node to queue
Driver Code
construct binary tree as shown in above diagram
Function to find the last element left after performing N - 1 queries of type X
Stores the next power of 2
Iterate until nextPower is at most N
If X is equal to 1
Stores the power of 2 less than or equal to N
Return the final value
Driver Code
Function to find the maximum sum of consecutive 0 s present at the start and end of a string present in any of the rotations of the given string
Check if all the characters in the string are 0
Iterate over characters of the string
If the frequency of '1' is 0
Print n as the result
Concatenate the string with itself
Stores the required result
Generate all rotations of the string
Store the number of consecutive 0 s at the start and end of the string
Count 0 s present at the start
Count 0 s present at the end
Calculate the sum
Update the overall maximum sum
Print the result
Driver Code
Given string
Store the size of the string
Function to find the maximum sum of consecutive 0 s present at the start and end of any rotation of the string str
Stores the count of 0 s
If the frequency of '1' is 0
Print n as the result
Stores the required sum
Find the maximum consecutive length of 0 s present in the string
Update the overall maximum sum
Find the number of 0 s present at the start and end of the string
Update the count of 0 s at the start
Update the count of 0 s at the end
Update the maximum sum
Print the result
Driver Code
Given string
Store the size of the string
Function to rotate every i - th row of the matrix i times
Traverse the matrix row - wise
Reverse the current row
Reverse the first i elements
Reverse the last ( N - i ) elements
Increment count
Print final matrix
Driver Code
Function to check if a non - decreasing array can be obtained by rotating the original array
Stores copy of original array
Sort the given vector
Traverse the array
Rotate the array by 1
If array is sorted
If it is not possible to sort the array
Driver Code
Given array
Size of the array
Function call to check if it is possible to make array non - decreasing by rotating
Function to find the maximum value possible by rotations of digits of N
Store the required result
Store the number of digits
Iterate over the range [ 1 , len - 1 ]
Store the unit 's digit
Store the remaining number
Find the next rotation
If the current rotation is greater than the overall answer , then update answer
Print the result
Driver Code
Function to find the count of digits in N
Stores count of digits in N
Calculate the count of digits in N
Update digit
Update N
Function to rotate the digits of N by K
Stores count of digits in N
Update K so that only need to handle left rotation
Stores first K digits of N
Remove first K digits of N
Stores count of digits in left_no
Append left_no to the right of digits of N
Driver Code
Function Call
Function to count minimum anti - clockwise rotations required to sort the array in non - increasing order
Stores count of arr [ i + 1 ] > arr [ i ]
Store last index of arr [ i + 1 ] > arr [ i ]
Traverse the given array
If the adjacent elements are in increasing order
Increment count
Update index
Prthe result according to the following conditions
Otherwise , it is not possible to sort the array
Given array
Function Call
Python3 program to implement the above approach
Function to find maximum sum of diagonal elements of matrix by rotating either rows or columns
Stores maximum diagonal sum of elements of matrix by rotating rows or columns
Rotate all the columns by an integer in the range [ 0 , N - 1 ]
Stores sum of diagonal elements of the matrix
Calculate sum of diagonal elements of the matrix
Update curr
Update maxDiagonalSum
Rotate all the rows by an integer in the range [ 0 , N - 1 ]
Stores sum of diagonal elements of the matrix
Calculate sum of diagonal elements of the matrix
Update curr
Update maxDiagonalSum
Driver code
Function to calculate the maximum sum of length k
Calculating the max sum for the first k elements
Find subarray with maximum sum
Update the sum
Return maximum sum
Function to calculate gcd of the two numbers n1 and n2
Base Case
Recursively find the GCD
Function to rotate the array by Y
For handling k >= N
Dividing the array into number of sets
Rotate the array by Y
Update arr [ j ]
Return the rotated array
Function that performs the queries on the given array
Traverse each query
If query of type X = 1
Print the array
If query of type X = 2
Driver Code
Given array arr [ ]
Given Queries
Function call
Function to find the minimum characters to be removed from the string
Initialize answer by N
If length is even
Frequency array for odd and even indices
Store the frequency of the characters at even and odd indices
Stores the most occuring frequency for even and odd indices
Update the answer
If length is odd
Stores the frequency of the characters of the string
Stores the most occuring characterin the string
Update the answer
Driver Code
Python3 program to implement the above approach
Function to find the longest subsequence having equal left and right rotation
Length of the string
Iterate for all possible combinations of a two - digit numbers
Check for alternate occurrence of current combination
Increment the current value
Increment the current value
If alternating sequence is obtained of odd length
Reduce to even length
Update answer to store the maximum
Return the answer
Driver code
Function to rotate matrix by 45 degree
Counter Variable
Iterate [ 0 , m ]
Iterate [ 0 , n ]
Diagonal Elements Condition
Appending the Diagonal Elements
Printing reversed Diagonal Elements
Dimensions of Matrix
Given matrix
Function Call
Function to return Mth element of array after k right rotations
The array comes to original state after N rotations
If K is greater or equal to M
Mth element after k right rotations is ( N - K ) + ( M - 1 ) th element of the array
Otherwise
( M - K - 1 ) th element of the array
Return the result
Driver Code
Function to return Mth element of array after k left rotations
The array comes to original state after N rotations
Mth element after k left rotations is ( K + M - 1 ) % N th element of the original array
Return the result
Driver Code
Array initialization
Size of the array
Given K rotation and Mth element to be found after K rotation
Function call
Function to left rotate
Function to right rotate
Function to rotate the array
Driver code
Python3 program for the above approach
Function to maximize the matching pairs between two permutation using left and right rotation
Left array store distance of element from left side and right array store distance of element from right side
Map to store index of elements
idx1 is index of element in first permutation idx2 is index of element in second permutation
If element if present on same index on both permutations then distance is zero
Calculate distance from left and right side
Calculate distance from left and right side
Maps to store frequencies of elements present in left and right arrays
Find maximum frequency
Return the result
Driver Code
Given permutations P1 and P2
Function Call
Function to return the count of rotations
Find the smallest element
Return its index
If array is not rotated at all
Driver Code
Function to return the count of rotations
If array is not rotated
Check if current element is greater than the next element
The next element is the smallest
Check if current element is smaller than it 's previous  element
Current element is the smallest
Check if current element is greater than lower bound
The sequence is increasing so far Search for smallest element on the right subarray
Smallest element lies on the left subarray
Search for the smallest element on both subarrays
Driver code
Function to execute the queries
Construct a new array of size 2 * N to store prefix sum of every index
Copy elements to the new array
Calculate the prefix sum for every index
Set start pointer as 0
Query to perform anticlockwise rotation
Query to answer range sum
If pointing to 1 st index
Display the sum upto start + R
Subtract sum upto start + L - 1 from sum upto start + R
Driver code
Number of query
Store all the queries
Function to check that the string s1 can be converted to s2 by clockwise circular shift of all characters of str1 atmost X times
Check for all characters of the strings whether the difference between their ascii values is less than X or not
If both characters are the same
Condition to check if the difference less than 0 then find the circular shift by adding 26 to it
If difference between their ASCII values exceeds X
Driver Code
Function Call
Function to return the count of all rotations which are divisible by 10.
Loop to iterate through the number
If the last digit is 0 , then increment the count
Driver code
Link list node
A utility function to push a node
allocate node
put in the data
link the old list off the new node
move the head to point to the new node
A utility function to print linked list
Function that rotates the given linked list clockwise by k and returns the updated head pointer
If the linked list is empty
len is used to store length of the linked list tmp will point to the last node after this loop
If k is greater than the size of the linked list
Subtract from length to convert it into left rotation
If no rotation needed then return the head node
current will either point to kth or None after this loop
If current is None then k is equal to the count of nodes in the list Don 't change the list in this case
current points to the kth node
Change next of last node to previous head
Change head to ( k + 1 ) th node
Change next of kth node to None
Return the updated head pointer
Driver code
The constructed linked list is : 1.2 . 3.4 . 5
Rotate the linked list
Print the rotated linked list
Python3 implementation of the approach
Function that returns True if the array can be made increasing or decreasing after rotating it in any direction
If size of the array is less than 3
Check if the array is already decreasing
If the array is already decreasing
Check if the array is already increasing
If the array is already increasing
Find the indices of the minimum and the maximum value
Check if we can make array increasing
If the array is increasing upto max index and minimum element is right to maximum
Check if array increasing again or not
Check if we can make array decreasing
If the array is decreasing upto min index and minimum element is left to maximum
Check if array decreasing again or not
If it is not possible to make the array increasing or decreasing
Driver code
Function to return the count of rotated strings which have more number of vowels in the first half than the second half
Create a new string
Pre array to store count of all vowels
Compute the prefix array
To store the required answer
Find all rotated strings
Right and left index of the string
x1 stores the number of vowels in the rotated string
Left stores the number of vowels in the first half of rotated string
Right stores the number of vowels in the second half of rotated string
If the count of vowels in the first half is greater than the count in the second half
Return the required answer
Driver code
Function to return the count of rotated strings which have more number of vowels in the first half than the second half
Compute the number of vowels in first - half
Compute the number of vowels in second - half
Check if first - half has more vowels
Check for all possible rotations
Return the answer
Driver code
Function call
Python3 implementation of the approach
Function to perform the required queries on the given string
Pointer pointing to the current starting character of the string
For every query
If the query is to rotate the string
Update the pointer pointing to the starting character of the string
Index of the kth character in the current rotation of the string
Print the kth character
Driver code
Function to reverse an array from left index to right index ( both inclusive )
Function that returns true if str1 can be made equal to str2 by rotating either d places to the left or to the right
Left Rotation string will contain the string rotated Anti - Clockwise Right Rotation string will contain the string rotated Clockwise
Copying the str1 string to left rotation string and right rotation string
Rotating the string d positions to the left
Rotating the string d positions to the right
Compairing the rotated strings
If cannot be made equal with left rotation
If cannot be made equal with right rotation
If both or any one of the rotations of str1 were equal to str2
Driver code
d is the rotating factor
In case length of str1 < d
Function to count of all rotations which are odd and even
Driver code
function to return the count of digit of n
function to print the left shift numbers
formula to calculate left shift from previous number
Update the original number
Driver code
Python implementation of the above approach
To store the indices of the characters
Loop till w is not empty
Incrementing the last character
Repeating w to get a n - length string
Removing the last character as long it is equal to the largest character in S
Python3 implementation of the approach
Splitting the number at index i and adding to the front
Checking if the value is greater than or equal to the given value
Driver code
Python3 implementation of the above approach
Definition of node of linkedlist
This function take head pointer of list , start and end points of sublist that is to be rotated and the number k and rotate the sublist to right by k places .
If k is greater than size of sublist then we will take its modulo with size of sublist
If k is zero or k is equal to size or k is a multiple of size of sublist then list remains intact
m - th node
This loop will traverse all node till end node of sublist . Current traversed node
Count of traversed nodes
Previous of m - th node
We will save ( m - 1 ) th node and later make it point to ( n - k + 1 ) th node
That is how we bring ( n - k + 1 ) th node to front of sublist .
This keeps rest part of list intact .
Function for creating and linking new nodes
Driver code
Python program to Generating numbers that are divisor of their right - rotations
Function to check if N is a divisor of its right - rotation
Function to generate m - digit numbers which are divisor of their right - rotation
Driver code
Python program to Generating numbers that are divisor of their right - rotations
Function to generate m - digit numbers which are divisor of their right - rotation
Driver code
Python3 program to check if an array is sorted and rotated clockwise
Function to check if an array is sorted and rotated clockwise
Find the minimum element and it 's index
Check if all elements before minIndex are in increasing order
Check if all elements after minIndex are in increasing order
Check if last element of the array is smaller than the element just before the element at minIndex starting element of the array for arrays like [ 3 , 4 , 6 , 1 , 2 , 5 ] - not sorted circular array
Driver code
Function Call
Python3 implementation of above approach
Function to rotate the matrix 90 degree clockwise
printing the matrix on the basis of observations made on indices .
Driver code
Function to find the elements that appeared only once in the array
Sort the array
Check for first element
Check for all the elements if it is different its adjacent elements
Check for the last element
Driver code
Python3 implementation to find elements that appeared only once
Function to find the elements that appeared only once in the array
Store all the elements in the map with their occurrence
Traverse the map and print all the elements with occurrence 1
Driver code
Function to find the elements that appeared only once in the array
Check if the first and last element is equal If yes , remove those elements
Start traversing the remaining elements
Check if current element is equal to the element at immediate previous index If yes , check the same for next element
Else print the current element
Check for the last element
Driver code
Function to reverse arr [ ] from index start to end
Function to print an array
Function to left rotate arr [ ] of size n by k
Driver Code
Function calling
Python program to check if two strings are rotations of each other
create lps [ ] that will hold the longest prefix suffix values for pattern
length of the previous longest prefix suffix
lps [ 0 ] is always 0
the loop calculates lps [ i ] for i = 1 to n - 1
Match from that rotating point
Driver code
function to count of all rotations divisible by 8
For single digit number
For two - digit numbers ( considering all pairs )
first pair
second pair
considering all three - digit sequences
Considering the number formed by the last digit and the first two digits
Considering the number formed by the last two digits and the first digit
required count of rotations
Driver Code
Python 3 program to make all strings same using move to end operations .
Returns minimum number of moves to end operations to make all strings same .
Consider s [ i ] as target string and count rotations required to make all other strings same as str [ i ] .
find function returns the index where we found arr [ i ] which is actually count of move - to - front operations .
If any two strings are not rotations of each other , we can 't make them same.
Driver Code
Linked list node
Function that count number of rotation in singly linked list .
Declare count variable and assign it 1.
Declare a min variable and assign to data of head node .
Check that while head not equal to None .
If min value is greater then head -> data then it breaks the while loop and return the value of count .
head assign the next value of head .
Function to push element in linked list .
Allocate dynamic memory for newNode .
Assign the data into newNode .
newNode -> next assign the address of head node .
newNode become the headNode .
Display linked list .
Driver code
Create a node and initialize with None
push ( ) insert node in linked list . 15 -> 18 -> 5 -> 8 -> 11 -> 12
Function call countRotation ( )
Link list node
Recursive function to rotate one block
Rotate Clockwise
Rotate anti - Clockwise
Function to rotate the linked list block wise
If length is 0 or 1 return head
If degree of rotation is 0 , return head
Traverse upto last element of this block
Storing the first node of next block
If nodes of this block are less than k . Rotate this block also
Append the new head of next block to the tail of this block
Return head of updated Linked List
Function to push a node
Function to print linked list
Driver code
Start with the empty list
Create a list 1.2 . 3.4 .5 . 6.7 . 8.9 . None
k is block size and d is number of rotations in every block .
function to check if two numbers are equal after bit rotation
x64 has concatenation of x with itself .
comapring only last 32 bits
right shift by 1 unit
Driver Code
Returns count of all rotations divisible by 4
For single digit number
At - least 2 digit number ( considering all pairs )
Considering the number formed by the pair of last digit and 1 st digit
Driver program
Function to check if string2 is obtained by string 1
Initialize string as anti - clockwise rotation
Initialize string as clock wise rotation
check if any of them is equal to string1
Driver code
This function return lexicographically minimum rotation of str
Find length of given string
Create an array of strings to store all rotations
Create a concatenation of string with itself
One by one store all rotations of str in array . A rotation is obtained by getting a substring of concat
Sort all rotations
Return the first rotation from the sorted array
Driver Code
structure of Node
structure of Node
structure of Node
structure of Node
structure of Node
Node of the doubly linked list
Function to insert a node at the beginning of the Doubly Linked List
Allocate the node
Insert the data
Since we are adding at the beginning , prev is always None
Link the old list off the new node
Change the prev of head node to new node
Move the head to point to the new node
Function that returns true if count of set bits in x is even
parity will store the count of set bits
Function to delete a node in a Doubly Linked List . head_ref - . pointer to head node pointer . delt - . pointer to node to be deleted
Base case
If the node to be deleted is head node
Change next only if node to be deleted is not the last node
Change prev only if node to be deleted is not the first node
Finally , free the memory occupied by delt
Function to to remove all the Even Parity Nodes from a doubly linked list
Iterating through the linked list
If node ' s ▁ data ' s parity is even
Function to print nodes in a given doubly linked list
Driver Code
Create the doubly linked list 18 < . 15 < . 8 < . 9 < . 14
Uncomment to view the list cout << " Original ▁ List : ▁ " ; printList ( head ) ;
Modified List
Structure for a node
Function to insert a node at the beginning of a Circular linked list
Create a new node and make head as next of it .
If linked list is not None then set the next of last node
Find the node before head and update next of it .
Pofor the first node
Function to deltete the node from a Circular Linked list
If node to be delteted is head node
Traverse list till not found deltete node
Copy the address of the node
Finally , free the memory occupied by delt
Function that returns true if count of set bits in x is even
parity will store the count of set bits
Function to deltete all the Even Parity Nodes from the singly circular linked list
Traverse the list till the end
If the node ' s ▁ data ▁ has ▁ even ▁ parity , ▁ ▁ deltete ▁ node ▁ ' ptr
Poto the next node
Function to prnodes in a given Circular linked list
Driver code
Initialize lists as empty
Created linked list will be 11.9 .34 .6 .13 .21
Structure for a node
Function to insert a node at the beginning of a Circular linked list
Create a new node and make head as next of it .
If linked list is not None then set the next of last node
Find the node before head and update next of it .
Point for the first node
Function to deltete the node from a Circular Linked list
If node to be delteted is head node
Traverse list till not found deltete node
Copy the address of the node
Finally , free the memory occupied by delt
Function to find the digit sum for a number
Function to deltete all the Even Digit Sum Nodes from the singly circular linked list
Traverse the list till the end
If the node ' s ▁ data ▁ is ▁ Fibonacci , ▁ ▁ deltete ▁ node ▁ ' ptr
Point to the next node
Function to print nodes in a given Circular linked list
Driver code
Initialize lists as empty
Created linked list will be 9.11 .34 .6 .13 .21
Structure for a node
Function to add a node at the beginning of a Circular linked list
Create a new node and make head as next of it .
If linked list is not None then set the next of last node
Find the node before head and update next of it .
Point for the first node
Delete the node from a Circular Linked list
If node to be deleted is head node
Traverse list till not found delete node
Copy the address of the node
Finally , free the memory occupied by delt
Function to find the maximum node of the circular linked list
Pointer for traversing
Initialize head to the current pointer
Initialize min value to max
While the last node is not reached
If current node data is greater for max then replace it
Function to create hashmap table to check Fibonacci numbers
Adding the first two elements to the hashmap
Inserting the Fibonacci numbers into the hashmap
Function to delete all the Fibonacci nodes from the singly circular linked list
Find the largest node value in Circular Linked List
Creating a hashmap containing all the Fibonacci numbers upto the maximum data value in the circular linked list
Traverse the list till the end
If the node ' s ▁ data ▁ is ▁ Fibonacci , ▁ ▁ delete ▁ node ▁ ' ptr
Point to the next node
Function to print nodes in a given Circular linked list
Driver code
Initialize lists as empty
Created linked list will be 9.11 .34 .6 .13 .20
Python3 program to delete all odd node from a Circular singly linked list
Structure for a node
Function to insert a node at the beginning of a Circular linked list
If linked list is not None then set the next of last node
For the first node
Delete the node if it is odd
If node to be deleted is head node
Traverse list till not found delete node
Copy address of node
Function to delete all odd nodes from the singly circular linked list
if node is odd
po to next node
Function to pr nodes
Driver code
Initialize lists as empty
Created linked list will be 56 -> 61 -> 57 -> 11 -> 12 -> 2
Python3 implementation of the approach
Node structure
Function to create a node
Function to find and return the head
If the list is empty
Finding the last node of the linked list the last node must have the highest value if no such element is present then all the nodes of the linked list must be same
Return the head
Function to insert a new_node in the list in sorted fashion . Note that this function expects a pointer to head node as this can modify the head of the input linked list
If the list is empty
If the node to be inserted is the smallest then it has to be the new head
Find the last node of the list as it will be pointing to the head
Locate the node before the point of insertion
Return the new head
Function to print the nodes of the linked list
Driver code
Start with an empty linked list
Create linked list from the given array
Move to a random node if it exists
Print the contents of the created list
Python3 implementation of the approach
Function to add a node to the empty list
If not empty
Assigning the data
Creating the link
Function to add a node to the beginning of the list
If list is empty
Assign data
Function to traverse and prthe list
If list is empty
Pointing to the first Node of the list
Traversing the list
Function to find the length of the CircularLinkedList
Stores the length
List is empty
Iterator Node to traverse the List
Return the length of the list
Function to split the first k nodes into a new CircularLinkedList and the remaining nodes stay in the original CircularLinkedList
Empty Node for reference
Check if the list is empty If yes , then return NULL
NewLast will contain the last node of the new split list itr to iterate the node till the required node
Update NewLast to the required node and link the last to the start of rest of the list
Return the last node of the required list
Driver code
Append the new last node into the new list
Print the new lists
A binary tree node has data , and left and right pointers
Function to perform In - Order traversal of the tree and store the nodes in a vector
first recur on left child
append the data of node in vector
now recur on right child
Function to convert Binary Tree to Circular Doubly Linked list using the vector which stores In - Order traversal of the Binary Tree
Base cases
Vector to be used for storing the nodes of tree in In - order form
Calling the In - Order traversal function
Create the head of the linked list pointing to the root of the tree
Create a current pointer to be used in traversal
Traversing the nodes of the tree starting from the second elements
Create a temporary pointer pointing to current
Current 's right points to the current  node in traversal
Current points to its right
Current 's left points to temp
Current 's right points to head of the list
Head 's left points to current
Return head of the list
Display Circular Link List
Driver Code
Function to delete last node of Circular Linked List
check if list doesn 't have any node  if not then return
check if list have single node if yes then delete it and return
move first node to last previous
A linked list node
Function to insert a node at the end of a Circular linked list
Create a new node
check node is created or not
insert data into newly created node
check list is empty if not have any node then make first node it
if list have already some node
move first node to last node
put first or head node address in new node link
put new node address into last node link ( next )
Function print data of list
if list is empty , simply show message
traverse first to last node
Function return number of nodes present in list
if list is empty simply return length zero
traverse forst to last node
Function delete First node of Circular Linked List
check list have any node if not then return
check list have single node if yes then delete it and return
traverse second to first
now previous is last node and next is first node of list first node ( next ) link address put in last node ( previous ) link
make second node as head node
Function to delete last node of Circular Linked List
check if list doesn 't have any node  if not then return
check if list have single node if yes then delete it and return
move first node to last previous
Function delete node at a given poisition of Circular Linked List
Find length of list
check list have any node if not then return
given index is in list or not
delete first node
traverse first to last node
if index found delete that node
Driver Code
Deleting Node at position
Deleting first Node
Deleting last Node
structure for a node
Function to print minimum and maximum nodes of the circular linked list
check list is empty
initialize head to current pointer
initialize max int value to min initialize min int value to max
While last node is not reached
If current node data is lesser for min then replace it
If current node data is greater for max then replace it
Function to insert a node at the end of a Circular linked list
Create a new node
check node is created or not
insert data into newly created node
check list is empty if not have any node then make first node it
if list have already some node
move firt node to last node
put first or head node address in new node link
put new node address into last node link ( next )
Function to print the Circular linked list
if list is empty simply show message
traverse first to last node
Driver Code
Python3 program to delete all even node from a Circular singly linked list
Structure for a node
Function to insert a node at the beginning of a Circular linked list
If linked list is not None then set the next of last node
For the first node
Delete the node if it is even
If node to be deleted is head node
traverse list till not found delete node
copy address of node
Function to delete all even nodes from the singly circular linked list
if node is even
po to next node
Function to pr nodes
Driver code
Initialize lists as empty
Created linked list will be 57.11 .2 .56 .12 .61
Python3 program to find the sum of all nodes of a Circular linked list
class for a node
Function to insert a node at the beginning of a Circular linked list
If linked list is not NULL then set the next of last node
For the first node
Function to find sum of the given Circular linked list
Driver code
Initialize lists as empty
Created linked list will be 11 -> 2 -> 56 -> 12
Python3 program to delete every kth Node from circular linked list .
structure for a Node
Utility function to print the circular linked list
Function to delete every kth Node
If list is empty , simply return .
take two poers - current and previous
Check if Node is the only Node \ If yes , we reached the goal , therefore return .
Pr intermediate list .
If more than one Node present in the list , Make previous pointer po to current Iterate current pointer k times , i . e . current Node is to be deleted .
If Node to be deleted is head
If Node to be deleted is last Node .
Function to insert a Node at the end of a Circular linked list
Create a new Node
if the list is empty , make the new Node head Also , it will po to itself .
traverse the list to reach the last Node and insert the Node
Driver Code
insert Nodes in the circular linked list
Delete every kth Node from the circular linked list .
Node of the doubly linked list
Utility function to create a node in memory
Function to display the list
Function to count nunmber of elements in the list
Declare temp pointer to traverse the list
Variable to store the count
Iterate the list and increment the count
As the list is circular , increment the counter at last
Function to insert a node at a given position in the circular doubly linked list
Declare two pointers
Create a new node in memory
Point temp to start
count of total elements in the list
If list is empty or the position is not valid , return False
Assign the data
Iterate till the loc
See in Image , circle 1
See in Image , Circle 2
See in Image , Circle 3
See in Image , Circle 4
Function to create circular doubly linked list from array elements
Declare newNode and temporary pointer
Iterate the loop until array length
Create new node
Assign the array data
If it is first element Put that node prev and next as start as it is circular
Find the last node
Add the last node to make them in circular fashion
Driver Code
Array elements to create circular doubly linked list
Start Pointer
Create the List
Display the list before insertion
Inserting 8 at 3 rd position
Display the list after insertion
Node of the doubly linked list
Utility function to create a node in memory
Function to display the list
Function to convert array into list
Declare newNode and temporary pointer
Iterate the loop until array length
Create new node
Assign the array data
If it is first element Put that node prev and next as start as it is circular
Find the last node
Add the last node to make them in circular fashion
Driver Code
Array to be converted
Start Pointer
Create the List
Display the list
Node structure
Function to find the luckiest person
Create a single node circular linked list .
Starting from first soldier .
condition for evaluating the existence of single soldier who is not killed .
deleting soldier from the circular list who is killed in the fight .
Returning the Luckiest soldier who remains alive .
Driver code
Node of a Binary Tree
Function to find the depth of the Binary Tree
If root is not null
Left recursive subtree
Right recursive subtree
Returns the maximum depth
Function to perform the depth first search on the binary tree
If root is null
If curr is equal to depth
Left recursive subtree
Right recursive subtree
If left and right are not null
Return left , if left is not null Otherwise return right
Function to find the LCA of the deepest nodes of the binary tree
If root is null
Stores the deepest depth of the binary tree
Return the LCA of the nodes at level depth
Driver Code
Given Binary Tree
Function to filter the return Values
Utility function to check if nodes are on same path or not
Condition to check if any vertex is equal to given two vertex or not
Check if the current position has 1
Recursive call
Return LCA
Function to check if nodes lies on same path or not
Driver code
Python3 Program to find distance between two nodes using LCA
lg2 ( MAX )
Array to store the level of each node
Vector to store tree
Pre - Processing to calculate values of lca [ ] [ ] , dist [ ] [ ]
Using recursion formula to calculate the values of lca [ ] [ ]
Storing the level of each node
Using recursion formula to calculate the values of lca [ ] [ ] and dist [ ] [ ]
Function to find the distance between given nodes u and v
The node which is present farthest from the root node is taken as v . If u is farther from root node then swap the two
Finding the ancestor of v which is at same level as u
Adding distance of node v till its 2 ^ i - th ancestor
If u is the ancestor of v then u is the LCA of u and v
Finding the node closest to the root which is not the common ancestor of u and v i . e . a node x such that x is not the common ancestor of u and v but lca [ x ] [ 0 ] is
Adding the distance of v and u to its 2 ^ i - th ancestor
Adding the distance of u and v to its first ancestor
Driver Code
Number of nodes
Add edges with their cost
Initialising lca and dist values with - 1 and 0 respectively
Perform DFS
Query 1 : { 1 , 3 }
Query 2 : { 2 , 3 }
Query 3 : { 3 , 5 }
Python3 program count prime weight nodes between two nodes in the given tree
Function to perform Sieve Of Eratosthenes for prime number
Initialize all entries of prime it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true . memset ( prime , true , sizeof ( prime ) )
Check if prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .
Function to perform dfs
Stores parent of each node
Stores level of each node from root
Function to perform prime number between the path
The node which is present farthest from the root node is taken as v If u is farther from root node then swap the two
Find the ancestor of v which is at same level as u
If Weight is prime increment count
If u is the ancestor of v then u is the LCA of u and v Now check if weigh [ v ] is prime or not
When v and u are on the same level but are in different subtree . Now move both u and v up by 1 till they are not same
If weight of first ancestor is prime
Driver code
Precompute all the prime numbers till MAX
Weights of the node
Edges of the tree
Python3 Program to find the maximum and minimum weight between two nodes in the given tree using LCA
log2 ( MAX )
Array to store the level of each node
Vector to store tree
Array to store weight of nodes
Pre - Processing to calculate values of lca [ ] [ ] , MinWeight [ ] [ ] and MaxWeight [ ] [ ]
Using recursion formula to calculate the values of lca [ ] [ ]
Storing the level of each node
Using recursion formula to calculate the values of lca [ ] [ ] , MinWeight [ ] [ ] and MaxWeight [ ] [ ]
Function to find the minimum and maximum weights in the given range
The node which is present farthest from the root node is taken as v If u is farther from root node then swap the two
Finding the ancestor of v which is at same level as u
Calculating Minimum and Maximum Weight of node v till its 2 ^ i - th ancestor
If u is the ancestor of v then u is the LCA of u and v
Finding the node closest to the root which is not the common ancestor of u and v i . e . a node x such that x is not the common ancestor of u and v but lca [ x ] [ 0 ] is
Calculating the minimum of MinWeight of v to its 2 ^ i - th ancestor and MinWeight of u to its 2 ^ i - th ancestor
Calculating the maximum of MaxWeight of v to its 2 ^ i - th ancestor and MaxWeight of u to its 2 ^ i - th ancestor
Calculating the Minimum of first ancestor of u and v
Calculating the maximum of first ancestor of u and v
Driver code
Number of nodes
Add edges
Perform DFS
Query 1 : { 1 , 3 }
Query 2 : { 2 , 4 }
Query 3 : { 3 , 5 }
Python Program to find the LCA in a rooted tree for a given set of nodes
Set time 1 initially
Case for root node
In - time for node
Out - time for the node
level [ i ] -- > Level of node i
t_in [ i ] -- > In - time of node i
t_out [ i ] -- > Out - time of node i
Fill the level , in - time and out - time of all nodes
To find minimum in - time among all nodes in LCA set
To find maximum in - time among all nodes in LCA set
Node with same minimum and maximum out time is LCA for the set
Take the minimum level as level of LCA
If i - th node is at a higher level than that of the minimum among the nodes of the given set
Compare in - time , out - time and level of i - th node to the respective extremes among all nodes of the given set
Driver code
Python3 implementation of the approach
Function to store the path from root node to given node of the tree in path vector and then returns true if the path exists otherwise false
Function to print the minimum and the maximum value present in the path connecting the given two nodes of the given binary tree
To store the path from the root node to a
To store the path from the root node to b
To store the minimum and the maximum value in the path from LCA to a
To store the minimum and the maximum value in the path from LCA to b
If both a and b are present in the tree
Compare the paths to get the first different value
Find minimum and maximum value in the path from LCA to a
Find minimum and maximum value in the path from LCA to b
Minimum of min values in first path and second path
Maximum of max values in first path and second path
If no path exists
Driver Code
Binary Tree node
Utitlity function to create a Binary Tree node
Function to check if there is a path from root to the given node . It also populates arr ' with the given path
if root is None there is no path
push the node ' s ▁ value ▁ in ▁ ' arr
if it is the required node return True
else check whether the required node lies in the left subtree or right subtree of the current node
required node does not lie either in the left or right subtree of the current node Thus , remove current node ' s ▁ value ▁ from ▁ ▁ ' arr 'and then return False
Function to get the sum of odd nodes in the path between any two nodes in a binary tree
vector to store the path of first node n1 from root
vector to store the path of second node n2 from root
Get intersection point
Keep moving forward until no intersection is found
calculate sum of ODD nodes from the path
Driver Code
Maximum value in a node
Function to find the Lowest common ancestor
Create a visited vector and mark all nodes as not visited .
Moving from n1 node till root and mark every accessed node as visited
Move to the parent of node n1
For second node finding the first node common
Insert function for Binary tree
Driver Code
Maximum capacity of binary tree
Root marked
Python3 program to find distance between two nodes for multiple queries
A tree node structure
Array to store level of each node
Utility Function to store level of all nodes
queue to hold tree node with level
let root node be at level 0
Do level Order Traversal of tree
Node p . first is on level p . second
If left child exits , put it in queue with current_level + 1
If right child exists , put it in queue with current_level + 1
Stores Euler Tour
index in Euler array
Find Euler Tour
store current node 's data
If left node exists
traverse left subtree
store parent node 's data
If right node exists
traverse right subtree
store parent node 's data
checks for visited nodes
Stores level of Euler Tour
Stores indices of the first occurrence of nodes in Euler tour
Preprocessing Euler Tour for finding LCA
If node is not visited before
Add to first occurrence
Mark it visited
Stores values and positions
Utility function to find minimum of pair type values
Utility function to build segment tree
Utility function to find LCA
Function to return distance between two nodes n1 and n2
Maintain original Values
Get First Occurrence of n1
Get First Occurrence of n2
Swap if low > high
Get position of minimum value
Extract value out of Euler tour
return calculated distance
Build Tree
Store Levels
Find L and H array
Build sparse table
Driver Code
Number of nodes
Constructing tree given in the above figure
Function to do all preprocessing
Maximum number of nodes is 100000 and nodes are numbered from 1 to 100000
Storing root to node path
Storing the path from root to node
Pushing current node into the path
Node found
Terminating the path
This Function compares the path from root to ' a ' & root to ' b ' and returns LCA of a and b . Time Complexity : O ( n )
Trivial case
Setting root to be first element in path
Calculating path from root to a
Calculating path from root to b
Runs till path 1 & path 2 mathches
Returns the last matching node in the paths
Driver code
Number of nodes
Number of nodes in input tree
COLOUR ' WHITE ' is assigned value 1
COLOUR ' BLACK ' is assigned value 2
A binary tree node has data , pointer to left child and a pointer to right child
subset [ i ] . parent - . Holds the parent of node - ' i ' subset [ i ] . rank - . Holds the rank of node - ' i ' subset [ i ] . ancestor - . Holds the LCA queries answers subset [ i ] . child - . Holds one of the child of node - ' i ' if present , else - '0' subset [ i ] . sibling - . Holds the right - sibling of node - ' i ' if present , else - '0' subset [ i ] . color - . Holds the colour of node - ' i '
Structure to represent a query A query consists of ( L , R ) and we will process the queries offline a / c to Tarjan 's oflline LCA algorithm
Helper function that allocates a new node with the given data and None left and right pointers .
A utility function to make set
A utility function to find set of an element i ( uses path compression technique )
Find root and make root as parent of i ( path compression )
A function that does union of two sets of x and y ( uses union by rank )
Attach smaller rank tree under root of high rank tree ( Union by Rank )
If ranks are same , then make one as root and increment its rank by one
The main function that prints LCAs . u is root 's data. m is size of q[]
Make Sets
Initially , each node 's ancestor is the node  itself.
This while loop doesn 't run for more than 2 times  as there can be at max. two children of a node
This is basically an inorder traversal and we preprocess the arrays . child [ ] and sibling [ ] in " struct ▁ subset " with the tree structure using this function .
Recur on left child
Note that the below two lines can also be this - subsets [ node . data ] . child = node . right . data ; subsets [ node . right . data ] . sibling = node . left . data ; This is because if both left and right children of node - ' i ' are present then we can store any of them in subsets [ i ] . child and correspondingly its sibling
Recur on right child
A function to initialise prior to pre - processing and LCA walk
Initialising the structure with 0 's  memset(subsets, 0, (V+1) * sizeof(struct subset));
Prints LCAs for given queries q [ 0. . m - 1 ] in a tree with given root
Allocate memory for V subsets and nodes
Creates subsets and colors them WHITE
Preprocess the tree
Perform a tree walk to process the LCA queries offline
Driver code
We construct a binary tree : - 1 / \ 2 3 / \ 4 5
LCA Queries to answer
Function to find a pair in the given array whose sum is equal to z
Iterate through all the pairs
Check if the sum of the pair ( a [ i ] , a [ j ] ) is equal to z
Given Input
Function Call
Function to print all possible pairs
Given array
Store the size of the array
Function Call
Function to find the required answer
Stores maximum sum
Adding the difference of elements at ends of increasing subarray to the answer
Input
Functio calling
Function to implement stooge sort
Base Case
If first element is smaller than last element , swap them
If there are more than 2 elements in the array
Recursively sort the first 2 / 3 elements
Recursively sort the last 2 / 3 elements
Recursively sort the first 2 / 3 elements again
Driver Code
Function Call
Display the sorted array
Function to find the winner of the Game by arranging the balls in a row
Check if small balls are greater or equal to the large ones
X can place balls therefore scores n - 1
Condition if large balls are greater than small
X can have m - 1 as a score since greater number of balls can only be adjacent
Compare the score
Driver Code
Given number of small balls ( N ) and number of large balls ( M )
Function call
Python3 program for the above approach
Function to check if Pascaltriangle can be made by N integers
Find X
If x is integer
Given number N
Function call
Function to count subarrays in which sum of elements at even and odd positions are equal
Initialize variables
Iterate over the array
Check if position is even then add to sum hen add it to sum
else subtract it to sum
Increment the count if the sum equals 0
Print the count of subarrays
Driver Code
Given array arr [ ]
Size of the array
Function call
Function to find the count of placing non - attacking rooks on the N x N chessboard
Count of the Non - attacking rooks
Printing lexographically smallest configuration
Driver Code
Function call
Python3 program for the above approach
Function to check divisibility
Calculate the number of digits in num
Check if the length of the string is less than the powerOf2 then return false
Check if the powerOf2 is 0 that means the given number is 1 and as every number is divisible by 1 so return true
Find the number which is formed by the last n digits of the string where n = powerOf2
Check if the number formed is divisible by input num or not
Driver Code
Given number
Function Call
Python3 program to check clockwise or counterclockwise order in an array
Comparing the first and last value of array
If the count is greater than 1 then it can 't be  represented in required order
Driver code
Function to find the maximum possible value of M
Edge case
M = N - 2 is maximum possible value
Driver code
Python3 program for the above problem
If there is only one day for buying and selling no profit can be made
Array to store Maxprofit by resting on given day
Array to store Maxprofit by buying or resting on the given day
Array to store Maxprofit by selling on given day
Initially there will 0 profit
Buying on 1 st day results in negative profit
zero profit since selling before buying isn 't possible
max of profit on ( i - 1 ) th day by resting and profit on ( i - 1 ) th day by selling .
max of profit by resting on ith day and buying on ith day .
max of profit by selling on ith day
maxprofit
Driver Code
Function to return the required number of subarrays
Return number of possible subarrays of length K
Driver Code
Function to find the longest subarray with same element
Check if the elements are same then we can increment the length
Reinitialize j
Compare the maximum length e with j
Return max length
Given list arr [ ]
Function call
Store the factorial of all the digits from [ 0 , 9 ]
Function to return true if number is strong or not
Converting N to String so that can easily access all it 's digit
sum will store summation of factorial of all digits of a number N
Returns true of N is strong number
Function to print all strong number till N
Iterating from 1 to N
Checking if a number is strong then print it
Driver Code
Given number
Function call
Function for counting pairs
Count possible values of Y
Driver Code
Function to find the minimum number sprinklers required to water the park .
General requirements of sprinklers
if M is odd then add one additional sprinklers
Driver code
Python3 Program to find frequency of a string K in a substring [ L , R ] in S
Store the frequency of string for each index
Compute and store frequencies for every index
Driver Code
Returns XOR of arr [ 0. . index ] . This function assumes that the array is preprocessed and partial XORs of array elements are stored in BITree [ ] .
Traverse ancestors of BITree [ index ]
XOR current element of BIT to ans
Update index to that of the parent node in getXor ( ) view by subtracting LSB ( Least Significant Bit )
Updates the Binary Index Tree by replacing all ancestors of index by their respective XOR with val
Traverse all ancestors and XOR with ' val ' .
XOR ' val ' to current node of BIT
Update index to that of the parent node in updateBit ( ) view by adding LSB ( Least Significant Bit )
Constructs and returns a Binary Indexed Tree for the given array
Create and initialize the Binary Indexed Tree
Store the actual values in BITree [ ] using update ( )
Driver Code
Create the Binary Indexed Tree
Solve each query in Q
Update the values of all ancestors of idx
Array to make Sieve where arr [ i ] = 0 indicates non prime and arr [ i ] = 1 indicates prime
Array to find double prime
Function to find the number double prime numbers in range
Assume all numbers as prime
Check if the number is prime
Check for multiples of i
Make all multiples of ith prime as non - prime
Check if number at ith position is prime then increment count
Indicates count of numbers from 1 to i that are also prime and hence double prime
If number is not a double prime
Finding cumulative sum
Driver code
Python3 code to implement the above approach
Create array where index represents alphabets
Fill count of every alphabet to corresponding array index
Count for every element how much is exceeding from no . of groups then sum them
Print answer
Driver code
Function to find the array such that the array contains the same count of even and odd elements with equal sum of even and odd elements
Length of array which is not divisible by 4 is unable to form such array
Loop to find the resulted array containing the same count of even and odd elements
Find the total sum of even elements
Find the total sum of odd elements
Find the difference between the total sum of even and odd elements
The difference will be added in the last odd element
Driver Code
Python3 implementation to find the number of ways to place two queens on the N * N chess board
Function to find number of valid positions for two queens in the N * N chess board
Driver code
Function call
Function to group the mutually co - prime numbers into one group
Loop for the numbers less than the 4
Integers 1 , 2 and 3 can be grouped into one group
Consecutive even and odd numbers
Driver Code
Function Call
Function to find maximum sum subset with equal number of positive and negative elements
Loop to store the positive and negative elements in two different array
Sort both the array
Pointers starting from the highest elements
Find pairs having sum greater than zero
Driver code
Function to create Sieve to check primes
False here indicates that it is not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p , set them to non - prime
Function to print the nodes with prime degree in the tree whose Prufer sequence is given
Hash - table to mark the degree of every node
Initially let all the degrees be 1
Increase the count of the degree
Print the nodes with prime degree
Driver Code
Function to find k 'th smallest number such that A + B = A | B
res will store final answer
Skip when j ' th ▁ position ▁ ▁ has ▁ 1 ▁ in ▁ binary ▁ representation ▁ ▁ as ▁ in ▁ res , ▁ j ' th position will be 0.
j 'th bit is set
If i ' th ▁ bit ▁ of ▁ k ▁ is ▁ 1 ▁ ▁ and ▁ i ' th bit of j is 0 then set i 'th bit in res.
Proceed to next bit
Driver Code
Python3 implementation of the above approach
To store Prime Numbers
Function to find the prime numbers till 10 ^ 5
Traverse all multiple of i and make it false
Function to print the nodes having prime degree
To store Adjacency List of a Graph
Make Adjacency List
To precompute prime numbers till 10 ^ 5
Traverse each vertex
Find size of Adjacency List
If length of Adj [ i ] is Prime then print it
Driver code
Vertices and Edges
Edges
Function Call
Python3 program for the above approach
Recursive function to count the ways
Base case
Initialise answer to 0
Color each uncolored block according to the given condition
If any block is uncolored
Check if adjacent blocks are colored or not
Color the block
recursively iterate for next uncolored block
Uncolored for the next recursive call
Return the final count
Function to count the ways to color block
Mark which blocks are colored in each recursive step
Function call to count the ways
Driver Code
Number of blocks
Number of colored blocks
Function call
Function return the shortest palindromic substring
Finding the smallest character present in the string
Driver code
Function to find the subsequence with alternating sign having maximum size and maximum sum .
Find whether each element is positive or negative
Find the required subsequence
Find the maximum element in the specified range
print the result
Driver code
array declaration
size of array
Function to check whether the string is a palindrome
Reverse the string to compare with the original string
Check if both are same
Function to find the longest palindrome in a string formed by concatenating its prefix and suffix
Length of the string
Finding the length upto which the suffix and prefix forms a palindrome together
Check whether the string has prefix and suffix substrings which are palindromes .
Removing the suffix and prefix substrings which already forms a palindrome and storing them in separate strings
Check all prefix substrings in the remaining string str
Check if the prefix substring is a palindrome
If the prefix substring is a palindrome then check if it is of maximum length so far
Check all the suffix substrings in the remaining string str
Check if the suffix substring is a palindrome
If the suffix substring is a palindrome then check if it is of maximum length so far
Combining all the thee parts of the answer
Driver code
Python3 implementation to find the minimum of the maximum difference of the adjacent elements after removing K elements from the array
Function to find the minimum of the maximum difference of the adjacent elements after removing K elements from the array
Initialising the minimum difference
Traversing over subsets in iterative manner
Number of elements to be taken in the subset ON bits of i represent elements not to be removed
If the removed set is of size k
Creating the new array after removing elements
Maximum difference of adjacent elements of remaining array
Driver Code
Python3 implementation to find the minimum of the maximum difference of the adjacent elements after removing K elements from the array
Function to find the minimum of the maximum difference of the adjacent elements after removing K elements from the array
Initialising the minimum difference
Iterating over all subarrays of size n - k
Maximum difference after removing elements
Minimum Adjacent Difference
Driver Code
Python3 implementation to find the minimum of the maximum difference of the adjacent elements after removing K elements from the array
Function to find the minimum different in the subarrays of size K in the array
Create a Double Ended Queue , Qi that will store indexes of array elements , queue will store indexes of useful elements in every window
Process first k ( or first window ) elements of array
For every element , the previous smaller elements are useless so remove them from Qi
Add new element at rear of queue
Process rest of the elements , i . e . , from arr [ k ] to arr [ n - 1 ]
The element at the front of the queue is the largest element of previous window
Remove the elements which are out of this window
Remove all elements smaller than the currently being added element ( remove useless elements )
Add current element at the rear of Qi
Compare the maximum element of last window
Function to find the minimum of the maximum difference of the adjacent elements after removing K elements from the array
Create the difference array
Find minimum of all maximum of subarray sizes n - k - 1
Driver code
Function to find the greatest common divisor of two numbers
Function to find the minimum the minimum number of elements required to be inserted into array
Difference array of consecutive elements of the array
GCD of the difference array
Loop to calculate the minimum number of elements required
Driver Code
Function calling
Function to Check if a given sequence is a concatenation of two permutations or not
Computing the sum of all the elements in the array
Computing the prefix sum for all the elements in the array
Iterating through the i from lengths 1 to n - 1
Sum of first i + 1 elements
Sum of remaining n - i - 1 elements
Lengths of the 2 permutations
Checking if the sums satisfy the formula or not
Driver code
Function that prthe answer
if n == 1 then it is not possible
loop to n - 1 times
print as last digit of the number
Driver code
Function call
Python implementation of the approach
Function to precompute the count of even and odd numbers
If the current element is odd then put 1 at odd [ i ]
If the current element is even then put 1 at even [ i ]
Taking the prefix sums of these two arrays so we can get the count of even and odd numbers in a range [ L , R ] in O ( 1 )
Function that returns True if the bitwise AND of the subarray a [ L ... R ] is odd
cnt will store the count of odd numbers in the range [ L , R ]
Check if all the numbers in the range are odd or not
Function to perform the queries
Perform queries
Driver code
Queries
Python3 implementation of the approach
Function to find the required triplets
To store the factors
Find factors in sqrt ( x ) time
Choose a factor
Choose another factor
These conditions need to be met for a valid triplet
Print the valid triplet
Triplet found
Triplet not found
Driver code
Function to return the number of pairs satisfying the equation
Converting integer b to string by using to_function
Loop to check if all the digits of b are 9 or not
If '9' doesn 't appear  then break the loop
If all the digits of b contain 9 then multiply a with length else multiply a with length - 1
Return the number of pairs
Driver code
Function to generate sequence from the given string
Initialize vector to store sequence
First add all the digits of group A from left to right
Then add all the digits of group B from left to right
Return the sequence
Function that returns true if the sequence is non - decreasing
Initialize result
Function to partition the digits of an integer such that it satisfies the given conditions
Convert the integer to string
Length of the string
Array to store the digits
Storing the digits of X in array
Initialize the result
Loop through the digits
Put into group A if digit less than D
Put into group B if digit greater than D
Put into group C if digit equal to D
Loop through the digits to decide for group C digits
Set flag equal to true if group B digit present
If flag is true put in group A or else put in B
Generate the sequence from partition
Check if the sequence is non decreasing
Return - 1 if no such partition is possible
Driver code
Python3 implementation of the approach
Function to return the required area
Calculate the area
Driver code
Function to check if parity can be made same or not
Iterate and count the parity
Odd
Even
Condition check
Driver Code
Function to perform the queries
Size of the array with 1 - based indexing
Number of queries
Iterating through the queries
If m is more than the size of the array
Count of turns
Find the remainder
If the remainder is 0 and turn is odd then the array is empty
If the remainder is 0 and turn is even then array is full and is in its initial state
If the remainder is not 0 and the turn is even
Current size of the array
Current size of the array
Print the result
Driver code
The initial array , - 1 is for 1 base indexing
Queries in the form of the pairs of ( t , M )
Function to return the count of the required pairs
Find the count of 0 s and 2 s in the array
Find the count of required pairs
Return the count
Driver code
Function to return the minimum possible sum of digits of A and B such that A + B = n
Find the sum of digits of n
If num is a power of 10
Driver code
Creates a mul [ ] array for A [ ] and returns it after filling initial values .
Does range update
Prints updated Array
Driver code ;
Array to be updated
Create and fill mul and div Array
Function to return the winner of the game
To store the count of silver coins
Update the position of the gold coin
First player will win the game
Driver code
Python3 implementation of the approach
Function to find the triangle with area = ( S / 2 )
Fix the two pairs of coordinates
Find ( X3 , Y3 ) with integer coordinates
Driver code
Utility function to print the elements of an array
Function to find the required arrangement
There has to be atleast 2 elements
Minimum element from the array
Swap any occurrence of the minimum element with the last element
Find the bitwise AND of the first ( n - 1 ) elements
If the bitwise AND is equal to the last element then print the arrangement
Driver code
Function to return the maximum operations required to convert X to Y
X cannot be converted to Y
If the difference is 1
If the difference is even
Add 3 to X and the new difference will be even
Driver code
Python3 implementation of the approach
To store the states of the dp
Function to fill the dp table
Sum of digits of the string of length 1 is i as i is only number in that string and count of good strings of length 1 that end with i is also 1
Adjacent digits are different
Increment the count as digit at ( i - 1 ) 'th index is k and count  of good strings is equal to this  because at the end of the strings of  length (i - 1) we are just  putting digit j as the last digit
Driver code
Python implementation of the approach
Function to pre - compute the sequence
For N = 1 the answer will be 2
Starting two terms of the sequence
Compute the rest of the sequence with the relation F [ i ] = F [ i - 1 ] + F [ i - 2 ]
Driver code
Pre - compute the sequence
Python3 implementation of the approach
Function to return the maximum subarray sum
Function to return the minimized sum of the array elements after performing the given operation
Find maximum subarray sum
Find total sum of the array
Maximum subarray sum is already negative
Choose the subarray whose sum is maximum and divide all elements by K
Driver code
Function to find minimum count of numbers ( with one 's digit 9) that sum up to N
Fetch one 's digit
Apply Cases mentioned in approach
If no possible answer exists
Driver Code
Python3 implementation of the approach
Utility function to print the elements of an array
Function to generate a list of m random non - negative integers whose sum is n
Create an array of size m where every element is initialized to 0
To make the sum of the final list as n
Increment any random element from the array by 1
Print the generated list
Driver code
Return the count of string
P will store the answer
Current will store current string Previous will store the previous that has been taken already
Add a character to current string
Here we will create a partition and update the previous with current string
Now we will clear the current string
Increment the count of partition .
Driver code
Function to find the smallest positive missing number
Default smallest Positive Integer
Store values in set which are greater than variable m
Store value when m is less than current index of given array
Increment m when it is equal to current element
Increment m when it is one of the element of the set
Return the required answer
Driver code
Function call
Python 3 program to find sum of all second largest divisor after splitting a number into one or more parts
Function to find a number is prime or not
If there is any divisor
Function to find the sum of all second largest divisor after splitting a number into one or more parts
If number is prime
If n is even
If the number is odd
If N - 2 is prime
There exists 3 primes x1 , x2 , x3 such that x1 + x2 + x3 = n
Driver code
Function call
Function that returns true if c is vowel
Function to return the count of required pairs
For every of the array
Vector to store the vowels of the current string
If current character is a vowel
If current contains vowels
Create tuple ( first vowel , last vowel , total vowels )
v stores the indices for which the given condition satisfies Total valid pairs will be half the size
Driver code
Function to return the maximized value
Overall minimum absolute value of some element from the array
Add all absolute values
Count positive and negative elements
Both positive and negative values are present
Only positive or negative values are present
Driver code
Function to find the Nth smallest number
If N is divisible by 100 then we multiply N + 1 otherwise , it will be divisible by 100 more than K times
convert integer to string
if N is not divisible by 100
convert integer to string
add 2 * K 0 's at the end to be divisible  by 100 exactly K times
Driver Code
Function to count the adjacent pairs of consonant and vowels in the string
Using a set to store the vowels so that checking each character becomes easier
Variable to store number of consonant - vowel pairs
If the ith character is not found in the set , means it is a consonant And if the ( i + 1 ) th character is found in the set , means it is a vowel We increment the count of such pairs
Driver Code
Function to return the maximum size of the required interval
Insert the borders for array
Sort the elements in ascending order
To store the maximum size
To store the range [ L , R ] such that only v [ i ] lies within the range
Total integers in the range
Driver code
Function to find Length of the longest subarray such that Sum of the subarray is even
Check if Sum of complete array is even
if ( Sum % 2 == 0 ) : total Sum is already even
Find an index i such the a [ i ] is odd and compare Length of both halfs excluding a [ i ] to find max Length subarray
Driver Code
Function to generate the required matrix
Form cyclic array of elements 1 to n - 1
Store initial array into final array
Fill the last row and column with 0 's
Swap 0 and the number present at the current indexed row
Also make changes in the last row with the number we swapped
Print the final array
Driver code
Function to print the required permutation
Take x = 0 for simplicity
Calculate athe differences and store it in a vector
Preserve the original array
Check if athe consecutive elements have difference = 1
If consecutive elements don 't have  difference 1 at any position then  the answer is impossible
Else store the indices and values at those indices in a map and finainty print them
Driver code
Function to return the minimum value K such that K % p = 0 and q % k = 0
If K is possible
No such K is possible
Driver code
Function to return the sum of the digits of n
Function to sort the array according to the sum of the digits of elements
Vector to store digit sum with respective element
Inserting digit sum with element in the vector pair
Quick sort the vector , this will sort the pair according to sum of the digits of elements
Print the sorted vector content
Driver code
Python3 implementation of the approach
Function that returns True if sub - str1ing starting at i and ending at j in str1 is a palindrome
Function to count all palindromic substr1ing whose lwngth is a prime number
0 and 1 are non - primes
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .
To store the required number of sub - str1ings
Starting from the smallest prime till the largest Length of the sub - str1ing possible
If j is prime
Check all the sub - str1ings of Length j
If current sub - str1ing is a palindrome
Driver Code
Python 3 implementation of the approach
Function to return the minimum number of steps required
Driver Code
Function to return the greatest divisor that divides all the natural numbers in the range [ l , r ]
Driver Code
Function to return the probability of getting two consecutive heads
Formula derived from Bayes 's theorem
Driver code
given the probability of getting a head for both the coins
Function to check if bitwise OR of n numbers is even or odd
if at least one odd number is found , then the bitwise OR of all numbers will be odd
Bitwise OR is an odd number
Driver code
Python program to compare normal loops and loops with unrolling technique
n is 8 lakhs
t to note start time
to store the sum
Normal loop
to mark end time
to mark start time of unrolling
Unrolling technique ( assuming that n is a multiple of 8 ) .
to mark the end of loop
Recursive Python3 program to find value of Iterated Logarithm
Driver code
Iterative Python function to find value of Iterated Logarithm
An example of tail recursive function
The last executed statement is recursive call
Function to find the maximum of the count of positive or negative elements
Initialize the pointers
Find the value of mid
If element is negative then ignore the left half
If element is positive then ignore the right half
Return maximum among the count of positive & negative element
Driver Code
Function to perform all the queries operations on the given queue
Stores the count query of type 1
Event E1 : increase countE1
Event E2 : add the X in set
Event E3 : Find position of X
Initial position is ( position - countE1 )
If X is already removed or popped out
Finding the position of X in queue
Traverse set to decrease position of X for all the number removed in front
Print the position of X
Driver Code
Python 3 program for the above approach
Function to find the maximum index reachable
Store the answer
Store the maximum index possible i . e , N * ( N - 1 )
Add bthe previous elements
Run a loop
Binary Search
Driver Code
Function to find the K - th maximum element after upto C operations
Check for the base case
Stores the count iterations of BS
Create the left and right bounds of binary search
Perform binary search
Find the value of mid
Traverse the array
Update the ranges
Return the maximum value obtained
Driver Code
To check if selection of K elements is possible such that difference between them is greater than dif
Selecting first element in the sorted array
prev is the previously selected element initially at index 0 as first element is already selected
Check if selection of K - 1 elements from array with a minimum difference of dif is possible
If the current element is atleast dif difference apart from the previously selected element then select the current element and increase the count
If selection of K elements with a min difference of dif is possible then return true
Prev will become current element for the next iteration
If selection of K elements with minimum difference of dif is not possible then return false
Minimum largest difference possible is 1
Check if selection of K elements is possible with a minimum difference of dif
If dif is greater than previous ans we update ans
Continue to search for better answer . Try finding greater dif
K elements cannot be selected
Driver code
arr should be in a sorted order
Function to find the sum of remaining chocolate after making the horizontal cut at height mid
Stores the sum of chocolates
Traverse the array arr [ ]
If the height is at least mid
Return the possible sum
Function to find the maximum horizontal cut made to all the chocolates such that the sum of the remaining element is at least K
Ranges of Binary Search
Perform the Binary Search
Find the sum of removed after making cut at height mid
If the chocolate removed is same as the chocolate needed then return the height
If the chocolate removed is less than chocolate needed then shift to the left range
Otherwise , shift to the right range
Return the possible cut
Driver Code
Python implementation for the above approach
to get the ceil value
in case of odd number
in case of even number
check if time is less than or equals to given hour
as minimum speed of eating must be 1
Maximum speed of eating is the maximum bananas in given piles
Check if the mid ( hours ) is valid
If valid continue to search lower speed
If cant finish bananas in given hours , then increase the speed
Driver code
Python 3 implementation of the above approach
Function to find minimum possible sum of pair which breaks the array into 3 non - empty subarrays
prefixMin [ i ] contains minimum element till i
Driver Code
Given array
Function to check if the value of mid as the minimum number of hours satisfies the condition
Stores the sum of speed
Iterate over the range [ 0 , N ]
Find the value of speed
If the bike is considered to be fast add it in sum
Return the resultant sum
Function to find the minimum number of time required
Stores the range of Binary Search
Stores the minimum number of time required
Find the value of mid
If the mid is the resultant speed required
Update the ans and high
Otherwise
Return the minimum number of hours
Driver Code
Function to count the number of possible numbers divisible by 3
Calculate the sum
Store the answer
Iterate over the range
Decreasing the sum
Iterate over the range
Checking if the new sum is divisible by 3 or not
If yes increment the value of the count
Given number
Function to find if T number of teams can be formed or not
Store the sum of array elements
Traverse the array teams [ ]
Required Condition
Function to find the maximum number of teams possible
Lower and Upper part of the range
Perform the Binary Search
Find the value of mid
Perform the Binary Search
Otherwise , update the search range
Otherwise , update the search range
Driver Code
Function to find minimum operation require to make all elements 0
Stores the maximum element and its position in the array
Traverse the array
Update the maximum element and its index
Print the minimum number of operations required
Driver Code
Python 3 program for above approach
Function to check if the smallest value of v is achievable or not
Create array to store previous moves
Remove previous moves
Add balance to ans
Update contiguous subarray of length k
Number of moves should not exceed m
Function to find the maximum value of the smallest array element that can be obtained
Perform Binary search
Driver Code
Given Input
Function Call
Function to find the greatest altitude of the largest triangle triangle that can be inscribed in the rectangle
If L is greater than B
Variables to perform binary search
Stores the maximum altitude possible
Iterate until low is less than high
Stores the mid value
If mide is less than or equal to the B / 2
Update res
Update low
Update high
Print the result
Driver Code
Given Input
Function call
Function to print the frequency of each element of the sorted array
Stores the frequency of an element
Traverse the array arr [ ]
If the current element is equal to the previous element
Increment the freq by 1
Otherwise ,
Update freq
Print the frequency of the last element
Driver Code
Given Input
Function Call
Python3 program for the above approach
Function to count pairs whose sum lies over the range [ L , R ]
Sort the given array
Iterate until right > 0
Starting index of element whose sum with arr [ right ] >= L
Ending index of element whose sum with arr [ right ] <= R
Update the value of end
Add the count of elements to the variable count
Return the value of count
Driver Code
Function to determine if a given value can be median
Stores the prefix sum array
Traverse the matrix arr [ ] [ ]
Update Pre [ i + 1 ] [ j + 1 ]
If arr [ i ] [ j ] is less than or equal to mid
Stores the count of elements should be less than mid
Stores if the median mid can be possible or not
Iterate over the range [ K , N ]
Iterate over the range [ K , N ]
Stores count of elements less than or equal to the value mid in submatrix with bottom right vertices at ( i , j )
If X is less than or equal to required
Return flag
Function to find the maximum median of a subsquare of the given size
Stores the range of the search space
Iterate until low is less than high
Stores the mid value of the range [ low , high ]
If the current median can be possible
Update the value of low
Update the value of high
Return value stored in low as answer
Driver Code
Function to find the minimum number of days such that the sum of array elements >= K is at least X
Initialize the boundaries of search space
Perform the binary search
Find the value of mid
Traverse the array , arr [ ]
Find the value of arr [ i ] after mid number of days
Check if temp is not less than K
Update the value of sum
Check if the value of sum is greater than X
Update value of high
Update the value of low
Print the minimum number of days
Driver Code
Function to count the number of pairs ( i , j ) such that arr [ i ] * arr [ j ] is equal to abs ( i - j )
Stores the resultant number of pairs
Generate all possible pairs from the array arr [ ]
If the given condition satisfy then increment the value of count
Return the resultant count
Driver Code
Function to find smallest lexicogra - phically smallest string
Stores the index of last occuring 0
Stores the lexicographically smallest string
Traverse the S
If str [ i ] is 0
Assign i to lastZe
Traverse the str
If i is less than or equal to lastZe and str [ i ] is 0
If i is greater than lastZe
Return ans
Driver Code
Input
Function Call
Python3 program for the above approach
Function to add edges
Function to perform Depth First Search
Stores the entry time of a node
Stores the entering time of a node at depth d
Iterate over the children of node
Stores the Exit time of a node
Function to find number of nodes at distance K from node S in the subtree of S
Distance from root node
Index of node with greater tin value then tin [ S ]
Index of node with greater tout value then tout [ S ]
Answer to the Query
Function for performing DFS and answer to queries
DFS function call
Traverse the array Q [ ]
Driver Code
Input
Function call
Function to find the maximum number of boxes such that each box contains three shirts comprising of at least one white and black shirt
Stores the low and high pointers for binary search
Store the required answer
Loop while low <= high
Store the mid value
Check if the mid number of boxes can be used
Update answer and recur for the right half
Else , recur for the left half
Print result
Driver Code
Function to count the minimum number of swaps required to convert matrix A to matrix B
Stores number of cells such that matrix A contains 0 and matrix B contains 1
Stores number of cells such that matrix A contains 1 and matrix B contains 0
Iterate over the range [ 0 , N - 1 ]
Iterate over the range [ 0 , M - 1 ]
If A [ i ] [ j ] = 1 and B [ i ] [ j ] = 0
If A [ i ] [ j ] = 0 and B [ i ] [ j ] = 1
If count01 is equal to count10
Otherwise ,
Driver Code
Function to count the elements with sum of the first that many natural numbers less than or equal to K
If K equals to 0
Stores sum of first i natural numbers
Stores the result
Iterate over the range [ 1 , N ]
Increment sum by i
Is sum is less than or equal to K
Otherwise ,
Return res
Driver Code
Input
Function call
Function to remove last occurrence of W from S
If M is greater than N
Iterate while i is greater than or equal to 0
of W has been found or not
Iterate over the range [ 0 , M ]
If S [ j + 1 ] is not equal to W [ j ]
Mark flag true and break
If occurrence has been found
Delete the subover the range [ i , i + M ]
Resize the S
Return S
Driver Code
Input
Function call
Function to rearrange array such that count of element that are smaller than their adjacent elements is maximum
Stores the rearranged array
Stores the maximum count of elements
Sort the given array
Place the smallest ( N - 1 ) / 2 elements at odd indices
Placing the rest of the elements at remaining indices
If no element of the array has been placed here
Print the resultant array
Input
Function call
Python3 program for the above approach
Function to check whether two sentences can be made equal by inserting at most one sentence in one of them
Size of sentence S1
Size of sentence S2
Check if S1 and S2 are of equal sizes
If both sentences are the same , return True
Otherwise , return false
Declare 2 deques X and Y
Insert ' ▁ ' at the end of both sentences so that the last word can be identified
Traverse the sentence S1
Push temp in deque when a space comes in sentence i . e a word has been formed
temp stores words of the sentence
Traverse the sentence S1
Push temp in deque when a space comes in sentence i . e a word has been formed
temp stores words of the sentence
Check for prefixes of both sentences
Pop the prefix from both deques till they are equal
Check for suffixes of both sentences
Pop the suffix from both deques till they are equal
If any of the deques is empty return True
If both the deques are not empty return false
Driver code
Input
Function call
Function to calculate the repeating character in a given permutation
variables to store maximum element and sum of the array respectively .
calculate sum of array
calculate maximum element in the array
calculating sum of permutation
calculate required answer
Driver code
Input
Function call
Function to calculate maximum value that can be placed at the Kth index in a distribution in which difference of adjacent elements is less than 1 and total sum of distribution is M .
Variable to store final answer
Variables for binary search
Binary search
Variable for binary search
Variable to store total sum of array
Number of indices on the left excluding the Kth index
Number of indices on the left excluding the Kth index
Add mid to final sum
Distribution on left side is possible
Sum of distribution on the left side
Sum of distribution on the left side with ( L - mid ) 1 s
Distribution on right side is possible
Sum of distribution on the right side
Sum of distribution on the left side with ( R - mid ) 1 s
Distribution is valid
Return answer
Input
Function call
Stores the required answer
Stores the graph
Function to add edges
Function to calculate the minimum time required to color all the edges of a tree
Starting from time = 0 , for all the child edges
If the edge is not visited yet .
Time of coloring of the current edge
If the parent edge has been colored at the same time
Update the maximum time
Recursively call the function to its child node
Driver Code
Function call
Finally , print the answer
Function to find the largest number k such that both k and - k are present in the array
Stores the resultant value of K
Sort the array arr [ ]
Initialize two variables to use two pointers technique
Iterate until the value of l is less than r
Find the value of the sum
If the sum is 0 , then the resultant element is found
If the sum is negative
Otherwise , decrement r
Driver Code
Function to find the element that are larger than half of elements of the array
Find the value of mid
Stores the maximum element
Stores the frequency of each array element
Traverse the array in the reverse order
Decrement the value of count [ i ] and mid
Prthe current element
Check if the value of mid is equal to 0
Driver Code
Function to find probability such that x < y and X belongs to arr1 [ ] and Y belongs to arr2 [ ]
Stores the length of arr1
Stores the length of arr2
Stores the result
Traverse the arr1 [ ]
Stores the count of elements in arr2 that are greater than arr [ i ]
Traverse the arr2 [ ]
If arr2 [ j ] is greater than arr1 [ i ]
Increment res by y
Update the value of res
Return resultant probability
Driver Code
Function to find probability such that x < y and X belongs to arr1 [ ] & Y belongs to arr2 [ ]
Stores the length of arr1
Stores the length of arr2
Stores the result
Sort the arr2 [ ] in the ascending order
Traverse the arr1 [ ]
Stores the count of elements in arr2 that are greater than arr [ i ]
Increment res by y
Update the resultant probability
Return the result
Function to return the count of elements from the array which are greater than k
Stores the index of the leftmost element from the array which is at least k
Finds number of elements greater than k
If mid element is at least K , then update the value of leftGreater and r
Update leftGreater
Update r
If mid element is at most K , then update the value of l
Return the count of elements greater than k
Driver code
Function to find the minimum cost of flooring with the given tiles
Store the size of the 2d array
Stores the minimum cost of flooring
Traverse the 2d array row - wise
If the current character is ' * ' , then skip it
Choose the 1 * 1 tile if j is m - 1
If consecutive ' . ' are present , the greedily choose tile with the minimum cost
Otherwise choose the 1 * 1 tile
Print the minimum cost
Driver Code
Python3 program for the above approach
Function to count number of inversions in a permutation of first N natural numbers
Store array elements in sorted order
Store the count of inversions
Traverse the array
Store the index of first occurrence of arr [ i ] in vector V
Add count of smaller elements than current element
Erase current element from vector and go to next index
Print the result
Driver Code
Given Input
Function Call
Function to find pairs with XOR equal to A and OR equal to B
Iterate from 1 to B
Check if ( i OR y ) is B
Driver Code
Function to find the first index with value is at least element
Update the value of left
Binary search for the element
Find the middle element
Check if the value lies between the elements at index mid - 1 and mid
Check in the right subarray
Update the value of left
Check in left subarray
Update the value of right
Function to count the number of distinct elements over the range [ L , R ] in the sorted sequence
Stores the count of distinct elements
Create the prefix sum array
Update the value of count
Update the value of pref [ i ]
Calculating the first index of L and R using binary search
Print the resultant count
Driver Code
Function to find the number of substrings having the frequency of ' a ' greater than frequency of 'c
Stores the size of the string
Stores the resultant count of substrings
Traverse the given string
Store the difference between frequency of ' a ' and 'c
Traverse all substrings beginning at index i
If the frequency of ' a ' is greater than 'c
Prthe answer
Drive Code
Function to check if a character is alphabet or not
Function to check if a character is a numeric or not
Function to find ID and Domain name from a given
Stores ID and the domain names
Stores the words of S
Stores the temporary word
Traverse the S
If the current character is space
Push the curr in words
Update the curr
Otherwise
If curr is not empty
If length of ss is 10
Traverse the ss
If j is in the range [ 5 , 9 )
If current character is not numeric
Mark flag 1
Otherwise
If current character is not alphabet
Mark flag 1
If flag is false
Assign ss to ID
If sub formed by the first 3 character is " www " and last 3 character is " moc "
Update the domain name
Print ID and Domain
Driver Code
Function to check if the weights can be delivered in D days or not
Stores the count of days required to ship all the weights if the maximum capacity is mx
Traverse all the weights
If total weight is more than the maximum capacity
If days are more than D , then return false
Return true for the days < D
Function to find the least weight capacity of a boat to ship all the weights within D days
Stores the total weights to be shipped
Find the sum of weights
Stores the maximum weight in the array that has to be shipped
Store the ending value for the search space
Store the required result
Perform binary search
Store the middle value
If mid can be shipped , then update the result and end value of the search space
Search for minimum value in the right part
Print the result
Driver Code
Function to find the sum of distances of all points from a given point
Stores sum of distances
Traverse the array
Return the sum
Function to find such a point having sum of distances of all other points from this point equal to K
If N is odd keep left as arr [ n / 2 ] else keep left as arr [ n / 2 - 1 ] + 1 ;
Keep right as arr [ N - 1 ]
Perform binary search in the right half
Calculate the mid index of the range
If temp is equal to K
Print the value of mid
If the value of K < temp
Update right to mid - 1
If the value of K > temp
Update left to mid + 1
Update the value of left
Update the value of right
Perform binary search on the left half
Calculate the mid index of the range
If temp is equal to K
Print mid
if K > temp
Update right to mid - 1
If K < temp
Update left to mid + 1
If no such point found
Driver Code
Function to generate an array containing the most frequent greater element on the right side of each array element
Stores the generated array
Traverse the array arr [ ]
Store the result for the current index and its frequency
Iterate over the right subarray
Store the frequency of the current array element
If the frequencies are equal
Update ans to smaller of the two elements
If count of new element is more than count of ans
Insert answer in the array
Print the resultant array
Driver Code
Given Input
Function to find the smallest index that splits the array into two subarrays with equal product
Stores the product of the array
Traverse the given array
Stores the product of left and the right subarrays
Traverse the given array
Update the products
Check if product is equal
Print resultant index
If no partition exists , then print - 1.
Driver Code
Function to count the number of triplets having difference between adjacent elements equal to D
Stores the frequency of array elements
Stores the count of resultant triplets
Traverse the array
Check if arr [ i ] - D and arr [ i ] - 2 * D exists in the Hashmap or not
Update the value of ans
Increase the frequency of the current element
Return the resultant count
Driver Code
Python3 program for the above approach
Function to find an index in the array having sum of prime numbers to its left and right equal
Stores the maximum value present in the array
Stores all positive elements which are <= max_value
If 1 is present
Remove 1
Sieve of Eratosthenes to store all prime numbers which are <= max_value in the Map
Erase non - prime numbers
Stores the sum of prime numbers from left
Stores the sum of prime numbers to the left of each index
Stores the sum of prime numbers to the left of the current index
Add current value to the prime sum if the current value is prime
Stores the sum of prime numbers from right
Stores the sum of prime numbers to the right of each index
Stores the sum of prime numbers to the right of the current index
Add current value to the prime sum if the current value is prime
Traverse through the two arrays to find the index
Compare the values present at the current index
Return the index where both the values are same
No index is found .
Driver Code
Given array arr [ ]
Size of Array
Function Call
Function to find the reduced form of the given array arr [ ]
Stores the sorted form of the the given array arr [ ]
Sort the array brr [ ]
Traverse the given array arr [ ]
Perform the Binary Search
Calculate the value of mid
Prthe current index and break
Update the value of l
Update the value of r
Driver Code
Python 3 program for the above approach
Function to find the index of the array such that the count of prime numbers to its either ends are same
Store the maximum value in the array
Traverse the array arr [ ]
/ Stores all the numbers
Iterate over the range [ 1 , Max ]
Increment the value of st [ i ]
Removes 1 from the map St
Perform Sieve of Prime Numbers
While i * j is less than the maxValue
If i * j is in map St
Erase the value ( i * j )
Increment the value of j
Stores the count of prime from index 0 to i
Stores the count of prime numbers
Traverse the array arr [ ]
If arr [ i ] is present in the map st
Stores the count of prime from index i to N - 1
Stores the count of prime numbers
Iterate over the range [ 0 , N - 1 ] in reverse order
If arr [ i ] is in map st
Iterate over the range [ 0 , N - 1 ]
If prefix [ i ] is equal to the Suffix [ i ]
Return - 1 if no such index is present
Driver Code
Function to count the number of pairs from the array having sum S
Stores the total count of pairs whose sum is 2 * S
Generate all possible pairs and check their sums
If the sum is S , then increment the count
Return the total count of pairs
Function to count of pairs having whose average exists in the array
Initialize the count
Use set to remove duplicates
Add elements in the set
For every sum , count all possible pairs
Return the total count
Driver Code
Python3 program for the above approach
Function to check if N is power of 2 or not
Base Case
Return true if N is power of 2
Function to print array of strings in ascending order
Sort strings in ascending order
Print the array
Function to sort the strings after modifying each string according to the given conditions
Store the frequency of each characters of the string
Stores the required array of strings
Traverse the array of strings
Temporary string
Stores frequency of each alphabet of the string
Update frequency of S [ i ] [ j ]
Traverse the map freq
Check if the frequency of i . first is a power of 2
Update string st
Clear the map
Null string
Sort the string in descending order
Update res
Print the array of strings
Driver Code
Function to modify given string by replacing characters
Store the size of string and the number of pairs
Initialize 2 character arrays
Traverse the string s Update arrays arr [ ] and brr [ ]
Traverse the array of pairs p
a -> Character to be replaced b -> Replacing character
Iterate over the range [ 0 , 25 ]
If it is equal to current character , then replace it in the array b
Print the array brr [ ]
Driver Code
Python3 program for the above approach
Function to find all the prime numbers using Sieve of Eratosthenes
Set 0 and 1 as non - prime
If p is a prime
Set all multiples of p as non - prime
Function to find the smallest semi - prime number having a difference between any of its two divisors at least N
Stores the prime numbers
Fill the prime array
Initialize the first divisor
Find the value of the first prime number
Initialize the second divisor
Find the second prime number
Print the semi - prime number
Driver Code
Function to check if N can be represented as the product of two perfect cubes or not
Stores the perfect cubes
Traverse the Map
Stores the first number
Stores the second number
Search the pair for the first number to obtain product N from the Map
If N cannot be represented as the product of the two positive perfect cubes
Driver Code
Function to check if the number N can be represented as the product of two perfect cubes or not
If cube of cube_root is N
Otherwise , prNo
Driver Code
Function to check if side of square X can pack all the N rectangles or not
Find the number of rectangle it can pack
If val is atleast N , then return true
Otherwise , return false
Function to find the size of the smallest square that can contain N rectangles of dimensions W * H
Stores the lower bound
Stores the upper bound
Iterate until i is less than j
Calculate the mid value
If the current size of square cam contain N rectangles
Otherwise , update i
Return the minimum size of the square required
Driver Code
Function Call
Python 3 program for the above approach
Function to count the integers up to N that can be represented as a ^ b , where a & b > 1
Initialize a HashSet
Iterating over the range [ 2 , sqrt ( N ) ]
Generate all possible power of x
Multiply x by i
If the generated number lies in the range [ 1 , N ] then insert it in HashSet
Print the total count
Driver code
Function to count the number of set bits in the integer n
Stores the count of set bits in n
Return the count
Function to find the maximum product of pair of strings having no common characters
Stores the integer equivalent of the strings
Traverse the array of strings
Traverse the current string
Store the current bit position in bits [ i ]
Store the required result
Traverse the array , bits [ ] to get all unique pairs ( i , j )
Check whether the strings have no common characters
Update the overall maximum product
Print the maximum product
Driver Code
Function to check if a string S is a palindrome
Function to print the modified string after reversing teh order of occurrences of all palindromic words in the sentence
Stores the palindromic words
Stores the words in the list
Traversing the list
If current word is a palindrome
Update newlist
Reverse the newlist
Traverse the list
If current word is a palindrome
Update lis [ i ]
Increment j
Print the updated sentence
Driver Code
Function to count the minimum number of operations required to convert the array A [ ] into array B [ ]
Stores the index in the first permutation A [ ] which is same as the subsequence in B [ ]
Find the first i elements in A [ ] which is a subsequence in B [ ]
If element A [ i ] is same as B [ j ]
Return the count of operations required
Driver Code
Function to check if all array elements can be reduced to at most mid by at most K splits
Stores the number of splits required
Traverse the array arr [ ]
Update count
If possible , return true . Otherwise return false
Function to find the minimum possible value of maximum array element that can be obtained by at most K splits
Set lower and upper limits
Perform Binary Search
Calculate mid
Check if all array elements can be reduced to at most mid value by at most K splits
Update the value of hi
Otherwise
Update the value of lo
Return the minimized maximum element in the array
Driver Code
Function to find maximum value of X such that | A [ i ] - X | a K
Stores the smallest array element
Store the possible value of X
Traverse the array A [ ]
If required criteria is not satisfied
Update ans
Print the result
Driver Code
Python3 program for the above approach
Function to check if a number is prime or not
Base Cases
Check if n is divisible by 2 or 3
Iterate over every 6 number from the range [ 5 , sqrt ( N ) ]
If n is found to be non - prime
Otherwise , return true
Function to check if a number can be represented as the sum of a prime number and a perfect square or not
Stores all perfect squares less than N
Store the perfect square in the array
Iterate over all perfect squares
Store the difference of perfect square from n
If difference is prime
Update flag
Break out of the loop
If N is the sum of a prime number and a perfect square
Driver Code
Python3 program for the above approach
Function to store all prime numbers less than or equal to N
Update prime [ 0 ] and prime [ 1 ] as false
Iterate over the range [ 2 , sqrt ( N ) ]
If p is a prime
Update all multiples of p which are <= n as non - prime
Function to check whether a number can be represented as the sum of a prime number and a perfect square
Stores all the prime numbers less than or equal to n
Update the array prime [ ]
Iterate over the range [ 0 , n ]
If current number is non - prime
Update difference
If difference is a perfect square
If true , update flag and break out of loop
If N can be expressed as sum of prime number and perfect square
Driver Code
Function to check if there exists any subarray of length M repeating at least K times consecutively
Iterate from i equal 0 to M
Iterate from j equals 1 to K
If elements at pos + i and pos + i + j * M are not equal
Function to check if a subarray repeats at least K times consecutively or not
Iterate from ind equal 0 to M
Check if subarray arr [ i , i + M ] repeats atleast K times or not
Otherwise , return false
Driver Code
Function to check if any subarray of length M repeats at least K times consecutively or not
Stores the required count of repeated subarrays
Check if the next continuous subarray has equal elements
Check if K continuous subarray of length M are found or not
If no subarrays are found
Driver Code
Function to count number of digits that are common in both N and M
Stores the count of common digits
Stores the count of digits of N
Stores the count of digits of M
Iterate over the digits of N
Increment the count of last digit of N
Update N
Iterate over the digits of M
Increment the count of last digit of M
Update M
Iterate over the range [ 0 , 9 ]
If freq1 [ i ] and freq2 [ i ] both exceeds 0
Increment count by 1
Return the count
Driver Code
Input
Function to find the minimum possible value of N such that sum of natural numbers from K to N is at least X
If K is greater than X
Stores value of minimum N
Stores the sum of values over the range [ K , ans ]
Iterate over the range [ K , N ]
Check if sum of first i natural numbers is >= X
Print the possible value of ans
Driver Code
Function to check if the sum of natural numbers from K to N is >= X
Function to find the minimum value of N such that the sum of natural numbers from K to N is at least X
If K is greater than X
Perform the Binary Search
If the sum of the natural numbers from K to mid is atleast X
Update res
Update high
Otherwise , update low
Print the value of res as the answer
Driver Code
Function to count the number of pairs having product of indices equal to the product of elements at that indices
Stores the count of valid pairs
Generate all possible pairs
If the condition is satisfied
Increment the count
Return the total count
Driver Code
Python3 program for the above approach
Function to find the maximum remainder of sum of a pair of array elements modulo K
Stores all even numbers
Stores all odd numbers
Segregate remainders of even and odd numbers in respective sets
Stores the maximum remainder obtained
Find the complement of remainder of each even number in odd set
Find the complement of remainder x
Print the answer
Driver code
Given array
Size of the array
Given value of K
Python3 program for the above approach
Function to perform DFS Traversal from source node to the deepest node and update maximum distance to the deepest node
Mark source as visited
Update the maximum distance
Traverse the adjacency list of the current source node
Recursively call for the child node
Backtracking step
Function to calculate maximum length of the path ending at vertex V from any source node
Stores the maximum length of the path ending at vertex V
Stores the size of the matrix
Stores the adjacency list of the given graph
Traverse the matrix to create adjacency list
Perform DFS Traversal to update the maximum distance
Driver Code
Function to find the maximum length of alternating occurrences of a pair of characters in a string s
Stores the next character for alternating sequence
Stores the length of alternating occurrences of a pair of characters
Traverse the given string
If current character is same as the required character
Increase length by 1
Reset required character
Return the length
Function to find minimum characters required to be deleted from S to obtain an alternating sequence
Stores maximum length of alternating sequence of two characters
Stores length of the string
Generate every pair of English alphabets
Function call to find length of alternating sequence for current pair of characters
Update len to store the maximum of len and newLen in len
Return n - len as the final result
Driver Code
Given Input
Function call to find minimum characters required to be removed from S to make it an alternating sequence of a pair of characters
Python3 program for the above approach
Function to calculate modulo inverse of a w . r . t m using Extended Euclid Algorithm
Base Case
Perform extended euclid algorithm
q is quotient
m is remainder now , process same as euclid 's algorithm
If x1 is negative
Make x1 positive
Function to implement Chinese Remainder Theorem to find X
Stores the product of array elements
Traverse the array
Update product
Initialize the result
Apply the above formula
Function to calculate the product of all elements of the array a [ ]
Stores product of all array elements
Traverse the array
Return the product
Function to find the value of X that satisfies the given condition
Stores the required smallest value using Chinese Remainder Theorem
Stores the product of all array elements
The equation is Y + K * M >= P Therefore , calculate K = ceil ( ( P - Y ) / M )
So , X = Y + K * M
Print the resultant value of X
Driver Code
Function to count minimum number of jumps required to sort the array
Stores minimum number of jumps
Stores distances of jumps
Stores the array elements with their starting indices
Push the pairs { arr [ i ] , i + 1 } into the vector of pairs vect
Update vect
Populate the array temp [ ]
Update temp [ arr [ i ] ]
Sort the vector in the ascending order
Jump till the previous index <= current index
Update vect [ i ]
Increment the number of jumps
Print the minimum number of jumps required
Driver Code
Input
Size of the array
Function to count the total number of gates required to realize the boolean expression S
Length of the string
Stores the count of total gates
Traverse the string
AND , OR and NOT Gate
Print the count of gates required
Driver Code
Input
Function call to count the total number of gates required
Function to find pairs ( i , j ) such that | arr [ i ] | and | arr [ j ] | lies in between | arr [ i ] - arr [ j ] | and | arr [ i ] + arr [ j ] |
Calculate absolute value of all array elements
Sort the array
Stores the count of pairs
Traverse the array
Increment left
Add to the current count of pairs
Print the answer
Driver Code
Python 3 program for the above approach
Function to find the difference between the maximum and minimum sum of a pair ( arr [ i ] , arr [ j ] ) from the array such that i < j and arr [ i ] < arr [ j ]
Stores the maximum from the suffix of the array
Set the last element
Traverse the remaining array
Update the maximum from suffix for the remaining indices
Stores the maximum sum of any pair
Calculate the maximum sum
Stores the maximum sum of any pair
Stores the minimum of suffixes from the given array
Set the last element
Traverse the remaining array
Update the maximum from suffix for the remaining indices
Calculate the minimum sum
Return the resultant difference
Driver Code
Function Call
Function to count the minimum number of swaps required to make the parity of array elements same as their indices
Stores count of even and odd array elements
Traverse the array
Check if indices and array elements are not of the same parity
If index is even
Update even
Update odd
Condition for not possible
Otherwise
Driver Code
Python3 program of the above approach
Function to find the smallest substring occurring only once
Stores all occurences
Generate all the substrings
Avoid multiple occurences
Append all substrings
Take into account all the substrings
Iterate over all unique substrings
If frequency is 1
Append into fresh list
Initialize a dictionary
Append the keys
Traverse the dictionary
Print the minimum of dictionary
Driver Code
Function to count the minimum number of insertions required
Stores the number of insertions required
Traverse the array
Store the minimum array element
Store the maximum array element
Checking condition
Increase current count
Return the count of insertions
Driver Code
Function to calculate the sum of numbers formed by consecutive sequences of digits present in the string
Stores consecutive digits present in the string
Stores the sum
Iterate over characters of the input string
If current character is a digit
Append current digit to curr
Add curr to sum
Reset curr
Driver Code
Function to find a triplet such that i < j < k and arr [ i ] < arr [ j ] and arr [ j ] > arr [ k ]
Traverse the array
Condition to satisfy for the resultant triplet
Otherwise , triplet doesn 't exist
Driver Code
Python3 program for the above approach
Function to find elements present in the array b [ ] which are concatenation of any pair of elements in the array a [ ]
Stores if there doesn 't any such  element in the array brr[]
Stored the size of both the arrays
Store the presence of an element of array a [ ]
Traverse the array a [ ]
Traverse the array b [ ]
Traverse over all possible concatenations of b [ i ]
Update right and left parts
Check if both left and right parts are present in a [ ]
Driver Code
Function to count subarrays with even product
Stores count of subarrays with even product
Traverse the array
Initialize product
Update product of the subarray
Print total count of subarrays
Driver Code
Input
Length of an array
Function call to count subarrays with even product
Stores the count of pairs
Store the adjacency list of the connecting vertex
Function for theto perform DFS traversal of the given tree
Traverse the adjacency list of the current node u
If the current node is the parent node
Add number of ancestors , which is same as depth of the node
Function for DFS traversal of the given tree
Print result
Function to find the count of pairs such that the minimum distance between them is equal to the difference between distance of the nodes from root node
Add edges to adj [ ]
Driver Code
Python3 program for the above approach
Function to count the number of steps required to reduce val to 1 by the given operations
Base Case
If val is even , divide by 2
Otherwise , multiply it by 3 and increment by 1
Function to find Kth smallest count of steps required for numbers from the range [ L , R ]
Stores numbers and their respective count of steps
Count the number of steps for anumbers from the range [ L , R ]
Insert in the vector
Sort the vector in ascending order w . r . t . to power value
Print the K - th smallest number
Driver Code
Structure of a Tree Node
Function to convert binary number to its equivalent decimal value
Function to calculate sum of decimal equivalent of binary numbers of node values present at each level
Push root node into queue
Connect nodes at the same level to form a binary number
Stores the front element of the queue
Append the value of the current node to eachLvl
Insert the Left child to queue , if its not NULL
Insert the Right child to queue , if its not NULL
Decrement length by one
Add decimal equivalent of the binary number formed on the current level to ans
Finally print ans
Given Tree
Function Call
Function to find the minimum increments required to difference between all pairs of array elements even
Store the count of odd and even numbers
Traverse the array
Increment evenCnt by 1
Increment eveCnt by 1
Prthe minimum of oddCnt and eveCnt
Driver Code
Function to find the minimum number of increments required to make the array even - odd alternately or vice - versa
Store the minimum number of increments required
Traverse the array arr [ ]
Increment forEven if even element is present at an odd index
Increment forEven if odd element is present at an even index
Return the minimum number of increments
Driver Code
Function to find the minimum sum for each query after removing element from either ends till each value Q [ i ]
Stores the prefix sum from both the ends of the array
Traverse the array from front
Insert it into the map m1
Traverse the array in reverse
Insert it into the map m2
Traverse the query array
Print the minimum of the two values as the answer
Driver Code
Function Call
Function to check if string s2 contains anagram of the string s1 as its substring
Stores frequencies of characters in substrings of s2
Stores frequencies of characters in s1
If length of s2 exceeds length of s1
Store frequencies of characters in first substring of length s1len in string s2
Perform Sliding Window technique
If hashmaps are found to be identical for any substring
Driver Code
Function to check if k '0' s can be flipped such that the string does not contain any pair of adjacent '1' s
Store the count of flips
Variable to iterate the string
Iterate over characters of the string
If the current character is '1' , increment i by 2
Otherwise , 3 cases arises
If the current index is the starting index
If next character is '0
Increment i by 1
If the current index is the last index
If previous character is '0
For remaining characters
If both the adjacent characters are '0
If cnt is at least K , print " Yes "
Otherwise , print " No "
Driver code
Function to count the maximum number of intervals that an interval can intersect
Store the required answer
Traverse all the intervals
Store the number of intersecting intervals
Iterate in the range [ 0 , n - 1 ]
Check if jth interval lies outside the ith interval
Update the overall maximum
Print the answer
Driver code
Function Call
Function to check if it is possible to move all disks to a single rod
Stores if it is possible to move all disks to a single rod
Traverse the array
If i - th element is smaller than both its adjacent elements
If flag is true
Otherwise
Driver Code
Function to find the smallest number which doesn 't divides any integer in the given array arr[]
Traverse the array arr [ ]
Maximum array element
Initialize variable
Traverse from 2 to max
Stores if any such integer is found or not
If any array element is divisible by j
Smallest integer
Prthe answer
Driver Code
Function Call
Function to find duplicate characters in str1ing without using any additional data str1ucture
Check if ( i + ' a ' ) is present in str1 at least once or not .
Check if ( i + ' a ' ) is present in str1 at least twice or not .
Iterate over the characters of the str1ing str1
If str1 [ i ] has already occurred in str1
Set ( str1 [ i ] - ' a ' ) - th bit of second
Set ( str1 [ i ] - ' a ' ) - th bit of second
Iterate over the range [ 0 , 25 ]
If i - th bit of both first and second is Set
Driver Code
Function to calculate the minimum number of operations required to make all characters of the string same
Stores count of operations
Traverse the string
Check if adjacent characters are same or not
Increment count
Prthe count obtained
Driver Code
Function to count the number of pairs as per the given conditions
Initialize array set_bits as 0
Store the total number of required pairs
Traverse the array arr [ ]
Store arr [ i ] in x
Store the position of the leftmost set bit in arr [ i ]
Increase bit position
Divide by 2 to shift bits in right at each step
Count of pairs for index i till its set bit position
Increasing count of set bit position of current elelement
Prthe answer
Driver Code
Function Call
Function to calculate the minimum sum from either end of the arrays for the given queries
Traverse the query [ ] array
Stores sum from start and end of the array
Calculate distance from start
Calculate distance from end
Driver Code
Function to find the minimum sum for the given queries
Stores prefix and suffix sums
Stores pairs of prefix and suffix sums
Traverse the array
Add element to prefix
Store prefix for each element
Traverse the array in reverse
Add element to suffix
Storing suffix for each element
Traverse the array queries [ ]
Minimum of suffix and prefix sums
Driver Code
Function to find the maximum element after removing elements in range [ l , r ]
Store prefix maximum element
Store suffix maximum element
Prefix max till first index is first index itself
Traverse the array to fill prefix max array
Store maximum till index i
Suffix max till last index is last index itself
Traverse the array to fill suffix max array
Store maximum till index i
Traverse all queries
Store the starting and the ending index of the query
Edge Cases
Otherwise
Driver Code
Python3 implementation for the above approach
Function to find the first occurence for a given range
N = length of string
M = length of queries
Stores the indices of a character
Traverse the string
Push the index i into the vector [ s [ i ] ]
Traverse the query
Stores the value L
Stores the value R
Stores the character C
Find index >= L in the vector v
If there is no index of C >= L
Stores the value at idx
If idx > R
Otherwise
Driver Code
Function to prthe element which differs in parity
Stores the count of odd and even array elements encountered
Stores the indices of the last odd and even array elements encountered
Traverse the array
If array element is even
Otherwise
If only one odd element is present in the array
If only one even element is present in the array
Given array
Size of the array
Function to find the minimum length by replacing at with @ and dot with ' . ' such that the string is valid email
Stores string by replacing at with @ and dot with ' . ' such that the string is valid email
append first character
Stores index
Check if at ( @ ) already included or not
Iterate over characters of the string
at can be replaced at most once
Update ans
Update i
Update notAt
If current substring found dot
Update ans
Update i
Update ans
Update i
Driver Code
To display the result
Function to check if sum of first N natural numbers is >= X
Finds minimum value of N such that sum of first N natural number >= X
Check if sum of first i natural number >= X
Driver Code
Input
Finds minimum value of N such that sum of first N natural number >= X
Function to check if a number is divisible by all of its non - zero digits or not
Stores the number
Iterate over the digits of the numbers
If digit of number is non - zero
If number is not divisible by its current digit
Update n
Function to count of numbers which are divisible by all of its non - zero digits in the range [ 1 , i ]
Stores count of numbers which are divisible by all of its non - zero digits in the range [ 1 , i ]
Iterate over the range [ 1 , Max ]
Update
Traverse the array , arr [ ]
Driver Code
Function to find length of longest subset such that subset { arr [ i ] , arr [ arr [ i ] ] , . . }
Stores length of the longest subset that satisfy the condition
Traverse in the array , arr [ ]
If arr [ i ] equals to i
Update res
Count of elements in a subset
Stores index of elements in the current subset
Calculate length of a subset that satisfy the condition
Make visited the current index
Update curr_index
Update count
Update res
Driver Code
Python3 implementation of the above approach
Stores all prime numbers up to 2 * 10 ^ 5
Function to generate all prime numbers up to 2 * 10 ^ 5 using Sieve of Eratosthenes
Mark 0 and 1 as non - prime
If i is prime
Mark all its factors as non - prime
If current number is prime
Store the prime
Function to count numbers in the range [ L , R ] having exactly 5 factors
Stores the required count
Driver Code
Function to count the remaining elements in the arrays
Stores the count of 1 s in L1
Store the count of 0 s in L2
Traverse the array L1
If condition is True
Increment one by 1
Increment zero by 1
Stores the index after which no further removals are possible
Traverse the array L2
If condition is True
Decrement one by 1
If one < 0 , then break out of the loop
Decrement zero by 1
If zero < 0 , then break out of loop
Print the answer
Driver Code
Function Call
Function to calculate the count of similar rectangles
Driver Code
Input
Function to find the index with minimum score
Stores the score of current index
Traverse the array in reverse
Update minimum score
Print the index with minimum score
Driver Code
Function to minimize length of string S after removing all occurrences of string T as substring
Count of characters required to be removed
Iterate over the string
Insert the current character to temp
Check if the last M characters forms t or not
Getting the last M characters . If they are equal to t then remove the last M characters from the temp string
Incrementing subtract by M
Removing last M characters from the string
Prthe final answer
Driver Code
Given string S & T
Length of string S
Length of string T
Prints the count of operations required
Function to find the minimum count of swaps required between the two arrays to make the sum of arr1 [ ] greater than that of arr2 [ ]
Stores the sum of the two arrays
Calculate sum of arr1 [ ]
Calculate sum of arr2 [ ]
Sort the arrays arr1 [ ] and arr2 [ ]
Traverse the array arr [ ]
If the sum1 is less than or equal to sum2
Swapping the elements
Update the sum1 and sum2
Increment the count
Return the final count
Driver Code
Function Call
Function to check a digit occurs in the digit of K or not
Iterate over all possible digits of K
If current digit equal to digit
Update K
Function to find the count of array elements whose distinct digits are a subset of digits of K
Stores count of array elements whose distinct digits are subset of digits of K
Traverse the array , [ ] arr
Stores the current element
Check if all the digits arr [ i ] is a subset of the digits of K or not
Iterate over all possible digits of arr [ i ]
Stores current digit
If current digit does not appear in K
Update flag
Update no
If all the digits arr [ i ] appear in K
Update count
Finally print count
Driver Code
Python3 program to implement the above approachf
Function to find the smallest index of an array element whose value is less than or equal to Q [ i ]
Stores size of array
Stores coun of queries
Store array elements along with the index
Store smallest index of an array element whose value is greater than or equal to i
Traverse the array
Insert { arr [ i ] , i } into storeArrIdx [ ]
Sort the array
Sort the storeArrIdx
Stores index of arr [ N - 1 ] in sorted order
Traverse the array storeArrIdx [ ]
Update minIdx [ i ]
Traverse the array Q [ ]
Store the index of lower_bound of Q [ i ]
If no index found whose value greater than or equal to arr [ i ]
Prsmallest index whose value greater than or equal to Q [ i ]
Driver Code
Utility function to check if subarray of size K exits whose XOR of elements equal to XOR ofremaning array elements
Find XOR of whole array
Find XOR of first K elements
Adding XOR of next element
Removing XOR of previous element
Check if XOR of current subarray matches with the XOR of remaining elements or not
Function to check if subarray of size K exits whose XOR of elements equal to XOR ofremaning array elements
Driver Code
Given array
Size of the array
Given K
Function Call
Function to find the count of ordered pairs having even sum
Stores count of even numbers in the range [ L , R ]
If L is even
Update count_even
Update count_odd
Stores count of odd numbers in the range [ L , R ]
Update count_odd
Update count_odd
Stores count of pairs whose sum is even and both elements of the pairs are also even
Stores count of pairs whose sum is even and both elements of the pairs are odd
Print total ordered pairs whose sum is even
Driver Code
Given L & R
Function Call
Python3 program for the above approach
Function to find minimum count of array elements found by repeatedly applying Randomized Binary Search
Stores count of array elements
smallestRight [ i ] : Stores the smallest array element on the right side of i
Update smallestRight [ 0 ]
Traverse the array from right to left
Update smallestRight [ i ]
Stores the largest element upto i - th index
Stores the minimum count of elements found by repeatedly applying Randomized Binary Search
If largest element on left side is less than smallest element on right side
Update ans
Update mn
Given array
Function Call
Function to count numbers in range [ L , R ] having same first and last digit in the binary representation
Given range [ L , R ]
Function Call
Function to check if a number is equal to the reverse of digits of other number
Stores reverse of digits of rightSum
Stores rightSum
Calculate reverse of digits of temp
Update rev
Update temp
If reverse of digits of rightSum equal to leftSum
Function to find the index that satisfies the condition
Stores sum of array elements on right side of each index
Stores sum of array elements on left side of each index
Traverse the array
Update rightSum
Traverse the array
Update rightSum
If leftSum equal to reverse of digits of rightSum
Update leftSum
Driver Code
Python3 program for the above approach
Function to find all distinct absolute difference of all possible pairs of the array
bset [ i ] : Check if i is present in the array or not
diff [ i ] : Check if there exists a pair whose absolute difference is i
Traverse the array , arr [ ]
Iterate over the range [ 0 , Max ]
If i - th bit is set
Insert the absolute difference of all possible pairs whose first element is arr [ i ]
Stores count of set bits
If there is at least one duplicate element in arr [ ]
Printing the distinct absolute differences of all possible pairs
If i - th bit is set
Driver Code
Given array
Given size
Function Call
Python3 program to to implement the above approach
Function to find the Longest Common Subsequence between the two arrays
Maps elements of firstArr [ ] to their respective indices
Traverse the array firstArr [ ]
Stores the indices of common elements between firstArr [ ] and secondArr [ ]
Traverse the array secondArr [ ]
If current element exists in the Map
Stores lIS from tempArr [ ]
Driver Code
Function to find count of ways to partition thesuch that each partition contains exactly two 0 s .
Stores indices of 0 s in the given string .
Store the count of ways to partition the such that each partition contains exactly two 0 s .
Iterate over each characters of the given string
If current character is '0
Insert index
Stores total count of 0 s in str
Traverse the array , IdxOf0s [ ]
Update cntWays
Driver Code
Function to find the total count of triplets ( i , j , k ) such that i < j < k and ( j - i ) != ( k - j )
Stores indices of 0 s
Stores indices of 1 s
Stores indices of 2 s
Traverse the array
If current array element is 0
If current array element is 1
If current array element is 2
Total count of triplets
Traverse the array zero_i [ ]
Traverse the array one_i [ ]
Stores index of 0 s
Stores index of 1 s
Stores third element of triplets that does not satisfy the condition
If r present in the map
Update r
If r present in the map
Update r
If r present in the map and equidistant
Print the obtained count
Driver Code
Function to print prime factors of N in decreasing order
Stores prime factors of N in decreasing order
Insert i into stack
Update N
Update i
Print value of stack st
Driver Code
function Call
Function to count subarray having the decreasing sequence K to 1
Traverse the array
Check if required sequence is present or not
Reset temp to k
Return the count
Driver Code
Function Call
Python3 program for the above approach
Function to calculate the LCM
Function to find the smallest number satisfying given constraints
LCM value is 1 initially
Finding the LCM of all non zero digits
Update the value lcm
Stores ceil value
Print the answer
Driver Code
Function Call
Function to find the minimum sum of two integers such that their product is strictly greater than N
Initialise low as 0 and high as 1e9
Iterate to find the first number
Find the middle value
If mid ^ 2 is greater than equal to A , then update high to mid
Otherwise update low
Store the first number
Again , set low as 0 and high as 1e9
Iterate to find the second number
Find the middle value
If first number * mid is greater than N then update high to mid
Else , update low to mid
Store the second number
Print the result
Driver Code
Function Call
Python3 program for the above approach
Function to find the minimum sum of two integers such that their product is strictly greater than N
Store the answer using the AP - GP inequality
Print the result
Driver Code
Function Call
Python 3 Program for the above approach
Arrays to store prefix sums , suffix and MAX 's node respectively
Function to construct Segment Tree
MAX array for node MAX
Array for prefix sum node
Array for suffix sum node
Calculate MAX node
Function to update Segment Tree
Update at position
Update sums from bottom to the top of Segment Tree
Update MAX tree
Update pref tree
Update suf tree
Function to perform given queries
Stores count of queries
Traverse each query
Print longest length of subarray in [ 1 , N ]
Flip the character
Driver Code
Size of array
Given array
Given queries
Number of queries
Function to find the count of digits , k in the given number n
Stores count of occurrence of digit K in N
Iterate over digits of N
If current digit is k
Update count
Update N
Utility function to find an array element having maximum frequency of digit k
Stores frequency of digit K in arr [ i ]
Stores maximum frequency of digit K in the array
Stores an array element having maximum frequency of digit k
Traverse the array
Count the frequency of digit k in arr [ i ]
Update max with maximum frequency found so far
Update ele
If there is no array element having digit k in it
Function to find an array element having maximum frequency of digit k
Stores an array element having maximum frequency of digit k
If there is no element found having digit k in it
Print element having max frequency of digit k
Driver Code
The digit whose max occurrence has to be found
Given array
Size of array
Function Call
Function to count minimum number of removals required to make an interval equal to the union of the given Set
Stores the minimum number of removals
Traverse the Set
Left Boundary
Right Boundary
Stores count of intervals lying within current interval
Traverse over all remaining intervals
Check if interval lies within the current interval
Increase count
Update minimum removals required
Driver Code
Returns the minimum removals
Function to find the maximum count of even numbers from all the subarrays of size M
Stores the count of even numbers in a subarray of size M
Calculate the count of even numbers in the current subarray
If current element is an even number
Stores the maximum count of even numbers from all the subarrays of size M
Traverse remaining subarrays of size M using sliding window technique
If the first element of the subarray is even
update curr
If i - th element is even increment the count
update the answer
Return answer
Driver Code
Size of the input array
Function call
Function to count the numbers in given range whose octal representation contains atleast digit , d
Store count of numbers up to n whose octal representation contains digit d
Iterate over the range [ 1 , n ]
Calculate digit of i in octal representation
Check if octal representation of x contains digit d
Update total
Update x
Prthe answer
Driver Code
Given N and D
Counts and prints numbers up to N having D as a digit in its octal representation
Python3 program to implement the above approach
Function to construct Segment Tree to return the minimum element in a range
If leaf nodes of the tree are found
Update the value in segment tree from given array
Divide left and right subtree
Stores smallest element in subarray : arr [ start ] , arr [ mid ]
Stores smallest element in subarray : arr [ mid + 1 ] , arr [ end ]
Stores smallest element in subarray : arr [ start ] , arr [ end ]
Function to find the smallest element present in a subarray
If elements of the subarray are not in the range [ l , r ]
If all the elements of the subarray are in the range [ l , r ]
Divide tree into left and right subtree
Stores smallest element in left subtree
Stores smallest element in right subtree
Function that find length of longest subarray with all equal elements in atmost K decrements
Stores length of longest subarray with all equal elements in atmost K decrements .
Store the prefix sum array
Calculate the prefix sum array
Build the segment tree for range min query
Traverse the array
Stores start index of the subarray
Stores end index of the subarray
Stores end index of the longest subarray
Performing the binary search to find the endpoint for the selected range
Find the mid for binary search
Find the smallest element in range [ i , mid ] using Segment Tree
Stores total sum of subarray after K decrements
Stores sum of elements of subarray before K decrements
If subarray found with all equal elements
Update start
Update max_index
If false , it means that the selected range is invalid
Update end
Store the length of longest subarray
Return result
Driver Code
Function to find the count of triplets ( a , b , c ) with a * b + c = N
Stores count of triplets of 1 st N natural numbers which are of the form a * b + c = N
Iterate over the range [ 1 , N ]
If N is divisible by i
Update cntTriplet
Update cntTriplet
Driver code
Python3 program of the above approach
Function to calculate the count of numbers such that it gives same quotient and remainder
Stores divisor of number N .
Iterate through numbers from 2 to sqrt ( N ) and store divisors of N
As N is also divisor of itself
Iterate through divisors
Checking whether x satisfies the required condition
Print the count
Driver Code
Given N
Function Call
Function to find the smallest indexed array element required to be flipped to make sum of the given array equal to 0
Stores the required index
Traverse the given array
Flip the sign of current element
Stores the sum of array elements
Find the sum of the array
Update sum
If sum is equal to 0
Update pos
Reset the current element to its original value
Reset the value of arr [ i ]
Driver Code
Function to find the smallest indexed array element required to be flipped to make sum of the given array equal to 0
Stores the required index
Stores the sum of the array
Traverse the given array
Update ArrSum
Traverse the given array
If sum of array elements double the value of the current element
Update pos
Driver Code
Function to check if S can be converted to T by removing at most one substring from S
Check if S can be converted to T by removing at most one substring from S
Stores length of string T
Stores length of string S
Iterate over the range [ 0 , M - 1 ]
Stores Length of the substring S [ 0 ] , ... , S [ i ]
Stores Length of the substring S [ 0 ] , ... , S [ i ]
Stores prefix substring
Stores suffix substring
Checking if prefix + suffix == T
Given String S and T
Function call
Function to calculate sum of maximum of all subarrays
Stores the sum of maximums
Traverse the array
Store the frequency of the maximum element in subarray
Finding maximum
Increment frequency by 1
If new maximum is obtained
If frequency of maximum is even , then add 2 * maxNumber . Otherwise , add maxNumber
Print the sum obtained
Driver Code
Function Call
Function to find the count of index pairs having equal prefix and suffix sums
Maps indices with prefix sums
Traverse the array
Update prefix sum
Update frequency in Map
Traverse the array in reverse
Update suffix sum
Check if any prefix sum of equal value exists or not
Print the obtained count
Driver code
Given array
Given size
Function Call
Check if a number is magic number or not
Check number is composite number or not
Corner cases
Check if the number is a multiple of 2 or 3
Check for multiples of remaining primes
Function to find Composite Magic Numbers in given ranges
dp [ i ] : Stores the count of composite Magic numbers up to i
Traverse in the range [ 1 , 1e5 )
Check if number is Composite number as well as a Magic number or not
Print results for each query
Driver Code
Function to find the smallest positive integer that divides array elements to get the sum <= K
Stores minimum possible of the smallest positive integer satisfying the condition
Stores maximum possible of the smallest positive integer satisfying the condition
Apply binary search over the range [ left , right ]
Stores middle element of left and right
Stores sum of array elements
Traverse the array
Update sum
If sum is greater than K
Update left
Update right
Driver Code
Function to find the count of minimum Deci - Binary numbers required to obtain S
Stores the minimum count
Iterate over the string s
Convert the char to its equivalent integer
If current character is the maximum so far
Update the maximum digit
Prthe required result
Driver Code
Function to count minimum subarrays whose odd - indexed elements need to be incremented to make array odd
Stores the minimum number of operations required
Iterate over even - indices
Check if the current element is odd
If true , continue
Otherwise , mark the starting of the subarray and iterate until i < n and arr [ i ] is even
Increment number of operations
Iterate over odd indexed positions of arr [ ]
Check if the current element is odd
If true , continue
Otherwise , mark the starting of the subarray and iterate until i < n and arr [ i ] is even
Increment the number of operations
Print the number of operations
Driver Code
Function Call
Function to count the minimum number of substrings required to be reversed to make the string S alternating
Store count of consecutive pairs
Stores the count of 1 s and 0 s
Traverse through the string
Increment 1 s count
Increment 0 s count
Increment K if consecutive same elements are found
Increment 1 s count
else : Increment 0 s count
Check if it is possible or not
Otherwise , print the number of required operations
Driver code
Function Call
Function to count pairs ( arr [ i ] , brr [ j ] ) whose product is an even number
Stores count of odd numbers in arr [ ]
Stores count of odd numbers in brr [ ]
Traverse the array , arr [ ]
If arr [ i ] is an odd number
Update cntOddArr
Traverse the array , brr [ ]
If brr [ i ] is an odd number
Update cntOddArr
Return pairs whose product is an even number
Driver Code
Python3 program for the above approach
Function to count the maximum number of persons receiving a chocolate
Initialize count as 0
Sort the given arrays
Initialize a multiset
Insert B [ ] array values into the multiset
Traverse elements in array A [ ]
Search for the lowest value in B [ ]
If found , increment count , and delete from set
Return the number of people
Driver Code
Function Call
Function to maximize the frequency of an array element by incrementing or decrementing array elements at most once
Stores the largest array element
Stores the smallest array element
freq [ i ] : Stores frequency of ( i + Min ) in the array
Traverse the array
Update frequency of arr [ i ]
Stores maximum frequency of an array element by incrementing or decrementing array elements
Iterate all the numbers over the range [ Min , Max ]
Stores sum of three consecutive numbers
Update maxSum
Print maxSum
Driver Code
Function call
Function to find length of longest subsequence generated that satisfies the specified conditions
Stores the length of longest subsequences of all lengths
Iterate through the given array
Iterate through the multiples i
Update dp [ j ] as maximum of dp [ j ] and dp [ i ] + 1
Return the maximum element in dp [ ] as the length of longest subsequence
Driver Code
Function Call
Function that performs binary search to find value less than or equal to first value of the pair
Perform binary search
Find the mid
Update the high
Else update low
Return the low index
Function to modify the second value of each pair
start from index 1
Function to evaluate each query
Find value less than or equal to the first value of pair
check if we got the required pair or not
Function to find a pair whose values is less than the given pairs in query
Find the size of the vector
sort the vector based on the first value
Function Call to modify the second value of each pair
Traverse each queries
Evaluate each query
Print the result
Driver Code
Function Call
Function to sort a stream of integers
Stores the position of array elements
Traverse through the array
If any element is found to be greater than the current element
If an element > num is not present
Otherwise , place the number at its right position
Function to print the sorted stream of integers
Stores the sorted stream of integers
Traverse the array
Function Call
Print the array after every insertion
Driver Code
Function to count ways of spliting the array in two subarrays of equal sum by changing sign of any 1 element
Stores the count of elements in prefix and suffix of array
Stores the total sum of array
Traverse the array
Increase the frequency of current element in suffix
Stores prefix sum upto an index
Stores sum of suffix from an index
Stores the count of ways to split the array in 2 subarrays having equal sum
Traverse the array
Modify prefix sum
Add arr [ i ] to prefix Map
Calculate suffix sum by subtracting prefix sum from total sum of elements
Remove arr [ i ] from suffix Map
Store the difference between the subarrays
Check if diff is even or not
Count number of ways to split array at index i such that subarray sums are same
Update the count
Return the count
Driver Code
Function Call
Function to count maximum common non - repeating characters that can be obtained by partitioning the string into two non - empty substrings
Stores count of non - repeating characters present in both the substrings
Stores distinct characters in left substring
Stores distinct characters in right substring
Traverse left substring
Insert S [ i ] into ls
Traverse right substring
Insert S [ i ] into rs
Traverse distinct characters of left substring
If current character is present in right substring
Update cnt
Return count
Function to partition the string into two non - empty substrings in all possible ways
Stores maximum common distinct characters present in both the substring partitions
Traverse the string
Update ans
Print count of maximum common non - repeating characters
Driver Code
Function to calculate the length of the longest substring of '1' s that can be obtained by deleting one character
Add '0' at the end
Iterator to traverse the string
Stores maximum length of required substring
Stores length of substring of '1' preceding the current character
Stores length of substring of '1' succeeding the current character
Counts number of '0' s
Traverse the string S
If current character is '1
Increase curr_one by one
Otherwise
Increment numberofZeros by one
Count length of substring obtained y concatenating preceding and succeeding substrings of '1
Store maximum size in res
Assign curr_one to prev_one
Reset curr_one
If string contains only one '0
Return the answer
Driver Code
Function to calculate the length of the longest substring of '1' s that can be obtained by deleting one character
Initializing i and j as left and right boundaries of sliding window
If current character is '0
Decrement k by one
Return result
Driver Code
Function to obtain lexicographically smallest string possible by inserting character c in the string s
Traverse the string
Check if current character is greater than the given character
Insert the character before the first greater character
Return the string
Append the character at the end
Return the string
Function call
Python program to implement the above approach
Function to find the largest unique element of the array
Store frequency of each distinct element of the array
Traverse the array
Update frequency of arr [ i ]
Stores largest non - repeating element present in the array
Stores index of the largest non - repeating array element
Traverse the array
If frequency of arr [ i ] is equal to 1 and arr [ i ] exceeds LNRElem
Update ind
Update LNRElem
If no array element is found with frequency equal to 1
Prlargest non - repeating element
Driver Code
Function to count indices substrings of 1 s need to be shifted such that all 1 s in the string are grouped together
Stores first occurrence of '1
Stores last occurrence of '1
Count of 0 s between firstOne and lastOne
Traverse the string to find the first and last occurrences of '1
Count number of 0 s present between firstOne and lastOne
Print minimum operations
Given string
Utility Function to check whether a subsequence same as the given subarray exists or not
Check if first element of the subarray is also present before
Check if last element of the subarray is also present later
If above two conditions are not satisfied , then no such subsequence exists
Function to check and prif a subsequence which is same as the given subarray is present or not
Driver Code
Function Call
Function to find the length of the longest subarray with all elements smaller than K
Stores the length of maximum consecutive sequence
Stores maximum length of subarray
Iterate through the array
Check if array element smaller than K
Store the maximum of length and count
Reset the counter
Print the maximum length
Driver Code
Given array arr [ ]
Size of the array
Given K
Function Call
Function to calculate GCD of two integers
Recursively calculate GCD
Function to find the lexicographically smallest pair of indices whose product is co - prime with the product of the subarrays on its left and right
Stores the suffix product of array elements
Set 0 / 1 if pair satisfies the given condition or not
Initialize array right_prod
Update the suffix product
Stores product of all elements
Stores the product of subarray in between the pair of indices
Iterate through every pair of indices ( i , j )
Store product of A [ i , j ]
Check if product is co - prime to product of either the left or right subarrays
If no such pair is found , then pr - 1
Driver Code
Function Call
Function to count the strings consisting of at least 1 set bit
Initialize count
Iterate through string
The answer is 2 ^ N - 1
Driver Code
Given string
Function call
Function to replace duplicate strings by alphanumeric strings to make all strings in the array unique
Store the frequency of strings
Iterate over the array
For the first occurrence , update the frequency count
Otherwise
Append frequency count to end of the string
Print the modified array
Driver Code
Function Call
Function to find the minimum cost to convert given string to 0 s only
Length of string
Stores the index of leftmost '1' in str
Update the index of leftmost '1' in str
Stores the index of rightmost '1' in str
Update the index of rightmost '1' in str
If str does not contain any '1' s
No changes required
Stores minimum cost
Iterating through str form left_1 to right_1
Stores length of consecutive 0 s
Calculate length of consecutive 0 s
If a substring of 0 s exists
Update minimum cost
Printing the minimum cost
Driver Code
Python3 program to implement the above approach
Function to find the minimum distance travelled to visit K point
Stores minimum distance travelled to visit K point
Stores distance travelled to visit points
Traverse the array arr [ ]
If arr [ i ] and arr [ i + K - 1 ] are positive
Update dist
Update dist
Update res
Driver Code
Initial the array
Function to return index of minimum element in the array
Initialize a [ 0 ] as minValue
Traverse the array
If a [ i ] < existing minValue
Return the minimum index
Function that maximize the minimum element of array after incrementing subarray of size S by 1 , M times
Iterating through the array for M times
Find minimum element index
Increment the minimum value
Storing the left index and right index
Incrementing S - 1 minimum elements to the left and right of minValue
Reached extreme left
Reached extreme right
Left value is minimum
Right value is minimum
Find the minValue in A [ ] after M operations
Return the minimum value
Driver Code
Function Call
Python3 program for the above approach
Function to find sum of all nodes from root to N
If N is equal to 1
If N is equal to 2 or 3
Stores the number of nodes at ( i + 1 ) - th level
Stores the number of nodes
Stores if the current level is even or odd
If level is odd
If level is even
If level with node N is reached
Push into vector
Compute prefix sums of count of nodes in each level
Stores the level in which node N s present
Stores the required sum
Add temp to the sum
Driver Code
Function Call
Python3 program to implement the above approach
Function to check if the point ( X , Y ) exists in the towers network - range or not
Traverse the array arr [ ]
Stores distance of the point ( X , Y ) from i - th tower
If dist lies within the range of the i - th tower
If the point ( X , Y ) does not lie in the range of any of the towers
Driver Code
If point ( X , Y ) lies in the range of any of the towers
Otherwise
Function to evaluate the winner of the game
Stores count of odd array elements
Stores count of even array elements
Traverse the array
If array element is odd
Otherwise
If count of even is zero
If count of odd is even
If count of odd is odd
If count of odd is odd and count of even is one
Otherwise
Driver code
Function to rearrange array elements to maximize count of local minima in the array
Sort the array in ascending order
Stores index of left pointer
Stores index of right pointer
Traverse the array elements
if right is less than N
Print array element
Update right
Print array element
Update left
Driver Code
Python3 program for the above approach
Function to find the minimum jumps required to make the whole group sit adjacently
Store the indexes
Stores the count of occupants
Length of the string
Traverse the seats
If current place is occupied
Push the current position in the vector
Base Case :
The index of the median element
The value of the median element
Traverse the position [ ]
Update the ans
Return the final count
Driver Code
Given arrange of seats
Function Call
Function to find a single distinct prime factor of N
Stores distinct prime factors of N
Calculate prime factor of N
Calculate distinct prime factor
Insert i into disPrimeFact
Update N
If N is not equal to 1
Insert N into disPrimeFact
If N contains a single distinct prime factor
Return single distinct prime factor of N
If N contains more than one distinct prime factor
Function to count pairs in the array whose product contains only single distinct prime factor
Stores count of 1 s in the array
mp [ i ] : Stores count of array elements whose distinct prime factor is only i
Traverse the array arr [ ]
If current element is 1
Store distinct prime factor of arr [ i ]
If arr [ i ] contains more than one prime factor
If arr [ i ] contains a single prime factor
Stores the count of pairs whose product of elements contains only a single distinct prime factor
Traverse the map mp [ ]
Stores count of array elements whose prime factor is ( it . first )
Update res
Driver Code
Function to find minimum operations to make both the strings palindromic
Stores index of the left pointer
Stores index of the right pointer
Stores count of minimum operations to make both the strings palindromic
if str1 [ i ] equal to str1 [ j ] and str2 [ i ] not equal to str2 [ j ]
Update cntOp
If str1 [ i ] not equal to str1 [ j ] and str2 [ i ] equal to str2 [ j ]
Update cntOp
If str1 [ i ] is not equal to str1 [ j ] and str2 [ i ] is not equal to str2 [ j ]
If str1 [ i ] is equal to str2 [ j ] and str2 [ i ] is equal to str1 [ j ]
Update cntOp
Update cntOp
Update i and j
Driver Code
Stores length of str1
Python3 program to implement the above approach
Function to find the value of power ( X , N )
Stores the value of ( X ^ N )
Calculate the value of power ( x , N )
If N is odd
Update res
Update x
Update N
Function to find the value of X and Y that satisfy the condition
Base Case
Stores maximum possible of X
Update xMax
Stores maximum possible of Y
Update yMax
Iterate over all possible values of X
Iterate over all possible values of Y
Stores value of 2 ^ i
Stores value of 5 ^ j
If the pair ( i , j ) satisfy the equation
If no solution exists
Driver Code
Python3 program for the above approach
Function to count pairs that satisfy the given conditions
Stores the count of pairs
If v1 [ ] is smaller than v2 [ ]
Sort the array v1 [ ]
Traverse the array v2 [ ]
Returns the address of the first number which is >= v2 [ j ] - k
Increase the count by all numbers less than v2 [ j ] - k
Otherwise
Sort the array v2 [ ]
Traverse the array v1 [ ]
Returns the address of the first number which is > v1 [ i ] + k
Increase the count by all numbers greater than v1 [ i ] + k
Return the total count of pairs
Driver Code
Function to calculate maximum sum among all subarrays of size K with the sum less than X
Initialize sum_K to 0
Calculate sum of first K elements
If sum_K is less than X
Initialize MaxSum with sum_K
Iterate over the array from ( K + 1 ) - th index
Subtract the first element from the previous K elements and add the next element
If sum_K is less than X
Update the Max_Sum
Driver Code
Size of Array
Function Call
Function to rearrange the array such that sum of all elements of subarrays from the 1 st index is non - zero
Initialize sum of subarrays
Sum of all elements of array
If sum is 0 , the required array could never be formed
If sum is non zero , array might be formed
Sort array in ascending order
When current subarray sum becomes 0 replace it with the largest element
Swap Operation
If largest element is same as element to be replaced , then rearrangement impossible
If b = 1 , then rearrangement is not possible . Hence check with reverse configuration
Sort array in descending order
When current subarray sum becomes 0 replace it with the smallest element
Swap Operation
If smallest element is same as element to be replaced , then rearrangement impossible
If neither of the configurations worked then pr " - 1"
Otherwise , print the formed rearrangement
Driver Code
Given array
Size of array
Function Call
Python3 program for the above approach
Function to find the length of the smallest subarray to be removed such that sum of elements is divisible by K
Stores the remainder of each arr [ i ] when divided by K
Stores total sum of elements
K has been added to each arr [ i ] to handle - ve integers
Update the total sum
Remainder when total_sum is divided by K
If given array is already divisible by K
Stores curr_remainder and the most recent index at which curr_remainder has occurred
Stores required answer
Add current element to curr_sum and take mod
Update current remainder index
If mod already exists in map the subarray exists
If not possible
Print the result
Given array arr [ ]
Size of array
Given K
Function Call
Function to find the binary by performing all the given queries
Stores length of the string
prefixCnt [ i ] : Stores number of times strr [ i ] toggled by performing all the queries
Update prefixCnt [ Q [ i ] [ 0 ] ]
Update prefixCnt [ Q [ i ] [ 1 ] + 1 ]
Calculate prefix sum of prefixCnt [ i ]
Traverse prefixCnt [ ] array
If ith element toggled odd number of times
Toggled i - th element of binary string
Driver Code
Function to check if it is possible to cut woods into K pieces of length len
Stores count of pieces having length equal to K
Traverse wood [ ] array
Update count
Function to find the maximum value of L
Stores minimum possible of L
Stores maximum possible value of L
Apply binary search over the range [ left , right ]
Stores mid value of left and right
If it is possible to cut woods into K pieces having length of each piece equal to mid
Update left
Update right
Driver Code
Function to return the number of quadruplets with the given sum
Initialize answer
All possible first elements
All possible second elements
All possible third elements
All possible fourth elements
Increment counter by 1 if quadruplet sum is S
Return the final count
Driver Code
Given array arr [ ]
Given sum S
Function Call
Function to find minimum adjacent swaps required to make all the same character adjacent
Initialize answer
Create a 2D array of size 26
Traverse the string
Get character
Append the current index in the corresponding vector
Traverse each character from a to z
Add difference of adjacent index
Return answer
Driver Code
Given string
Size of string
Function Call
Function that prints the edges of the generated graph
First print connections stored in store [ ]
Check if there is more than one occurrence of 1 st unique element
Print all other occurrence of 1 st unique element with second unique element
Function to construct the graph such that the every adjacent nodes have different value
Stores pair of edges formed
Stores first unique occurrence
Check for the second unique occurrence
Store indices of 2 nd unique occurrence
To check if arr has only 1 unique element or not
Store the connections of all unique elements with Node 1
If value at node ( i + 1 ) is same as value at Node 1 then store its indices
If count is zero then it 's not  possible to construct the graph
If more than 1 unique element is present
Print the edges
Driver Code
Given array having node values
Function Call
Function that finds the minimum number of operations required such that string A and B are the same
Stores the count of steps
Stores the last index whose bits are not same
Iterate until both string are unequal
Check till end of string to find rightmost unequals bit
Update the last index
Flipping characters up to the last index
Flip the bit
Increasing steps by one
Print the count of steps
Driver Code
Given strings A and B
Function Call
Function to check if it is possible to form M pairs with abs diff at least K
Traverse the array over [ 0 , M ]
If valid index
Return 1
Function to count distinct pairs with absolute difference atleasr K
Stores the count of all possible pairs
Initialize left and right
Sort the array
Perform Binary Search
Find the value of mid
Check valid index
Update ans
Print the answer
Driver Code
Given array arr [ ]
Given difference K
Size of the array
Function call
Function to find maximum distance between every two element
Stores index of last occurence of each array element
Initialize temp [ ] with - 1
Traverse the array
If array element has not occurred previously
Update index in temp
Otherwise
Compare temp [ a [ i ] ] with distance from its previous occurence and store the maximum
Compare temp [ i ] with distance of its last occurence from the end of the array and store the maximum
Function to find the minimum common element in subarrays of all possible lengths
Function call to find a the maximum distance between every pair of repetition
Initialize ans [ ] to - 1
Check if subarray of length temp [ i ] contains i as one of the common elements
Find the minimum of all common elements
Driver Code
Function to find a triplet that satisfy the conditions
Traverse the given array
Stores current element
Stores element just before the current element
Stores element just after the current element
Check the given conditions
Print a triplet
If no triplet found
Driver Code
Python3 program to implement the above approach
Function to get the count of subarrays having each element occurring at least twice
Stores count of subarrays having each distinct element occurring at least twice
Stores count of unique elements in a subarray
Store frequency of each element of a subarray
Traverse the given array
Count frequency and check conditions for each subarray
Update frequency
Check if frequency of arr [ j ] equal to 1
Update Count of unique elements
Update count of unique elements
If each element of subarray occurs at least twice
Update cntSub
Remove all elements from the subarray
Update cntUnique
Driver code
Function to check if the satisfies the given conditions or not
Stores length of given string
Stores frequency of each character of str
Update frequency of current character
Stores count of distinct character whose frequency is odd
Traverse the cntFreq [ ] array .
If frequency of character i is odd
Update cntOddFreq
If count of distinct character having odd frequency is <= K + 1
Driver Code
If str satisfy the given conditions
Function to find the maximum number of elements that can be removed
Initialize hash [ ] with 0 s
Initialize MEX
Set hash [ i ] = 1 , if i is present in arr [ ]
Find MEX from the hash
Print the maximum numbers that can be removed
Driver Code
Given array
Size of the array
Function Call
Function to find indexes of the given that satisfy the condition
Stores length of given string
Stores frequency of each character of strr
Update frequency of current character
cntLeftFreq [ i ] Stores frequency of characters present on the left side of index i .
Traverse the given string
Stores count of smaller characters on left side of i .
Stores count of smaller characters on Right side of i .
Traverse smaller characters on left side of index i .
Update cntLeft
Update cntRight
Update cntLeftFreq [ strr [ i ] ]
If count of smaller elements on both sides equal
Print current index
Driver Code
Function to count three - digit numbers having difference x with its reverse
If x is not multiple of 99
No solution exists
Generate all possible pairs of digits [ 1 , 9 ]
If any pair is obtained with difference x / 99
Increase count
Return the count
Driver Code
Python3 program for the above approach
Initialize INF as inifnity
Function to return the pohaving maximum X and Y coordinates
Base Case
Stores if valid poexists
If poarr [ i ] is valid
Check for the same point
Check for a valid point
If current pois the required point
Otherwise
Function to find the required point
Stores the powith maximum X and Y - coordinates
If no required poexists
Driver Code
Given array of points
Function Call
Python3 program for the above approach
Function to find the pohaving max X and Y coordinates
Initialize maxX and maxY
Length of the given array
Get maximum X & Y coordinates
Check if the required point i . e . , ( maxX , maxY ) is present
If powith maximum X and Y coordinates is present
If no such poexists
Driver Code
Given array of points
Pranswer
Function to find insert position of K
Traverse the array
If K is found
If arr [ i ] exceeds K
If all array elements are smaller
Driver Code
Function to calculate total number of sub - arrays for each element where that element is occurring as the minimum element
Map for storing the number of sub - arrays for each element
Traverse over all possible subarrays
Minimum in each subarray
Print result
Driver Code
Function Call
Function to count subarrays for each element where it is the minimum
For the length of strictly larger numbers on the left of A [ i ]
Storing x in result [ i ]
For the length of strictly larger numbers on the right of A [ i ]
Store x * y in result array
Print the result
Driver Code
Function Call
Function to check if a number is prime or not
If a divisor of n exists
Function to check if a number is Full Prime or not
If n is not a prime
Otherwise
Extract digit
If any digit of n is non - prime
Function to prcount of Full Primes in a range [ L , R ]
Stores count of full primes
Check if i is full prime
Driver Code
Stores count of full primes
Function to print Alternate elements of the given array
Print elements at odd positions
If currIndex stores even index or odd position
Driver Code
Function to find minimum characters to be removed such that no subsequence of the form "0101" exists in the string
Stores the partial sums
Calculate partial sums
Setting endpoints and deleting characters indices .
Return count of deleted characters
Driver Code
Function to check whether a number is power of 2 or not
Function to find maximum length subarray having product of element as a perfect power of 2
Stores current subarray length
Stores maximum subarray length
Traverse the given array
If arr [ i ] is power of 2
Increment max_length
Update max_len_subarray
Otherwise
Prthe maximum length
Driver Code
Given arr
Function Call
Python3 program for the above approach
Find the length of the shortest subarray
To store the result
Calculate the possible length of the sorted subarray from left
Array is sorted
Calculate the possible length of the sorted subarray from left
Update the result
Calculate the possible length in the middle we can delete and update the result
Update the result
Return the result
Driver Code
Function Call
Function to evaluate minimum subtraction required to make a number palindrome
Counts number of subtractions required
Run a loop till N >= 0
Store the current number
Store reverse of current number
Reverse the number
Check if N is palindrome
Increment the counter
Reduce the number by 1
Print the result
Driver Code
Function call
Function to count all the subarrays of size at least 3 forming GP
If array size is less than 3
Stores the count of subarray
Stores the count of subarray for each iteration
Traverse the array
Check if L [ i ] forms GP
Otherwise , update count to 0
Update the final count
Return the final count
Driver Code
Given array arr [ ]
Function Call
Function to count the number of even - length subarrays having Bitwise XOR equal to 0
Stores the count of required subarrays
Stores prefix - XOR of arr [ i , i + 1 , ... N - 1 ]
Traverse the array
Calculate the prefix - XOR of current subarray
Check if XOR of the current subarray is 0 and length is even
Driver Code
Python3 program to implement the above approach
Function to get the count of even length subarrays having bitwise xor 0
Stores prefix - xor of the given array
Stores prefix - xor at even index of the array .
Stores prefix - xor at odd index of the array .
Stores count of subarrays that satisfy the condition
length from 0 index to odd index is even
Traverse the array .
Take prefix - xor
If index is odd
Calculate pairs
Increment prefix - xor at odd index
Calculate pairs
Increment prefix - xor at odd index
Driver Code
Function to find the maximum sum of the array arr [ ] where each element can be reduced to at most min [ i ]
Stores the pair of arr [ i ] & min [ i ]
Sorting vector of pairs
Traverse the vector of pairs
Add to the value of S
Update K
Driver Code
Given array arr [ ] , min [ ]
Given K
Function Call
Print the value of S
Python3 program to implement the above approach
Function to find the length of smallest substring of a having string b as a subsequence
Stores the characters present in string b
Find index of characters of a that are also present in string b
If character is present in string b
Store the index of character
Flag is used to check if substring is possible
Assume that substring is possible
Stores first and last indices of the substring respectively
For first character of string b
If the first character of b is not present in a
If the first character of b is present in a
Remove the index from map
Update indices of the substring
For the remaining characters of b
If index possible for current character
If no index is possible
If no more substring is possible
Update the minimum length of substring
Return the result
Driver Code
Given two string
Function to check if a number is prime or not
Function to find the count of smaller primes on the right of each array element
Stores the count of smaller primes
If A [ j ] <= A [ i ] and A [ j ] is prime
Increase count
Print the count for the current element
Driver Code
Function call
Function to check if a is concatenation of another string
Stores the length of str2
Stores the length of str1
If M is not multiple of N
Traverse both the strings
If str1 is not concatenation of str2
Driver Code
Function to minimize the length of the by replacing distinct pairs of adjacent characters
Stores the length of the given string
Stores the index of the given string
Traverse the given string
If two adjacent haracters are distinct
If all characters are equal
If all characters are distinct
Driver Code
Python3 program for the above approach
Function for checking valid or not
Function for checking boundary of binary search
Function to calculate the minimum sequence size using binary search
Initialize high and low
Base case
Print - 1 if a sequence cannot be generated
Otherwise
Iterate until difference between high and low exceeds 1
Calculate mid
Reset values of high and low accordingly
Print the answer
Driver Code
Function call
Structure Node of Binary Tree
Function to create a new node
Return the created node
Function that performs the DFS traversal on Tree to store all the nodes at each level in map M
Base Case
Push the current level node
Left Recursion
Right Recursion
Function that print all the middle nodes for each level in Binary Tree
Stores all node in each level
Perform DFS traversal
Traverse the map M
Get the size of vector
For odd number of elements
Print ( M / 2 ) th Element
Otherwise
Print ( M / 2 ) th and ( M / 2 + 1 ) th Element
Driver Code
Given Tree
Function Call
Function to minimize the size of array by performing given operations
If all array elements are not same
If all array elements are same
Driver Code
Function call
Python3 program to implement the above approach
Function to print the start and end indices of all subarrays whose sum is a perfect square
Stores the current subarray sum
Update current subarray sum
Stores the square root of currSubSum
Check if currSubSum is a perfect square or not
Driver Code
Function to return the count of indices in from the given binary matrix having equal count of set bits in its row and column
Stores count of set bits in corresponding column and row
Traverse matrix
Since 1 contains a set bit
Update count of set bits for current row and col
Stores the count of required indices
Traverse matrix
If current row and column has equal count of set bits
Return count of required position
Driver Code
Function to find the maximum value at each level of N - ary tree
Stores the adjacency list
Create the adjacency list
Perform level order traversal of nodes at each level
Push the root node
Iterate until queue is empty
Get the size of queue
Iterate for : all the nodes in the queue currently
Dequeue an node from queue
Enqueue the children of dequeued node
Print the result
Driver Code
Number of nodes
Edges of the N - ary tree
Given cost
Function Call
Function to rearrange the array to maximize the count of triplets
Sort the given array
Stores the permutations of the given array
Stores the index of the given array
Place the first half of the given array
Place the last half of the given array
Stores the count of triplets
Check the given conditions
Driver Code
Python3 program for above approach
Function to check if the array can be made non - decreasing
Iterate till N
Find the minimum element
Sort the array
Iterate till N
Check if the element is at its correct position
Return the answer
Driver Code
Print the answer
Function to count required 1 s from the given matrix
Stores the dimensions of the mat
Calculate sum of rows
Calculate sum of columns
Stores required count of 1 s
If current cell is 1 and sum of row and column is 1
Increment count of 1 s
Return the final count
Driver Code
Given matrix
Function call
Python3 program for the above approach
Functionto find all the matrix elements which are minimum in its row and maximum in its column
Initialize unordered set
Traverse the matrix
Update the minimum element of current row
Insert the minimum element of the row
Update the maximum element of current column
Checking if it is already present in the unordered_set or not
Driver Code
Function call
If no such matrix element is found
Python3 program to implement the above approach
Function to create the graph
Function to traverse the graph and find the minimum of maximum size forest after removing a Node
Traversing every child subtree except the parent Node
Traverse all subtrees
Update the maximum size of forests
Update the minimum of maximum size of forests obtained
Condition to find the minimum of maximum size forest
Update and store the corresponding Node
Driver Code
Function to find minimum flips required to remove all 0 s from a given binary string
Length of given string
Stores the indices of previous 0 s
Stores the minimum operations
Traverse string to find minimum operations to obtain required string
Current character
If current character is '0
Update temp1 with current index , if both temp variables are empty
Update temp2 with current index , if temp1 contains prev index but temp2 is empty
If temp1 is not empty
Reset temp1 to - 1
Increase ans
If temp2 is not empty but temp1 is empty
Reset temp2 to - 1
Increase ans
If both temp variables are not empty
Otherwise
Return the answer
Driver Code
Function to find the minimum length of prefix required to be deleted
Stores index to be returned
Iterate until previous element is <= current index
Decrementing index
Return index
Driver code
Given arr
Function call
Function to count array elements exceeding sum of preceding K elements
Iterate over the array
Update prefix sum
Check if arr [ K ] > arr [ 0 ] + . . + arr [ K - 1 ]
Increment count
Check if arr [ i ] > arr [ i - K - 1 ] + . . + arr [ i - 1 ]
Increment count
Driver Code
Given array
Function to find minimum number of moves to obtained B from A
Stores the minimum number of moves
Absolute difference
K is in range [ 0 , 10 ]
Print the required moves
Driver Code
Function to count the N digit numbers whose sum is divisible by K
Base case
If already computed subproblem occurred
Store the count of N digit numbers whoe sum is divisible by K
Check if the number does not contain any leading 0.
Recurrence relation
Driver code
Stores the values of overlapping subproblems
Python3 program to implement the above approach
Function to find the smallest Nth term of an AP possible
Stores the smallest Nth term
Check if common difference of AP is an integer
Store the common difference
Store the First Term of that AP
Store the Nth term of that AP
Check if all elements of an AP are positive
Return the least Nth term obtained
Driver Code
Generate all prime numbers in the range [ 1 , 1000000 ]
Set all numbers as prime initially
Mark 0 and 1 as non - prime
If current element is prime
Mark all its multiples as non - prime
Function to prthe subarray whose sum of elements is prime
Store the current subarray of size K
Calculate the sum of first K elements
Check if currSum is prime
Store the start and last index of subarray of size K
Iterate over remaining array
Check if currSum
Driver Code
Function to find the minimum count of characters to be removed to make the string sorted in ascending order
Length of given string
Stores the first occurrence of '1
Stores the last occurrence of '0
Traverse the string to find the first occurrence of '1
Traverse the string to find the last occurrence of '0
Return 0 if the str have only one type of character
Initialize count1 and count0 to count '1' s before lastIdx0 and '0' s after firstIdx1
Traverse the string to count0
Traverse the string to count1
Return the minimum of count0 and count1
Given string str
Function call
Function to find the maximum score with unique element in the subset
Base Case
Check if the previously picked element differs by 1 from the current element
Calculate score by including the current element
Calculate score by excluding the current element
Return maximum of the two possibilities
Driver Code
Given arrays
Function call
Function to print required resultant array
Reverse the array
Traverse the range
Store prefix sum
Find the prefix sum
Store the answer
Calculate the answers
Count of remaining elements
Add the sum of all elements y times
Add the remaining elements
Update ans [ i ]
If array is reversed print ans in reverse
Driver Code
Given array arr
Given K
Function
Function to find the boundary of every element within which it is minimum
Perform Binary Search
Find mid m
Update l
Update r
Inserting the index
Function to required count subarrays
Stores the indices of element
Initialize the output array
Left boundary , till the element is smallest
Right boundary , till the element is smallest
Calculate the number of subarrays based on its boundary
Adding cnt to the ans
Driver Code
Given array arr [ ]
Function Call
Define the limit
Function to get the sum of cube of digits of a number
Convert to string to get sum of the cubes of its digits
Return sum
Function to check if the number arrives at a fixed point or a cycle
Stores the values obtained
Insert N to set s
Get the next number using F ( N )
Check if the next number is repeated or not
Function to check if digit cube limit of an integer arrives at fixed point or in a limit cycle
N is a non negative integer
Function Call
If the value received is greater than limit
If the value received is an Armstrong number
Driver Code
Function Call
Function to count total number of required tuples
Initialize unordered map
Find the pairs ( j , l ) such that arr [ j ] = arr [ l ] and j < l
Elements are equal
Update the count
Add the frequency of arr [ l ] to val
Update the frequency of element arr [ j ]
Return the answer
Driver code
Given array arr [ ]
Function call
Python3 program of the above approach
Function to count the minimum number of operations required
Traverse the array
If array element is negative
Update minimum negative
Update maximum position
Return minOp
Driver code
Function to calculate the GCD of two numbers
Function to print the pair having a gcd value just greater than the given integer
Initialize variables
Iterate until low less than equal to high
Calculate mid
Reducing the search space
Print the answer
Driver Code
Given array and K
Function call
Python3 implementation of the above approach
Function to check if it is possible to sort array or not
Store the smallest element
Copy the original array
Iterate over the given array
Update smallest element
Copy elements of arr to array B
Sort original array
Iterate over the given array
If the i - th element is not in its sorted place
Not possible to swap
Driver Code
Given array
Function Call
Function to add edge into the graph
Finding the maximum and minimum values in each component
Function for checking whether the given graph is valid or not
Checking for intersecting intervals
If intersection is found
Graph is not valid
Function for the DFS Traversal
Traversing for every vertex
Storing maximum and minimum values of each component
Driver code
Function to check if all array elements is present in the stack
Store the frequency of array elements
Loop while the elements in the stack is not empty
Driver Code
Function to prthe length of longest substring to be deleted
Stores the length of string
Store the position of previous matched character of str1
Store the position of first occurrence of str2 in str1
Find the position of the first occurrence of str2
Store the index of str1
If both characters not matched
Store the length of the longest deleted substring
Store the position of last occurrence of str2 in str1
If both characters not matched
Update res
Update res .
Given string
Function call
Function to print all the substrings
Stores the substrings
Stores last index of characters of string s
Find the last position of each character in the string
Update the last index
Iterate the given string
Get the last index of s [ i ]
Extend the current partition characters last pos
If the current pos of character equals the min pos then the end of partition
Add the respective character to the string
Store the partition 's  len and reset variables
Update the minp and str
Input string
Function call
Function to find the length of all partitions oof a string such that each characters occurs in a single substring
Stores last index of string s
Find the last position of each letter in the string
Update the last index
Iterate the given string
Get the last index of s [ i ]
Extend the current partition characters last pos
Increase len of partition
if the current pos of character equals the min pos then the end of partition
Store the length
Print all the partition lengths
Given string str
Function call
Function to find the maximum occurring character
Initialize count of zero and one
Iterate over the given string
Count the zeros
Count the ones
Iterate over the given string
Check if character is * then continue
Check if first character after * is X
Add all * to the frequency of X
Set prev to the i - th character
Check if first character after * is Y
Set prev to the i - th character
Check if prev character is 1 and current character is 0
Half of the * will be converted to 0
Half of the * will be converted to 1
Check if prev and current are 1
All * will get converted to 1
No * can be replaced by either 0 or 1
Prev becomes the ith character
Check if prev and current are 0
All * will get converted to 0
If frequency of 0 is more
If frequency of 1 is more
Given string
Function call
Python3 program for the approach
Function that finds the minimum positive first term including X with given common difference and the number of terms
Stores the first term
Initialize the low and high
Perform binary search
Find the mid
Check if first term is greater than 0
Store the possible first term
Search between mid + 1 to high
Search between low to mid - 1
Return the minimum first term
Function that finds the Arithmetic Progression with minimum possible first term containing X and Y
Considering X to be smaller than Y always
Stores the max common difference
Stores the minimum first term and the corresponding common difference of the resultant AP
Iterate over all the common difference
Check if X and Y is included for current common difference
Store the possible common difference
Number of terms from X to Y with diff1 common difference
Number of terms from X to Y with diff2 common difference
Find the corresponding first terms with diff1 and diff2
Store the minimum first term and the corresponding common difference
Print the resultant AP
Driver Code
Given length of AP and the two terms
Function call
Function to check if a number can be expressed as the sum of cubes of two consecutive numbers
Driver Code
Function to check that a number is the sum of cubes of 2 consecutive numbers or not
Condition to check if a number is the sum of cubes of 2 consecutive numbers or not
Driver Code
Function call
Function to find the maximum sum
Base case len of array is 1
Stores the final result
Traverse the array
Store left prefix sum
Store right prefix sum
Compare the left and right
If both are equal apply the optimal method
Update with minimum
Return the final ans
Function to print maximum sum
Dicitionary to store prefix sums
Traversing the array
Add prefix sum of the array
Drivers Code
Function Call
Function to return the maximum possible time in 24 - Hours format that can be represented by array elements
Stores the frequency of the array elements
Maximum possible time
Iterate to minimum possible time
Conditions to reduce the the time iteratively
If all required digits are present in the Map
Retrieve Original Count
If seconds is reduced to 0
If minutes is reduced to 0
Driver Code
Function to find palindromic prefix of maximum length
Finding palindromic prefix of maximum length
Checking if curr substring is palindrome or not .
Condition to check if the prefix is a palindrome
if no palindrome exist
Function to find the maximum size palindrome such that after removing minimum size substring
Finding prefix and suffix of same length
Matching the ranges
Case 1 : Length is even and whole string is palindrome
Case 2 : Length is odd and whole string is palindrome
Adding that mid character
Add prefix or suffix of the remaining string or suffix , whichever is longer
Reverse the remaining string to find the palindromic suffix
Driver Code
Python3 program of the above approach
Function to count the number ends with given number in range
Find number of digits in A
Find the power of 10
Incrementing the A
Driver Code
Function call
Function to find the minimum number of operations required to convert th given string into palindrome
Iterate till half of the string
Find the absolute difference between the characters
Adding the minimum difference of the two result
Return the result
Given string
Function call
Function to store and check the factors
Check if factors are equal
Check if the factor is already present
Insert the factor in set
Check if the factor is already present
Insert the factors in set
Function to check if all the pairs of array elements are coprime with each other
Check if factors of A [ i ] haven 't occurred previously
Driver code
Function to calculate the count of subsequences
Find the maximum from the array
Find the minimum from the array
If array contains only one distinct element
Find the count of maximum
Find the count of minimum
Finding the result with given condition
Driver Code
Function call
Function that finds the minimum number of the element must be added to make A as a subsequence in B
Base Case
dp [ i ] [ j ] indicates the length of LCS of A of length i & B of length j
If there are no elements either in A or B then the length of lcs is 0
If the element present at ith and jth index of A and B are equal then include in LCS
If they are not equal then take the max
Return difference of length of A and lcs of A and B
Driver Code
Given Sequence A and B
Function Call
Function to calculate the square root of the sum of a subarray in a given range
Calculate the sum of array elements within a given range
Finding the square root
If a perfect square is found
Reduce the search space if the value is greater than sum
Reduce the search space if the value if smaller than sum
Driver Code
Given Array
Given range
Function call
Function to find the total count of subarrays
Iterate over each subarray
Difference between first two terms of subarray
Iterate over the subarray from i to j
Check if the difference of all adjacent elements is same
Driver Code
Given array
Function call
Function to calculate required maximum subarray sum
Initialize two pointers
Stores the unique elements
Insert the first element
Current max sum
Global maximum sum
Update sum & increment j
Add the current element
Update sum and increment i and remove arr [ i ] from set
Remove the element from start position
Return the maximum sum
Driver Code
Given array arr [ ]
Function call
Print the maximum sum
Python3 program for the above approach
Function to count numbers in the range [ l , r ] having exactly one unset bit
Stores the required count
Iterate over the range
Calculate number of bits
Calculate number of set bits
If count of unset bits is 1
Increment answer
Return the answer
Driver Code
Function call
Python3 program for the above approach
Function to count numbers in the range [ L , R ] having exactly one unset bit
Stores the count elements having one zero in binary
Stores the maximum number of bits needed to represent number
Loop over for zero bit position
Number having zero_bit as unset and remaining bits set
Sets all bits before zero_bit
Set the bit at position j
Set the bit position at j
If cur is in the range [ L , R ] , then increment ans
Return ans
Driver Code
Function Call
Function to calculate the sum of distances between occurrences of same characters in a string
If similar characters are found
Add the difference of their positions
Return the answer
Driver Code
Function to find the number of array elements that can be represented as the sum of two or more consecutive array elements
Stores the frequencies of array elements
Stores required count
Update frequency of each array element
Find sum of all subarrays
Increment ans by cnt [ sum ]
Reset cnt [ sum ] by 0
Return ans
Driver Code
Given array
Function call
Python3 program for the above approach
Function to find maximum gcd of all pairs possible from first n natural numbers
Stores maximum gcd
Iterate over all possible pairs
Update maximum GCD
Driver Code
Function to find the maximum GCD among all the pairs from first n natural numbers
Return max GCD
Driver code
Function to remove the odd indexed characters from a given string
Stores the resultant string
If the current index is odd
Skip the character
Otherwise , append the character
Return the modified string
Driver Code
Remove the characters which have odd index
Function to return the length of the longest subarray forming a GP in a sorted array
Base Case
Stores the length of GP and the common ratio
Stores the maximum length of the GP
Traverse the array
Check if the common ratio is valid for GP
If the current common ratio is equal to previous common ratio
Increment the length of the GP
Store the max length of GP
Otherwise
Update the common ratio
Update the length of GP
Store the max length of GP
Update the length of GP
Store the max length of GP
Return the max length of GP
Given array
Length of the array
Function call
Function to count maximum number of uncrossed lines between the two given arrays
Stores the length of lcs obtained upto every index
Iterate over first array
Iterate over second array
Update value in dp table
If both characters are equal
Update the length of lcs
If both characters are not equal
Update the table
Return the answer
Driver Code
Given array A [ ] and B [ ]
Function Call
Function to count the minimum number of flips required
Dimensions of matrix
Stores the count the flips
Check if element is same or not
Return the final count
Given Matrix
Given path as a string
Function call
Python3 implementation of the above approach
Checking if any pair is possible or not in range ( l , r )
If not possible print ( - 1 )
Print LCM pair
Driver Code
Function call
Python Program to implement the above approach
Function to print all possible shortest sequences starting from start to target .
Find words differing by a single character with word
Find next word in dict by changing each element from ' a ' to 'z
Function to get all the shortest possible sequences starting from ' start ' to 'target
Store all the shortest path .
Store visited words in list
Queue used to find the shortest path
Stores the distinct words from given list
Stores whether the shortest path is found or not
Explore the next level
Find words differing by a single character
Add words to the path .
Found the target
If already reached target
Erase all visited words .
Driver Code
Function to reverse a number
Store the reverse of N
Return reverse of N
Function to get the count of non - palindromic numbers having same first and last digit
Store the required count
Traverse the array
Store reverse of arr [ i ]
Check for palindrome
IF non - palindromic
Check if first and last digits are equal
Driver Code
Python3 program for the above approach
Function to find the smallest subarray with sum greater than or equal target
DP table to store the computed subproblems
Initialize first column with 0
Initialize first row with 0
Check for invalid condition
Fill up the dp table
Print the minimum length
Driver Code
Function which returns the minimum difference of loads
Compute the overall server load
Stores the results of subproblems
Fill the partition table in bottom up manner
If i - th server is included
If i - th server is excluded
Server A load : total_sum - ans Server B load : ans Diff : abs ( total_sum - 2 * ans )
Driver Code
Function Call
Function to find the length of longest subarray whose product is positive
Stores the length of current subarray with positive product
Stores the length of current subarray with negative product
Stores the length of the longest subarray with positive product
Reset the value
If current element is positive
Increment the length of subarray with positive product
If at least one element is present in the subarray with negative product
Update res
If current element is negative
Increment the length of subarray with negative product
If at least one element is present in the subarray with positive product
Update res
Driver Code
Python3 program to implement the above approach
Function to find the length of the longest string from the given array of strings
Traverse the array
Stores the length of current string
Update maximum length
Return the maximum length
Function to print the longest strings from the array
Find the strings having length equals to lenn
Print the resultant vector of strings
Function to print all the longest strings from the array
Find the length of longest string
Find and print all the strings having length equals to max
Driver Code
Function to return minimum number of flips required
Base Case
Stores the count of minimum number of flips
Stores the count of zeros in current sub
If current character is 0
Continue ongoing sub
Start a new sub
If k consecutive zeroes are obtained
End segment
Return the result
Driver Code
Function call
Function to return all possible subarrays having product less than or equal to K
Store the required subarrays
Stores the product of current subarray
Stores the starting index of the current subarray
Check for empty array
Iterate over the array
Calculate product
If product exceeds K
Reduce product
Increase starting index of current subarray
Stores the subarray elements
Store the subarray elements
Add the subarrays to the li
Return the final li of subarrays
Driver Code
Function to find the count of possible pairs of collisions
Stores the time at which points reach the origin
Calculate time for each point
Sort the times
Counting total collisions
Count of elements arriving at a given point at the same time
Driver Code
Given set of points with speed
Function Call
Function to return the length of longest subarray forming an AP
Minimum possible length of required subarray is 2
Stores the length of the current subarray
Stores the common difference of the current AP
Stores the common difference of the previous AP
If the common differences are found to be equal
Continue the previous subarray
Start a new subarray
Update the length to store maximum length
Update the length to store maximum length
Return the length of the longest subarray
Driver Code
Function to find the minimum cost required to remove each character of the string in alphabetical order
Stores the frequency of characters of the string
Iterate through the string
Count the number of characters smaller than the present character
If no smaller character precedes current character
Increase the frequency of the current character
Return the total cost
Given string str
Function call
Function to find the subarrays of all possible lengths made up of only 1 s
Stores the frequency of the subarrays
Check if the previous value was also 0
If the previous value was 1
Find the subarrays of each size from 1 to count
If A [ ] is of the form ... .111
Function to find the count of all possible rectangles
Size of each of the arrays
Stores the count of subarrays of each size consisting of only 1 s from array A [ ]
Stores the count of subarrays of each size consisting of only 1 s from array B [ ]
Iterating over all subarrays consisting of only 1 s in A [ ]
If i is a factor of K , then there is a subarray of size K / i in B [ ]
Driver Code
Function to print the longest bitonic subsequence
Function to generate the longest bitonic subsequence
Store the lengths of LIS ending at every index
Store the lengths of LDS ending at every index
Compute LIS for all indices
Compute LDS for all indices
Find the index having maximum value of lis [ i ] + lds [ i ] + 1
Stores the count of elements in increasing order in Bitonic subsequence
Store the increasing subsequence
Sort the bitonic subsequence to arrange smaller elements at the beginning
Stores the count of elements in decreasing order in Bitonic subsequence
Print the longest bitonic sequence
Driver code
Function to check if the array can be partitioned into atmost d subarray with sum atmost T
Initial partition
Current sum
If current sum exceeds T
Create a new partition
If count of partitions exceed d
Function to find the minimum possible value of T
Stores the maximum and total sum of elements
Maximum element
Sum of all elements
Calculate median T
If atmost D partitions possible
Check for smaller T
Otherwise
Check for larger T
Print the minimum T required
Driver code
Function call
Function to return final result
Initialize variable to keep track of ongoing sequence
If current sequence is neither increasing nor decreasing
If prev char is greater
If prev char is same
Otherwise
If current sequence is Non - Decreasing
If prev char is smaller
If prev char is same
Update ongoing
Otherwise
Update ongoing
Increase count
If current sequence is Non - Increasing
If prev char is greater , then update ongoing with D
If prev char is equal , then update current with D
Otherwise , update ongoing with N and increment count
Return count + 1
Driver code
Function to calculate the minimum number of operations required
Stores the total number of operations
Iterate over the array
If the sum of pair of adjacent elements exceed k .
If current element exceeds k
Reduce arr [ i ] to k
Update arr [ i + 1 ] accordingly
Update answer
Driver Code
Function to print the desired lexicographic smaller string
Calculate length of the string
Stores the frequencies of characters of string str1
Stores the frequencies of characters of string str2
Decrease the frequency of second string from that of of the first string
To store the resultant string
To find the index of first character of the string str2
Append the characters in lexicographical order
Append all the current character ( i + ' a ' )
If we reach first character of string str2 append str2
Return the resultant string
Driver code
Function to decrypt and print the original strings
If length is exceeded
Reverse the string
Driver Code
Function to find the winner of the game when both players play optimally
Stores the frequency of all digit
Stores the scores of player1 and player2 respectively
Iterate to store frequencies
Turn for the player1
Add score of player1
Add score of player2
Check if its a draw
If score of player 1 is greater
Otherwise
Driver code
Function to generate a string S from string P and Q according to the given conditions
Stores the frequencies
Counts occurrences of each characters
Reduce the count of the character which is also present in Q
Stores the resultant string
Index in freq [ ] to segregate the string
Add Q to the resulting string
Driver Code
Function call
Function that calculates the moves required to prthe current String
row1 has qwertyuiop , row2 has asdfghjkl , and row3 has zxcvbnm Store the row number of each character
String length
Initialise move to 1
Traverse the String
If current row number is not equal to previous row then increment the moves
Return the moves
Driver Code
Given String str
Function Call
Python3 program to implement the above approach
Function to count the distinct strings possible after swapping the prefixes between two possible strings of the array
Stores the count of unique characters for each index
Store current string
Stores the total number of distinct strings possible
Return the answer
Driver Code
Function to find the maximum length of Subarrays for each element of the array having it as the maximum
Initialise the bounds
Iterate to find greater element on the left
If greater element is found
Decrement left pointer
If boundary is exceeded
Iterate to find greater element on the right
If greater element is found
Increment right pointer
if boundary is exceeded
Length of longest subarray where arr [ i ] is the largest
Print the answer
Driver code
Python3 program to implement the above approach
Function to count the number of substrings with sum equal to length
Stores the count of substrings
Add character to sum
Add count of substrings to result
Increase count of subarrays
Return count
Driver code
Function to count the number of ways to split array into three contiguous subarrays of the required type
Stores the prefix sums
Stores the suffix sums
Traverse the given array
Updating curr_subarray_sum until it is less than prefix_sum [ s - 1 ]
Increase count
Decrease curr_subarray_sum by arr [ s [ ]
Return count
Driver code
Function to find the number of operations required
Count of 1 's
Count of 0 's upto (cnt1)-th index
Return the answer
Driver Code
Function to find the number of operations required
Swap 0 ' s ▁ and ▁ 1' s
Return the answer
Driver code
Function to count the number of N - digit numbers with no equal pair of consecutive digits
Base Case
Calculate the total count of valid ( i - 1 ) - digit numbers
Update dp table
Calculate the count of required N - digit numbers
Driver Code
Iterative Function to calculate ( x ^ y ) % mod in O ( log y )
Initialize result
Update x if x >= mod
If x is divisible by mod
If y is odd , multiply x with result
y must be even now y = y / 2
Function to count the number of N - digit numbers with no equal pair of consecutive digits
Base Case
Driver Code
KMP algorithm
Function to return the required string
Finding the longest proper prefix which is also suffix
ans string
Update ans appending the substring K - 1 times
Append the original string
Returning min length string which contain exactly k substring of given string
Driver code
Function to check if an array can be sorted using given operations
If sequence becomes increasing after an already non - decreasing to non - increasing pattern
If a decreasing pattern is observed
Driver Code
Count of connected cells
Function to return the representative of the Set to which x belongs
If x is parent of itself
x is representative of the Set
Otherwise
Path Compression
Unites the set that includes x and the set that includes y
Find the representatives ( or the root nodes ) for x an y
If both are in the same set
Decrement count
If x ' s ▁ rank ▁ is ▁ less ▁ than ▁ y ' s rank
Otherwise
Then move x under y ( doesn 't matter which one goes where)
And increment the result tree 's rank by 1
Function to count the number of connected cells in the matrix
Store result for queries
Store representative of each element
Initially , all elements are in their own set
Stores the rank ( depth ) of each node
If the grid [ x * m + y ] is already set , store the result
Set grid [ x * m + y ] to 1
Increment count .
Check for all adjacent cells to do a Union with neighbour 's  set if neighbour is also 1
Store result .
Driver Code
Python3 program to implement the above approach
Function to find the minimum sum of two elements that are atleast K distance apart
Length of the array
Find the suffix array
Iterate in the array
Update minimum sum
Print the answer
Driver Code
Function that returns the maximum number of envelopes that can be inserted into another envelopes
Number of envelopes
Sort the envelopes in non - decreasing order
Initialize dp [ ] array
To store the result
Loop through the array
Find envelopes count for each envelope
Store maximum envelopes count
Return the result
Driver Code
Given the envelopes
Function Call
Function to print the maximum difference possible between the two halves of the array
Stores n maximum values from the start
Insert first n elements
Update sum of largest n elements from left
For the remaining elements
Obtain minimum value in the set
Insert only if it is greater than minimum value
Update sum from left
Remove the minimum
Insert the current element
Clear the set
Store n minimum elements from the end
Insert the last n elements
Update sum of smallest n elements from right
For the remaining elements
Obtain the minimum
Insert only if it is smaller than maximum value
Update sum from right
Remove the minimum
Insert the new element
Compare the difference and store the maximum
Return the maximum possible difference
Driver code
Function to check if each element of B [ ] can be formed by adding two elements of array A [ ]
Store each element of B [ ]
Traverse all possible pairs of array
If A [ i ] + A [ j ] is present in the set
Remove A [ i ] + A [ j ] from the set
If set is empty
Otherwise
Driver Code
Python3 program to implement the above approach
Function to find the count of array elements >= twice the median of K trailing array elements
Stores frequencies
Stores the array elements
Count the frequencies of the array elements
Iterating from d to n - 1 index means ( d + 1 ) th element to nth element
To check the median
Iterate over the frequencies of the elements
Add the frequencies
Check if the low_median value is obtained or not , if yes then do not change as it will be minimum
Check if the high_median value is obtained or not , if yes then do not change it as it will be maximum
Store 2 * median of K trailing elements
If the current >= 2 * median
Decrease the frequency for ( k - 1 ) - th element
Increase the frequency of the current element
Print the count
Driver Code
Python3 program to implement the above approach
Function to find out the smallest positive integer for the equation
Stores the minimum
Iterate till K
Check if n is divisible by i
Return the answer
Driver Code
Function to calculate and return the sum of arr [ 0. . index ]
Traverse ancestors of BITree [ index ]
Update the sum of current element of BIT to ans
Update index to that of the parent node in getSum ( ) view by subtracting LSB ( Least Significant Bit )
Function to update the Binary Index Tree by replacing all ancestors of index by their respective sum with val
Traverse all ancestors and sum with ' val ' .
Add ' val ' to current node of BIT
Update index to that of the parent node in updateBit ( ) view by adding LSB ( Least Significant Bit )
Function to construct the Binary Indexed Tree for the given array
Initialize the Binary Indexed Tree
Store the actual values in BITree [ ] using update ( )
Function to obtain and return the index of lower_bound of k
Store the Binary Indexed Tree
Solve each query in Q
Update the values of all ancestors of idx
Driver Code
Stores the count of safe nodes
Function to perform DFS on the Tree to obtain the count of vertices that are not required to be deleted
Update cost to reach the vertex
If the vertex does not satisfy the condition
Otherwise
Traverse its subtree
Driver Code
Stores the Tree
Perform DFS
Print the number of nodes to be deleted
Function to check if the array is made up of subarrays of repetitions
Base Case
Stores the size of current subarray
If a different element is encountered
If the previous subarray was a single element
Reset to new subarray
Increase size of subarray
If last element differed from the second last element
Driver code
Python3 program to implement the above approach
Function to find size of all the islands from the given matrix
Initialize a queue for the BFS traversal
Iterate until the queue is empty
Top element of queue
Pop the element Q . pop ( ) ;
Check for boundaries
Check if current element is 0
Check if current element is 1
Mark the cell visited
Incrementing the size
Traverse all neighbors
Return the answer
Function to prsize of each connections
Stores the size of each connected non - empty
Check if the cell is non - empty
Function call
Print the answer
Driver Code
Function to find second largest product pair in arr [ 0. . n - 1 ]
No pair exits
Sort the array
Initialize smallest element of the array
Initialize largest element of the array
Prsecond largest product pair
Driver Code
Given array
Function Call
Function to find the maximum subarray length of ones
Stores the length , starting index and ending index of the subarrays
S : starting index of the sub - array
Traverse only continuous 1 s
Calculate length of the sub - array
v [ i ] [ 0 ] : Length of subarray v [ i ] [ 1 ] : Starting Index of subarray v [ i ] [ 2 ] : Ending Index of subarray
If no such sub - array exists
Traversing through the subarrays
Update maximum length
v [ i + 1 ] [ 1 ] - v [ i ] [ 2 ] - 1 : Count of zeros between the two sub - arrays
Update length of both subarrays to the maximum
Update length of both subarrays - 1 to the maximum
Check if the last subarray has the maximum length
Driver Code
Python3 program to implement the above approach
Stack to store the visited vertices in the Topological Sort
Store Topological Order
Adjacency list to store edges
To ensure visited vertex
Function to perform DFS
Set the vertex as visited
Visit connected vertices
Push into the stack on complete visit of vertex
Function to check and return if a cycle exists or not
Stores the position of vertex in topological order
Pop all elements from stack
Push element to get Topological Order
Pop from the stack
If parent vertex does not appear first
Cycle exists
Return false if cycle does not exist
Function to add edges from u to v
Driver Code
Insert edges
If cycle exist
Function to rearrange the array such that no same - indexed subset have sum equal to that in the original array
Initialize a vector
Iterate the array
Sort the vector
Shift of elements to the index of its next cyclic element
Print the answer
Driver Code
Python3 program to implement the above approach
Function to count the number of elements to be removed from the array based on the given condition
Sort the array
Initialize the variable
Iterate for all possible pairs
Check the difference between the numbers
Update the minimum removals
Return the answer
Driver Code
Function to check if it is possible to reduce the array to a single element
Stores frequency of 0 's
Stores frequency of 1 's
Condition for array to be reduced
Otherwise
Driver Code
Function to return the nearest smaller character
Stores the nearest smaller character
Iterate till starts cross end
Find the mid element
Check if K is found
Check if current character is less than K
Increment the start
Otherwise
Increment end
Return the character
Driver code
Function to find the maximum size of the required subset
Size of the array
Sort the array
Stores which index is included or excluded
Stores the indices of array elements
Count of pairs
Iterate through all the element
If element is included
Check if a [ i ] * k is present in the array or not
Increase count of pair
Exclude the pair
Driver Code
Python3 program for the above approach
Base Case - if T is empty , it matches 0 length prefix
Convert strings to lower case for uniformity
Update dictCount to the letter count of T
If new character is found , initialize its entry , and increase nUnique
Increase count of ch
Iterate from 0 to N
i - th character
Skip if ch not in targetStr
Decrease Count
If the count of ch reaches 0 , we do not need more ch , and can decrease nUnique
If nUnique reaches 0 , we have found required prefix
Otherwise
Driver Code
Function to check and return if substrings of length mid has a common character a
Length of the string
Initialise the first occurrence of character a
Check that distance b / w the current and previous occurrence of character a is less than or equal to mid
If distance exceeds mid
Function to check for all the alphabets , if substrings of length mid have a character common
Check for all 26 alphabets
Check that char i + a is common in all the substrings of length mid
If no characters is common
Function to calculate and return the minm length of substrings
Initialise low and high
Perform binary search
Update mid
Check if one common character is present in the length of the mid
Returns the minimum length that contain one common character
Function to check if all characters are distinct
Driver Code
Function returns maximum possible value of k
Pointer i make sure that A [ i ] will result in max k
Stores maximum possible k
Possible value of k for current pair ( A [ i ] and A [ j ] )
If current value exceeds k
Update the value of k
Update pointer i
Return the maxm possible k
Driver Code
Function to Split the array into minimum number of subsets with difference strictly > 1
Sort the array
Traverse through the sorted array
Check the pairs of elements with difference 1
If we find even a single pair with difference equal to 1 , then 2 partitions else only 1 partition
Print the count of partitions
Driver Code
Given array
Size of the array
Function call
Function to check if a palindromic string can be formed from the substring of given strings
Boolean array to mark presence of characters
Check if any of the character of str2 is already marked
If a common character is found
If no common character is found
Driver code
Python3 implementation of the above approach
Function prints the required pairs
First co - prime pair
As a pair ( 1 n ) has already been Printed
If i is a factor of N
Since ( i , i ) won 't form  a coprime pair
Driver Code
Perform DFS to count the in - degree and out - degree of the graph
Mark the source as visited
Traversing adjacent nodes
Mark out - degree as 1
Mark in - degree as 1
If not visited
DFS Traversal on adjacent vertex
Function to return minimum number of edges required to make the graph strongly connected
For Adjacency List
Initialize the in - degree array
Initialize the out - degree array
Initialize the visited array
Perform DFS to count in - degrees and out - degreess
To store the result
To store total count of in - degree and out - degree
Find total in - degree and out - degree
Calculate the minimum edges required
Return the minimum edges
Driver code
Function call
Function returns the required count
Store the indices of the elements present in A [ ] .
Store the maximum and minimum index of the elements from 1 to i .
Update maxi and mini , to store minimum and maximum index for permutation of elements from 1 to i + 1
If difference between maxi and mini is equal to i
Increase count
Return final count
Driver Code
Function to find the largest element in the array arr [ ]
Base Condition
Initialize an empty list
Divide the array into two equal length subarrays and recursively find the largest among the two
Store length of compared1 [ ] in the first index
Store the maximum element
Return compared1 which contains the maximum element
Store length of compared2 [ ] in the first index
Store the maximum element
Return compared2 [ ] which contains the maximum element
Function to print the second largest element in the array arr [ ]
Find the largest element in arr [ ]
Find the second largest element in arr [ ]
Print the second largest element
Driver Code
Function to calculate the number of reverse bitonic substrings
Stores the count
All possible lengths of substrings
Starting poof a substring
Ending poof a substring
Condition for reverse bitonic substrings of length 1
Check for decreasing sequence
If end of substring is reache
For increasing sequence
If end of substring is reached
Return the number of bitonic substrings
Driver Code
Python3 program to implement the above approach
If sum is 0 , then answer is true
If sum is not 0 and arr [ ] is empty , then answer is false
Fill the subset table in bottom up manner
Function to find the sum
Find sum of all values
Return the value ;
Driver Code
Function to find the subarray of minimum length
Initialize the minimum subarray size to N + 1
Generate all possible subarray
Initialize the product
Find the product
Return the minimum size of subarray
Driver code
Given array
Python3 Program to implement the above approach
Function returns maximum number of required elements
Insert the elements of array B in the queue and set
Stores the answer
If A [ i ] is already processed
Until we find A [ i ] in the queue
Remove elements from the queue
Increment the count
Remove the current element A [ i ] from the queue and set .
Return total count
Driver code
Python3 program to check if a matrix is Bitonic or not
Function to check if an array is Bitonic or not
Check for increasing sequence
Check for decreasing sequence
Function to check whether given matrix is bitonic or not
Check row wise
Check column wise
Generate an array consisting of elements of current column
Driver Code
Python3 program to implement the above approach
Function to return the maximum GCD
To find all divisors of N
If i is a factor
Store the pair of factors
Store the maximum GCD
Return the maximum GCD
Driver Code
Function to check a subsequence can be formed with min difference mid
If a subsequence of size B with min diff = mid is possible return true else false
Function to find the maximum of all minimum difference of pairs possible among the subsequence
Sort the Array
Stores the boundaries of the search space
Store the answer
Binary Search
If subsequence can be formed with min diff mid and size B
Right half
Left half
Driver code
Python3 program for the above approach
Returns total number of valid triplets possible
Stores the count
Map to store frequency of array elements
Increment the frequency of A [ j + 1 ] as it can be a valid A [ k ]
If target exists in the map
Return the final count
Driver code
Python3 program for the above approach
Driver code
Number of rectangles
Stores the coordinates
Insert the coordinates
Function to check the sign of the element
Function to calculate and return the maximum sum of longest alternating subsequence
Iterate through the array
Stores the first element of a sequence of same sign
Traverse until an element with opposite sign is encountered
Update the maximum
Update the maximum sum
Update i
Return the maximum sum
Driver Code
Python3 program to implement the above approach
Function to check if a given array can be split into subsets of K consecutive elements
Stores the frequencies of array elements
Traverse the map
Check if all its occurrences can be grouped into K subsets
Traverse next K elements
If the element is not present in the array
If it cannot be split into required number of subsets
Driver Code
Function to count number of sub - strings of a given binary string that contains only 1
Iterate untill L and R cross each other
Check if reached the end of string
Check if encountered '1' then extend window
Check if encountered '0' then add number of strings of current window and change the values for both l and r
Return the answer
Function to flip the bits of string
Function to count number of sub - strings of a given binary string that contains only 0 s & 1 s
count of substring which contains only 1 s
Flip the character of string s 0 to 1 and 1 to 0 to count the substring with consecutive 0 s
count of substring which contains only 0 s
Driver Code
Given string str
Function Call
Function to check if a prime number satisfies the condition to be expressed as sum of two perfect squares
Function to check if a number is prime or not
Corner cases
Function to return the count of primes in the range which can be expressed as the sum of two squares
If i is a prime
If i can be expressed as the sum of two squares
Return the count
Driver code
Function to return the count of array elements with all elements to its left smaller than it
Stores the count
Stores the maximum
Iterate over the array
If an element greater than maximum is obtained
Increase count
Update maximum
Driver Code
Function to find all the bitonic sub strings
Pick starting po
Iterate till length of the string
Pick ending pofor string
Substring from i to j is obtained
Substrings of length 1
Increase count
For increasing sequence
Check for strictly increasing
Increase count
Check for decreasing sequence
Increase count
Print the result
Given string
Function Call
Function to find there exist a number or not in the array
Loop to check if there exist a number by divided by power of 2
Binary Search
Condition to check the number is found in the array or not
Otherwise divide the number by increasing the one more power of 2
Driver Code
Function to find the length of the longest subset
Stores the sum of differences between elements and their respective index
Stores the size of the subset
Iterate over the array
If an element which is smaller than or equal to its index is encountered
Increase count and sum
Store the difference with index of the remaining elements
Sort the differences in increasing order
Include the differences while sum remains positive or
Return the size
Driver code
Function calling
Python3 code for queries for number of elements that lie in range [ l , r ] ( with updates )
Function to set arr [ index ] = x
Function to get count of elements that lie in range [ l , r ]
Traverse array
If element lies in the range [ L , R ]
Increase count
Function to solve each query
Driver Code
Function generates the sequence
Map to store the frequency of numbers
Sum of all frequencies
Try all possibilities for the starting element
If the frequency of current element is non - zero
vector to store the answer
Copy of the map for every possible starting element
Decrement the frequency
Push the starting element to the vector
The last element inserted is i
Try to fill the rest of the positions if possible
If the frequency of last - 1 is non - zero
Decrement the frequency of last - 1
Insert it into the sequence
Update last number added to sequence
Break from the inner loop
If the size of the sequence vector is equal to sum of total frequqncies
Return sequence
If no such sequence if found return empty sequence
Function Call to print the sequence
The required sequence
If the size of sequence if zero it means no such sequence was found
Otherwise print the sequence
Driver Code
Frequency of all elements from 0 to n - 1
Number of elements whose frequencies are given
Function Call
Python3 implementation of the approach
Function to find the minimum distance between any two most and least frequent element
Initialize sets to store the least and the most frequent elements
Initialize variables to store max and min frequency
Initialize HashMap to store frequency of each element
Loop through the array
Store the count of each element
Store the least and most frequent elements in the respective sets
Store count of current element
If count is equal to max count
Store in max set
If count is greater then max count
Empty max set
Update max count
Store in max set
If count is equal to min count
Store in min set
If count is less then max count
Empty min set
Update min count
Store in min set
Initialize a variable to store the minimum distance
Initialize a variable to store the last index of least frequent element
Traverse array
If least frequent element
Update last index of least frequent element
If most frequent element
Update minimum distance
Traverse array from the end
If least frequent element
Update last index of least frequent element
If most frequent element
Update minimum distance
Print the minimum distance
Driver Code
Given array
Function Call
Python3 program for the above approach
Function that computes the string s
Length of the given string str
List that stores all the prime factors of given k
Find the prime factors
Initialize the count of each character position as 1
Loop until the list becomes empty
Increase the character count by multiplying it with the prime factor
If we reach end then again start from beginning
store output
Print the string
Driver code
Given String
Function Call
Function to assign rank to array elements
Copy input array into newArray
Sort newArray [ ] in ascending order
Dictionary to store the rank of the array element
Update rank of element
Assign ranks to elements
Driver Code
Given array arr [ ]
Function call
Print the array elements
Function to print all pairs with sum not present in the array
Corner Case
Stores the distinct array elements
Generate all possible pairs
Calculate sum of current pair
Check if the sum exists in the HashSet or not
Driver Code
Function to find and return the length of the longest subset whose smallest missing value is M
Initialize a set
If array element is not equal to M
Insert into set
Increment frequency
Stores minimum missing number
Iterate to find the minimum missing integer
If minimum obtained is less than M
Update answer
Return answer
Driver Code
Size of a column
Function to find the count of submatrix whose sum is X
Copying arr to dp and making it indexed 1
Precalculate and store the sum of all rectangles with upper left corner at ( 0 , 0 ) ;
Calculating sum in a 2d grid
Stores the answer
Minimum length of square
Maximum length of square
Flag to set if sub - square with sum X is found
Calculate lower right index if upper right corner is at { i , j }
Calculate the sum of elements in the submatrix with upper left column { i , j } and lower right column at { ni , nj } ;
If sum X is found
If sum > X , then size of the square with sum X must be less than mid
If sum < X , then size of the square with sum X must be greater than mid
If found , increment count by 1 ;
Driver Code
Given matrix arr [ ] [ ]
Function call
Function to check whether two arrays can be made equal by reversing a sub - array only once
Integer variable for storing the required starting and ending indices in the array
Finding the smallest index for which A [ i ] != B [ i ] i . e the starting index of the unequal sub - array
Finding the largest index for which A [ i ] != B [ i ] i . e the ending index of the unequal sub - array
Reversing the sub - array A [ start ] , A [ start + 1 ] . . A [ end ]
Checking whether on reversing the sub - array A [ start ] ... A [ end ] makes the arrays equal
If any element of the two arrays is unequal print No and return
Print Yes if arrays are equal after reversing the sub - array
Driver code
Function to count total number of valid substrings
Stores the count of substrings
Stores the frequency of characters
Initialised both pointers to beginning of the string
If all characters in substring from index i to j are distinct
Increment count of j - th character
Add all substring ending at j and starting at any index between i and j to the answer
Increment 2 nd pointer
If some characters are repeated or j pointer has reached to end
Decrement count of j - th character
Increment first pointer
Return the final count of substrings
Driver code
Function to find the largest factor of N which is less than or equal to K
Initialise the variable to store the largest factor of N <= K
Loop to find all factors of N
Check if j is a factor of N or not
Check if j <= K If yes , then store the larger value between ans and j in ans
Check if N / j <= K If yes , then store the larger value between ans and j in ans
Since max value is always stored in ans , the maximum value divisible by N less than or equal to K will be returned .
Driver Code
Given N and K
Function call
Python3 program to find maximum sum subarray of size between L and R .
Function to find maximum sum subarray of size between L and R
Calculating prefix sum
Maintain 0 for initial values of i upto R Once i = R , then we need to erase that 0 from our multiset as our first index of subarray cannot be 0 anymore .
We maintain flag to counter if that initial 0 was erased from set or not .
Erase 0 from multiset once i = b
Insert pre [ i - L ]
Find minimum value in multiset .
Erase pre [ i - R ]
Driver code
Function to Traverse the matrix row wise
Initialize ans
Traverse row wise
Initialize no of consecutive empty cells
Check if blocked cell is encountered then reset countcons to 0
Check if empty cell is encountered , then increment countcons
Check if number of empty consecutive cells is greater or equal to K , increment the ans
Return the count
Function to Traverse the matrix column wise
Initialize ans
Traverse column wise
Initialize no of consecutive empty cells
Check if blocked cell is encountered then reset countcons to 0
Check if empty cell is encountered , increment countcons
Check if number of empty consecutive cells is greater than or equal to K , increment the ans
Return the count
Driver Code
If k = 1 only traverse row wise
Traverse both row and column wise
Python3 program to implement the above approach
Function to check if the count of inversion of two types are same or not
If maximum value is found to be greater than a [ j ] , then that pair of indices ( i , j ) will add extra value to inversion of Type 1
Update max
Driver code
Python3 program to validate IP address using Regex
Function for Validating IP
Regex expression for validating IPv4
Regex expression for validating IPv6
Checking if it is a valid IPv4 addresses
Checking if it is a valid IPv6 addresses
Return Invalid
IP addresses to validate
Array to store shortest prime factor of every integer
Function to precompute shortest prime factors
Function to append distinct prime factors of every integer into a set
Store distinct prime factors
Function to return minimum steps using BFS
Queue of pairs to store the current number and distance from root .
Set to store distinct prime factors
Run BFS
Find out the prime factors of newNum
Iterate over every prime factor of newNum .
If M is obtained
Return number of operations
If M is exceeded
Otherwise
Update and store the new number obtained by prime factor
If M cannot be obtained
Driver code
Python3 program to implement the above approach
Stores all factors a number
Function to calculate and store in a vector
Function to return the count of array elements which are a product of two array elements
Copy elements into a a duplicate array
Sort the duplicate array
Store the count of elements
If the factors are not calculated already
Traverse its factors
If a pair of factors is found
Driver Code
Function to find maximum subarray size
Generating all subarray i -> starting index j -> end index
Map 1 to hash frequency of all elements in subarray
Map 2 to hash frequency of all frequencies of elements
Finding previous frequency of arr [ j ] in map 1
Increasing frequency of arr [ j ] by 1
Check if previous frequency is present in map 2
Delete previous frequency if hash is equal to 1
Decrement the hash of previous frequency
Incrementing hash of new frequency in map 2
Check if map2 size is 1 and updating answer
Return the maximum size of subarray
Given array arr [ ]
Function Call
Function to check if a character is vowel or not
0 - a 1 - b 2 - c and so on 25 - z
Function to check if any substring of length k exists which contains only vowels
Applying sliding window to get all substrings of length K
Remove the occurence of ( i - k + 1 ) th character
Function to perform Binary Search
Doing binary search on the lengths
Driver Code
Function to return the count of pairs
Compute suffix sums till i = 3
Base Case : x = 0
No valid pairs
Base Case : x = 1
Store the count of 0 's
Base Case : x = 2
Store suffix sum upto 5
Base Case : x = 3
Store count of 2 and suffix sum upto 4
For all other values of x
For all x >= 2 , every y = 0 and every y = 1 makes a valid pair
Return the count of pairs
Driver code
Function to find the minimum number of moves to traverse the given matrix
Constructing another matrix consisting of distinct values
Updating the array B by checking the values of A that if there are same values connected through an edge or not
Check for boundary condition of the matrix
If adjacent cells have same value
Check for boundary condition of the matrix
If adjacent cells have same value
Check for boundary condition of the matrix
If adjacent cells have same value
Check for boundary condition of the matrix
If adjacent cells have same value
Store all distinct elements in a set
Return answer
Driver code
Function call
Recursion Function to calculate the possible splitting
If there are less than two elements , we cannot partition the sub - array .
Iterate from the start to end - 1.
Recursive call to the left and the right sub - array .
If there is no such partition , then return 0
Function to find the total splitting
Prefix array to store the prefix - sum using 1 based indexing
Store the prefix - sum
Function Call to count the number of splitting
Given array
Function call
Function to choose N subarrays of size K such that the maximum element of subarrays is minimum
Condition to check if it is not possible to choose k sized N subarrays
Using binary search
calculating mid
Loop to find the count of the K sized subarrays possible with elements less than mid
Condition to check if the answer is in right subarray
Driver Code
Function Call
Function to count the number of distinct positive power of prime factor of integer N
Iterate for all prime factor
If it is a prime factor , count the total number of times it divides n .
Find the Number of distinct possible positive numbers
Return the final count
Given number N
Function call
Function that prints minimum sum after selecting N elements
Initialise the dp array
Base Case
Adding the element of array a if previous element is also from array a
Adding the element of array a if previous element is from array b
Adding the element of array b if previous element is from array a with an extra penalty of integer C
Adding the element of array b if previous element is also from array b
Print the minimum sum
Driver code
Given array arr [ ]
Given cost
Function Call
Function to calculate and return the minimum number of flips to make string valid
Stores the count of required flips
Stores the last index of '1' in the string
Check for the first substring of length K
If i - th character is '1
If the substring had no '1
Increase the count of required flips
Flip the last index of the window
Update the last index which contains 1
Check for remaining substrings
If last_idx does not belong to current window make it - 1
If the last character of the current substring is '1' , then update last_idx to i + k - 1 ;
If last_idx == - 1 , then the current substring has no 1
Increase the count of flips
Update the last index of the current window
Store the last index of current window as the index of last '1' in the string
Return the number of operations
Driver Code
Python3 program for the above approach
Function to find the string which differ at exactly K positions
Initialise s3 as s2
Number of places at which s3 differ from s2
Minimum possible value is ceil ( d / 2 ) if it is not possible then - 1
Case 2 when K is less equal d
X show the modification such that this position only differ from only one string
Modify the position such that this differ from both S1 & S2 & decrease the T at each step
Finding the character which is different from both S1 and S2
After we done T start modification to meet our requirement for X type
Resultant string
Case 1 when K > d In first step , modify all the character which are not same in S1 and S3
Finding character which is different from both S1 and S2
Our requirement not satisfied by performing step 1. We need to modify the position which matches in both string
Finding the character which is different from both S1 and S2
Resultant string
Driver Code
Given two strings
Function call
Python3 program for the above approach
Function to find the integral solutions of the given equation
Initialise count to 0
Iterate till sqrt ( N )
If divisor 's pair sum is even
Print the total possible solutions
Given number N
Function Call
Function to find the value at x of the given equation
Find the value equation at x
Return the value of ans
Function to find the integral solution of the given equation
Initialise start and end
Implement Binary Search
Find mid
Find the value of f ( x ) using current mid
Check if current mid satisfy the equation
Print mid and return
Print " NA " if not found any integral solution
Driver Code
Function Call
function to count the ordered triplets ( R , G , B )
count the B ( blue ) colour
Driver Code
Function to determine the minimum value of K such that the sum of cubes of first K natural number is greater than or equal to N
Variable to store the sum of cubes
Loop to find the number K
If C is just greater then N , then break the loop
Driver code
Function to determine the minimum value of K such that the sum of cubes of first K natural number is greater than or equal to N
Left bound
Right bound
Variable to store the answer
Applying binary search
Calculating mid value of the range
If the sum of cubes of first mid natural numbers is greater than equal to N iterate the left half
Sum of cubes of first mid natural numbers is less than N , then move to the right segment
Driver code
Function to find the length of longest zigZag contiguous subarray
' _ max ' to store the length of longest zigZag subarray
' _ len ' to store the lengths of longest zigZag subarray at different instants of time
Traverse the array from the beginning
Check if ' _ max ' length is less than the length of the current zigzag subarray . If true , then update '_max
Reset ' _ len ' to 1 as from this element , again the length of the new zigzag subarray is being calculated
Comparing the length of the last zigzag subarray with '_max
Return required maximum length
Driver code
Function to check for perfect square number
Find the mid value from start and last
Check if we got the number which is square root of the perfect square number N
If the square ( mid ) is greater than N it means only lower values then mid will be possibly the square root of N
If the square ( mid ) is less than N it means only higher values then mid will be possibly the square root of N
Driver code
Function to find the valley elements in the array which contains in the subarrays of the size K
Increment min_point if element at index i is smaller than element at index i + 1 and i - 1
final_point to maintain maximum of min points of subarray
Iterate over array from kth element
Leftmost element of subarray
Rightmost element of subarray
if new subarray have greater number of min points than previous subarray , then final_point is modified
Max minimum points in subarray of size k
Driver Code
Function to find the countStrings for each letter [ a - z ]
Initialize result as zero
Mark all letter as not visited
Loop through each strings
Increment the global counter for current character of string
Instead of re - initialising boolean vector every time we just reset all visited letter to false
Print count for each letter
Driver code
Given array of strings
Call the countStrings function
Function to find the subarray
Make prefix array to store the prefix sum of peak count
Count peak for previous index
Check if this element is a peak
Increment the count
Check if number of peak in the sub array whose l = i is greater or not
Print the result
Driver code
Function to get sorted array based on their distance from given integer K
Vector to store respective elements with their distance from integer K
Find the position of integer K
Insert the elements with their distance from K in vector
Element at distance 0
Elements at left side of K
Elements at right side of K
Print the vector content in sorted order
Sort elements at same distance
Print elements at distance i from K
Driver code
Function to the quotient and remainder
Check if start is greater than the end
Calculate mid
Check if n is greater than divisor then increment the mid by 1
Check if n is less than 0 then decrement the mid by 1
Check if n equals to divisor
Return the final answer
Recursive calls
Driver code
Function to count the number of triplets
Iterate through all the triplets
Rearrange the numbers in ascending order
Check if the necessary conditions satisfy
Increment count
Return the answer
Driver code
Python3 implementation of the above approach
Function to find log_b ( a )
Set two pointer for binary search
Calculating number of digits of a * mid ^ mid in base b
If number of digits > n we can simply ignore it and decrease our pointer
if number of digits <= n , we can go higher to reach value exactly equal to n
return the largest value of x
Driver Code
Function to find the maximum size of matrix with sum <= K
N size of rows and M size of cols
To store the prefix sum of matrix
Create Prefix Sum
Traverse each rows
Update the prefix sum till index i x j
To store the maximum size of matrix with sum <= K
Traverse the sum matrix
Index out of bound
Maximum possible size of matrix
Binary Search
Find middle index
Check whether sum <= K or not If Yes check for other half of the search
Else check it in first half
Update the maximum size matrix
Print the final answer
Driver Code
Given target sum
Function Call
FindRank function to find rank
Rank of first element is always 1
Iterate over array
As element let say its rank is 1
Element is compared with previous elements
If greater than previous than rank is incremented
print rank
Driver code
array named arr
length of arr
Program to find length of Longest Permutation Subsequence in a given array
Function to find the longest permutation subsequence
Map data structure to count the frequency of each element
If frequency of element is 0 , then we can not move forward as every element should be present
Increasing the length by one
Driver Code
Python 3 program to find the pair of Fibonacci numbers with a given sum and minimum absolute difference
Hash to store all the Fibonacci numbers
Function to generate fibonacci Series and create hash table to check Fibonacci numbers
Adding the first two Fibonacci numbers into the Hash set
Computing the remaining Fibonacci numbers based on the previous two numbers
Function to find the pair of Fibonacci numbers with the given sum and minimum absolute difference
Start from N / 2 such that the difference between i and N - i will be minimum
If both ' i ' and ' sum ▁ - ▁ i ' are fibonacci numbers then print them and break the loop
If there is no Fibonacci pair possible
Driver code
Generate the Fibonacci numbers
Find the Fibonacci pair
Python 3 program to check whether the sum of fibonacci elements of the array is a Fibonacci number or not
Hash to store the Fibonacci numbers up to Max
Function to create the hash table to check Fibonacci numbers
Inserting the first two Fibonacci numbers into the hash
Add the remaining Fibonacci numbers based on the previous two numbers
Function to check if the sum of Fibonacci numbers is Fibonacci or not
Find the sum of all Fibonacci numbers
Iterating through the array
If the sum is Fibonacci then return true
Driver code
array of elements
Creating a set containing all fibonacci numbers
Python 3 program to find the count of numbers whose difference with Fibonacci count upto them is atleast K
fibUpto [ i ] denotes the count of fibonacci numbers upto i
Function to compute all the Fibonacci numbers and update fibUpto array
Store the first two Fibonacci numbers
Compute the Fibonacci numbers and store them in isFib array
Compute fibUpto array
Function to return the count of valid numbers
Compute fibUpto array
Binary search to find the minimum number that follows the condition
Check if the number is valid , try to reduce it
Ans is the minimum valid number
Driver Code
Python3 program to find lexicographically smallest palindromic subsequence of even length
Frequency array for each character
Preprocess the frequency array calculation
Frequency array to track each character in position 'i
Calculating prefix sum over this frequency array to get frequency of a character in a range [ L , R ] .
Util function for palindromic subsequences
Find frequency of all characters
For each character find it 's frequency  in range [L, R]
If frequency in this range is > 1 , then we must take this character , as it will give lexicographically smallest one
There is no character in range [ L , R ] such that it 's frequency is > 1.
Return the character 's value
Function to find lexicographically smallest palindromic subsequence of even length
Find in the palindromic subsequences
No such subsequence exists
Driver Code
Function calls
Python3 program to find length of the longest subarray with all fibonacci numbers
Function to create hash table to check for Fibonacci numbers
Insert first two fibnonacci numbers
Summation of last two numbers
Update the variable each time
Function to find the longest fibonacci subarray
Find maximum value in the array
Creating a set containing Fibonacci numbers
Left array is used to count number of continuous fibonacci numbers starting from left of current element
Check if current element is a fibonacci number
Right array is used to count number of continuous fibonacci numbers starting from right of current element
Check if current element is a fibonacci number
Driver code
Python3 implementation to find the minimum window size in the range such that each window of that size contains atleast P primes
Function to check that a number is a prime or not in O ( sqrt ( N ) )
Loop to check if any number number is divisible by any other number or not
Function to check whether window size satisfies condition or not
Loop to check each window of size have atleast P primes
Checking condition using prefix sum
Function to find the minimum window size possible for the given range in X and Y
Prefix array
Mark those numbers which are primes as 1
Convert to prefix sum
Applying binary search over window size
Check whether mid satisfies the condition or not
If satisfies search in first half
Else search in second half
Driver Code
Function to find XOR of pairwise sum of every unordered pairs
Loop to choose every possible pairs in the array
Driver Code
Size of matrix
Function to preprocess the matrix for computing the sum of every possible matrix of the given size
Loop to copy the first row of the matrix into the aux matrix
Computing the sum column - wise
Computing row wise sum
Function to find the sum of a submatrix with the given indices
Overall sum from the top to right corner of matrix
Removing the sum from the top corer of the matrix
Remove the overlapping sum
Add the sum of top corner which is subtracted twice
Function to find the maximum square size possible with the such that every submatrix have sum less than the given sum
Loop to choose the size of matrix
Loop to find the sum of the matrix of every possible submatrix
Driver Code
Function to create hash table to check Fibonacci numbers
Storing the first two numbers in the hash
Finding Fibonacci numbers up to N and storing them in the hash
Function to find the Fibonacci pair with the given sum
creating a set containing all fibonacci numbers
Traversing all numbers to find first pair
If both i and ( N - i ) are Fibonacci
Printing the pair because i + ( N - i ) = N
If no fibonacci pair is found whose sum is equal to n
Driven code
Python 3 program to count of multiples in an Array before every element
Function to find all factors of N and keep their count in map
Traverse from 1 to sqrt ( N ) if i divides N , increment i and N / i in map
Function to count of multiples in an Array before every element
To store factors all of all numbers
Traverse for all possible i 's
Printing value of a [ i ] in map
Now updating the factors of a [ i ] in the map
Driver code
Function call
Function to remove duplicates
Initialise 2 nd pointer
Iterate over the array
Updating the 2 nd pointer
Driver code
Function call
Function to check if an array represents a permutation or not
Set to check the count of non - repeating elements
Insert all elements in the set
Calculating the max element
Check if set size is equal to n
Driver code
Python3 implementation for D 'Esopo-Pape algorithm
Number of vertices in graph
Adjacency list of graph
Queue to store unoperated vertices
Distance from source vertex
Status of vertex
let 0 be the source vertex
Pop from front of the queue
scan adjacent vertices of u
e < - [ weight , vertex ]
if e [ 1 ] is entering first time in the queue
Append at back of queue
Append at front of queue
Driver Code
Adjacency matrix of graph
Python3 code to implement the above approach
N stores total number of subsets
Generate each subset one by one
Check every bit of i
if j 'th bit of i is set,  check arr[j] with X
Driver code
Function to calculate ( 2 ^ ( n - 1 ) )
Initially initialize answer to 1
If e is odd , multiply b with answer
Function to count subsets in which X element is present
Check if X is present in given subset or not
If X is present in set then calculate 2 ^ ( n - 1 ) as count
if X is not present in a given set
Driver code
Function to return the amount of wood collected if the cut is made at height m
Function that returns Height at which cut should be made
Sort the heights of the trees
The minimum and the maximum cut that can be made
Binary search to find the answer
The amount of wood collected when cut is made at the mid
If the current collected wood is equal to the required amount
If it is more than the required amount then the cut needs to be made at a height higher than the current height
Else made the cut at a lower height
Driver code
Python3 implementation of the approach
Function that returns true if ch is a digit
Function that returns true if st contains all the digits from 0 to 9
To mark the present digits
For every character of the string
If the current character is a digit
Mark the current digit as present
For every digit from 0 to 9
If the current digit is not present in st
Driver code
Function that return true if a symmetric is possible with the elements of the array
Map to store the frequency of the array elements
Traverse through array elements and count frequencies
For every unique element
Element has already been found
The frequency of the element something other than 0 and 1
Driver code
Python3 implementation of the approach
Merge procedure to merge two vectors into a single vector
Final vector to return after merging
Loop continues until it reaches the end of one of the vectors
Here , simply add the remaining elements to the vector v
Procedure to build the segment tree
Reached the leaf node of the segment tree
Recursively call the buildTree on both the nodes of the tree
Storing the final vector after merging the two of its sorted child vector
Query procedure to get the answer for each query l and r are query range
out of bound or no overlap
Complete overlap Query range completely lies in the segment tree node range
binary search to find index of k
Partially overlap Query range partially lies in the segment tree node range
Function to perform the queries
Driver code
1 - based indexing
Number of queries
Python implementation of the approach
combine function to make parent node
building the tree
leaf node
merging the nodes while backtracking
performing query
out of bounds
complete overlaps
partial overlaps
Driver Code
1 - based indexing
Utility function to calculate sum of gcd of all sub - arrays .
Fixing the starting index of a subarray
Fixing the ending index of a subarray
Finding the GCD of this subarray
Adding this GCD in our sum
Driver Code
Function that returns true if the array contains an element which is equal to the XOR of the remaining elements
To store the XOR of all the array elements
For every element of the array
Take the XOR after excluding the current element
If the XOR of the remaining elements is equal to the current element
If no such element is found
Driver Code
Function to add edge between two nodes
Function returns topological order of given graph
Indeg vector will store indegrees of all vertices
Answer vector will have our final topological order
Visited will be true if that vertex has been visited
q will store the vertices that have indegree equal to zero
Iterate till queue is not empty
Push the front of queue to answer
For all neighbours of u , decrement their indegree value
If indegree of any vertex becomes zero and it is not marked then push it to queue
Mark this vertex as visited
Return the resultant topological order
Function to return the winner between u and v
Player who comes first wins
Driver code
Total number of players
Build the graph add ( adj , x , y ) means x wins over y
Resultant topological order in topotable
Queries
Python3 implementation of the approach
Recursive function that returns square root of a number with precision upto 5 decimal places
If mid itself is the square root , return mid
If mul is less than n , recur second half
Else recur first half
Function to find the square root of n
While the square root is not found
If n is a perfect square
Square root will lie in the interval i - 1 and i
Driver code
Function to find the length of longest sub - string having all characters same as character K
Initialize variables
Iterate till size of string
Check if current character is K
Assingning the max value to max_len
Driver code
Function call
Function to find partition point in array to maximize xor sum
Traverse through the array
Calculate xor of elements left of index i including ith element
Calculate xor of the elements right of index i
Keep the maximum possible xor sum
Return the 1 based index of the array
Driver code
Function call
Function to calculate Prefix Xor array
Calculating prefix xor
Function to find partition point in array to maximize xor sum
To store prefix xor
Compute the prefix xor
To store sum and index
Calculate the maximum sum that can be obtained splitting the array at some index i
PrefixXor [ i ] = Xor of all arr elements till i ' th ▁ index ▁ PrefixXor [ n - 1 ] ▁ ▁ ^ ▁ PrefixXor [ i ] ▁ = ▁ Xor ▁ of ▁ all ▁ elements ▁ ▁ from ▁ i + 1' th index to n - 1 'th index
Return the index
Driver code
Function call
Function to find color of the node
Maximum is to store maximum color
Loop to check all the parent values to get maximum color
Find the number into map and get maximum color
Take the maximum color and assign into maximum variable
Find parent index
Return maximum color
Function to build hash map with color
To store color of each node
For each number add a color number
Assigning color
Return hash map
Driver code
Build mapWithColor
Print the maximum color
Python3 implementation of the approach
Function to count the number of smaller strings in A for every in B
Count the frequency of all characters
Iterate for all possible strings in A
Increase the frequency of every character
Check for the smallest character 's frequency
Get the smallest character frequency
Insert it in the vector
Sort the count of all the frequency of the smallest character in every string
Iterate for every in B
Hash set every frequency 0
Count the frequency of every character
Find the frequency of the smallest character
Count the number of strings in A which has the frequency of the smaller character less than the frequency of the smaller character of the in B
Store the answer
Function to print the answer
Get the answer
Print the number of strings for every answer
Driver code
Function to return the leftmost and rightmost nodes of the BST whose preorder traversal is given
Variables for finding minimum and maximum values of the array
Update the minimum
Update the maximum
Print the values
Driver Code
Python3 implementation of the approach
Function that compares both the arrays and returns - 1 , 0 and 1 accordingly
Return 1 if mid row is less than arr [ ]
Return 1 if mid row is greater than arr [ ]
Both the arrays are equal
Function to find a row in the given matrix using binary search
If current row is equal to the given array then return the row number
If arr [ ] is greater , ignore left half
If arr [ ] is smaller , ignore right half
No valid row found
Driver code
Python3 implementation of the above approach
Function to find required value
Variable to store final answer
Loop to find prefix - sum
Sorting prefix - sum array
Loop to find upper_bound for each element
Returning final answer
Driver code
Function to find required value
Python3 implementation of above approach
Function to return total number of intersections
Maximum possible number of intersections
Store all starting points of type1 ranges
Store all endpoints of type1 ranges
Starting point of type2 ranges
Ending point of type2 ranges
Subtract those ranges which are starting after R
Subtract those ranges which are ending before L
Driver Code
Function to return gcd of a and b
Function to return the lcm of a and b
Function to return the count of numbers from 1 to num which are divisible by a , b or c
Calculate number of terms divisible by a and by b and by c then , remove the terms which is are divisible by both a and b , both b and c , both c and a and then add which are divisible by a and b and c
Function to find the nth term divisible by a , b or c by using binary search
Set low to 1 and high to max ( a , b , c ) * n
If the current term is less than n then we need to increase low to mid + 1
If current term is greater than equal to n then high = mid
Driver code
Function to check if mid can be maximum sub - arrays sum
If individual element is greater maximum possible sum
Increase sum of current sub - array
If the sum is greater than mid increase count
Check condition
Function to find maximum subarray sum which is minimum
start = max ( array ) Max subarray sum , considering subarray of length 1
Answer stores possible maximum sub array sum
If mid is possible solution Put answer = mid ;
Driver Code
Python3 implementation of the approach
Function to return the count of common elements
Traverse the first array
Set 1 at ( index ) position a [ i ]
Traverse the second array
Set 1 at ( index ) position b [ i ]
Bitwise AND of both the bitsets
Find the count of 1 's 
Driver code
Function to create a new sorted array using Binary Search
Auxiliary Array
if b is empty any element can be at first place
Perform Binary Search to find the correct position of current element in the new array
let the element should be at first index
if a [ j ] is already present in the new array
add a [ j ] at mid + 1. you can add it at mid
if a [ j ] is lesser than b [ mid ] go right side
means pos should be between start and mid - 1
else pos should be between mid + 1 and end
if a [ j ] is the largest push it at last
here max ( 0 , pos ) is used because sometimes pos can be negative as smallest duplicates can be present in the array
Print the new generated sorted array
Driver Code
Python3 implementation of the approach
Function that return true if frequency of all the present characters is at least k
If the character is present and its frequency is less than k
Function to set every frequency to zero
Function to return the length of the longest sub - string such that it contains every character at least k times
To store the required maximum length
Starting index of the sub - string
Ending index of the sub - string
If the frequency of every character of the current sub - string is at least k
Update the maximum possible length
Driver code
Function that return true if the required array can be generated with m as the last element
Build the desired array
Check if the given array can be converted to the desired array with the given operation
Function to return the minimum number of operations required to convert the given array to an increasing AP series with common difference as 1
Apply Binary Search
If array can be generated with mid as the last element
Current ans is mid
Check whether the same can be achieved with even less operations
Build the desired array
Calculate the number of operations required
Return the number of operations required
Driver code
Node of a linked list
Function to insert a node at the beginning
Function to count the number of duplicate nodes in the linked list
Create a hash table insert head
Traverse through remaining nodes
Return the count of duplicate nodes
Driver code
Function to return the minimum steps required to reach the end of the given array
Array to determine whether a cell has been visited before
Queue for bfs
Push the source i . e . index 0
Variable to store the depth of search
BFS algorithm
Current queue size
Top - most element of queue
Base case
If we reach the destination i . e . index ( n - 1 )
Marking the cell visited
Pushing the adjacent nodes i . e . indices reachable from the current index
Driver code
Python3 implementation of the approach
Function to return the count of divisors of elem
Function to return the winner of the game
Convert every element of A [ ] to their divisor count
Convert every element of B [ ] to their divisor count
Sort both the arrays
For every element of A [ ] apply binary search to find number of pairs where A wins
B wins if A doesnot win
Driver code
Function that returns true if it is possible to transport all the boxes in the given amount of time
If all the boxes can be transported in the given time
If all the boxes can 't be  transported in the given time
Function to return the minimum time required
Sort the two arrays
Stores minimum time in which all the boxes can be transported
Check for the minimum time in which all the boxes can be transported
If it is possible to transport all the boxes in mid amount of time
Driver code
Function To find the required interval
Total Count of covered numbers
Array to store numbers that occur exactly in one interval till ith interval
Calculate New count by removing all numbers in range [ l , r ] occurring exactly once
Driver code
Function that returns true if it is possible to reach end of the array in exactly k jumps
Variable to store the number of steps required to reach the end
If it is possible to reach the end in exactly k jumps
Returns the minimum maximum distance required to reach the end of the array in exactly k jumps
Stores the answer
Binary search to calculate the result
Driver code
Function to return the kth element of the required series
To store the number of integers that lie upto the ith index
Compute the number of integers
Stores the index , lying from 1 to n ,
Using binary search , find the index in which the kth element will lie
Find the position of the kth element in the interval in which it lies
Driver code
Function to return the minimum positive integer satisfying the given equation
Binary search to find the value of x
Return the answer
Driver code
Function that checks if the given conditions are satisfied
To store the prefix sum of the array elements
Sort the array
Compute the prefix sum array
Maximum element in the array
Variable to check if there exists any number
Stores the index of the largest number present in the array smaller than i
Stores the index of the smallest number present in the array greater than i
Find index of smallest number greater than i
Find index of smallest number greater than i
If there exists a number
If no such number exists print no
Driver code
Function to return the missing element
Check if middle element is consistent
No inconsistency till middle elements When missing element is just after the middle element
Move right
Inconsistency found When missing element is just before the middle element
Move left
No missing element found
Driver code
Python 3 implementation of the approach
Function to return the maximum sum for every possible sequence such that a [ i ] + a [ i + k ] + a [ i + 2 k ] + ... + a [ i + qk ] is maximized
Initialize the maximum with the smallest value
Find maximum from all sequences
Sum of the sequence starting from index i
Update maximum
Driver code
Function to return the count of elements from the array which are greater than k
Stores the index of the left most element from the array which is greater than k
Finds number of elements greater than k
If mid element is greater than k update leftGreater and r
If mid element is less than or equal to k update l
Return the count of elements greater than k
Driver code
Python3 implementation of the approach
To store the normalized value of all the operations
Minimum possible value for a series of operations
If k can be reduced with first ( i + 1 ) operations
Impossible to reduce k
Number of times all the operations can be performed on k without reducing it to <= 0
Perform operations
Final check
Driver code
Python3 implementation of above approach
lookup table
create the lookup table for an array of length n
power and count variable
multiply by 2
initialize the lookup table
binary search
mid point of the array
count
if the value is found
if value is less than the mid value
if value is greater than the mid value
main function
create the lookup table
print the position of the array
Function to count the number of factors P in X !
Function to find the smallest X such that X ! contains Y trailing zeros
Driver code
Function to return the sum of the squares of first N natural numbers
Function to return the maximum N such that the sum of the squares of first N natural numbers is not more than X
Driver code
Function to return the index of the range in which K lies and uses linear search
Iterate and find the element
If K lies in the current range
K doesn 't lie in any of the  given ranges
Driver code
Function to return the index of the range in which K lies and uses binary search
Binary search
Find the mid element
If element is found
Check in first half
Check in second half
Not found
Driver code
Function to find the required prefix Sum
Function to hash all the values of prefix Sum array in an unordered map
Function to check if a range can be divided into two equal parts
To store the value of Sum of entire range
If value of Sum is odd
To store p_arr [ l - 1 ]
If the value exists in the map
Driver code
prefix - Sum array
Map to store the values of prefix - Sum
Perform queries
Function to return the ring , the number x belongs to .
Returns - 1 if number x is smaller than least element of arr
l and r represent the diagonal elements to search in
Returns - 1 if number x is greater than the largest element of arr
Function to perform binary search on an array sorted in increasing order l and r represent the left and right index of the row to be searched
Function to perform binary search on a particular column of the 2D array t and b represent top and bottom rows
Function to perform binary search on an array sorted in decreasing order
Function to perform binary search on a particular column of the 2D array
Function to find the position of the number x
Finding the ring
To store row and column
Edge case if n is odd
Check which of the 4 sides , the number x lies in
Printing the position
Driver code
Function to return the cost to make string a Panagram
Count the occurrences of each lowercase character
To store the total gain
If some character is missing , it has to be added at twice the cost
If some character appears more than once all of its occurrences except 1 can be traded for some gain
If gain is more than the cost
Return the total cost if gain < 0
Driver code
Function to return the required string score
create a hash map of strings in str
Store every string in the map along with its position in the array
If given string is not present in str [ ]
Multiply sum of alphabets with position
Driver code
Function to return the count of required sub - arrays
Traverse sub - array [ i . . j ]
Driver code
Python implementation of the approach
Function to build the segment tree
Function to return the bitwise OR of segment [ L . . R ]
Function to return the count of required sub - arrays
Build segment tree
Query segment tree for bitwise OR of sub - array [ i . . j ]
Driver code
Python3 program to implement the above approach
Function which builds the segment tree
Function that returns bitwise OR of segment [ L . . R ]
Function to count requisite number of subarrays
Check for subarrays starting with index i
If OR of subarray [ i . . mid ] >= K , then all subsequent subarrays will have OR >= K therefore reduce high to mid - 1 to find the minimal length subarray [ i . . mid ] having OR >= K
Increase count with number of subarrays having OR >= K and starting with index i
Driver code
Build segment tree .
Function to return the count of occurrence of pat in binary representation of n
To store decimal value of the pattern
To store a number that has all ones in its binary representation and length of ones equal to length of the pattern
Find values of pattern_int and all_ones
If the pattern occurs in the last digits of n
Right shift n by 1 bit
Driver code
Python3 implementation of the above approach
Function to return the number of non coincident pairs of points with manhattan distance equal to euclidean distance
To store frequency of all distinct Xi
To store Frequency of all distinct Yi
To store Frequency of all distinct points ( Xi , Yi )
Hash xi coordinate
Hash yi coordinate
Hash the point ( xi , yi )
find pairs with same Xi
calculate ( ( xFrequency ) C2 )
find pairs with same Yi
calculate ( ( yFrequency ) C2 )
find pairs with same ( Xi , Yi )
calculate ( ( xyFrequency ) C2 )
Driver Code
function to calculate max - min
Driver code
Python3 implementation of the above approach
primeUpto [ i ] denotes count of prime numbers upto i
Function to compute all prime numbers and update primeUpto array
0 and 1 are not primes
If i is prime
Set all multiples of i as non - prime
Compute primeUpto array
Function to return the count of valid numbers
Compute primeUpto array
Check if the number is valid , try to reduce it
ans is the minimum valid number
Driver Code
Function to find minimum index such that sum becomes 0 when the element is multiplied by - 1
Find array sum
Find element with value equal to sum / 2
when sum is equal to 2 * element then this is our required element
Driver code
Python implementation of efficient algorithm to find floor of every element
Prints greater elements on left side of every element
Create a sorted copy of arr [ ]
Traverse through arr [ ] and do binary search for every element
Find the location of first element that is greater than the given element
Since arr [ i ] also exists in array , v [ it - 1 ] will be same as arr [ i ] . Let us check v [ it - 2 ] is also same as arr [ i ] . If true , then arr [ i ] exists twice in array , so ceiling is same same as arr [ i ]
If next element is also same , then there are multiple occurrences , so print it
Driver code
Prints greater elements on left side of every element
Create a sorted copy of arr
Traverse through arr [ ] and do binary search for every element .
Floor of first element is - 1 if there is only one occurrence of it .
Find the first element that is greater than or or equal to given element
If next element is also same , then there are multiple occurrences , so print it
Otherwise print previous element
Driver Code
Python3 program to find smallest and largest elements of both diagonals
Function to find smallest and largest element from principal and secondary diagonal
take length of matrix
declare and initialize variables with appropriate value
take new smallest value
take new largest value
Condition for secondary diagonal is mat [ n - 1 - i ] [ i ] take new smallest value
take new largest value
Declare and initialize 5 X5 matrix
A linear Python 3 program to check if array becomes sorted after one swap
Find counts and positions of elements that are out of order .
If there are more than two elements which are out of order .
If all elements are sorted already
Cases like { 1 , 5 , 3 , 4 , 2 } We swap 5 and 2.
Cases like { 1 , 2 , 4 , 3 , 5 }
Now check if array becomes sorted for cases like { 4 , 1 , 2 , 3 }
Driver Code
Python 3 program to find intersection of two matrices
Function to print the resultant matrix
print element value for equal elements else *
Driver Code
Python3 program to count Triplets such that at least one of the numbers can be written as sum of the other two
Function to count the number of ways to choose the triples
compute the max value in the array and create frequency array of size max_val + 1. We can also use HashMap to store frequencies . We have used an array to keep remaining code simple .
Case 1 : 0 , 0 , 0
Case 2 : 0 , x , x
Case 3 : x , x , 2 * x
Case 4 : x , y , x + y iterate through all pairs ( x , y )
Driver code
Function to return the count of pairs having sum equal to K
Initialize pairs to 0
Create dictionary of elements of array A1
count total pairs
Every element can be part of at most one pair
return total pairs
Driver Code
function call to print required answer
Python3 program to find the number of ordered pairs
Function to find count of Ordered pairs
Initialize pairs to 0
Store frequencies
Count total Ordered_pairs
Driver Code
function to find longest sub - array whose elements gives same remainder when divided with K
Iterate in the array
check if array element greater then X or not
Driver code
Python 3 program to find whether a given element is present in the given 2 - D matrix
Basic binary search to find an element in a 1 - D array
if element found return true
if middle less than K then skip the left part of the array else skip the right part
if not found return false
Function to search an element in a matrix based on Divide and conquer approach
if the element lies in the range of this row then call 1 - D binary search on this row
if the element is less then the starting element of that row then search in upper rows else search in the lower rows
if not found
Driver code
Python 3 program to find nth term divisible by a or b
Function to return gcd of a and b
Function to calculate how many numbers from 1 to num are divisible by a or b
calculate number of terms divisible by a and by b then , remove the terms which are divisible by both a and b
Binary search to find the nth term divisible by a or b
set low to 1 and high to max ( a , b ) * n , here we have taken high as 10 ^ 18
if the current term is less than n then we need to increase low to mid + 1
if current term is greater than equal to n then high = mid
Driver code
Function to replace all occurrences of pi in a given with 3.14
Iterate through second last element of the string
If current and current + 1 alphabets form the word ' pi ' append 3.14 to output
Append the current letter
Return the output string
Driver Code
Python3 program to find number of elements that can be seen from right side
Driver code
Link list node
Push a new node on the front of the list .
Checks if pair with given product exists in the list or not
Check if pair exits
Driver Code
Start with the empty list
Use push ( ) to construct linked list
function to print the result
Function that finds the largest element which is repeated ' k ' times
sort the array
if the value of ' k ' is 1 and the largest appears only once in the array
counter to count the repeated elements
check if the element at index ' i ' is equal to the element at index ' i + 1' then increase the count
else set the count to 1 to start counting the frequency of the new number
if the count is equal to k and the previous element is not equal to this element
if there is no such element
Driver code
find the largest element that is repeated K times
Python implementation of above approach
Function that finds the largest element that occurs exactly ' k ' times
store the frequency of each element
to store the maximum element
if current element has frequency ' k ' and current maximum hasn 't been set
set the current maximum
if current element has frequency ' k ' and it is greater than the current maximum
change the current maximum
if there is no element with frequency 'k
print the largest element with frequency 'k
Driver code
find the largest element that is repeated K times
Function to find minimum element
Function to find maximum element
Function to get Sum
Function to get product
Driver Code
Sum of min and max element
Product of min and max element
Function to find the count
Hashmap to store all the elements which are popped once .
Check if the number is present in the hashmap Or in other words been popped out from the stack before .
Keep popping the elements while top is not equal to num
Pop the top ie . equal to num
Print the number of elements popped .
Driver code
Python3 program to answer Queries to check whether a given digit is present in the given range
Segment Tree with set at each node
Funtiom to build the segment tree
Left child node
Right child node
Merging child nodes to get parent node . Since set is used , it will remove redundant digits .
Function to query a range
Complete Overlapp condition return true if digit is present . else false .
No Overlapp condition Return false
If digit is found in any child return true , else False
Driver Code
Build the tree
Query 1
Query 2
Function to count the characters with same adjacent characters
if length is less than 3 then return length as there will be only two characters
Traverse the string
Increment the count if the previous and next character is same
Return count
Driver code
Python3 implementation of above approach
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Function to find the length of longest subarray having count of primes more than count of non - primes
unordered_map ' um ' implemented as hash table
traverse the given array
consider - 1 as non primes and 1 as primes
when subarray starts form index '0
make an entry for ' sum ' if it is not present in 'um
check if ' sum - 1' is present in ' um ' or not
update maxLength
required maximum length
Driver Code
Python3 program to find first element that is strictly smaller than given target
Minimum size of the array should be 1
If target lies beyond the max element , than the index of strictly smaller value than target should be ( end - 1 )
Move to the left side if target is smaller
Move right side
Driver code
Python program to find first element that is strictly greater than given target .
Move to right side if target is greater .
Move left side .
Driver code
A function to perform sequential search .
Linearly search the element
If not found
Shift elements before one position
Driver Code
Function to find the probability
find probability upto 2 decimal places
Driver Code
Comparison function used to sort preSum vector .
Function to find index in preSum vector upto which all prefix sum values are less than or equal to val .
Starting and ending index of search space .
To store required index value .
If middle value is less than or equal to val then index can lie in mid + 1. . n else it lies in 0. . mid - 1.
Function to find largest subarray having sum greater than or equal to k .
Length of largest subarray .
Vector to store pair of prefix sum and corresponding ending index value .
To store the current value of prefix sum .
To store minimum index value in range 0. . i of preSum vector .
Insert values in preSum vector .
Update minInd array .
If sum is greater than k , then answer is i + 1.
If sum is less than or equal to k , then find if there is a prefix array having sum that needs to be added to current sum to make its value greater than k . If yes , then compare length of updated subarray with maximum length found so far .
Driver code .
function to find slope of a number
to store slope of the given number 'num
loop from the 2 nd digit up to the 2 nd last digit of the given number 'num
if the digit is a maxima
if the digit is a minima
required slope
Driver Code
Python3 code for finding required pairs
The function to check if beautiful pair exists
Set for hashing
Traversing the first array
Traversing the second array to check for every j corresponding to single i
x + y = z = > x = y - z
If such x exists then we return true
Hash to make use of it next time
No pair exists
Driver Code
If pair exists then 1 else 0 2 nd argument as size of first array fourth argument as sizeof 2 nd array
Python Program to find the optimal number of elements such that the cumulative value should be less than given number
This function returns true if the value cumulative according to received integer K is less than budget B , otherwise returns false
Initialize a temporary array which stores the cumulative value of the original array
Sort the array to find the smallest K values
Check if the value is less than budget
This function prints the optimal number of elements and respective cumulative value which is less than the given number
Initialize answer as zero as optimal value may not exists
If the current Mid Value is an optimal value , then try to maximize it
Call Again to set the corresponding cumulative value for the optimal ans
Driver Code
Budget
Python 3 program previous greater element A naive solution to print previous greater element for every element in an array .
Previous greater for first element never exists , so we print - 1.
Let us process remaining elements .
Find first element on left side that is greater than arr [ i ] .
If all elements on left are smaller .
Driver code
Python3 program to print previous greater element An efficient solution to print previous greater element for every element in an array .
Create a stack and push index of first element to it
Previous greater for first element is always - 1.
Traverse remaining elements
Pop elements from stack while stack is not empty and top of stack is smaller than arr [ i ] . We always have elements in decreasing order in a stack .
If stack becomes empty , then no element is greater on left side . Else top of stack is previous greater .
Driver code
Function to find repeating elements
Flag variable used to represent whether repeating element is found or not .
Check if current element is repeating or not . If it is repeating then value will be greater than or equal to n .
Check if it is first repetition or not . If it is first repetition then value at index arr [ i ] is less than 2 * n . Print arr [ i ] if it is first repetition .
Add n to index arr [ i ] to mark presence of arr [ i ] or to mark repetition of arr [ i ] .
If flag variable is not set then no repeating element is found . So print - 1.
Driver Function
Function to find smallest positive missing number .
to store next array element in current traversal
if value is negative or greater than array size , then it cannot be marked in array . So move to next element .
traverse the array until we reach at an element which is already marked or which could not be marked .
find first array index which is not marked which is also the smallest positive missing number .
if all indices are marked , then smallest missing positive number is array_size + 1.
Driver code
Prints all triplets in arr [ ] with given sum
Driver code
Python3 program to find triplets in a given array whose Sum is equal to given sum .
function to print triplets with given sum
Find all pairs with Sum equals to " Sum - arr [ i ] "
Driver code
Python3 program to find a maximum product of a quadruple in array of integers
Function to find a maximum product of a quadruple in array of integers of size n
if size is less than 4 , no quadruple exists
will contain max product
Driver Code
Function to find a maximum product of a quadruple in array of integers of size n
if size is less than 4 , no quadruple exists
Sort the array in ascending order
Return the maximum of x , y and z
Driver Code
Python 3 program to find sum of maximum and minimum in any subarray of an array of positive numbers .
Driver code
Returns value of n * ( 2 * n * n - 1 )
Finds if a value of f ( n ) is equal to x where n is in interval [ low . . high ]
Returns true if x isStella octangula number . Else returns false .
Find ' high ' for binary search by repeated doubling
If condition is satisfied for a power of 2.
Call binary search
Driver code
Function to sort the given string without using any sorting technique
To store the final sorted string
for each character 'i
if character ' i ' is present at a particular index then add character ' i ' to 'new_str
required final sorted string
Driver Code
Python 3 implementation to sort the given string without using any sorting technique
A character array to store the no . of occurrences of each character between ' a ' to 'z
to store the final sorted string
To store each occurrence of character by relative indexing
To traverse the character array and append it to new_str
Driver program to test above
Link list node
Storing element 's frequencies  in a hash table.
Calculating the first maximum element
Push a node to linked list . Note that this function changes the head
Driver Code
Python Program to find row - wise maximum element sum considering elements in increasing order .
Function to perform given task
Getting the maximum element from last row
Comparing it with the elements of above rows
Maximum of current row .
If we could not an element smaller than prev_max .
Driver code
Python program to count occurrence of days in a month
function to find occurrences
stores days in a week
Initialize all counts as 4.
find index of the first day
number of days whose occurrence will be 5
mark the occurrence to be 5 of n - 28 days
print the days
driver program to test the above function
Python3 code to find k - th element after append and insert middle operations
ans = n Middle element of the sequence
length of the resulting sequence .
Updating the middle element of next sequence
Moving to the left side of the middle element .
Moving to the right side of the middle element .
Driver code
Python3 program to find first common element in two unsorted linked list
Link list node
A utility function to insert a node at the beginning of a linked list
Returns the first repeating element in linked list
Traverse through every node of first list
If current node is present in second list
If no common node
Driver code
Utility function to check number of elements having set msb as of pattern
Function for finding maximum and value pair
iterate over total of 30 bits from msb to lsb
find the count of element having set msb
if count >= 2 set particular bit in result
Find the elements
print the pair of elements
inc count value after printing element
return the result value
Driver function
Function to get max first and second
If current element is smaller than first , then update both first and second
If arr [ i ] is in between first and second then update second
cnt1 += 1 frequency of first maximum
cnt2 += 1 frequency of second maximum
Returns probability of choosing a pair with maximum sum .
Driver Code
Function to find no . of elements to be added from 1 to get n
Start adding numbers from 1
If sum becomes equal to s return n
Driver code
Python3 program of the above approach
Function to check if the s is the sum of first N natural number
Solution of Quadratic Equation
Condition to check if the solution is a integer
Driver Code
Function Call
python program to find total safe position to place your Bishop
function to calc total safe position
i , j denotes row and column of position of bishop
calc distance in four direction
calc total sum of distance + 1 for unsafe positions
return total safe positions
driver function
Function to count number of elements occurs between the elements .
Find num1
If num1 is not present or present at end
Find num2
If num2 is not present
return number of elements between the two elements .
Driver Code
Python program to find best meeting point in 2D array
Find all members home 's position
Sort positions so we can find most beneficial point
middle position will always beneficial for all group members but it will be sorted which we have already done
Now find total distance from best meeting point ( x , y ) using Manhattan Distance formula
Driver Code
Utility method to get sum of digits of K
loop until K is not zero
method returns count of numbers smaller than N , satisfying difference condition
binary search while loop
if difference between number and its sum of digit is smaller than given difference then smallest number will be on left side
if difference between number and its sum of digit greater than equal to given difference then smallest number will be on right side
return the difference between ' smallest ▁ number ▁ ▁ found ' and ' N ' as result
Driver code to test above methods
To generate random number between x and y ie . . [ x , y ]
A iterative randomized binary search function . It returns location of x in given array arr [ l . . r ] if present , otherwise - 1
Here we have defined middle as random index between l and r ie . . [ l , r ]
Check if x is present at mid
If x greater , ignore left half
If x is smaller , ignore right half
if we reach here , then element was not present
Driver code
Returns count buildings that can see sunlight
Initialuze result ( Note that first building always sees sunlight )
Start traversing element
If curr_element is maximum or current element is equal , update maximum and increment count
Driver code
Returns index of extra . element in arr1 [ ] n is size of arr2 [ ] . Size of arr1 [ ] is n - 1.
Driver code
Solve is passed both arrays
Returns index of extra element in arr1 [ ] . n is size of arr2 [ ] . Size of arr1 [ ] is n - 1.
left and right are end points denoting the current range .
If middle element is same of both arrays , it means that extra element is after mid so we update left to mid + 1
If middle element is different of the arrays , it means that the index we are searching for is either mid , or before mid . Hence we update right to mid - 1.
when right is greater than left our search is complete .
Driver code
Solve is passed both arrays
Utility method to compute cost , when all values of array are made equal to X
Method to find minimum cost to make all elements equal
Setting limits for ternary search by smallest and largest element
loop until difference between low and high become less than 3 , because after that mid1 and mid2 will start repeating
mid1 and mid2 are representative array equal values of search space
if mid2 point gives more total cost , skip third part
if mid1 point gives more total cost , skip first part
computeCost gets optimum cost by sending average of low and high as X
Driver code
Function to find the minimum number of jumps required to sort the array
Base Case
Store the required result
Stores the current position of elements and their respective maximum jump
Used to check if a position is already taken by another element
Stores the sorted array a [ ]
Traverse the array w [ ] & update positions jumps array a [ ]
Sort the array a [ ]
Traverse the array a [ ] over the range [ 1 , N - 1 ]
Store the index of current element and its just smaller element in array w [ ]
Iterate until current element position is at most its just smaller element position
Update the position of the current element
Print the result
Driver Code
Function to check if an array can be made strictly increasing
Traverse the given array arr [ ]
Update the value of p , arr [ i ] , and arr [ i - 1 ]
Traverse the given array
Check if the array arr [ ] is strictly increasing or not
Otherwise , array is increasing order , prYes
Driver Code
Function to reverse the bits of a number
Stores the reversed number
Divide rev by 2
If the value of N is odd
Update the value of N
Return the final value of rev
Function for rearranging the array element according to the given rules
Stores the new array elements
Function for rearranging the array
Stores the new array
Function to sort the array by reversing the binary representation
Creating a new array
Sort the array with the key
Get arr from newArr
Print the sorted array
Driver Code
Function to find the minimum value of the maximum element of the array by splitting at most K array element into perfect powers of 2
Sort the array element in the ascending order
Reverse the array
If count of 0 is equal to N
Otherwise , if K is greater than or equal to N
Otherwise
Driver Code
Function to check if it is possible to sort the array or not
Stores the index if there are two consecutive 1 's in the array
Traverse the given array
Check adjacent same elements having values 1 s
If there are no two consecutive 1 s , then always remove all the 1 s from array & make it sorted
If two consecutive 0 ' s ▁ are ▁ ▁ present ▁ after ▁ two ▁ consecutive ▁ ▁ 1' s then array can 't be sorted
Otherwise , print Yes
Driver Code
Function to find maximized count of ropes of consecutive length
Stores the maximum count of ropes of consecutive length
Sort the ropes by their length
Traverse the array
If size of the current rope is less than or equal to current maximum possible size + 1 , update the range to curSize + ropes [ i ]
If a rope of size ( curSize + 1 ) cannot be obtained
Driver Code
Input
Function Call
Function to find the maximum number of ranges where each range can be uniquely represented by an integer
Sort the ranges in ascending order
Stores the count of ranges
Stores previously assigned range
Traverse the vector arr [ ]
Skip the similar ranges of size 1
Find the range of integer available to be assigned
Check if an integer is available to be assigned
Update the previously assigned range
Update the count of range
Return the maximum count of ranges
Driver Code
Function to find the substring in S required to be reversed
Stores the size of the string
Stores the starting point of the substring
Iterate over the string S while i < N
Increment the value of i
Stores the ending index of the substring
If start <= 0 or i >= N
If start >= 1 and i <= N
Return the boolean value
If start >= 1
Return the boolean value
If i < N
Return true if S [ start ] is less than or equal to S [ i ]
Otherwise
Function to check if it is possible to sort the string or not
global start , end , i Stores the starting and the ending index of substring
Stores whether it is possible to sort the substring
Traverse the range [ 1 , N ]
If S [ i ] is less than S [ i - 1 ]
If flag stores true
If adjust ( S , i , start , end ) return false
Pr - 1
Unset the flag
Otherwise
Pr - 1
If start is equal to - 1
Update start and end
Print the value of start and end
Driver Code
Function find maximum sum of minimum and maximum of K subsets
Stores the result
Sort the array arr [ ] in decreasing order
Traverse the range [ 0 , K ]
Sort the array S [ ] in ascending order
Traverse the array S [ ]
If S { i ] is 1
Stores the index of the minimum element of the i - th subset
Traverse the array S [ ]
Update the counter
Return the resultant sum
Driver Code
Function to convert binary number to equivalent decimal
Set base value to 1 , i . e 2 ^ 0
Function to convert a decimal to equivalent binary representation
Stores the binary representation
Since ASCII value of '0' , '1' are 48 and 49
As the string is already reversed , no further reversal is required
Function to convert the reversed binary representation to equivalent integer
Stores reversed binary representation of given decimal
Stores equivalent decimal value of the binary representation
Return the resultant integer
Utility function to print the sorted array
Sort the array
Traverse the array
Print the array elements
Utility function to reverse the binary representations of all array elements and sort the modified array
Traverse the array
Passing array elements to reversedBinaryDecimal function
Pass the array to the sorted array
Driver Code
Function to check if sequence of removed middle elements from an array is sorted or not
Points toa the ends of the array
Iterate l + 1 < r
If the element at index L and R is greater than ( L + 1 ) - th and ( R - 1 ) - th elements
If true , then decrement R by 1 and increment L by 1
Otherwise , return false
If an increasing sequence is formed , then return true
Driver Code
Function to find the length of the longest subset satisfying given conditions
Sort the array in ascending order
Stores the starting index and maximum length of the required subset
Pointer to traverse the array
Iterate while i < n
Stores end point of current subset
Store the length of the current subset
Continue adding elements to the current subset till the condition satisfies
Increment length of the current subset
Increment the pointer j
If length of the current subset exceeds overall maximum length
Update maxlen
Update index
Increment j
Update i
Store the starting index of the required subset in i
Print the required subset
Print the array element
Decrement maxlen
Increment i
Driver Code
Given array
Store the size of the array
Python3 program for the above approach
Function to find the maximum number of intersecting line segments possible
Stores pairs of line segments { X [ i ] , Y [ i ] )
Push { X [ i ] , Y [ i ] } into p
Sort p in ascending order of points on X number line
Stores the points on Y number line in descending order
Insert the first Y pofrom p
Binary search to find the lower bound of p [ i ] [ 1 ]
If lower_bound doesn 't exist
Insert p [ i ] [ 1 ] into the set
Erase the next lower _bound from the set
Insert p [ i ] [ 1 ] into the set
Return the size of the set as the final result
Driver Code
Given Input
Function call to find the maximum number of intersecting line segments
Function to check if an array can be reduced to single element by removing maximum element among any chosen pairs
Sort the array in descending order
Traverse the array
If the absolute difference of 2 consecutive array elements is greater than K
If the array can be reduced to a single element
Driver Code
Function Call to check if an array can be reduced to a single element
Function to find lexicographically smallest possible by merging two sorted strings
Stores length of s1
Stores length of s2
Pointer to beginning of string1 i . e . , s1
Pointer to beginning of string2 i . e . , s2
Stores the final string
Traverse the strings
Append the smaller of the two current characters
Append the remaining characters of any of the two strings
Print the final string
Driver Code
Function Call
Function to sort the string leaving the vowels unchanged
Length of string S
Traverse the string S
Sort the string temp
Pointer to traverse the sorted string of consonants
Traverse the string S
Driver Code
Python3 program for the above approach
Function to count the number having quotient of division of larger element by the smaller element in the pair not exceeding K
Sort the array in ascending order
Store the required result
Traverse the array
Store the upper bound for the current array element
Update the number of pairs
Prthe result
Given array , arr [ ]
Store the size of the array
Function to find K - th maximum XOR of any diagonal in the matrix
Number or rows
Number of columns
Store XOR of diagonals
Traverse each diagonal
Starting column of diagonal
Count total elements in the diagonal
Store XOR of current diagonal
Push XOR of current diagonal
Sort XOR values of diagonals
Print the K - th Maximum XOR
Driver Code
Function to find the maximum sum of absolute differences between distinct pairs of triplet in array
Stores the maximum sum
Sort the array in ascending order
Sum of differences between pairs of the triplet
Print the sum
Driver Code
Python3 program for the above approach
c [ int , [ a , b ] ] Function to find the required sum
Keeps the track of the visited array elements
Stores the result
Keeps count of visited elements
Traverse the vector , V
If n elements are visited , break out of the loop
Store the pair ( i , j ) and their Bitwise XOR
If i and j both are unvisited
Add xorResult to res and mark i and j as visited
Increment count by 2
Return the result
Function to find the maximum and minimum possible sum of Bitwise XOR of all the pairs from the array
Stores the XOR of all pairs ( i , j )
Store the XOR of all pairs ( i , j )
Update Bitwise XOR
Sort the vector
Initialize variables to store maximum and minimum possible sums
Find the minimum sum possible
Reverse the vector , v
Find the maximum sum possible
Print the result
Driver Code
Function to find the lexicographically smallest permutation of an array such that the sum of the difference between adjacent elements is maximum
Stores the size of the array
Sort the given array in increasing order
Swap the first and last array elements
Print the required permutation
Driver Code
Python3 program to implement the above approach
Function to count the maximum number of array elements that can be reduced to 1 by repeatedly dividing array elements by 2
Sort the array in ascending order
Store the count of array elements
Traverse the array
Store the number of operations required to reduce arr [ i ] to 1
Decrement k by opr
If k becomes less than 0 , then break out of the loop
Increment cnt by 1
Prthe answer
Driver Code
Function to calculate the mean of a given array after removal of Kth percent of smallest and largest array elements
Sort the array
Find the K - th percent of the array size
Traverse the array
Skip the first K - th percent & last K - th percent array elements
Mean of the rest of elements
Print mean upto 5 decimal places
Driver Code
Function to calculate the minimum operations of given type required to make the array elements equal
Stores the total count of operations
Traverse the array
Update difference between pairs of adjacent elements
Store the maximum count of operations
Rest of the elements
Total Operation - Maximum Operation
Driver Code
Given array
Size of the array
Stores the sorted array elements
Function to count the number of swaps required to merge two sorted subarray in a sorted form
Stores the count of swaps
Function to count the total number of swaps required to sort the array
Stores the total count of swaps required
Find the middle index splitting the two halves
Count the number of swaps required to sort the left subarray
Count the number of swaps required to sort the right subarray
Count the number of swaps required to sort the two sorted subarrays
Driver Code
Function to maximize the count of elements required to be removed from arr [ ] such that the sum of arr [ ] is greater than or equal to sum of the array brr [ ]
Sort the array arr [ ]
Stores index of smallest element of arr [ ]
Stores sum of elements of the array arr [ ]
Traverse the array arr [ ]
Update sumArr
Stores sum of elements of the array brr [ ]
Traverse the array brr [ ]
Update sumArr
Stores count of removed elements
Repeatedly remove the smallest element of arr [ ]
Update sumArr
Remove the smallest element
If the sum of remaining elements in arr [ ] >= sum of brr [ ]
Update cntRemElem
Driver Code
Function to find two pairs ( a , b ) and ( c , d ) such that a < c and b > d
If no such pair is found
Driver Code
Function to find two pairs ( a , b ) and ( c , d ) such that a < c and b > d
Sort the array in increasing order of first element of pairs
Traverse the array
If no such pair found
Driver Code
Function to print the order of array elements generating non - decreasing quotient after division by X
Stores the quotient and the order
Traverse the array
Sort the vector
Print the order
Driver Code
Function to reverse the array from the position ' start ' to position 'end
Stores mid of start and end
Traverse the array in the range [ start , end ]
Stores arr [ start + i ]
Update arr [ start + i ]
Update arr [ end - i ]
Utility function to shuffle the given array in the of form { a1 , b1 , a2 , b2 , ... . an , bn }
Stores the length of the array
If length of the array is 2
Stores mid of the { start , end }
Divide array into two halves of even length
Update mid
Calculate the mid - points of both halves of the array
Reverse the subarray made from mid1 to mid2
Reverse the subarray made from mid1 to mid
Reverse the subarray made from mid to mid2
Recursively calls for both the halves of the array
Function to shuffle the given array in the form of { a1 , b1 , a2 , b2 , ... . an , bn }
Function Call
Print the modified array
Driver Code
Given array
Size of the array
Shuffles the given array to the required permutation
Function to check if elements of B can be rearranged such that A [ i ] + B [ i ] <= X
Checks the given condition
Sort A in ascending order
Sort B in descending order
Traverse the arrays A and B
If A [ i ] + B [ i ] exceeds X
Rearrangement not possible , set flag to false
If flag is true
Otherwise
Driver Code
Function Call
Function to find minimum count of operations required to make all array elements equal by incrementing or decrementing array elements by d
Sort the array
Traverse the array
If difference between two consecutive elements are not divisible by D
Store minimum count of operations required to make all array elements equal by incrementing or decrementing array elements by d
Stores middle element of the array
Traverse the array
Update count
Driver Code
Given N & D
Given array arr [ ]
Function Call
Function to find the maximum sum of second smallest of each partition of size K
Sort the array A in ascending order
Store the maximum sum of second smallest of each partition of size K
Select every ( K - 1 ) th element as second smallest element
Update sum
Print the maximum sum
Driver Code
Given size of partitions
Given array A
Size of the given array
Function Call
Function to find the smallest element left in the array by removing pairs and inserting their average
Stores array elements such that the largest element present at top of PQ
Traverse the array
Insert arr [ i ] into PQ
Iterate over elements of PQ while count of elements in PQ greater than 1
Stores largest element of PQ
Pop the largest element of PQ
Stores largest element of PQ
Pop the largest element of PQ
Insert the ceil value of average of top1 and top2
Driver Code
Python3 program to implement the above approach
Function to check if a number is a composite number or not
Corner cases
Check if number is divisible by 2 or 3
Check if number is a multiple of any other prime number
Function to calculate the product of digits of a number
Stores the product of digits
Extract digits of a number
Calculate product of digits
Function to check if the product of digits of a number is a composite number or not
Stores product of digits
If product of digits is equal to 1
If product of digits is not prime
Function to find the number with largest composite product of digits from the indices not divisible by k from the given array
Traverse the array
If index is divisible by k
Check if product of digits is a composite number or not
Sort the products
Driver Code
Function to find the minimum sum of 2 nd smallest elements of each subset
Sort the array
Stores minimum sum of second elements of each subset
Traverse first K 2 nd smallest elements
Update their sum
Prthe sum
Driver Code
Given Array
Given size of the array
Given subset lengths
Function to check if two non - intersecting subarrays with equal sum exists or not
Sort the given array
Traverse the array
Check for duplicate elements
If no duplicate element is present in the array
Driver code
Given array
Size of array
Function for bubble sort
Iterate from 1 to n - 1
Iterate from 0 to n - i - 1
Driver Code
Function to prall array elements whose frequency is greater than N / K
Sort the array , arr [ ]
Traverse the array
Stores frequency of arr [ i ]
Traverse array elements which is equal to arr [ i ]
Update cnt
Update i
If frequency of arr [ i ] is greater than ( N / K )
Driver Code
Function to print the circular array
Print the array
Function to sort m elements of diven circular array starting from index k
Traverse M elements
Iterate from index k to k + m - 1
Check if the next element in the circular array is less than the current element
Swap current element with the next element
Print the circular array
Driver Code
Function Call
Function to find minimum cost required to complete all the process
Sort the array on descending order of Y
Stores length of array
Stores minimum cost required to complete all the process
Stores minimum cost to initiate any process
Traverse the array
If minCostInit is less than the cost to initiate the process
Update minCost
Update minCostInit
Update minCostInit
Return minCost
Driver Code
Function Call
Function to find the maximum sum of Kth largest element of M equal length partition
Stores sum of K_th largest element of equal length partitions
If N is not divisible by M
Stores length of each partition
If K is greater than length of partition
Sort array in descending porder
Traverse the array
Update maxSum
Driver code
Function to minimize the difference of the maximum and minimum array elements by removing K elements
Base Condition
Sort the array
Initialize left and right pointers
Iterate for K times
Removing right element to reduce the difference
Removing the left element to reduce the difference
Print the minimum difference
Driver Code
Function Call
Function to split array into K subsets having maximum sum of their second maximum elements
Sort the array
Stores the maximum possible sum of second maximums
Add second maximum of current subset
Proceed to the second maximum of next subset
Print the maximum sum obtained
Driver Code
Given array arr [ ]
Size of array
Function Call
Function to merge the subarrays arr [ l . . m ] and arr [ m + 1 , . . r ] based on indices [ ]
If a [ indices [ l ] ] is less than a [ indices [ j ] ] , add indice [ l ] to temp
Else add indices [ j ]
Add remaining elements
Add remainging elements
Recursive function to divide the array into to parts
Recursive call for elements before mid
Recursive call for elements after mid
Merge the two sorted arrays
Function to find the number of subsequences for each element
Sorting the indices according to array arr [ ]
Array to store output numbers
Initialize subseq
B [ i ] is 2 ^ i
Doubling the subsequences
Print the final output , array B [ ]
Driver Code
Given array
Given length
Function call
Function to find the maximum cost to remove all array elements
Stores maximum cost to remove array elements
Sort array in ascending order
Traverse the array
Update maxCost
Driver Code
Function to convert a number to words
Stores the digits
Base cases
Stores strings of unit place
Stores strings for corner cases
Stores strings for ten 's place digits
Stores strings for powers of 10
If given number contains a single digit
Iterate over all the digits
Represent first 2 digits in words
Represent last 2 digits in words
Explicitly handle corner cases [ 10 , 19 ]
Explicitly handle corner case 20
For rest of the two digit numbers i . e . , 21 to 99
Function to print all the numbers up to n in lexicographical order
Convert all numbers in words
Sort all strings
Print answer
Driver Code
Python3 program for the above approach
Function to calculate the minimum cost of converting all array elements to 0 s
Stores subarrays of 0 s only
Traverse the array
If consecutive 0 s occur
Increment if needed
Push the current length of consecutive 0 s in a vector
Update lengths as 0
Sorting vector
Stores the number of subarrays consisting of 1 s
Traverse the array
If current element is 1
Otherwise
Increment count of consecutive ones
Stores the minimum cost
Traverse the array
First element
Traverse the subarray sizes
Update cost
Cost of performing X and Y operations
Find the minimum cost
Print the minimum cost
Driver Code
Function Call
Function to check if the subarray arr [ i . . j ] is a sorted subarray or not
Traverse all elements of the subarray arr [ i ... j ]
If the previous element of the subarray exceeds current element
Return 0
Return 1
Recursively partition the array into two equal halves
If atmost one element is left in the subarray arr [ i . . j ]
Checks if subarray arr [ i . . j ] is a sorted subarray or not
If the subarray arr [ i ... j ] is a sorted subarray
Stores middle element of the subarray arr [ i . . j ]
Recursively partition the current subarray arr [ i . . j ] into equal halves
Driver Code
Function to check if it is possible to merge the two given arrays with given conditions
Stores index of the array A [ ]
Stores index of the array B [ ]
Check if the previous element are from the array A [ ] or from the array B [ ]
Check if it is possible to merge the two given sorted arrays with given conditions
Traverse both the arrays
If A [ i ] is less than B [ j ] and previous element are not from A [ ]
Update prev
Update i
If B [ j ] is less than A [ i ] and previous element are not from B [ ]
Update prev
Update j
If A [ i ] equal to B [ j ]
If previous element are not from B [ ]
Update prev
Update j
If previous element is not from A [ ]
Update prev
Update i
If it is not possible to merge two sorted arrays with given conditions
Update flag
Driver Code
Function to find the minimum sum of array elements by given operations
Base case
Return 0
Base case
Perform K operations
Stores smallest element in the array
Stores index of the smallest array element
Stores largest element in the array
Stores index of the largest array element
Traverse the array elements
If current element exceeds largest_element
Update the largest element
Update index of the largest array element
If current element is smaller than smallest_element
Update the smallest element
Update index of the smallest array element
Stores the value of smallest element by given operations
Stores the value of largest element by given operations
If the value of a + b less than the sum of smallest and largest element of the array
Update smallest element of the array
Update largest element of the array
Stores sum of elements of the array by given operations
Traverse the array
Update ans
Driver Code
Function that finds the maximum sum all subarrays from the starting index after rearranging the array
Stores elements after rearranging
Keeps track of visited elements
Traverse the queries
Mark elements that are not allowed to rearranged
Stores the indices
Get indices and elements that are allowed to rearranged
Store the current index and element
Sort vector v in descending order
Insert elements in array
Stores the resultant sum
Stores the prefix sums
Traverse the given array
Return the maximum sum
Driver Code
Given array
Given size
Queries
Number of queries
Function Call
Python3 program for the above approach
Function to count pairs whose XOR is greater than the pair itself
Stores the count of pairs
Sort the array
Traverse the array
If current element is 0 , then ignore it
Traverse all the bits of element A [ i ]
If current bit is set then update the count
Update bits [ ] at the most significant bit of A [ i ]
Print the count
Driver Code
Function Call
Function to find the maximum occurred integer after completing all circular operations
Stores the highest visit count for any element
Stors the number of times an element is visited
Iterate over the array
Iterate over the range circularly form start to end
Count number of times an element is visited
Increment frequency of N
Update maxVisited
Increment frequency of start
Update maxVisited
Increment the start
Increment the count for the last visited element
Print most visited elements
Driver Code
Function Call
Function to return the area of the largest rectangle formed by lines parallel to X and Y axis from given set of points
Initialize two arrays
Store x and y coordinates
Sort arrays
Initialize max differences
Find max adjacent differences
Return answer
Driver Code
Given points
Total points
Function call
Function to check if there exists any arrangements of the arrays such that sum of element lie in the range [ K / 2 , K ]
Sort the array arr1 [ ] in increasing order
Sort the array arr2 [ ] in decreasing order
Traverse the array
If condition is not satisfied break the loop
Print the result
Driver Code
Function to find the maximum possible sum by rearranging the given array elements
Sort the array A [ ] in ascending order
Sort the array B [ ] in descending order
Stores maximum possible sum by rearranging array elements
Traverse both the arrays
Update maxSum
Driver Code
Function to find the maximum possible area of a rectangle
Initialize variables
Sort array arr1 [ ]
Sort array arr2 [ ]
Traverse arr1 [ ] and arr2 [ ]
If arr1 [ i ] is same as arr2 [ j ]
If no starting point is found yet
Update maximum end
If arr [ i ] > arr2 [ j ]
If no rectangle is found
Return the area
Driver Code
Given point
Given length
Given points
Given length
Function Call
Function to count pairs that satisfy the given conditions
Stores index of the left pointer .
Stores index of the right pointer
Stores count of total pairs that satisfy the conditions
Sort arr [ ] array
Sort brr [ ] array
Traverse both the array and count then pairs
If the value of ( brr [ j ] - arr [ i ] ) exceeds K
Update cntPairs
Update
Update j
Driver Code
Function to perform min heapify on array brr [ ]
Stores index of left child of i .
Stores index of right child of i .
Stores index of the smallest element in ( arr [ i ] , arr [ left ] , arr [ right ] )
Check if arr [ left ] less than arr [ smallest ]
Update smallest
Check if arr [ right ] less than arr [ smallest ]
Update smallest
If i is not the index of smallest element
Swap arr [ i ] and arr [ smallest ]
Perform heapify on smallest
Function to merge two sorted arrays
Traverse the array arr [ ]
Check if current element is less than brr [ 0 ]
Swap arr [ i ] and brr [ 0 ]
Perform heapify on brr [ ]
Sort array brr [ ]
Function to print array elements
Traverse array arr [ ]
Driver code
Function call to merge two array
Print first array
Print Second array .
Function to perform the partition around the pivot element
Stores index of each element of the array , arr [ ]
Stores index of each element of the array , brr [ ]
Traverse both the array
If pivot is smaller than arr [ l ]
If Pivot is greater than brr [ r ]
If either arr [ l ] > Pivot or brr [ r ] < Pivot
Function to merge the two sorted array
Stores index of each element of the array arr [ ]
Stores index of each element of the array brr [ ]
Stores index of each element the final sorted array
Stores the pivot element
Traverse both the array
If pivot element is not found or index < N
If pivot element is not found or index < N
Place the first N elements of the sorted array into arr [ ] and the last M elements of the sorted array into brr [ ]
Sort both the arrays
Print the first N elements in sorted order
Print the last M elements in sorted order
Driver Code
Function to find count of array elements with rank less than or equal to k
Initialize rank and position
Sort the given array
Traverse array from right to left
Update rank with position , if adjacent elements are unequal
Return position - 1 , if rank greater than k
Increase position
Driver Code
Given array
Given K
Function Call
Function to remove sub - directories from the given lists dir
Store final result
Sort the given directories
Insert 1 st directory
Iterating in directory
Current directory
Our previous valid directory
Find length of previous directory
If subdirectory is found
Else store it in result valid directory
Driver Code
Given lists of directories dir [ ]
Function Call
Function to return the maximum number of required pairs
Max Heap to add values of arr2 [ ]
Sort the array arr1 [ ]
Push all arr2 [ ] into Max Heap
Initialize the ans
Traverse the arr1 [ ] in decreasing order
Remove element until a required pair is found
Return maximum number of pairs
Driver Code
Given arrays
Function Call
Python3 program for above approach
Function to find minimum cost
Sort the array
Maximum possible common ratios
Iterate over all possible common ratios
Calculate operations required for the current common ratio
Calculate minimum cost
Driver Code
Given N
Given arr [ ]
Function calling
Python3 program for above approach
Function to calculate N Fibonacci numbers
Function to find the mth bit in the string Sn
Base case
Length of left half
Length of the right half
Recursive check in the left half
Recursive check in the right half
Driver Code
Function to count the minimum number of adjacent swaps
Stores the size of the given matrix
Stores the count of zero at the end of each row
Traverse the given matrix
Count of 0 s at the end of the ith row
Stores the count of swaps
Traverse the cntZero array
If count of zero in the i - th row < ( N - i - 1 )
Stores the index of the row where count of zero > ( N - i - 1 )
If no row found that satisfy the condition
Swap the adjacent row
Driver Code
Function to calculate the largest area unguarded by towers
Sort the x - coordinates of the list
Sort the y - coordinates of the list
dx -- > maximum uncovered tiles in x coordinates
dy -- > maximum uncovered tiles in y coordinates
Calculate the maximum uncovered distances for both x and y coordinates
Largest unguarded area is max ( dx ) - 1 * max ( dy ) - 1
Driver Code
Length and width of the grid
No of guard towers
Array to store the x and y coordinates
Function call
Function to find the cost of splitting the arrays into subarray with cost less than K
Store the possible splits
Stores the cost of each split
Stores the count of even numbers
Stores the count of odd numbers
Count of odd & even elements
Check the required conditions for a valid split
Sort the cost of splits
Find the minimum split costs adding up to sum less than K
Given array and K
Function call
Function to check if given elements can be arranged such that sum of its neighbours is strictly greater
Initialize the total cost
Storing the original index of elements in a hashmap
Sort the given array
Check if a given condition is satisfies or not
First number
Add the cost to overall cost
Last number
Add the cost to overall cost
Add the cost to overall cost
Printing the cost
Given array
Function call
Function to calculate the sum of XOR of the sum of every pair
Stores the XOR of sums of every pair
Iterate to generate all possible pairs
Update XOR
Return the answer
Driver Code
Python3 program for the above approach
Function to find maximum distinct character after removing K character
Freq implemented as hash table to store frequency of each character
Store frequency of each character
Insert each frequency in v
Sort the freq of character in non - decreasing order
Traverse the vector
Update v [ i ] and k
If K is still not 0
Store the final answer
Count this character if freq 1
Return count of distinct characters
Driver Code
Given string
Given k
Function Call
list to store prime numbers
Function to generate prime numbers using SieveOfEratosthenes
Boolean array to store primes
If p is a prime
Mark all its multiples as non - prime
Print all prime numbers
Function to generate n as the sum of k numbers where atleast K - 1 are distinct and are product of 2 primes
Stores the product of every pair of prime number
Sort the products
If sum exceeds n
Otherwise , print the k required numbers
Driver Code
Function that finds the maximum sum of the array elements according to the given condition
Sort the array
Take the max value from the array
Iterate from the end of the array
Check for the number had come before or not
Take the value which is not occured already
Change max to new value
Return the maximum sum
Driver code
Given array arr [ ]
Function call
Function returns the minimum cost to sort the given array
Create array of pairs in which 1 st element is the array element and 2 nd element is index of first
Initialize the total cost
Sort the array with respect to array value
Initialize the overall minimum which is the 1 st element
To keep track of visited elements create a visited array & initialize all elements as not visited
Iterate over every element of the array
If the element is visited or in the sorted position , and check for next element
Create a vector which stores all elements of a cycle
It covers all the elements of a cycle
If cycle is found then the swapping is required
Initialize local minimum with 1 st element of the vector as it contains the smallest element in the beginning
Stores the cost with using only local minimum value .
Stores the cost of using both local minimum and overall minimum
Update the result2
Store the minimum of the two result to total cost
Return the minimum cost
Given array arr [ ]
Function call
Function to find the maximum possible value that can be placed at the last index
Sort the array elements in ascending order
If the first element is is not equal to 1
Traverse the array to make difference between adjacent elements <= 1
Driver Code
Function to find median of the array
Sort the given array
If number of elements are even
Return the first median
Otherwise
Driver Code
Function that finds the maximum Sub - Matrix Sum
Number of rows in the matrix
Number of columns in the matrix
dp [ ] [ ] matrix to store the results of each iteration
Base Case - The largest element in the matrix
To stores the final result
Find the max sub matrix sum for the last row
Check whether the current sub - array yields maximum sum
Calculate the max sub matrix sum for the last column
Check whether the current sub - array yields maximum sum
Build the dp [ ] [ ] matrix from bottom to the top row
Update sum at each cell in dp [ ] [ ]
Update the maximum sum
Return the maximum sum
Driver Code
Given matrix mat [ ] [ ]
Function call
Function to place the integers in between the inequality signs
Sort the integers array and set the index of smallest and largest element
Iterate over the inequalities
Append the necessary integers per symbol
Add the final integer
Return the answer
Driver Code
Given List of Integers
Given list of inequalities
Function Call
Print the output
Function to check if array B can be made equal to array A
Sort both the arrays
Check if both the arrays are equal or not
Driver Code
Function to find minimum difference between the maximum and the minimum elements arr [ ] by at most K replacements
Check if turns are more than or equal to n - 1 then simply return zero
Sort the array
Set difference as the maximum possible difference
Iterate over the array to track the minimum difference in k turns
Return the answer
Driver code
Given array arr [ ]
Given K replacements
Function Call
Python3 program for the above approach
if array is 3 2 1 can ' t ▁ ▁ be ▁ sorted ▁ because ▁ 2 ▁ is ▁ in ▁ ▁ its ▁ correct ▁ position , ▁ 1 ▁ ▁ and ▁ 3 ▁ can ' t shift right because cyclic right shift takes place between 3 elements
check if its possible to sort
Number of swap is N / 2 always for this approach
printing index of the cyclic right shift
Driver code
Python3 program to find the least non - overlapping number from a given set intervals
Function to find the smallest non - overlapping number
Create a visited array
Find the first missing value
Driver code
function to find the smallest non - overlapping number
Sort the intervals based on their starting value
Check if any missing value exist
Finally print the missing value
Driver code
Function to convert bit array to decimal number
Return the final result
Function to find the maximum Bitwise OR value of subsequence of length K
Initialize bit array of size 32 with all value as 0
Iterate for each index of bit [ ] array from 31 to 0 , and check if the ith value of bit array is 0
Check for maximum contributing element
Update the bit array if max_contributing element is found
Decrement the value of K
Return the result
Given array arr [ ]
Length of subsequence
Function call
Function to find the lexicographical smallest string after performing M operations
Size of the given string
Declare an array a
For each i , a [ i ] contain number of operations to update s [ i ] to 'a
Check if m >= ar [ i ] , then update s [ i ] to ' a ' decrement k by a [ i ]
Form a cycle of 26
Return the answer
Driver code
Function to find maxiumum number of jobs
Min Heap
Sort ranges by start day
Stores the minimum and maximum day in the ranges
Iterating from min_day to max_day
Insert the end day of the jobs which can be completed on i - th day in a priority queue
Pop all jobs whose end day is less than current day
If queue is empty , no job can be completed on the i - th day
Increment the count of jobs completed
Pop the job with least end day
Return the jobs on the last day
Driver code
Function to minimize the count
Initial number of box
Sort array of box size in increasing order
Check is current box size is smaller than next box size
Decrement box count Increment current box count Increment next box count
Check if both box have same size
Print the result
Driver code
Python3 program for sorting a string using cyclic shift of three indices
Store the indices which haven 't attained  its correct position
Store the indices undergoing cyclic shifts
If the element is not at it 's correct position
Check if all 3 indices can be placed to respective correct indices in a single move
If the i - th index is still not present in its correct position , store the index
To check if swapping two indices places them in their correct position
for i in range len ( indices ) : print ( indices [ i ] [ 0 ] , indices [ i ] [ 1 ] , indices [ i ] [ 2 ] )
Driver code
Python3 program to find the count of minimum reductions required to get the required sum K
Function to return the count of minimum reductions
If the sum is already less than K
Sort in non - increasing order of difference
Driver Code
Function Call
Create structure for a node
Function to print the linked list
Store the head of the linked list into a temporary node * and iterate
Function takes the head of the LinkedList and the data as argument and if no LinkedList exists , it creates one with the head pointing to first node . If it exists already , it appends given node at end of the last node
Create a new node
Insert data into the temporary node and point it 's next to NULL
Check if head is null , create a linked list with temp as head and tail of the list
Else insert the temporary node after the tail of the existing node and make the temporary node as the tail of the linked list
Return the list
Function to concatenate the two lists
Iterate through the head1 to find the last node join the next of last node of head1 to the 1 st node of head2
return the concatenated lists as a single list - head1
Sort the linked list using bubble sort
Compares two adjacent elements and swaps if the first element is greater than the other one .
Driver Code
Given Linked List 1
Given Linked List 2
Merge the two lists in a single list
Sort the unsorted merged list
Print the final sorted merged list
Function for calculating median
Check for even case
Function to find the K maximum absolute difference with the median of the array
Sort the array
Store median
Find and store difference
If diff [ i ] is greater print it . Else print diff [ j ]
Driver code
Function to check if it is possible to sort the array in non - decreasing order by swapping elements of different types
Consider the array to be already sorted
Checking if array is already sorted
Check for a pair which is in decreasing order
Count the frequency of each type of element
type0 stores count of elements of type 0
type1 stores count of elements of type 1
Return true if array is already sorted
Return false if all elements are of same type and array is unsorted
Possible for all other cases
Driver code
Python3 implementation to find the shortest path in a directed graph from source vertex to the destination vertex
Class of the node
Adjacency list that shows the vertexNumber of child vertex and the weight of the edge
Function to add the child for the given node
Function to find the distance of the node from the given source vertex to the destination vertex
Stores distance of each vertex from source vertex
bool array that shows whether the vertex ' i ' is visited or not
Set of vertices that has a parent ( one or more ) marked as visited
Mark current as visited
Inserting into the visited vertex
Condition to check the distance is correct and update it if it is minimum from the previous computed distance
The new current
Loop to update the distance of the vertices of the graph
Function to print the path from the source vertex to the destination vertex
Condition to check if there is no path between the vertices
Driver Code
Loop to create the nodes
Creating directed weighted edges
Loop to print the distance of every node from source vertex
Function to sort the permutation with the given operations
Visited array to check the array element is at correct position or not
Loop to iterate over the elements of the given array
Condition to check if the elements is at its correct position
Condition to check if the element is included in any previous cyclic rotations
Loop to find the cyclic rotations in required
Condition to check if the cyclic rotation is a valid rotation
Loop to find the index of the cyclic rotation for the current index
Condition to if the cyclic rotation is a valid rotation
Loop to find athe valid operations required to sort the permutation
Total operation required
Driver Code
Function Call
Python3 program for the above problem
Initialize variables
Add the current contribution of the element to the answer
If the value is already maximum then we can 't  change it
Moves required to move to the next multiple of 10
No of times we can add 10 to this value so that its value does not exceed 1000.
Sort the array
Adding the values to increase the numbers to the next multiple of 10
If the total moves are less than X then increase the answer
If the moves exceed X then we cannot increase numbers
If there still remain some moves
Remaining moves
Add minimim of increments and remaining / 10 to the answer
Output the final answer
Driver Code
Python3 Program to split a given array such that the difference between their maximums is minimized .
Sort the array
Return the difference between two highest elements
Driver Program
Function to find the pivot index
Function to implement Quick Sort
Pivot is pointing to pivot index before which every element is smaller and after pivot , every element is greater
Sort the array before pivot element
Sort the array after pivot element
Function to count the available intervals from the given range of numbers
If range starts after 0 then an interval is available from 0 to start [ 0 ]
When a new interval starts
Since index variable i is being incremented , the current active interval will also get incremented
When the current interval ends
Since index variable j is being decremented , the currect active interval will also get decremented
When start and end both are same there is no change in currActive
If the end of interval is before the range so interval is available at the end
Driver code
Sort the start array
Sort the end array
Calling the function
Function to find the maximum number of items that can be bought from the given cost array
Sort the given array
Variables to store the prefix sum , answer and the counter variables
Initializing the first element of the prefix array
If we can buy at least one item
Iterating through the first K items and finding the prefix sum
Check the number of items that can be bought
Finding the prefix sum for the remaining elements
Check the number of iteams that can be bought
Driver code
Function to find the maximum possible sum for the given conditions
Sorting the array
Variable to store the answer
Iterating through the array
If the value is greater than 0
If the value becomes 0 then break the loop because all the weights after this index will be 0
print profit
Driver code
Function to check if the array can be sorted only if the elements on the given positions can be swapped
Creating an array for marking the positions
Iterating through the array and mark the positions
Iterating through the given array
If pos [ i ] is 1 , then incrementing till 1 is continuously present in pos
Sorting the required segment
Checking if the vector is sorted or not
Print yes if it is sorted
Driver code
Python3 program to sort an array of strings based on the given order
For storing priority of each character
Custom comparator function for sort
Loop through the minimum size between two words
Check if the characters at position i are different , then the word containing lower valued character is smaller
When loop breaks without returning , it means the prefix of both words were same till the execution of the loop . Now , the word with the smaller size will occur before in sorted order
Function to print the new sorted array of strings
Mapping each character to its occurrence position
Sorting with custom sort function
Printing the sorted order of words
Driver code
Function to sort the elements of the array by difference
Sorting the array
Array to store the elements of the array
Iterating over the length of the array to include each middle element of array
Appending the middle element of the array
Driver Code
Function that find the minimum cost of selecting array element
Sorting the given array in increasing order
To store the prefix sum of arr [ ]
Update the pref [ ] to find the cost selecting array element by selecting at most M element
Print the pref [ ] for the result
Driver Code
Variable to store the word form of units digit and up to twenty
Variable to store the word form of tens digit
Function to convert a two digit number to the word by using the above defined arrays
If n is more than 19 , divide it
If n is non - zero
Function to print a given number in words
Stores the word representation of the given number n
Handles digits at ten millions and hundred millions places
Handles digits at hundred thousands and one millions places
Handles digits at thousands and tens thousands places
Handles digit at hundreds places
Call the above function to convert the number into words
Function to sort the array according to the albhabetical order
Vector to store the number in words with respective elements
Inserting number in words with respective elements in vector pair
Sort the vector , this will sort the pair according to the alphabetical order .
Print the sorted vector content
Driver code
Python3 program to find the Maximum Possible Rating of a Coding Contest
Function to sort all problems descending to upvotes
Function to return maximum rating
Declaring vector of pairs
Each pair represents a problem with its points and upvotes
Step ( 1 ) - Sort problems by their upvotes value in decreasing order
Declaring min_heap or priority queue to track of the problem with minimum points .
Step ( 2 ) - Loop for i = 0 to K - 1 and do accordingly
Step ( 3 ) - Loop for i = K to N - 1 and do accordingly
Driver code
Function to find the sum of unique elements after Q Query
Updating the array after processing each query
Making it to 0 - indexing
Iterating over the array to get the final array
Variable to store the sum
Hash to maintain perviously occured elements
Loop to find the maximum sum
Driver code
Function to find the k - th pair
Sorting the array
Iterating through the array
Finding the number of same elements
Checking if N * T is less than the remaining K . If it is , then arr [ i ] is the first element in the required pair
Printing the K - th pair
Driver code
Function to find the minimum operations to convert given string to another with equal frequencies of characters
Frequency of characters
Loop to find the Frequency of each character
Sort in decreasing order based on frequency
Maximum possible answer
Loop to find the minimum operations required such that frequency of every character is equal
Driver Code
Function for finding if it possible to obtain sorted array or not
Iterate over all elements until K
Store elements as multiples of K
Sort the elements
Put elements in their required position
Check if the array becomes sorted or not
Driver code
Function that arrange the array such that all absolute difference between adjacent element are sorted
To store the resultant array
Sorting the given array in ascending order
Variable to represent left and right ends of the given array
Traversing the answer array in reverse order and arrange the array elements from arr [ ] in reverse order
Inserting elements in zig - zag manner
Displaying the resultant array
Driver Code
Function Call
Function to find minimum number of steps to convert a given sequence into a permutation
Sort the given array
To store the required minimum number of operations
Find the operations on each step
Return the answer
Driver code
Function call
Python3 program of the above approach
Dp array to memoized the value recursive call
Function to find the minimum increment or decrement needed to make the array sorted
If only one element is present , then arr [ ] is sorted
If dp [ N ] [ maxE ] is precalculated , then return the result
Iterate from minE to maxE which placed at previous index
Update the answer according to recurrence relation
Memoized the value for dp [ N ] [ maxE ]
Return the final result
Driver Code
Find the minimum and maximum element from the arr [ ]
Function Call
Function to sort the major diagonal of the matrix
Loop to find the ith minimum element from the major diagonal
Loop to find the minimum element from the unsorted matrix
Swap to put the minimum element at the beginning of the major diagonal of matrix
Loop to print the matrix
Driven Code
Sort the major Diagonal
Function to calculate minimum cost for making permutation of size N
sorting the array in ascending order
To store the required answer
Traverse the whole array
Return the required answer
Driver code
Function call
Function to find the maximum path sum from top to bottom row
Create an auxiliary array of next row with the element and it 's position
Sort the auxiliary array
Find maximum from row above to be added to the current element
Find the maximum element from the next row that can be added to current row element
Find the maximum sum
Driver Code
Function to find maximum path
Function to find the digit - sum of a number
Loop to iterate the number digit - wise to find digit - sum
variable to store last digit
Function to find the count of number
Vector to store the Sum of Digits
Sum of digits for each element in vector
Sorting the digitSum vector
Removing the duplicate elements
Count variable to store the Count
Finding the Count of Numbers
Driver Code
Function Call
Function to find the minimum product
Sort the array using STL sort ( ) function
Initialise product to 1
Find product of sum of all pairs
Return the product
Driver code
Function call to find product
Sort by minimum starting point
If the current starting point is less than the previous interval 's ending  point (ie. there is an overlap)
Increase rem
Remove the interval with the higher ending point
Driver Code
Returns true if arr [ 0. . n - 1 ] can form AP
Base Case
Sort array
After sorting , difference between consecutive elements must be same .
Traverse the given array and check if the difference between ith element and ( i - 1 ) th element is same or not
Returns true if arr [ 0. . n - 1 ] can form GP
Base Case
Sort array
After sorting , common ratio between consecutive elements must be same .
Traverse the given array and check if the common ratio between ith element and ( i - 1 ) th element is same or not
Returns true if arr [ 0. . n - 1 ] can form HP
Base Case
Find reciprocal of arr [ ]
After finding reciprocal , check if the reciprocal is in A . P . To check for A . P .
Driver Code
Function to check AP
Function to check GP
Function to check HP
Function to return the reverse of n
Function to sort the array according to the reverse of elements
Vector to store the reverse with respective elements
Inserting reverse with elements in the vector pair
Sort the vector , this will sort the pair according to the reverse of elements
Print the sorted vector content
Driver code
Returns number of pairs in arr [ 0. . n - 1 ] with positive sum
Sort the array in increasing order
Intialise result
Intialise first and second pointer
Till the pointers doesn 't converge   traverse array to   count the pairs 
If sum of arr [ i ] && arr [ j ] > 0 , then the count of pairs with positive sum is the difference between the two pointers
Increase the count
Driver 's Code 
Function call to count the pairs with positive sum
Function to sort the matrix
Number of elements in matrix
Loop to sort the matrix using Bubble Sort
Condition to check if the Adjacent elements
Swap if previous value is greater
Loop to print the matrix
Driver Code
Function call to sort
Function call to print matrix
Function to find minimise the median between partition array
Sort the given array arr [ ]
Return the difference of two middle element of the arr [ ]
Driver Code
Size of arr [ ]
Function that returns the minimum the absolute difference between median of partition array
Function that prmaximum overlap among ranges
variable to store the maximum count
storing the x and y coordinates in data vector
pushing the x coordinate
pushing the y coordinate
sorting of ranges
Traverse the data vector to count number of overlaps
if x occur it means a new range is added so we increase count
if y occur it means a range is ended so we decrease count
updating the value of ans after every traversal
printing the maximum value
Driver code
Function that returns true if a , b and c can be made equal with the given operations
Sort the three numbers
Find the sum of difference of the 3 rd and 2 nd element and the 3 rd and 1 st element
Subtract the difference from k
Check the required condition
Driver code
Function to organize the given numbers to form a valid sequence .
Sorting the array
Two pointer technique to organize the numbers
Driver code
Function to find the correct order and then return the distance between the two persons
Make pair of both height & infront and insert to vector
Sort the vector in ascending order
Find the correct place for every person
Insert into position vector according to infront value
Driver code
function to find minimum sum
variable to store final answer and initialising it with the values when 0 elements is removed from the left and K from the right .
loop to simulate removal of elements
removing i elements from the left and and K - i elements from the right and updating the answer correspondingly
returning final answer
Driver code
input values
calling the required function ;
Function to return the minimum number of elements to be removed from the ends of the array to make it sorted
To store the final answer
Two pointer loop
While the array is increasing increment j
Updating the ans
Updating the left pointer
Returning the final answer
Driver code
Returns number of subsequences of maximum length k and contains no repeated element
Sort the array a [ ]
Store the frequencies of all the distinct element in the vector arr
count is the the number of such subsequences
Create a 2 - d array dp [ n + 1 ] [ m + 1 ] to store the intermediate result
Initialize the first row to 1
Update the dp [ ] [ ] array based on the recurrence relation
Return the number of subsequences
Driver code
Function to return the count of unvisited indices starting from the index 0
Largest index that cannot be visited
Push the index to the queue
To store the required count
Current index that cannot be visited
Increment the count for the current index
( curr - m ) and ( curr - n ) are also unreachable if they are valid indices
Return the required count
Driver code
Function to return the string formed by the odd indexed characters of s
Function to return the string formed by the even indexed characters of s
Function that returns true if s1 can be made equal to s2 with the given operation
Get the string formed by the even indexed characters of s1
Get the string formed by the even indexed characters of s2
Get the string formed by the odd indexed characters of s1
Get the string formed by the odd indexed characters of s2
Sorting all the lists
If the strings can be made equal
Driver code
Function to sort the stack using another stack based on the values of elements modulo k
Pop out the first element
While temporary stack is not empty
The top of the stack modulo k is greater than ( temp & k ) or if they are equal then compare the values
Pop from temporary stack and push it to the input stack
Push temp in temporary of stack
Push all the elements in the original stack to get the ascending order
Print the sorted elements
Driver code
Function to return the length of the largest subsequence with non - negative sum
To store the current sum
Sort the input array in non - increasing order
Traverse through the array
Add the current element to the sum
Condition when c_sum falls below zero
Complete array has a non - negative sum
Driver code
Python3 implementation of the approach
Function that returns true if the required line exists
To handle negative values from x [ ]
Update arr [ ] such that arr [ i ] contains the sum of all v [ j ] such that x [ j ] = i for all valid values of j
Update arr [ i ] such that arr [ i ] contains the sum of the subarray arr [ 0. . . i ] from the original array
If all the points add to 0 then the line can be drawn anywhere
If the line is drawn touching the leftmost possible points
If the line is drawn just before the current point
If the line is drawn touching the current point
If the line is drawn just after the current point
If the line is drawn touching the rightmost possible points
Driver code
Function to return the maximum required sum of the pairs
Sort the array
To store the sum
Start making pairs of every two consecutive elements as n is even
Minimum element of the current pair
Return the maximum possible sum
Driver code
Utility function to prthe contents of an array
Function to sort the array elements based on their modulo with K
Create K empty vectors
Update the vectors such that v [ i ] will contain all the elements that give remainder as i when divided by k
Sorting all the vectors separately
Replacing the elements in arr [ ] with the required modulo sorted elements
Add all the elements of the current vector to the array
Print the sorted array
Driver code
Custom sort function to sort the given string in the order which maximises the final score
To store the count of occurrences of ' a ' and ' b ' in s1
Count the number of occurrences of ' a ' and ' b ' in s1
To store the count of occurrences of ' a ' and ' b ' in s2
Count the number of occurrences of ' a ' and ' b ' in s2
Since the number of subsequences ' ab ' is more when s1 is placed before s2 we return 1 so that s1 occurs before s2 in the combined string
Function that return the concatenated string as S [ 0 ] + S [ 1 ] + ... + S [ N - 1 ]
To store the concatenated string
Concatenate every string in the order of appearance
Return the concatenated string
Function to return the maximum required score
Sort the strings in the order which maximizes the score that we can get
Get the concatenated string combined string
Calculate the score of the combined string i . e . the count of occurrences of " ab " as subsequences
Number of ' a ' has increased by one
Driver code
Function to return the minimum number of increment operations required to make any k elements of the array equal
Sort the array in increasing order
Calculate the number of operations needed to make 1 st k elements equal to the kth element i . e . the 1 st window
Answer will be the minimum of all possible k sized windows
Find the operations needed to make k elements equal to ith element
Slide the window to the right and subtract increments spent on leftmost element of the previous window
Add increments needed to make the 1 st k - 1 elements of this window equal to the kth element of the current window
Driver code
Used for index in heap
Predefining the heap array
Defining formation of the heap
Iterative heapiFy
Just swapping if the element is smaller than already stored element
Swapping the current index with its child
Moving upward in the heap
Defining heap sort
Taking output of the minimum element
Set first element as a last one
Decrement of the size of the string
Initializing the left and right index
Process of heap sort If root element is minimum than its both of the child then break
Otherwise checking that the child which one is smaller , swap them with parent element
Swapping
Changing the left index and right index
Utility function
To heapiFy
Calling heap sort function
Driver Code
Function to return the kth element in the modified array
First odd number
Insert the odd number
Next odd number
First even number
Insert the even number
Next even number
Return the kth element
Driver code
Utility function to print the contents of an array
Function to update the array
Initialize the pointers
While there are elements to swap
Update the pointers
Print the updated array
Driver code
Python3 implementation of the approach
To store the factorials
Function to update fact [ ] array such that fact [ i ] = i !
0 ! = 1
i ! = i * ( i - 1 ) !
Function to return the count of possible permutations
To store the result
Sort the array
Initial size of the block
Increase the size of block
Update the result for the previous block
Reset the size to 1
Update the result for the last block
Driver code
Pre - calculating factorials
Function to return the smallest element greater than x which is not present in a [ ]
Sort the array
Continue until low is less than or equals to high
Find mid
If element at mid is less than or equals to searching element
If mid is equals to searching element
Increment searching element
Make high as N - 1
Make low as mid + 1
Make high as mid - 1
Return the next greater element
Driver code
Python 3 implementation of the approach
Function to find the maximum and the minimum elements from the array after performing the given operation k times
To store the current sequence of elements
To store the next sequence of elements after xoring with current elements
Store the frequency of elements of arr [ ] in arr1 [ ]
Storing all precomputed XOR values so that we don 't have to do it  again and again as XOR is a costly operation
Perform the operations k times
The value of count decide on how many elements we have to apply XOR operation
If current element is present in the array to be modified
Suppose i = m and arr1 [ i ] = num , it means ' m ' appears ' num ' times If the count is even we have to perform XOR operation on alternate ' m ' starting from the 0 th index because count is even and we have to perform XOR operations starting with initial ' m ' Hence there will be ceil ( num / 2 ) operations on ' m ' that will change ' m ' to xor_val [ m ] i . e . m ^ x
Decrease the frequency of ' m ' from arr1 [ ]
Increase the frequency of ' m ^ x ' in arr2 [ ]
If the count is odd we have to perform XOR operation on alternate ' m ' starting from the 1 st index because count is odd and we have to leave the 0 th ' m ' Hence there will be ( num / 2 ) XOR operations on ' m ' that will change ' m ' to xor_val [ m ] i . e . m ^ x
Updating the count by frequency of the current elements as we have processed that many elements
Updating arr1 [ ] which will now store the next sequence of elements At this time , arr1 [ ] stores the remaining ' m ' on which XOR was not performed and arr2 [ ] stores the frequency of ' m ^ x ' i . e . those ' m ' on which operation was performed Updating arr1 [ ] with frequency of remaining ' m ' & frequency of ' m ^ x ' from arr2 [ ] With help of arr2 [ ] , we prevent sorting of the array again and again
Resetting arr2 [ ] for next iteration
Finding the maximum and the minimum element from the modified array after the operations
Printing the max and the min element
Driver code
Function to print the arrangement that satisifes the given condition
Sort the array initially
Array that stores the arrangement
Once the array is sorted Re - fill the array again in the mentioned way in the approach
Iterate in the array and check if the arrangement made satisfies the given condition or not
For the first element the adjacents will be a [ 1 ] and a [ n - 1 ]
For the last element the adjacents will be a [ 0 ] and a [ n - 2 ]
If we reach this position then the arrangement is possible
Driver code
Function that returns the sub - array
Data - structure to store all the sub - arrays of size K
Iterate to find all the sub - arrays
Store the sub - array elements in the array
Push the vector in the container
Sort the vector of elements
The last sub - array in the sorted order will be the answer
Driver code
Get the sub - array
Python implementation of the approach
Function to return the maximum required value
maxratio will store the maximum value to weight ratio we can have for any item and maxindex will store the index of that element
Find the maximum ratio
The item with the maximum value to weight ratio will be put into the knapsack repeatedly until full
Driver code
Function to sort the array such that negative values do not get affected
Store all non - negative values
Sort non - negative values
If current element is non - negative then update it such that all the non - negative values are sorted
Print the sorted array
Driver code
Python3 implementation of the approach
Function to return the sum of a triplet which is closest to x
Sort the array
To store the closest sum
Fix the smallest number among the three integers
Two pointers initially pointing at the last and the element next to the fixed element
While there could be more pairs to check
Calculate the sum of the current triplet
If the sum is more closer than the current closest sum
If sum is greater then x then decrement the second pointer to get a smaller sum
Else increment the first pointer to get a larger sum
Return the closest sum found
Driver code
Node of the binary tree
A utility function to print Inorder traversal of a Binary Tree
The function to print data of two BSTs in sorted order
Base cases
If the first tree is exhausted simply print the inorder traversal of the second tree
If second tree is exhausted simply print the inoreder traversal of the first tree
A temporary pointer currently pointing to root of first tree
previous pointer to store the parent of temporary pointer
Traverse through the first tree until you reach the leftmost element , which is the first element of the tree in the inorder traversal . This is the least element of the tree
Another temporary pointer currently pointing to root of second tree
Previous pointer to store the parent of second temporary pointer
Traverse through the second tree until you reach the leftmost element , which is the first element of the tree in inorder traversal . This is the least element of the tree .
Compare the least current least elements of both the tree
If first tree 's element is  smaller print it
If the node has no parent , that means this node is the root
Simply make the right child of the root as new root
If node has a parent
As this node is the leftmost node , it is certain that it will not have a let child so we simply assign this node ' s ▁ right ▁ pointer , ▁ which ▁ can ▁ be ▁ ▁ either ▁ null ▁ or ▁ not , ▁ to ▁ its ▁ parent ' s left pointer . This statement is just doing the task of deleting the node
recursively call the merge function with updated tree
If the node has no parent , that means this node is the root
Simply make the right child of root as new root
If node has a parent
Recursively call the merge function with updated tree
Driver Code
Print sorted nodes of both trees
Function to print an array according to the order defined by another array
Declaring map and iterator
Store the frequency of each number of a1 [ ] int the map
Traverse through a2 [ ]
Check whether number is present in map or not
Print that number that many times of its frequency
Print those numbers that are not present in a2 [ ]
Driver code
Function to check whether both the array can be sorted in ( strictly increasing ) ascending order
Traverse through the array and find out the min and max variable at each position make one array of min variables and another of maximum variable
Maximum and minimum variable
Assign min value to B [ i ] and max value to A [ i ]
Now check whether the array is sorted or not
Driver code
Function to find the largest possible k - multiple set
Sort the given array
To store k - multiple set
Traverse through the whole array
Check if x / k is already present or not
Print the k - multiple set
Driver code
Function call
Return the maximum water that can be stored
To store the maximum water so far
Both the pointers are pointing at the first and the last buildings respectively
While the water can be stored between the currently chosen buildings
Update maximum water so far and increment i
Update maximum water so far and decrement j
Any of the pointers can be updated ( or both )
Driver code
Function to return the maximum count of selection possible from the given array following the given process
Initialize result
Sorting the array
Initialize the select variable
Loop through array
If selection is possible
Increment result
Increment selection variable
Driver Code
arr [ ] to store all the distinct elements index - next location in array num - given number reducedNum - reduced number
Set to store all the distinct elements
Base condition
Iterate over all the elements and store it into the set
Calculate the sum of all the elements of the set
Compare whether the sum is equal to n or not , if it is equal to n print the numbers
Find previous number stored in the array
Store all the numbers recursively into the arr [ ]
Function to find all the distinct combinations of n
Driver code
Function that returns true if arr [ ] can be made strictly increasing after modifying at most one element
To store the number of modifications required to make the array strictly increasing
Check whether the first element needs to be modify or not
Loop from 2 nd element to the 2 nd last element
Check whether arr [ i ] needs to be modified
Modifying arr [ i ]
Check if arr [ i ] is equal to any of arr [ i - 1 ] or arr [ i + 1 ]
Check whether the last element needs to be modify or not
If more than 1 modification is required
Driver code
Python3 implementation of the approach
Function that returns true if the matrix is strictly increasing
Check if the matrix is strictly increasing
Out of bound condition
Out of bound condition
Driver code
Python implementation of above approach
Sieve of Eratosthenes
Function to return the size of the maximized array
Insert the indices of composite numbers
Compute the number of prime between two consecutive composite
Sort the diff vector
Compute the prefix sum of diff vector
Impossible case
Delete sub - arrays of length 1
Find the number of primes to be deleted when deleting the sub - arrays
Driver code
function to sort the array according to the number of set bits in elements
Counting no of setBits in arr [ i ]
The count is subtracted from 32 because the result needs to be in descending order
Printing the numbers in descending order of set bit count
Driver code
Function to return the required number
Initialize both vectors with their initial values
Sort the vector of digits
Initialize the queue
If modulus value is not present in the queue
Compute digits modulus given number and update the queue and vectors
While queue is not empty
Remove the first element of the queue
Compute new modulus values by using old queue values and each digit of the set
If value is not present in the queue
If required condition can 't be satisfied 
Initialize new vector
Constructing the solution by backtracking
Reverse the vector
Return the required number
Driver code
Python 3 implementation of the approach
Function to return the factorial of a number
Function to return the value of nCr
Function to return ' a ' raised to the power n with complexity O ( log ( n ) )
Function to return the number of sub - sets whose median is also present in the set
Number of odd length sub - sets
Sort the array
Checking each element for leftmost middle element while they are equal
Calculate the number of elements in right of rightmost middle element
Calculate the number of elements in left of leftmost middle element
Add selected even length subsets to the answer
Driver code
Python3 implementation of the approach
Function to store pascal triangle in 2 - d array
Function to return a raised to the power n with complexity O ( log ( n ) )
Function to return the number of sub - sets whose median is also present in the set
Number of odd length sub - sets
Sort the array
Checking each element for leftmost middle element while they are equal
Calculate the number of elements in right of rightmost middle element
Calculate the number of elements in left of leftmost middle element
Add selected even length subsets to the answer
Driver code
Function to print the ordering of words
Creating list of words and assigning them index numbers
Sort the list of words lexicographically
Print the ordering
Driver Code
Python 3 implementation of the approach
Function to return the required sum
Creating hash array initially filled with zero
Calculate the frequency of elements of arr2 [ ]
Running sum of hash array such that hash [ i ] will give count of elements less than or equal to i in arr2 [ ]
To store the maximum value of the number of elements in arr2 [ ] which are smaller than or equal to some element of arr1 [ ]
Calculate the sum of elements from arr1 [ ] corresponding to maximum frequency
Return the required sum
Driver code
Function to print the coordinates along with their frequency in ascending order
map to store the pairs and their frequencies
Store the coordinates along with their frequencies
Driver code
Function to print both the arrays
Store both arrays
Used for hashing
Iterate for every element
Increase the count
If first occurrence
If second occurrence
If occurs more than 2 times
Sort in increasing order
Print the increasing array
Sort in reverse order
Print the decreasing array
Driver code
Traverse the List
Traverse the unsorted sublist
Swap Data
Function that returns true if n is an ugly number
While divisible by 2 , keep dividing
While divisible by 3 , keep dividing
While divisible by 5 , keep dividing
n must be 1 if it was ugly
Function to sort ugly numbers in their relative positions
To store the ugly numbers from the array
If current element is an ugly number
Add it to the ArrayList and set arr [ i ] to - 1
Sort the ugly numbers
Position of an ugly number
Driver code
Utility function to print the contents of an array
Function to sort elements in between multiples of k
To store the index of previous multiple of k
If it is not the first multiple of k
Sort the elements in between the previous and the current multiple of k
Update previous to be current
Print the updated array
Driver code
Function to print A and B all of whose divisors are present in the given array
Sort the array
A is the largest element from the array
Iterate from the second largest element
If current element is not a divisor of A then it must be B
If current element occurs more than once
Print A and B
Driver code
Utility function to print the contents of an array
Function to remove the minimum value of the array from every element of the array
Get the minimum value from the array
Remove the minimum value from every element of the array
Function to remove every element of the array from the maximum value of the array
Get the maximum value from the array
Remove every element of the array from the maximum value of the array
Function to print the modified array after k operations
If k is odd then remove the minimum element of the array from every element of the array
Else remove every element of the array from the maximum value from the array
Print the modified array
Driver code
Function to return the maximum product value
To store the product
Sort the array
Efficiently finding product including every element once
Storing values in hash map
Including the greater repeating values so that product can be maximized
Driver code
Function to merge two arrays
array to store the result after merging l and r
variables to store the current pointers for l and r
loop to merge l and r using two pointer
Function to merge all the arrays
2D - array to store the results of a step temporarily
Loop to make pairs of arrays and merge them
To clear the data of previous steps
Returning the required output array
Driver Code
Input arrays
Merged sorted array
Function to return the minimized sum
Sort the array to pair the elements
Variable to hold the answer
Pair smallest with largest , second smallest with second largest , and so on
Driver code
Python3 program to merge K sorted arrays
Function to perform merge operation
to store the starting point of left and right array
to store the size of left and right array
array to temporarily store left and right array
storing data in left array
storing data in right array
to store the current index of temporary left and right array
to store the current index for output array
two pointer merge for two sorted arrays
Code to drive merge - sort and create recursion tree
base step to initialize the output array before performing merge operation
to sort left half
to sort right half
merge the left and right half
Driver code
input 2D - array
Number of arrays
Output array
Print merged array
Function to print the non - palindromic string if it exists , otherwise prints - 1
If all characters are not same , set flag to 1
Update frequency of the current character
If all characters are same
Print characters in sorted manner
Driver Code
Function to return the minimum number of operations required
Create another array to store the elements of matrix
If not possible
Sort the array to get median
To count the minimum operations
If there are even elements , then there are two medians . We consider the best of two as answer .
Return minimum operations required
Driver code
Python3 program to count distinct elements in a given array
Pick all elements one by one
If not printed earlier , then print it
Driver Code
Python3 program to count all distinct elements in a given array
First sort the array so that all occurrences become consecutive
Traverse the sorted array
Move the index ahead while there are duplicates
Driver Code
Utility function to print the contents of an array
Function to print the array with maximum mean
Sort the original array
Construct new array
Print the resultant array
Driver code
Function to find average
base case if 2 * k >= n means all element get removed
first sort all elements
sum of req number
find average
Driver code
function to calculate minimum sum after transformation
no element can be reduced further
if all the elements of the array are identical
check if a [ i ] can be reduced to a [ 0 ]
one of the elements cannot be reduced to be equal to the other elements
if k = 1 then all elements can be reduced to 1
Driver code
Merges two subarrays of arr . First subarray is arr [ l . . m ] Second subarray is arr [ m + 1. . r ] Inplace Implementation
If the direct merge is already sorted
Two pointers to maintain start of both arrays to merge
If element 1 is in right place
Shift all the elements between element 1 element 2 , right by 1.
Update all the pointers
* l is for left index and r is right index of the sub - array of arr to be sorted
Same as ( l + r ) / 2 , but avoids overflow for large l and r
Sort first and second halves
Function to pran array
Driver program to test above functions
Function to return minimum operations need to be make each element of array equal
Initialize cost to 0
Sort the array
Middle element
Find Cost
If n , is even . Take minimum of the Cost obtained by considering both middle elements
FInd cost again
Take minimum of two cost
Return total cost
Driver code
Function to print array elements in alternative increasing and decreasing order
First sort the array in increasing order
start with 2 elements in increasing order
till all the elements are not printed
printing the elements in increasing order
else : printing the elements in decreasing order
increasing the number of elements to printed in next iteration
Driver Code
Python3 implementation to count triplets in a sorted doubly linked list whose product is equal to a given value 'x
Structure of node of doubly linked list
Function to count pairs whose product equal to given 'value
The loop terminates when either of two pointers become None , or they cross each other ( second . next == first ) , or they become same ( first == second )
Pair found
Increment count
Move first in forward direction
Move second in backward direction
If product is greater than ' value ' move second in backward direction
Else move first in forward direction
Required count of pairs
Function to count triplets in a sorted doubly linked list whose product is equal to a given value 'x
If list is empty
Get pointer to the last node of the doubly linked list
Traversing the doubly linked list
For each current node
Count pairs with product ( x / current . data ) in the range first to last and add it to the ' count ' of triplets
Required count of triplets
A utility function to insert a new node at the beginning of doubly linked list
Allocate node
Put in the data
Driver code
Start with an empty doubly linked list
Insert values in sorted order
Function that checks whether the string is in alphabetical order or not
if element at index ' i ' is less than the element at index ' i - 1' then the string is not sorted
Driver code
check whether the string is in alphabetical order or not
Function to find the product of all non - repeated elements in an array
sort all elements of array
Driver code
Python3 implementation of above approach
Function to check if it possible to form rectangles with heights as non - ascending
set maximum
replace the maximum with previous maximum
replace the minimum with previous minimum
print NO if the above two conditions fail at least once
initialize the number of rectangles
initialize n rectangles with length and breadth
Function to print the required points which minimizes the sum of Manhattan distances
Sorting points in all dimension
Output the required k points
Driver code
function call to print required points
Function to sort the array
Store the k elements in an array
Store the remaining n - k elements in an array
sorting the array from 0 to k - 1 places
sorting the array from k to n places
storing the values in the final array arr
printing the array
Driver code
Function to generate largest possible number with given digits
Declare a hash array of size 10 and initialize all the elements to zero
store the number of occurrences of the digits in the given array into the hash table
Traverse the hash in descending order to print the required number
Print the number of times a digits occurs
Driver code
Given an array of size n , where every element is k away from its target position , sorts the array in O ( n Log n ) time .
Sort the array using inbuilt function
An utility function to print array elements
Driver code
Python 3 program to equally divide n elements into two sets such that second set has maximum distinct elements .
Driver code
Function to print pairs of positive and negative values present in the array
Store all the positive elements in the unordered_set
Start traversing the array
Check if the positive value of current element exists in the set or not
Print that pair
Driver code
Python3 program to sort an array of size 3
A Simple python 3 program to count triplets with sum smaller than a given value
Fix the first element as A [ i ]
Fix the second element as A [ j ]
Now look for the third number
Driver Code
Function to count triplets
Initialize result
Fix the first element as A [ i ]
Fix the second element as A [ j ]
Now look for the third number
Driver code
Function to find count of triplets having sum less than or equal to val .
sort the input array .
Initialize result
to store sum
Fix the first element
Initialize other two elements as corner elements of subarray arr [ j + 1. . k ]
Use Meet in the Middle concept .
If sum of current triplet is greater , then to reduce it decrease k .
If sum is less than or equal to given value , then add possible triplets ( k - j ) to result .
Function to return count of triplets having sum in range [ a , b ] .
to store count of triplets .
Find count of triplets having sum less than or equal to b and subtract count of triplets having sum less than or equal to a - 1.
Driver code
Function to find area of rectangles
sorting the array in descending order
store the final sum of all the rectangles area possible
temporary variable to store the length of rectangle
Selecting the length of rectangle so that difference between any two number is 1 only . Here length is selected so flag is set
flag is set means we have got length of rectangle
length is set to a [ i + 1 ] so that if a [ i + 1 ] is less than a [ i ] by 1 then also we have the correct chice for length
incrementing the counter one time more as we have considered a [ i + 1 ] element also so .
Selecting the width of rectangle so that difference between any two number is 1 only . Here width is selected so now flag is again unset for next rectangle
area is calculated for rectangle
flag is set false for another rectangle which we can get from elements in array
incrementing the counter one time more as we have considered a [ i + 1 ] element also so .
Driver code
Function to calculate the given problem .
checking for odd positioned .
Inserting even positioned elements in ascending order .
sorting the even positioned .
Inserting odd positioned elements in descending order .
A utility function to print an array of size n
Driver program
Bubble sort implementation to sort elements in descending order .
Sorts a [ ] in descending order using bubble sort .
Driver code
Function to perform the given operation on arr [ ]
Skip elements which are 0
Pick smallest non - zero element
If all the elements of arr [ ] are 0
Driver code
Python C ++ program to sort an array of 0 s 1 s and 2 s .
Variables to maintain the count of 0 ' s , ▁ ▁ 1' s and 2 's in the array
Putting the 0 's in the array in starting.
Putting the 1 ' s ▁ in ▁ the ▁ array ▁ after ▁ the ▁ 0' s .
Putting the 2 ' s ▁ in ▁ the ▁ array ▁ after ▁ the ▁ 1' s
Prints the array
Driver code
Python3 program for unusul string sorting
Function for alternate sorting of string
Count occurrences of individual lower case and upper case characters
Traverse through count arrays and one by one pick characters . Below loop takes O ( n ) time considering the MAX is constant .
Driver code
Return the sum of distance between all the pair of points .
for each point , finding distance to rest of the point
Driven Code
Return the sum of distance of one axis .
sorting the array .
for each point , finding the distance .
Driven Code
n is total number of elements . index is index of 999 or space . k is number of elements yet to be sorted .
Print the sorted array when loop reaches the base case
Else if k > 0 and space is at 0 th index swap each number with space and store index at second last index
If space is neither start of array nor last element of array and element before it greater than / the element next to space
First swap space and element next to space in case of { 3 , 999 , 2 } make it { 3 , 2 , 999 }
Than swap space and greater element convert { 3 , 2 , 999 } to { 999 , 2 , 3 }
Wrapper over sortRec .
Find index of space ( or 999 )
Invalid input
Driver Code
Python program to find an array that can be sorted with k merge sort calls .
We make two recursive calls , so reduce k by 2.
Create an array with values in [ 1 , n ]
calling unsort function
Driver code
Python program to sort a string of characters in descending order
function to print string in sorted order
Hash array to keep count of characters . Initially count of all charters is initialized to zero .
Traverse string and increment count of characters
' a ' - ' a ' will be 0 , ' b ' - ' a ' will be 1 , so for location of character in count array we wil do str [ i ] - ' a ' .
Traverse the hash array and print characters
Driver program to test above function
Find median of array after adding k elements
sorting the array in increasing order .
printing the median of array . Since n + K is always odd and K < n , so median of array always lies in the range of n .
driver function
Python3 program to implement dual pivot QuickSort
lp means left pivot and rp means right pivot
p is the left pivot , and q is the right pivot .
If elements are less than the left pivot
If elements are greater than or equal to the right pivot
Bring pivots to their appropriate positions .
Returning the indices of the pivots
Driver code
Python3 program to implement min max selection sort .
shifting the min .
Shifting the max . The equal condition happens if we shifted the max to arr [ min_i ] in the previous swap .
Driver code
Python 3 program to sort an array based on absolute difference with a given value x .
Below lines are similar to insertion sort
Insert arr [ i ] at correct place
Function to print the array
Driver Code
v [ ] is vector of strings . len is length of strings in every row .
Driver code
l = 5 Length of strings
function to print half of the array in ascending order and the other half in descending order
sorting the array
printing first half in ascending order
printing second half in descending order
Driver code
Python 3 program to find subarray with sum closest to 0
Function to find the subarray
Pick a starting point
Consider current starting point as a subarray and update minimum sum and subarray indexes
Try all subarrays starting with i
update minimum sum and subarray indexes
Return starting and ending indexes
Driver Code
Python3 program to prshortest unique prefixes for every word .
Create an array to store the results
Sort the array of strings
Compare the first with its only right neighbor
Store the unique prefix of a [ 1 ] from its left neighbor
Compute common prefix of a [ i ] unique from its right neighbor
Compare the new prefix with previous prefix
Store the prefix of a [ i + 1 ] unique from its left neighbour
Compute the unique prefix for the last in sorted array
Driver Code
Function to find the minimum amount to buy all candies
Buy current candy
And take k candies for free from the last
Function to find the maximum amount to buy all candies
Buy candy with maximum amount
And get k candies for free from the starting
Driver code
Function call
function to print strings in sorted order
Initially the index of the strings are assigned to the 'index[]
selection sort technique is applied
with the help of ' index [ ] ' strings are being compared
index of the smallest string is placed at the ith index of 'index[]
printing strings in sorted order
Driver Code
Returns maximum number of pyramidcal levels n boxes of given widths .
Sort objects in increasing order of widths
Total width of previous level and total number of objects in previous level
Number of object in current level .
Width of current level .
Picking the object . So increase current width and number of object .
If current width and number of object are greater than previous .
Update previous width , number of object on previous level .
Reset width of current level , number of object on current level .
Increment number of level .
Driver Code
Number of digits
function to sort array of digits using counts
Store count of all elements
Store
Remove elements from arr [ ] at indexes ind1 and ind2
Returns largest multiple of 3 that can be formed using arr [ ] elements .
Sum of all array element
Sum is divisible by 3 , no need to delete an element
Sort array element in increasing order
Find reminder
If remainder is '1' , we have to delete either one element of remainder '1' or two elements of remainder '2
Traverse array elements
Store first element of remainder '1
If this is first occurrence of remainder 2
If second occurrence
If remainder is '2' , we have to delete either one element of remainder '2' or two elements of remainder '1
traverse array elements
store first element of remainder '2
If this is first occurrence of remainder 1
If second occurrence
Driver code
This funt merges two sorted arrays and returns inversion count in the arrays .
i is index for left subarray
j is index for right subarray
k is index for resultant merged subarray
Copy the remaining elements of left subarray ( if there are any ) to temp
Copy the remaining elements of right subarray ( if there are any ) to temp
Copy back the merged elements to original array
An auxiliary recursive function that sorts the input array and returns the number of inversions in the array .
Divide the array into two parts and call _mergeSortAndCountInv ( ) for each of the parts
Inversion count will be sum of inversions in left - part , right - part and number of inversions in merging
Merge the two parts
This function sorts the input array and returns the number of inversions in the array
method returns minimum number of swaps to reach permuted array 'arr
loop over all elements to check Invalid permutation condition
if an element is at distance more than 2 from its actual position then it is not possible to reach permuted array just by swapping with 2 positions left elements so returning - 1
If permuted array is not Invalid , then number of Inversion in array will be our final answer
Driver code to test above methods
change below example
To do two way sort . First sort even numbers in ascending order , then odd numbers in descending order .
Make all odd numbers negative
Check for odd
Sort all numbers
Retaining original array
Driver code
Method prints possible triangle when array values are taken as sides
If number of elements are less than 3 , then no triangle is possible
first sort the array
loop for all 3 consecutive triplets
If triplet satisfies triangle condition , break
Driver Code
Python program to find the K - th smallest element after removing some integers from natural number .
Return the K - th smallest element .
Making an array , and mark all number as unmarked .
Marking the number present in the given array .
If j is unmarked , reduce k by 1.
If k is 0 return j .
Driven Program
Python program to Merge two sorted halves of array Into Single Sorted Array
Sort the given array using sort STL
Driver Code
Print sorted Array
Return minimum difference of maximum and minimum of k elements of arr [ 0. . n - 1 ] .
Sorting the array .
Find minimum value among all K size subarray .
Driver code
Python3 program to separately sort even - placed and odd placed numbers and place them together in sorted array .
create evenArr [ ] and oddArr [ ]
Put elements in oddArr [ ] and evenArr [ ] as per their position
sort evenArr [ ] in ascending order sort oddArr [ ] in descending order
Driver Code
This function merges two sorted arrays and returns inversion count in the arrays .
i is index for left subarray
j is index for right subarray
k is index for resultant merged subarray
this is tricky -- see above explanation / diagram for merge ( )
Copy the remaining elements of left subarray ( if there are any ) to temp
Copy the remaining elements of right subarray ( if there are any ) to temp
Copy back the merged elements to original array
An auxiliary recursive function that sorts the input array and returns the number of inversions in the array .
Divide the array into two parts and call _mergeSortAndCountInv ( ) for each of the parts
Inversion count will be sum of inversions in left - part , right - part and number of inversions in merging
Merge the two parts
This function sorts the input array and returns the number of inversions in the array
Driver progra to test above functions
Returns true if n is even , else odd
Driver code
Function to find surpasser count of each element in array
stores surpasser count for element arr [ i ]
Function to print an array
Driver program to test above functions
Function to find and return minimum sum of two numbers formed from digits of the array .
sort the array
let two numbers be a and b
Fill a and b with every alternate digit of input array
return the sum
Driver code
Python3 program to find a maximum product of a triplet in array of integers
Function to find a maximum product of a triplet in array of integers of size n
if size is less than 3 , no triplet exists
will contain max product
Driver Program
A Python3 program to find a maximum product of a triplet in array of integers
Function to find a maximum product of a triplet in array of integers of size n
If size is less than 3 , no triplet exists
Construct four auxiliary vectors of size n and initialize them by - 1
Will contain max product
To store maximum element on left of array
To store minimum element on left of array
leftMax [ i ] will contain max element on left of arr [ i ] excluding arr [ i ] . leftMin [ i ] will contain min element on left of arr [ i ] excluding arr [ i ] .
Reset max_sum to store maximum element on right of array
Reset min_sum to store minimum element on right of array
rightMax [ i ] will contain max element on right of arr [ i ] excluding arr [ i ] . rightMin [ i ] will contain min element on right of arr [ i ] excluding arr [ i ] .
For all array indexes i except first and last , compute maximum of arr [ i ] * x * y where x can be leftMax [ i ] or leftMin [ i ] and y can be rightMax [ i ] or rightMin [ i ] .
Driver code
Function to find a maximum product of a triplet in array of integers of size n
if size is less than 3 , no triplet exists
Sort the array in ascending order
Return the maximum of product of last three elements and product of first two elements and last element
Driver Code
A O ( n ) Python3 program to find maximum product pair in an array .
Function to find a maximum product of a triplet in array of integers of size n
If size is less than 3 , no triplet exists
Initialize Maximum , second maximum and third maximum element
Initialize Minimum and second minimum element
Update Maximum , second maximum and third maximum element
Update second maximum and third maximum element
Update third maximum element
Update Minimum and second minimum element
Update second minimum element
Driver Code
Function to count the operations required to convert matrix A to B
Store the sizes of matrix
Stores count of flips required
Traverse the iven matrix
Check if the matrix values are not equal
Increment the count of moves
Check if the current square sized exists or not
Flip all the bits in this square sized submatrix
Count of operations required
Driver Code
Function to find the lexicographically largest permutation by sequentially inserting the array elements
Stores the current state of the new array
Stores ythe current maximum element of array arr [ ]
Iterate the array elements
If the current element is smaller than the current maximum , then insert
If the current element is at least the current maximum
Update the value of the current maximum
Print resultant permutation
Driver Code
Function to find maximum count of consecutive integers from 0 in set S of all possible subset - sum
Stores the maximum possible integer
Sort the given array in non - decrasing order
Iterate the given array
If arr [ i ] <= X + 1 , then update X otherwise break the loop
Return Answer
Driver Code
Function to find maximum length of subarray of array A and B having equal sum
Stores the maximum size of valid subarray
Stores the prefix sum of the difference of the given arrays
Traverse the given array
Add the difference of the corresponding array element
If current difference is not present
If current difference is present , update the value of maxSize
Return the maximum length
Driver Code
Function to find the minimum positive product after swapping bits at the similar position for any two numbers
Stores the resultant number
range / 2 numbers will be 1 and range / 2 numbers will be range - 1
Multiply with the final number
Return the answer
Driver Code
Function to find the maximum size of the subset of the given array such that a triangle can be formed from any three integers of the subset as sides
Sort arr [ ] in increasing order
Stores the maximum size of a valid subset of the given array
Stores the starting index of the current window
Stores the last index of the current window
Iterate over the array arr [ ]
Increment j till the value of arr [ i ] + arr [ i + 1 ] > arr [ j ] holds true
Update the value of maxSize
Return Answer
Driver Code
Function to find the maximum element after shifting operations in arr [ ]
Stores the sum of array element
Stores the maximum element in cap [ ]
Iterate to find maximum element
Return the resultant maximum value
Driver Code
Python 3 program for the above approach
Function to perform the find operation to find the parent of a disjoint set
FUnction to perform union operation of disjoint set union
Update the minimum value such than it should be greater than 0
Update the minimum value such than it should be greater than 0
Function to minimize the cost to make the graph connected as per the given condition
Stores the parent elements of sets
Stores the rank of the sets
Stores the minValue of the sets
Update parent [ i ] to i
Update minValue [ i ] to cost [ i - 1 ]
Add i . first and i . second elements to the same set
Stores the parent elements of the different components
Insert parent of i to s
Stores the minimum value from s
Flag to mark if any minimum value is negative
If minVal [ i ] is negative
Mark flag as true
Update the minimum value
Stores minimum cost to add the edges
If the given graph is connected or components minimum values not having any negative edge
Update the minCost
Print the value of minCost
Print - 1
Driver Code
Function to find the minimum size of array with sum S and product P
Base Case
Iterate through all values of S and check the mentioned condition
Otherwise , print " - 1"
Driver Code
Function to find the smallest positive integer X such that X is added to every element of A except one element to give array B
Stores the unique elements of array A
Insert A [ i ] into the set s
Sort array A [ ]
Sort array B [ ]
Assume X value as B [ 0 ] - A [ 1 ]
Check if X value assumed is negative or 0
Update the X value to B [ 0 ] - A [ 0 ]
If assumed value is wrong
Update X value
Driver Code
python 3 program for the above approach
Function to find the total valid integer coordinates at a distance D from origin
Stores the count of valid points
Iterate over possibel x coordinates
Find the respective y coordinate with the pythagoras theorem
Adding 4 to compensate the coordinates present on x and y axes .
Return the answer
Driver Code
Function to find the total sum of the shortest distance between every 0 to 1 in a given binary string
Stores the prefix distance and suffix distance from 0 to 1
Stores the current distance from 1 to 0
Marks the 1
If current character is 1
Mark haveOne to true
Assign the cnt to 0
Assign prefixDistance [ i ] as 0
If haveOne is true
Update the cnt
Update prefixDistance [ i ]
Assign prefixDistance [ i ] as INT_MAX
Assign haveOne as false
If current character is 1
Mark haveOne to true
Assign the cnt to 0
Assign the suffixDistance [ i ] as 0
If haveOne is true
Update the cnt
Update suffixDistance [ i ] as cnt
Assign suffixDistance [ i ] as INT_MAX
Stores the total sum of distances between 0 to nearest 1
If current character is 0
Update the value of sum
Print the value of the sum
Driver Code
Function to find the minimum possible value of | A - X | + | B - Y | + | C - Z | such that X * Y = Z for given A , B and C
Stores the minimum value of | A - X | + | B - Y | + | C - Z | such that X * Y = Z
Iterate over all values of i in the range [ 1 , 2 * C ]
Iterate over all values of j such that i * j <= 2 * c
Update the value of ans
Return answer
Driver Code
Function to calculate the average number of Set bits after after given operations
Stores the average number of set bits after current operation
Stores the average number of set bits after current operation
Iterate through the array arr [ ] and update the values of p and q
Store the value of p and q of the previous state before their updation
Update average number of set bits after performing the ith operation
Update average number of off bits after performing the ith operation
Return Answer
Driver Code
Function to calculate the max sum of subsequence
Variable to store the max sum
Sort the array
Iterate over the array
Flip sign
Decrement k
Traverse over the array
Add only positive elements
Return the max sum
Driver Code
Given array
Variable to store number of flips are allowed
Function call to find the maximum sum of subsequence
Function to find the minimum number of intervals in the array A [ ] to cover the entire target interval
Sort the array A [ ] in increasing order of starting point
Insert a pair of INT_MAX to prevent going out of bounds
Stores start of current interval
Stores end of current interval
Stores the count of intervals
Iterate over all the intervals
If starting point of current index <= start
Update the value of start
Increment the value of count
If the target interval is already covered or it is not possible to move then break the loop
If the entire target interval is not covered
Return Answer
Driver Code
Function to calculate K - th smallest solution ( Y ) of equation X + Y = X | Y
Initialize the variable to store the answer
The i - th bit of X is off
The i - bit of K is on
Divide K by 2
If K becomes 0 then break
Driver Code
Function to print the array
Function to rearrange the array such that odd indexed elements come before even indexed elements
Reduces the size of array by one because last element does not need to be changed in case N = odd
Initialize the variables
Iterate over the range
Add the modified element at the odd position
Iterate over the range
Add the modified element at the even position
Iterate over the range
Divide by the maximum element
Driver Code
Python 3 program for the above approach
Function to find the range of values for S in a given array that satisfies the given condition
Stores the left range value
Stores the right range value
Find the current left range value for S
Find the current right range value for S
Updating L value
Updating R value
Driver Code
Function to find anagram of string such that characters at the same indices are different
Copying our original string for comparison
Declaring the two pointers
Checking the given condition
When string length is odd
The mid element
If the characters are the same , then perform the swap operation as illustrated
Check if the corresponding indices has the same character or not
If string follows required condition
Driver Code
Function to generate the lexicographically smallest permutation according to the given criteria
Stores the resultant permutation
Initialize the first elements to 1
Traverse the given string S
Number greater than last number
Number equal to the last number
Correct all numbers to the left of the current index
Printing the permutation
Driver Code
Function to calculate K - th smallest solution ( Y ) of equation X + Y = X | Y
Initialize the variable to store the answer
The i - th bit of X is off
The i - bit of K is on
Divide K by 2
If K becomes 0 then break
Driver Code
Function to find the count of distinct arrays of size n having elements in range [ 1 , k ] and all adjacent elements ( P , Q ) follows ( P <= Q ) or ( P % Q > 0 )
Stores the divisors of all integers in the range [ 1 , k ]
Calculate the divisors of all integers using the Sieve
Stores the dp states such that dp [ i ] [ j ] with i elements having j as the last element of array
Initialize the dp array
Calculate the dp states using the derived relation
Calculate the sum for len - 1
Subtract dp [ len - 1 ] [ j ] for each factor of j from [ 1 , K ]
Calculate the final result
Return the resultant sum
Driver Code
Function to calculate the minimum number of operations to convert array A to array B by incrementing and decrementing adjacent elements
Stores the final count
Stores the sum of array A and B respectivelly
Check of the sums are unequall
Pointer to iterate through array
Case 1 where A [ i ] > B [ i ]
Stores the extra values for the current index
Iterate the array from [ i - 1 , 0 ]
Stores the count of values being transfered from A [ i ] to A [ j ]
Add operation count
Iterate the array in right direction id A [ i ] - B [ i ] > 0
Iterate the array from [ i + 1 , n - 1 ]
Stores the count of values being transfered from A [ i ] to A [ j ]
Add operation count
Return Answer
Driver Code
Function Call
Function to check the above problem condition
Check the base case .
check if X - T is a divisor of D - 1
Driver code
Python 3 code implementation for the above approach
Function to return the number of operations possible
counter to store the number of times the current element is divisible by 2
variable to store the final answer
Initialize the counter to zero for each element
update the counter till the number is divisible by 2
update the answer as the minimum of all the counts
Driver code
Function to print minimum integer having only digits P and Q and the sum of digits as N
If Q is greater that P then swap the values of P and Q
If P and Q are both zero or if Q is zero and N is not divisible by P then there is no possible integer which satisfies the given conditions
Loop to find the maximum value of count_P that also satisfy P * count_P + Q * count_Q = N
If N is 0 , their is a valid integer possible that satisfies all the requires conditions
Print Answer
Driver Code
Function Call
Function to find the minimum moves to reach K from N
Initialization of dp vector
dp [ i ] = minimum pushes required to reach i
Traversing through the buttons
Iterating through all the positions
If not visited
Next status of lock
Advance to next state
Return the final dp [ target ]
Given Input
Function Call
Function to minimum no . of apples
If we get all required apple from South
If we required trees at East and West
If we doesn 't have enough  red apples
Driver Code
No . of red apple for gift
No . of red apple in each tree
No . of tree in North
No . of tree in South
No . of tree in West
No . of tree in East
Function Call
Function to find the minimum number of increments / decrements of array elements by 1 to make signs of prefix sum array elements alternating
Case 1. neg - pos - neg
Stores the current sign of the prefix sum of array
Stores minimum number of operations for Case 1
Traverse the array
Checking both conditions
Update the current prefix1 to currentPrefixSum
Case 2. pos - neg - pos
Stores the prefix sum of array
Stores minimum number of operations for Case 1
Checking both conditions
Update the current prefix2 to currentPrefixSum
Driver Code
Function to construct the array having maximum sum satisfying the given criteria
Declaration of the array arrA [ ] and ans [ ]
Stores the maximum sum of the resultant array
Initialize the array arrA [ ]
Traversing the array arrA [ ]
Initialize the array arrB [ ]
Assign the maximum element to the current element
Form the first increasing till every index i
Make the current element as the maximum element
Forming decreasing from the index i + 1 to the index N
Initialize the sum
Find the total sum
Check if the total sum is at least the sum found then make ans as ansB
Print the final array formed
Driver Code
Utility function to find the minimum product of R1 and R2 possible
Reaching to its limit
If M is remaining
Function to find the minimum product of R1 and R2
Case 1 - R1 reduces first
case 2 - R2 reduces first
Driver Code
Given Input
Function Call
Function to find maximum profit after selling K tickets
Frequency array to store freq of every element of the array
Modify the arr [ ] so that the array is sorted in O ( N )
Variable to store answer
Traverse the array while K > 0 and j >= 0
If arr [ i ] > arr [ j ] then ticket can be brought from counter [ j + 1 , N ]
If arr [ j ] = = arr [ i ] decrement j until arr [ j ] != arr [ i ]
Sell tickets from counter [ j + 1 , N ]
All elements of array are equal Send tickets from each counter 1 time until K > 0.
Converting answer from long long to int
Driver Code
Given Input
Function Call
Function to find the maximum sum of average of groups
Sort the given array
Stores the sum of averages
Stores count of array element
Add the current value to the variable sum
Increment the count by 1
If the current size is X
If the remaining elements can 't become a group
Iterate until i is less than N
Update the value of X
Update the average
Find the average
Reset the sum and count
Print maximum sum of averages
Driver Code
Python 3 program for the above approach
Function to check if a string S contains pair of adjacent characters that are equal or not
Traverse the string S
If S [ i ] and S [ i + 1 ] are equal
Otherwise , return false
Function to rearrange characters of a string such that no pair of adjacent characters are the same
Initialize 3 variables
Iterate until k < N
If S [ i ] is not equal to S [ j ]
Increment i and j by 1
If j equals k and increment the value of K by 1
Else
If S [ j ] equals S [ k ]
Increment k by 1
Else
Swap
Increment i and j by 1
If j equals k
Increment k by 1
Function to rearrange characters in a string so that no two adjacent characters are same
If string is already valid
If size of the string is 2
Function Call
Reversing the string
Function Call
If the string is valid
Otherwise
Driver Code
Function to make the lexicographically largest string by merging two strings
Stores the resultant string
If the string word1 is lexographically greater than or equal to word2
Update the string merge
Erase the first index of the string word1
Otherwise
Update the string merge
Erase the first index of the string word2
Return the final string
Driver code
Python 3 program for the above approach
Function to find the maximum number of rods that can be put horizontally
Stores the result
Stores the last occupied point
Traverse the array arr [ ]
If the current point can be put on the left side
Increment the ans by 1
Update prev
Else if the given point can be put on the right side
Increment the ans by 1
Update prev
Otherwise ,
Update prev
Return the ans
Driver Code
Function to find the maximum time by replacing ' ? ' by any digits
If the 0 th index is '?
If the 1 st index is '?
If the 3 rd index is '?
If the 4 th index is '?
Return new string
Driver Code
Function to calculate maximum gcd of two numbers possible by adding same value to both a and b
Given Input
Function to print the count of the combination of 4 or 5 required to make the arr [ i ] for each 0 < i < N
Vector to store the answer
Iterate in the range [ 0 , N - 1 ]
Initialize sum to store the count of numbers and cnt for the current factor of 4
Iterate in the range [ 0 , arr [ i ] ] with increment of 4
Check if arr [ i ] - j ( the current factor of 4 ) is divisible by 5 or not
If sum is not maximum then answer is found
Finally , print the required answer
Given Input
Function Call
Function to find an N - length binary string having maximum sum of elements from all given ranges
Iterate over the range [ 1 , N ]
If i is odd , then print 0
Otherwise , print 1
Driver Code
Function Call
Python program for the above approach
Function to find the maximum number of 0 s in the array A [ ] after changing the array element to A [ i ] * D + B [ i ]
Stores the frequency of fractions needed to make each element 0
Stores the maximum number of 0
Traverse the array
Find the numerator and the denominator
Check if den is not equal to 0
Divide num and den by their gcd
Check if num is not greater than 0
Check if both num and den are equal to 0
Increment the value of { num , den } in the map
Update the value of ans
Prthe value of ans + cnt
Driver Code
Function to find the minimum cost to hire the workers for the given days in the array days [ ]
Initialize the array dp
Minimum Cost for Nth day
Poleter of the array arr [ ]
Traverse from right to left
If worker is hired for 1 day
If worker is hired for 7 days
If worker is hired for 30 days
Update the value of dp [ i ] as minimum of 3 options
If the day is not at the array arr [ ]
Return the answer
Driver Code
Function to count the number of pairs whose concatenation results in the regular bracket sequence
Stores the count of opening and closing parenthesis for each string arr [ i ]
Stores maximum count of pairs
Traverse the array arr [ ]
Traverse the string c [ ]
Opening Bracket
Otherwise , Closing Bracket
Count of closing brackets needed to balance string
Count of opening brackets needed to balance string
Add the count of balanced sequences
Traverse the array
Print the resultant count
Driver Code
Function to find the count of minimum elements to be inserted to form every number in a range
Stores the count of numbers needed
Stores the numbers upto which every numbers can be formed
Stores the index of the array arr [ ]
Iterate until requiredSum is less than or equal to K
If i is less than N and requiredSum is greater than or equal to arr [ i ]
Increment requiredSum by arr [ i ]
Increment i by 1
Otherwise
Increment count by 1
Increment requiredSum by requiredSum
Return result
Driver Code
Input
Function Call
Python3 program for the above approach
Custom comparator
Function to find the maximum profit
Stores the pairs of elements of B and A at the same index
Iterate over the range [ 0 , N ]
If current integer is perfect square
Push the pair of B [ i ] and A [ i ] in vector V
Sort the vector using the custom comparator
Stores the maximum profit
Traverse the vector V
If V [ i ] [ 1 ] is less than W
Increment profit by V [ i ] [ 0 ]
Decrement V [ i ] [ 0 ] from W
Otherwise
Update profit
Return the value of profit
Driver Code
Function to find maximum count pair of adjacent elements with even sum
Stores count of odd numbers
Stores count of even numbers
Traverse the array arr [ ]
If arr [ i ] % 2 is 1
Else
If odd and even both are greater than 0
Otherwise
Driver Code
Function to find the minimum value of X after increment X by K or twice value of X in each of N operations
Iterate over the range [ 1 , N ]
If the value of X is less than equal to K
Otherwise
Return the minimum value of X
Driver Code
Python 3 program for the above approach
Function to find the value of K to minimize the value of maximum absolute difference between adjacent elements
Stores the maximum and minimum among array elements that are adjacent to " - 1"
Traverse the given array arr [ ]
If arr [ i ] is - 1 & arr [ i + 1 ] is not - 1
If arr [ i + 1 ] is - 1 & arr [ i ] is not - 1
If all array element is - 1
Otherwise
Driver Code
Function to find the last element after performing given operations
Length of the array
Increment j until condition is satisfied
In each pair every value is repeating r number of times
Print the result according to the value of k
Driver Code
Given K
Given arr [ ]
Function call
Recursive function tox previous gcd of a and b
Function to find the maximum value of D such that every element in the array can be obtained by performing K + D or K - D
Traverse the array arr [ ]
Update arr [ i ]
Stores GCD of the array
Iterate over the range [ 1 , N ]
Update the value of D
Print the value of D
Driver Code
Function to find the maximum moves that can be performed on a string
Stores 0 s in suffix
Stores 1 s in prefix
Iterate over the characters of the string
Iterate until i is greater than or equal to 0
If N is equal to x + y
Return answer
Driver code
Input
Function call
Function to find the maximum sum of frequencies of the exactly K chosen characters from the string S
Stores the resultant maximum sum
Stores the frequency of array elements
Find the frequency of character
Sort the frequency array in the descending order
Iterate to choose K elements greedily
If the freq [ i ] cards are chosen
K cards have been picked
Return the resultant sum
Driver Code
Python3 program for the above approach
Function to count N - digit numbers having absolute difference between adjacent digits in non - increasing order
If digit = n + 1 , a valid n - digit number has been formed
If the state has already been computed
If the current digit is 1 , then any digit from [ 1 - 9 ] can be placed
If the current digit is 2 , any digit from [ 0 - 9 ] can be placed
For other digits , any digit i can be placed which satisfies abs ( prev1 - i ) <= abs ( prev1 - prev2 )
If absolute difference is less than or equal to diff
Function to count N - digit numbers with absolute difference between adjacent digits in non increasing order
Initialize dp table with - 1
Function Call
Driver code
Function to find all possible numbers that can be obtained by adding A or B to N exactly N times
If number of steps is 0 and only possible number is N
Add A to N and make a recursive call for M - 1 steps
Add B to N and make a recursive call for M - 1 steps .
Driver Code
Given Inputs
Stores all possible numbers
Function call
Print all possible numbers
python 3 program for the above approach
Function to find the maximum sum of array after removing either the contiguous positive or negative elements
Store the total sum of array
Store the maximum contiguous negative sum
Store the sum of current contiguous negative elements
Store the minimum element of array
Traverse the array , arr [ ]
Update the overall sum
Store minimum element of array
If arr [ i ] is positive
Update temp_sum to 0
Add arr [ i ] to temp_sum
Update max_neg
If no negative element in array then remove smallest positive element
Print the required sum
Driver Code
Given Input
Function Call
Python3 implementation of the above approach
Traverse each element of the string
If the current character can be replaced with 'z
Return the modified string
Driver code
Function to count characters from A whose removal makes the strings A and B equal
Stores the index of the longest prefix
Stores the index of the longest suffix
Traverse the B
Traverse the B
If N - M is equal to 1 and Y is less than or equal to X
Print count of characters
Print positions of the characters
Otherwise
Driver Code
Function to find minimum operations required to convert A to B
Store the size of the string
Store the required result
Traverse the string , a
If a [ i ] is equal to b [ i ]
Check if swapping adjacent characters make the same - indexed characters equal or not
Otherwise , flip the current bit
Print the minimum number of operations
Driver Code
Given Input
Function Call
Function to find minimum number of operations required to make sum of all subarrays of size K equal
Stores number of operations
Iterate in the range [ 0 , K - 1 ]
Stores frequency of elements separated by distance K
Stores maximum frequency and corresponding element
Find max frequency element and its frequency
Update the number of operations
Print the result
Driver Code
Given Input
Function Call
python 3 Program for the above approach
Function to calculate the number of pairs satisfying ( m / n = m % n )
Iterate from 1 to sqrt ( x )
Combining the conditions - 1 ) n > k 2 ) n <= y 3 ) n <= ( x / k - 1 )
Driver code
python program for the above approach
Function to count total number of permutation of the first N natural number having the sum of adjacent elements as perfect square
Create an adjacency matrix
bCount elements whose indegree bis 1
bGenerate adjacency matrix
Find the sum of i and j
If sum is perfect square . then move from i to j
Add it in adjacency list of i
If any list is of size 1 , then the indegree is 1
If there is no element whose indegree is 1 , then N such permutations are possible
If there is 1 or 2 elements whose indegree is 1 , then 2 permutations are possible
If there are more than 2 elements whose indegree is 1 , then return 0
Driver Code
Function to construct the lst with exactly K unique adjacent element differences
Stores the resultant array
Stores the left and the right most element of the range
Traverse the array
If k is even , the add left to array and increment the left
If k is odd , the add right to array and decrement the right
Repeat the steps for k - 1 times
Print the resultant lst
Driver Code
Function to find the date after the next half - year
Stores the number of days in the months of a leap year
List of months
Days in half of a year
Index of current month
Starting day
Decrement the value of cnt by 1
Increment cur_date
If cnt is equal to 0 , then break out of the loop
Update cur_month
Update cur_date
Print the resultant date
Driver Code
Function Call
Function to find the largest positive number made up of distinct digits having the sum of its digits as N
If given number is greater than 45 , print - 1
Store the required number and the digit to be considered
Loop until N > 0 and digit > 0
If the current digit is at most N then , add it to number num
Update the value of num
Decrement N by digit
Consider the next lower digit
Add 0 at the end and return the number num
Driver Code
Function to find the smallest number that can be obtained after applying the arithmetic operations mentioned in the string S
Stores the count of multiplication operator in the string
Store the required result
Iterate in the range to create the mask
Checking the number of bits that are set in the mask
Check if the number of bits that are set in the mask is multiplication operation
Storing the elements that is to be added
Apply the multiplications operation first
If sign is ' * ' , then multiply last element of deque with arr [ i ]
append last multiplied element in the deque
If the element is to be added , then add it to the deque
Add all the element of the deque
Minimize the answer with the given sum
Driver Code
Function to find the minimum sum of all the medians of the K sized sorted arrays formed from the given array
Stores the distance between the medians
Stores the number of subsequences required
Stores the resultant sum
Iterate from start and add all the medians
Add the value of arr [ i ] to the variable minsum
Increment i by select the median to get the next median index
Decrement the value of totalArrays by 1
Print the resultant minimum sum
Driver Code
Function to represent S as the sum of K positive integers less than or equal to N
If S can cannot be represented as sum of K integers
If sum of first i natural numbers exceeds S
Insert i into nums [ ]
Insert first K - 1 positive numbers into answer [ ]
Insert the K - th number
Traverse the array answer [ ]
If current element exceeds N
Add the extra value to the previous element
Reduce current element to N
Printing the K numbers
Driver Code
Python3 program for the above approach
Function to minimize the maximum element present in an N - length array having sum of elements divisible by K
Return the ceil value of ( K / N )
Driver Code
Function to find the minimum number of elements required to be removed from the ends of an array to obtain a sum K
Number of elements removed from the left and right ends of the array
Sum of left and right subarrays
No element is taken from left initially
Start taking elements from right side
( left + 1 ) : Count of elements removed from the left ( N - right ) : Count of elements removed from the right
If sum is greater than K
If it is not possible to obtain sum K
Driver Code
Given Array
Given target sum
Function to find the smallest array that can be removed from the ends of an array to obtain sum K
Sum of complete array
If given number is greater than sum of the array
If number is equal to the sum of array
tar is sum of middle subarray
Find the longest subarray with sum equal to tar
If there is no subarray with sum equal to tar
Driver Code
Given Array
Given target sum
Function to return the minimum possible value of ( i * j ) % N
Stores the minimum remainder
Iterate from L to R
Iterate from L to R
Print the minimum value of remainder
If R - L >= N
Driver Code
Function to count numbers whose GCD with N is the number itself
Stores the count of factors of N
Iterate over the range [ 1 , sqrt ( N ) ]
If i is divisible by i
Increment count
Avoid counting the same factor twice
Return the resultant count
Driver Code
Function to find the maximum size of ropes having frequency at least K by cutting the given ropes
Stores the left and the right boundaries
Stores the maximum length of rope possible
Iterate while low is less than or equal to high
Stores the mid value of the range [ low , high ]
Stores the count of ropes of length mid
Traverse the array arr [ ]
If count is at least K
Assign mid to ans
Update the value of low
Otherwise , update the value of high
Return the value of ans
Driver Code
Function to find the quadratic equation whose roots are K times the roots of the given equation
Prquadratic equation
Driver Code
Function to find the maximum value of the given expression possible for any pair of co - ordinates
Stores the differences between pairs
Stores the maximum value
Traverse the array arr [ ] [ ]
While pq is not empty and difference between point [ 0 ] and pq . top ( ) [ 1 ] > K
Removes the top element
If pq is not empty
Update the value res
Push pair { point [ 1 ] - point [ 0 ] , point [ 0 ] } in pq
Prthe result
Driver Code
Function to find the minimum number of increments of array elements required to make difference between all pairwise adjacent elements even
Stores the count of odd and even elements
Traverse the array
Increment odd count
Increment even count
Return the minimum number of operations required
Driver Code
Function to calculate GCD of the two numbers a and b
Base Case
Recursively find the GCD
Function to count the numbers up to C that can be reduced to 0 by adding or subtracting A or B
Stores GCD of A and B
Stores the count of multiples of g in the range ( 0 , C ]
Print the result
Driver code
Function to find the last element remaining in the array after performing the given operations
Checks if traversal is from left to right or vice versa
Store the elements currently present in the array
Store the distance between 2 consecutive array elements
Store the first element of the remaining array
Iterate while elements are greater than 1
If left to right turn
Update head
Otherwise , check if the remaining elements are odd
If true , update head
Eleminate half of the array elements
Double the steps after each turn
Alter the turn
Print the remaining element
Driver Code
Function to calculate the maximum and minimum number of candies a boy can possess
All candies will be given to one boy
All the candies will be given to 1 boy
Give K candies to 1 st boy initially
Count remaining candies
If the last candy of remaining candies is given to the last boy , i . e Nth boy
Increase minimum count
Driver code
Function to find the length of the smallest subarray to be removed to make remaining array elements consecutive
Store the ending index of the longest prefix consecutive array
Traverse the array to find the longest prefix consecutive sequence
A [ 0. . . left_index ] is the prefix consecutive sequence
Store the starting index of the longest suffix consecutive sequence
Traverse the array to find the longest suffix consecutive sequence
A [ right_index ... N - 1 ] is the consecutive sequence
Store the smallest subarray required to be removed
Check if subarray from the middle can be removed
Update the right index s . t . A [ 0 , N - 1 ] is consecutive
If updated_right < N , then update the minimumLength
Print the required result
Driver Code
Function to check if string S contains any character with frequency >= 3 or not
Stores frequency of characters
Iterate over the string
Update the frequency of current character
Iterate over the hash array
If any character has frequency >= 3
Otherwise
Driver Code
Function to find the minimum length of the string after removing the same characters from the end and front of the two strings after dividing into 2 substrings
Initialize two pointers
Traverse the string S
Current char on left pointer
Shift i towards right
Shift j towards left
Return the minimum possible length of string
Driver Code
Function to calculate x ^ y modulo 1000000007 in O ( log y )
Stores the value of x ^ y
Update x if it exceeds mod
If x is divisible by mod
If y is odd , then multiply x with result
Divide y by 2
Update the value of x
Return the value of x ^ y
Function to count the number of of BSTs of height H consisting of ( H + 1 ) nodes
Driver Code
Function to check if any pair of consecutive 1 s can be separated by at most M 0 s by circular rotation of string S
Stores the indices of all 1 s
Store the number of pairs separated by at least M 0 s
Traverse the string
Store the current index
Traverse the array containing indices
If the number of 0 s > M , then increment cnt by 1
Increment cnt
Check if at least M '0' s lie between the first and last occurrence of '1
Increment cnt
If the value of cnt <= 1 , then rotation of string is possible
Otherwise
Driver Code
Function to find the number obtained by reducing sum of digits of 2 ^ N into a single digit
Stores answers for different values of N
Driver Code
Function to check if two given piles can be emptied by repeatedly removing 2 coins from a pile and 1 coin from the other
If maximum of A & B exceeds the twice of minimum of A & B
Not possible to empty the piles
If sum of both the coins is divisible by 3 , then print Yes
Otherwise , print " No "
Driver Code
Function to find the maximum index the pointer can reach
Initialize two pointers
Stores number of steps
Stores sum of first N natural numbers
Increment i with j
Increment j with 1
Increment count
If i points to B
Break
Print the pointer index
Driver Code
Given value of N & B
Function call to find maximum index the pointer can reach
Function to construct longest array with product K such that each element is divisible by its previous element
Stores the prime factors of K
Stores the power to which primefactor i is raised
Sort prime factors in descending order
Stores the final array
Multiply the last element by K
Print the constructed array
Driver Code
Function to print minimum steps required to shift all 1 s to a single index in a binary array
Size of array
Used to store cumulative sum
Initialize count
Traverse the array in forward direction
Steps needed to store all previous ones to ith index
Count number of 1 s present till i - th index
Initialize count
Traverse the array in backward direction
Steps needed to store all 1 s to the right of i at current index
Count number of 1 s present after i - th index
Print the number of steps required
Driver Code
Function to find the minimum number K - length subarrays required to be flipped to make all array elements 1
Stores whether an element can be flipped or not
Store the required number of flips
Traverse the array , A [ ]
Find the prefix sum for the indices i > 0
Check if the current element is required to be flipped
If subarray of size K is not possible , then print - 1 and return
Increment ans by 1
Change the current state of the element
Decrement isFlipped [ i + K ]
If subarray of size K is not possible , then print - 1 and return
Increment ans by 1
Change the current state of the element
Decrement isFlipped [ i + K ]
Print the result
Driver Code
Function to c sum of calculate sum of scores after n days
Store the required sum
Store the score on previous monday and current day respectively
Iterate over the range [ 1 , n ]
If the current day is monday
Increment score of prev_monday by 1
Update score of current day
Add score of current day and increment score for next day
Print the result
Driver Code
Function to calculate sum of scores after n days
Store the number of full weeks
Stores the remaining days in the last week
Store the sum of scores in the first F full weeks
Store the sum of scores in the last week
Print the result
Driver Code
Function to print the largest number upto N whose modulus with X is same as Y % X
Stores the required number
Update num as the result
Return the resultant number
Driver Code
Function to calculate area of a triangle
Return the resultant area
Function to check if a point lies inside a triangle or not
Calculate area of triangle ABC
Calculate area of triangle formed by connecting B , C , point
Calculate area of triangle formed by connecting A , C , point
Calculate area of triangle formed by connecting A , B , point
Check if the sum of the areas of above three triangles the same as ABC
Function to count the number of points lying inside a triangle & rectangle
Stores the coordinates of the vertices of the triangles
Stores the number of points lying inside the triangle and rectangle
Traverse the array of points
Stores whether the current point lies inside triangle1 or not
Stores whether the current point lies inside triangle2 or not
Stores whether the current point lies inside triangle3 or not
Stores whether the current point lies inside triangle4 or not
Stores whether the current point lies inside given triangle or not
If current point lies inside given triangle as well as inside any of the four obtained triangles
Print the count of points
Driver Code
Function to calculate GCD of two integers
Function to calculate GCD of a given array
Utility function to check for all the possible combinations
If an N - length sequence is obtained
If GCD of the sequence is K
Otherwise
Add an element from the first array
Recursively proceed further
If combination satisfies the necessary condition
Remove the element from the combination
Add an element from the second array
Recursive proceed further
If combination satisfies the necessary condition
Remove the element from the combination
Function to check all the possible combinations
Stores the subsequence
If GCD is not equal to K for any combination
Given arrays
Given value of K
Function call to generate the required subsequence
Function to count minimum number of operations required to obtain an increasing array from given array A [ ]
Store the required result
Traverse the array A [ ]
If the current element is not in its correct position
Check if it is present at index i - 1
Check if it is present at index i - 2
Otherwise , print - 1 ( Since A [ i ] can not be swapped more than twice )
Print the result
Driver Code
Given array
Store the size of the array
Function to count the occurrences of X in the generated square matrix
Store the required result
Iterate over the range [ 1 , N ]
Check if x is a multiple of i or not
Check if the other multiple exists in the range or not
Print the result
Driver Code
Function to reduce all array elements to zero
If size of array is 1
First operation
2 nd Operation
3 rd Operation
Otherwise
1 st Operation
2 nd Operation
3 rd Operation
Driver Code
Input
Function call to make all array elements equal to 0
Python 3 implementation of the above approach
Function to calculate count of distinct prime factors of a number
Sieve of Eratosthenes
Function to count pairs with even product of distinct prime factors
Stores count of distinct prime factors
Stores the count of numbers with even prime factors in B [ ]
Stores the count of numbers with odd prime factors in B [ ]
Even Product Pairs
Traverse the array B [ ]
Since , product has to be positive i . e > 0
If count of prime factors is odd
Increment oddCount by 1
Increment evenCount by 1
Since , product has to be positive i . e > 0
If count of prime factors is odd
odd * even = even
If count of prime factors is even
even * odd = even even * even = even
Driver Code
Function to find the length of longest subarray having sum K
Stores the index of the prefix sum
Traverse the given array
Update sum
If the subarray starts from index 0
Add the current prefix sum with index if it is not present in the map um
Check if sum - K is present in Map um or not
Update the maxLength
Return the required maximum length
Function to find the minimum removal of array elements required to reduce K to 0
Stores the sum of the array
Traverse the array arr [ ]
Update sum of the array
Find maxLen
If the subarray with sum doesn 't exist
Otherwise , print the required maximum length
Driver Code
Function to count the minimum number of digits required to be removed to make a given number divisible by 4
Store the size of the string
Stores the required result
Check for every pair of digits if the number formed by them is divisible by 4 or not
Store s [ i ] in a variable
If it is divisible by 2
Store the number formed by s [ j ] and s [ i ]
Check if it is divisible by 4
Store the number of digits required to be deleted
Update ans
If value of ans is unchanged , then check if any s [ i ] is divisible by 4
If true , update ans to n - 1
Prthe result
Driver Code
Function to place the parenthesis such that the result is maximized
Store the required string
Add the first integer to string
If the size of array is 1
If the size of array is 2 , print the 1 st integer followed by / operator followed by the next integer
If size of array is exceeds two , pr1st integer concatenated with operators ' / ' , ' ( ' and next integers with the operator '/
Add parenthesis at the end
Prthe final expression
Driver Code
Function to find count of distinct pairs having even LCM and odd LCM
Store the total number of pairs
Stores the count of odd numbers in the array
Traverse the array arr [ ]
Update the count of pairs with odd LCM
Print the count of required pairs
Driver Code
Function to print the value to be added to N to obtain sum of first M multiples of K
Store the sum of the first M multiples of K
Store the value to be added to obtain N
Input
Prcount of even and odd numbers of XOR value from L to R
Store the number of elements between L and R
Count of even XOR values
If L is odd and range % 4 = 3
Increment even by 1
If L is even and range % 4 != 0
Increment even by 1
Prthe answer
Driver Code
Function to count the number of swaps required to make the sum of ASCII values of the characters of both strings odd
Initialize alphabets with value
Initialize values for each alphabet
Size of the string
Sum of S
Sum of T
Stores whether there is any index i such that S [ i ] and T [ i ] have different parities
Traverse the strings
Update sum1 and sum2
If ord ( S [ i ] ) anord ( ' a ) rd ( T [ i ] ) ▁ haord ( ' a ) different parities
If sum1 and sum2 are both odd
If sum1 and sum2 are both even
If exists pr1
Otherwise
If sum1 and sum2 are of different parities
Driver Code
Function Call
Python3 program for the above approach
Function to check if a number is a prime or not
Function to count the number of valid prime triplets
Stores the count of prime triplets
Iterate from 2 to N and check for each p , whether p & ( p - 2 ) are prime or not
Prthe count obtained
Driver Code
Function to count the number of pairs ( i , j ) their Bitwise OR is greater than Bitwise AND
Store the required answer
Check for all possible pairs
If the condition satisfy then increment count by 1
Prthe answer
Driver Code
Function Call
Function to find the count of maximum consumable candies
Store the count of total candies
Stores the count of maximum consumable candies
Checks if it is safe to counsume all candies
Traverse the array arr
If A [ i ] + M is greater than B [ i ]
Mark all_safe as false
Update ans
Update ans
Increment total by A [ i ]
If all_safe is true
Otherwise ,
Driver Code
Function call to find maximum consumable candies
Function to check if two arrays can be made equal or not by swapping pairs of only one of the arrays
Stores elements required to be replaced
To check if the arrays can be made equal or not
Traverse the array
If array elements are not equal
Increment count by 1
Decrement count by 1
If flag is true and count is 0 , pr " Yes " . Otherwise " No "
Driver Code
Given arrays
Size of the array
Function to construct an array with sum of each subarray divisible by K
Traverse a loop from 1 to N
Pri - th multiple of K
Driver Code
Fun dtion to print the required sequence
Stores count of even and odd elements
Stores sum of even and odd elements
Print N / 2 even elements
Print N / 2 - 1 odd elements
Print final odd element
Driver Code
Function to print the last remaining array element after after performing given operations
If size of the array is 1
Check for the condition
If condition is not satisfied
Driver Code
Function Call
Python3 program for the above approach
Function to find minimum count of operations required to make A [ i ] multiple of B [ i ] by incrementing prefix subarray
Stores minimum count of operations required to make A [ i ] multiple of B [ i ] by incrementing prefix subarray
Stores the carry
Stores minimum difference of correspoinding element in prefix subarray
Traverse the array
Stores the closest greater or equal number to A [ i ] which is a multiple of B [ i ]
Stores minimum difference
Update totalOperations
Update carry
Driver Code
Input arrays A [ ] and B [ ]
Length of arrays
Function to find the minimum deviation of the array A [ ]
Store all array elements in sorted order
Odd number are transformed using 2 nd operation
( Maximum - Minimum )
Check if the size of set is > 0 and the maximum element is divisible by 2
Maximum element of the set
Erase the maximum element
Using operation 1
( Maximum - Minimum )
Print the Minimum Deviation Obtained
Driver Code
Function Call to find Minimum Deviation of A [ ]
Function to return the maximum possible value that can be obtained from the given integer by performing given operations
Convert to equivalent binary representation
Stores binary representation of the maximized value
Store the count of 0 ' s ▁ and ▁ 1' s
Stores the total Number of Bits
If current bit is set
Increment Count1
Increment Count0
Shift all set bits to left to maximize the value
Shift all unset bits to right to maximize the value
Return the maximized value
Driver Code
Given "Input
Function call to find the Maximum Possible Number
Function to find minimum count of digits required to be remove to make N odd and the sum of digits of N even
Stores count of even digits
Stores count of odd digits
Iterate over the digits of N
If current digit is even
Update even
Otherwise
Update odd
Base conditions
Stores count of digits required to be removed to make N odd and the sum of digits of N even
Iterate over the digits of N
If current digit is even
Update ans
Otherwise ,
Update ans
If count of odd digits is odd
Update ans
Finally print the ans
Driver code
Input String
Function call
Function to find the player who wins the game
Stores total count of 0 s in the string
Stores count of consecutive 1 s
Stores Nim - Sum on count of consecutive 1 s
Stores length of the string
Traverse the string
If the current character is 1
Update cntConOne
Update nimSum
Update cntConOne
Update cntZero
Update nimSum
If countZero is an even number
nimSum is not 0
If nimSum is zero
Driver Code
Function to place first N natural numbers in an array such that none of the values are equal to its indices
Stores the required array
Place N at the first position
Iterate the range [ 1 , N )
Append elements to the sequence
Print the sequence
Driver Code
Function to calculate the maximum possible value at index K
Stores the sum of elements in the left and right of index K
Stores the maximum possible value at index K
Prthe answer
Driver Code
Given N , K & M
Function to find the farthest cell distance from the given cell
From cell ( N , M )
From Cell ( 1 , 1 )
From cell ( N , 1 )
From cell ( 1 , M )
Finding out maximum
Prthe answer
Driver Code
Function to maximize value at every array index by performing given operations
Traverse the array in reverse
If the current index is a valid index
Prthe array
Driver Code
Given array
Size of the array
Python3 program for the above approach
Function to find the path from root to N
Stores the number of nodes at ( i + 1 ) - th level
Stores the number of nodes
Stores if the current level is even or odd
If level is odd
If level is even
If level with node N is reached
Push into vector
Compute prefix sums of count of nodes in each level
Stores the level in which node N s present
Store path
Insert temp into path
Print path
Driver Code
Function Call
Python3 program for the above approach
Function to construct an array with given conditions
Traverse the array arr [ ]
Stores closest power of 2 less than or equal to arr [ i ]
Stores R into brr [ i ]
Prarray elements
Driver Code
Given array
Size of the array
Function Call
Function to the find element at ( i , j ) index
Driver Code
Function Call
Function to find minimum count of operations required to convert all array elements to zero by replacing subsequence of equal elements to 0
Store distinct elements present in the array
Traverse the array
If arr [ i ] is already present in the Set or arr [ i ] is equal to 0
Otherwise , increment ans by 1 and insert current element
Given array
Size of the given array
Python3 program for the above approach
Function to find the GCD of two numbers a and b
Function to check if it is possible to split the array into equal length subsequences such that all elements in the subsequence are equal
Store frequencies of array elements
Traverse the array
Update frequency of arr [ i ]
Store the GCD of frequencies of all array elements
Traverse the map
Update GCD
If the GCD is greater than 1 , print YES otherwise print NO
Driver Code
Given array
Store the size of the array
Python 3 program to implement the above approach
Function to check if all array elements are equal or not
Traverse the array
If all array elements are not equal
Function to find minimum count of operation to make all the array elements equal to 1
Stores largest element of the array
Check if a number is a power of 2 or not
If Max is a power of 2 and all array elements are equal
Driver Code
Function to obtain the largest number not exceeding num which does not contain any digits present in S
Stores digits of S
Traverse the string S
Set occurrence as true
Traverse the string n
All digits of num are not present in string s
Largest Digit not present in the string s
Set all digits from positions in + 1 to n - 1 as LargestDig
Counting leading zeroes
Removing leading zeroes
If the string becomes null
Return the largest number
Driver code
Function to generate an array whose XOR with same - indexed elements of the given array is always a prime
Traverse the array
If current array element is 2
Print its XOR with 3
Otherwise
Print its XOR with 2
Driver Code
Given array
Size of the array
Prints the required array
Function to generate the required array
Stores the array
Base case
Iterate over the indices
If current index is even
Otherwise
Function to find and return the maximum array element
If n is 0
If n is 1
Generates the required array
Return maximum element of Arr
Driver Code
Function to construct the simple and connected graph such that the distance between exactly K pairs of vertices is 2
Stores maximum possible count of edges in a graph
Base case
Stores edges of a graph
Connect all vertices of pairs ( i , j )
Print first ( ( N - 1 ) + Max - K ) elements of edges [ ]
Driver code
Python3 program to implement the above approach
Function to find the minimum count of steps required to visit all the corners of the grid
Stores corner of the grid
Stores minimum count of steps required to visit the first corner of the grid
Checking for leftmost upper corner
Checking for leftmost down corner
Checking for rightmost upper corner
Checking for rightmost down corner
Stores minimum count of steps required to visit remaining three corners of the grid
Driver Code
Function to find minimum count of array elements required to be replaced such that count of distinct elements is at most K
Store the frequency of each distinct element of the array
Traverse the array
Update frequency of arr [ i ]
Store frequency of each distinct element of the array
Traverse the map
Stores key of the map
Insert mp [ i ] into Freq [ ]
Sort Freq [ ] in descending order
Stores size of Freq [ ]
If len is less than or equal to K
Stores minimum count of array elements required to be replaced such that count of distinct elements is at most K
Iterate over the range [ K , len ]
Update cntMin
Driver code
Function to check if the sum can be made 0 or not
Stores sum of array elements
Traverse the array
Driver Code
Given array arr [ ]
Function to count total number of 1 s in array by performing given operations
Stores count of 1 s in the array by performing the operations
Iterate over the range [ 1 , N ]
Flip all array elements whose index is multiple of i
Update arr [ i ]
Traverse the array
If current element is 1
Update cntOnes
Driver Code
Function to count total number of 1 s in array by performing the given operations
Stores count of 1 s in the array by performing the operations
Update cntOnes
Driver Code
Function to count the knights that are attacking the pawn in an M * M board
Stores count of knights that are attacking the pawn
Traverse the knights array
Stores absolute difference of X co - ordinate of i - th knight and pawn
Stores absolute difference of Y co - ordinate of i - th knight and pawn
If X is 1 and Y is 2 or X is 2 and Y is 1
Update cntKnights
Driver code
Stores total count of knights
Function to find the winner of the game by removing array elements whose GCD is 1
mp [ i ] : Stores count of array elements whose prime factor is i
Traverse the array
Calculate the prime factors of arr [ i ]
If arr [ i ] is divisible by j
Update mp [ j ]
Update arr [ i ]
If arr [ i ] exceeds 1
Stores maximum value present in the Map
Traverse the map
Update maxCnt
If n is an even number
If maxCnt is greater than or equal to n - 1
Player 1 wins
Player 2 wins
If maxCnt equal to n
Player 1 wins
Player 2 wins
Driver Code
Function to find the maximum sum of K even multiples of 5 in the range [ L , R ]
Store the total number of even multiples of 5 in the range [ L , R ]
Check if K > N
If true , print - 1 and return
Otherwise , divide R by 10
Store the sum using the formula
Print the sum
Driver Code
Given L , R and K
Function Call
Function to count the minimum swaps of same - indexed elements from arrays arr1 and arr2 required to make the sum of both the arrays even
Store the sum of elements of the array arr1 and arr2 respectively
Store the array sum of both the arrays
If both sumArr1 and sumArr2 are even , pr0 and return
If both sumArr1 and sumArr2 are odd and check for a pair with sum odd sum
Stores if a pair with odd sum exists or not
Traverse the array
If a pair exists with odd sum , set flag = 1
Print the answer and return
For all other cases , pr - 1
Driver code
Function Call
Function to find the total of the seats booked in each of the flights
Stores the resultant sequence
Traverse the array
Store the first booked flight
Store the last booked flight
Store the total number of seats booked in flights [ l , r ]
Add K to the flight L
Subtract K from flight number R + 1
Find the prefix sum of the array
Print total number of seats booked in each flight
Driver Code
Given list of bookings
Function Call
Function to calculate Bitwise XOR of odd numbers in the range [ 1 , N ]
N & 3 is equivalent to n % 4
If n is multiple of 4
If n % 4 gives remainder 1
If n % 4 gives remainder 2
If n % 4 gives remainder 3
Function to find the XOR of odd numbers less than or equal to N
If number is even
Prthe answer
If number is odd
Prthe answer
Driver Code
Function Call
Function to find the smallest number greater than or equal to N such that it is divisible by its non - zero digits
Iterate in range [ N , N + 2520 ]
To check if the current number satisfies the given condition
Store the number in a temporary variable
Loop until temp > 0
Check only for non zero digits
Extract the current digit
If number is divisible by current digit or not
Otherwise , set possible to 0
Break out of the loop
Divide by 10
Driver Code
Function Call
Function to print the path from node to root
Iterate until root is reached
Print the value of the current node
Move to parent of the current node
Driver Code
Function to find the smallest number whose sum of digits is N and each digit occurring at most K times
Maximum sum possible using each digit at most K times
Append smallest number into the resultant string
Iterate over the range [ 9 , 1 ]
If the count of the digit is K , then update count and check for the next digit
If N is greater than current digit
Subtract i from N
Insert i as a digit
Insert remaining N as a digit
Increment count
Reverse the string
Print the answer
Driver Code
Function Call
Function to find the sum of values removed to make all array elements equal
Stores the minimum of the array
Stores required sum
Traverse the array
Add the value subtracted from the current element
Return the total sum
Driver Code
Function Call
Function to find smallest positive number made up of non - repeating digits whose sum of its digits is equal to n
No such number exists
Stores the required answer
Store the digit at unit 's place
Iterate until n > digit
Push digit at the start of res
Decrement n by digit
Decrement digit by 1
Push the remaining number as the starting digit
Print the required number
Driver Code
Function Call
Python3 program for the above approach
Function to count even pairs
Stores count of pairs having even sum
Stores count of even numbers up to N
Stores count of odd numbers up to N
Stores count of even numbers up to M
Stores count of odd numbers up to M
Return the count
Driver Code
Function to generate a string of length N having longest palindromic substring of length K
Fill first K characters with 'a
Stores a non - palindromic sequence to be repeated for N - k slots
PrN - k remaining characters
Driver Code
Given N and K
Function to find the last removed character from the string
Stores length of the string
Base Case :
If the second last character is '0
If the second last character is '1
Driver Code
Function to find the triplet with given Bitwise XOR and Bitwise AND values of all possible pairs of the triplet
Stores values of a triplet
Stores a + b
Stores a + c
Stores b + c
Calculate aSUMb
Calculate aSUMc
Calculate bSUMc
Calculate a
Calculate b
Calculate c
Pra
Prb
Prc
Driver Code
Function to find N integers having Bitwise XOR equal to K
Base Cases
Assign values to P and Q
Stores Bitwise XOR of the first ( N - 3 ) elements
Print the first N - 3 elements
Calculate Bitwise XOR of first ( N - 3 ) elements
Driver Code
Function Call
Function to find the number after converting 1 s from end to 0 s
Count of 1 s
AND operation of N and 1
Left shift N by count
Driver Code
Function Call
Function to find the number after converting 1 s from end to 0 s
Return the logical AND of N and ( N + 1 )
Driver Code
Function Call
Function to store all substrings of S
Stores the substrings of S
Pick start point in outer loop and lengths of different strings for a given starting point
Return the array containing substrings of S
Function to check if a is present in another string
Check if target is in the str or not
Function to count the subof S containing T in it as substring
Store all substrings of S in the array v [ ]
Store required count of substrings
Iterate through all the substrings of S
If T is present in the current substring , then increment the ans
Print the answer
Driver code
Function Call
Function to find the minimum flip of subarrays required at alternate index to make binary arrays equals
Stores count of total operations
Stores count of consecutive unequal elements
Loop to run on odd positions
Incrementing the global counter
Change count to 0
If all last elements are equal
Loop to run on even positions
Incrementing the global counter
Change count to 0
Print minimum operations
Driver Code
Function Call
Function to count minimum subarray reversal operations required to make array alternating
Stores minimum count of operations required to make array alternating
Traverse the array
If arr [ i ] is greater than arr [ i + 1 ]
Update cntOp
Driver Code
Function to check if array arr [ ] can be obtained from first N natural numbers or not
Driver Code
Function Call
Function to construct an arrary with adjacent elements as co - prime numbers
Iterate over the range [ 1 , N ]
Print i
Driver Code
Function to find the minimum cost to convert a to b
Stores the frequency of string a and b respectively
Store the frequencies of characters in a
Store the frequencies of characters in b
Minimum cost to convert A to B
Find the minimum cost
Print the minimum cost
Driver Code
Function Call
Function to find the minimum cost required to place all elements in the same position
Stores the count of even and odd elements
Traverse the array arr [ ]
Count even elements
Count odd elements
Print the minimum count
Driver Code
Given array
Function Call
Function to find the maximum sum by alternating the signs of adjacent elements of the array
Stores count of negative elements in the array
Stores maximum sum by alternating the signs of adjacent elements
Stores smallest absolute value of array elements
Stores sum of absolute value of array elements
Traverse the array
If arr [ i ] is a negative number
Update cntNeg
Update sum
Update SmValue
Update MaxAltSum
If cntNeg is an odd number
Update MaxAltSum
Driver Code
Function to generate a new array with product of same indexed elements with arr [ ] equal to 0
Stores sum of same indexed array elements of arr and new array
Traverse the array
If i is an even number
Insert arr [ i + 1 ] into the new array newArr [ ]
Insert - arr [ i - 1 ] into the new array newArr [ ]
Print new array elements
Driver code
Python3 program for the above approach
Function to construct bitonic sequence of length N from integers in the range [ L , R ]
If sequence is not possible
Store the resultant list
If size of deque < n
Add elements from start
Print the stored in the list
Driver Code
Function Call
Function to count the number of substrings of equal length which differ by a single character
Stores the count of pairs of substrings
Traverse the string s
Traverse the string t
Different character
Increment the answer
Count equal substrings from next index
Increment the count
Increment q
Check the condition
Increment k
Add q to count
Decrement z
Return the final count
Driver Code
Function Call
Function to find the minimum count of flips required to make all 1 s on the right and all 0 s on the left of the given string
Stores length of str
Store count of 0 s in the string
Traverse the string
If current character is 0
Update zeros
If count of 0 s in the string is 0 or n
Store minimum count of flips required to make all 0 s on the left and all 1 s on the right
Stores count of 1 s on the left of each index
Stores count of flips required to make all 0 s on the left and all 1 s on the right
Traverse the string
If current character is 1
Update currOnes
Update flips
Update the minimum count of flips
Driver Code
Function to find the length of the longest non - decreasing array that can be generated
Stores the length of the longest non - decreasing array that can be generated from the array
Stores index of start pointer
Stores index of end pointer
Stores previously inserted element into the new array
Traverse the array
If A [ start ] is less than or equal to A [ end ]
If no element inserted into the newly generated array
Update prev
Update res
Update start
If A [ start ] is greater than or equal to prev
Update res
Update prev
Update start
If A [ end ] is greater than or equal to prev
Update res
Update prev
Update end
If A [ end ] is greater than A [ start ]
If no element inserted into the newly generated array
Update prev
Update res
Update end
If A [ end ] is greater than or equal to prev
Update res
Update prev
Update end
If A [ start ] is greater than or equal to prev
Update res
Update prev
Update start
Driver Code
Function call
Function to print all pairs whose sum of Bitwise OR and AND is N
Iterate from i = 0 to N
Print pairs ( i , N - i )
Driver code
Function to find the GCD of 2 numbers
Base Case
Find the GCD recursively
Function to find the minimum partition index K s . t . product of both subarrays around that partition are co - prime
Stores the prefix and suffix array product
Update the prefix array
Update the suffix array
Iterate the given array
Check if prefix [ k ] and suffix [ k + 1 ] are co - prime
If no index for partition exists , then return - 1
Driver Code
Function call
Function to count reversals to separate elements with same parity
Traverse the given array
Count size of subarray having integers with same parity only
Otherwise
Reversals required is equal to one less than subarray size
Return the total reversals
Function to print the array elements
Function to count the minimum reversals required to make make sum of all adjacent elements odd
Stores operations required for separating adjacent odd elements
Stores operations required for separating adjacent even elements
Maximum of two is the return
Driver Code
Given array arr [ ]
Size of array
Function Call
Python3 program to implement the above approach
Function to find all prime numbers in the range [ 1 , N ]
isPrime [ i ] : Stores if i is a prime number or not
Calculate all prime numbers up to Max using Sieve of Eratosthenes
If P is a prime number
Set all multiple of P as non - prime
Update isPrime
Function to count pairs of prime numbers in the range [ 1 , N ] whose difference is prime
Function to count pairs of prime numbers whose difference is also a prime number
isPrime [ i ] : Stores if i is a prime number or not
Iterate over the range [ 2 , N ]
If i and i - 2 is a prime number
Update cntPairs
Driver Code
Function that finds the length of longest subsequence having different adjacent elements
Stores the length of the longest subsequence
Traverse the array
If previous and current element are not same
Increment the count
Print the maximum length
Driver Code
Size of Array
Function Call
Python3 program for the above approach
Function to find all substrings whose first character occurs maximum number of times
Stores frequency of characters
Stores max frequency of character
Updates frequency of characters
Update maxfreq
Character that occures maximum number of times
Update the maximum frequency character
Stores all count of substrings
Traverse over string
Get the current character
Update count of substrings
Return the count of all valid substrings
Driver Code
Function Call
Function to print the minimum sum of values assigned to each element of the array as per given conditions
Initialize vectors with value 1
Traverse from left to right
Update if ans [ i ] > ans [ i - 1 ]
Traverse from right to left
Update as ans [ i ] > ans [ i + 1 ] if arr [ i ] > arr [ i + 1 ]
Find the minimum sum
Print the sum
Driver Code
Given array arr [ ]
Function Call
Function to find maximum sum of weights of binary string after at most K flips
Stores lengths of substrings of the form 1. . 00. . 1 s
Stores the index of last 1 encountered in the string
Stores the index of first 1 encountered
Stores lengths of all substrings having of 0 s enclosed by 1 s at both ends
Traverse the string
If character is 0
If character is 1 First Priority
Second Priority
Add according to the first priority
Stores length of the shortest substring of 0 s
Convert shortest substrings of 0 s to 1 s
Add according to the first priority
Add according to the third priority
If more 0 s can be made into 1 , then check for 0 s at ends
Update the ans
If K is non - zero , then flip 0 s at the beginning
Return the final weights
Driver Code
Given string str
Given K flips
Function Call
Python3 program for the above approach
Function to find minimum steps to make the empty
Stores the modified string
Size of string
Removing substring of same character from modified string
Print the minimum steps required
Driver Code
Given S
Function Call
Function to count pairs in an array whose bitwise AND equal to bitwise OR
Store count of pairs whose bitwise AND equal to bitwise OR
Stores frequency of distinct elements of array
Traverse the array
Increment the frequency of arr [ i ]
Traverse map
Driver Code
Function to evaluate minimum number of operation required to convert the matrix to a palindrome matrix
Variable to store number of operations required
Iterate over the first quadrant of the matrix
Store positions of all four values from four quadrants
Store the values having unique indexes
Largest value in the values vector
Evaluate minimum increments required to make all vector elements equal
Print the answer
Driver Code
Function Call
Function to find the minimum number operations required to reduce N to 1
Stores count of powers of 2 and 5
Calculating the primefactors 2
Calculating the primefactors 5
If n is 1 and cnt2 <= cnt5
Return the minimum operations
Otherwise , n can 't be reduced
Driver Code
Given Number N
Function Call
Function to check if a permutation of first N natural numbers exist with Bitwise AND of adjacent elements not equal to 0
If n is a power of 2
Driver Code
Function to find the minimum operations required to make array elements equal to K
Stores minimum count of operations
Traverse the given array
If K is greater than arr [ i ]
If ( K - arr [ i ] ) is even
Update cntOpe
Update cntOpe
If K is less than arr [ i ]
If ( arr [ i ] - K ) is even
Update cntOpe
Update cntOpe
Driver Code
Function to rearrange the array B [ ] such that A [ i ] ^ B [ i ] is same for each element
Store frequency of elements
Stores xor value
Taking xor of all the values of both arrays
Store frequency of B [ ]
Find the array B [ ] after rearrangement
If the updated value is present then decrement its frequency
Otherwise return empty vector
Utility function to rearrange the array B [ ] such that A [ i ] ^ B [ i ] is same for each element
Store rearranged array B
If rearrangement possible
Otherwise return - 1
Driver Code
Given vector A
Given vector B
Size of the vector
Function Call
Function to find the Binomial Coefficient C ( n , r )
Stores the value C ( n , r )
Update C ( n , r ) = C ( n , n - r )
Find C ( n , r ) iteratively
Return the final value
Function to find number of sequence whose prefix sum at each index is always non - negative
Find n
Value of C ( 2 n , n )
Catalan number
Print the answer
Driver Code
Given M and X
Function Call
Function to return the gcd of a & b
Base Case
Recursively calculate GCD
Function to print the Bitwise XOR of elements of arr [ ] if gcd ( arr [ i ] , M ) is 1
Initialize xor
Traversing the array
GCD of M and arr [ i ]
If GCD is 1 , update xor
Print xor
Drive Code
Given array arr [ ]
Given number M
Size of the array
Function Call
Function to print the number of cells only visited by the queen
Find all the moves
Find all moves for x + 1 , y + 1
Find all moves for x - 1 , y - 1
Find all moves for x - 1 , y + 1
Find all moves for x + 1 , y - 1
Find all squares visited by King x + 1 , in same row
x - 1 , in same row
y + 1 , in same column
y - 1 , in same column
Return answer
Driver Code
Dimension of Board
Position of Cell
Function Call
Function to find the nearest smaller number satisfying the condition
Driver Code
Function to get the count of elements that satisfy the given condition .
Stores count of elements that satisfy the condition
Traverse the given array .
If square of current element is equal to 1
Driver Code
Function to get the value of pow ( K , M )
Stores value of pow ( K , M )
Calculate value of pow ( K , N )
If N is odd , update res
Update M to M / 2
Update K
Function to print total ways to split the array that satisfies the given condition
Stores total ways that satisfies the given condition
Stores count of distinct elements in the given arr
Store distinct elements of the given array
Traverse the given array
Insert current element into set st .
Update M
Update cntways
Driver Code
Python3 program for the above approach
Function to find the minimum product of 1 to N - 1 after performing the given operations
Initialize ans with 1
Multiply ans with N - 2 ( ( N - 4 ) / 2 ) times
Multiply ans with N - 1 and N - 2 once
Print ans
Driver Code
Given number N
Function call
Function to get bitwise XOR of all possible pairs of the given array
Stores bitwise XOR of all possible pairs
Generate all possible pairs and calculate bitwise XOR of all possible pairs
Calculate bitwise XOR of each pair
Driver code
Find the count of possible graphs
Driver code
Function to minimize the product of two numbers
Reducing X , N times , minimizes the product
Reduce X to 1 and reduce remaining N from Y
Reducing Y , N times , minimizes the product
Reduce Y to 1 and reduce remaining N from X
Driver Code
Function to count the desired number of pairs
Initialize oneCount
Initialize the desiredPair
Traverse the given array
If 1 is encountered
If 0 is encountered
Update count of pairs
Return the final count
Driver Code
Given array arr [ ]
Function call
Function to prthe smallest missing non - negative integer up to every array indices
Stores the smallest missing non - negative integers between start index to current index
Store the boolean value to check smNonNeg present between start index to each index of the array
Traverse the array
Since output always lies in the range [ 0 , N - 1 ]
Check if smNonNeg is present between start index and current index or not
Print smallest missing non - negative integer
Driver Code
Function to split the array into two subsequences
Stores the two subsequences
Flag to set / reset to split arrays elements alternately into two arrays
Traverse the given array
If 2 * arr [ i ] is less than X
Push element into the first array
If 2 * arr [ i ] is greater than X
Push element into the second array
If 2 * arr [ i ] is equal to X
Alternatively place the elements into the two arrays
Print both the arrays
Driver Code
Size of the array
Function Call
Function to get the minimum count of subsets that satisfy the given condition
Store the minimum count of subsets that satisfy the given condition
Stores start index of the sorted array .
Stores end index of the sorted array
Sort the given array
Traverse the array
If only two elements of sorted array left
If only one elements left in the array
Driver Code
Function to count integers K satisfying given equation
Calculate the absoluter difference between a and b
Iterate till sqrt of the difference
Return the count
Driver Code
Function to check if a number is prime or not
Check if N is multiple of i or not .
If N is multiple of i .
Function to get the count of pairs whose product is a composite number .
Stores the count of pairs whose product is a composite number
Generate all possible pairs
Stores the product of element of current pair
If prod is a composite number
Driver Code
Python3 program for the above approach
Function for calculate ( x ^ y ) % mod in O ( log y )
Base Condition
Transition state of power Function
Function for counting total numbers that can be formed such that digits X , Y are present in each number
Calculate the given expression
Return the final answer
Driver Code
Python3 program of the above approach
Function to generate the array by inserting array elements one by one followed by reversing the array
Doubly ended Queue
Iterate over the array
Push array elements alternately to the front and back
If size of list is odd
Reverse the list
Print the elements of the array
Driver Code
Function to get closest greater number with at most non zero digit
Stores the closest greater number with at most one non - zero digit
Stores length of str
Append 10 to the end of resultant String
Append n - 1 times '0' to the end of resultant String
Driver Code
Function to count maximum number of non - overlapping subarrays with sum equals to the target
Stores the final count
Next subarray should start from index >= availIdx
Tracks the prefix sum
Map to store the prefix sum for respective indices
Check if cur_sum - target is present in the array or not
Update the index of current prefix sum
Return the count of subarrays
Driver Code
Given array arr [ ]
Given sum target
Function call
Function to calculate x ^ y
Base Case
Find the value in temp
If y is even
Function that find the maximum possible sum of the array
Print the result using the formula
Driver Code
Function call
Function to return the count of possible pairs of A and B whose Bitwise XOR is X and Y respectively
Stores the count of pairs
Iterate till any bit are set
Extract i - th bit of X and Y
Divide X and Y by 2
If Xi = 1 and Yi = 2 , multiply counter by 2
Increase required count
If Xi = 1 and Yi = 1
No answer exists
Return the final count
Given X and Y
Function call
Function to return gcd of a and b
Base Case
Recursive call
Function to find gcd of array
Initialise the result
Traverse the array arr [ ]
Update result as gcd of the result and arr [ i ]
Return the resultant GCD
Given array arr [ ]
Function call
Function to checks if any permutation of the array exists whose sum of adjacent pairs is not divisible by 3
Count remainder 0
Count remainder 1
Count remainder 2
Condition for valid arrangements
Given array arr [ ]
Function call
Python3 program for the above approach
Function to check if digits of N is a perfect square or not
Iterate over the digits
Extract the digit
Check if digit is a perfect square or not
Divide N by 10
Return true
Function to check if N is a perfect square or not
If floor and ceil of n is not same
Function to check if N satisfies the required conditions or not
If both the conditions are satisfied
Driver Code
Function call
Function to count the substrings having different first & last character
Stores frequency of each char
Loop to store frequency of the characters in a Map
To store final result
Traversal of string
Store answer for every iteration
Map traversal
Compare current char
Print the final count
Given string
Length of the string
Function Call
Function to find the maximum bottles that can be emptied
Iterate until a is non - zero
Add the number of bottles that are emptied
Update a after exchanging empty bottles
Stores the number of bottles left after the exchange
Return the answer
Driver Code
Function call
Function to calculate x ^ n using binary - exponentiation
Stores the resultant power
Stores the value of x ^ ( n / 2 )
Function to count aN - digit numbers whose digits are multiples of x
Count adigits which are multiples of x
Check if current number is a multiple of X
Increase count of multiples
Check if it 's a 1 digit number
Count the total numbers
Return the total numbers
Driver Code
Given N and X
Function call
Function to return the required vertex
Case 1 :
Case 2 :
Driver Code
Function that counts the number of strings of length three that can be made with given m 0 s and n 1 s
Iterate until N & M are positive
Case 1 :
Case 2 :
Print the count of strings
Driver code
Given count of 1 s and 0 s
Function call
Function that returns the minimum length of the array after merging unequal adjacent elements
Stores the first element and its frequency
Traverse the array
If all elements are equal
No merge - pair operations can be performed
Otherwise
Given array
Length of the array
Function call
Function to check if N can be reduced to <= 0 or not
Update N to N / 2 + 10 at most X times
Update N to N - 10 Y times
Driver Code
Python3 program for the above approach
Function to find the minimum number of subarrays
Right pointer
Left pointer
Count of subarrays
Find GCD ( left , right )
Found a valid large subarray between arr [ left , right ]
Searched the arr [ 0. . right ] and found no subarray having size > 1 and having gcd ( left , right ) > 1
Driver Code
Function call
Python3 program for the above approach
Function to find the largest positive integer K such that K % x = y
Stores the minimum solution
Return the maximum possible value
Driver Code
Function to count the numbers ending with M
Stores the count of numbers required
Calculate count upto nearest power of 10
Computing the value of x
Adding the count of numbers ending at M from x to N
Driver Code
Function call
Python3 program for the above approach
Function to find the number of right angled triangle that are formed from given N points whose perpendicular or base is parallel to X or Y axis
To store the number of points has same x or y coordinates
Store the total count of triangle
Iterate to check for total number of possible triangle
Add the count of triangles formed
Total possible triangle
Driver Code
Given N points
Function call
Function to print the array
Function to find the smallest subarray
Corner Case
Initialize the auxiliary subarray
Push the first 2 elements into the subarray brr [ ]
Iterate over the length of subarray
If array can be divided into subarray of i equal length
Check if on repeating the current subarray gives the original array or not
Subarray found
Add current element into subarray
No subarray found
Driver Code
Function call
Function to find the missing elements
Initialize diff
Check if diff and arr [ i ] - i both are equal or not
Loop for consecutive missing elements
Given array arr [ ]
Function call
Function to find the missing elements
Initialize an array with zero of size equals to the maximum element in the array
Make b [ i ] = 1 if i is present in the array
If the element is present make b [ arr [ i ] ] = 1
Print the indices where b [ i ] = 0
Given array arr [ ]
Function call
Function to find the smallest element common in both the subsequences
If a is equal to c
If a exceeds c
Check for the satisfying equation
Least value of possible_y satisfying the given equation will yield True in the below if and break the loop
If the value of possible_y satisfying the given equation lies in range [ 0 , b ]
If no value of possible_y satisfies the given equation
Driver Code
Function that finds the minimum number of flips to make the binary string alternating if left circular rotation is allowed
Initialize prefix arrays to store number of changes required to put 1 s at either even or odd position
If i is odd
Update the oddone and evenone count
Else i is even
Update the oddone and evenone count
Initialize minimum flips
Check if substring [ 0 , i ] is appended at end how many changes will be required
Return minimum flips
Given String
Length of given string
Function call
Python3 program for the above approach
Function to check the number is prime or not
Base Cases
Iterate till [ 5 , sqrt ( N ) ] to detect primarility of numbers
Function to print the shortest path
Use vector to store the factor of m and n
Use map to check if largest common factor previously present or not
First store m
Check whether m is prime or not
Largest common factor of m
If m is divisible by i
Store the largest common factor
For number n
Check whether n is prime
Largest common factor of n
Store the largest common factor
Print the path Print factors from m
To avoid duplicate printing of same element
Print the factors from n
Driver Code
Given N and M
Function call
Python3 program for the above approach
Function to count the total number of trees possible
Find the max element in the given array
Level array store the number of Nodes on level i initially all values are zero
In this case tree can not be created
To store the count of trees
Iterate until maxElement
Calculate level [ i ] ^ level [ i + 1 ]
Update the count of tree
Return the final count of trees
Driver Code
Given array arr
Function call
Python3 program for the above approach
Function that finds the value of x ^ y using Modular Exponentiation
Base Case
If y is odd , multiply x with result
Return the value
Function that counts the total number of trees possible
Find the max element in array
Level array store the number nodes on level i initially all values are 0
In this case tree can not be created
Calculate level [ i ] ^ level [ i + 1 ]
Return the final count
Driver Code
Given Queries
Function call
Function to return the result of the game
Length of the string
List to maintain the lengths of consecutive '1' s in the string
Variable that keeps a track of the current length of the block of consecutive '1' s
Adds non - zero lengths
This takes care of the case when the last character is '1
Sorts the lengths in descending order
Scores of the 2 players
For player 1
For player 2
In case of a tie
Print the result
Given string S
Function call
Function to count the number of carry operations to add two binary numbers
To Store the carry count
Iterate till there is no carry
Carry now contains common set bits of x and y
Sum of bits of x and y where at least one of the bits is not set
Carry is shifted by one so that adding it to x gives the required sum
Adding number of 1 's of  carry to final count
Return the final count
Given two numbers
Function call
Python3 program to implement above approach
Function to return X ^ Y % Mod
Base case
Function to return the inverse of factorial of N
Base case
Function to return factorial of n % Mod
Base case
Function to return the value of n ! / ( ( n - k ) ! * k ! )
Function to return the count of ways to reach ( n , m ) from ( 0 , 0 )
If ( N + M ) % 3 != 0
No possible way exists
Calculate X and Y from the equations X + 2 Y = N and 2 X + Y == M
Driver code
Function that calculates the profit with the earning and cost of expenses
To store the total Profit
Loop for n number of days
If last day , no need to buy food
Else buy food to gain energy for next day
Update earning per day
Update profit with daily spent
Print the profit
Driver Code
Given days
Given earnings
Given cost
Given energy e
Function call
Function to check if an odd sum can be made using N integers from the array
Initialize odd and even counts
Iterate over the array to count the no . of even and odd integers
If element is odd
If element is even
Check if even_freq is more than N
If odd_freq is odd
Consider even count of odd
Calculate even required
If even count is less than required count
Calculate even required
If even count is less than required count
Driver Code
Function to print the minimum count of digits
IF N is divisible by 9
Count of 9 's is the answer
If remainder is non - zero
Driver Code
Function to count the no . of digits of N
Function to count all possible numbers having Suffix as N
Difference of the A . P
Count of the number of terms
Driver code
Function to find minimum number of operations to get desired array
For odd ' i ' , sum of elements till ' i ' is positive
If i is even and sum is positive , make it negative by subtracting 1 + | s | from a [ i ]
If i is odd and sum is negative , make it positive by adding 1 + | s | into a [ i ]
For odd ' i ' , sum of elements till ' i ' is negative
Check if ' i ' is odd and sum is positive , make it negative by subtracting 1 + | s | from a [ i ]
Check if ' i ' is even and sum is negative , make it positive by adding 1 + | s | into a [ i ]
Return the minimum of the two
Driver Code
Given array arr [ ]
Function call
Function to check if all array elements can be made equal
Stores the sum of even and odd array elements
If index is odd
Driver Code
Function that returns true if n can be written as a ^ m + b ^ n
Taking isSum boolean array for check the sum exist or not
To store perfect squares
Initially all sums as false
If sum exist then push that sum into perfect square vector
Mark all perfect powers as false
Traverse each perfectPowers
Calculating Sum with perfect powers array
Given Number n
Function call
Function to update every element adding to it its index value
Function to check if at least two elements are equal or not
Count the frequency of arr [ i ]
Function to calculate the number of increment operations required
Stores the minimum number of steps
Driver code
Function to check if it the array can be rearranged such such that every even indices contains an even element
Stores the count of even elements
Traverse array to count even numbers
If even_no_count exceeds count of even indices
Driver Code
Python3 program for the above approach
Function to find the largest number M having the same length in binary form as N such that the difference between N | M and N ^ M is maximum
Find the most significant bit of N
Initialize M
Set all the bits of M
Return the answer
Driver code
Given Number N
Function call
Function to find the number of equilateral triangle formed within another triangle
Check for the valid condition
Number of triangles having upward peak
Number of inverted triangles
Total no . of K sized triangle
Driver Code
Given N and K
Function Call
Function to check if the given array forms an increasing decreasing sequence or vice versa
Base Case
First subarray is stricly increasing
Check for strictly increasing condition & find the break point
Check for strictly decreasing condition & find the break point
If i is equal to length of array
First subarray is strictly Decreasing
Check for strictly increasing condition & find the break point
Check for strictly increasing condition & find the break point
If i is equal to length of array - 1
Condition if ar [ 0 ] == ar [ 1 ]
Given array arr
Function Call
Function to calculate the length of the binary string
Length
Right shift of n
Increment the length
Return the length
Function to check if the bit present at i - th position is a set bit or not
Returns true if the bit is set
Function to count the minimum number of bit flips required
Length of the binary form
Number of flips
Pointer to the LSB
Pointer to the MSB
Check if the bits are equal
Decrementing the left pointer
Incrementing the right pointer
Returns the number of bits to flip .
Driver Code
Function to calculate the splitted numbers
Calculate X
If X is odd
No pair is possible
Otherwise
Calculate X
Calculate Y
Driver Code
Function to find the amplitude and number of waves for the given array
Check for both sides adjacent elements that both must be less or both must be greater than current element
Update amplitude with max value
Prthe Amplitude
Driver Code
Given array a [ ]
Calculate number of waves
Function Call
Function to find relative rank for each element in the array A [ ]
Create Rank Array
Stack to store numbers in non - decreasing order from right
Push last element in stack
Iterate from second last element to first element
If current element is less than the top of stack and append A [ i ] in stack
Rank is stack size - 1 for current element
Pop elements from stack till current element is greater than the top
Push current element in Stack
Rank is stack size - 1
Print rank of all elements
Driver Code
Given array A [ ]
Function call
Python3 program for the above approach
Function to find the largest string after deleting k characters
Deque dq used to find the largest string in dictionary after deleting k characters
Iterate till the length of the string
Condition for popping characters from deque
To store the resultant string
To form resultant string
Return the resultant string
Driver Code
Given String
Function call
Print the answer
Function that counts the set bits from 0 to N
To store sum of set bits from 0 - N
Until n >= to 2 ^ i
This k will get flipped after 2 ^ i iterations
Change is iterator from 2 ^ i to 1
This will loop from 0 to n for every bit position
When change = 1 flip the bit
Again set change to 2 ^ i
Increment the position
Function that counts the set bit in the range ( L , R )
Return the count
Driver Code
Given L and R
Function Call
Function to count set bit in range
Count variable
Find the set bit in Nth number
If last bit is set
Left sift by one bit
Return count
Driver Code
Given range L and R
Function call
Function to count set bit in [ L , R ]
Variable for count set bit in range
Count set bit for all number in range
Use inbuilt function
Driver Code
Given range L and R
Function Call
Function that count the number of integers from array B such that subtracting element in the range [ 0 , K ] given any element in A
To store the count of element
Traverse the array B
Traverse the array A
Find the difference
If difference is atmost K then increment the cnt
Print the count
Driver Code
Given array A and B
Given K
Function call
Function to construct a string having N * N non - palindromic substrings
Driver Code
Function returns maximum subset sum from the given array =
Case 2 : Negate values from A [ 1 ] to A [ N - 1 ]
Include only positives for max subset sum
Return max sum obtained
Function to return maximum of the maximum subset sum calculated for the two cases
Case 1
Case 2
Modifying the sum
Including first element
Negating again
Return the required answer
Driver Code
Function to find the array of strings
Marks the ( N + 1 ) th string
To generate remaining N strings
Find i - th string using ( i + 1 ) - th string
Check if current character is b
Otherwise
Insert the string
Return the answer
Driver Code
Print the strings
Function to find the minimum number of swaps required
Sort the array in ascending order
Iterate until a greater element is found
Keep incrementing ind
If a greater element is found
Increase count of swap
Increment ind
If end of array is reached
Return the answer
Driver Code
Function to find the minimum number of swaps required
Stores the frequency of the array elements
Stores maximum frequency
Find the max frequency
Update frequency
Update maximum frequency
Driver code
function call
Function to calculate the minimum steps to obtain the desired array
Initialize variable
Iterate over the array arr [ ]
Check if i > 0
Update the answer
Return the result
Driver Code
Function to print the required matrix
For 1 * 1 matrix
Greater number
Smaller number
Sets / Resets for alternate filling of the matrix
Print the matrix
If end of row is reached
Driver Code
Function to find Occurrence of each element from 1 to 2 * MAX
Initialise MAX
Count vector to store count of each element from 1 to 2 * MAX Count = new int [ 2 * MAX + 1 ] ;
Size of Arr1 and Arr2
Find the elements of arr3 and increase count of element by 1
Prthe result
Driver Code
Given arrays arr1 and arr2
Function call
Function to find two numbers with difference and division both as N
Condition if the answer is not possible
Calculate a and b
Print the values
Given N
Function call
Function to select a maximum number of elements in array whose sum is at most K
Sort the array
Calculate the sum and count while iterating the sorted array
Iterate for all the elements in the array
Add the current element to sum
Increment the count
Return the answer
Driver Code
Given array
Given sum k
Function call
Function to find the required pair
No pair possible
Driver Code
Function to construct the binary string
Conditions when string construction is not possible
Stores maximum 1 's that  can be placed in between
Place 0 's
Place 1 's in between
Count remaining M 's
Place 1 's at the end
Place 1 's at the beginning
Return the final string
Driver Code
Function to invert the digits of integer N to form minimum possible number
Initialize the array
Iterate till the number N exists
Last digit of the number N
Checking if the digit is smaller than 9 - digit
Store the smaller digit in the array
Reduce the number each time
Check if the digit starts with 0 or not
Print the answer
Driver Code
Given Number
Function Call
Function that returns True if concatenation of first N natural numbers is divisible by 3
Check using the formula
Driver Code
Given Number
Function Call
Function to count the number of N - digit numbers such that sum of every k consecutive digits are equal
Range of numbers
Extract digits of the number
Store the sum of first K digits
Check for every k - consecutive digits
If sum is not equal then break the loop
Increment the count if it satisfy the given condition
Given N and K
Function call
Function that returns the count of factors that are perfect squares
Stores the count of number of times a prime number divides N .
Stores the number of factors that are perfect square
Count number of 2 's  that divides N
Calculate ans according to above formula
Check for all the possible numbers that can divide it
Check the number of times prime number i divides it
Calculate ans according to above formula
Return final count
Driver Code
Function to check if the angle is possible or not
Angular sum of a N - sided polygon
Angular sum of N - sided given polygon
Check if both sum are equal
Function to find the nth angle
Calculate nth angle
Return the nth angle
Driver Code
Checks the possibility of the polygon exist or not
Print nth angle of the polygon
Function to check if the given is linear or not
Iterate over string
If character is not same as the first character then return false
Increment the tmp
Driver Code
Given String str
Function call
Function to implement DFS Traversal to marks all the vertices visited from vertex U
Mark U as visited
Traverse the adjacency list of U
Function to find the minimum cost to color all the vertices of graph
To store adjacency list
Loop through the edges to create adjacency list
To check if a vertex of the graph is visited
Mark visited to all the vertices that can be reached by colored vertices
Perform DFS
To store count of uncolored sub - graphs
Loop through vertex to count uncolored sub - graphs
If vertex not visited
Increase count of uncolored sub - graphs
Perform DFS to mark visited to all vertices of current sub - graphs
Calculate minimum cost to color all vertices
Print the result
Driver Code
Given number of vertices and edges
Given edges
Given cost of coloring and adding an edge
Given array of colored vertices
Function to find the minimum cost to reduce the integer N to 1 by the given operations
Check if x is 1
Print the answer
Prestore the answer
Iterate till n exists
Divide N by x
Reduce n by x
Add the cost
Update the answer
Return the answer
Driver Code
Initialize the variables
Function call
Function to find the number of ways to sum up a total of N from limited denominations
Store the count of denominations
Stores the final result
As one of the denominations is rupee 1 , so we can reduce the computation by checking the equality for N - ( A * 1 ) = N - A
Increment the count for number of ways
Driver Code
Given Denominations
Function Call
Python3 program for the above approach
Function to find the number of ways to sum up a total of N from limited denominations
Store the count of denominations
Stores the final result
This will give the number of coins for all combinations of coins with value 1 and 5
L2 will sum the values of those indices of ways which is equal to ( N - ( c * 10 + d * 20 ) )
Return the final count
Driver Code
Given denominations
Function call
Function that find the count of missing numbers in array a [ ]
Calculate the count of missing numbers in the array
Driver Code
Function for find max XOR subsequence having odd value
Initialize odd and even count
Count the number of odd and even numbers in given array
If all values are odd in given array
If all values are even in given array
If both odd and even are present in given array
Driver code
Given array arr [ ]
Function Call
Function to calculate the value of count
If n is even
Count of pairs
Otherwise
Driver code
Function to return the count of all concatenated string with each vowel at least once
Concatenating all possible pairs of string
Creating an array which checks , the presence of each vowel
Checking for each vowel by traversing the concatenated string
Checking if all the elements are set in vowel [ ]
Check if all vowels are present or not
Return the final count
Driver Code
Given array of strings
Function call
Function to implement sieve of erastosthenes
Create a boolean array and initialize all entries as false
Initializing smallest factor equal to 2 for all the even numbers
Iterate for odd numbers less then equal to n
s ( i ) for a prime is the number itself
For all multiples of current prime number
i is the smallest prime factor for number " i * j "
Function to generate prime factors and its power
s [ i ] is going to store smallest prime factor of i
Current prime factor of N
Power of current prime factor
Calculating prime factors and their powers sum
Increment the count and continue the process
Add count to the sum
Reinitialize count
Return the result
Function to find the sum of all the power of prime factors of N
Iterate for in [ 2 , N ]
Driver Code
Given number N
Function call
Python3 program for the above approach
Function to find LCM pf two numbers
Initialise lcm value
Check for divisibility of a and b by the lcm
Function to find the Minimum LCM of all subarrays of length greater than 1
Store the minimum LCM
Traverse the array
Find LCM of consecutive element
Check if the calculated LCM is less than the minLCM then update it
Print the minimum LCM
Given array arr [ ]
Size of the array
Function call
Function to find the integer with maximum bitwise with N
Store answer in the bitset Initialized with 0
To maintain the count of set bits that should exceed k
Start traversing from the Most significant if that bit is set in n then we will set in our answer i . e in X
Checking if the ith bit is set in n or not
Converting into integer
Driver code
Function Call
Function to convert string to integer without using functions
Initialize a variable
Iterate till length of the string
Subtract 48 from the current digit
Print the answer
Driver code
Given string of number
Function Call
Python3 implementation to find the permutation of the array such that sum of adjacent elements is not divisible by 3
Function to segregate numbers based on their remainder when divided by three
Loop to iterate over the elements of the given array
Condition to check the remainder of the number
Function to find the permutation of the array such that sum of adjacent elements is not divisible by 3
Condition to check when it 's impossible to arrange
Condition to check when there are no zeros , and only ones or only twos
Array to store the permutation
Place the ones on alternate places in the answer array , leaving spaces for zeros remainder elements in the array
Adding a zero to connect it with a two
Place the twos on alternate places in the answer array , leaving spaces for zeros
Fill the zeros finally , between the ones and the twos
Print the arrangement of the array
Function to solve the problem
As there can be only 3 remainders
Function Call
Driver Code
Function that returns the count of unique digits of the given number
Initialize a variable to store count of unique digits
Initialize cnt list to store digit count
Iterate through the digits of N
Retrieve the last digit of N
Increase the count of the last digit
Remove the last digit of N
Iterate through the cnt list
If frequency of digit is 1
Increment the count of unique digits
Return the count of unique digit
Given number N
Function call
Python3 code for the above approach
Function to check whether the frequency of elements in array is unique or not .
Freq map will store the frequency of each element of the array
Store the frequency of each element from the array
Check whether frequency of any two or more elements are same or not . If yes , return false
Return true if each frequency is unique
Driver Code
Given array arr [ ]
Function Call
Print the result
Python3 program to implement the above approach
Function to raise N to the power P and return the value
Function to calculate the log base 2 of an integer
Calculate log2 ( N ) indirectly using log ( ) method
Function to calculate and return the required sum
Sum of first N natural numbers
Sum of all powers of 2 up to N
Driver code
Function to rearrange array elements such that the every two consecutive elements is a multiple of 4
If element is odd
Odd
If element is divisible by 4
Divisible by 4
If element is not divisible by 4
Even but not divisible by 4
Condition for rearrangement to be possible
Print ODD [ i ] and FOUR [ i ] consecutively
Print the remaining FOUR [ i ] , if any
Condition for rearrangement to be possible
Print ODD [ i ] and FOUR [ i ] consecutively
Print the remaining FOUR [ i ] , if any
Print the NON_FOUR [ i ] elements at the end
No possible configuration
Driver Code
Function to find array
Array not possible
Array possible with exactly 1 or no element
Checking array with two elements possible or not .
Given sum and value of Bitwise XOR
Function Call
Function to find the smallest K periodic integer greater than X
Stores the number in a temporary string
Set X [ i ] = X [ i - k ] for i > k
Start from the current index
Loop upto N change X [ j ] to X [ i ]
Return X if current Value is greater than original value
Find the first digit not equal to 9
Increment X [ i ]
Set POS to current index
Change X [ i ] to 0 for all indices from POS + 1 to K
Set X [ i ] = X [ i - k ] for i > k
Loop upto N change X [ j ] to X [ i ]
Return the final string
Driver Code
Python3 program for the above approach
To store the resulting sum of the cost
To store largest cost leaf vertex
DFS Traversal to find the update the maximum cost of from any node to leaf
Mark vertex as visited
Store vertex initial cost
Initially assuming edge not to be traversed
Back edge found so , edge can be part of traversal
New vertex is found
Bitwise AND the current check with the returned check by the previous DFS Call
Adds parent and its children cost
Updates total cost of parent including child nodes
Edge is part of the cycle
Add cost of vertex to the answer
Updates the largest cost leaf vertex
Function to find the maximum cost from source vertex such that no two edges is traversed twice
DFS Call
Print the maximum cost
Driver Code
Cost Array
Given Graph
Given Source Node
Function Call
Function that will give the max negative value
Check for count greater than 0 as we require only negative solution
Function to print the minimum sum
Taking sum of only even index elements
Initialize two vectors v1 , v2
v1 will keep account for change if 1 th index element goes to 0
v2 will keep account for change if 1 th index element goes to 2
Get the max negative value
Driver code
Python3 program for the above approach
Utility function to find the answer
Stores the frequencies of array elements
Stores the possible values of X
Generate possible positive values of X
Initialize answer to MAX value
Flag to check if the current element of the set can be considered
If the frequency of an element in A [ ] is not equal to that in B [ ] after the operation
Current set element cannot be considered
Update minimum value of X
Driver Code
Function to find all indices which cyclic shift leads to get balanced parenthesis
Create auxiliary array
Finding prefix sum and minimum element
Update the minimum element
ChecK if count of ' ( ' and ' ) ' are equal
Find count of minimum element
Find the frequency of mn
Return the count
Given string S
Function call
Function to find the maximum profit
Start from the last day
Traverse and keep adding the profit until a day with price of stock higher than currentDay is obtained
Set this day as currentDay with maximum cost of stock currently
Return the profit
Given array of prices
Function call
Function to check if string formed by odd indices is palindromic or not
Check if length of OddString odd , to consider edge case
Push odd index character of first half of str in stack
Middle element of odd length palindromic string is not compared
If stack is empty then return true
Driver code
Given string
Functions checks if characters at odd index of the string forms palindrome or not
Initialise two pointers
Iterate till left <= right
If there is a mismatch occurs then return false
Increment and decrement the left and right pointer by 2
Driver Code
Given string
Function call
Python 3 program for the above approach
Function that counts minimum character that must be removed
Length of string
Create prefix array
Initialize first position
Fill prefix array
Initialise maxi
Check all the possibilities by putting i and j at different position & find maximum among them
Print the characters to be removed
Driver Code
Given String
Function Call
Function to create an array with N elements with sum as S such that the given conditions satisfy
Check if the solution exists
Print the array as print ( n - 1 ) elements of array as 2
Print the last element of the array
Print the value of k
If solution doesnot exists
Given N and sum S
Function call
Function to calculate and return the maximum number of partitions
r : Stores the maximum number of partitions k : Stores the ending index of the partition
Stores the last index of every unique character of the string
Traverse the and store the last index of every character
Store the last index of the first character from map
Update K to find the end of partition
Otherwise , the end of partition is found
Increment r
Update k for the next partition
Add the last partition
Driver Code
Function to calculate and return the minimum number of steps required to move all 1 s to ( X , Y )
Iterate the given matrix
Update the answer with minimum moves required for the given element to reach the given index
Return the number of steps
Given matrix
Given position
Function call
Function that counts all the reverse bitonic subarray in arr [ ]
To store the count of reverse bitonic subarray
Iterate the array and select the starting element
Iterate for selecting the ending element for subarray
Subarray arr [ i to j ]
For 1 length , increment the count and continue
For Decreasing Subarray
Check if only Decreasing
For Increasing Subarray
Print the total count of subarrays
Given array arr [ ]
Function Call
Python3 program to print the longest increasing subsequence from the boundary elements of an array
Function to return the length of Longest Increasing subsequence
Set pointers at both ends
Stores the recent value added to the subsequence
Stores the length of the subsequence
Check if both elements can be added to the subsequence
Check if the element on the left can be added to the subsequence only
Check if the element on the right can be added to the subsequence only
If none of the values can be added to the subsequence
Driver code
Length of array
Function to return the total infected cells after d days
Top extension
Bottom extension
Left extension
Right extension
Calculating the cells in each quadrilateral
Sum all of them to get total cells in each quadrilateral
Add the singleblocks along the lines of top , down , left , right
Return the ans
Driver Code
Dimensions of cell
Starting Coordinates
Number of Days
Function Call
Function to print the smallest subsequence and its sum
Final subsequence
First element is a default endpoint
Iterating through the array
Check for monotonically increasing endpoint
Check for monotonically decreasing endpoint
Last element is a default endpoint
Length of final subsequence
Print the subsequence
Driver code
Python3 implementation to find the minimum number of changes required such that every path from top left to the bottom right are palindromic paths
Function to find the minimum number of the changes required for the every path to be palindromic
count variable for maintaining total changes .
left and right variables for keeping distance values from cell ( 0 , 0 ) and ( N - 1 , M - 1 ) respectively .
Iterating over the matrix
Finding minimum number of changes required .
Minimum no . of changes will be the the minimum no . of different values and we will assume to make them equals to value with maximum frequency element
Moving ahead with greater distance
Driver Code
Function Call
Function to find the count of longest subarrays with sum not divisible by K
Sum of all elements in an array
If overall sum is not divisible then return 1 , as only one subarray of size n is possible
Index of the first number not divisible by K
Index of the last number not divisible by K
Subarray doesn 't exist
Sum of the window
Calculate the sum of rest of the windows of size len
Driver Code
Python3 program to count the number of triplets in the array with GCD equal to K
Frequency array
mul [ i ] stores the count of multiples of i
cnt [ i ] stores the count of triplets with gcd = i
Return nC3
Function to count and return the number of triplets in the array with GCD equal to K
Store frequency of array elements
Store the multiples of i present in the array
Count triplets with gcd equal to any multiple of i
Remove all triplets which have gcd equal to a multiple of i
Driver Code
Function to check if any required subsequence exists or not
Store count of odd and even elements in the array
Calculate the count of odd and even elements
If no odd element exists or no even element exists when K even
Subsequence is not possible
Otherwise possible
Driver code
Function that pr the path using exactly K jumps and M coins
If no path exists
It decides which box to be jump
It decides whether to jump on left side or to jump on right side
Print the path
Driver code
Function call
Python3 program for the above approach
Function that print minimum hike
Insert INF at begin and end of array
To store hike of each employee
For Type 1 employee
For Type 2 employee
For Type 3 employee
For Type 4 employee
Print the min hike for each employee
Driver Code
Given array of rating of employees
Function Call
Function that prints minimum cost required
Dp - table
Base case Not increasing the first element
Increasing the first element by 1
Increasing the first element by 2
Condition if current element is not equal to previous non - increased element
Condition if current element is not equal to previous element after being increased by 1
Condition if current element is not equal to previous element after being increased by 2
Take the minimum from all cases
Finding the minimum cost
Printing the minimum cost required to make all adjacent elements distinct
Driver Code
Function to find the maximum sum subarray by excluding the maximum element from the array
Loop to store all the positive elements in the map
Loop to iterating over the map and considering as the maximum element of the current including subarray
Make the current element maximum
Iterate through array and apply kadane 's algorithm
Condition if current element is greater than mx then make the element - infinity
Store the indices in some variable
Driver Code
Function Call
Function to make XOR of the array equal to half of its sum
Calculate the sum and Xor of all the elements
If the required condition satisfies already , return the original array
If Xor is already zero , Insert sum
Otherwise , insert xr and insert sum + xr
Driver code
Function to count the number of possible triangles for the given sides ranges
Iterate for every possible of x
Range of y is [ b , c ] From this range First we will find the number of x + y greater than d
For x + y greater than d we can choose all z from [ c , d ] Total permutation will be
Now we will find the number of x + y in between the [ c , d ]
[ l , r ] will be the range from total [ c , d ] x + y belongs For any r such that r = x + y We can choose z , in the range [ c , d ] only less than r , Thus total permutation be
Driver Code
Python3 code to find the minimum number of swaps required to make the string K periodic
Mark all allowed characters as true
Initialize the freq array to 0
Increase the frequency of each character
Total number of periods of size K in the string
Check if the current character is present in allowed and whether the current frequency is greater than all previous frequencies for this position
Update the answer by subtracting the maxfrequency from total positions if there exist extra character at the end of the string apart from the n / k characters then add 1.
Driver code
Function that finds minimum number of colors required
To check that if all the elements are same or not
To check if only one adjacent exist
Traverse the array
If adjacent elements found different means all are not same
If two adjacent elements found to be same then make one_adjacent_same true
If all elements are same then print 1
If total number of elements are even or there exist two adjacent elements that are same then print 2
Else 3 type of colors are required
Driver Code
Function call
Function to find the maximum sum of sum
Compute the sum of whole array
Traverse and remove the minimum value from an end to maximum the sum value
If the left end element is smaller than right end
Remove the left end element
If the right end element is smaller than left end
Remove the right end element
Add the remaining element sum in the result
Return the maximum sum of sum
Driver code
Function to split into K parts and print them
Print 1 K - 1 times
Print N - K + 1
Print 1 K - 2 times
Print 2 and N - K
Driver code
Function to assign the intervals to two different processors
Loop to pair the interval with their indices
sorting the interval by their startb times
Loop to iterate over the intervals with their start time
Condition to check if there is a possible solution
form = ''.join(form)
Driver Code
Function Call
Python3 implementation of the approach
Function to return the minimum operations required
Condition where we got only one closing bracket instead of 2 , here we have to add one more closing bracket to make the sequence balanced
Add closing bracket that costs us one operation
Remove the top opening bracket because we got the 1 opening and 2 continuous closing brackets
Inserting the opening bracket to stack
After making the sequence balanced closing is now set to 0
Case when there is no opening bracket the sequence starts with a closing bracket and one opening bracket is required Now we have one opening and one closing bracket
Add opening bracket that costs us one operation
Assigning 1 to cntClosing because we have one closing bracket
Case where we got two continuous closing brackets need to pop one opening bracket from stack top
Condition where stack is not empty This is the case where we have only opening brackets ( st . size ( ) * 2 ) will give us the total closing bracket needed cntClosing is the count of closing bracket that we already have
Driver code
Function to find the longest Subsequence with different adjacent character
Length of the string s
Previously picked character
If the current character is different from the previous then include this character and update previous character
Driver Code
Function call
Function to calculate GCD of two numbers
Function to find maximum size subarray having maximum GCD
Base case
Let the maximum GCD be 1 initially
Loop through array to find maximum GCD of subarray with size 2
Traverse the array
Is a multiple of k , increase cnt
Else update maximum length with consecutive element divisible by k Set cnt to 0
Update the maxLength
Return the maxLength
Driver Code
Function call
Python3 program to find the minimum difference possible by splitting all powers of 2 up to N into two sets of equal size
Store the largest
Form two separate groups
Initialize the sum for two groups as 0
Insert 2 ^ n in the first group
Calculate the sum of least n / 2 - 1 elements added to the first set
sum of remaining n / 2 - 1 elements
Min Difference between the two groups
Driver code
Function to count the such elements
Store count of required elements in arr1
Initialise the smallest and the largest value from the second array arr2 [ ]
Find the smallest and the largest element in arr2
Check if absolute difference of smallest and arr1 [ i ] or largest and arr1 [ i ] is > K then arr [ i ] is a required element
Print final result
Driver code
Function that prints another array whose all subarray of length k have an equal sum
Store all distinct elements in the unordered map
Condition if the number of distinct elements is greater than k
Push all distinct elements in a vector
Push 1 while the size of vector not equal to k
Print the vector 2 times
Driver Code
Function to find the longest substring in the string which contains atmost K characters from the given set of characters
Base Condition
Count for Characters from set in substring
Two pointers
Loop to iterate until right pointer is not equal to N
Loop to increase the substring length until the characters from set are at most K
Check if current pointer points a character from set
If the count of the char is exceeding the limit
update answer with substring length
Increment the left pointer until the count is less than or equal to K
If the character which comes out then decrement the count by 1
Driver Code
Construction of set
Output result
Python3 program to find the minimum value of the given expression over all pairs of the array
Function to find the minimum value of the expression
Iterate over all the pairs and find the minimum value
Driver code
Function return count of such substring
Mark 1 at those indices where '1' appears
Take prefix sum
Iterate through all the substrings
Driver Code
Function to return the count of element x such that x + k also lies in this array
Key in map will store elements and value will store the frequency of the elements
Find if i . first + K is present in this map or not
If we find i . first or key + K in this map then we have to increase in answer the frequency of this element
Driver code
array initialisation
size of array
initialise k
Function to find out xor of digit
Calculate xor digitwise
Return xor
Function to find the size of largest group
Hash map for counting frequency
Counting freq of each element
Find the maximum
Initialise N
Function to find out product of digit
calculate product
return the product of digits
Function to find the count
hash map for counting frequency
counting freq of each element
find the maximum
count the number of groups having size of equal to largest group .
initialise N
Python3 program for the above approach
A utility function to check if the number n is prime or not
Base Cases
Check to skip middle five numbers in below loop
If n is divisible by i & i + 2 then it is not prime
Function to find number of subarrays with sum exactly equal to k
STL map to store number of subarrays starting from index zero having particular value of sum .
To store the sum of element traverse so far
Add current element to currsum
If currsum = K , then a new subarray is found
If currsum > K then find the no . of subarrays with sum currsum - K and exclude those subarrays
Add currsum to count of different values of sum
Return the final result
Function to count the subarray with K primes
Update the array element
If current element is prime then update the arr [ i ] to 1
Else change arr [ i ] to 0
Function Call
Driver Code
Function Call
Function to find the count
Hash map for counting frequency
Counting freq of each element
Check if value equals to frequency and increment the count
Driver code
Function call
Function to calculate x ^ y recursively
Function to return the number of permutations that satisfy the given condition in an array
If there is only one element then only one permutation is available
Sort the array for calculating the number of elements occurring twice
If the maximum element is occurring twice , then the number of permutations satisfying the condition is 0
This variable will store the number of element occurring twice
Loop to check the number of elements occurring twice
Check if this element is occurring twice
If this element is occurring twice then check if this number is occurring more than twice
If element occurring thrice then no permutation will satisfy the given condition
Since we have checked the next element as well , then we can increment the loop variable
Driver code
Function to find the length of the smallest subarray that must be removed in order to maximise the GCD
Store the maximum possible GCD of the resulting subarray
Two pointers initially pointing to the first and last element respectively
Moving the left pointer to the right if the elements are divisible by the maximum GCD
Moving the right pointer to the left if the elements are divisible by the maximum GCD
Return the length of the subarray
Driver code
Function to find the maximum pairs such that arr [ i + 1 ] > arr [ i ]
To store the frequency of the element in arr [ ]
Store the frequency in map M
To find the maximum frequency store in map M
Print the maximum number of possible pairs
Driver Code
Function to find the minimum possible of the expression by choosing exactly K ( ? N ) integers form given array arr
Sorting the array for least k element selection
Select first k elements from sorted array
Return value of solved expression
Driver code
Function call
Python3 program to transform N to the minimum value
Initialising the answer
Function to find the digitsum
Iterate over all digits and add them
Return the digit su ,
Function to transform N to the minimum value
If the final value is lesser than least value
If final value is equal to least value then check for lesser number of steps to reach this value
The value will be obtained in less than 15 steps as proved so applying normal recursive operations
Driver code
Function call
Print the answers
Function to find the maximum number of 1 's before 0
Traverse the array
If value is 1
If consecutive 1 followed by 0 , then update the maxCnt
Print the maximum consecutive 1 's  followed by 0
Driver Code
Function Call
Function Call
Function to check if it is possible to pay a value
Loop to add the value of coin A
Condition to check if it is possible to pay a value of S
Driver Code
Function to find the sum of numbers divisible by M in the given range
Variable to store the sum
Running a loop from A to B and check if a number is divisible by i .
If the number is divisible , then add it to sum
Return the sum
Driver code
A and B define the range M is the dividend
Printing the result
Function to find the largest number smaller than or equal to N that is divisible by K
Finding the remainder when N is divided by K
If the remainder is 0 , then the number itself is divisible by K
Else , then the difference between N and remainder is the largest number which is divisible by K
Function to find the smallest number greater than or equal to N that is divisible by K
Finding the remainder when N is divided by K
If the remainder is 0 , then the number itself is divisible by K
Else , then the difference between N and remainder is the largest number which is divisible by K
Function to find the sum of numbers divisible by M in the given range
Variable to store the sum
To bring the smallest and largest numbers in the range [ A , B ]
To count the number of terms in the AP
Sum of n terms of an AP
Driver code
A and B define the range , M is the dividend
Printing the result
Function to count all unique distinct character substrings
Hashmap to store all substrings
Iterate over all the substrings
Boolean array to maintain all characters encountered so far
Variable to maintain the subtill current position
Get the position of the character in the string
Check if the character is encountred
Add the current character to the substring
Insert subin Hashmap
Driver code
Function to find the sum of all subarrays of size K
Loop to consider every subarray of size K
Initialize sum = 0
Calculate sum of all elements of current subarray
Prsum of each subarray
Driver Code
Function Call
Function to find the sum of all subarrays of size K
Initialize sum = 0
Consider first subarray of size k Store the sum of elements
Print the current sum
Consider every subarray of size k Remove first element and add current element to the window
Add the element which enters into the window and subtract the element which pops out from the window of the size K
Print the sum of subarray
Drivers Code
Function Call
Python 3 program to find the number of indices pair such that pair sum from first Array is greater than second Array
Function to get the number of pairs of indices { i , j } in the given two arrays A and B such that A [ i ] + A [ j ] > B [ i ] + B [ j ]
Intitializing the difference array D
Computing the difference between the elements at every index and storing it in the array D
Sort the array D
Variable to store the total number of pairs that satisfy the given condition
Loop to iterate through the difference array D and find the total number of pairs of indices that follow the given condition
If the value at the index i is positive , then it remains positive for any pairs with j such that j > i .
If the value at that index is negative then we need to find the index of the value just greater than - D [ i ]
Driver code
Function to return HCF of two numbers
Function to return LCM of two numbers
Returns the number of valid pairs
Traversing the array . For each array element , checking if it follow the condition
Driver function
Python 3 program to count number of pairs such that their hcf and lcm are equal
Function to count number of pairs such that their hcf and lcm are equal
Store frequencies of array elements
Count of pairs ( arr [ i ] , arr [ j ] ) where arr [ i ] = arr [ j ]
Count of pairs ( arr [ i ] , arr [ j ] ) where arr [ i ] = arr [ j ] ,
Driver function
Function to find the maximum possible value of last element of the array
Traverse for all element
Find the distance
If moves less than distance then we can not move this number to end
How many number we can move to end
Take the minimum of both of them
Increment in the end
Remove taken moves
Return the last element
Driver code
Function call
Array to calculate all factorials less than or equal to N Since there can be only 14 factorials till 10 ^ 10 Hence the maximum size of fact [ ] is 14
Store the actual size of fact [ ]
Function to precompute factorials till N
Precomputing factorials
Function to find the minimum number of factorials whose sum represents N
Precompute factorials
Initialize result
Traverse through all factorials
Find factorials
Prmin count
Prresult
Driver program
Function to find the LCS
Loop to create frequency array
Driver code
Python Program to find maximum product path from ( 0 , 0 ) to ( N - 1 , M - 1 )
Function to find maximum product
It will store the maximum product till a given cell .
It will store the minimum product till a given cell ( for - ve elements )
If we are at topmost or leftmost , just copy the elements .
If we 're not at the  above, we can consider  the above value.
If we 're not on the  leftmost, we can consider  the left value.
Store max & min product till i , j .
Return the max product path from 0 , 0. N - 1 , M - 1.
Driver Code
Prmaximum product from ( 0 , 0 ) to ( N - 1 , M - 1 )
Python3 program to print Vertical filling
2D matrix for vertical insertion on tapes
It is used for checking whether tape is full or not
It is used for calculating total retrieval time
It is used for calculating mean retrieval time
It is used for calculating mean retrieval time
vertical insertion on tape
initialize variables to 0 for each iteration
Used for getting ' sum ' sizes of records in tape to determine whether tape is full or not
if tape is not full
check for ability of tapes to hold value
initialize variables to 0 for each iteration
display elements of tape
calculating total retrieval time
MRT formula
calculating mean retrieval time using formula
v . size ( ) is function of vector is used to get size of vector
Driver Code
store the size of records [ ]
store the size of tape [ ]
sorting of an array is required to attain greedy approach of algorithm
Python3 program to find the Minimum number of subsequences required to convert one to another
Function to find the no of subsequences
Push the values of indexes of each character
Find the next index available in the array
If Character is not in A
Check if the next index is not equal to the size of array which means there is no index greater than minIndex in the array
Update value of minIndex with this index
Update the value of counter and minIndex for next operation
Driver Code
Python implementation of the approach
Function to return the required length of the subsequences
To store the result
To store the last visited position of lowercase letters
Initialisation of frequency array to - 1 to indicate no character has previously occured
For every character of the String
Get the index of the current character
If the current character has appeared before in the String
Update the result
Update the last position of the current character
Driver code
Python3 implementation of the approach
Max profit will be saved here
loop to check all possible combinations of sales
the sum of the profit after the sale for products 0 to i in market A
the sum of the profit after the sale for products i to n in market B
Replace the value of Max Profit with a bigger value among maxP and sumA + sumB
Return the value of Max Profit
Driver Program
Python3 implementation of the approach
Function to return the count partitions possible from the given array such that the minimum element of any partition divides all the other elements of that partition
Initialize the count variable
Find the minimum element
Break if no minimum element present
Increment the count if minimum element present
Replace all the element divisible by min_elem
Driver code
Function to calculate min swaps to make binary strings equal
Count of zero 's 
Count of one 's 
As discussed above
Driver code
Function to count of minimum changes required to make all elements equal
Store the count of each element as key - value pair in Dictionary
Traverse through the Dictionary and find the maximum occurring element
Return count of all element minus count of maximum occurring element
Driver code
Function call
Python3 implementation of the above approach
Function to find the minimum no . of operations
find the maximum of two and store it in p
increase it until it is achievable from given n and m
Here value added to n and m will be S ( n ) = p - n + p - m ; check whether integer value of n exist by the formula n = ( - 1 + sqrt ( 1 + 8 * S ( n ) ) ) / 2
Driver code
Function calling
Function to return the number of subarrays with sum atleast k
To store the right index and the current sum
To store the number of sub - arrays
For all left indexes
Get elements till current sum is less than k
No such subarray is possible
Add all possible subarrays
Remove the left most element
Return the required answer
Driver code
Function that returns true if the array contains a crest in the index range [ L , R ]
To keep track of elements which satisfy the Property
Property is satisfied for the current element
Cumulative Sum
If a crest is present in the given index range
Driver code
Python3 program to find the maximum SoP of two arrays by toggling adjacent bits in the second array
Function to return Max Sum
intialParity and finalParity are 0 if total no . of 1 's is even else 1
minPositive and maxNegative will store smallest positive and smallest negative integer respectively .
Count of Initial Parity
if arr1 [ i ] is positive then add 1 in finalParity to get 1 at arr2 [ i ]
if both parity are odd or even then return sum
else add one more 1 or remove 1
if minPositive > maxNegative , put 1 at maxNegative and add it to our sum
else remove minPositive no .
Driver code
Function to check if X is lexicographically larger Y
It is lexicographically larger
Utility function to check minimum value of d
If X is already larger do not need to add anything
Adding d to all elements of X
If X is larger now print d
else print d + 1
Driver Code
Taking the numbers as sequences
Function to return the maximum bitwise OR of any pair from the given range
Converting L to its binary representation
Converting R to its binary representation
In order to make the number of bits of L and R same
Push 0 to the MSB
When ith bit of R is 1 and ith bit of L is 0
From MSB side set all bits of L to be 1
From ( i + 1 ) th bit , all bits of L changed to be 1
Driver code
Function to calculate value of X
Check for both possibilities
Driver Code
Function to find the minimum length
Function to find the minimum length String
Driver code
Python3 implementation of the approach
Function to return the minimum number of halls required
Array to store the number of lectures ongoing at time t
For every lecture increment start point s decrement ( end point + 1 )
Perform prefix sum and update the ans to maximum
Driver code
Function to return the minimum capacity required
To store the minimum capacity
To store the current capacity of the train
For every station
Add the number of people entering the train and subtract the number of people exiting the train to get the current capacity of the train
Update the minimum capacity
Driver code
Python3 implementation of the approach
Maximum possible valid number
To store all the required number from the range [ 1 , MAX ]
Function that returns true if x satisfies the given conditions
To store the digits of x
If current digit appears more than once
If current digit is greater than 5
Put the digit in the map
Function to generate all the required numbers in the range [ 1 , MAX ]
Insert first 5 valid numbers
Inserting 0 externally because 0 cannot be the leading digit in any number
If x satisfies the given conditions
Cannot append anymore digit as adding a digit will repeat one of the already present digits
Append all the valid digits one by one and append the new generated number to the queue
Append the digit
Push the newly generated number to the queue
Function to copmpare two strings which represent a numerical value
Function to return the count of valid numbers in the range [ l , r ]
Generate all the valid numbers in the range [ 1 , MAX ]
To store the count of numbers in the range [ l , r ]
For every valid number in the range [ 1 , MAX ]
If current number is within the required range
If number is equal to either l or r
Driver code
Function to find the permutation
Put n at the first index 1
Put all the numbers from 2 to n sequentially
Driver code
Display the permutation
Function to return the lexicographically smallest string of length n that satisfies the given condition
Iteration from the last position in the array
If k is a positive integer
' z ' needs to be inserted
Add the required character
Driver code
Function to check is it possible to rearrange the string such that every odd length substring is palindrome
Length of the string
To count number of distinct character in string
To count frequency of each character
Inserting into set
Incrementing the frequency
All characters in the string are same
There are more than 2 different character in string
Currently there is 2 different character in string
Get the frequencies of the characters that present in string
Difference between their count is less than or equal to 1
Driver code
Function to return the minimum possible value of the last element left after performing the given operations
Driver code
Function to find largest sub with same characters
Traverse the string
If character is same as previous increment temp value
Return the required answer
Driver code
Function call
Function to find number of balanced parenthesis sub strings
To store required answer
Vector to stores the number of balanced brackets at each depth .
d stores checks the depth of our sequence For example level of ( ) is 1 and that of ( ( ) ) is 2.
If open bracket increase depth
If closing bracket
Return the required answer
Driver code
Function call
Function to calculate x ^ y % mod efficiently
Initialize the answer
If power is odd
Update the answer
Square the base and half the exponent
Return the value
Function to calculate ncr % mod efficiently
Initialize the answer
Calculate ncr in O ( r )
Multiply with the numerator factor
Calculate the inverse of factor of denominator
Multiply with inverse value
Return answer value
Function to return the number of non intersecting chords
define mod value
Value of C ( 2 n , n )
Modulo inverse of ( n + 1 )
Multiply with modulo inverse
Return the answer
Driver code
Function call
Function to return the length of the longest sub - array having positive XOR
To store the XOR of all the elements
To check if all the elements of the array are 0 s
Take XOR of all the elements
If any positive value is found the make the checkallzero false
If complete array is the answer
If all elements are equal to zero
Initialize l and r
First positive value of the array
Last positive value of the array
Maximum length among these two subarrays
Driver code
Python3 implementation of the approach
Function to return the minimum length of a sub - array which contains 0 , 1 , 2 , 3 , 4 as a sub - sequence
To store the indices where 0 , 1 , 2 , 3 and 4 are present
To store if there exist a valid prefix of sequence in array
Base Case
If current element is 0
Update the count of 0 s till now
Push the index of the new 0
To check if previous element of the given sequence is found till now
If it is the end of sequence
Iterate for other elements of the sequence
Binary Search to find closest occurrence less than equal to starting point
Update the starting point
Driver code
Function to find the optimal weights
Number of weights required
Finding the value of required powers of 3
Optimal Weights are powers of 3
Driver code
Python3 implementation of the approach
Function to return the chosen indices
Maximum indices chosen
Try to replace the first element in ans by i , making the order lexicographically smaller
If no further replacement possible return
If found an index smaller than ind and sum not exceeding X then remove index of smallest value from ans and then add index i to ans
Driver code
Print the chosen indices
Function to check if matrix exists
Store sum of rowsums , max of row sum number of non zero row sums
Store sum of column sums , max of column sum number of non zero column sums
Check condition 1 , 2 , 3
Driver Code
Function to find maximum distance between unequal elements
Calculate maxMean
Iterate over array and calculate largest subarray with all elements greater or equal to maxMean
Driver code
Function to return the maximum distance between two unequal elements
If first and last elements are unequal they are maximum distance apart
Fix first element as one of the elements and start traversing from the right
Break for the first unequal element
To store the distance from the first element
Fix last element as one of the elements and start traversing from the left
Break for the first unequal element
To store the distance from the last element
Maximum possible distance
Driver code
Python3 implementation of the approach
Function which will check if there is a path between a and b by using BFS
Function to return the minimum number of pairs
To store the count of pairs
Iterating through the strings
Check if we can add an edge in the graph
Return the count of pairs
Driver code
Function that print the desired array which satisfies the given conditions
If the lowest filling condition is void , then it is not possible to generate the required array
Increase all the elements by cnt
Start filling from the back till the number is a [ i + 1 ] <= 2 * a [ i ]
Get the number to be filled
If it is less than the remaining numbers to be filled
less than remaining numbers to be filled
Get the sum of the array
If this condition is void at any stage during filling up , then print - 1
Else add it to the sum
If the sum condition is not satisified , then print - 1
Print the generated array
Driver code
Python3 implementation of the approach
Function to return the minimized sum
To store the frequency of bit in every element
Finding element X
Taking XOR of elements and finding sum
Driver code
Function to return the maximum coins we can get
Update elements such that X > Y
Take from the maximum
Refill
Again , take the maximum
Driver code
Function that returns the minimum value of X
Declare a set
Iterate in the array element and insert them into the set
If unique elements is 1
Unique elements is 2
Get both el2 and el1
Check if they are even
If there are 3 unique elements
Get three unique elements
Check if their difference is same
More than 3 unique elements
Driver code
Function to find the number of elements crossed
Keep a copy of a
Iterate in the binary array
If no a and b left to use
If there is no a
use b and increase a by 1 if arr [ i ] is 1
simply use b
Use a if theres no b
Increase a and use b if arr [ i ] == 1
Use a
Driver code
Utility function to print the contents of an array
Function that pushes all the zeros to the start and ones to the end of an array
To store the count of elements which are not equal to 1
Traverse the array and calculate count of elements which are not 1
Now all non - ones elements have been shifted to front and ' count1' is set as index of first 1. Make all elements 1 from count to end .
Initialize lastNonBinary position to zero
Traverse the array and pull non - zero elements to the required indices
Ignore the 1 's
Mark the position Of last NonBinary integer
Place non - zero element to their required indices
Put zeros to start of array
Driver code
Function that return true if character ch is a vowel
Function to return the count of adjacent vowel pairs in the given string
If current character and the character after it are both vowels
Driver code
Function to return the gcd of two numbers
Function to return the minimum possible health for the monster
gcd of first and second element
gcd for all subsequent elements
Driver code
Function to print strictly increasing and strictly decreasing sequence if possible
Arrays to store strictly increasing and decreasing sequence
Initializing last element of both sequence
Iterating through the array
If current element can be appended to both the sequences
If next element is greater than the current element Then append it to the strictly increasing array
Otherwise append it to the strictly decreasing array
If current element can be appended to the increasing sequence only
If current element can be appended to the decreasing sequence only
Else we can not make such sequences from the given array
Print the required sequences
Driver code
Function to return the reverse of a number
Function to find the sum of the odd and even positioned digits in a number
If c is even number then it means digit extracted is at even place
Driver code
Function to find the sum of the odd and even positioned digits in a number
If n is odd then the last digit will be odd positioned
To store the respective sums
While there are digits left process
If current digit is odd positioned
Even positioned digit
Invert state
Remove last digit
Driver code
Function to return the amount of notes with value A required
If possible
Driver code
Function to print the two parts
Find the position of 4
Print both the parts
Driver code
Function to return the length of the required sub - string
Get the length of the string
Iterate in the string
Check for not consecutive
If cnt greater than maxi
Re - initialize
Check after iteration is complete
Driver code
Function to return the count of minimum operations required
To store the count of negative integers on the right of the current index ( inclusive )
Find the count of negative integers on the right
If current element is negative
To store the count of positive elements
Find the positive integers on the left
If current element is positive
Update the answer
Return the required answer
Driver code
Function for finding sum of elements whose diff with mean is not more than k
Find the mean of second array
Find sum of elements from array1 whose difference with mean is not more than k
Return result
Driver code
Function to find n positive integers that satisfy the given conditions
To store n positive integers
Place N - 1 one 's
If can not place ( y - ( n - 1 ) ) as the Nth integer
Place Nth integer
To store the sum of squares of N integers
If it is less than x
Print the required integers
Driver code
Function to find a minimum number of steps to reach M from N
Continue till m is greater than n
If m is odd
add one
divide m by 2
Return the required answer
Driver code
Utility function to calculate sum of numbers from 1 to x
Function to find the number of jumps to reach X in the number line from zero
First make number positive Answer will be same either it is Positive or negative
To store the required answer
Continue till number is lesser or not in same parity
Return the required answer
Driver code
Function to return the maximum candies that can be bought
Buy all the candies of the last type
Starting from second last
Amount of candies of the current type that can be bought
Add candies of current type that can be bought
Update the previous bought amount
Driver code
Function to print the array elements
Function to replace all elements with absolute difference of absolute sums of positive and negative elements
Calculate absolute sums of positive and negative elements in range i + 1 to N
calculate difference of both sums
replace i - th elements with absolute difference
Driver code
Function to check if string is palindrome or not
Function to check if it is possible to get result by making just one cut
Appending last element in front
Removing last element
Checking whether string s2 is palindrome and different from s .
If length is <= 3 then it is impossible
Array to store frequency of characters
Store count of characters in a array
Condition for edge cases
Return 1 if it is possible to get palindromic string in just one cut . Else we can always reached in two cuttings .
Driver Code
Recursive function to find minimum number of cuts if length of string is even
If length is odd then return 2
To check if half of palindromic string is itself a palindrome
If not then return 1
Else call function with half palindromic string
Function to find minimum number of cuts If length of string is odd
If length is <= 3 then it is impossible
Array to store frequency of characters
Store count of characters in a array
Condition for edge cases
If length is even
If length is odd
Driver Code
Function to return the minimum changes required
To store the count of minimum changes , number of ones and the number of zeroes
First character has to be '1
If condition fails changes need to be made
Return the required count
Driver code
Function to return the count of possible steps in a single direction
It can cover infinite steps
We are approaching towards X = N
We are approaching towards X = 1
Function to return the count of steps
Take the minimum of both moves independently
Update count and current positions
Driver code
Function to return the minimum number of elements that must be removed to make the given array good
Count frequency of each element
For each element check if there exists another element that makes a valid pair
If does not exist then increment answer
Driver Code
Returns the minimum number of eliminations
Stores the previous element
Stores the new value
Check if the previous and current values are of same parity
Previous value is now the current value
Return the counter variable
Driver code
Function to return the count of required numbers
If N is odd then return 0
Driver Code
Function that returns true if it possible to form a team with the given n and m
1 person of Type1 and 2 persons of Type2 can be chosen
1 person of Type2 and 2 persons of Type1 can be chosen
Cannot from a team
Function to return the maximum number of teams that can be formed
To store the required count of teams formed
Choose 2 persons of Type1
And 1 person of Type2
Choose 2 persons of Type2
And 1 person of Type1
Another team has been formed
Driver code
Function to find the maximum of two values
Function to find the smallest side of the suitable suitcase
sort array to find the smallest and largest side of suitcases
side of the suitcase will be smallest if they arranged in 2 x 2 way so find all possible sides of that arrangement
since suitcase should be square so find maximum of all four side
now find greatest side and that will be the smallest square
return the result
Driver Code
Get the side of the 4 small squares
Find the smallest side
Get the side of the 4 small squares
Find the smallest side
Python3 implementation of the approach
Function to print the length ( l ) and breadth ( b ) of the rectangle having area = N and | l - b | as minimum as possible
i is a factor
l >= sqrt ( area ) >= i
so here l is + ve always
Here l and b are length and breadth of the rectangle
Driver code
Python3 implementation of the approach
Function to print the length ( l ) and breadth ( b ) of the rectangle having area = N and | l - b | as minimum as possible
Driver code
Python3 implementation of the approach
Function to return the size of the required sub - set
Sort the array
Set to store the contents of the required sub - set
Insert the elements satisfying the conditions
Return the size of the set
Driver code
Python3 program to find the minimum number sets with consecutive numbers and less than Y
Function to find the minimum number of shets
Variable to count the number of sets
Iterate in the string
Add the number to string
Mark that we got a number
Check if previous was anytime less than Y
Current number
Check for current number
Check for last added number
Driver Code
Python 3 implementation of the approach
Utility function to print the contents of the array
Function to build array B [ ]
Lower and upper limits
To store the required array
Apply greedy approach
Print the built array b [ ]
Driver code
Function to return the number of lines required
If string is empty
Initialize lines and width
Iterate through S
Return lines and width used
Driver Code
Function call to print required answer
Python implementation of the approach
Function to return true if the elements can be arranged in the desired order
If 2 * x is not found to pair
Remove an occurrence of x and an occurrence of 2 * x
Driver Code
Function call to print required answer
Python3 program to find the maximum sum after given operations
Function to calculate Maximum Subarray Sum or Kadane 's Algorithm
Function to find the maximum sum after given operations
To store sum of all elements
Maximum sum of a subarray
Calculate the sum of all elements
Driver Code
size of an array
Function to minimize the difference between minimum and maximum elements
Find max and min elements of the array
Check whether the difference between the max and min element is less than or equal to k or not
Calculate average of max and min
If the array element is greater than the average then decrease it by k
If the array element is smaller than the average then increase it by k
Find max and min of the modified array
return the new difference
Driver code
Python3 implementation of the above approach
if buying glass bottles is profitable
Glass bottles that can be bought
Change budget according the bought bottles
Plastic bottles that can be bought
if only plastic bottles need to be bought
Driver Code
Function to find number from given list for which value of the function is closest to A
Stores the final index
Declaring a variable to store the minimum absolute difference
Finding F ( n )
Updating the index of the answer if new absolute difference is less than tmp
Driver Code
Python3 program to find permutation of n which is divisible by 3 but not divisible by 6
Function to find the permutation
length of integer
if integer is even
return odd integer
rotate integer
return - 1 in case no required permutation exists
Driver Code
Python3 program to find the maximum score after flipping a Binary Matrix atmost K times
Function to find maximum score of matrix
Find value of rows having first column value equal to zero
update those rows which lead to maximum score after toggle
Calculating answer
check if K > 0 we can toggle if necessary .
return max answer possible
Driver Code
function call to print required answer
Function that returns true is selling of the tickets is possible
Nothing to return to the customer
Check if 25 can be returned to customer .
Try returning one 50 and one 25
Try returning three 25
If the loop did not break , all the tickets were sold
Driver Code
Function to check if any cell can be visited more than once
Array to mark cells
Traverse the string
Increase the visit count of the left and right cells within the array which can be visited
If any cell can be visited more than once , Return True
Driver code
Check if the digits follow the correct order
to store the previous digit
pointer to tell what type of sequence are we dealing with
check if we have same digit as the previous digit
checking the peak point of the number
check if we have same digit as the previous digit
check if the digit is greater than the previous one If true , then break from the loop as we are in descending order part
Driver code
Returns optimal value possible that a player can collect from an array of coins of size n . Note than n must be even
Find sum of odd positioned coins
Find sum of even positioned coins
Print even or odd coins depending upon which sum is greater .
Driver code
Python3 implementation to find minimum spanning tree for adjacency representation .
Returns true if edge u - v is a valid edge to be include in MST . An edge is valid if one end is already included in MST and other is not in MST .
Include first vertex in MST
Keep adding edges while number of included edges does not become V - 1.
Find minimum weight valid edge .
Driver Code
Let us create the following graph 2 3 ( 0 ) -- ( 1 ) -- ( 2 ) | / \ | 6 | 8 / \ 5 | 7 | / \ | ( 3 ) -- -- -- - ( 4 ) 9
Print the solution
function to return the index
Add Last element tp currSum
Save Difference of previous Iteration
Calculate new Difference
When the Sum exceeds K
Current Difference greater in magnitude Store Temporary Result
Difference in Previous was lesser In previous , Right index = j - 1
In next iteration , Left Index Increases but Right Index remains the Same Update currSum and i Accordingly
Case to simply increase Right Index
Check if lesser deviation found
Driver Code
function to print length and breadth
sort the input array
create array vector of integers occurring in pairs
push the same pairs
calculate length and breadth as per requirement
check for given condition
print the required answer
Driver Code
function to find the smallest sum contiguous subarray
First invert the sign of the elements
Apply the normal Kadane algorithm but on the elements of the array having inverted sign
Invert the answer to get minimum val
Driver Code
Function to print the K smallest pairs
if k is greater than total pairs
_pair _one keeps track of ' first ' in a1 and ' second ' in a2 in _two , _two [ 0 ] keeps track of element in the a2and _two [ 1 ] in a1 [ ]
Repeat the above process till all K pairs are printed
when both the pointers are pointing to the same elements ( po3 )
updates according to step 1
if ( _one [ 1 ] == 0 ) : see po2
updates opposite to step 1
updates according to rule 1
if ( _one [ 0 ] == 0 ) : see po2
updates opposite to rule 1
if ( _two [ 0 ] == 0 ) : see po2
else update as necessary ( po1 )
updating according to rule 1
if ( _one [ 1 ] == 0 ) : see po2
updating according to rule 1
if ( _one [ 0 ] == 0 ) : see po2
updating according to rule 1
if ( _two [ 0 ] == 0 ) : see po2
updating according to rule 1
if ( _two [ 1 ] == 0 ) : see po2
Driver Code
Function to print the largest number
store the index of largest left most digit of elements
Iterate for all numbers
check for the last digit
check for the largest left most digit
print the rotation of array
print the rotation of array
Driver Code
Python program to find minimum number of operations to convert a given sequence to an Geometric Progression
Function to print the GP series
Check for possibility
Function for getting the Arithmetic Progression
The array c describes all the given set of possible operations .
Size of c
candidate answer
loop through all the permutations of the first two elements .
a1 and a2 are the candidate first two elements of the possible GP .
temp stores the current answer , including the modification of the first two elements .
common ratio of the possible GP
To check if the chosen set is valid , and id yes find the number of operations it takes .
ai is value of a [ i ] according to the assumed first two elements a1 , a2 ith element of an GP = a1 * ( ( a2 - a1 ) ^ ( i - 1 ) )
Check for the " proposed " element to be only differing by one
set the temporary ans
to infinity and break
update answer
Calling function to print the sequence
Driver Code
array is 1 - indexed , with a [ 0 ] = 0 for the sake of simplicity
Function to print the minimum operations and the sequence of elements
Python 3 program to make GCD of array a multiple of k .
If array value is not 1 and it is greater than k then we can increase the or decrease the remainder obtained by dividing k from the ith value of array so that we get the number which is either closer to k or its multiple
Else we only have one choice which is to increment the value to make equal to k
Driver code
Python3 program to find maximum product of a subset .
Find count of negative numbers , count of zeros , negative number with least absolute value and product of non - zero numbers
If number is 0 , we don 't  multiply it with product.
Count negatives and keep track of negative number with least absolute value .
If there are all zeros
If there are odd number of negative numbers
Exceptional case : There is only negative and all other are zeros
Otherwise result is product of all non - zeros divided by negative number with least absolute value
Driver Code
Function to find out the farthest position where one of the currently ongoing tasks will rehappen .
Iterate form last to current position and find where the task will happen next .
Find out maximum of all these positions and it is the farthest position .
Function to find out minimum cost to process all the tasks
freqarr [ i ] [ j ] denotes the frequency of type j task after position i like in array 1 , 2 , 1 , 3 , 2 , 1 frequency of type 1 task after position 0 is 2. So , for this array freqarr [ 0 ] [ 1 ] = 2. Here , i can range in between 0 to m - 1 and j can range in between 0 to m ( though there is not any type 0 task ) .
Fill up the freqarr vector from last to first . After m - 1 th position frequency of all type of tasks will be 0. Then at m - 2 th position only frequency of arr [ m - 1 ] type task will be increased by 1. Again , in m - 3 th position only frequency of type arr [ m - 2 ] task will be increased by 1 and so on .
isRunning [ i ] denotes whether type i task is currently running in one of the cores . At the beginning no tasks are running so all values are false .
cost denotes total cost to assign tasks
truecount denotes number of occupied cores
iterate through each task and find the total cost .
ele denotes type of task .
Case 1 : if same type of task is currently running cost for this is 0.
Case 2 : same type of task is not currently running .
Subcase 1 : if there is at least one free core then assign this task to that core at a cost of 1 unit .
Subcase 2 : No core is free
set minimum frequency to a big number
set index of minimum frequency task to 0.
find the minimum frequency task type ( miniind ) and frequency ( mini ) .
If minimum frequency is zero then just stop the task and start the present task in that core . Cost for this is 1 unit .
If minimum frequency is nonzero then find the farthest position where one of the ongoing task will rehappen . Stop that task and start present task in that core .
find out the farthest position using find function
return total cost
Driver Code
Test case 1
Test case 2
Test case 3
Function to calculate Fibonacci Terms
Calculate all Fibonacci terms which are less than or equal to K .
If next term is greater than K do not push it in vector and return .
Function to find the minimum number of Fibonacci terms having sum equal to K .
Vector to store Fibonacci terms .
Subtract Fibonacci terms from sum K until sum > 0.
Divide sum K by j - th Fibonacci term to find how many terms it contribute in sum .
Driver code
Python program to find smallest number to find smallest number with N as sum of digits and divisible by 10 ^ N .
If N = 0 the string will be 0
If n is not perfectly divisible by 9 output the remainder
Print 9 N / 9 times
Append N zero 's to the number so  as to make it divisible by 10^N
Driver Code
Python program to divide n integers in two groups such that absolute difference of their sum is minimum
To print vector along size
Print vector size
Print vector elements
To divide n in two groups such that absolute difference of their sum is minimum
Find sum of all elements upto n
Sum of elements of group1
If sum is greater then or equal to 0 include i in group 1 otherwise include in group2
Decrease sum of group1
Print both the groups
driver code
Python3 program to find maximum number of customers that can be satisfied
print maximum number of satisfied customers and their indexes
Creating an vector of pair of total demand and customer number
Sorting the customers according to their total demand
Taking the first k customers that can be satisfied by total amount d
Driver Code
Initializing variables
Function to calculate max_difference
Sum of the array
Sort the array in descending order
Calculating max_difference
Driver Code
Function to find the minimum product
Find product of current elements and update result .
If both product and b [ i ] are negative , we must increase value of a [ i ] to minimize result .
If both product and a [ i ] are negative , we must decrease value of a [ i ] to minimize result .
Similar to above two cases for positive product .
Check if current difference becomes higher than the maximum difference so far .
Driver function
Function to calculate the maximum number of composite numbers adding upto n
4 is the smallest composite number
stores the remainder when n is divided n is divided by 4
if remainder is 0 , then it is perfectly divisible by 4.
if the remainder is 1
If the number is less then 9 , that is 5 , then it cannot be expressed as 4 is the only composite number less than 5
If the number is greater then 8 , and has a remainder of 1 , then express n as n - 9 a and it is perfectly divisible by 4 and for 9 , count 1.
When remainder is 2 , just subtract 6 from n , so that n is perfectly divisible by 4 and count 1 for 6 which is subtracted .
if the number is 7 , 11 which cannot be expressed as sum of any composite numbers
when the remainder is 3 , then subtract 15 from it and n becomes perfectly divisible by 4 and we add 2 for 9 and 6 , which is getting subtracted to make n perfectly divisible by 4.
Driver Code
Returns maximum number of thieves that can be caught .
store indices in list
track lowest current indices of thief : thi [ l ] , police : pol [ r ]
can be caught
increment the minimum index
Driver program
function for min rotation
iterate till input and unlock code become 0
input and unlock last digit as reminder
find min rotation
update code and input
Driver Code
Python3 program to check if all jobs can be scheduled if two jobs are allowed at a time .
making a pair of starting and ending time of job
sorting according to starting time of job
starting first and second job simultaneously
Checking if starting time of next new job is greater than ending time of currently scheduled first job
Checking if starting time of next new job is greater than ending time of ocurrently scheduled second job
Driver Code
startin = [ 1 , 2 , 4 ] starting time of jobs endin = [ 2 , 3 , 5 ] ending times of jobs
Python3 program to acquire all n coins at minimum cost with multiple values of k .
Converts coin [ ] to prefix sum array
sort the coins values
maintain prefix sum array
Function to calculate min cost when we can get k extra coins after paying cost of one .
calculate no . of coins needed
return sum of from prefix array
Driver code
Function to allocate memory to blocks as per worst fit algorithm
Initially no block is assigned to any process
pick each process and find suitable blocks according to its size ad assign to it
Find the best fit block for current process
If we could find a block for current process
allocate block j to p [ i ] process
Reduce available memory in this block .
Driver code
This function does k operations on array in a way that maximize the array sum . index -- > stores the index of current minimum element for j 'th operation
Modify array K number of times
Find minimum element in array for current operation and modify it i . e ; arr [ j ] -- > - arr [ j ]
this the condition if we find 0 as minimum element , so it will useless to replace 0 by - ( 0 ) for remaining operations
Modify element of array
Calculate sum of array
Driver code
Python3 program to find maximum array sum after at most k negations
Sorting given array using in - built java sort function
If we find a 0 in our sorted array , we stop
Calculating sum
Driver code
Function to calculate sum of the array
Iterate from 0 to n - 1
Function to maximize sum
Iterate from 0 to n - 1
Driver Code
Function Call
Returns number of bins required using first fit online algorithm
Initialize result ( Count of bins )
Create an array to store remaining space in bins there can be at most n bins
Place items one by one
Find the first bin that can accommodate weight [ i ]
If no bin could accommodate weight [ i ]
Driver program
Python program for the above approach
Function to return the minimum cost of converting A and B to 0
If both A and B doesn 't change in  this recusrive call, then return INT_MAX  to save the code from going into  infinite loop
Base Case
If the answer of this recursive call is already memoised
If A is reduced to A / 2
If B is reduced to B / 2
If both A and B is reduced to sqrt ( A * B )
Return the minimum of the value given by the above three subproblems , also memoize the value while returning
Driver Code
Function to find the maximum defined score
If all students are assigned
Check if row is not paired yet
Check for all indexes
If values at current indexes are same increase curSum
Further recursive call
Store the ans for current mask and return
Utility function to find the maximum defined score
Create a mask with all set bits 1 -> row is not paired yet 0 -> row is already paired
Initialise dp array with - 1
Driver Code
Function to find the maximum sum of differences of subarrays by splitting array into non - overlapping subarrays
Stores the answer for prefix and initialize with zero
Assume i - th index as right endpoint
Choose the current value as the maximum and minimum
Find the left endpoint and update the array dp [ ]
Return answer
Driver Code
python 3 program for the above approach
Find the value of x raised to the yth power modulo MOD
Stores the value of x ^ y
Iterate until y is positive
Function to perform the Modular Multiplicative Inverse using the Fermat 's little theorem
Modular division x / y , find modular multiplicative inverse of y and multiply by x
Function to find Binomial Coefficient C ( n , k ) in O ( k ) time
Base Case
Update the value of p and q
Function to find the count of arrays having K as the first element satisfying the given criteria
Stores the resultant count of arrays
Find the factorization of K
Stores the count of the exponent of the currentprime factor
N is one last prime factor , for c = 1 -> C ( N - 1 + 1 , 1 ) = N
Return the totol count
Driver Code
Python 3 program for the above approach
Function to calculate the minimum work sessions
Break condition
All bits are set
Check if already calculated
Store the answer
Check if ith bit is set or unset
Including in current work session
Including in next work session
Resultant answer will be minimum of both
Function to initialize DP array and solve the problem
Initialize dp table with - 1
Resultant mask
no . of minimum work sessions is even
no . of minimum work sessions is odd
Driver code
Python 3 program for the above approach
Define the dp table globally
Recursive function to calculate total number of valid non - decreasing strings
If already calculated state
Base Case
Stores the total count of strings formed
Fill the value in dp matrix
Function to find the total number of non - decreasing string formed by replacing the '?
Initialize all value of dp table with - 1
Left and Right limits
Iterate through all the characters of the string S
Change R to the current character
Call the recursive function
Change L to R and R to 9
Reinitialize the length of ? to 0
Increment the length of the segment
Update the ans
Return the total count
Driver Code
Recursive function to find the Kth smallest binary string
Base Case
Return string of all 1 's  of length B
Return string of all 0 's  of length A
Function to find the Kth lexicographically smallest binary string with exactly A zeroes and B ones
Stores the recurring states
Calculate the dp values iteratively
The last character was '1
Print the binary string obtained
Driver Code
Function to return the number of total possible combinations of 0 and 1 to form an array of size N having sum of product of consecutive elements K
If value is greater than K , then return 0 as no combination is possible to have sum K
Check if the result of this recursive call is memoised already , if it is then just return the previously calculated result
Check if the value is equal to K at N , if it is then return 1 as this combination is possible . Otherwise return 0.
If previous element is 1
If current element is 1 as well , then add 1 to value
If current element is 0 , then value will remain same
If previous element is 0 , then value will remain same irrespective of the current element
Memoise and return the ans
Driver Code
As the array can be started by 0 or 1 , so take both cases while calculating the total possible combinations
Python3 program for the above approach
Function to count ways to split an array into subarrays such that sum of the i - th subarray is divisible by i
Stores the prefix sum of array
Find the prefix sum
Initialize dp [ ] [ ] array
Stores the count of splitting
Iterate over the range [ 0 , N ]
Update the dp table
If the last index is reached , then add it to the variable ans
Return the possible count of splitting of array into subarrays
Driver Code
Function to find the total number of ways to tile a 2 * N board using the given types of tile
If N is less than 3
Store all dp - states
Base Case
Traverse the range [ 2 , N ]
Update the value of dp [ i ] [ 0 ]
Update the value of dp [ i ] [ 1 ]
Update the value of dp [ i ] [ 2 ]
Return the number of ways as the value of dp [ N ] [ 0 ]
Driver Code
Store the recurring recursive states
Function to find the number of strings of length N such that it is a concatenation it substrings
Single character cant be repeated
Check if this state has been already calculated
Stores the resultant count for the current recursive calls
Iterate over all divisors
Non - Repeated = Total - Repeated
Non - Repeated = Total - Repeated
Store the result for the further calculation
Return resultant count
Driver Code
Function Call
python program for the above approach
Function to count N - digit numbers such that each position is divisible by the digit occurring at that position
Stores the answer .
Iterate from indices 1 to N
Stores count of digits that can be placed at the current index
Iterate from digit 1 to 9
If index is divisible by digit
Multiply answer with possible choices
Given Input
Function call
Recursive function to find the maximum number of groups that will receive fresh donuts
Store the result for the current state
Check if the leftover donuts from the previous batch is 0
If true , then one by one give the fresh donuts to each group
Decrement arr [ i ]
Update the maximum number of groups
Increment arr [ i ]
Otherwise , traverse the given array , arr [ ]
Decrement arr [ i ]
Update the maximum number of groups
Increment arr [ i ]
Return the value of q
Function to find the maximum number of groups that will receive fresh donuts
Stores count of remainder by K
Traverse the array arr [ ]
Stores maximum number of groups
Return the answer
Driver Code
Function to find the maximum jumps to reach end of array
Stores the jumps needed to reach end from each index
Traverse the array
Check if j is less than N
Add dp [ j ] to the value of dp [ i ]
Update the value of ans
Print the value of ans
Driver Code
Function to find the length of the longest subsequence with non negative prefix sum at each position
Initialize dp array with - 1
Maximum subsequence sum by including no elements till position 'i
Maximum subsequence sum by including first element at first position
Iterate over all the remaining positions
If the current element is excluded
If current element is included and if total sum is positive or not
Select the maximum j by which a non negative prefix sum subsequence can be obtained
Print the answer
Driver Code
Declaration of dp table
Function to find the count of all N digit numbers such that all the digit is less than its adjacent digits
Base Case : If i = n , then return 1 as valid number has been formed
If the state has already been computed , then return it
Stores the total count of ways for the current recursive call
If i = 0 , any digit from [ 1 - 9 ] can be placed and also if N = 1 , then 0 can also be placed
If i = 1 , any digit from [ 0 - 9 ] can be placed such that digit is not equal to previous digit
If the current digit is not same as the prev
Place the current digit such that it is less than the previous digit
Place current digit such that it is more than the previous digit
Return the resultant total count
Function to find all N - digit numbers satisfying the given criteria
Function call to count all possible ways
Driver Code
Function to count total number of ways
Stores all DP - states
Stores the result
Traverse the range [ 0 , N ]
Traverse the range [ 1 , R - L ]
Update dp [ i ] [ j ]
Assign dp [ 0 ] [ R - L ] to ans
Traverse the range [ 1 , N ]
Traverse the range [ 1 , R - L ]
Update dp [ i ] [ j ]
Increment ans by dp [ i - 1 ] [ j ]
Return ans
Driver Code
Input
Function call
Function to find longest common subarray in all the rows of the matrix
Array to store the position of element in every row
Traverse the matrix
Store the position of every element in every row
Variable to store length of largest common Subarray
Traverse through the matrix column
Variable to check if every row has arr [ i ] [ j ] next to arr [ i - 1 ] [ j ] or not
Traverse through the matrix rows
Check if arr [ i ] [ j ] is next to arr [ i ] [ j - 1 ] in every row or not
If every row has arr [ 0 ] [ j ] next to arr [ 0 ] [ j - 1 ] increment len by 1 and update the value of ans
Driver Code
Given Input
Function Call
Function to find the maximum sum that can be obtained from two given arrays based on the following conditions
Stores the maximum sum from 0 to i
Initialize the value of dp [ 0 ] [ 0 ] and dp [ 0 ] [ 1 ]
Traverse the array A [ ] and B [ ]
If A [ i ] is considered
If B [ i ] is not considered
If B [ i ] is considered
If i = 1 , then consider the value of dp [ i ] [ 1 ] as b [ i ]
Return maximum sum
Driver code
Given input
Function call
Python3 program for the above approach
Function to fill dp array
Initialize all the entries with 0
Update dp [ 0 ] [ 0 ] to 1
Traverse the dp array
Update the value of dp [ i ] [ j ]
Recursive function to find the Kth lexicographical smallest string
Handle the base cases
If there are more than or equal to K strings which start with a , then the first character is 'a
Otherwise the first character of the resultant string is 'b
Function to find the Kth lexicographical smallest string
Function call to fill the dp array
Print the resultant
Given Input
Function Call
Function that finds the maximum tips from the given arrays as per the given conditions
Base Condition
If both have non - zero count then return max element from both array
Traverse first array , as y count has become 0
Traverse 2 nd array , as x count has become 0
Drive Code
Function Call
Function to calculate the number of bars that are visible from the left for a particular arrangement
If current element is greater than the last greater element , it is visible
Function to calculate the number of rearrangements where K bars are visiblef from the left
Vector to store current permutation
Check for all permutations
If current permutation meets the conditions , increment answer
Driver code
Input
Function call
Function to calculate the number of permutations of N , where only K bars are visible from the left .
Only ascending order is possible
N is placed at the first position The nest N - 1 are arranged in ( N - 1 ) ! ways
Recursing
Driver code
Input
Function call
Function for finding minimum deletions so that the array becomes non decreasing and the difference between adjacent elements also becomes non decreasing
initialize answer to a large value
generating all subsets
checking the first condition
checking the second condition
if both conditions are satisfied consider the answer for minimum
Driver code
Input
Function call
Function to calculate maximum sum possible by taking at most K elements that is divisibly by D
Variable to store final answer
Traverse all subsets
Update ans if necessary conditions are satisfied
Driver code
Input
Function call
Function to find the longest subsequence that matches with the substring of other string
Stores the lengths of strings X and Y
Create a matrix
Initialize the matrix
Fill all the remaining rows
If the characters are equal
If not equal , then just move to next in subsequence string
Find maximum length of the longest subsequence matching substring of other string
Iterate through the last row of matrix
Store the required string
Backtrack from the cell
If equal , then add the character to res string
Return the required string
Driver code
Python3 program for the above approach
Store valid dimensions
Stores memoization
Utility function to calculate minimum invalid area for Chocolate piece having dimension ( l , r )
Check whether current piece is valid or not If it is , then return zero for current dimension
Making all possible horizontal cuts , one by one and calculating the sum of minimum invalid area for both the resulting pieces
Making all possible vertical cuts , one by one and calculating the sum of minimum invalid area for both the resulting pieces
Store the computed result
Function to calculate minimum invalid area for Chocolate piece having dimension ( l , r )
Total number of valid dimensions
Storing valid dimensions as for every ( x , y ) both ( x , y ) and ( y , x ) are valid
Fill dp [ ] [ ] table with - 1 , indicating that results are not computed yet
Stores minimum area
PrminArea as the output
Driver Code
Given N & M
Given valid dimensions
Function Call
Function to count all pairs ( i , j ) such that arr [ i ] equals arr [ j ] in all possible subarrays of the array
Stores the size of the array
Stores the positions of all the distinct elements
Append index corresponding to arr [ i ] in the map
Traverse the map M
Traverse the array
Update the value of ans
Update the value of the sum
Print the value of ans
Driver Code
Function to count number of alternating substrings from a given binary string
Initialize dp array , where dp [ i ] [ j ] stores the number of alternating strings starts with i and having j elements .
Traverse the string from the end
If i is equal to N - 1
Otherwise ,
Increment count of substrings starting at i and has 0 in the beginning
Increment count of substrings starting at i and has 1 in the beginning
Stores the result
Iterate in the range [ 0 , N - 1 ]
Update ans
Return the ans
Driver code
Given Input
Function call
Function to count number of ways ' + ' and ' - ' operators can be placed in front of array elements to make the sum of array elements equal to K
Stores sum of the array
Stores count of 0 s in A [ ]
Traverse the array
Update sum
Update count of 0 s
Conditions where no arrangements are possible which adds up to K
Required sum
Dp array
Base cases
Fill the dp array
Return answer
Driver Code
Input
Function call
Function to implement recursive DP
If i is equal to N
If dp [ i ] [ mask ] is not equal to - 1
Iterate over the array B [ ]
If current element is not yet selected
Update dp [ i ] [ mask ]
Return dp [ i ] [ mask ]
Function to obtain maximum sum of Bitwise AND of same - indexed elements from the arrays A [ ] and B [ ]
Stores all dp - states
Returns the maximum value returned by the function maximizeAnd ( )
Driver Code
Function to find the maximum score of Player 1
Base Case
If the result is already computed , then return the result
Variable to store maximum score
Pick one stone
Pick 2 stones
Pick 3 stones
Return the score of the player
Function to find the winner of the game
Create a 1D table , dp of size N
Store the result
Player 1 wins
PLayer 2 wins
Tie
Given Input
Function Call
Function to find the number of ways to reach Nth station
Declares the DP [ ] array
Only 1 way to reach station 1
Find the remaining states from the 2 nd station
If the train A is present at station i - 1
If the train B is present at station i - 2
If train C is present at station i - 3
The total number of ways to reach station i
Return the total count of ways
Driver Code
Function to find the number of M - length sorted arrays possible using numbers from the range [ 1 , N ]
If size becomes equal to m , that means an array is found
Include current element , increase size by 1 and remain on the same element as it can be included again
Exclude current element
Return the sum obtained in both the cases
Driver Code
Given Input
Function Call
Function to find maximum subarray sum possible after removing at most one subarray
Calculate the preSum [ ] array
Update the value of sum
Update the value of maxSum
Update the value of preSum [ i ]
Calculate the postSum [ ] array
Update the value of sum
Update the value of maxSum
Update the value of postSum [ i ]
Stores the resultant maximum sum of subarray
Update the value of ans
Print resultant sum
Driver code
Function to recursively count the number of unique outcomes possible S flips are performed on N coins
Base Cases
Recursive Calls
Driver Code
Function to find length of longest increasing subsequence in a string
Stores at every i - th index , the length of the longest increasing subsequence ending with character i
Size of string
Stores the length of LIS
Iterate over each character of the string
Store position of the current character
Stores the length of LIS ending with current character
Check for all characters less then current character
Include current character
Update length of longest increasing subsequence
Updating LIS for current character
Return the length of LIS
Driver Code
Python3 program for the above approach
Function to calculate sum of lengths of two smallest subsets with sum >= K
Sort the array in ascending order
Stores suffix sum of the array
Update the suffix sum array
Stores all dp - states
Initialize all dp - states with a maximum possible value
Base Case
Traverse the array arr [ ]
Iterate over the range [ 0 , K ]
If A [ i ] is equal to at least the required sum j for the current state
If the next possible state doesn 't exist
Otherwise , update the current state to the minimum of the next state and state including the current element A [ i ]
Traverse the suffix sum array
If suffix [ i ] - dp [ i ] [ K ] >= K
Sum of lengths of the two smallest subsets is obtained
Return - 1 , if there doesn 't  exist any subset of sum >= K
Driver Code
Stores the mask of the vector
Stores the current 20 of dp [ ]
Function to store the mask of given integer
Iterate over the range [ 0 , 20 ]
If i - th bit 0
If dp [ i ] is zero
Store the position in dp
Increment the answer
Return from the loop
mask = mask XOR dp [ i ]
Function to find the 20 of the set having Bitwise XOR of all the subset of the given array
Traverse the array
Prthe answer
Driver Code
Function Call
Function to find the maximum sum possible by jumps of length i + K * arr [ i ] from any i - th index
Initialize an array dp [ ]
Stores the maximum sum
Iterate over the range [ N - 1 , 0 ]
If length of the jump exceeds N
Set dp [ i ] as arr [ i ]
Otherwise , update dp [ i ] as sum of dp [ i + K * arr [ i ] ] and arr [ i ]
Update the overall maximum sum
Print the answer
Driver Code
Function to find maximum sum submatrix
Stores the number of rows and columns in the matrix
Stores maximum submatrix sum
Take each row as starting row
Take each column as the starting column
Take each row as the ending row
Take each column as the ending column
Stores the sum of submatrix having topleft index ( i , j ) and bottom right index ( k , l )
Iterate the submatrix row - wise and calculate its sum
Update the maximum sum
Prthe answer
Driver Code
Function to calculate maximum subset sum
Initialize array to store dp states
Base Cases
Pre initializing for dp [ 0 ] & dp [ 1 ]
Calculating dp [ index ] based on above formula
Prmaximum subset sum
Given arrays
Length of the array
Function to find minimum value of arr [ j ] + | j - i | for every array index
Stores minimum of a [ j ] + | i - j | upto position i
Stores minimum of a [ j ] + | i - j | upto position i from the end
Traversing and storing minimum of a [ j ] + | i - j | upto i
Traversing and storing minimum of a [ j ] + | i - j | upto i from the end
Traversing from [ 0 , N ] and storing minimum of a [ j ] + | i - j | from starting and end
Print the required array
Driver code
Given array arr
Size of the array
Function Call
Function to prthe count of arrays satisfying given condition
First element of array is set as 1
Since the first element of arr is 1 , the second element can 't be 1
Traverse the remaining indices
If arr [ i ] = 1
If arr [ i ] a 1
Since last element needs to be 1
Driver Code
Stores the count of arrays where arr [ 0 ] = arr [ N - 1 ] = 1
Since arr [ 0 ] and arr [ N - 1 ] can be any number from 1 to M
Pranswer
Function to find the product of digits of a number
Stores product of digits of N
Update res
Update N
Function to count numbers in the range [ 0 , X ] whose product of digit is K
Stores count of numbers in the range [ L , R ] whose product of digit is K
Iterate over the range [ L , R ]
If product of digits of i equal to K
Update cnt
Driver Code
Function to find the median of bitwise XOR of all the submatrix whose topmost leftmost corner is ( 0 , 0 )
dp [ i ] [ j ] : Stores the bitwise XOR of submatrix having top left corner at ( 0 , 0 ) and bottom right corner at ( i , j )
Stores count of submatrix
Base Case
Base Case
Fill dp using tabulation
Fill dp [ i ] [ j ]
Driver code
Function to count the ways to tile N * 1 board using 1 * 1 and 2 * 1 tiles
dp [ i ] : Stores count of ways to tile i * 1 board using given tiles
Base Case
Iterate over the range [ 2 , N ]
Fill dp [ i ] using the recurrence relation
Driver Code
Given N
Function Call
Function to print subsequences containing ASCII value of the characters or the the characters of the given string
Base Case
If length of the subsequence exceeds 0
Print the subsequence
Stores character present at i - th index of str
If the i - th character is not included in the subsequence
Including the i - th character in the subsequence
Include the ASCII value of the ith character in the subsequence
Driver Code
Stores length of str
Function to find the minimum count of operations required to Reduce N to 0
Stores count of bits in N
Recurrence relation
Driver code
Function to find the maximum product from the top left and bottom right cell of the given matrix grid [ ] [ ]
Store dimension of grid
Stores maximum product path
Stores minimum product path
Traverse the grid and update maxPath and minPath array
Initialize to inf and - inf
Base Case
Calculate for row :
Update the maximum
Update the minimum
Calculate for column :
Update the maximum
Update the minimum
Update maxPath and minPath
If negative product
Otherwise
Given matrix mat [ ] [ ]
Function Call
Python3 program to implement the above approach
Function to find the length of the smallest subarray to be removed such that sum of elements is equal to S % K
Remainder when total_sum is divided by K
Stores curr_remainder and the most recent index at which curr_remainder has occured
Stores required answer
Add current element to curr_sum and take mod
Update current remainder index
If mod already exists in map the subarray exists
Update res
If not possible
Return the result
Function to find the smallest submatrix rqured to be deleted to make the sum of the matrix divisible by K
Stores the sum of element of the matrix
Traverse the matrix mat [ ] [ ]
Update S
Stores smallest area need to be deleted to get sum divisible by K
Stores leftmost column of each matrix
Stores rightmost column of each matrix
Stores number of coulmns deleted of a matrix
Store area of the deleted matrix
prefixRowSum [ i ] : Store sum of sub matrix whose topmost left and bottommost right position is ( 0 , left ) ( i , right )
Iterate over all possible values of ( left , right )
Initialize all possible values of prefixRowSum [ ] to 0
Traverse each row from left to right column
Update row_sum [ i ]
Update width
If no submatrix of the length ( right - left + 1 ) found to get the required output
Update area
If area is less than min_area
Update min_area
Driver Code
Stores number of rows in the matrix
Stores number of column in the matrix
to keep the string in lexicographically sorted order use start index to add the vowels starting the from that index
base case : if string length is 0 add to the count
if last character in string is ' e ' add vowels starting from ' e ' i . e ' e ' , ' i ' , ' o ' , 'u
decrease the length of string
char arr [ 5 ] = { ' a ' , ' e ' , ' i ' , ' o ' , ' u ' } ; starting from index 0 add the vowels to strings
Function to count N - length strings consisting of vowels only sorted lexicographically
Driver Code
Function Call
Python3 program for the above approach
Function for counting total no of paths possible with the sum is equal to X
If the path of the sum from the root to current node is stored in sum
If already computed
Count different no of paths using all possible ways
Return total no of paths
Driver Code
Stores the number of ways to obtains sums 0 to X
Function call
Python3 program for the above approach
Function to prthe total number of possible sequences with product X
Precomputation of binomial coefficients
Max length of a subsequence
Ways dp array
Fill i slots using all the primes
Subtract ways for all slots that exactly fill less than i slots
Total possible sequences
Print the resultant count
Driver Code
Function call
Python3 program for the above approach
Function to return all prime numbers smaller than N
Create a boolean array " prime [ 0 . . n ] "
Initialize all its entries as true memset ( seive , true , sizeof ( seive ) )
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it
Stores all prime numbers smaller than MAX
Store all prime numbers
If p is prime
Function to build the auxiliary DP array from the start
Base Case
Stores all prime numbers < N
Stores prefix sum
Update prefix sum
Iterate over range
Update each state i . e . . when current element is excluded
Find start & end index of subarrays when prime [ i ] is taken
Check if starting point lies in the array
Include the elements al al + 1 . . . ar
Check if element lies before start of selected subarray
Update value of dp [ i ]
Function to find the maximum sum subsequence with prime length
Auxiliary DP array
Build DP array
Print the result
Driver Code
Given arr [ ]
Size of array
Function Call
Function to find the maximum score for one possible tree having N nodes N - 1 Edges
Number of nodes
Initialize dp [ ] [ ]
Score with 0 vertices is 0
Traverse the nodes from 1 to N
Find maximum scores for each sum
Iterate over degree of new node
Update the current state
Return maximum score for N node tree having 2 ( N - 1 ) sum of degree
Driver Code
Given array of scores
Function Call
Function to find the minimum cost to reach the end of the array from the first element
Store the results
Consider first index cost
Find answer for each position i
First Element
Second Element
For remaining element
Consider min cost for skipping
Last index represents the minimum total cost
Driver Code
Given X
Given array cost [ ]
Function Call
Function to find the maximum sum not exceeding K possible by selecting a subset of non - adjacent elements
Base Case
Not selecting current element
If selecting current element is possible
Return answer
Driver Code
Given array arr [ ]
Given K
Function Call
Function to check if a satisfy the given condition or not
Stores the length of string
Stores the previous character of the string
Stores the count of consecutive equal characters
Traverse the string
If current character is equal to the previous character
If count of consecutive 1 s is more than Q
If count of consecutive 0 s is more than P
Reset value of cnt
If count of consecutive 1 s is more than Q
If count of consecutive 0 s is more than P
Function to count all distinct binary strings that satisfy the given condition
Stores the length of str
If length of str is N
If str satisfy the given condition
If str does not satisfy the given condition
Append a character '0' at end of str
Append a character '1' at end of str
Return total count of binary strings
Driver Code
Function to get the value of binomial coefficient
Stores the value of binomial coefficient
Since C ( N , R ) = C ( N , N - R )
Calculate the value of C ( N , R )
Function to get the count of permutations of the array that satisfy the condition
Stores the value of C ( 2 N , N )
Stores the value of catalan number
Return answer
Driver Code
Function to print smallest index of Kth maximum Xor value of submatrices
Dimensions of matrix
Stores XOR values for every index
Min heap to find the kth maximum XOR value
Stores indices for corresponding XOR values
Traversing matrix to calculate XOR values
Insert calculated value in Min Heap
If size exceeds k
Remove the minimum
Store smallest index containing xor [ i , j ]
Stores the kth maximum element
Print the required index
Driver code
Function call
Function to obtain the length of the longest palindromic substring
Length of given string
Stores the maximum length
Iterate over the string
Iterate over the string
Check for palindrome
If string [ i , j - i + 1 ] is palindromic
Return length of LPS
Given string
Function call
Initialize dp array
Function that removes elements from array to maximize the cost
Base case
Check if an answer is stored
Deleting count + 1 i . e . including the first element and starting a new sequence
Removing [ left + 1 , i - 1 ] elements to continue with previous sequence
Store the result
Return answer
Function to remove the elements
Function Call
Driver Code
Given array
Function Call
Python3 program for the above approach
Function to find the value of minimum steps to convert m to n
Base Case
If n exceeds m
Iterate through all possible even divisors of m
If m is divisible by i , then find the minimum cost
Add the cost to convert m to m + i and recursively call next state
Return min_cost
Driver Code
Function call
If conversion is not possible
Print the cost
Function to find the minimum count of numbers ending with 9 to form N
Extract last digit of N
Calculate the last digit
If the last digit satisfies the condition
Driver Code
Function to flip a submatrices
Boundaries of the submatrix
Iterate over the submatrix
Check for 1 or 0 and flip accordingly
Function to perform the queries
Driver Code
Function call
INF is the maximum value which indicates Impossible state
Recursive Function that considers all possible even divisors of cur
Indicates impossible state
Return 0 if cur == M
Initially it is set to INF that means we can 't transform cur to M
Loop to find even divisors of cur
If i is divisor of cur
If i is even
Finding divisors recursively for cur + i
Check another divisor
Find recursively for cur + ( cur / i )
Return the answer
Function that finds the minimum operation to reduce N to M
INF indicates impossible state
Driver Code
Given N and M
Function call
Function that finds the prime factors of a number
To store the prime factor
2 s that divide n
N must be odd at this point Skip one element
Update the prime factor
If n is a prime number greater than 2
Function that finds the shortest subsequence
Check if the prime factor of first number , is also the prime factor of the rest numbers in array
Set corresponding bit of prime factor to 1 , it means both these numbers have the same prime factor
If no states encountered so far continue for this combination of bits
Update this state with minimum ways to reach this state
Function that print the minimum length of subsequence
Find the prime factors of the first number
Initialize the array with maximum steps , size of the array + 1 for instance
Total number of set bits is equal to the total number of prime factors
Indicates there is one way to reach the number under consideration
State 0 corresponds to gcd of 1
If not found such subsequence then print " - 1"
Else print the length
Driver Code
Given array arr [ ]
Function Call
Function that finds the maximum Bitwise XOR sum of the two subset
Check if the current state is already computed
Initialize answer to minimum value
Iterate through all possible pairs
Check whether ith bit and jth bit of mask is not set then pick the pair
For all possible pairs find maximum value pick current a [ i ] , a [ j ] and set i , j th bits in mask
Store the maximum value and return the answer
Driver Code
Given array arr [ ]
Declare Initialize the dp states
Function call
Python3 program for the above approach
Function to generate the fibonacci number
First two number of fibonacci sqequence
Function to find maximum ways to represent num as the sum of fibonacci number
Generate the Canonical form of given number
Reverse the number
Base condition of dp1 and dp2
Iterate from 1 to cnt
Calculate dp1 [ ]
Calculate dp2 [ ]
Return final ans
Function call to generate the fibonacci numbers
Given number
Function call
Function to find count of N - digit numbers with single digit XOR
Range of numbers
Calculate XOR of digits
If XOR <= 9 , then increment count
Print the count
Given number
Function call
Python3 program to implement the above approach
Function to find the maximum length non decreasing subarray by reversing at most one subarray
dp [ i ] [ j ] be the longest subsequence of a [ 0. . . i ] with first j parts
Maximum length sub - sequence of ( 0. . )
Maximum length sub - sequence of ( 0. . 1. . )
Maximum length sub - sequence of ( 0. . 1. .0 . . )
Maximum length sub - sequence of ( 0. . 1. .0 . .1 . . )
Find the max length subsequence
Print the answer
Driver Code
Function to print the elements of Subarray with maximum sum
Initialize currMax and globalMax with first value of nums
Iterate for all the elemensts of the array
Update currMax
Check if currMax is greater than globalMax
Traverse in left direction to find start Index of subarray
Decrement the start index
Printing the elements of subarray with max sum
Given array arr [ ]
Function call
Python3 implementation of the above approach
Stores list of all primes
Function to find all primes
To mark the prime ones
Initially all indices as prime
If i is prime
Set all multiples of i as non - prime
Adding all primes to a list
Function to return the count of Primonacci Numbers in the range [ l , r ]
dp [ i ] contains ith Primonacci Number
Stores the Primonacci Numbers
Iterate over all smaller primes
If Primonacci number lies within the range [ L , R ]
Count of Primonacci Numbers
Driver Code
Python3 program to implement the above approach
Function to calculate the count of possible strings
Initialize dp [ 0 ]
dp [ i ] represents count of strings of length i
Add dp [ i - k ] if i >= k
Update Prefix Sum Array
Driver Code
Python3 program to implement the above approach
Function to minimize the sum of price by taking a triplet
Initialize a dp [ ] list
Stores the final result
Iterate for all values till N
Check if num [ j ] > num [ i ]
Update dp [ j ] if it is greater than stored value
Update the minimum sum as ans
If there is no minimum sum exist then print - 1 else print the ans
Driver code
Function to calculate and returns the value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- - * 1 ]
Function to return the count of all binary strings having equal count of 0 ' s ▁ and ▁ 1' s and each prefix substring having frequency of 1 ' s ▁ > = ▁ frequencies ▁ of ▁ 0' s
If N is odd
No such strings possible
Otherwise
Calculate value of 2 nCn
Return 2 nCn / ( n + 1 )
Driver Code
Recursive function to count the total number of ways
Base case if no - solution exist
Condition if a solution exist
Check if already calculated
Initialize counter
Recursive call
Store the answer
Return the answer
Driver code
Python3 program for the above approach
Function for calculating factorial
Factorial of n defined as : n ! = n * ( n - 1 ) * ... * 1
Function to find the number of ways to select exactly K even numbers from the given array
Count even numbers
Check if the current number is even
Check if the even numbers to be chosen is greater than n . Then , there is no way to pick it .
The number of ways will be nCk
Given array arr [ ]
Given count of even elements
Function call
Python3 program to implement the above approach
Function to calculate C ( n , r ) % MOD DP based approach
Corner case
Stores the last row of Pascal 's Triangle
Initialize top row of pascal triangle
Construct Pascal 's Triangle  from top to bottom
Fill current row with the help of previous row
C ( n , j ) = C ( n - 1 , j ) + C ( n - 1 , j - 1 )
Driver Code
Function to print the Minimum number of operations required to convert 1 into X by using three given operations
Initialize a DP array to store min operations for sub - problems
Base Condition : No operation required when N is 1
Multiply the number by 2
Multiply the number by 3
Add 1 to the number .
Print the minimum operations
Initialize a list to store the sequence
Backtrack to find the sequence
If add by 1
If multiply by 2
If multiply by 3
Print the sequence of operation
Given number X
Function Call
Python3 program for the above approach
Function that print maximum length of array
dp [ ] array to store the maximum length
Find all divisors of i
If the current value is greater than the divisor 's value
If current value is greater than the divisor 's value  and s is not equal  to current index
Condition if current value is greater than the divisor 's value
Computing the greatest value
Printing maximum length of array
Driver Code
Given array arr [ ]
Function call
Python3 implmenetation to find maximum possible profit with at most two transactions
Function to find the maximum profit with two transactions on a given list of stock prices
Set initial buying values to INT_MAX as we want to minimize it
Set initial selling values to zero as we want to maximize it
Money lent to buy the stock should be minimum as possible . buy1 tracks the minimum possible stock to buy from 0 to i - 1.
Profit after selling a stock should be maximum as possible . profit1 tracks maximum possible profit we can make from 0 to i - 1.
Now for buying the 2 nd stock , we will integrate profit made from selling the 1 st stock
Profit after selling a 2 stocks should be maximum as possible . profit2 tracks maximum possible profit we can make from 0 to i - 1.
Driver code
Python3 implementation to find the maximum score of the deleting a element from an array
Function to find the maximum score of the deleting an element from an array
Creating a map to keep the frequency of numbers
Loop to iterate over the elements of the array
Creating a DP array to keep count of max score at ith element and it will be filled in the bottom Up manner
Loop to choose the elements of the array to delete from the array
Driver Code
Function Call
Function to return maximized sum at even indices
Stores difference with element on the left
Stores difference with element on the right
Compute and store left difference
For first index
If previous difference is positive
Otherwise
For the last index
Otherwise
For first index
If the previous difference is positive
Driver Code
Function to find required subsequences
Initialise the dp [ ] [ ] with 0.
If odd element is encountered
Considering i - th element will be present in the subsequence
Appending i - th element to all non - empty subsequences ending with even element till ( i - 1 ) th indexes
Considering ith element will not be present in the subsequence
Considering i - th element will be present in the subsequence
Appending i - th element to all non - empty subsequences ending with odd element till ( i - 1 ) th indexes
Considering ith element will not be present in the subsequence
Count of all valid subsequences
Driver code
Function to return count of N - digit numbers with absolute difference of adjacent digits not exceeding K
For 1 - digit numbers , the count is 10
dp [ i ] [ j ] stores the count of i - digit numbers ending with j
Initialize count for 1 - digit numbers
Compute values for count of digits greater than 1
Find the range of allowed numbers if last digit is j
Perform Range update
Prefix sum to find count of of i - digit numbers ending with j
Stores the final answer
Driver Code
Python3 program to find if there is a path between two vertices in a directed graph using Dynamic Programming
Function to find if there is a path between two vertices in a directed graph
dp matrix
Set dp [ i ] [ j ] = true if there is edge between i to j
Check for all intermediate vertex
If vertex is invalid
If there is a path
Driver code
Python3 program for above approach
prefix array storing right most index with prefix sums 0 , 1 , 2
dp array
current prefix sum
Calculating the prefix sum modulo 3
We dont have a left pointer with prefix sum C
We cannot consider i as a right pointer of any segment
We have a left pointer pre [ C ] with prefix sum C
i is the rightmost index of prefix sum C
Driver code
Python3 program for the above approach
Seiev of Erotosthenes method to compute all primes
If current number is marked prime then mark its multiple as non - prime
Function to count the number of element satisfying the condition
Compute the number of primes in count prime array
Print the number of elements satisfying the condition
Given array
Size of the array
Function call
Python3 program for the above approach
Function count the number of elements having odd number of divisors
Initialise dp [ ] array
Precomputation
Find the Prefix Sum
Iterate for each query
Find the answer for each query
Driver code
Given array arr [ ]
Given Query
Function call
Python 3 program to Find all the ways to split the given string into Primes .
Sieve of Eratosthenes
Function Convert integer to binary string
Function print all the all the ways to split the given string into Primes .
To store all possible strings
Exponetnital complexity n * ( 2 ^ ( n - 1 ) ) for bit
Pruning step
Driver code
Function to count the numbers
Array that stores the digits from left to right
Array that stores the digits from right to left
Initially both array store zero
Fill the table for count1 array
Update the count of current character
Fill the table for count2 array
Update the count of cuuent character
Variable that stores the count of the numbers
Traverse Input string and get the count of digits from count1 and count2 array such that difference b / w digit is 1 & store it int c1 & c2 . And store it in variable c1 and c2
Update the ans
Return the final count
Given String
Function call
Function that prints the number of times X gets a value between L and R
Base condition
Condition if X can be made equal to j after i additions
Compute value of X after adding arr [ i ]
Compute value of X after adding arr [ i ] - 1
Update dp as the maximum value
Compute maximum answer from all possible cases
Printing maximum good occurrence of X
Driver Code
Function to find maximum possible length of subarray
Stores the sum of elements that needs to be added to the sub array
Stores the index of the current position of subarray
Stores the maximum length of subarray .
Maximum element from each subarray length
Previous index of the current subarray of maximum length
Deque to store the indices of maximum element of each sub array
For each array element , find the maximum length of required subarray
Traverse the deque and update the index of maximum element .
If it is first element then update maximum and dp [ ]
Else check if current element exceeds max
Update max and dp [ ]
Update the index of the current maximum length subarray
While current element being added to dp [ ] array exceeds K
Update index of current position and the previous position
Remove elements from deque and update the maximum element
Update the maximum length of the required subarray .
Driver code
Function to check whether K required partitions are possible or not
Return true as the entire array is the answer
If total number of partitions exceeds size of the array
If the array sum is not divisible by K
No such partitions are possible
Required sum of each subset
Initialize dp array with - 1
Sum of empty subset is zero
Iterate over all subsets / masks
If current mask is invalid , continue
Iterate over all array elements
Check if the current element can be added to the current subset / mask
Transition
Driver Code
Python3 implementation to find the minimum number of operations required to move from ( 1 , 1 ) to ( N , M )
Function to find the minimum operations required to move to bottom - right cell of matrix
Condition to check if the current cell is the bottom - right cell of the matrix
Condition to check if the current cell is out of matrix
Condition to check if the current indices is already computed
Condition to check that the movement with the current value is not possible
Recursive call to compute the number of operation required to compute the value
Function to find the minimum number of operations required to reach the bottom - right cell
Loop to iterate over every possible cell of the matrix
Driver Code
Function Call
Python3 implementation to find the minimum number of sequence required from array such that their sum is equal to given S
Function to find the minimum elements required to get the sum of given value S
Condition if the sequence is found
Condition when no such sequence found
Calling for without choosing the current index value
Calling for after choosing the current index value
Function for every array
Driver code
Function to find the count of minimum length of the sequence
Loop to initialize the array as infinite in the row 0
Loop to find the solution by pre - computation for the sequence
Minimum possible for the previous minimum value of the sequence
Driver Code
Python3 implementation to maximize product of same - indexed elements of same size subsequences
Utility function to find the maximum
Utility function to find the maximum scalar product from the equal length sub - sequences taken from the two given array
Return a very small number if index is invalid
If the sub - problem is already evaluated , then return it
Take the maximum of all the recursive cases
Function to find maximum scalar product from same size sub - sequences taken from the two given array
Initialize a 2 - D array for memoization
Driver Code
Function that prints whether is it possible to make a equal to T by performing given operations
Base case , if we put the last character at front of A
Base case , if we put the last character at back of A
Condition if current sequence is matchable
Condition for front move to ( i - 1 ) th character
Condition for back move to ( i - 1 ) th character
Condition if it is possible to make A equal to T
Print final answer
Driver Code
Function to find maximum sum
Find total sum of array
Maintain a 2D array
Update the dp array along with sum in the second row
In case of greater length update the length along with sum
In case of equal length find length update length with minimum sum
Find the sum that need to be subtracted from total sum
Return the sum
Driver code
Returns number of ways to reach score n
table [ i ] will store count of solutions for value i .
Initialize all table values as 0
Base case ( If given value is 0 , 1 , 2 , or 4 )
Driver Code
Python3 implementation to count total number of ways to split a string to get prime numbers
Function to check whether a number is a prime number or not
Function to find the count of ways to split string into prime numbers
1 based indexing
Consider every suffix up to 6 digits
Number should not have a leading zero and it should be a prime number
Return the final result
Driver code
Python3 implementation to count total number of ways to split a String to get prime numbers
Function to build sieve
If p is a prime
Update all multiples of p as non prime
Function to check whether a number is a prime number or not
Function to find the count of ways to split String into prime numbers
Number should not have a leading zero and it should be a prime number
Function to count the number of prime Strings
Driver code
Function checks if square with all 0 's in boundary exists in the matrix
r1 is the top row , c1 is the left col r2 is the bottom row , c2 is the right
Function checks if the boundary of the square consists of 0 's
Driver Code
Python3 program to calculate the number of ways
Initialising the array with zeros . You can do using memset too .
Printing the array
Driver code
Python3 program to calculate the number of ways
2 is added because sometimes we will decrease the value out of bounds .
Initialising the array with zeros .
Printing the array
Driver code
Function that prints the number of different strings that can be formed
Computing the length of the given string
Base case
Traverse the given string
If two consecutive 1 ' s ▁ ▁ or ▁ 2' s are present
Otherwise take the previous value
Driver Code
Python3 implementation to find the sum of cost of all paths to reach ( M , N )
Function for computing combination
Function to find the factorial of N
Loop to find the factorial of a given number
Function for coumputing the sum of all path cost
Loop to find the contribution of each ( i , j ) in the all possible ways
Count number of times ( i , j ) visited
Add the contribution of grid [ i ] [ j ] in the result
Driver code
Function Call
Python3 program to count numbers in a range with digit sum divisible by K having first and last digit different
For calculating the upper bound of the sequence .
Checking whether the sum of digits = 0 or not and the corner case as number equal to 1
If the state is visited then return the answer of this state directly .
For checking whether digit to be placed is up to upper bound at the position pos or upto 9
Calculating new digit sum modulo k
Check if there is a prefix of 0 s and current digit != 0
Then current digit will be the starting digit
Update the boolean flag that the starting digit has been found
At n - 1 , check if current digit and starting digit are the same then no need to calculate this answer
Else find the answer
Function to find the required count
Setting up the upper bound
calculating F ( R )
Setting up the upper bound
Calculating F ( L - 1 )
Driver code
Python3 program to split a given String into K segments such that the sum of product of occurence of characters in them is minimized
Function to return the minimum sum of products of occurences of 0 and 1 in each segments
Store the length of the String
Not possible to generate subsets greater than the length of String
If the number of subsets equals the length
Precompute the sum of products for all index
Calculate the minimum sum of products for K subsets
Driver code
Function to find the minimum number of required such that adjacent smaller elements gets less number of prizes
Loop to compute the smaller elements at the left
Loop to find the smaller elements at the right
Loop to find the minimum prizes required
Driver code
Python3 program to find maximum sum subsequence with values differing by at least 2
Function to find maximum sum subsequence such that two adjacent values elements are not selected
Map to store the frequency of array elements
Make a dp array to store answer upto i th value
Base cases
Iterate for all possible values of arr [ i ]
Return the last value
Driver code
Python implementation for Minimum number of flips required in a binary string such that all the 1 aTMs are together
Length of the binary string
Initial state of the dp dp [ 0 ] [ 0 ] will be 1 if the current bit is 1 and we have to flip it
Initial state of the dp dp [ 0 ] [ 1 ] will be 1 if the current bit is 0 and we have to flip it
dp [ i ] [ 0 ] = Flips required to make all previous bits zero + Flip required to make current bit zero
dp [ i ] [ 1 ] = minimum flips required to make all previous states 0 or make previous states 1 satisfying the condition
Minimum of answer and flips required to make all bits 0
Driver code
Function to find the length of the longest increasing sub - sequence such that the index of the element is divisible by index of previous element
Initialize the dp [ ] array with 1 as a single element will be of 1 length
Traverse the given array
If the index is divisible by the previous index
If increasing subsequence identified
Longest length is stored
Driver code
Python3 program to count of subarrays having exactly K perfect square numbers .
A utility function to check if the number n is perfect square or not
Find floating point value of square root of x .
If square root is an integer
Function to find number of subarrays with sum exactly equal to k
STL map to store number of subarrays starting from index zero having particular value of sum .
To store the sum of element traverse so far
Add current element to currsum
If currsum = K , then a new subarray is found
If currsum > K then find the no . of subarrays with sum currsum - K and exclude those subarrays
Add currsum to count of different values of sum
Return the final result
Function to count the subarray with K perfect square numbers
Update the array element
If current element is perfect square then update the arr [ i ] to 1
Else change arr [ i ] to 0
Function Call
Driver Code
Function Call
Python3 implementation to count the number of ways to divide N in K groups such that each group has elements in range [ L , R ]
Function to count the number of ways to divide the number N in K groups such that each group has number of elements in range [ L , R ]
Base Case
If N is divides completely into less than k groups
Put all possible values greater equal to prev
Function to count the number of ways to divide the number N
Driver Code
Function that prints whether is it possible to make sum equal to K
Base case
Condition if we can make sum equal to current column by using above rows
Iterate through current column and check whether we can make sum less than or equal to k
Printing whether is it possible or not
Driver Code
DP array to store the ans for max 20 elements
To check whether the number is prime or not
Function to check whether the array can be modify so that there are only primes
If curr is prime and all elements are visited , return true
If all elements are not visited , set curr = 0 , to search for new prime sum
If all elements are visited
If the current sum is not prime return false
If this state is already calculated , return the answer directly
Try all state of mask
If ith index is not set
Add the current element and set ith index and recur
If subset can be formed then return true
After every possibility of mask , if the subset is not formed , return false by memoizing .
Driver code
Store the maximum possible at each index
When i exceeds the index of the last element simply return 0
If the value has already been calculated , directly return it from the dp array
The next states are don 't take  this element and go to (i + 1)th state  else take this element  and go to (i + 2)th state
function to find the max value
subarr contains elements from 0 to arr . size ( ) - 2
Initializing all the values with - 1
Calculating maximum possible sum for first case
subarr contains elements from 1 to arr . size ( ) - 1
Re - initializing all values with - 1
Calculating maximum possible sum for second case
Printing the maximum between them
Driver code
Python3 program to count total number of k x k sub matrix whose sum is greater than the given number S
Function to create prefix sum matrix from the given matrix
Store first value in table
Initialize first row of matrix
Initialize first column of matrix
Initialize rest table with sum
Utility function to count the submatrix whose sum is greater than the S
Loop to iterate over all the possible positions of the given matrix mat [ ] [ ]
Condition to check , if K x K is first sub matrix
Condition to check sub - matrix has no margin at top
Condition when sub matrix has no margin at left
Condition when submatrix has margin at top and left
Increment count , If sub matrix sum is greater than S
Function to count submatrix of size k x k such that sum if greater than or equal to S
For loop to initialize prefix sum matrix with zero , initially
Function to create the prefix sum matrix
Driver Code
Print total number of sub matrix
Function to find whether string can be made palindromic or not for each queries
To store the count of ith character of substring str [ 0. . . i ]
Current character
Update dp [ ] [ ] on the basis recurrence relation
For each queries
To store the count of distinct character
Find occurrence of i + 'a
Half the distinct Count
If half the distinct count is less than equals to K then palindromic string can be made
Given string str
Given Queries
Function call
Unordered_map used for storing the sentences the key string can be broken into
Unordered_set used to store the dictionary .
Utility function used for printing the obtained result
Utility function for appending new words to already existing strings
Loop to find the append string which can be broken into
Utility function for word Break
Condition to check if the subproblem is already computed
If the whole word is a dictionary word then directly append into the result array for the string
Loop to iterate over the substring
If the substring is present into the dictionary then recurse for other substring of the string
Store the subproblem into the map res is an reference so we need to assign an reference to something if its keep on changing res values changes after it start going through combine method you can check if you had a doubt so here we just clone res
Master wordBreak function converts the string vector to unordered_set
Clear the previous stored data
Driver Code
Python3 implementation to find the maximum product of the digit sum of the consecutive pairs of the subsequence of the length K
Function to find the product of two numbers digit sum in the pair
Loop to find the digits of the number
Loop to find the digits of other number
Function to find the subsequence of the length K
Base case
Condition when we didn 't reach  the length K, but ran out of  elements of the array
Condition if already calculated
If length upto this point is odd
If length is odd , it means we need second element of this current pair , calculate the product of digit sum of current and previous element and recur by moving towards next index
If length upto this point is even
Exclude this current element and recur for next elements .
Return by memoizing it , by selecting the maximum among two choices .
Driver code
vector to store factors of each integer
dp array
Precomputing all factors of integers from 1 to 100000
Function to count the minimum jumps
If we reach the end of array , no more jumps are required
If the jump results in out of index , return INT_MAX
If the answer has been already computed , return it directly
Else compute the answer using the recurrence relation
Iterating over all choices of jumps
Considering current factor as a jump
Jump leads to the destination
Return ans and memorize it
Driver code
pre - calculating the factors
Python3 program to find the maximum distance from a 0 - cell to a 1 - cell
If the matrix consists of only 0 ' s ▁ ▁ or ▁ only ▁ 1' s
If it 's a 0-cell
Calculate its distance with every 1 - cell
Compare and store the minimum
Compare ans store the maximum
Driver code
Function to find the maximum distance
Queue to store all 1 - cells
Grid dimensions
Directions traversable from a given a particular cell
If the grid contains only 0 s or only 1 s
Access every 1 - cell
Traverse all possible directions from the cells
Check if the cell is within the boundaries or contains a 1
Driver code
Python3 program to calculate the number of ways to give ranks for N students such that same ranks are possible
Initializing a table in order to store the bell triangle
Function to calculate the K - th bell number
If we have already calculated the bell numbers until the required N
Base case
First Bell Number
If the value of the bell triangle has already been calculated
Fill the defined dp table
Function to return the number of ways to give ranks for N students such that same ranks are possible
Resizing the dp table for the given value of n
Variables to store the answer and the factorial value
Iterating till N
Simultaneously calculate the k !
Computing the K - th bell number and multiplying it with K !
Driver code
Function to print LDS [ i ] element
Traverse the Max [ ]
Function to construct and print Longest Dividing Subsequence
2D vector for storing sequences
Push the first element to LDS [ ] [ ]
Interate over all element
Loop for every index till i
If current elements divides arr [ i ] and length is greater than the previous index , then insert the current element to the sequences LDS [ i ]
L [ i ] ends with arr [ i ]
LDS stores the sequences till each element of arr [ ] Traverse the LDS [ ] [ ] to find the maximum length
Print all LDS with maximum length
Find size
If size = maxLength
Print LDS
Driver Code
Function call
Function to calculate the count of ordered set for a given size
Base cases
Function returns the count of all ordered sets
Prestore the factorial value
Iterate all ordered set sizes and find the count for each one maximum ordered set size will be smaller than N as all elements are distinct and non consecutive
Multiply ny size ! for all the arrangements because sets are ordered
Add to total answer
Driver code
Python3 program to find maximum sum possible such that exactly floor ( N / 2 ) elements are selected and no two selected elements are adjacent to each other
Function return the maximum sum possible under given condition
Intitialising the dp table
Base case
Condition to select the current element
Condition to not select the current element if possible
Driver code
Python3 implementation to Check whether a given number N can be converted to the form K power K by the given operation
Function to check if N can be converted to K power K
Check if n is of the form k ^ k
Iterate through each digit of n
Check if it is possible to obtain number of given form
Reduce the number each time
Return the result
Function to check the above method
Check if conversion if possible
Driver code
Pre store K power K form of numbers Loop till 8 , because 8 ^ 8 > 10 ^ 7
Function to check whether the subarray has all unique digits
Storing all digits occurred
Traversing all the numbers of v
Storing all digits of v [ i ]
Checking whether digits of v [ i ] have already occurred
Inserting digits of v [ i ] in the set
Function to count the number subarray with all digits unique
Traverse through all the subarrays
To store elements of this subarray
Generate all subarray and store it in vector
Check whether this subarray has all digits unique
Increase the count
Return the count
Driver code
Python3 implementation to find the minimum labelled node to be removed such that there is no cycle in the undirected graph
Variables to store if a node V has at - most one back edge and store the depth of the node for the edge
Function to swap the pairs of the graph
If the second value is greater than x
Put the pair in the ascending order internally
Function to perform the DFS
Initialise with the large value
Storing the depth of this vertex
Mark the vertex as visited
Iterating through the graph
If the node is a child node
If the child node is unvisited
Move to the child and increase the depth
increase according to algorithm
If the node is not having exactly K backedges
If the child is already visited and in current dfs ( because colour is 1 ) then this is a back edge
Increase the countAdj values
Colour this vertex 2 as we are exiting out of dfs for this node
Function to find the minimum labelled node to be removed such that there is no cycle in the undirected graph
Construct the graph
Mark visited as false for each node
Apply dfs on all unmarked nodes
If no backedges in the initial graph this means that there is no cycle So , return - 1
Iterate through the vertices and return the first node that satisfies the condition
Check whether the count sum of small [ v ] and count is the same as the total back edges and if the vertex v can be removed
Driver code
Python3 implementation to find the row whose product has maximum number of prime factors
function for SieveOfEratosthenes
Create a boolean array " isPrime [ 0 . . N ] " and initialize all entries it as true . A value in isPrime [ i ] will finally be false if i is not a prime , else true .
check if isPrime [ p ] is not changed
Update all multiples of p
Print all isPrime numbers
function to display the answer
function to Count the row number of divisors in particular row multiplication
Find count of occurrences of each prime factor
Compute count of all divisors
Update row number if factors of this row is max
Clearing map to store prime factors for next row
Driver code
Python3 implementation to find Smallest N digit number whose sum of square of digits is a Perfect Square
function to check if number is a perfect square
function to calculate the smallest N digit number
place digits greater than equal to prev
check if placing this digit leads to a solution then return it
else backtrack
create a representing the N digit number
Driver code
initialise N
Pyhton3 implementation of the above approach
A recursive function that generates all the sequence and find GCD
If we reach the sequence of length N g is the GCD of the sequence
Initialise answer to 0
Placing all possible values at this position and recursively find the GCD of the sequence
Take GCD of GCD calculated uptill now i . e . g with current element
Take modulo to avoid overflow
Return the final answer
Function that finds the sum of GCD of all the subsequence of N length
Recursive function that generates the sequence and return the GCD
Driver code
Function Call
Python3 implementation of the above approach
Function to find a ^ b in log ( b )
Function that finds the sum of GCD of all the subsequence of N length
To stores the number of sequences with gcd i
Find contribution of each gcd to happen
To count multiples
possible sequences with overcounting
to avoid overflow
Find extra element which will not form gcd = i
Find overcounting
Remove the overcounting
To store the final answer
Return Final answer
Driver code
Function call
Function to check whether a string is an odd number or not
A function to find the minimum number of segments the given string can be divided such that every segment is a odd number
Declare a splitdp [ ] array and initialize to - 1
Build the DP table in a bottom - up manner
Initially Check if the entire prefix is odd
If the Given Prefix can be split into Odds then for the remaining string from i to j Check if Odd . If yes calculate the minimum split till j
To check if the substring from i to j is a odd number or not
If it is an odd number , then update the dp array
Return the minimum number of splits for the entire string
Driver code
Function to check whether a string is a prime number or not
A recursive function to find the minimum number of segments the given string can be divided such that every segment is a prime
If the number is null
checkPrime function is called to check if the number is a prime or not .
A very large number denoting maximum
Consider a minimum of 6 and length since the primes are less than 10 ^ 6
Recursively call the function to check for the remaining string
Evaluating minimum splits into Primes for the suffix
Checks if no combination found
Driver code
Function to find number less than N having k non - zero digits
Store the memorised values
Initialise
Base
Calculate all states For every state , from numbers 1 to N , the count of numbers which contain exactly j non zero digits is being computed and updated in the dp array .
Return the required answer
Driver code
Function call
Function to find the maximum occurrence of the subsequence such that the indices of characters are in arithmetic progression
Frequencies of subsequence
Loop to find the frequencies of subsequence of length 1
Loop to find the frequencies subsequence of length 2
Finding maximum frequency
Driver Code
Function to count the distinct characters in the string
Frequency of each character
Loop to count the frequency of each character of the string
If frequency is greater than 0 then the character occured
Function to count the number of ways to partition the string such that each partition have same number of distinct character
Loop to choose the partition index for the string
Divide in two parts
Check whether number of distinct characters are equal
Driver Code
Function to count the number of ways to partition the string such that each partition have same number of distinct character
Prefix and suffix array for distinct character from start and end
To check whether a character has appeared till ith index
Calculating prefix array
Character appears for the first time in string
Character is visited
Resetting seen for suffix calculation
Calculating the suffix array
Character appears for the first time
This character has now appeared
Loop to calculate the number partition points in the string
Check whether number of distinct characters are equal
Driver Code
Function to count the paths from a point to the origin
Base Case when the point is already at origin
Base Case when the point is on the x or y - axis
Loop to fill all the position as 1 in the array
Loop to count the number of paths from a point to origin in bottom - up manner
Driver Code
Function call
Initializing the max value
Array to store all the fibonacci numbers
Function to generate fibonacci numbers using Dynamic Programming
0 th and 1 st number of the series are 0 and 1
Add the previous two numbers in the series and store it
Function to print the Fibonacci numbers present at Kth level of a Binary Tree
Finding the left and right index
Iterating and printing the numbers
Precomputing Fibonacci numbers
Function to count the number of ways to divide the number N in groups such that each group has K number of elements
Base Case
If N is divides completely into less than k groups
Put all possible values greater equal to prev
Function to count the number of ways to divide the number N
Driver Code
DP Table
Function to count the number of ways to divide the number N in groups such that each group has K number of elements
Base Case
if N is divides completely into less than k groups
If the subproblem has been solved , use the value
put all possible values greater equal to prev
Function to count the number of ways to divide the number N in groups
Initialize DP Table as - 1
Driver Code
Function to calculate maximum score recursively
Base case
Sum of array in range ( l , r )
If the operation is even - numbered the score is decremented
Exploring all paths , by removing leftmost and rightmost element and selecting the maximum value
Function to find the max score
Prefix sum array
Calculating prefix_sum
Driver code
Function to make array divisible
For each element of array how much number to be subtracted to make it divisible by k
For each element of array how much number to be added to make it divisible by K
Calculate minimum difference
Driver Code
Python3 program to find the power of P in N !
Map to store all the prime factors of P
Function to find the prime factors of N im Map
Clear map
Check for factors of 2
Find all the prime factors
If i is a factors then increase the frequency of i
Function to find the power of prime number P in N !
Loop until temp <= N
Add the number of numbers divisible by N
Each time multiply temp by P
Returns ans
Function that find the powers of any P in N !
Find all prime factors of number P
To store the powers of all prime factors
Traverse the map
Prime factor and corres . powers
Find power of prime factor primeFac
Divide frequency by facPow
Store the power of primeFac ^ facPow
Return the minimum element in Power array
Driver code
Function to find power of P in N !
Function to find the maximum length of equal subarray
Auxiliary dp [ ] [ ] array
Updating the dp [ ] [ ] table in Bottom Up approach
If A [ i ] is equal to B [ i ] then dp [ j ] [ i ] = dp [ j + 1 ] [ i + 1 ] + 1
Find maximum of all the values in dp [ ] [ ] array to get the maximum length
Update the length
Return the maximum length
Driver Code
Function call to find maximum length of subarray
Function to find the maximum length
Initialise maximum length to 1
Initialise left [ ] to find the length of decreasing sequence from left to right
Initialise right [ ] to find the length of decreasing sequence from right to left
Initially store 1 at each index of left and right array
Iterate over the array arr [ ] to store length of decreasing sequence that can be obtained at every index in the right array
Store the length of longest continuous decreasing sequence in maximum
Iterate over the array arr [ ] to store length of decreasing sequence that can be obtained at every index in the left array
Check if we can obtain a longer decreasing sequence after removal of any element from the array arr [ ] with the help of left [ ] & right [ ]
Return maximum length of sequence
Driver code
Function calling
Python3 program to find the length of longest alternate subsequence
LAS [ i ] [ pos ] array to find the length of LAS till index i by including or excluding element arr [ i ] on the basis of value of pos
Base Case
If current element is positive and pos is true Include the current element and change pos to false
Recurr for the next iteration
If current element is negative and pos is false Include the current element and change pos to true
Recurr for the next iteration
If current element is excluded , reccur for next iteration
Driver 's Code
Print LAS
Python 3 implementation of the approach
Function to return the count of all the subsequences with negative product
To store the count of positive elements in the array
To store the count of negative elements in the array
If the current element is positive
If the current element is negative
For all the positive elements of the array
For all the negative elements of the array
Driver code
Python3 implementation of the approach
Function to return the minimum number of steps to reach the end
If the end can 't be reached
Already at the end
If the length is 2 or 3 then the end can be reached in a single step
For the other cases , solve the problem using dynamic programming
It requires no move from the end to reach the end
From the 2 nd last and the 3 rd last index , only a single move is required
Update the answer for every index
If the current index is not reachable
To store the minimum steps required from the current index
If it is a valid move then update the minimum steps required
Update the minimum steps required starting from the current index
Cannot reach the end starting from str [ 0 ]
Return the minimum steps required
Driver code
To store the values of subproblems
Function to find the Longest Palindromic subsequence of even length with no two adjacent characters same
Base cases If the string length is 1 return 0
If the string length is 2
Check if the characters match
If the value with given parameters is previously calculated
If the first and last character of the string matches with the given character
Remove the first and last character and call the function for all characters
If it does not match
Then find the first and last index of given character in the given string
Take the substring from i to j and call the function with substring and the given character
Store the answer for future use
Driver code
Check for all starting characters
Function to return the minimum number of trials needed in the worst case with n eggs and k floors
Fill all the entries in table using optimal substructure property
Return the minimum number of moves
Driver code
Function to return the maximum length of strictly increasing subarray after removing atmost one element
Create two arrays pre and pos
Find out the contribution of the current element in array [ 0 , i ] and update pre [ i ]
Find out the contribution of the current element in array [ N - 1 , i ] and update pos [ i ]
Calculate the maximum length of the stricly increasing subarray without removing any element
Calculate the maximum length of the strictly increasing subarray after removing the current element
Driver code
Python3 program to return the number of square submatrices with all 1 s
Function to return the number of square submatrices with all 1 s
Initialize count variable
If a [ i ] [ j ] is equal to 0
Calculate number of square submatrices ending at ( i , j )
Calculate the sum of the array
Driver code
Python3 implementation of the approach
Segment tree array
Function for point update in segment tree
Base case
If l == r == up
Mid element
Updating the segment tree
Function for the range sum - query
Base case
Mid element
CallIng for the left and the right subtree
Function to return the count
Copying array arr to sort it
Sorting array brr
Map to store the rank of each element
dp array
To store the final answer
Updating the dp array
Rank of the element
Solving the dp - states using segment tree
UpdatIng the final answer
Updating the segment tree
Returning the final answer
Driver code
Function to calculate min cost to build N blocks
Initialize base case
Recurence when i is odd
Recurence when i is even
Driver code
Python3 implementation of the above approach
Function to find the size of the largest divisible subarray
Mark all elements of the array
Traverse reverse
For all multiples of i
Return the required answer
Driver code
Function call
Python3 implementation of the approach
Function to return the length of the largest sub - string divisible by 3
Base - case
If the state has been solved before then return its value
Marking the state as solved
Recurrence relation
Driver code
Python3 implementation of th approach
Function to return the number of sub - sequences divisible by 3
Base - cases
If the state has been solved before then return its value
Marking the state as solved
Recurrence relation
Driver code
Function to return the count of minimum elements to be removed from the ends of the array such that the sum of the array decrease by at least K
To store the final answer
Maximum possible sum required
Left point
Right pointer
Total current sum
Two pointer loop
If the sum fits
Update the answer
Update the total sum
Increment the left pointer
Driver code
Python3 implementation of the approach
To store the states of DP
Function to return the minimum merge cost
Base case
If the state has been solved before
Marking the state as solved
Reference to dp [ i ] [ j ]
To store the sum of all the elements in the subarray arr [ i ... j ]
Loop to iterate the recurrence
Returning the solved value
Driver code
Python3 implementation of the approach
To store the states of dp
To determine whether a state has been solved before
Function to return the count
Base cases
If a state has been solved before it won 't be evaluated again
Recurrence relation
Driver code
Function to return the count of the required subsequences
To store the final answer
Multiplier
Loop to find the answer
Condition to update the answer
updating multiplier
Driver code
Python3 implementation of the approach
To store the states of DP
Function to solve the recurrence relation
Base cases
Marking state as solved
Recurrence relation
Function to return the maximum weight
Iterating through all possible values to find the the largest value that can be represented by the given weights
Driver code
Python3 implementation of the approach
Number of vertices
Adjacency list representation of the tree
Array that stores the subtree size
Array to mark all the vertices which are visited
Utility function to create an edge between two vertices
Add a to b 's list
Add b to a 's list
Function to calculate the subtree size
Mark visited
For every adjacent node
If not already visited
Recursive call for the child
Function to calculate the contribution of each edge
Mark current node as visited
For every adjacent node
If it is not already visisted
Function to return the required sum
First pass of the dfs
Second pass
Driver code
Python3 implementation of the approach
Function to return the number of cells in which mirror can be placed
Update the row array where row [ i ] [ j ] will store whether the current row i contains all 1 s in the columns starting from j
Update the column array where col [ i ] [ j ] will store whether the current column j contains all 1 s in the rows starting from i
To store the required result
For every cell except the last row and the last column
If the current cell is not blocked and the light can travel from the next row and the next column then the current cell is valid
For the last column
For the last row , note that the last column is not taken into consideration as the bottom right element has already been considered in the last column previously
Driver code
Python3 implementation of the approach
Function to return the maximum subarray sum
Function to reverse the subarray arr [ 0. . . i ]
Function to return the maximum subarray sum after performing the given operation at most once
To store the result
When no operation is performed
Find the maximum subarray sum after reversing the subarray arr [ 0. . . i ] for all possible values of i
The complete array is reversed so that the subarray can be processed as arr [ 0. . . i ] instead of arr [ i ... N - 1 ]
Driver code
Python3 implementation of the approach
Function to return the maximum possible gcd after replacing a single element
Prefix and Suffix arrays
Single state dynamic programming relation for storing gcd of first i elements from the left in Prefix [ i ]
Initializing Suffix array
Single state dynamic programming relation for storing gcd of all the elements having index greater than or equal to i in Suffix [ i ]
If first or last element of the array has to be replaced
If any other element is replaced
Return the maximized gcd
Driver code
Function to return the sum of products of all the possible k size subsets
Initialising all the values to 0
To store the answer for current value of k
For k = 1 , the answer will simply be the sum of all the elements
Filling the table in bottom up manner
To store the elements of the current row so that we will be able to use this sum for subsequent values of k
We will subtract previously computed value so as to get the sum of elements from j + 1 to n in the ( i - 1 ) th row
Driver code
Python3 implementation of the approach
Function to return the pairs of subsequences from S [ ] and subsequences from T [ ] such that both have the same content
Create dp array
Base values
Base values
Keep previous dp value
If both elements are same
Return the required answer
Driver code
Function to return the maximum count of required elements
For every element in the array starting from the second element
Check all the elements on the left of current element which are divisible by the current element
Driver code
Function to return the maximum count of required elements
divisible [ i ] will store true if arr [ i ] is divisible by any element on its right
To store the maximum required count
For every element of the array
If the current element is divisible by any element on its right
Find the count of element on the left which are divisible by the current element
If arr [ j ] is divisible then set divisible [ j ] to true
Update the maximum required count
Driver code
Python3 implementation of the approach
To store the states of DP
Function to find the required count
Base case
If the state has been solved before return the value of the state
Setting the state as solved
Recurrence relation
Driver code
Python3 implementation of the approach
To store the states of DP
Function to return the required length
Base case
If the state has been solved before return the value of the state
Setting the state as solved
Recurrence relation
Driver code
Python3 implementation of the approach
To store the states of DP
Function to return the required length
Base case
If the state has been solved before return the value of the state
Setting the state as solved
Recurrence relation
Driver code
Python3 implementation of the approach
To store the states of DP
Function to return the length of the longest subsequence whose sum is divisible by m
Base case
If the state has been solved before return the value of the state
Setting the state as solved
Recurrence relation
Driver code
Python3 implementation of the approach
To store the states of DP
Function to return the required count
Base case
If the state has been solved before return the value of the state
Setting the state as solved
Recurrence relation
Driver code
Python3 implementation of the approach
To store states of DP
Function to return the required count
Base case
If the state has been solved before return the value of the state
Setting the state as solved
Recurrence relation
Driver code
Python3 implementation of the approach
To store states of DP
Function to return the required count
Base case
If the state has been solved before return the value of the state
Setting the state as solved
Recurrence relation
Driver code
Python3 implementation of the approach
Function to find the count of integers obtained by replacing ' ? ' in a given string such that formed integer gives remainder 5 when it is divided by 13
Initialise
Place digit j at ? position
Get the remainder
Return the required answer
Driver code
Function to return the size of the longest increasing subsequence
Create an 2D array of integer for tabulation
Take the second sequence as the sorted sequence of the given sequence
Classical Dynamic Programming algorithm for Longest Common Subsequence
Return the ans
Driver code
Function to return the count of n - digit numbers that satisfy the given conditions
Base case
If 0 wasn 't chosen previously
If 0 wasn 't chosen previously
Driver code
Function to return the count of n - digit numbers that satisfy the given conditions
DP array to store the pre - caluclated states
Base cases
i - digit numbers ending with 0 can be formed by concatenating 0 in the end of all the ( i - 1 ) - digit number ending at a non - zero digit
i - digit numbers ending with non - zero can be formed by concatenating any non - zero digit in the end of all the ( i - 1 ) - digit number ending with any digit
n - digit number ending with and ending with non - zero
Driver code
Function to divide an array into k parts such that the summ of difference of every element with the maximum element of that part is minimum
Dp to store the values
Fill up the dp table
Intitilize maximum value
Max element and the summ
Run a loop from i to n
Find the maximum number from i to l and the summ from i to l
Find the summ of difference of every element with the maximum element
If the array can be divided
Returns the minimum summ in K parts
Driver code
Function to return the count of possible subsets
Total possible subsets of n sized array is ( 2 ^ n - 1 )
To store the required count of subsets
Run from i 000. .0 to 111. .1
If current subset has consecutive elements from the array
Driver code
Function to return the count of possible subsets
If previous element was 0 then 0 as well as 1 can be appended
If previous element was 1 then only 0 can be appended
Store the count of all possible subsets
Driver code
Function to calculate the perfix sum of the rows and the columns of the given matrix
Number of rows and cols
First column of the row prefix array
Update the prefix sum for the rows
First row of the column prefix array
Update the prefix sum for the columns
Function to return the perimeter of the square having top - left corner at ( i , j ) and size k
i and j represent the top left corner of the square and k is the size
Get the upper row sum
Get the left column sum
At the distance of k in both direction
The perimeter will be sum of all the values
Since all the corners are included twice , they need to be subtract from the sum
Function to return the maximum perimeter of a square in the given matrix
Number of rows and cols
Function call to calculate the prefix sum of rows and cols
To store the maximum perimeter
Nested loops to choose the top - left corner of the square
Loop for the size of the square
Get the perimeter of the current square
Update the maximum perimeter so far
Driver code
Calculates the maximum score possible for P1 If only the bags from beg to ed were available
Length of the game
Which turn is being played
Base case i . e last turn
if it is P1 's turn
if P2 's turn
Player picks money from the left end
Player picks money from the right end
If it is player 1 's turn then  current picked score added to  his total. choose maximum of  the two scores as P1 tries to  maximize his score.
If player 2 ' s ▁ turn ▁ don ' t add current picked bag score to total . choose minimum of the two scores as P2 tries to minimize P1 's score.
Input array
Function Calling
A Dynamic Programming based Python3 program to find minimum number of jumps to reach Destination
Function that returns the min number of jump to reach the destination
We consider only those Fibonacci numbers which are less than n , where we can consider fib [ 30 ] to be the upper bound as this will cross 10 ^ 5
DP [ i ] will be storing the minimum number of jumps required for the position i . So DP [ N + 1 ] will have the result we consider 0 as source and N + 1 as the destination
Base case ( Steps to reach source is )
Initialize all table values as Infinite
Go through each positions till destination .
Calculate the minimum of that position if all the Fibonacci numbers are considered
If the position is safe or the position is the destination then only we calculate the minimum otherwise the cost is MAX as default
- 1 denotes if there is no path possible
Driver Code
Python3 program to find the sum of the addition of all possible subsets
Recursive function to find the maximum value of the given recurrence
If we get K elements
If we have reached the end and K elements are not there
If the state has been visited
Iterate for every element as the next possible element and take the element which gives the maximum answer
If this element is the first element in the individual pair in the subsequence then simply recurrence with the last element as i - th index
If this element is the second element in the individual pair , the find gcd with the previous element and add to the answer and recur for the next element
Driver Code
Function to return the maximum number of given operations required to remove the given entirely
If length of the is zero
Single operation can delete the entire string
To store the prefix of the string which is to be deleted
Prefix s [ 0. . i ]
To store the subs [ i + 1. . .2 * i + 1 ]
If the prefix s [ 0. . . i ] can be deleted
1 operation to remove the current prefix and then recursively find the count of operations for the subs [ i + 1. . . n - 1 ]
Entire has to be deleted
Driver code
Python3 program to implement the above approach
Function to add an edge to the tree
Function to run DFS and calculate the height of the subtree below it
Initially initialize with 1
Traverse for all nodes connected to node
If node is not parent then recall dfs
Add the size of the subtree beneath it
Function to assign weights to edges to maximize the final sum
Initialize it which stores the height of the subtree beneath it
Call the DFS function to
Sort the given array
Stores the number of times an edge is part of a path
Iterate for all edges and find the number of nodes on the left and on the right
Node 1
Node 2
If the number of nodes below is less then the other will be n - dp [ node ]
Second condition
Sort the number of times an edges occurs in the path
Find the summation of all those paths and return
Driver code
Add an edge 1 - 2 in the tree
Add an edge 2 - 3 in the tree
Add an edge 3 - 4 in the tree
Add an edge 3 - 5 in the tree
Array which gives the edges weight to be assigned
Python 3 program to find the sum of the minimum of all the segments
Function to maximize the sum of the minimums
If k segments have been divided
If we are at the end
If we donot reach the end then return a negative number that cannot be the sum
If at the end but k segments are not formed
If the state has been visited already
If the state has not been visited
Get the minimum element in the segment
Iterate and try to break at every index and create a segment
Find the minimum element in the segment
Find the sum of all the segments trying all the possible combinations
Return the answer by memoizing it
Driver Code
Initialize dp array with - 1
Function to find the minimum required sum using dynamic programming
If both start and bucket reached end then return 0 else that arrangement is not possible so return INT_MAX
Corner case
If state if already calculated then return its answer
Start filling zeroes and ones which to be accommodated in jth bucket then ans for current arrangement will be ones * zeroes + recur ( i + 1 , bucket + 1 )
If this arrangement is not possible then don 't calculate further
Function to initialize the dp and call solveUtil ( ) method to get the answer
Start with 0 - th index and 1 bucket
Driver code
K buckets
Python3 implementation of the above approach
Function to return the probability when number of heads is greater than the number of tails
Declaring the DP table
Base case
Iterating for every coin
j represents the numbers of heads
If number of heads is equal to zero there there is only one possibility
When the number of heads is greater than ( n + 1 ) / 2 it means that heads are greater than tails as no of tails + no of heads is equal to n for any permutation of heads and tails
Driver Code
1 based indexing
Number of coins
Function call
Python3 function to calculate the number of ways to achieve sum x in n no of throws
Function to calculate recursively the number of ways to get sum in given throws and [ 1. . m ] values
Base condition 1
Base condition 2
If value already calculated dont move into re - computation
Recursively moving for sum - i in throws - 1 no of throws left
Inserting present values in dp
Driver function
Function to return the length of the longest required sub - sequence
Sort the array
To store the resultant length
If array contains only one element then it divides itself
Every element divides itself
Count for all numbers which are lesser than a [ i ]
If a [ i ] % a [ j ] then update the maximum subsequence length , dp [ i ] = max ( dp [ i ] , 1 + dp [ j ] ) where j is in the range [ 0 , i - 1 ]
If array contains only one element then i = j which doesn 't satisfy the condition
Driver code
Python3 implementation of the approach
Function to return the maximized happiness
Two arrays similar to 0 1 knapsack problem
To store the happiness of the current group
Current person is a child
Woman
Man
Old person
Group 's happiness is the sum of happiness  of the people in the group multiplied by  the number of people
Solution using 0 1 knapsack
Driver code
Number of seats
Groups
Python3 implementation of the approach
To store states of DP
To check if a state has been solved
Function to compute the states
Base case
Check if a state has been solved
Setting a state as solved
Returning the solved state
Function to pre - compute the states dp [ 0 ] [ 0 ] , dp [ 0 ] [ 1 ] , . . , dp [ 0 ] [ C_MAX ]
Function to answer a query in O ( 1 )
Driver code
Performing required pre - computation
Perform queries
Python3 implementation of the approach
To store the states of dp
To check if a given state has been solved
To store the prefix - sum
Function to fill the prefix_sum [ ] with the prefix sum of the given array
Function to find the maximum sum subsequence such that no two elements are adjacent
Base case
To check if a state has been solved
Required recurrence relation
Returning the value
Driver code
Finding prefix - sum
Finding the maximum possible sum
Python3 program to find maximum path sum in a 2D matrix when exactly two left moves are allowed
Function to return the maximum path sum
Copy last column i . e . starting and ending columns in another array
Calculate suffix sum in each row
Select the path we are going to follow
Driver Code
Python3 implementation of the approach
Function to return the modular inverse using Fermat 's little theorem
Function to generate hash
To store prefix - sum of rolling hash
Multiplier for different values of i
Generating hash value for string b
Generating prefix - sum of hash of a
Function that returns true if the required sub - string in a is equal to b
To store hash of required sub - string of A
If i = 0 then requires hash value
Required hash if i != 0
Comparing hash with hash of B
Driver Code
Generating hash
Queries
Perform queries
Python3 implementation of the approach
Array to store the states of DP
Array to check if a state has been solved before
To store the sum of the array elements
Function to find the sum of all the array elements
Function to return the number of ways
If sum is not divisible by k answer will be zero
Base case
To check if a state has been solved before
Sum of all the numbers from the beginning of the array
Setting the current state as solved
Recurrence relation
Returning solved state
Driver code
Function call to find the sum of the array elements
Print the number of ways
Python 3 implementation of the approach
To store the states of dp
Function to return the maximized sum
Base case
Checks if a state is already solved
Recurrence relation
Return the result
Driver code
Python program to calculate the maximum sum of increasing subsequence of length k
In the implementation dp [ n ] [ k ] represents maximum sum subsequence of length k and the subsequence is ending at index n .
Initializing whole multidimensional dp array with value - 1
For each ith position increasing subsequence of length 1 is equal to that array ith value so initializing dp [ i ] [ 1 ] with that array value
Starting from 1 st index as we have calculated for 0 th index . Computing optimized dp values in bottom - up manner
check for increasing subsequence
Proceed if value is pre calculated
Check for all the subsequences ending at any j < i and try including element at index i in them for some length l . Update the maximum value for every length .
The final result would be the maximum value of dp [ i ] [ k ] for all different i .
When no subsequence of length k is possible sum would be considered zero
Driver Code
Array to store the numbers used to form the required sum
Function to print the array which contains the unique partitions which are used to form the required sum
Function to find all the unique partitions remSum = remaining sum to form maxVal is the maximum number that can be used to make the partition
If remSum == 0 that means the sum is achieved so print the array
i will begin from maxVal which is the maximum value which can be used to form the sum
Store the number used in forming sum gradually in the array
Since i used the rest of partition cant have any number greater than i hence second parameter is i
Driver code
Python 3 implementation of the approach
Array to store bit - wise prefix count
Function to find the prefix sum
Loop for each bit
Loop to find prefix - count for each row
Finding column - wise prefix count
Function to return the result for a query
To store the answer
Loop for each bit
To store the number of variables with ith bit set
If count of variables with ith bit set is greater than 0
Driver code
Python 3 implementation of the approach
Array to store bit - wise prefix count
Function to find the prefix sum
Loop for each bit
Loop to find prefix - count for each row
Finding column - wise prefix count
Function to return the result for a query
To store the answer
Loop for each bit
To store the number of variables with ith bit set
If count of variables with ith bit set is greater than 0
Driver code
Python 3 program to implement above approach
variable to store states of dp
variable to check if a given state has been solved
Function to find the maximum sum subsequence such that no two elements are adjacent
Base case
To check if a state has been solved
Required recurrence relation
Returning the value
Driver code
Python3 program to find out maximum value from a given sequence of coins
For both of your choices , the opponent gives you total sum minus maximum of his value
Returns optimal value possible that a player can collect from an array of coins of size n . Note than n must be even
Compute sum of elements
Initialize memoization table
Driver Code
Python3 program for the above approach
Function to calculate min cost to choose k increasing elements
If k elements are counted return 0
If all elements of array has been traversed then return MAX_VALUE
To check if this is already calculated
When i 'th elements  is not considered
When the ith element is greater than previous element check if adding its cost makes total cost minimum
Driver code
Python3 implementation of the approach
Function to return the maximum sum
Base case
If already calculated
If no elements have been chosen
Do not choose any element and use Kadane 's algorithm by taking max
Choose the sub - array and multiply x
Choose the sub - array and multiply x
End the sub - array multiplication
No more multiplication
Memoize and return the answer
Function to get the maximum sum
Initialize dp with - 1
Iterate from every position and find the maximum sum which is possible
Driver code
Python3 implementation of the approach
Pre - processing function
Get the size of the string
Initially mark every position as false
For the length
Iterate for every index with length j
If the length is less than 2
If characters are equal
Check for equal
Function to return the number of pairs
Create the dp table initially
Declare the left array
Declare the right array
Initially left [ 0 ] is 1
Count the number of palindrome pairs to the left
Initially right most as 1
Count the number of palindrome pairs to the right
Count the number of pairs
Driver code
Python3 implementation of the approach
Pre - processing function
Get the size of the string
Initially mark every position as false
For the length
Iterate for every index with length j
If the length is less than 2
If characters are equal
Check for equal
Function to answer every query in O ( 1 )
Driver code
Python3 program to find the length of the longest increasing sub sequence from the given array such that no two adjacent elements are co prime
Function to find the length of the longest increasing sub sequence from the given array such that no two adjacent elements are co prime
To store dp and d value
To store required answer
For all elements in the array
Initially answer is one
For all it 's divisors
Update the dp value
Update the divisor value
Check for required answer
Update divisor of a [ i ]
Return required answer
Driver code
Function that returns true if s contains three consecutive 1 's
Function to return the count of required strings
Driver code
Function to return the count of required strings
'0' at ith position
'1' at ith position
Driver code
Base condition : 2 ^ ( i + 1 ) because of 0 indexing
Function to return the sum of both the diagonal elements of the required matrix
Array to store sum of diagonal elements
Base cases
Computing the value of dp
Driver code
Function to find the diameter of the tree using Dynamic Programming
Traverse for all children of node
Call DFS function again
Include the current node then donot include the children
Donot include current node , then include children or not include them
Recurrence value
Driver code
Constructed tree is 1 / \ 2 3 / \ 4 5
create undirected edges
Numbers to node
Find maximum sum by calling function
Python3 implementation of the approach
To store the states of dp
To check whether a particular state of dp has been solved
Function to find the ways using memoization
Base cases
If required score becomes negative
If current state has been reached before
Set current state to visited
Driver code
Python3 implementation of the approach
Function to return the number of ways to score R runs in B balls with at most W wickets
If the wickets lost are more
If runs scored are more
If condition is met
If no run got scored
Already visited state
If scored 0 run
If scored 1 run
If scored 2 runs
If scored 3 runs
If scored 4 runs
If scored 6 runs
If scored no run and lost a wicket
Memoize and return
Driver code
Function to return the minimum number of delete operations
When a single character is deleted
When a group of consecutive characters are deleted if any of them matches
When both the characters are same then delete the letters in between them
Memoize
Driver code
Python3 implementation of the above approach .
Function to get the minimum product of subsequence such that adjacent elements are separated by a max distance of K
multiset will hold pairs pair = ( log value of product , dp [ j ] value ) dp [ j ] = minimum product % mod multiset will be sorted according to log values Therefore , corresponding to the minimum log value dp [ j ] value can be obtained .
For the first k - sized window .
Update log value by adding previous minimum log value
Update dp [ i ]
Insert it again into the multiset since it is within the k - size window
Eliminate previous value which falls out of the k - sized window
Insert newest value to enter in the k - sized window .
dp [ n - 1 ] will have minimum product % mod such that adjacent elements are separated by a max distance K
Driver Code
Python3 program to find the number of ways to form the group of peopls
Function to pre - compute the Combination using DP
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Function to find the number of ways
Function to pre - compute
Sum the Zci
Iterate for second position
Iterate for first position
Multiply the common Combination value
Driver Code
Function to return the minimum cost
Traverse the string
Min Cost to remove 'c
Min Cost to remove subsequence " co "
Min Cost to remove subsequence " cod "
Min Cost to remove subsequence " code "
Return the minimum cost
Driver Code
Returns Length of maximum Length subsequence
To store the Length of the maximum Length subsequence
To store current element arr [ i ]
To store the Length of the sub - sequence ending at index i and having common digit d
To store digits present in current element
To store Length of maximum Length subsequence ending at index i
For first element maximum Length is 1 for each digit
Find digits of each element , then find Length of subsequence for each digit and then find local maximum
Find digits in current element
For each digit present find Length of subsequence and find local maximum
Update value of dp [ i ] [ d ] for each digit present in current element to local maximum found .
Update maximum Length with local maximum
Driver code
Python implementation of the above approach
Prime numbers upto 100
Function to return the count of required numbers from 0 to num
Base Case
check if the difference is equal to any prime number
If this result is already computed simply return it
Maximum limit upto which we can place digit . If tight is 1 , means number has already become smaller so we can place any digit , otherwise num [ pos ]
If the current position is odd add it to currOdd , otherwise to currEven
Function to convert x into its digit vector and uses count ( ) function to return the required count
Initialize dp
Driver Code
Python3 implementation of the approach
To store vertices and value of k
To store number vertices at a level i
To store the final answer
Function to add an edge between two nodes
Function to find the number of distinct pairs of the vertices which have a distance of exactly k in a tree
At level zero vertex itself is counted
Count the pair of vertices at distance k
For all levels count vertices
Driver code
Add edges
Function call
Required answer
Function to calculate the Sum of XOR of all subarrays
variable to store the final Sum
multiplier
variable to store number of sub - arrays with odd number of elements with ith bits starting from the first element to the end of the array
variable to check the status of the odd - even count while calculating c_odd
loop to calculate initial value of c_odd
loop to iterate through all the elements of the array and update Sum
updating the multiplier
returning the Sum
Driver Code
Python 3 program to count the minimal replacements such that adjacent characters are unequal
function to return integer value of i - th character in the string
Function to count the number of minimal replacements
If the string has reached the end
If the state has been visited previously
Get the current value of character
If it is equal then change it
All possible changes
Change done
If same no change
Driver Code
Length of string
Create a DP array
First character
Function to find minimal replacements
Function to check all combinations
Generate all power sets
Check for every combination
Store sum for all combinations
Check if jth bit in the counter is set If set then print jth element from set
sum += a [ j ] if set then consider as '+
sum -= a [ j ] else consider as '-
If we can get back to 0
Driver Code
Python3 implementation of the above approach
Function to calculate probability
declare dp [ ] [ ] and sum [ ]
precalculate the first row
calculate the probability for each element and update dp table
return result
Driver code
Python3 program to find the maximum number of numbers divisible by 3 in a large number
Function to find the maximum number of numbers divisible by 3 in a large number
store size of the string
Stores last index of a remainder
last visited place of remainder zero is at 0.
To store result from 0 to i
get the remainder
Get maximum res [ i ] value
Driver Code
Pyton3 implementation of the above approach
dist [ ] [ ] will be the output matrix that will finally have the shortest distances between every pair of numbers
Initially same as mat
Add all numbers one by one to the set of intermediate numbers . Before start of an iteration , we have shortest distances between all pairs of numbers such that the shortest distances consider only the numbers in set { 0 , 1 , 2 , . . k - 1 } as intermediate numbers . After the end of an iteration , vertex no . k is added to the set of intermediate numbers and the set becomes { 0 , 1 , 2 , . . k }
Pick all numbers as source one by one
Pick all numbers as destination for the above picked source
If number k is on the shortest path from i to j , then update the value of dist [ i ] [ j ]
If no path
Driver Code
Python3 program to count the number of paths
Function to find the number of paths
If the Summation is more than X
If exactly X weights have reached
Already visited
Count paths
Traverse in all paths
If the edge weight is M
else : Edge 's weight is not M
Driver Code
Initialized the DP array with - 1
Function to count paths
A utility function to add an edge in an undirected graph
A utility function to print the adjacency list representation of graph
Utility Function for findMinOperation ( )
Base Case for current node
Iterate over the adjacency list for src
calculate DP table for each child V
Number of Increase Type operations for node src is equal to maximum of number of increase operations required by each of its child
Number of Decrease Type operations for node src is equal to maximum of number of decrease operations required by each of its child
After performing operations for subtree rooted at src A [ src ] changes by the net difference of increase and decrease type operations
for negative value of node src
Returns the minimum operations required to make value of all vertices equal to zero , uses findMinOperationUtil ( )
Initialise DP table
find dp [ 1 ] [ 0 ] and dp [ 1 ] [ 1 ]
Driver code
Build the Graph / Tree
global array to store factorials
function to calculate the factorials of all the numbers upto k
function to return the binomial coeff
nCr = ( n ! * ( n - r ) ! ) / r !
function to return the sum of the kth powers of n natural numbers
when j is 1
calculating sum ( n ^ 1 ) of unity powers of n storing sum ( n ^ 1 ) for sum ( n ^ 2 )
if k == 1 then temp is the result
for finding sum ( n ^ k ) removing 1 and n * KCk from ( n + 1 ) ^ k
Removing all kC2 * sum ( n ^ ( k - 2 ) ) + ... + kCk - 1 * ( sum ( n ^ ( k - ( k - 1 ) )
storing the result for next sum of next powers of k
Driver code
Python 3 implementation of the approach
Recursive function to find the required number of ways
When all positions are filled
If adjacent pairs are exactly K
If already calculated
Next position filled with same color
Next position filled with different color So there can be m - 1 different colors
Driver Code
Max string length
Function to check whether index start and end can form a bracket pair or not
Check for brackets ( )
Check for brackets [ ]
Check for brackets { }
Function to find number of proper bracket expressions
If starting index is greater than ending index
If dp [ start ] [ end ] has already been computed
Search for the bracket in from next index
If bracket pair is formed , add number of combination
If ? comes then all three bracket expressions are possible
Return answer
If n is odd , string cannot be balanced
Driver Code
Initial DP array
Recursive function to generate all combinations of bits
if the state has already been visited
find if C has no more set bits on left
if no set bits are left for C and there are no set bits for A and B and the carry is 0 , then this combination is possible
if no set bits are left for C and requirement of set bits for A and B have exceeded
Find if the bit is 1 or 0 at third index to the left
carry = 1 and bit set = 1
since carry is 1 , and we need 1 at C 's bit position we can use 0 and 0  or 1 and 1 at A and B bit position
carry = 0 and bit set = 1
since carry is 0 , and we need 1 at C 's  bit position we can use 1 and 0  or 0 and 1 at A and B bit position
carry = 1 and bit set = 0
since carry is 1 , and we need 0 at C 's  bit position we can use 1 and 0  or 0 and 1 at A and B bit position
carry = 0 and bit set = 0
since carry is 0 , and we need 0 at C 's  bit position we can use 0 and 0  or 1 and 1 at A and B bit position
Function to count ways
function call that returns the answer
Driver Code
Computes value of first fibonacci numbers and stores the even - indexed sum
Initialize result
Add remaining terms
For even indices
Return the alternting sum
Driver code
Get n
Find the even - indiced sum
Python3 Program to find even indexed Fibonacci Sum in O ( Log n ) time .
Create an array for memoization
Returns n 'th Fibonacci number using table f[]
Base cases
If fib ( n ) is already computed
Applying above formula [ Note value n & 1 is 1 if n is odd , else 0 ] .
Computes value of even - indexed Fibonacci Sum
Driver Code
Get n
Find the alternating sum
32768 = 2 ^ 15
Array to store Sequence up to 2 ^ 16 = 65536
Utility function to pre - compute odd numbers in ith row of Pascals 's triangle
First term of the Sequence is 1
Initialize i to 1
Initialize p to 1 ( i . e 2 ^ i ) in each iteration i will be pth power of 2
loop to generate gould 's Sequence
i is pth power of 2 traverse the array from j = 0 to i i . e ( 2 ^ p )
double the value of arr [ j ] and store to arr [ i + j ]
update i to next power of 2
increment p
Function to print gould 's Sequence
loop to generate gould 's Sequence  up to n
Driver code
Get n
Function call
Find factorial
Find number of ways to reach mat [ m - 1 ] [ n - 1 ] from mat [ 0 ] [ 0 ] in a matrix mat [ ] [ ] ]
Driver code
Function call
Matrix Mi has dimension p [ i - 1 ] x p [ i ] for i = 1. . n
For simplicity of the program , one extra row and one extra column are allocated in dp [ ] [ ] . 0 th row and 0 th column of dp [ ] [ ] are not used
cost is zero when multiplying one matrix .
Simply following above recursive formula .
Driver code
return the number of common subsequence in two strings
for each character of S
for each character in T
if character are same in both the string
Driver Code
A utility for creating palindrome
checks if number of digits is odd or even if odd then neglect the last digit of _input in finding reverse as in case of odd number of digits middle element occur once
Creates palindrome by just appending reverse of number to itself
Function to generate palindromes
Run two times for odd and even length palindromes
Creates palindrome numbers with first half as i . Value of j decides whether we need an odd length or even length palindrome .
Function to find the minimum number of palindromes required to express N as a sum
Checking if the number is a palindrome
Getting the list of all palindromes upto N
Sorting the list of palindromes
The answer is three if the control reaches till this point
Driver code
Function to find weight of LCS
if this state is already calculated then return
adding required weight for particular match
recurse for left and right child and store the max
Function to calculate cost of string
Driver code
Minimum cost needed to make two strings identical
function to find the maximum sum that exists in a subarray
function to find the length of longest subarray having sum k
unordered_map ' um ' implemented as hash table
traverse the given array
accumulate Sum
when subarray starts from index '0
make an entry for ' Sum ' if it is not present in 'um
check if ' Sum - k ' is present in ' um ' or not
update maxLength
required maximum length
function to find the length of the longest subarray having maximum Sum
Driver Code
Function that returns total number of valid partitions of integer N
Global declaration of 2D dp array which will be later used for memoization
Initializing 2D dp array with - 1 we will use this 2D array for memoization
If this subproblem is already previously calculated , then directly return that answer
If N < K , then no valid partition is possible
If N is between K to 2 * K then there is only one partition and that is the number N itself
Initialize answer with 1 as the number N itself is always a valid partition
For loop to iterate over K to N and find number of possible valid partitions recursively .
Memoization is done by storing this calculated answer
Returning number of valid partitions
Driver code
Printing total number of valid partitions
Python3 program to count the pairs whose sum of digits is co - prime
Function to find the elements after doing the sum of digits
Traverse from a to b
Find the sum of the digits of the elements in the given range one by one
Function to count the co - prime pairs
Function to make the pairs by doing the sum of digits
Count pairs that are co - primes
Driver code
Function to count the pairs
Python3 program to count the pairs whose sum of digits is co - prime
Recursive function to return the frequency of numbers having their sum of digits i
Returns 1 or 0
Returns value of the dp if already stored
Loop from digit 0 to 9
To change the tight to 1
Calling the recursive function to find the frequency
Function to find out frequency of numbers from 1 to N having their sum of digits from 1 to 162 and store them in array
Number to string conversion
Calling the recursive function and pushing it into array
Function to find the pairs
Calling the formArray function of a - 1 numbers
Calling the formArray function of b numbers
Subtracting the frequency of higher number array with lower number array and thus finding the range of numbers from a to b having sum from 1 to 162
To find out total number of pairs which are co - prime
Driver code
Function to count the pairs
Python3 program to check if the number is semi - perfect or not
code to find all the factors of the number excluding the number itself
vector to store the factors
note that this loop runs till sqrt ( n )
if the value of i is a factor
condition to check the divisor is not the number itself
return the vector
Function to check if the number is semi - perfect or not
find the divisors
sorting the vector
subset to check if no is semiperfect
initialising 1 st column to true
initializing 1 st row except zero position to 0
loop to find whether the number is semiperfect
calculation to check if the number can be made by summation of divisors
if not possible to make the number by any combination of divisors
Driver Code
To store fibonacci numbers 42 second number in fibonacci series largest possible integer
Function to generate fibonacci series
Recursive function to return the number of ways
base condition
for recursive function call
Driver code
function to find the minimum cost to reach N - th floor
declare an array
base case
initially to climb till 0 - th or 1 th stair
iterate for finding the cost
return the minimum
Driver Code
function to find the minimum cost to reach N - th floor
traverse till N - th stair
update the last two stairs value
Driver Code
Python program for SP - Wolfish
Function to find the maxCost of path from ( n - 1 , n - 1 ) to ( 0 , 0 )
base condition
reaches the point
if the state has been visited previously
i + j
check if it is a power of 2 , then only move diagonally
if not a power of 2 then move side - wise
Function to return the maximum cost
calling dp function to get the answer
Driver Code
Function calling to get the answer
Python 3 program to find Edit Distance ( when only two operations are allowed , insert and delete ) using LCS .
Find LCS
Edit distance is delete operations + insert operations .
Driver Code
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]
Driver Code
Find the length of string
Function to count the number of steps in a tetrahedron
initially coming to B is B -> B
cannot reach A , D or C
iterate for all steps
recurrence relation
memoize previous values
returns steps
Driver code
function to find the length of longest subarray having count of 1 ' s ▁ one ▁ more ▁ than ▁ count ▁ of ▁ 0' s
unordered_map ' um ' implemented as hash table
traverse the given array
accumulating sum
when subarray starts form index '0
make an entry for ' sum ' if it is not present in 'um
check if ' sum - 1' is present in ' um ' or not
update ' start ' , ' finish ' and maxLength
required maximum length
function to find the maximum area sub - matrix having count of 1 ' s ▁ one ▁ more ▁ than ▁ count ▁ of ▁ 0' s
variables to store final and intermediate results
set the left column
Initialize all elements of temp as 0
Set the right column for the left column set by outer loop
Calculate sum between current left and right for every row ' i ' , consider '0' as '-1
function to set the ' start ' and ' finish ' variables having index values of temp [ ] which contains the longest subarray of temp [ ] having count of 1 ' s ▁ ▁ one ▁ more ▁ than ▁ count ▁ of ▁ 0' s
Compare with maximum area so far and accordingly update the final variables
Print final values
Driver Code
initializing the matrix .
if knight is on the target position return 0.
if already calculated then return that value . Taking absolute difference .
there will be two distinct positions from the knight towards a target . if the target is in same row or column as of knight than there can be four positions towards the target but in that two would be the same and the other two would be the same .
( x1 , y1 ) and ( x2 , y2 ) are two positions . these can be different according to situation . From position of knight , the chess board can be divided into four blocks i . e . . N - E , E - S , S - W , W - N .
ans will be , 1 + minimum of steps required from ( x1 , y1 ) and ( x2 , y2 ) .
exchanging the coordinates x with y of both knight and target will result in same ans .
Driver Code
size of chess board n * n
( x , y ) coordinate of the knight . ( tx , ty ) coordinate of the target position .
( Exception ) these are the four corner points for which the minimum steps is 4.
dp [ a ] [ b ] , here a , b is the difference of x & tx and y & ty respectively .
Use Dynamic Programming to find sum of subsequences .
Find sum pf array elements
dp [ i ] [ j ] would be > 0 if arr [ 0. . i - 1 ] has a subsequence with sum equal to j .
There is always sum equals zero
Fill up the dp table
Initialize the counter
Check if the sum exists
check sum is divisible by m
Driver Code
Function that returns the length of the longest decreasing subsequence
Initialize LDS with 1 for all index The minimum LDS starting with any element is always 1
Compute LDS from every index in bottom up manner
Select the maximum of all the LDS values
returns the length of the LDS
Driver Code
Python3 program to count number of decreasing path in a matrix
Function that returns the number of decreasing paths from a cell ( i , j )
checking if already calculated
all possible paths
counts the total number of paths
In all four allowed direction .
new co - ordinates
Checking if not going out of matrix and next cell value is less than current cell value .
function that returns the answer
Function that counts the total decreasing path in the matrix
Initialising dp [ ] [ ] to - 1.
Calculating number of decreasing path from each cell .
Driver Code
function call that returns the count of decreasing paths in a matrix
Python3 Program to find sum of product of consecutive Binomial Coefficient .
Find the binomial coefficient upto nth term
C [ 0 ] = 1 ; nC0 is 1
Compute next row of pascal triangle using the previous row
Return the sum of the product of consecutive binomial coefficient .
finding the sum of product of consecutive coefficient .
Driver Code
Python 3 Program to find sum of product of r and rth Binomial Coefficient i . e summation r * nCr
Return the first n term of binomial coefficient .
C [ 0 ] = 1 nC0 is 1
Compute next row of pascal triangle using the previous row
Return summation of r * nCr
finding the first n term of binomial coefficient
Iterate a loop to find the sum .
Driver Code
Return nCr
C [ 0 ] = 1 ; nC0 is 1
Compute next row of pascal triangle using the previous row
Return the number of array that can be formed of size n and sum equals to k .
Driver Code
Class to store the minimum element and its position
initialize prefix and suffix sum arrays with 0
add current element to Sum
add current element to Sum
initialize the minimum element to be a large value
check for the minimum absolute difference between current prefix sum and the next suffix sum element
if prefixsum has a greater value then position is the next element , else it 's the same element.
return the data in class .
Driver Code
Python 3 Program to find the number of circular tour that visits all petrol pump
Return the number of pumps from where we can start the journey .
Making Circular Array .
for each of the petrol pump .
If tank is less than 0.
If starting pump is greater than n , return ans as 0.
For each of the petrol pump
Finding the need array
If need is 0 , increment the count .
Driver Code
Python3 program to print equal sum sets of array .
Function to print equal sum sets of array .
Finding sum of array elements
Check sum is even or odd . If odd then array cannot be partitioned . Print - 1 and return .
Divide sum by 2 to find sum of two possible subsets .
Boolean DP table to store result of states . dp [ i ] [ j ] = true if there is a subset of elements in first i elements of array that has sum equal to j .
If number of elements are zero , then no sum can be obtained .
Sum 0 can be obtained by not selecting any element .
Fill the DP table in bottom up manner .
Excluding current element .
Including current element
Required sets set1 and set2 .
If partition is not possible print - 1 and return .
Start from last element in dp table .
If current element does not contribute to k , then it belongs to set 2.
If current element contribute to k then it belongs to set 1.
Print elements of both the sets .
Driver Code
Python3 program for maximum average sum partition
storing prefix sums
for each i to n storing averages
Driver code
K = 3 ; atmost partitioning size
N and M to define sizes of arr , dp , current_arr and maxSum
INF to define min value
Function to find maximum sum
dp array of size N x M
current_arr of size M
maxsum of size M
If we have 0 elements from 0 th array
Compute the cumulative sum array
Calculating the maximum contiguous array for every length j , j is from 1 to lengtn of the array
Every state is depending on its previous state
computation of dp table similar approach as knapsack problem
Now we have done processing with the last array lets find out what is the maximum sum possible
Driver code
First element of each row is the size of that row
Function to find maximum possible value of number that can be obtained using array elements .
Variable to represent current index .
Variable to show value between 0 and maxLimit .
Table to store whether a value can be obtained or not upto a certain index 1. dp [ i , j ] = 1 if value j can be obtained upto index i . 2. dp [ i , j ] = 0 if value j cannot be obtained upto index i .
Check for index 0 if given value val can be obtained by either adding to or subtracting arr [ 0 ] from num .
1. If arr [ ind ] is added to obtain given val then val - arr [ ind ] should be obtainable from index ind - 1. 2. If arr [ ind ] is subtracted to obtain given val then val + arr [ ind ] should be obtainable from index ind - 1. Check for both the conditions .
If either of one condition is True , then val is obtainable at index ind .
Find maximum value that is obtained at index n - 1.
If no solution exists return - 1.
Driver Code
Function to generate nth term of Moser - de Bruijn Sequence
S ( 0 ) = 0
S ( 1 ) = 1
S ( 2 * n ) = 4 * S ( n )
S ( 2 * n + 1 ) = 4 * S ( n ) + 1
Generating the first ' n ' terms of Moser - de Bruijn Sequence
Driver Program
Util function to find minimum sum for a path
For storing the result in a 1 - D array , and simultaneously updating the result .
For the bottom row
Calculation of the remaining rows , in bottom up manner .
return the top element
Driver Code
Base case
check if sum is divisible by M
1. Try placing '+
2. Try placing '-
Python program to find minimum removals to make max - min <= K
function to check all possible combinations of removal and return the minimum one
base case when all elements are removed
if condition is satisfied , no more removals are required
if the state has already been visited
when Amax - Amin > d
minimum is taken of the removal of minimum element or removal of the maximum element
To sort the array and return the answer
sort the array
fill all stated with - 1 when only one element
Driver Code
Function to find rightmost index which satisfies the condition arr [ j ] - arr [ i ] <= k
Initialising start to i + 1
Initialising end to n - 1
Binary search implementation to find the rightmost element that satisfy the condition
Check if the condition satisfies
Store the position
Make start = mid + 1
Make end = mid
Return the rightmost position
Function to calculate minimum number of elements to be removed
Sort the given array
Iterate from 0 to n - 1
Find j such that arr [ j ] - arr [ i ] <= k
If there exist such j that satisfies the condition
Number of elements to be removed for this particular case is ( j - i + 1 )
Return answer
Driver Code
Naive function to count the number of ordered pairs such that their bitwise and is 0
check for all possible pairs
add 2 as ( i , j ) and ( j , i ) are considered different
Driver Code
Python program to calculate the number of ordered pairs such that their bitwise and is zero
efficient function to count pairs
stores the frequency of each number
initialize 0 to all
count the frequency of every element
iterate for al possible values that a [ i ] can be
if the last bit is ON
else : is the last bit is OFF
iterate till n
if mask 's ith bit is set
else : if mask 's ith bit is not set
iterate for all the array element and count the number of pairs
return answer
Driver Code
Python3 program to find the minimum sum of multiplication of n numbers
Used in recursive memoized solution
function to calculate the cumulative sum from a [ i ] to a [ j ]
base case
memoization , if the partition has been called before then return the stored value
store a max value
we break them into k partitions
store the min of the formula thus obtained
return the minimum
Driver code
Python 3 Program to print Fibonacci series in reverse order
assigning first and second elements
storing sum in the preceding location
printing array in reverse order
Driver function
function to check if a string can be converted to another string by performing following operations
calculates length
mark 1 st position as true
traverse for all DPi , j
if possible for to convert i characters of s1 to j characters of s2
if upper_case ( s1 [ i ] ) == s2 [ j ] is same
if not upper then deletion is possible
driver code
Returns probability to reach N
Driver code
Python3 program to find minimum deletions to make palindrome .
Find reverse of input string
Create a DP table for storing edit distance of string and reverse .
Find edit distance between input and revInput considering only delete operation .
Go from bottom left to top right and find the minimum
Driver Code
dp [ i ] = number of max heaps for i distinct integers
nck [ i ] [ j ] = number of ways to choose j elements form i elements , no order
log2 [ i ] = floor of logarithm of base 2 of i
to calculate nCk
calculate l for give value of n
number of elements that are actually present in last level ( hth level ) ( 2 ^ h - 1 )
if more than half - filled
return ( 1 << h ) - 1 ( 2 ^ h ) - 1
find maximum number of heaps for n
function to initialize arrays
for each power of two find logarithm
Driver code
Python3 Program to print Hosoya 's triangle of height n.
Print the Hosoya triangle of height n .
base case .
For each row .
for each column
recursive steps .
printing the solution
Driver Code
Python3 Program to find number of ways to which numbers that are greater than given number can be added to get sum .
Return number of ways to which numbers that are greater than given number can be added to get sum .
Filling the table . k is for numbers greater than or equal that are allowed .
i is for sum
initializing dp [ i ] [ k ] to number ways to get sum using numbers greater than or equal k + 1
if i > k
Driver Code
Return Entringer Number E ( n , k )
Base Case
Base Case
Recursive step
Driven Program
Return euleriannumber A ( n , m )
For each row from 1 to n
For each column from 0 to m
If i is greater than j
If j is 0 , then make that state as 1.
basic recurrence relation .
Driven Program
Return the nth Delannoy Number .
Base case
Recursive step .
Driven code
Return the nth Delannoy Number .
Base cases
Driven code
Python3 program to find longest alternating subarray starting from every index .
Fill count [ ] from end .
Print result
Driver Code
function for calculating max possible result
Compute remaining values in bottom up manner .
driver code
Python Program to find the length of substring with maximum difference of zeroes and ones in binary string .
Return true if there all 1 s
Checking each index is 0 or not .
Find the length of substring with maximum difference of zeroes and ones in binary string
If string is over
If the state is already calculated .
Returns length of substring which is having maximum difference of number of 0 s and number of 1 s
If all 1 s return - 1.
Else find the length .
Driven Program
Recursive Python3 program to find minimum jumps to reach last building from first .
Returns minimum jump path from ( 0 , 0 ) to ( m , n ) in height [ R ] [ C ]
base case
Find minimum jumps if we go through diagonal
Find minimum jumps if we go through down
Find minimum jumps if we go through right
return minimum jumps
Driver Code
Python3 program to find maximum sum subsequence such that elements are at least k distance away .
MS [ i ] is going to store maximum sum subsequence in subarray from arr [ i ] to arr [ n - 1 ]
We fill MS from right to left .
Driver code
Python3 program to find length of the longest balanced subsequence
Variable to count all the open brace that does not have the corresponding closing brace .
To count all the close brace that does not have the corresponding open brace .
Iterating over the String
Number of open braces that hasn 't been closed yet.
Number of close braces that cannot be mapped to any open brace .
Mapping the ith close brace to one of the open brace .
Driver Code
Function to calculate alternating sub - array for each index of array elements
Initialize the base state of len [ ]
Calculating value for each element
If both elements are different then add 1 to next len [ i + 1 ]
else initialize to 1
Print lengths of binary subarrays .
Driver code
Function to calculate alternating sub - array for each index of array elements
Initialize count variable for storing length of sub - array
Initialize ' prev ' variable which indicates the previous element while traversing for index 'i
If both elements are same , print elements because alternate element is not found for current index
print count and decrement it .
Increment count for next element
Re - initialize previous variable
If elements are still available after traversing whole array , print it
Driver Code
Python3 program to find LCS of two arrays with k changes allowed in the first array .
Return LCS with at most k changes allowed .
If at most changes is less than 0.
If any of two array is over .
Making a reference variable to dp [ n ] [ m ] [ k ]
If value is already calculated , return that value .
calculating LCS with no changes made .
calculating LCS when array element are same .
calculating LCS with changes made .
Driven Program
function to count ways of building a street of n rows
base case
ways of building houses in both the spots of ith row
ways of building an office in one of the two spots of ith row
total ways for n rows
Driver Code
Program to count ways
Iterate from 2 to n
Driver code
Count Ways
function to find maximum length subsequence with difference between adjacent elements as either 0 or 1
Initialize mls [ ] values for all indexes
Compute optimized maximum length subsequence values in bottom up manner
Store maximum of all ' mls ' values in 'max
required maximum length subsequence
Driver program to test above
To find winner of game
To store results
Initial values
Computing other values .
If A losses any of i - 1 or i - x or i - y game then he will definitely win game i
Else A loses game .
If dp [ n ] is true then A will game otherwise he losses
Driver Code
method returns maximum games a winner needs to play in N - player tournament
for 0 games , 1 player is needed for 1 game , 2 players are required
loop until i - th Fibonacci number is less than or equal to N
result is ( i - 1 ) because i will be incremented one extra in while loop and we want the last value which is smaller than N , so
Driver code
Find min elements to remove from array to make it strictly increasing
Mark all elements of LIS as 1
Find LIS of array
Return min changes for array to strictly increasing
Driver Code
Python3 program to count the distinct transformation of one string to other .
If b = " " i . e . , an empty string . There is only one way to transform ( remove all characters )
Fill dp [ ] [ ] in bottom up manner Traverse all character of b [ ]
Traverse all characters of a [ ] for b [ i ]
Filling the first row of the dp matrix .
Filling other rows
Driver Code
Python code to find nth number with digits 0 , 1 , 2 , 3 , 4 , 5
function to convert num to base 6
Driver code
initialize an array to 0
function calling to convert number n to base 6
if size is zero then return zero
Python3 program to find maximum length of subsequence of a string X such it is substring in another string Y .
Return the maximum size of substring of X which is substring in Y .
Calculating value for each element .
If alphabet of string X and Y are equal make dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]
Else copy the previous value in the row i . e dp [ i - 1 ] [ j - 1 ]
Finding the maximum length
Driver Code
Python3 program to choose item with maximum sum of weight under given constraint
base cases : if no item is remaining
first make pair with last chosen item and difference between weight and values
choose maximum value from following two 1 ) not selecting the current item and calling recursively 2 ) selection current item , including the weight and updating the difference before calling recursively
method returns maximum sum of weight with K as ration of sum of weight and their values
Driver code
Returns minimum cost to form a pyramid
Store the maximum possible pyramid height
Maximum height at start is 1
For each position calculate maximum height
Maximum height at end is 1
For each position calculate maximum height
Find minimum possible among calculated values
Find maximum height of pyramid
Calculate cost of this pyramid
Calculate cost of left half
Calculate cost of right half
Driver Code
Function to find max sum without adjacent
Sum including maximum element of first column
Not including first column 's element
Traverse for further elements
Update max_sum on including or excluding of previous column
Include current column . Add maximum element from both row of current column
If current column doesn 't to be included
Return maximum of excl and incl As that will be the maximum sum
Driver code
method returns min steps of insertion we need to perform to sort array 'arr
lis [ i ] is going to store length of lis that ends with i .
Initialize lis values for all indexes
Compute optimized lis values in bottom up manner
The overall LIS must end with of the array elements . Pick maximum of all lis values
return size of array minus length of LIS as final result
Driver Code
checking if two charactors are equal
Python3 program to print distinct characters of a string .
Print duplicates present in the passed string
Create an array of size 256 and count of every character in it
Count array with frequency of characters
Print characters having count more than 0
Driver Code
A simple recursive Python program to find shortest uncommon subsequence .
A recursive function to find the length of shortest uncommon subsequence
S String is empty
T String is empty
Loop to search for current character
char not found in T
Return minimum of following two Not including current char in answer Including current char
Driver code
A dynamic programming based Python program to find shortest uncommon subsequence .
Returns length of shortest common subsequence
declaring 2D array of m + 1 rows and n + 1 columns dynamically
T string is empty
S string is empty
char not present in T
Driver Code
Function to count ways to jump to reach end for each array element
count_jump [ i ] store number of ways arr [ i ] can reach to the end
Last element does not require to jump . Count ways to jump for remaining elements
if the element can directly jump to the end
Add the count of all the elements that can reach to end and arr [ i ] can reach to them
if element can reach to end then add its count to count_jump [ i ]
if arr [ i ] cannot reach to the end
print count_jump for each array element
Driver code
method returns minimum step for deleting the string , where in one step a palindrome is removed
declare dp array and initialize it with 0 s
loop for substring length we are considering
loop with two variables i and j , denoting starting and ending of substrings
If substring length is 1 , then 1 step will be needed
delete the ith char individually and assign result for subproblem ( i + 1 , j )
if current and next char are same , choose min from current and subproblem ( i + 2 , j )
loop over all right characters and suppose Kth char is same as ith character then choose minimum from current and two substring after ignoring ith and Kth char
Uncomment below snippet to print actual dp tablex for ( int i = 0 ; i < N ; i ++ , cout << endl ) for ( int j = 0 ; j < N ; j ++ ) cout << dp [ i ] [ j ] << " ▁ " ;
Driver Code
Initialize answer as infinite .
function to generate all possible answers . and compute minimum of all costs . i -- > is index of previous partition par -- > is current number of partitions a [ ] and n -- > Input array and its size current_ans -- > Cost of partitions made so far .
If number of partitions is more than k
If we have mad k partitions and have reached last element
1 ) Partition array at different points 2 ) For every point , increase count of partitions , " par " by 1. 3 ) Before recursive call , add cost of the partition to current_ans
Driver code
function to calculate min steps
base case
store temp value for n as min ( f ( n - 1 ) , f ( n2 ) , f ( n3 ) ) + 1
store memo [ n ] and return
This function mainly initializes memo [ ] and calls getMinSteps ( n , memo )
initialize memoized array
driver program
Python3 program to count the number of arrays of size n such that every element is in range [ 1 , m ] and adjacent are divisible
For storing factors .
For storing multiples .
calculating the factors and multiples of elements [ 1. . . m ] .
Initialising for size 1 array for each i <= m .
Calculating the number of array possible of size i and starting with j .
For all previous possible values . Adding number of factors .
Adding number of multiple .
Calculating the total count of array which start from [ 1. . . m ] .
Driven Program
Python3 program to find temple offerings required
To store count of increasing order temples on left and right ( including current temple )
Returns count of minimum offerings for n temples of given heights .
Initialize counts for all temples
Values corner temples
Filling left and right values using same values of previous ( or next
Computing max of left and right for all temples and returing sum
Driver code
Returns smallest possible length with given operation allowed .
Counint occurrences of three different characters ' a ' , ' b ' and ' c ' in str
If all characters are same .
If all characters are present even number of times or all are present odd number of times .
Answer is 1 for all other cases .
Driver code
Memoization based Python3 program to find the largest sum zigzag sequence
Returns largest sum of a Zigzag sequence starting from ( i , j ) and ending at a bottom cell .
If we have reached bottom
Find the largest sum by considering all possible next elements in sequence .
Returns largest possible sum of a Zizag sequence starting from top and ending at bottom .
Consider all cells of top row as starting point
Driver code
Returns count of subsequences of the form a ^ i b ^ j c ^ k
Initialize counts of different subsequences caused by different combination of 'a
Initialize counts of different subsequences caused by different combination of ' a ' and different combination of 'b
Initialize counts of different subsequences caused by different combination of ' a ' , ' b ' and ' c ' .
Traverse all characters of given string
If current character is ' a ' , then there are following possibilities : a ) Current character begins a new subsequence . b ) Current character is part of aCount subsequences . c ) Current character is not part of aCount subsequences .
If current character is ' b ' , then there are following possibilities : a ) Current character begins a new subsequence of b 's with aCount subsequences. b) Current character is part of bCount subsequences. c) Current character is not  part of bCount subsequences.
If current character is ' c ' , then there are following possibilities : a ) Current character begins a new subsequence of c 's with bCount subsequences. b) Current character is part of cCount subsequences. c) Current character is not  part of cCount subsequences.
Driver code
Python3 program to find maximum revenue by placing billboard on the highway with given constraints .
Array to store maximum revenue at each miles .
actual minimum distance between 2 billboards .
check if all billboards are already placed .
check if we have billboard for that particular mile . If not , copy the previous maximum revenue .
we do have billboard for this mile .
If current position is less than or equal to t , then we can have only one billboard .
Else we may have to remove previously placed billboard
Driver Code
Python 3 program to find maximum K such that K x K is a submatrix with equal elements .
Returns size of the largest square sub - matrix with all same elements .
If elements is at top row or first column , it wont form a square matrix 's bottom-right
Check if adjacent elements are equal
If not equal , then it will form a 1 x1 submatrix
Update result at each ( i , j )
Driver Code
Returns count of subsequences of str divisible by n .
division by n can leave only n remainder [ 0. . n - 1 ] . dp [ i ] [ j ] indicates number of subsequences in string [ 0. . i ] which leaves remainder j after division by n .
Filling value for first digit in str
start a new subsequence with index i
exclude i 'th character from all the  current subsequences of string [0...i-1]
include i 'th character in all the current  subsequences of string [0...i-1]
Driver code
Function to construct Maximum Sum LIS
L [ i ] - The Maximum Sum Increasing Subsequence that ends with arr [ i ]
L [ 0 ] is equal to arr [ 0 ]
start from index 1
for every j less than i
L [ i ] = MaxSum ( L [ j ] ) + arr [ i ] where j < i and arr [ j ] < arr [ i ]
L [ i ] ends with arr [ i ]
set lis = LIS whose size is max among all
The > sign makes sure that the LIS ending first is chose .
Function to minimize array
Find LIS of current array
If all elements are in decreasing order
Remove lis elements from current array . Note that both lis [ ] and arr [ ] are sorted in increasing order .
If first element of lis [ ] is found
Remove lis element from arr [ ]
Erase first element of lis [ ]
print remaining element of array
print - 1 for empty array
Driver function
minimize array after deleting LIS
Naive approach in Python3 to find probability of at least k heads
Returns probability of getting at least k heads in n tosses .
Probability of getting exactly i heads out of n heads
Note : 1 << n = pow ( 2 , n )
Preprocess all factorial only upto 19 , as after that it will overflow
Driver code
Probability of getting 2 head out of 3 coins
Probability of getting 3 head out of 6 coins
Probability of getting 12 head out of 18 coins
Python3 program to count number of binary strings with k times appearing consecutive 1 's.
dp [ i ] [ j ] [ 0 ] stores count of binary strings of length i with j consecutive 1 ' s ▁ and ▁ ending ▁ at ▁ 0 . ▁ ▁ dp [ i ] [ j ] [1 ] ▁ stores ▁ count ▁ of ▁ binary ▁ ▁ strings ▁ of ▁ length ▁ i ▁ with ▁ j ▁ consecutive ▁ ▁ 1' s and ending at 1.
If n = 1 and k = 0.
number of adjacent 1 's can not exceed i-1
Driver Code
Returns true if n people can vote using two machines in x time .
calculate total sum i . e total time taken by all people
if total time is less than x then all people can definitely vote hence return true
sort the list
declare a list presum of same size as that of a and initialize it with 0
prefixsum for first element will be element itself
fill the array
Set i and j and check if array from i to j - 1 gives sum <= x
Driver code
Python3 program for solution of friends pairing problem Using Recursion
Returns count of ways n people can remain single or paired up .
Driver Code
Python3 soln using mathematical approach factorial array is stored dynamically
Returns count of ways n people can remain single or paired up .
pow of 1 will always be one
Driver Code pre - compute factorial
Python program for Dynamic Programming implementation of Max sum problem in a triangle
Function for finding maximum sum
loop for bottom - up calculation
for each element , check both elements just below the number and below right to the number add the maximum of them to it
return the top element which stores the maximum sum
Driver program to test above function
Function compute Maximum Dot Product and return it
Create 2D Matrix that stores dot product dp [ i + 1 ] [ j + 1 ] stores product considering B [ 0. . i ] and A [ 0. . . j ] . Note that since all m > n , we fill values in upper diagonal of dp [ ] [ ]
Traverse through all elements of B [ ]
Consider all values of A [ ] with indexes greater than or equal to i and compute dp [ i ] [ j ]
Two cases arise 1 ) Include A [ j ] 2 ) Exclude A [ j ] ( insert 0 in B [ ] )
return Maximum Dot Product
Driver Code
Python3 program to find LCS of three strings
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ] and Z [ 0. . o - 1 ]
Driver code
Python3 program to return minimum number of elements which are not part of increasing or decreasing subsequences .
Return minimum number of elements which is not part of any of the sequence .
If already calculated , return value .
If whole array is traversed .
calculating by considering element as part of decreasing sequence .
calculating by considering element as part of increasing sequence .
If cannot be calculated for decreasing sequence .
After considering once by decreasing sequence , now try for increasing sequence .
If element cannot be part of any of the sequence .
After considering element as part of increasing and decreasing sequence trying as not part of any of the sequence .
Wrapper Function
Adding two number at the end of array , so that increasing and decreasing sequence can be made . MAX - 2 index is assigned INT_MAX for decreasing sequence because / next number of sequence must be less than it . Similarly , for Increasing sequence INT_MIN is assigned to MAX - 1 index .
Driver code
sum denotes the current sum of the subset currindex denotes the index we have reached in the given array
This function mainly calls recursive function distSumRec ( ) to generate distinct sum subsets . And finally prints the generated subsets .
Print the result
Driver code
Uses Dynamic Programming to find distinct subset Sums
dp [ i ] [ j ] would be true if arr [ 0. . i - 1 ] has a subset with Sum equal to j .
There is always a subset with 0 Sum
Fill dp [ ] [ ] in bottom up manner
Sums that were achievable without current array element
Print last row elements
Driver code
function will return the nth super ugly number
n cannot be negative hence return - 1 if n is 0 or - ve
Declare a min heap priority queue
Push all the array elements to priority queue
once count = n we return no
sorted ( pq ) Get the minimum value from priority_queue
If top of pq is no then don 't increment count.  This to avoid duplicate counting of same no.
Push all the multiples of no . to priority_queue
cnt += 1
Return nth super ugly number
Driver program to test above functions
Python 3 program to count number of paths in a maze with obstacles .
Returns count of possible paths in a maze [ R ] [ C ] from ( 0 , 0 ) to ( R - 1 , C - 1 )
If the initial cell is blocked , there is no way of moving anywhere
Initializing the leftmost column
If we encounter a blocked cell in leftmost row , there is no way of visiting any cell directly below it .
Similarly initialize the topmost row
If we encounter a blocked cell in bottommost row , there is no way of visiting any cell directly below it .
The only difference is that if a cell is - 1 , simply ignore it else recursively compute count value maze [ i ] [ j ]
If blockage is found , ignore this cell
If we can reach maze [ i ] [ j ] from maze [ i - 1 ] [ j ] then increment count .
If we can reach maze [ i ] [ j ] from maze [ i ] [ j - 1 ] then increment count .
If the final cell is blocked , output 0 , otherwise the answer
Driver code
Returns sum of minimum sum subsequence such that one of every four consecutive elements is picked from arr [ ] .
dp [ i ] is going to store minimum sum subsequence of arr [ 0. . i ] such that arr [ i ] is part of the solution . Note that this may not be the best solution for subarray arr [ 0. . i ]
If there is single value , we get the minimum sum equal to arr [ 0 ]
If there are two values , we get the minimum sum equal to the minimum of two values
If there are three values , return minimum of the three elements of array
If there are four values , return minimum of the four elements of array
Return the minimum of last 4 index
Driver code
Python3 program to find maximum decimal value path in binary matrix
Returns maximum decimal value in binary matrix . Here p indicate power of 2
Out of matrix boundary
If current matrix value is 1 then return result + power ( 2 , p ) else result
Driver Program
Python3 program to find Maximum decimal value Path in Binary matrix
Returns maximum decimal value in binary matrix . Here p indicate power of 2
Compute binary stream of first row of matrix and store result in dp [ 0 ] [ i ]
indicate 1 * ( 2 ^ i ) + result of previous
indicate 0 * ( 2 ^ i ) + result of previous
Compute binary stream of first column of matrix and store result in dp [ i ] [ 0 ]
indicate 1 * ( 2 ^ i ) + result of previous
indicate 0 * ( 2 ^ i ) + result of previous
Traversal rest Binary matrix and Compute maximum decimal value
Here ( i + j ) indicate the current power of 2 in path that is 2 ^ ( i + j )
Return maximum decimal value in binary matrix
Driver program
Returns total number of palindrome substring of length greater then equal to 2
creat empty 2 - D matrix that counts all palindrome substring . dp [ i ] [ j ] stores counts of palindromic substrings in st [ i . . j ]
P [ i ] [ j ] = true if substring str [ i . . j ] is palindrome , else false
palindrome of single length
palindrome of length 2
Palindromes of length more than 2. This loop is similar to Matrix Chain Multiplication . We start with a gap of length 2 and fill DP table in a way that the gap between starting and ending indexes increase one by one by outer loop .
Pick a starting point for the current gap
Set ending point
If current string is palindrome
Add current palindrome substring ( + 1 ) and rest palindrome substring ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] ) remove common palindrome substrings ( - dp [ i + 1 ] [ j - 1 ] )
return total palindromic substrings
Driver Code
Returns maximum subsequence sum such that no three elements are consecutive
Stores result for subarray arr [ 0. . i ] , i . e . , maximum possible sum in subarray arr [ 0. . i ] such that no three elements are consecutive .
Base cases ( process first three elements )
Process rest of the elements We have three cases 1 ) Exclude arr [ i ] , i . e . , sum [ i ] = sum [ i - 1 ] 2 ) Exclude arr [ i - 1 ] , i . e . , sum [ i ] = sum [ i - 2 ] + arr [ i ] 3 ) Exclude arr [ i - 2 ] , i . e . , sum [ i - 3 ] + arr [ i ] + arr [ i - 1 ]
Driver code
method to return maximum sum we can get by get by finding less than K difference pair
Sort input array in ascending order .
dp [ i ] denotes the maximum disjoint pair sum we can achieve using first i elements
if no element then dp value will be 0
first give previous value to dp [ i ] i . e . no pairing with ( i - 1 ) th element
if current and previous element can form a pair
update dp [ i ] by choosing maximum between pairing and not pairing
last index will have the result
Driver code to test above methods
Function to find the maximum sum
base conditions
recursively break the number and return what maximum you can get
Driver Code
Function return the total palindromic subsequence
Create a 2D array to store the count of palindromic subsequence
palindromic subsequence of length 1
check subsequence of length L is palindrome or not
return total palindromic subsequence
Driver program
Python 3 program to counts Palindromic Subsequence in a given String using recursion
Function return the total palindromic subsequence
Driver code
Function To Count all the sub - sequences possible in which digit is greater than all previous digits arr [ ] is array of n digits
count [ ] array is used to store all sub - sequences possible using that digit count [ ] array covers all the digit from 0 to 9
scan each digit in arr [ ]
count all possible sub - sequences by the digits less than arr [ i ] digit
store sum of all sub - sequences plus 1 in count [ ] array
Now sum up the all sequences possible in count [ ] array
Driver Code
A utility function to find minimum of 3 elements
Returns minimum possible sum of elements such that an element out of every three consecutive elements is picked .
Create a DP table to store results of subproblems . sum [ i ] is going to store minimum possible sum when arr [ i ] is part of the solution .
When there are less than or equal to 3 elements
Iterate through all other elements
Driver code
Python3 program to print distinct subsequences of a given string
Create an empty set to store the subsequences
Function for generating the subsequences
Base Case
Insert each generated subsequence into the set
Recursive Case
When a particular character is taken
When a particular character isn 't taken
Driver Code
Output array for storing the generating subsequences in each call
Function Call
Output will be the number of elements in the set
Returns count of distinct subsequences of str .
Iterate from 0 to length of s
Iterate from 0 to length of s
Check if i equal to 0
Replace levelCount withe allCount + 1
If map is less than 0
Return answer
Driver Code
Python program to find minimum cost to get exactly W Kg with given packets
cost [ ] initial cost array including unavailable packet W capacity of bag
val [ ] and wt [ ] arrays val [ ] array to store cost of ' i ' kg packet of orange wt [ ] array weight of packet of orange
traverse the original cost [ ] array and skip unavailable packets and make val [ ] and wt [ ] array . size variable tells the available number of distinct weighted packets .
fill 0 th row with infinity
fill 0 th column with 0
now check for each weight one by one and fill the matrix according to the condition
wt [ i - 1 ] > j means capacity of bag is less than weight of item
here we check we get minimum cost either by including it or excluding it
exactly weight W can not be made by given weights
Driver program to run the test case
Recursive function to find the number of times the second string occurs in the first string , whether continuous or discontinuous
If both first and second string is empty , or if second string is empty , return 1
If only first string is empty and second string is not empty , return 0
If last characters are same Recur for remaining strings by 1. considering last characters of both strings 2. ignoring last character of first string
If last characters are different , ignore last char of first string and recur for remaining string
Driver code
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]
Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note that L [ i ] [ j ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]
L [ m ] [ n ] contains length of LCS for X [ 0. . n - 1 ] and Y [ 0. . m - 1 ]
Returns cost of making X [ ] and Y [ ] identical . costX is cost of removing a character from X [ ] and costY is cost of removing a character from Y [ ]
Find LCS of X [ ] and Y [ ]
Cost of making two strings identical is SUM of following two 1 ) Cost of removing extra characters from first string 2 ) Cost of removing extra characters from second string
Driver Code
Maximum string length
Returns set containing all LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]
construct a set to store possible LCS
If we reaches end of either string , return a empty set
If the last characters of X and Y are same
recurse for X [ 0. . m - 2 ] and Y [ 0. . n - 2 ] in the matrix
append current character to all possible LCS of substring X [ 0. . m - 2 ] and Y [ 0. . n - 2 ] .
If the last characters of X and Y are not same
If LCS can be constructed from top side of the matrix , recurse for X [ 0. . m - 2 ] and Y [ 0. . n - 1 ]
If LCS can be constructed from left side of the matrix , recurse for X [ 0. . m - 1 ] and Y [ 0. . n - 2 ]
merge two sets if L [ m - 1 ] [ n ] == L [ m ] [ n - 1 ] Note s will be empty if L [ m - 1 ] [ n ] != L [ m ] [ n - 1 ]
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]
Build L [ m + 1 ] [ n + 1 ] in bottom up fashion
Driver Code
Returns count of solutions of a + b + c = n
Initialize result
Consider all triplets and increment result whenever sum of a triplet is n .
Driver code
Returns count of solutions of a + b + c = n
Driver code
Find maximum subarray sum for subarray [ 0. . i ] using standard Kadane ' s ▁ algorithm . ▁ This ▁ version ▁ ▁ of ▁ Kadane ' s Algorithm will work if all numbers are negative .
Find maximum subarray sum for subarray [ i . . n ] using Kadane ' s ▁ algorithm . ▁ This ▁ version ▁ of ▁ Kadane ' s Algorithm will work if all numbers are negative
The function finds two non - overlapping contiguous sub - arrays such that the absolute difference between the sum of two sub - array is maximum .
create and build an array that stores maximum sums of subarrays that lie in arr [ 0. . . i ]
create and build an array that stores maximum sums of subarrays that lie in arr [ i + 1. . . n - 1 ]
Invert array ( change sign ) to find minumum sum subarrays .
create and build an array that stores minimum sums of subarrays that lie in arr [ 0. . . i ]
create and build an array that stores minimum sums of subarrays that lie in arr [ i + 1. . . n - 1 ]
For each index i , take maximum of 1. abs ( max sum subarray that lies in arr [ 0. . . i ] - min sum subarray that lies in arr [ i + 1. . . n - 1 ] ) 2. abs ( min sum subarray that lies in arr [ 0. . . i ] - max sum subarray that lies in arr [ i + 1. . . n - 1 ] )
Driver Code
Returns count of arrangements where last placed ball is ' last ' . ' last ' is 0 for ' p ' , 1 for ' q ' and 2 for 'r
if number of balls of any color becomes less than 0 the number of ways arrangements is 0.
If last ball required is of type P and the number of balls of P type is 1 while number of balls of other color is 0 the number of ways is 1.
Same case as above for ' q ' and 'r
if last ball required is P and the number of ways is the sum of number of ways to form sequence with ' p - 1' P balls , q Q Balls and r R balls ending with Q and R .
Same as above case for ' q ' and 'r
Returns count of required arrangements
Three cases arise : Last required balls is type P Last required balls is type Q Last required balls is type R
Driver Code
Function to find the minimum sum
If we have reached last element . Sum of one subset is sumCalculated , sum of other subset is sumTotal - sumCalculated . Return absolute difference of two sums .
For every item arr [ i ] , we have two choices ( 1 ) We do not include it first set ( 2 ) We include it in first set We return minimum of two choices
Returns minimum possible difference between sums of two subsets
Compute total sum of elements
Compute result using recursive function
Driver code
Returns count of different partitions of n elements in k subsets
Base cases
S ( n + 1 , k ) = k * S ( n , k ) + S ( n , k - 1 )
Driver Code
Returns count of different partitions of n elements in k subsets
Table to store results of subproblems
Base cases
Fill rest of the entries in dp [ ] [ ] in bottom up manner
Driver Code
Returns count of ways to cover 'dist
Base cases
Recur for all previous 3 and add the results
Driver code
A Dynamic Programming based C ++ program to count number of ways
Create the array of size 3.
Initialize the bases cases
Run a loop from 3 to n Bottom up approach to fill the array
driver program
Returns sum of all digits in numbers from 1 to n
One by one compute sum of digits in every number from 1 to n
A utility function to compute sum of digits in a given number x
Driver Program
Python3 program to count numbers having 4 as a digit
Function to count numbers from 1 to n that have 4 as a digit
Base case
d = number of digits minus one in n . For 328 , d is 2
computing count of numbers from 1 to 10 ^ d - 1 , d = 0 a [ 0 ] = 0 d = 1 a [ 1 ] = count of numbers from 0 to 9 = 1 d = 2 a [ 2 ] = count of numbers from 0 to 99 = a [ 1 ] * 9 + 10 = 19 d = 3 a [ 3 ] = count of numbers from 0 to 999 = a [ 2 ] * 19 + 100 = 171
Computing 10 ^ d
Most significant digit ( msd ) of n , For 328 , msd is 3 which can be obtained using 328 / 100
If MSD is 4. For example if n = 428 , then count of numbers is sum of following . 1 ) Count of numbers from 1 to 399 2 ) Count of numbers from 400 to 428 which is 29.
IF MSD > 4. For example if n is 728 , then count of numbers is sum of following . 1 ) Count of numbers from 1 to 399 and count of numbers from 500 to 699 , i . e . , " a [ 2 ] ▁ * ▁ 6" 2 ) Count of numbers from 400 to 499 , i . e . 100 3 ) Count of numbers from 700 to 728 , recur for 28
IF MSD < 4. For example if n is 328 , then count of numbers is sum of following . 1 ) Count of numbers from 1 to 299 a 2 ) Count of numbers from 300 to 328 , recur for 28
Driver Code
A O ( n * n ) solution to find the minimum of elements to be removed
Returns the minimum number of removals from either end in arr [ l . . h ] so that 2 * min becomes greater than max .
Initialize starting and ending indexes of the maximum sized subarray with property 2 * min > max
Choose different elements as starting point
Initialize min and max for the current start
Choose different ending points for current start
Update min and max if necessary
If the property is violated , then no point to continue for a bigger array
Update longest_start and longest_end if needed
If not even a single element follow the property , then return n
Return the number of elements to be removed
Driver Code
The function returns true if there exist three elements in AP Assumption : set [ 0. . n - 1 ] is sorted . The code strictly implements the algorithm provided in the reference .
One by fix every element as middle element
Initialize i and k for the current j
Find if there exist i and k that form AP with j as middle element
Returns optimal value possible that a player can collect from an array of coins of size n . Note than n must be even
Create a table to store solutions of subproblems
Fill table using above recursive formula . Note that the table is filled in diagonal fashion ( similar to http : goo . gl / PQqoS ) , from diagonal elements to table [ 0 ] [ n - 1 ] which is the result .
Here x is value of F ( i + 2 , j ) , y is F ( i + 1 , j - 1 ) and z is F ( i , j - 2 ) in above recursive formula
Driver Code
maxSumIS ( ) returns the maximum sum of increasing subsequence in arr [ ] of size n
Initialize msis values for all indexes
Compute maximum sum values in bottom up manner
Pick maximum of all msis values
Driver Code
a simple recursive program for Fibonacci numbers
Function to print the left path
j -> i -> j -> i -> j -> k -> j -> k -> j
i -> j -> i -> j -> k -> j -> k
Function to print the right path
j -> i -> j -> i -> j -> k -> j -> k -> j
i -> j -> i -> j -> k -> j -> k
Function to check that if there exists a palindromic path in a binary graoh
Create adjacency matrix
If K is odd then print the path directly by choosing node 1 and 2 repeatedly
If K is even Try to find an edge such that weight of edge i -> j and j -> i is equal
Same weight edges are found
Store their indexes
Print the path
If nodes i , j having equal weight on edges i -> j and j -> i can not be found then try to find three nodes i , j , k such that weights of edges i -> j and j -> k are equal
To store edges with weight '0
To store edges with weight '1
Try to find edges i -> j and j -> k having weight 0
Print left Path
Print centre
Print right path
Try to find edges i -> j and j -> k which having weight 1
cout << k ;
Driver Code
Function to check if there is an element forming G . P . series having common ratio k
If size of array is less than three then return - 1
Initialize the variables
Calculate total sum of array
Calculate Middle element of G . P . series
Iterate over the range
Store the first element of G . P . series in the variable temp
Return position of middle element of the G . P . series if the first element is in G . P . of common ratio k
Else return 0
if middle element is not found in arr [ ]
Driver Code
Given array
Function to encode the given string
Variable string to store the result
Arrays to store the last occuring index of every character in the string
Length of the string
Iterate over the range
If str [ i ] is between 0 and 9
If str [ i ] is between a and z
If str [ i ] is between A and Z
Iterate over the range
If str [ i ] is between a and z and i is the last occurence in str
If str [ i ] is between A and Z and i is the last occurence in str
If str [ i ] is between 0 and 9 and i is the last occurence in str
Print the result
Driver Code
Function to check if it is possible to make all the array elements equal using the given operation
Stores the prefix XOR array
Calculate prefix [ i ]
Case 1 , check if the XOR of the input array is 0
Case 2 Iterate over all the ways to divide the array into three non empty subarrays
XOR of Middle Block
XOR of Left Block
XOR of Right Block
Not Possible
Driver Code
Function Call
Function to print the required array
Iteratie from 1 to N
Print the i - th element
Update prev_xor to i
Driver Code
Given Input
Function Call
Function to create the possible grids
Function to test if any one of them matches with the given 2 - D array
Function to print the grid , if possible
Function to check if the grid can be made alternating or not
Grids to store the possible grids
Driver Code
Python 3 program for the above approach .
Function to find the possible output array
Base case for the recursion
If ind becomes half of the size then print the array .
Exit the function .
Iterate in the range .
Put the values in the respective indices .
Call the function to find values for other indices .
Driver Code
Python3 program for the above approach
Stores the smallest number that ends with digit i ( 0 , 9 )
Stores the minimum number of steps to create a number ending with digit i
Initialize elements as infinity
Minimum number ending with digit i
Minimum steps to create a number ending with digit i
If N < SmallestNumber then , return - 1
Otherwise , return answer
Driver Code
Function to count the minimum number of steps required to make arr non - decreasing
Stores differences
Stores the max number
Traverse the array arr [ ]
Update mx
Update val
Stores the result
Iterate until 2 ^ res - 1 is less than val
Return the answer
Driver Code
Given input
Function call
Function for K = 2
Function for K = 2
Function for K = 2
Function to calculate the minimum XOR of at most K elements in [ L , R ]
Driver code
Input
Function call
Function to count the number of set bits in the number N
Store the number of setbits
Update the value of n
Update the count
Return the total count
Function to find the Nth term of the Ruler Function Series
Store the result
Print the result
Driver Code
Function to find the quadratic equation having reciprocal roots
Print quadratic equation
Driver Code
Given coefficients
Function call to find the quadratic equation having reciprocal roots
Function to find the minimum number of moves required to make all array elements equal
Store the total sum of the array
Calculate total sum of the array
If the sum is not divisible by N , then print " - 1"
Stores the average
Stores the count of operations
Traverse the array arr [ ]
Update number of moves required to make current element equal to avg
Update the overall count
Return the minimum operations required
Driver Code
Function to calculate the maximum amount collected by A
Stores the money obtained by A
Stores mid elements of odd sized rows
Size of current row
Increase money collected by A
Add coins at even indices to the amount collected by A
Print the amount
Driver Code
Function call to calculate the amount of coins collected by A
Function to check if array can be split into K consecutive and non - overlapping subarrays of length M consisting of a single distinct element
Traverse over the range [ 0 , N - M - 1 ]
Check if arr [ i ] is the same as arr [ i + m ]
Increment current length t of pattern matched by 1
Check if t is equal to m , increment count of total repeated pattern
Return true if length of total repeated pattern is k
Update length of the current pattern
Update count to 1
Finally return false if no pattern found
Driver Code
Function to fill the Z - array for str
L Stores start index of window which matches with prefix of str
R Stores end index of window which matches with prefix of str
Iterate over the characters of str
If i is greater thn R
Update L and R
If substring match with prefix
Update R
Update Z [ i ]
Update R
Update k
if Z [ k ] is less than remaining interval
Update Z [ i ]
Start from R and check manually
Update R
Update Z [ i ]
Update R
Function to remove all the occurrences of word from str
Create concatenated string " P $ T "
Store Z array of concat
Stores string , str by removing all the occurrences of word from str
Stores length of word
Traverse the array , Z [ ]
if Z [ i + pSize + 1 ] equal to length of word
Update i
Driver Code
Function to count the substrings of containing another given as a sub
Store length of S
Store length of T
Store the required count of substrings
Store the starting index of last occurence of T in S
Iterate in range [ 0 , n1 - n2 ]
Check if subfrom i to i + n2 is equal to T
Check if subfrom i to i + n2 is equal to T
Mark chk as false and break the loop
If chk is true
Add ( i + 1 - last ) * ( n1 - ( i + n2 - 1 ) ) to answer
Update the last to i + 1
Prthe answer
Driver code
Function Call
Function to find the lexicographically largest bitonic sequence of size N elements lies in the range [ low , high ]
Store index of highest element
If high_index > ( N - 1 ) / 2 , then remaining N / 2 elements cannot be placed in bitonic order
If high_index <= 0 , then set high_index as 1
Stores the resultant sequence
Store the high value
Maintain strictly decreasing sequence from index high_index to 0 starting with temp
Store the value and decrement the temp variable by 1
Maintain the strictly decreasing sequence from index high_index + 1 to N - 1 starting with high - 1
Store the value and decrement high by 1
Print the resultant sequence
Driver Code
Function Call
Function to traverse the matrix diagonally upwards
Stores the maximum size of vector from all row of matrix nums [ ] [ ]
Store elements in desired order
Store every element on the basis of sum of index ( i + j )
Print the stored result
Reverse all sublist
Driver code
Given vector of vectors arr
Function Call
Python3 program for the above approach
Function to check if given string satisfies the given conditions
Dimensions
Left diagonal
Right diagonal
Conditions not satisfied
Print Yes
Given String
Function call
Python 3 program for the above approach
Function to convert a character to its equivalent digit
Function to precompute powers of 10
Function to precompute prefix sum of numerical strings
Function to return the i - th term of Triangular Number
Function to return the sum of all resulting strings
Precompute powers of 10
Precompute prefix sum
Initialize result
Apply the above general formula for every i
Return the answer
Driver Code
Function Call
Function that finds the sum of products of all subarray of arr [ ]
Stores sum of all subarrays
Iterate array from behind
Update the ans
Update the res
Print the final sum
Driver Code
Given array arr [ ]
Size of array
Function call
Function to calculate the sum of all odd length subarrays
Stores the sum
Size of array
Traverse the array
Generate all subarray of odd length
Add the element to sum
Return the final sum
Given array arr [ ]
Function call
Function that finds the sum of all the element of subarrays of odd length
Stores the sum
Size of array
Traverse the given array arr [ ]
Add to the sum for each contribution of the arr [ i ]
Return the final sum
Given array arr [ ]
Function call
Function to find the Euler 's Totient Function
Initialize result as N
Consider all prime factors of n and subtract their multiples from result
Return the count
Function to check if phi ( n ) is equals phi ( 2 * n )
Driver Code
Function to check if phi ( n ) is equals phi ( 2 * n )
Return if N is odd
Driver code
Function call
Function that count the subsequence such that each element as the minimum element in the subsequence
Store index in a map
Sort the array
To store count of subsequence
Traverse the array
Store count of subsequence
Print the count of subsequence
Driver code
Function call
Function to check if char ch is odd or not
Function to insert dash - between any 2 consecutive digit in string str
Traverse the string character by character
Compare every consecutive character with the odd value
Print the resultant string
Given number in form of string
Function call
Python3 program to check if a matrix is Reverse Bitonic or not
Function to check if an array is Reverse Bitonic or not
Check for decreasing sequence
Check for increasing sequence
Function to check whether given matrix is bitonic or not
Check row - wise
Check column wise
Generate an array consisting of elements of the current column
Driver Code
Function to return the element at ( x , y )
If y is greater
If y is odd
If y is even
If x is even
If x is odd
Driver code
Function to modify the given string and find the index where modification is needed
Array to store the ASCII values of alphabets
Loop to compute the ASCII values of characters a - z
Set to store all the possible differences between consecutive elements
Loop to find out the differences between consecutive elements and storing them in the set
Checks if any character of the string disobeys the pattern
Constructing the strings with all possible values of consecutive difference and comparing them with staring string S .
Driver code
Function to prN * N order matrix with all sub - matrix of even order is sum of its diagonal also even
Even index
Odd index
Iterate two nested loop
For even index the element should be consecutive odd
For odd index the element should be consecutive even
Given order of matrix
Function call
Python3 Program to implement the above approach
Function to remove all leading zeros from a a given string
Regex to remove leading zeros from a string
Replaces the matched value with given string
Driver Code
Function which computes the maximum number of inversions
' answer ' will store the required number of inversions
We do this because we will never require more than floor ( n / 2 ) operations
left pointer in the array
right pointer in the array
Doing k operations
Incrementing ans by number of inversions increase due to this swapping
Driver Code
Input 1
Input 2
Python3 program to implement the above approach
Function to return the position least significant set bit
Function return the first number to be converted to an odd integer
Stores the positions of the first set bit
If both are same
If A has the least significant set bit
Otherwise
Driver code
Function to check if the given can be split into desired substrings
Length of the string
Traverse the string
Extract the digit
Check if the extracted number does not exceed the remaining length
Check for the remaining string
If generating desired substrings is not possible
Driver Code
Array to store the N - Bonacci series
Function to express K as sum of several N_bonacci numbers
Driver code
Function to find the division
Calculating value of x1
Print - 1 if division is not possible
Get the first number ie x1 then successively multiply it by x1 k times by index number to get the required answer
Given N and K
Function Call
Function to check if the given string is bitonic
Check for increasing sequence
If end of string has been reached
Check for decreasing sequence
If the end of string hasn 't  been reached
Return true if bitonic
Given string
Function Call
Function to find the required pair whose GCD is maximum
If N is even
If N is odd
Driver Code
Function to generate and return the required initial arrangement
Store the minimum element in the array
Store the number of increments
Subtract mi - 1 from every index
Start from the last index which had been incremented
Stores the index chosen to distribute its element
Traverse the array cyclically and find the index whose element was distributed
If any index has its value reduced to 0
Index whose element was distributed
Store the number of increments at the starting index
Print the original array
Driver Code
Function to print the required array
Print Array
Driver code
Function to prints all numbers with at least one odd divisor
Check if the number is not a power of two
Driver Code
Function to print the series
Initialise the value of k with 2
Iterate from 1 to n
Print each number
Increment the value of K by 2 for next number
Given number
Function Call
Function to find a common string which matches all the pattern
For storing prefix till first most * without conflicts
For storing suffix till last most * without conflicts
For storing all middle characters between first and last *
Loop to iterate over every pattern of the array
Index of the first " * "
Index of Last " * "
Iterate over the first " * "
Prefix till first most * without conflicts
Iterate till last most * from last
Make suffix till last most * without conflicts
Take all middle characters in between first and last most *
Driver Code
Take all the strings
Method for finding common string
Python3 program for the above approach
Function to print pattern recursively
Base Case
Condition to check row limit
Condition for assigning gaps
Conditions to print *
Else print ' 
Recursive call for columns
Recursive call for rows
Given Number N
Function Call
Function for transition state A
State transition to B if the character is 0
State transition to D if the character is 1
Function for transition state B
Check if the string has ended
State transition to C if the character is 1
State transition to D if the character is 0
Function for transition state C
Function for transition state D
State transition to D if the character is 1
State transition to E if the character is 0
Function for transition state E
State transition to E if the character is 0
State transition to F if the character is 1
Function for transition state F
State transition to D if the character is 1
State transition to E if the character is 0
Driver code
Function returns N - th Hogben Number
Driver code
Function to check string exist or not as per above approach
Check if any character at position i and i + 2 are not equal , then string doesnot exist
Driver Code
Function to get product of digits
Function to find the product of digits of all natural numbers in range L to R
Iterate between L to R
Driver Code
Function to find the row of the character in the qwerty keypad
Sets to include the characters from the same row of the qwerty keypad
Condition to check the row of the current character of the string
Function to check the characters are from the same row of the qwerty keypad
Driver Code
Calculate the sum of the first N Fibonacci numbers using Pisano period
The first two Fibonacci numbers
Base case
Pisano Period for % 10 is 60
Checking the remainder
The loop will range from 2 to two terms after the remainder
Driver code
Python3 program for the above approach
Function to print all such Xi s . t . all Xi and sin ( Xi ) are strictly increasing
Till N becomes zero
Find the value of sin ( ) using inbuilt function
increment by 710
Driver Code
Function Call
Function to find the sum between two zeros in the given array arr [ ]
To store the sum of the element between two zeros
To store the sum
Find first index of 0
Traverse the given array arr [ ]
If 0 occurs then add it to A [ ]
Else add element to the sum
Print all the sum stored in A
If there is no such element print - 1
Driver Code
Function call
Recursive function to find Nth term
Base Case
Recursive Call according to Nth term of the series
Driver Code
Input Nth term
Function call
Function to find the maximum length of subsequences with given property
To store the frequency
Traverse the array to store the frequency
M . size ( ) given count of distinct element in arr [ ]
Traverse map to find max frequency
Find the maximum length on the basis of two cases in the approach
Driver Code
Function call
Function to count the total length
Unordered_map for keeping frequency of characters
Calculate the frequency
Iterate in the N strings
Iterates in the string
Checks if given character of string string appears in it or not
Adds the length of string if all characters are present
Return the final result
Driver code
Function to construct the required array
To construct first half , distinct even numbers
To construct second half , distinct odd numbers
Calculate the last number of second half so as to make both the halves equal
Function to construct the required array
check if size is multiple of 4 then array exist
function call to construct array
Driver code
Function to count all substrings
Hashmap to store substrings
iterate over all substrings
variable to maintain sum of all characters encountered
variable to maintain substring till current position
get position of character in string W
add weight to current sum
add current character to substring
check if sum of characters is <= K insert in Hashmap
Driver code
initialise string
initialise weight
Python3 program to find minimum number of characters required to be added to make a password strong
Function to count minimum number of characters
Create the patterns to search digit , upper case alphabet , lower case alphabet and special character
If no digits are present
If no upper case alphabet is present
If no lower case alphabet is present
If no special character is is present
Check if the string length after adding the required characters is less than 8
Add the number of characters to be added
Driver code
Function to find the count of all the substrings with weight of characters atmost K
Hashmap to store all substrings
Iterate over all substrings
Maintain the sum of all characters encountered so far
Maintain the substring till the current position
Get the position of the character in string Q
Add weight to current sum
Add current character to substring
If sum of characters is <= K then insert in into the set
Finding the size of the set
Driver code
Function to print the pattern
Loop for rows
Loop for column
For printing equal sides of outer triangle
For printing equal sides of inner triangle
For printing base of both triangle
For spacing between the triangle
Driver Code
Function to check if a string is made up of k alternating characters
Check if all the characters at indices 0 to K - 1 are different
If that bit is already set in checker , return false
Otherwise update and continue by setting that bit in the checker
Driver code
Python 3 program to find the factors of large perfect square number in O ( sqrt ( sqrt ( N ) ) ) time
Function that find all the prime factors of N
Store the sqrt ( N ) in temp
Initialise factor array with 1 as a factor in it
Check divisibility by 2
Store the factors twice
Check for other prime factors other than 2
If j is a prime factor
Store the prime factor twice
If j is prime number left other than 2
Store j twice
Initialise Matrix M to to store all the factors
tpc for rows tpr for column
Initialise M [ 0 ] [ 0 ] = 1 as it also factor of N
Traversing factor array
If current and previous factors are not same then move to next row and insert the current factor
If current and previous factors are same then , Insert the factor with previous factor inserted in matrix M
The arr1 [ ] and arr2 [ ] used to store all the factors of N
Initialise arrays as 1
Traversing the matrix M print ( " tpr ▁ " , tpr )
Traversing till column element doesn 't become 0
Store the product of every element of current row with every element in arr1 [ ]
Copying every element of arr2 [ ] in arr1 [ ]
length of arr2 [ ] and arr1 [ ] are equal after copying
Print all the factors
Drivers Code
Python3 implementation of the above approach
Function to find the square matrix
For Matrix of order 1 , it will contain only 1
For Matrix of odd order , it is not possible
For Matrix of even order
All diagonal elements of the matrix can be N itself .
Assign values at desired place in the matrix
Loop to add N in the lower half of the matrix such that it contains elements from 1 to 2 * N - 1
Loop to print the matrix
Driver Code
Function to find the count of substrings with equal no . of consecutive 0 ' s ▁ and ▁ 1' s
To store the total count of substrings
Traversing the string
Count of consecutive 0 ' s ▁ & ▁ 1' s
Counting subarrays of type "01"
Count the consecutive 0 's
If consecutive 0 ' s ▁ ▁ ends ▁ then ▁ check ▁ for ▁ ▁ consecutive ▁ 1' s
Counting consecutive 1 's
Counting subarrays of type "10"
Count consecutive 1 's
If consecutive 1 ' s ▁ ▁ ends ▁ then ▁ check ▁ for ▁ ▁ consecutive ▁ 0' s
Count consecutive 0 's
Update the total count of substrings with minimum of ( cnt0 , cnt1 )
Return answer
Driver code
Function to print the count of substrings
Function to find the N numbers such that their sum is a perfect cube
Loop to find the Ith term of the Centered Hexagonal number
Driver Code
Function Call
Python3 implementation to find the maximum N - digit octal number which is perfect square
Function to convert decimal number to a octal number
Array to store octal number
Counter for octal number array
Store remainder in octal array
Print octal number array in reverse order
Largest n - digit perfect square
Driver Code
Function to reverse a string
Swap character starting from two corners
Function to reverse the string with the given array of indices
Reverse the from 0 to A [ 0 ]
Reverse the for A [ i ] to A [ i + 1 ]
Reverse String for A [ n - 1 ] to length
Driver Code
Function to check if the Depth of Parentheses is correct in the given String
Appending if the Character is not integer
Iterating till the entire Digit is read
Check if character is '(
Increment depth by 1
Increment open by 1
Check if character is ')
Decrement depth by 1
Increment close by 1
Check if open parentheses NOT equals close parentheses
Driver Code
Function to return the maximized sum
Remove any k internal elements
Driver code
Function to return the count of maximum substrings str can be divided into
To store the count of 0 s and 1 s
To store the count of maximum substrings str can be divided into
It is not possible to split the string
Driver code
Function to return the sum of the digits of num ^ 2
To store the number of 1 's
Find the sum of the digits of num ^ 2
Driver code
Python3 implementation of the approach
string class has a constructor that allows us to specify the size of string as first parameter and character to be filled in given size as the second parameter .
Function that returns true if the given strings contain same characters in same order
Get the first character of both strings
Now if there are adjacent similar character remove that character from s1
Now if there are adjacent similar character remove that character from s2
If both the strings are equal then return true
Driver code
Python3 implementation of above approach
Function to find the required count
Variable to the hash
Finding hash of substring ( 0 , l - 1 ) using random number x
Computing x ^ ( l - 1 )
Unordered set to add hash values
Generating all possible hash values
Print the result
Driver Code
Function that returns 1 if str is valid
Index of first appearance of 'b
If str starts with 'b
While ' b ' occurs in str
If ' b ' doesn ' t ▁ appear ▁ after ▁ an ▁ ' a
If ' b ' is not succeeded by another 'b
If sub - string is of the type " abbb "
If str ends with a single b
Driver code
Function that return true if str1 ends with pat
Pattern is larger in length than the str1ing
We match starting from the end while patLen is greater than or equal to 0.
If at any index str1 doesn 't match  with pattern
If str1 ends with the given pattern
Function to return the count of required str1ings
If current str1ing ends with the given pattern
Driver code
Function to return the ending index for the largest valid sub - str1ing starting from index i
If the current character appears after the previous character according to the given circular alphabetical order
Function to return the length of the longest sub - str1ing of consecutive characters from str1
Valid sub - str1ing exists from index i to end
Update the Length
Driver code
Function to return the required sum
Decrement N
Driver code
Python3 implementation of the approach
Function to return the updated frequency map for the array passed as argument
Function that returns true if the passed digit is present in the map after decrementing it 's frequency by 1
If map contains the digit
Decrement the frequency of the digit by 1
True here indicates that the digit was found in the map
Digit not found
Function to return the maximum possible time_value in 24 - Hours format
First digit of hours can be from the range [ 0 , 2 ]
If no valid digit found
If first digit of hours was chosen as 2 then the second digit of hours can be from the range [ 0 , 3 ]
Else it can be from the range [ 0 , 9 ]
Hours and minutes separator
First digit of minutes can be from the range [ 0 , 5 ]
Second digit of minutes can be from the range [ 0 , 9 ]
Return the maximum possible time_value
Driver code
Python3 implementation of above approach
Function to return frequent word from S1 that isn 't present in S2
create map of banned words
find smallest and most frequent word
check if word is not banned
return answer
Driver Code
Function to calculate minimum characters to replace
mismatch occurs
If all characters matched , i . e , there is a substring of ' a ' which is same as string ' b '
increment i to index m - 1 such that minimum characters are replaced in ' a '
Driver Code
Python3 program to print the largest connected component in a grid
stores information about which cell are already visited in a particular BFS
result stores the final result grid
stores the count of cells in the largest connected component
Function checks if a cell is valid i . e it is inside the grid and equal to the key
BFS to find all cells in connection with key = input [ i ] [ j ]
terminating case for BFS
x_move and y_move arrays are the possible movements in x or y direction
checks all four points connected with input [ i ] [ j ]
called every time before a BFS so that visited array is reset to zero
If a larger connected component is found this function is called to store information about that component .
function to print the result
prints the largest component
function to calculate the largest connected component
checking cell to the right
updating result
checking cell downwards
updating result
Drivers Code
function to compute the largest connected component in the grid
Returns true if s1 is substring of s2
A loop to slide pat [ ] one by one
For current index i , check for pattern match
Driver Code
Function accepts a string and checks if string can be split .
if there is only 1 number in the string then it is not possible to split it
storing the substring from 0 to i + 1 to form initial number of the increasing sequence
convert string to integer and add 1 and again convert back to string s2
if s2 is not a substring of number than not possible
if s2 is the next substring of the numeric string
Incearse num2 by 1 i . e the next number to be looked for
check if string is fully traversed then break
If next string doesnot occurs in a given numeric string then it is not possible
if the string was fully traversed and conditions were satisfied
if conditions failed to hold
Driver code
Call the split function for splitting the string
utility function to search complete string from any given index of 2d array
through Backtrack searching in every directions
Function to search the string in 2d array
Driver code
function for KMP search
preprocessing of longest proper prefix
find out the longest prefix and position
for new position with longer prefix in str2 update pos and Len
prresult
Driver Code
Function to count patterns
Variable to store the last character
We found 0 and last character was '1' , state change
After the stream of 0 ' s , ▁ we ▁ got ▁ a ▁ ' 1 ',  counter incremented
Last character stored
Driver Code
preprocessing for strong good suffix rule
m is the length of pattern
if character at position i - 1 is not equivalent to character at j - 1 , then continue searching to right of the pattern for border
the character preceding the occurrence of t in pattern P is different than the mismatching character in P , we stop skipping the occurrences and shift the pattern from i to j
Update the position of next border
p [ i - 1 ] matched with p [ j - 1 ] , border is found . store the beginning position of border
Preprocessing for case 2
set the border position of the first character of the pattern to all indices in array shift having shift [ i ] = 0
suffix becomes shorter than bpos [ 0 ] , use the position of next widest border as value of j
Search for a pattern in given text using Boyer Moore algorithm with Good suffix rule
s is shift of the pattern with respect to text
initialize all occurrence of shift to 0
do preprocessing
Keep reducing index j of pattern while characters of pattern and text are matching at this shift s
If the pattern is present at the current shift , then index j will become - 1 after the above loop
pat [ i ] != pat [ s + j ] so shift the pattern shift [ j + 1 ] times
Driver Code
Return the maximum length prefix which is subsequence .
Iterating string T .
If end of string S .
If character match , increment counter .
Driver Code
Python 3 program to replace all occurrences of " AB " with " C "
Start traversing from second character
If previous character is ' A ' and current character is 'B"
Replace previous character with ' C ' and move all subsequent characters one position back
Driver code
Python3 Program to find all occurrences of the word in a matrix
check whether given cell ( row , col ) is a valid cell or not .
return true if row number and column number is in range
These arrays are used to get row and column numbers of 8 neighboursof a given cell
A utility function to do DFS for a 2D boolean matrix . It only considers the 8 neighbours as adjacent vertices
return if current character doesn 't match with  the next character in the word
append current character position to path
current character matches with the last character \ in the word
Recur for all connected neighbours
The main function to find all occurrences of the word in a matrix
traverse through the all cells of given matrix
occurrence of first character in matrix
check and prif path exists
Driver code
Python3 program for the above approach
Maximum length of the random integer
Function to generate N Hexadecimal integers
Stores all the possible charcters in the Hexadecimal notation
Loop to print N integers
Randomly select length of the int in the range [ 1 , maxSize ]
Print len charcters
Print a randomly selected character
Driver Code
Function to check whether brr [ ] can be made equal to arr [ ] by doing swapping operations
siz variable to store size of string
iterate till N to sort strings
sort each string in arr [ ]
sort each string in brr [ ]
Sort both the vectors so that all the comparable strings will be arranged
iterate till N to compare string in arr [ ] and brr [ ]
Compare each string
Return false becaues if atleast one string is not equal then brr [ ] cannot be converted to arr [ ]
All the strings are compared so at last return true .
Driver code
Store the answer in variable
Python3 implementation of the above approach
Function to check the string
Count the frequency of the string
Check the frequency of the string
Store the length of the new String
Function to find the longest concatenated string having every character of even frequency
Checking the string
Dont Include the string
Include the string
Driver code
Call the function
Print the answer
Function to generate the resultant number using the given criteria
Storing end result
Find the length of numeric string
Traverse the string
Storing digit at ith position
Checking that the number would be added or not
Logic for summing the digits if the digit is greater than 10
Storing the result
Returning the result
Driver Code
Python program for the above approach
Traverse the given string
If character is an alphabet
Stores the sum of order of values
Find the score
Find the single digit sum
Return the resultant sum
Driver Code
Function to find the minimum value of K such that char c occurs in all K sized substrings of string S
Store the string length
Store difference of lengths of segments of every two consecutive occurrences of c
Stores the maximum difference
Store the previous occurence of char c
Check if the current character is c or not
Stores the difference of consecutive occurrences of c
Update previous occurrence of c with current occurence
Comparing diff with max
If string doesn 't contain c
Return max
Driver Code
Function to calculate the number of subsequences of "01"
Store count of 0 ' s ▁ and ▁ 1' s
Count of subsequences without concatenation
Case 1
Case 2
Return the total count
Driver Code
Function to convert the given string to a palindrome with a 0 ' s ▁ and ▁ b ▁ 1' s
Stores the size of the string
Loop to iterate over the string
If one of S [ i ] or S [ N - i - 1 ] is equal to ' ? ' , replace it with corresponding character
Subtract the count of 0 from the required number of zeroes
Subtract the count of 1 from required number of ones
Traverse the string
If both S [ i ] and S [ N - i - 1 ] are '?
If a is greater than b
Update S [ i ] and S [ N - i - 1 ] to '0
Update the value of a
Update S [ i ] and S [ N - i - 1 ] to '1
Update the value of b
Case with middle character ' ? ' in case of odd length string
If a is greater than b
Update middle character by '1
Return Answer
Driver Code
Function to perform the find operation to find the parent of a disjoint set
Function to perform union operation of disjoint set union
Find the parent of node a and b
Update the rank
Function to find the number of distinct strings after performing the given operations
Stores the parent elements of the sets
Stores the rank of the sets
Update parent [ i ] to i
Stores the total characters traversed through the strings
Stores the current characters traversed through a string
Update current [ i ] to false
Update current [ ch - ' a ' ] to true
Check if current [ j ] is true
Update total [ j ] to true
Add arr [ i ] [ 0 ] - ' a ' and j elements to same set
Stores the count of distinct strings
Check total [ i ] is true and parent of i is i only
Increment the value of distCount by 1
Print the value of distCount
Driver Code
Function to find the minimum number of adjacent swaps to make the string alternating
Count the no of zeros and ones
Base Case
Store no of min swaps when string starts with "1"
Keep track of the odd positions
Checking for when the string starts with "1"
Adding the no of swaps to fix "1" at odd positions
Store no of min swaps when string starts with "0"
Keep track of the odd positions
Checking for when the string starts with "0"
Adding the no of swaps to fix "1" at odd positions
Returning the answer based on the conditions when string length is even
When string length is odd
When no of ones is greater than no of zeros
When no of ones is greater than no of zeros
Driver Code
Function to find all the ways to reach Nth stair using one or two jumps
Base Cases
Recur for jump1 and jump2
Stores the total possible jumps
Add "1" with every element present in jump1
Add "2" with every element present in jump2
Driver Code
Function to find a binary string of N bits that does not occur in the givrn array arr [ ]
Stores the resultant string
Loop to iterate over all the given strings in a diagonal order
Append the complement of element at current index into ans
Return Answer
Driver code
Function to print longest substring that appears at beginning of string and also at end in reverse order
Stores the resultant string
If the characters are same
Otherwise , break
If the string can 't be formed
Otherwise print resultant string
Driver Code
Function to find the smallest length of resultant subsequence
Check for a subsequence of size 1
Check for a subsequence of size 2
If none of the above check is successful then subsequence must be of size 3
Never executed
Driver Code
Python 3 program for the above approach
Function to find the minimum number of steps to make all characters equal
Initializing the variables
Store the frequency
Iterate over the string
Calculate the total number of vowels
Storing frequency of each vowel
Count the consonants
Storing the frequency of each consonant
Iterate over the 2 maps
Maximum frequency of consonant
Maximum frequency of vowel
Find the result
Driver Code
Python3 implementation for the above approach
Define the dp table globally
Recursive function to calculate the dp values for range [ L , R ]
The range is odd length
The state is already calculated
If the length is 2
Total answer for this state
Variable to store the current answer .
Remove characters s [ l ] and s [ i ] .
Initialize all the states of dp to - 1 memset ( dp , - 1 , sizeof ( dp ) ) ;
Calculate all Combinations
Driver Code
Function to check for valid subsequences
Stores which element belongs to which subsequence
Check for each pos if a possible subsequence exist or not
Last member of 1 subsequence
Last Member of 2 nd subsequence
Check if current element can go to 2 nd subsequence
Check if the current elements belongs to first subsequence
If the current element does not belong to any subsequence
Check if last digit of first subsequence is greater than pos
If a subsequence is found , find the subsequences
Stores the resulting subsequences
Print the subsequence
If no subsequence found , print - 1
Driver Code
Java program for the above approach
Function to find the required String
If the current length is equal to n exit from here only
Iterate for all the characters
Check if the product is present before
If the current String is good then recurse for the next character
Decrease all the products back to their original state
Erase the last character
Function to calculate kth ordered valid String
Check for the base cases
There are atmost 10 valid Strings for n = 1
Vector to keep a check on number of occurences of products
Recursively construct the Strings
Driver Code
Function to balance the given bracket by swap
To count the number of uunbalanced pairs
if there is an opening bracket and we encounter closing bracket then it will decrement the count of unbalanced bracket .
else it will increment unbalanced pair count
Driver code
Function of return the number of palindromic strings of length N with first K alphabets possible
If N is odd , half + 1 position can be filled to cope with the extra middle element
K is reduced by one , because count of choices for the next position is reduced by 1 as a element can only once
Return the possible count
Function to find the count of palindromic string of first K characters according to the given criteria
If N = 1 , then only K palindromic strings possible .
If N = 2 , the 2 * K palindromic strings possible , K for N = 1 and K for N = 2
Initialize ans with the count of strings possible till N = 2
Return the possible count
Driver Code
Python3 program for the above approach
Function to find the LCS of strings S and string T
Base Case
Already Calculated State
If the characters are the same
Otherwise
Function to find the minimum number of characters that needs to be appended in the string to get all lowercase alphabets as a subsequences
String containing all the characters
Stores the result of overlapping subproblems
Return the minimum characters required
Driver Code
Python program for the above approach
Function to find the value of a ^ b modulo 1000000007
Stores the resultant value a ^ b
Find the value of a ^ b
Function to count the number of ways such that the formed number is divisible by 5 by removing digits
Stores the count of ways
Find the count for string S
If the digit is 5 or 0
Find the count of string for K concatenation of string S
Find the total count
Driver Code
Function to print the string at the middle of lexicographically increasing sequence of strings from S to T
Stores the base 26 digits after addition
Iterete from right to left and add carry to next position
Reduce the number to find the middle string by dividing each position by 2
If current value is odd , carry 26 to the next index value
Driver Code
Python program to solve the above approach
initializing first and second variable as to store how many string ' s ' and string ' t ' will be appended
storing tmp length
if length of string tmp is greater than k , then we have reached our destination string now we can return character at index k
appending s to tmp , f times
appending t to tmp , s times
extracting output character
Driver code
Python program to solve the above approach
storing length
variables for temporary strings of s and t
final output variable
if k is greater than even after adding string ' s ' ' first ' times ( let ' s ▁ call ▁ it ▁ x ) ▁ we ' ll subtract x from k
incrementing first by 2 , as said in problem statement
if k is greater than even after adding string ' t ' ' second ' times ( let ' s ▁ call ▁ it ▁ y ) ▁ we ' ll subtract y from k
incrementing second by two as said in problem statement
if k is smaller than y , then the character will be at position k % m .
returning character at k index
if k is smaller than x , then the character is at position k % n
returning character at k index
Driver code
Function to find minimum count of 0 s removed from the string S such that all 1 s occurs consecutively
Stores the first and the last occurrence of 1
Iterate over the characters the string , S
If current character is '1
Update fst_occur
Iterate over the characters the string , S
If current character is '1
Update lst_occur
Stores the count of 0 s between fst_occur and lst_occur
Iterate over the characters of S between fst_occur and lst_occur
If current character is '0
Update count
Print the resultant minimum count
Driver Code
Function to modify the given string such that string S is a period of K
Iterate over the range [ 0 , K ]
Stores the frequency of the characters S [ i + j * K ]
Iterate over the string with increment of K
Print " - 1"
Replace all characters of the string with ' ? ' to ' a ' to make it smallest
Otherwise
Find the character other than '?
Replace all characters of the string with ' ? ' to character ch
Clear the map M
Return the modified string
Driver Code
Python program of the above approach
Function to find the factorial of the given number
Function to count ways to rearrange characters of the string such that all alphabets are adjacent .
Stores factorial of ( N + 1 )
Stores factorial of
Driver Code
Given a and b
Function call
Function to count all the camelcase characters in the string S
Stores the total count of camelcase characters
Traverse the string S
If ASCII value of character lies over the range [ 65 , 91 ] then increment the count
Print the total count obtained
Driver Code
Function to count the appearances of each character
If the character is lower case
If the character is uppercase
If the character is a punctuation mark
Function to decode the given encoded string
Iterate the given string str
Find the index of the next character to be printed
Driver code
Function to decrypt a monoalphabetic substitution cipher using the letter frequency attack
Stores final 5 possible deciphered plaintext
Store the frequency of each letter in cipher text
Stores the frequency of each letter in cipher text in descending order
Store which alphabet is used already
Traverse the string S
Copy the frequency array
Stores the string formed from concatanating the english letters in the decreasing frequency in the english language
Sort the array in descending order
Itearate over the range [ 0 , 5 ]
Iterate over the range [ 0 , 26 ]
Store the numerical equivalent of letter at ith index of array letter_frequency
Calculate the probable shift used in monoalphabetic cipher
Temporary string to generate one plaintext at a time
Generate the probable ith plaintext string using the shift calculated above
Insert whitespaces as it is
Shift the kth letter of the cipher by x
Add the kth calculated / shifted letter to temporary string
Print the generated 5 possible plaintexts
Given string
Function Call
Function to merge two partitions such that the merged array is sorted
Counting inversions
Function to implement merge sort
Function to calculate number of inversions in a given array
Calculate the number of inversions
Return the number of inversions
Function to count the number of substrings that contains more 1 s than 0 s
Stores the prefix sum array
Stores the count of valid substrings
Driver Code
Given Input
Function Call
Function to check if the given string S can be made empty
Stores the characters of the string S
Traverse the given string
If the character is c
If stack size is greater than 2
Pop from the stack
Top two characters in the stack should be ' b ' and ' a ' respectively
Otherwise , print No
If character is ' a ' or ' b ' push to stack
If stack is empty , then print Yes . Otherwise print No
Driver code
Function to count the maximum number of operations performed on the string
Size of the string
Stores the maximum number of operations performed
Stores the count of ' X ' occurred so far
Traverse the string
Check if current char is 'X
Check if the value of cnt is greater than 0
Decrement the value of cnt
Increment the value of ans
Prthe value of ans
Driver Code
Python3 program for the above approach
Function to check if the given can be splitted into subsequences " ABC "
Stores the length of the string
Stores the indices of 'A
Stores the indices of 'B
Stores the indices of 'C
Traverse the S
If S [ i ] is equal to 'A
Push the index i in A
Else if S [ i ] is equal to 'B
Push the index i in B
Else if S [ i ] is equal to 'C
Push the index i in C
If N is not multiple of 3 or count of characters ' A ' , ' B ' and ' C ' are not equal
Return " No "
Iterate over the deque B
If A is not empty and B [ i ] is greater than A [ 0 ]
Removes the front element of A
Else return " No "
Iterate over the deque B in reverse
If C is not empty and last element of C is greater thab B [ i ]
Removes the last element of C
Else return " No "
If none of the above cases satisfy return "Yes
Driver Code
Input
Function call
Function to check weather summation of two words equal to target word
Store the length of each string
Reverse the strings A , B and C
Stores the remainder
Iterate in the range [ 0 , max ( L , max ( M , N ) ) ]
Stores the integer at ith position from the right in the sum of A and B
If i is less than L
If i is less than M
Update rem and curr
If i is less than N and curr is not equal to C [ i ] - ' a ' , return " No "
If rem is greater than 0 , return " No "
Otherwise , return " Yes "
Driver Code
Given Input
Function Call
Function to find minimum value of K such that there exist atleast one K amazing character
Stores the answer
Update the S
Iterate over the characters in range [ a , z ]
Stores the last index where c appears
Stores the maximum possible length
Update S
Iterate over characters of string S
If S [ i ] is equal to c
Stores the distance between positions of two same c
Update max_len
Update the value of prev
Update the value of ans
Return the answer
Driver Code
Given Input
Function Call
Function to find minimum Hamming Distance after atmost one operation
Store the size of the string
Store the prefix sum of 1 s
Create Prefix Sum array
Initialize cnt as number of ones in string S
Store the required result
Traverse the string , S
Store the number of 1 s in the substring S [ i , i + K - 1 ]
Update the answer
Return the result
Driver Code
Given Input
Function Call
Python 3 program for the above approach
Function to check if the given number is prime or not
If the number is less than 2
If the number is 2
If N is a multiple of 2
Otherwise , check for the odds values
Function to check if S1 can be a permutation of S2 by adding or removing characters from S1
Initialize a frequency array
Decrement the frequency for occurrence in s1
Increment the frequency for occurence in s2
If frequency of current char is same in s1 and s2
Check the frequency for the current char is not prime
Print the result
Driver Code
Function to find the total number of ways to partitiaon the string into two subset satisfying the conditions
Stores the resultant number of ways of splitting
Iterate over the range [ 0 , 2 ^ N ]
Traverse the string S
If ith bit is set , then append the character S [ i ] to X
Otherwise , append the character S [ i ] to Y
Reverse the second string
If X is equal to Y
Return the total number of ways
Driver Code
Function to check whether the first x characters of both string str and reversed string str are same or not
Length of the string str
Traverse over the string while first and last x characters are not equal
If the current and n - k - 1 from last character are not equal
Finally , print true
Driver Code
Given input
Function Call
Function to find final string after applying all Queries on it
Traverse the Queries array
Convert A , B to zero indexing
Query of 1 st type
Swap ath and bth characters
Query of 2 nd type
Swap first N characters with last N characters
Print answer
Driver code
Input
Function call
Function to find the minimum number of replacement of "01" with "110" s . t . S doesn 't contain substring "10"
Stores the number of operations performed
Stores the resultant count of substrings
Traverse the string S from end
If the current character is 0
If the current character is 1
Print the result
Driver Code
Function to find the number of ways to obtain different Bitwise OR
Stores the count of pairs t00 , t10 , t01 , t11
Traverse the characters of the string S1 and S2
Count the pair ( 0 , 0 )
Count the pair ( 1 , 0 )
Count the pair ( 1 , 1 )
Count the pair ( 0 , 1 )
Number of ways to calculate the different bitwise OR
Print the result
Driver Code
Function to modify the given string K number of times by flipping 0 s having different adjacent characters
Size of the string
Stores modified string after each iteration
Iterate over the range [ 0 k ]
Traverse the string S
If '0' is present at 0 th index then replace it with 1 st index
If '0' is present at the last index then replace it with last index - 1 character
Otherwise , convert 0 s to 1 if the adjacent characters are different
If during this iteration there is no change in the string then break this loop
Update the string S
Print the updated string
Driver Code
Function to remove the minimum count of characters from the string such that no subsequence of length 2 repeats
Initialize the final string
Stores if any character occurs in the final string or not
Store the index of the last character added in the string
Traverse the string
Add all the unique characters
Check if S [ 0 ] appears in the range [ pos + 1 , N - 1 ]
If the characters are the same
Print the resultant string
Driver Code
Function to check if a numeric string can be split into substrings such that the difference between the consecutive substrings is K
Stores the size of the string
Iterate over the range [ 1 , N ] and try each possible starting number
Convert the number to string
Build up a sequence starting with the number
Compare it with the original string s
Print the result
Driver Code
Function to check whether all 0 s in the string can be changed into 1 s
Store the count of 0 s converted for the last occurrence of 1
Declere a stack
Traverse the string , S
If stack is empty
There is no 1 that can change this 0 to 1
Push 1 into the stack
The last 1 has reached its limit
New 1 has been found which can now change at most K 0 s
If flag is 1 , pr " YES " else pr " NO "
Driver code
Given Input
Function call
Function to check if all prefixes of a number is divisible by remaining count of digits or not
Traverse and check divisibility for each updated number
Update the original number
Given Input
Function Call
Function to find the length of the longest substring having even number of vowels
Create two hashmaps
Keep the track of frequencies of the vowels
Stores the maximum length
Traverse the given string S
If it is a vowel , then update the frequency
Find the index of occurence of the string evenOdd in map
Update the maximum length
Print the maximum length
Driver Code
Function to check if string str1 is a subsequence of string str2
Store index of str1
Traverse str2 and str1 , and compare current character of str2 with first unmatched char of str1
If matched , move ahead in str1
If all characters of str1 were found in str2
Function to find the minimum number which is not a subsequence of the given binary string in its binary form
Store the decimal number of string , S
Initialize the required result
Iterate in the range [ 0 , R ]
Convert integer i to binary string
Check if the string is not a subsequence
Update ans and break
Print the required result
Driver Code
Function Call
Function Call
Function to calculate minimum cost to convert all the characters of S to '1
Stores the result
Stores the number of groups that have 0 as characters
Traverse the S
If current character is '0
If count is greater than 0
Set the count to 0
If the last few consecutive characters are '0
If contains all characters as '1
Minimum Cost
Driver Code
Given Input
Function Call
Function to check if a number is prime or not
Return not prime
If prime return true
Function to find the largest prime number possible from a subsequence
Stores pairs of subsequences and their respective decimal value
Stores the answer
Traverse the string
Stores the size of the vector
Traverse the vector
Extract the current pair
Get the binary string from the pair
Stores equivalent decimal values
If the current character is '1
Add the character to the subsequence
Update the value by left shifting the current value and adding 1 to it
If s [ i ] = = '0
Add the character to the subsequence
Update the value by left shifting the current value and adding 0 to it
Store the subsequence in the vector
Check if the decimal representation of current subsequence is prime or not
If prime
Update the answer with the largest one
If no prime number could be obtained
Driver Code
Input String
Function to check if a number is prime number
Define a flag variable
Check for factors of num
If factor is found , set flag to True and break out of loop
Check if flag is True
Function to calculate order of the number x
Function to check whether the given number is Armstrong number or not
If the condition satisfies
Function to count Armstrong valued strings
Stores the count of Armstrong valued strings
Iterate over the list
Store the value of the string
Find value of the string
Check if it an Armstrong number
Function to count prime valued strings
Store the count of prime valued strings
Iterate over the list
Store the value of the string
Find value of the string
Check if it is a Prime Number
Driver code
Function Call
Function to find the minimum cost to convert the given into balanced string
Stores count of 1 ' s ▁ and ▁ 0' s in the string
Traverse the string
Increment count1
Increment count 0
Stores absolute difference of counts of 0 ' s ▁ and ▁ 1' s
If consists of only 0 ' s ▁ and ▁ 1' s
Print the minimum cost
Driver Code
Python3 program for the above approach
Function to find the minimum time required to complete the tasks if the order of tasks can be changed
If there is no task , print 0
Store the maximum occurring character and its frequency
Stores the frequency of each character
Traverse the string S
Increment the frequency of the current character
Update maxfreq and maxchar
Store the number of empty slots
Traverse the hashmap , um
Fill the empty slots
Store the required result
Print the result
Driver Code
Function to check if it is possible to make all characters of string S same or not
Length of string
Stores the sum of ASCII value
Traverse the string S
Update the weightOfString
If the sum is divisible by N then pr " Yes "
Otherwise pr " No "
Driver Code
Function to replace the characters by its frequency of character in it
Stores frequencies of characters in the string S
Traverse the string S
Increment the frequency of each character by 1
Traverse the string S
Find the frequency of the current character
Update the character
Print the resultant string
Driver Code
Function to find the minimum length of the string possible after removing pairs of consecutive digits
Initialize the stack st
Traverse the string S
If the stack is empty
Otherwise
Get the top character of the stack
If cha and top are consecutive digits
Otherwise , push the character ch
Print the size of the stack
Driver Code
Function to find the minimum time required to complete tasks without changing their order
Keeps track of the last time instant of each task
Stores the required result
Traverse the given string
Check last time instant of task , if it exists before
Increment the time if task is within the K units of time
Update the time of the current task in the map
Increment the time by 1
Print the result
Driver Code
Function to check if target is a subsequence of string S
Declare a stack
Push the characters of target into the stack
Traverse the string S in reverse
If the stack is empty
If S [ i ] is same as the top of the stack
Pop the top of stack
Stack s is empty
Driver Code
Python3 program for the above approach
Function to construct DFA as per the given conditions
If at state 0 and a digit has occurred then set it to state 1
Similarly for all other states
Function to build and connect the DFA states
Connect all the states to the dead state
Function call to make DFA as per the given conditions
Function call to check whether an integer in the form of is unsigned integer or not
Build the DFA
Stores the current state
Traverse the string
If at a certain state a digit occurs then change the current state according to the DFA
Or + / - sign
Or decimal occurred
Or any other character
Or e / E or exponent sign
State 1 , 4 , 8 will give the final answer
Driver Code
Function to convert mobile numeric keypad sequence into its equivalent string
Store the mobile keypad mappings
Traverse the str1ing str1
If the current character is ' . ' , then continue to the next iteration
Stores the number of continuous clicks
Iterate a loop to find the count of same characters
2 , 3 , 4 , 5 , 6 and 8 keys will have maximum of 3 letters
7 and 9 keys will have maximum of 4 keys
Handle the end condition
Check if the current pressed key is 7 or 9
Else , the key pressed is either 2 , 3 , 4 , 5 , 6 or 8
Driver Code
Function to construct the lexicographically largest string having sum of characters as N
Stores the resulting string
Iterate until N is at least 26
Append ' z ' to the string ans
Decrement N by 26
Append character at index ( N + ' a ' )
Return the resultant string
Driver Code
Function to find the length of all prefixes of the given that are also suffixes of the same string
Stores the prefix string
Traverse the S
Add the current character to the prefix string
Store the suffix string
Check if both the strings are equal or not
Driver Code
Function to count newly created pairs by swapping the first characters of any pairs of strings
Stores the count all possible pair of strings
Push all the strings into the Unordered Map
Generate all possible pairs of strings from the array arr [ ]
Store the current pair of strings
Swap the first character
Check if both string are not present in map
Print the result
Driver Code
Function to check if a valid parenthesis can be obtained by moving characters to either end at most K number of times
Base Case 1
Count of ' ( ' and ')
Base Case 2
Store the count of moves required to make a valid parenthesis
Traverse the string
Increment cnt if opening bracket has occurred
Otherwise , decrement cnt by 1
Decrement cnt by 1
If cnt is negative
Update the cnt
Increment the ans
If ans is at most K , then print Yes . Otherwise print No
Driver Code
Python3 program for the above approach
Function to find a random number between 0 or 1
Generate the random number
Return the generated number
Function to generate a random binary string of length N
Stores the empty string
Iterate over the range [ 0 , N - 1 ]
Store the random number
Append it to the string
Print the resulting string
Driver Code
Function to check if a string can be split into palindromic strings of at least length 2 by including every character exactly once
Stores the frequency of each character
Store the frequency of characters with frequencies 1 and even respectively
Traverse the string s
Iterate over all the characters
If the frequency is 1
If frequency is even
Print the result
Stores the number of characters with frequency equal to 1 that are not part of a palindromic string
Iterate over all the characters
If o becomes less than 0 , then break out of the loop
If frequency of the current character is > 2 and is odd
Update the value of o
If a single character is still remaining
Increment o by 1
Set a [ i ] to 1
Print the result
Driver Code
Function to find the maximum time possible by replacing each ' _ ' with any digit
If the first character is '_
If s [ 1 ] is ' _ ' or s [ 1 ] is less than 4
Update s [ 0 ] as 2
Otherwise , update s [ 0 ] = 1
If s [ 1 ] is equal to '_
If s [ 0 ] is equal to '2
Otherwise
If S [ 3 ] is equal to '_
If s [ 4 ] is equal to '_
Return the modified string
Driver Code
Function to count all the distinct emails after preprocessing according to the given rules
Traverse the given array of strings arr [ ]
Stores the position of ' @ ' in the string
If pos2 < x . size ( )
Erases all the occurrences of ' . ' before pos2
Stores the position of the first '+
Update the position pos2
If ' + ' exists then erase characters after ' + ' and before '@
Insert all the updated strings inside the set
Return the size of set ans
Driver Code
Function Call
Python3 program for the above approach
Function to find the nearest power of 2 for all frequencies in the Map freq
Traverse the Map
Calculate log of the current array element
Find the nearest power of 2 for the current frequency
Function to find nearest power of 2 for frequency of each digit of num
Length of string
Stores the frequency of each character in the string
Traverse the string S
Function call to generate nearest power of 2 for each frequency
Driver Code
Function to calculate GCD of two numbers
Function to calculate LCM of two numbers
Function to find the smallest string which is divisible by strings S and T
Store the length of both strings
Store LCM of n and m
Temporary strings to store concatenated strings
Concatenate s1 ( l / n ) times
Concatenate t1 ( l / m ) times
If s1 and t1 are equal
Otherwise , pr - 1
Driver Code
Function to count minimum number of removal of consecutive 0 s required to make binary string consists only of 1 s
Stores the count of removals
Traverse the string S
If the current character is '0
Traverse until consecutive characters are only '0' s
If the binary string only contains 1 s , then return 1
If the first and the last characters are 0
Return the resultant count
Driver Code
Python3 program for the above approach
Function to count minimum removals required to arrange all 0 s before 1 s
Count the occurences of 0 in s
Size of the string
Stores the minimum number of removals required
Iterate over each of the characters in the string s
If the i - th character is found to be '0
Store the minimum of res and right_0 + left_1 in res
Return the final result
Driver Code
Function to count the minimum number of reversals required to make the given binary strings s1 and s2 same
Stores the minimum count of reversal of substrings required
If the length of the strings are not the same then return - 1
Iterate over each character
If s1 [ i ] is not equal to s2 [ i ]
Iterate until s1 [ i ] != s2 [ i ]
Increment answer by 1
Return the resultant count of reversal of subrequired
Driver Code
Function Call
Function to find the number of times already visited position is revisited after starting traversal from { X , Y }
Stores the x and y temporarily
Stores the number of times an already visited position is revisited
Initialize hashset
Insert the starting coordinates
Traverse over the string
Update the coordinates according to the current directions
If the new { X , Y } has been visited before , then increment the count by 1
Otherwise
Insert new { x , y }
Driver Code
Function to find sum of frequencies of characters of S1 present in S2
Insert all characters of string S1 in the set
Traverse the string S2
Check if X is present in bset or not
Increment count by 1
Finally , print the count
Given strings
Function to check if it 's possible to make the string s non decreasing
Stores length of string
Stores the last character that is not '?
Traverse the string S
If current character of the string is '?
If s [ i ] is not ' ? ' and is less than C
Otherwise
Update C
Return 1
Driver Code
Function to return the length of smallest subsequence required to be removed to make the given string non - decreasing
Length of the string
Count of zeros and ones
Traverse the string
Count minimum removals to obtain strings of the form "00000 . . . . " or "11111 . . . "
Increment count
Remove 1 s and remaining 0 s
Driver Code
Function to print all the words occurring k times in a string
Stores the words
Traverse the list
Check for count
Print the word
Remove from list
Driver Code
Given string
Given value of K
Function call to find all words occuring K times
Function to check if substrings from three given strings can be concatenated to form a palindrome
Mask for S1 and S2
Set ( i - ' a ' ) th bit in maskA
Set ( i - ' a ' ) th bit in maskC
If the bitwise AND is > 0
Driver Code
Python3 program for the above approach
Function to check if two arrays are identical or not
Iterate over the range [ 0 , SIZE ]
If frequency any character is not same in both the strings
Otherwise
Function to find the maximum length of the required string
Store the count of characters in str1
Store the count of characters in str2
Stores the maximum length
Minimum length of str1 and str2
Increment the count of characters of str1 [ i ] in freq1 [ ] by one
Increment the count of characters of stord ( r2 [ i ] ) in freq2 [ ] by one
Checks if prefixes are anagram or not
Finally prthe ans
Driver Code
Function Call
Function to find the rank of a string
Store the length of the string
Stores its equivalent decimal value
Traverse the string
Store the number of strings of length less than N occurring before the given string
Store the decimal equivalent number of string bin
Store the rank in answer
Prthe answer
Driver Code
Recursive function to return gcd of A and B
Base case
Length of A is greater
Calculate GCD
Store the GCD of the length of the strings
Driver Code
Function call
Function to calculate score of parentheses
Stores index of character of string
Stores total scores obtained from the string
Iterate over characters of the string
If s [ i ] is '(
If top element of stack is '(
Stores score of inner parentheses
Calculate score of inner parentheses
Update count
Pop from stack
Insert score of inner parentheses
Update i
Calculate score of the string
Update ans
Driver Code
Function to count minimum number of operations to convert the string to a balanced bracket sequence
Initialize the integer array
Traverse the string
Decrement a [ i ]
Increment a [ i ]
Update the sum as current value of arr [ i ]
If answer exists
Traverse from i
Find all substrings with 0 sum
Print the sum of sizes
No answer exists
Driver Code
Function to check if the can be balanced by replacing the ' $ ' with opening or closing brackets
If string can never be balanced
Declare 2 stacks to check if all ) can be balanced with ( or $ and vice - versa
Store the count the occurence of ( , ) and $
Traverse the string
Increment closed bracket count by 1
If there are no opening bracket to match it then return False
Otherwise , pop the character from the stack
If current character is an opening bracket or $ , push it to the stack
Increment symbol count by 1
Increment open bracket count by 1
Traverse the string from end and repeat the same process
If there are no closing brackets to match it
Otherwise , pop character from stack
Store the extra ( or ) which are not balanced yet
Check if $ is available to balance the extra brackets
Count ramaining $ after balancing extra ( and )
Check if each pair of $ is convertable in ( )
Driver Code
Function Call
Function to find difference between maximum and minimum frequency of a character in given range
Stores length of string
Stores count of queries
Iterate over the characters of the string
Stores l - value of a query
Stores r - value of a query
Store count of every character laying in range [ l , r ]
Update frequency of current character
Stores maximum frequency of characters in given range
Stores minimum frequency of characters in given range
Iterate over all possible characters of the given string
Update mx
If ( j + ' a ' ) is present
Difference between max and min
Driver Code
Given string
Given queries
Function Call
Function to count the substring with equal number of a , b , c and d
Stores relative frequency of the characters { ' a ' , ' b ' , ' c ' , ' d ' }
Initially , frequencies of ' a ' , ' b ' , ' c ' and ' d ' are 0.
Stores relative frequency of 'a
Stores relative frequency of 'b
Stores relative frequency of 'c
Stores relative frequency of 'd
Stores count of substring with equal number of ' a ' , ' b ' , ' c ' and 'd
Iterate over the characters of the string
If current character is 'a
Update p
Stores minimum of { p , q , r , s }
Update p
Update q
Update r
Update s
If current character is b
Update q
Stores minimum of { p , q , r , s }
Update p
Update q
Update r
Update s
Update r
Stores minimum of { p , q , r , s }
Update p
Update q
Update r
Update s
Update s
Stores minimum of { p , q , r , s }
Update p
Update q
Update r
Update s
Update relative frequency of { p , q , r , s }
Traverse the map
Stores count of relative frequency
Update cntSub
Driver code
Function Call
Function to count the number of strings from an array having all characters appearing in the string S
Initialize a set to store all distinct characters of S
Traverse over S
Insert characters into the Set
Stores the required count
Traverse the array
Traverse over arr [ i ]
Check if character in arr [ i ] [ j ] is present in the S or not
Increment the count if all the characters of arr [ i ] are present in the S
Finally , prthe count
Driver code
Function to find the minimum length to which string str can be reduced to by removing all occurrences of string K
Initialize stack of characters
Push character into the stack
If stack size >= K . size ( )
Create empty string to store characters of stack
Traverse the string K in reverse
If any of the characters differ , it means that K is not present in the stack
Push the elements back into the stack
Store the string
Remove top element
Size of stack gives the minimized length of str
Driver code
Function Call
Function to find the largest palindrome not exceeding N which can be expressed as the product of two 3 - digit numbers
Stores all palindromes
Stores the product
Check if X is palindrome
Check n is less than N
If true , append it in the list
Print the largest palindrome
Driver Code
Function Call
Function to check if all strings can be made equal by swapping any pair of characters from the same or different strings
Stores length of string
Store frequency of each distinct character of the strings
Traverse the array
Iterate over the characters
Update frequency of arr [ i ] [ j ]
Traverse the array cntFreq [ ]
If cntFreq [ i ] is divisible by N or not
Driver Code
Function Call
Recursive function to print stack elements from bottom to top without changing their order
If stack is empty
Pop top element of the stack
Recursively call the function PrintStack
Print the stack element from the bottom
Push the same element onto the stack to preserve the order
Function to minimize binary string by removing substrings consisting of same character
Declare a stack of characters
Push the first character of the string into the stack
Traverse the string s
If Stack is empty
Push current character into the stack
Check if the current character is same as the top of the stack
If true , pop the top of the stack
Otherwise , push the current element
Print stack from bottom to top
Driver Code
Function to calculate total number of accidents
Function to calculate count of all possible collision
Size of string
Stores the count of collisions
Total number of truck in lane b
Count total number of collisions while traversing the string a
Function to calculate the probability of collisions
Evaluate total outcome that is all the possible accident
Evaluate favourable outcome i . e . , count of collision of trucks
Print desired probability
Driver Code
Function Call
Function to calculate ( x ^ y ) mod p
Initialize result
Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now
Return the final result
Given N
Base Case
Check whether n is even or odd
Function Call
Function Call
Function to find length of the longest substring with each element occurring even number of times
Initialize unordered_map
Stores the length of the longest required substring
Traverse the string
Stores the value of the digit present at current index
Bitwise XOR of the mask with 1 left - shifted by val
Check if the value of mask is already present in ind or not
Update the final answer
Otherwise
Return the answer
Driver Code
Given string
: Length of the given string
Function Call
Function to count unique array elements by replacing each character by its Morse code
Stores Morse code of all lowercase characters
Stores distinct elements of String by replacing each character by Morse code
Stores length of arr array
Traverse the array
Stores the Morse code of arr [ i ]
Stores length of current String
Update temp
Insert temp into st
Return count of elements in the set
Driver code
Function to print the maximum repeating character at each index of the string
Stores frequency of each distinct character
Stores frequency of maximum repeating character
Stores the character having maximum frequency
Traverse the string
Stores current character
Update the frequency of strr [ i ]
If frequency of current character exceeds max
Update max
Update charMax
Print the required output
Driver Code
Stores length of strr
Function to find the minimum cost to convert the into a palindrome
Length of the string
If iointer is in the second half
Reverse the string
Find the farthest index needed to change on left side
Find the farthest index needed to change on right side
Changing the variable to make palindrome
min distance to travel to make palindrome
Total cost
Return the minimum cost
Driver Code
Given S
Given pointer P
Function Call
Function to find the minimum count of operations to make all characters of the string same
Set min to some large value
Find minimum operations for each character
Initialize cnt
Add the value to cnt
Update minValue
Return minValue
Driver Code
Given string str
Function Call
Python3 program for the above approach
Stores the distinct strings from the given array
Insert the strings into set
Stores the left and right substrings of the given string
Stores the middle substring
Traverse the array of strings
Reverse the current string
Checking if the is itself a palindrome or not
Check if the reverse of the is present or not
Append to the left substring
Append to the right substring
Erase both the strings from the set
Print the left substring
Print the middle substring
Print the right substring
Driver Code
Function call
Function to find the minimum length of string required to reach from source to destination
Size of the string
Stores the index of the four directions E , W , N , S
If destination reached
Iterate over the string
Move east
Change x1 according to direction E
Move west
Change x1 according to direction W
Move north
Change y1 according to direction N
Move south
Change y1 according to direction S
Store the max of all positions
Print the minimum length of string required
Otherwise , it is impossible
Given string
Given source and destination
Function call
Function to remove adjacent duplicate elements
Store the string without duplicate elements
Store the index of str
Traverse the string str
Checks if stack is empty or top of the stack is not equal to current character
If top element of the stack is equal to the current character
If stack is empty
If stack is not Empty
Driver Code
Function to get the factorial of N
Function to get the total number of distinct ways
Length of str1
Length of str2
If both strings have equal length
If both strings do not have equal length
Driver code
Python3 program for the above approach
Function to find the string which evaluates to the product of A and B
Stores the result
2 ^ logg <= B && 2 ^ ( logg + 1 ) > B
Update res to res += A X 2 ^ logg
Update res to res += A X 2 ^ 0
Find the remainder
If remainder is not equal to 0
Return the resultant string
Function to find the minimum length representation of A * B
Find representation of form A << k1 + A << k2 + ... + A << kn
Find representation of form B << k1 + B << k2 + ... + B << kn
Compare the length of the representations
Driver Code
Product A X B
Function call
Function to prcount of subStrings whose anagrams are palindromic
Stores the answer
Iterate over the String
Set the current character
Parity update
Print final count
Driver Code
Function Call
Python3 program for the above approach
Function to get the count of substrings whose anagrams are palindromic
Store the answer
Map to store the freq of masks
Set frequency for mask 00. . .00 to 1
Store mask in x from 0 to i
Update answer
Update frequency
Print the answer
Driver Code
Function call
Function to prthe result of the summation of numbers having K - digit
Reverse the array to obtain the result
Print every digit of the answer
Function to calculate the total sum
Stores the array of large numbers in integer format
Convert each element from character to integer
Stores the carry
Stores the result of summation
Initialize the sum
Calculate sum
Update the sum by adding existing carry
Store the number of digits
Increase count of digits
If the number exceeds 9 , Store the unit digit in carry
Store the rest of the sum
Append digit by digit into result array
Append result until carry is 0
Print the result
Driver Code
Given N array of large numbers
Function to reverse the words of a given string
Stack to store each word of the string
Store the whole string in stream
Push each word of the into the stack
Print the in reverse order of the words
Driver Code
Function to find the total number of substring having only ones
Driver Code
Python3 program for the above approach
Function to calculate and return x ^ n in log ( n ) time using Binary Exponentiation
Function to calculate the factorial of a number
Function to calculate combination
nCi = ( n ! ) / ( ( n - i ) ! * i ! )
Using Euler 's theorem of Modular  multiplicative inverse to find  the inverse of a number.  (1/a)%mod=a^(m?2)%mod
Function to find the count of possible strings
Number of ways to form all possible strings
Number of ways to form strings that don 't contain the input  string as a subsequence
Checking for all prefix length from 0 to | S | - 1.
To calculate nCi
Select the remaining characters 25 ^ ( N - i )
Add the answer for this prefix length to the final answer
Answer is the difference of allWays and noWays
Print the answer
Driver Code
Python3 program to implement the above approach
Stores frequency of special characters in the array
Stores prefix sum
Function to check whether a character is special or not
If current character is special
Otherwise
Function to find sum of ratio of count of special characters and length of substrings
Calculate the prefix sum of special nodes
Generate prefix sum array
Calculate ratio for substring
Driver Code
Function which counts the minimum number of required operations
n stores the length of the string s
ans will store the required ans
i is the current index in the string
Move j until characters s [ i ] & s [ j ] are equal or the end of the string is reached
diff stores the length of the substring such that all the characters are equal in it
We need atleast diff / 2 operations for this substring
Driver code
Function to find the minimum cost
Store vowels
Loop for iteration of string
Loop to calculate the cost
Add minimum cost
Given String
Function Call
Function to check if the string str is palindromic or not
Pointers to iterate the string from both ends
If characters are found to be distinct
Return true if the string is palindromic
Function to generate string from characters at odd indices
Function to generate string from characters at even indices
Functions to checks if string is Even - Odd Palindrome or not
Generate odd indexed string
Generate even indexed string
Check for Palindrome
Driver code
Function to check if the string str is palindromic or not
Iterate the string str from left and right pointers
Keep comparing characters while they are same
If they are not same then return false
Return true if the string is palindromic
Function to make string using odd indices of string str
Functions checks if characters at odd index of the string forms palindrome or not
Make odd indexed string
Check for Palindrome
Given string
Function call
Function to return the count of Strings
Calculate pow ( 2 , n )
Return pow ( 2 , n ) - 1
Driver Code
Function to decrypt and print the new string
If the whole string has been traversed
To calculate middle index of the string
Print the character at middle index
Recursively call for right - substring
Recursive call for left - substring
Driver Code
Function returns true if s1 is suffix of s2
Function to check if binary equivalent of a number ends in "111" or not
To store the binary number
Count used to store exponent value
Driver code
Function to check if a character is vowel or not
Function to check whether string contains only vowel
Check if the character is not vowel then invalid
Function to Count all substrings in a string which contains only vowels
Generate all substring of s
If temp contains only vowels
Increment the count
Driver code
Function to check a character is vowel or not
Function to check a substring is valid or not
If size is 1 then check only first character
If 0 'th character is  not vowel then invalid
If two adjacent characters are same or i 'th char is  not vowel then invalid
Function to find length of longest substring consisting only of vowels and no similar adjacent alphabets
Stores max length of valid substring
For current substring
Check if substring is valid
Size of substring is ( j - i + 1 )
Driver code
Function to check whether N is Balanced Number or not
Calculating the Leftsum and rightSum simultaneously
Typecasting each character to integer and adding the digit to respective sums
Driver Code
Function call
Python3 program to count all possible strings of length N consisting of atleast one vowel and one consonant
Function to return base ^ exponent
Function to count all possible strings
vowels only
Return the final result
Driver Program
Python3 implementation to find the sum of Decomposition values of all suffixes of an array
Function to find the decomposition values of the array
Stack
Variable to maintain min value in stack
Loop to iterate over the array
Condition to check if the stack is empty
Condition to check if the top of the stack is greater than the current element
Loop to pop the element out
The size of the stack is the max no of subarrays for suffix till index i from the right
Driver Code
Function that find Maximum number of set bit appears in a substring of size K .
Traverse string 1 to k
Increment count if character is set bit
Traverse string k + 1 to length of string
Remove the contribution of the ( i - k ) th character which is no longer in the window
Add the contribution of the current character
Update maxCount at for each window of size k
Return maxCount
Driver code
Function that finds minimum character required to be deleted
Iterate in the strings
Check if the characters are not equal
Return the result
Driver code
Function that finds minimum character required to be deleted
Iterate in the strings
Check if the characters are not equal
Return the result
Driver code
Function to count valid triplets
Store frequencies of a , b and c
If the current letter is 'a
If the current letter is 'b
If the current letter is 'c
Calculate total no of triplets
Subtract invalid triplets
Driver Code
Function to check if parenthesis are balanced
Initialising Variables
Traversing the Expression
It is a closing parenthesis
This means there are more closing parenthesis than opening
If count is not zero , it means there are more opening parenthesis
Driver code
Function to check if the word exists
If index exceeds board range
If the current cell does not contain the required character
If the cell contains the required character and is the last character of the word required to be matched
Return true as word is found
Mark cell visited
Check Adjacent cells for the next character
Restore cell value
Driver Code
Function to count the subparts
Total subStr till now
If it can be divided , then this substring is one of the possible answer
Convert string to long long and check if its divisible with X
Consider there is no vertical cut between this index and the next one , hence take total carrying total substr a .
If there is vertical cut between this index and next one , then we start again with subStr as " " and add b for the count of subStr upto now
Return max of both the cases
Driver code
Function to check if B is a suffix of A or not
Convert numbers into strings
Find the lengths of strings s1 and s2
Base Case
Traverse the strings s1 & s2
If at any index characters are unequals then return false
Return true
Given numbers
Function Call
If B is a suffix of A , then print " Yes "
Function to check if B is a suffix of A or not
Convert numbers into strings
Check if s2 is a suffix of s1 or not
If result is true print " Yes "
Driver code
Given numbers
Function call
A Function that generates and returns the binary string
P : Frequency of consecutive characters with sum 0 Q : Frequency of consecutive characters with sum 1 R : Frequency of consecutive characters with sum 2
If no consecutive character adds up to 1
Not possible if both P and Q are non - zero
If P is not equal to 0
Append 0 P + 1 times
Append 1 R + 1 times
Append "01" to satisfy Q
Append "0" P times
Append "1" R times
Driver Code
Function to check a string doesn 't contains a monotonous substring
Loop to iterate over the string and check that it doesn 't contains  the monotonous substring
Function to check that there exist a arrangement of string such that it doesn 't contains monotonous substring
Loop to group the characters of the string into two buckets
Sorting the two buckets
Condition to check if the concatenation point doesn 't  contains the monotonous string
Driver Code
Function to return the index for respective vowels to increase their count
Returns - 1 for consonants
Function to find the minimum length
Store the starting index of the current substring
Store the frequencies of vowels
If the current character is a vowel
Increase its count
Move start as much right as possible
Condition for valid substring
Driver code
Function to find the count of string with equal end after rotations
To store the final count
Traverse the string
If current character is same as the previous character then increment the count
Return the final count
Driver Code
Given string
Function call
Python3 program for the above approach
Initialise frequency array
Traverse the string
Update the frequency
Check for valid string
If frequency is non - zero
If freq is not equals to ( i + 1 ) , then return false
Return true
Given string str
Function to print all the non - repeating words from the two given sentences
Concatenate the two strings into one
Iterating over the whole concatenated string
Searching for the word in A . If while searching , we reach the end of the string , then the word is not present in the string
Initialise word for the next iteration
Driver code
Function to convert a number represented in International numeric system to Indian numeric system .
Find the length of the input string
Removing all the separators ( , ) from the input string
Reverse the input string
Declaring the output string
Process the input string
Add a separator ( , ) after the third number
Then add a separator ( , ) after every second number
Reverse the output string
Return the output string back to the main function
Driver code
Python3 program for the above approach
Function to check whether a number is prime or not
Function to check if a prime number can be expressed as sum of two Prime Numbers
If the N && ( N - 2 ) is Prime
Function to check semiPrime
Loop from 2 to sqrt ( num )
Increment the count of prime numbers
If num is greater than 1 , then add 1 to it
Return '1' if count is 2 else return '0
Function to make the Cypher string
Resultant string
Make string for the number N
Check for semiPrime
Traverse to make Cypher string
If index is odd add the current character
Else current character is changed
Check for sum of two primes
Traverse to make Cypher string
If index is odd then current character is changed
Else add the current character
If the resultant string is " " then print - 1
Else print the resultant string
Driver Code
Given number
Function call
Function to calculate maximum splits possible
Driver code
Function to find the required string
Length of the string
Iterate till half of the string
Replacing a non ' a ' char with 'a
Check if there is no ' a ' in string we replace last char of string by 'b
If the input is a single character
Driver Code
Function to find the Kth string in lexicographical order which consists of N - 2 xs and 2 ys
Iterate for all possible positions of left most Y
If i is the left most position of Y
Put Y in their positions
Driver code
Function call
Function to check whether str1 can be transformed to str2
To store the frequency of characters of string str3
Declare two pointers & flag
Traverse both the string and check whether it can be transformed
If both pointers point to same characters increment them
If the letters don 't match check  if we can find it in string C
If the letter is available in string str3 , decrement it 's  frequency & increment the ptr2
If letter isn 't present in str3[]  set the flag to false and break
If the flag is true and both pointers points to their end of respective strings then it is possible to transformed str1 into str2 , otherwise not .
Driver Code
Function Call
Python3 implementation of the approach
Function that returns ( num % 26 )
Initialize result
One by one process all digits of 'num
Function to return the decrypted string
To store the final decrypted answer
One by one check for each character if it is a numeric character
Modulo the number found in the string by 26
Driver code
Print the decrypted string
Function to find the maximum overlapping strings
Get the current character
Condition to check if the current character is the first character of the string T then increment the overlapping count
Condition to check previous character is also occurred
Update count of previous and current character
Condition to check the current character is the last character of the string T
Condition to check the every subsequence is a valid string T
Driver Code
Function Call
Python3 implementation to find the minimum number of operations to make two strings equal
Function to find out parent of an alphabet
Function to merge two different alphabets
Merge a and b using rank compression
Function to find the minimum number of operations required
Initializing parent to i and rank ( size ) to 1
We will store our answerin this list
Traversing strings
If they have different parents
Find their respective parents and merge them
Store this in our Answer list
Number of operations
Driver code
Two strings S1 and S2
Function Call
Function to calculate nth permutation of string
Creating an empty list
Subtracting 1 from N because the permutations start from 0 in factroid method
Loop to generate the factroid of the sequence
Loop to generate nth permutation
Remove 1 - element in each cycle
Final answer
Driver code
Function to generate a defanged version of IP address .
Loop to iterate over the characters of the string
Driver Code
Function used to calculate the longest prefix which is also a suffix
Traverse the string
Update the lps size
Returns size of lps
Function to calculate the length of longest palindromic substring which is either a suffix or prefix
Append a character to separate the string and reverse of the string
Reverse the string
Append the reversed string
Function to find the Longest palindromic string formed from concatenation of prefix and suffix of a given string
Calculating the length for which prefix is reverse of suffix
Append prefix to the answer
Store the remaining string
If the remaining string is not empty that means that there can be a palindrome substring which can be added between the suffix & prefix
Calculate the length of longest prefix palindromic substring
Reverse the given string to find the longest palindromic suffix
Calculate the length of longest prefix palindromic substring
If the prefix palindrome is greater than the suffix palindrome
Append the prefix to the answer
If the suffix palindrome is greater than the prefix palindrome
Append the suffix to the answer
Finally append the suffix to the answer
Return the answer string
Driver Code
Function to generate a string of length n with maximum possible alphabets each occuring odd number of times .
If n is odd
Add all characters from b - y
Append a to fill the remaining length
If n is even
Add all characters from b - z
Append a to fill the remaining length
Driver code
Function to move all ' x ' in the end
Store current character
Check if current character is not 'x
Recursive function call
Check if current character is 'x
Driver code
Python implementation to construct a string of length L such that each substring of length X has exactly Y distinct letters .
Initialize p equal to the ASCII value of a
Iterate till the length of the string
Driver code
Function to print the final position of the point after traversing through the given directions
Traversing through the given directions
If its north or south the point will move left or right
If its west or east the point will move upwards or downwards
Returning the final position
Driver Code
Python3 program for the above approach
Function to count the frequency of minimum character
Sort the string s
Return the count with smallest character
Function to count number of frequency of smallest character of string arr1 [ ] is less than the string in arr2 [ ]
To store the frequency of smallest character in each string of arr2
Traverse the arr2 [ ]
Count the frequency of smallest character in string s
Append the frequency to freq [ ]
Sort the frequency array
Traverse the array arr1 [ ]
Count the frequency of smallest character in string s
find the element greater than f
Find the count such that arr1 [ i ] < arr2 [ j ]
Print the count
Driver Code
Function Call
Function to find all lexicographically shortest palindromic substring
Array to keep track of alphabetic characters
Iterate to print all lexicographically shortest substring
Driver code
Python3 program to remove duplicate character from character array and print sorted order
Used as index in the modified string
Traverse through all characters
Check if str [ i ] is present before it
If not present , then add it to result .
Driver code
Python3 program to remove duplicate character from character array and prin sorted order
Used as index in the modified string
Create an empty hash table
Traverse through all characters from right to left
If current character is not in
Reverse the result string
Driver code
Function to count all the numbers which does not contain the digit ' M ' and is divisible by M
Storing all the distinct digits of a number
Checking if the two conditions are satisfied or not
Driver code
Lower Range
Upper Range
The digit
Python3 program to find longest string which is prefix string of at least two strings
Function to find max length of the prefix
Base case
Iterating over all the alphabets
Checking if char exists in current string or not
If atleast 2 string have that character
Recursive call to i + 1
Driver code
Initialising strings
Push strings into vectors .
Function to find the periodic string with minimum period
Print the S if it consists of similar elements
Find the required periodic with period 2
Driver Code
Python3 program to print array of string in reverse dictionary order using trie
Trie node
endOfWord is true if the node represents end of a word
Function will return the new node initialized NONE
Initialize null to the all child
Function will insert the string in a trie recursively
Create a new node
Recursive call for insertion of string
Make the endOfWord true which represents the end of string
Function call to insert a string
Function call with necessary arguments
Function to check whether the node is leaf or not
Function to display the content of trie
If node is leaf node , it indicates end of string , so a null character is added and string is displayed
Assign a null character in temporary string
check if NON NONE child is found add parent key to str and call the display function recursively for child node
Function call for displaying content
Driver code
After inserting strings , trie will look like root / \ a t | | n h | \ | s y e | | \ w i r | | | e r e | r
Python implementation to Find the total number of duplicate character in a range L to R for Q number of queries in a string S
Vector of vector to store position of all characters as they appear in string
Function to store position of each character
Inserting position of each character as they appear
Function to calculate duplicate characters for Q queries
Variable to count duplicates
Iterate over all 26 characters
Finding the first element which is less than or equal to L
Check if first pointer exists and is less than R
Incrementing first pointer to check if the next duplicate element exists
Check if the next element exists and is less than R
Driver Code
Function to count the minimum number of groups formed in the given string s
Initializing count as one since the string is not NULL
Comparing adjacent characters
Driver Code
Function to return the value of a character
Function to find the maximum product sub
To store subs
Check if current product is maximum possible or not
If product is 0
Return the sub with maximum product
Driver code
Function call
Function to find the sum of the minimum and the maximum difference between two given strings
Variables to store the minimum difference and the maximum difference
Iterate through the length of the as both the given strings are of the same length
For the maximum difference , we can replace " + " in both the strings with different char
For the minimum difference , we can replace " + " in both the strings with the same char
Driver code
Function to find the minimum number of deletions required to make the occurrences of the given character K continuous
Find the first occurrence of the given letter
Iterate from the first occurrence till the end of the sequence
Find the index from where the occurrence of the character is not continuous
Update the answer with the number of elements between non - consecutive occurrences of the given letter
Update the count for all letters which are not equal to the given letter
Return the count
Driver code
Calling the function
Calling the function
Function to find the maximum base possible for the number N
Function to find the decimal equivalent of the number
Condition to check if the number is convertible to another base
Function to check that the array can correspond to a number X
counter to count the numbers those are convertible to X
Loop to iterate over the array
Convert the current string to every base for checking whether it will correspond to X from any base
Condition to check if every number of the array can be converted to X
Driver Code
The set of strings in base from [ 2 , 36 ]
Function to find the count of strings less than given string lexicographically
Find length of string s
Looping over the string characters and finding strings less than that character
Function to find the count of same length Strings that exists lexicographically in between two given Strings
Count string less than S1
Count string less than S2
Total strings between S1 and S2 would be difference between the counts - 1
If S1 is lexicographically greater than S2 then return 0 , otherwise return the value of totalString
Driver code
Function to check whether a character is vowel or not
Returns true if x is vowel
Function to find the longest subsequence which contain all vowels
Length of the string
Iterating through the string
Checking if the character is a vowel or not
If it is a vowel , then add it to the final string
Driver code
Function to find the maximum repeated frequency of the characters in the given string
Hash - Array to store the frequency of characters
Loop to find the frequency of the characters
Hash map to store the occurrence of frequencies of characters
Loop to find the maximum Repeated frequency from hash - map
Driver Code
Function Call
Function to find the required string
Find the hamming distance between A and B
If distance is odd , then resultant string is not possible
Make the resultant string
To store the final string
Pick k characters from each string
Pick K characters from string B
Pick K characters from string A
Append the res characters from string to the resultant string
Print the resultant string
Driver 's Code 
Function to find the resultant string
Function to find the maximum length suffix in the string
Length of the string
Map to store the number of occurrence of character
Loop to iterate string from the last character
Condition to check if the occurrence of each character is less than given number
Condition when character cannot be deleted
Longest suffix
Driver Code
Function call
Function to find the XOR of the two Binary Strings
Loop to iterate over the Binary Strings
If the Character matches
Driver Code
Function to print the kth largest string
loop to iterate through series
total takes the position of second y
i takes the position of first y
calculating first y position
calculating second y position from first y
print all x before first y
print first y
print all x between first y and second y
print second y
print x which occur after second y
Driver code
Function to return the largest N - digit number in Octal Number System
Append '7' N times
Function to return the smallest N - digit number in Octal Number System
Append '0' ( N - 1 ) times to 1
Function to print the largest and smallest N - digit Octal number
Driver code
Function Call
Function to count number of substring whose decimal equivalent is greater than or equal to K
Left pointer of the substring
Right pointer of the substring
Loop to maintain the last occurrence of the 1 in the string
Variable to count the substring
Loop to maintain the every possible end index of the substring
Loop to find the substring whose decimal equivalent is greater than or equal to K
Condition to check no of bits is out of bound
Driver Code
Python3 program to find if str1ing is a perfect cube or not .
Finding ASCII values of each character and finding its sum
Find the cube root of sum
Check if sum is a perfect cube
Driver code
Function to find the XOR of ASCII value of characters in str1ing
store value of first character
Traverse str1ing to find the XOR
Return the XOR
Driver code
Function that prints the camel case pattern matching
Map to store the hashing of each words with every uppercase letter found
Traverse the words array that contains all the string
Initialise str as empty
length of string words [ i ]
For every uppercase letter found map that uppercase to original words
Traverse the map for pattern matching
If pattern matches then print the corresponding mapped words
If word not found print " No ▁ match ▁ found "
Driver 's Code
Pattern to be found
Function call to find the words that match to the given pattern
Python3 implementation for Custom Encryption and Decryption of String
Function to encrypt the
Matrix to generate the Encrypted String
Fill the matrix row - wise
Loop to generate encrypted
Function to decrypt the
Matrix to generate the Encrypted String
Fill the matrix column - wise
Loop to generate decrypted
Driver Code
Encryption of String
Decryption of String
Function to check if first character is Capital
Function to check
Driver function
Function to to check that a string contains all vowels
Hash Array of size 5 such that the index 0 , 1 , 2 , 3 and 4 represent the vowels a , e , i , o and u
Loop the string to mark the vowels which are present
Loop to check if there is any vowel which is not present in the string
Function to to check that a string contains all vowels
Driver Code
Function to find the smallest odd number whose sum of digits is even from the given string
Converting the given string to a list of digits
An empty array to store the digits
For loop to iterate through each digit
If the given digit is odd then the digit is appended to the array b
Sorting the list of digits
If the size of the list is greater than 1 then a 2 digit smallest odd number is returned Since the sum of two odd digits is always even
Else , - 1 is returned
Driver code
Function to convert a number into odd number such that digit - sum is odd
Loop to find any first two odd number such that their sum is even and number is odd
Print the result
Driver Code
Function to find the longest palindromic from given array of strings
Loop to find the pair of strings which are reverse of each other
Loop to find if any palindromic is still left in the array
Update the answer with all strings of pair1
Update the answer with palindromic s1
Update the answer with all strings of pair2
Driver Code
Function to return the word of the corresponding digit
For digit 0
For digit 1
For digit 2
For digit 3
For digit 4
For digit 5
For digit 6
For digit 7
For digit 8
For digit 9
Function to iterate through every digit in the given number
Finding each digit of the number
Print the digit in words
Driver code
Python3 implementation of above approach
Function to calculate the Jaro Similarity of two s
If the s are equal
Length of two s
Maximum distance upto which matching is allowed
Count of matches
Hash for matches
Traverse through the first
Check if there is any matches
If there is a match
If there is no match
Number of transpositions
Count number of occurrences where two characters match but there is a third matched character in between the indices
Find the next matched character in second
Return the Jaro Similarity
Driver code
Prjaro Similarity of two s
Function to replace and remove
Two pointer start and end points to beginning and end position in the string
If start is having Z find X pos in end and replace Z with another character
Find location for having different character instead of Z
If found swap character at start and end
Else increment start Also checkin for X at start position
Driver code
Function to check if Binary string can be made equal
Counting occurence of zero and one in binary string
From above observation
Driver code
Python3 implementation of the above approach
Function to find the count of the number of strings
Loop to iterate over the frequency of character of string
Reduce the frequency of current element
Recursive call
Backtrack
Function to count the number of non - empty sequences
store the frequency of each character
Maintain the frequency
Driver Code
Function Call
Function to return the minimum swaps required
To store the final answer
To store the count of one and zero
Loop from end of the string
If s [ i ] = 1
If s [ i ] = 0
If c_zero = k
If the result can 't  be achieved
Return the final answer
Driver code
Structure Representing the Node in the Binary tree
Function to perform a level order insertion of a Node in the Binary tree
If the root is empty , make it point to the Node
In case there are elements in the Binary tree , perform a level order traversal using a Queue
If the left child does not exist , insert the Node as the left child
In case the right child does not exist , insert the Node as the right child
Function to print the level order traversal of the Binary tree
Function to check if the character is a vowel or not .
Function to remove the vowels in the Binary tree
Declaring the root of the tree
If the given character is not a vowel , add it to the Binary tree
Driver code
Function to return the count of the required substrings
To store the final answer
Loop to find the answer
Condition to update the answer
Driver code
Function to return the length of the smallest subdivisible by 2 ^ k
To store the final answer
Left pointer
Right pointer
Count of the number of zeros and ones in the current substring
Loop for two pointers
Condition satisfied
Updated the answer
Update the pointer and count
Update the pointer and count
Driver code
Function to return the largest substring divisible by 2
While the last character of the string is '1' , pop it
If the original string had no '0
Driver code
Python3 implementation of the approach
Function that returns true if both the arrays have equal values
Test the equality
Function that returns true if any permutation of X exists as a sub in Y
Base case
To store cumulative frequency
Finding the frequency of characters in X
Finding the frequency of characters in Y upto the length of X
Equality check
Two pointer approach to generate the entire cumulative frequency
Remove the first character of the previous window
Add the last character of the current window
Equality check
Driver Code
Function to return the modified string
Push the index of the current opening bracket
Reverse the substarting after the last encountered opening bracket till the current character
To store the modified string
Driver code
Python3 implementation of the approach
Function to update the freq [ ] array to store the frequencies of all the characters of strr
Update the frequency of the characters
Function to return the maximum count of times patt can be formed using the characters of strr
To store the frequencies of all the characters of strr
To store the frequencies of all the characters of patt
To store the result
For every character
If the current character doesn 't appear in patt
Update the result
Driver code
Python3 implementation of the approach
Function to return the minimum number that can be formed after removing the digits which is a multiple of 4
For every digit of the number
Check if the current digit is divisible by 4
If any subsequence of two digits is divisible by 4
Driver code
Function that returns true if the string can be made equal after one swap
A and B are new a and b after we omit the same elements
Take only the characters which are different in both the strings for every pair of indices
If the current characters differ
The strings were already equal
If the lengths of the strings are two
If swapping these characters can make the strings equal
Driver code
Function to find the mid alphabets
For every character pair
Get the average of the characters
Driver code
Python 3 implementation of the approach
Function that returns true if ch is a vowel
pre [ i ] will store the count of vowels in the substring str [ 0. . . i ]
Fill the pre [ ] array
If current character is a vowel
If its a consonant
For every query
Find the count of vowels for the current query
Driver code
Function to return the sum of the digits of n
Function that return true if the decoded string is divisible by 6
To store the sum of the digits
For each character , get the sum of the digits
If the sum of digits is not divisible by 3
Get the last digit of the number formed
If the last digit is not divisible by 2
Driver code
Python3 implementation of the approach
Function that returns true if s is divisible by m
Map to map characters to real value
To store the remainder at any stage
Find the remainder
Check the value of remainder
Driver code
Function to return the required count
If the splitting is not possible
To store the count of zeroes
Counting the number of zeroes
Return the final answer
Driver code
Python3 implementation of the approach
Function to return the modified string
Map to store the next character on the keyboard for every possible lowercase character
Update the string
Driver code
Python 3 implementation of the approach
returns character at index pos - 1
Driver Code
Python 3 implementation of the approach
Driver Code
stick [ i ] stores the count of sticks required to represent the digit i
Function to return the count of matchsticks required to represent the given number
For every digit of the given number
Add the count of sticks required to represent the current digit
Driver code
Function to return the value of ( str % k )
pwrTwo [ i ] will store ( ( 2 ^ i ) % k )
To store the result
If current bit is 1
Add the current power of 2
Driver code
Python3 implementation of the approach
Function to return the count of all possible valid strings
Initialise and fill 0 's in the dp array
Base cases
dp [ i ] [ j ] = number of possible strings such that '1' just appeared consecutively j times upto the ith index
Taking previously calculated value
Taking all possible cases that can appear at the Nth position
Driver code
Function to return maximum number that can be formed from the string
To store the frequency of ' z ' and ' n ' in the given string
Number of zeroes
Number of ones
To store the required number
Add all the ones
Add all the zeroes
Driver code
Function to print the unique sub - string of length n
set to store the strings
if the size of the string is equal to 1 then insert
inserting unique sub - string of length L
Printing the set of strings
Driver Code
Function calling
Function to return the binary representation of n
Array to store binary representation
Counter for binary array
Storing remainder in binary array
To store the binary representation as a string
Function to return the frequency of pat in the given txt
A loop to slide pat [ ] one by one
For current index i , check for pattern match
If pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]
Function to find the occurrence of the given pattern in the binary representation of elements of arr [ ]
For every element of the array
Find its binary representation
Print the occurrence of the given pattern in its binary representation
Driver code
Function that returns true if the sequence can be balanced by changing the position of at most one bracket
Odd length string can never be balanced
Add ' ( ' in the beginning and ' ) ' in the end of the string
If its an opening bracket then append it to the temp string
If its a closing bracket
There was an opening bracket to match it with
No opening bracket to match it with
Sequence is balanced
Driver code
Function to find the winner of the game
To store the strings for both the players
If the index is even
Append the current character to player A 's string
If the index is odd
Append the current character to player B 's string
Sort both the strings to get the lexicographically smallest string possible
Copmpare both the strings to find the winner of the game
Driver code
Function to return the count of required indices
Solution doesn 't exist
Find the length of the longest common prefix of strings
Find the length of the longest common suffix of strings
If solution does not exist
Return the count of indices
Driver code
Function to expand and print the given string
Subtract '0' to convert char to int
Characters within brackets
Expanding
Reset the variables
Driver code
Python3 implementation of the approach
Function to return the largest substring in str2 which is a prefix of str1
To store the index in str2 which matches the prefix in str1
While there are characters left in str1
If the prefix is not found in str2
Remove the last character
Prefix found
No substring found in str2 that matches the prefix of str1
Driver code
Function to round the given number to the nearest multiple of 10
If string is empty
If the last digit is less then or equal to 5 then it can be rounded to the nearest ( previous ) multiple of 10 by just replacing the last digit with 0
Set the last digit to 0
Print the updated number
The number hast to be rounded to the next multiple of 10
To store the carry
Replace the last digit with 0
Starting from the second last digit , add 1 to digits while there is carry
While there are digits to consider and there is carry to add
Get the current digit
Add the carry
If the digit exceeds 9 then the carry will be generated
Else there will be no carry
Update the current digit
Get to the previous digit
If the carry is still 1 then it must be inserted at the beginning of the string
Prin the rest of the number
Driver code
Function that returns true if the passed character is a digit
Function to return the next index of a non - digit character in the string starting at the index i ( returns - 1 ifno such index is found )
If the character at index i is a digit then skip to the next character
If no such index was found
Function to append str the given number of times to the StringBuilder
Function to return the string after performing the given operations
To build the resultant string
Index of the first non - digit character in the string
While there are substrings that do not consist of digits
Find the ending of the substring
Starting index of the number
If no digit appears after the current substring
Find the index at which the current number ends
Parse the number from the substring
Repeat the current substring required number of times
Find the next non - digit character index
Return the resultant string
Driver code
A simple recursive approach to replace all pi in a given function with "3.14" Firstly function is declared we don 't need any helper function one function is enough
If the 0 th and 1 st element of string are p and i we have to handle them for rest we have to call recursion it will give the result
Smalloutput is a variable used to store recursion result
And we have to add the recursion result with the first part we handled and return the answer
If not then we have to call recursion from 1 st to all elements then add recursion result to 1 st element and return it
Driver code
Function call
Function that returns true if c is a vowel
Function that returns true if all the vowels in the given string are only at prime indices
Create a boolean array " prime [ 0 . . n ] " and initialize all entries in it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
0 and 1 are not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .
For every character of the given String
If current character is vowel and the index is not prime
Driver code
python3 implementation of the approach
Function to return the lexicographically smallest after swapping all the occurrences of any two characters
To store the first index of every character of str
Store the first occurring index every character
If current character is appearing for the first time in str
Starting from the leftmost character
For every character smaller than ord ( str [ i ] )
If there is a character in str which is smaller than ord ( str [ i ] ) and appears after it
If the required character pair is found
If swapping is possible
Characters to be swapped
For every character
Replace every ch1 with ch2 and every ch2 with ch1
Driver code
Function to find the longest subof 0 's
To store size of the string
To store the required answer
Find the longest subof 0 's
Run a loop upto s [ i ] is zero
Check the conditions
Driver code
Function call
Function to find the number of occurrences of a character at position P upto p - 1
Return the required count
Driver code
Function call
Function to find the number of occurrences of a character at position P upto p - 1
Iterate over the string
Store the Occurrence of same character
Increase its frequency
Return the required count
Driver code
Function call
Python 3 implementation of the approach
Function that returns true if the mapping is possible
Both the strings are of un - equal lengths
To store the frequencies of the characters in both the string
Update frequencies of the characters
For every character of s1
If current character is not present in s1
Find a character in s2 that has frequency equal to the current character 's  frequency in s1
If such character is found
Set the frequency to - 1 so that it doesn 't get picked again
Set found to true
If there is no character in s2 that could be mapped to the current character in s1
Driver code
Set to store strings and aduplicates
Recursive function to generate the required strings
If currentis part of the result
Insert it into the set
If character from str1 can be chosen
If character from str2 can be chosen
Function to print the generated strings from the set
Driver code
Recursive function to generate the required strings
If length of the current string is equal to the length of the given strings then the current string is part of the result
Choosing the current character from the string a
Choosing the current character from the string b
Driver code
Third argument is an empty string that we will be appended in the recursion calls Fourth arguments is the length of the resultant string so far
Function to get all the valid ip - addresses
If index greater than givenString size and we have four block
Remove the last dot
Add ip - address to the results
To add one index to ip - address
Select one digit and call the same function for other blocks
Backtrack to generate another possible ip address So we remove two index ( one for the digit and other for the dot ) from the end
Select two consecutive digits and call the same function for other blocks
Backtrack to generate another possible ip address So we remove three index from the end
Select three consecutive digits and call the same function for other blocks
Backtrack to generate another possible ip address So we remove four index from the end
Driver code
Fill result vector with all valid ip - addresses
Print all the generated ip - addresses
Function to return the count of required non - overlapping sub - strings
To store the required count
If "010" matches the sub - string starting at current index i
If "101" matches the sub - string starting at current index i
Driver code
Function to return the count of distinct characters in all the distinct sub - strings of the given string
To store all the sub - strings
To store the current sub - string
To store the characters of the current sub - string
If current sub - string hasn 't  been stored before
Insert it into the set
Update the count of distinct characters
Driver code
Function to find the partition of the string such that both parts have at least k different characters
Length of the string
To check if the current character is already found
Count number of different characters in the left part
If current character is not already found , increase cnt by 1
If count becomes equal to k , we 've  got the first part, therefore,  store current index and break the loop
Increment i by 1
Clear the map
Assign cnt as 0
If the current character is not already found , increase cnt by 1
If cnt becomes equal to k , the second part also have k different characters so break it
If the second part has less than k different characters , then print " Not ▁ Possible "
Otherwise print both parts
Driver code
Function call
Function that returns true if c is a vowel
Function to return the count of sub - strings that contain every vowel at least once and no consonant
Map is used to store count of each vowel
Start index is set to 0 initially
If substring till now have all vowels atleast once increment start index until there are all vowels present between ( start , i ) and add n - i each time
Function to extract all maximum length sub - strings in s that contain only vowels and then calls the countSubstringsUtil ( ) to find the count of valid sub - strings in that string
If current character is a vowel then append it to the temp string
The sub - string containing all vowels ends here
If there was a valid sub - string
Reset temp string
For the last valid sub - string
Driver code
Function to remove adjacent duplicates
Iterate for every character in the string
If ans string is empty or its last character does not match with the current character then append this character to the string
Matches with the previous one
Return the answer
Driver Code
Function to resturn the after reversing the individual words
Pointer to the first character of the first word
If the current word has ended
Pointer to the last character of the current word
Reverse the current word
Pointer to the first character of the next word
Driver code
Function to reverse the words of the given sentence
Create an empty character array stack
Push words into the stack
Get the words in reverse order
Driver code
Function to count the number of substrings which contains the character C exactly K times
left and right counters for characters on both sides of subwindow
left and right pointer on both sides of subwindow
Initialize the frequency
result and Length of string
initialize the left pointer
initialize the right pointer
traverse all the window substrings
counting the characters on leftSide of subwindow
counting the characters on rightSide of subwindow
Add the possible substrings on both sides to result
Setting the frequency for next subwindow
reset the left , right counters
Driver code
Python3 implementation of the approach
Function to return the total required sub - sequences
Find ways for all values of x
x + 1
Removing all unnecessary digits
Prefix Sum Array for X + 1 digit
Sum of squares
Previous sum of all possible pairs
To find sum of multiplication of all possible pairs
To prevent overcounting
Adding ways for all possible x
Driver code
Function that returns true if it is possible to make a binary string consisting of l 0 ' s , ▁ m ▁ 1' s , x "01" sub - sequences and y "10" sub - sequences
Driver code
Python3 implementation of the approach
Function to return the count of required pairs of characters
Length of the string
To store the frequency of each character
Update the frequency of each character
To store the required count of pairs
If ascii value difference is zero
If there exists similar characters more than once
If there exits characters with ASCII value difference as k
Return the required count
Driver code
Function that returns true if s [ i ... j ] + s [ k ... l ] + s [ p ... q ] is a palindrome
Function to return the count of valid sub - strings
To store the count of required sub - strings
For choosing the first sub - string
For choosing the second sub - string
For choosing the third sub - string
Check if the concatenation is a palindrome
Driver code
Python3 implementation of the approach
Function that returns true if n is prime
Function to return the sum of the ascii values of the characters which are present at prime positions
To store the sum
For every character
If current position is prime then add the ASCII value of the character at the current position
Driver code
Python3 implementation of the approach
Function that returns if the string x is a pangram
Function to return the count of nodes which make pangram with the sub - tree nodes
Function to perform dfs and update the nodes such that weight [ i ] will store the weight [ i ] concatenated with the weights of all the nodes in the sub - tree
Driver code
Weights of the nodes
Edges of the tree
Python3 implementation of the approach
Function that returns true if the string contains unique characters
Function to perform dfs
If weight of the current node node contains unique characters
Driver code
Weights of the node
Edges of the tree
Function that returns true if s contains two non overlapping sub strings " geek " and " keeg "
If " geek " and " keeg " are both present in s without over - lapping and " keeg " starts after " geek " ends
Driver code
Maximum distinct characters possible
Function to return the last non - repeating character
To store the frequency of each of the character of the given string
Update the frequencies
Starting from the last character
Current character
If frequency of the current character is 1 then return the character
All the characters of the string are repeating
Driver code
Function to return the minimum number of operations on a binary string such that it gives 10 ^ A as remainder when divided by 10 ^ B
Initialize result
Loop through last b digits
Driver code
Python3 implementation of the approach
Function to calculate the position of characters
Performing AND operation with number 31
Driver code
Simple Python program to print all permutations of a string that follow given constraint
Check if current permutation is valid
Recursively generate all permutation
Driver Code
Function to find the length of the longest substring
initializing the variables
checking palindrome of size 2 example : aa
checking palindrome of size 3 example : aba
else : incrementing length of substring
If there exits single character then it is always palindrome
Driver Code
Function to return the lexicographically smallest palindrome that can be made from the given string after replacing the required characters
If characters are missing at both the positions then substitute it with 'a
If only str1 [ j ] = ' * ' then update it with the value at str1 [ i ]
If only str1 [ i ] = ' * ' then update it with the value at str1 [ j ]
If characters at both positions are not equal and != ' * ' then the string cannot be made palindrome
Return the required palindrome
Driver code
Function to return the score for the given binary string
Traverse through string character
Initialize current chunk 's size
Get current character
Calculate total chunk size of same characters
Add / subtract pow ( chunkSize , 2 ) depending upon character
Return the score
Driver code
Function to return the count of required sub - strings
Left and right counters for characters on both sides of sub - string window
Left and right pointer on both sides of sub - string window
Initialize the frequency
Result and length of string
Initialize the left pointer
Initialize the right pointer
Traverse all the window sub - strings
Counting the characters on left side of the sub - string window
Counting the characters on right side of the sub - string window
Add the possible sub - strings on both sides to result
Setting the frequency for next sub - string window
Reset the left and right counters
Driver code
Python3 implementation of the approach
Function to return the length of the longest palindrome that can be formed using the characters in the range [ l , r ]
0 - based indexing
Marks if there is an odd frequency character
Length of the longest palindrome possible from characters in range
Traverse for all characters and count their frequencies
Find the frequency in range 1 - r
Exclude the frequencies in range 1 - ( l - 1 )
If frequency is odd , then add 1 less than the original frequency to make it even
Else completely add if even
If any odd frequency character is present then add 1
Function to pre - calculate the frequencies of the characters to reduce complexity
Iterate and increase the count
Create a prefix type array
Driver code
Pre - calculate prefix array
Perform queries
Python implementation of the approach
Function to return the number of occurrences of
To store the indices of strings in the array
If current string doesn 't  have an entry in the map  then create the entry
If the given string is not present in the array
If the given string is present in the array
Driver Code
Function that returns true if str1 is a valid identifier
If first character is invalid
Traverse the for the rest of the characters
is a valid identifier
Driver code
Function that returns true if all the 1 's in the binary s are equidistant
Initialize vector to store the position of 1 's
Store the positions of 1 's
Size of the position vector
If condition isn 't satisfied
Driver code
Python3 program to capitalise the first and last character of each word in a string .
Create an equivalent char array of given string
k stores index of first character and i is going to store index of last character .
Check if the character is a small letter If yes , then Capitalise
Driver code
Function to return the number of players
Initialize cnt as 0
Iterate in the string
Check for numbers other than x
Driver code
Python3 program to print the first and last character of each word in a String
Function to print the first and last character of each word .
If it is the first word of the string then print it .
If it is the last word of the string then also print it .
If there is a space print the successor and predecessor to space .
Driver code
Function to find longest prefix suffix
To store longest prefix suffix
Length of the previous longest prefix suffix
lps [ 0 ] is always 0
Loop calculates lps [ i ] for i = 1 to n - 1
( pat [ i ] != pat [ Len ] )
If Len = 0
Function to find the longest substring which is prefix as well as a sub - of s [ 1. . . n - 2 ]
Find longest prefix suffix
If lps of n - 1 is zero
At any position lps [ i ] equals to lps [ n - 1 ]
If answer is not possible
Driver code
function call
Python3 implementation of the approach
Function to return the bitmask for the string
Function to return the count of pairs
bitMask [ i ] will store the count of strings from the array whose bitmask is i
To store the count of pairs
MAX - 1 = 63 i . e . 111111 in binary
arr [ i ] cannot make s pair with itself i . e . ( arr [ i ] , arr [ i ] )
Driver code
Function to return the count of required occurrence
To store the count of occurrences
Check first four characters from ith position
Variables for counting the required characters
Check the four contiguous characters which can be reordered to form 'clap
If all four contiguous characters are present then increment cnt variable
Driver code
Function to return the count of same pairs
Function to return total number of strings which satisfy required condition
Dictionary changed will store strings with wild cards Dictionary same will store strings that are equal
Iterating for all strings in the given array
If we found the string then increment by 1 Else it will get default value 0
Iterating on a single string
Incrementing the string if found Else it will get default value 0
Return counted pairs - equal pairs
Driver code
Function to return the number of ways to form the sub - string
Initialize a hash - table with 0
Iterate in the string and count the frequency of characters that do not lie in the range L and R
Out of range characters
Stores the final number of ways
Iterate for the sub - string in the range L and R
If exists then multiply the number of ways and decrement the frequency
If does not exist the sub - string cannot be formed
Return the answer
Driver code
Function to print kth character of String s after decrypting it
Get the length of string
Initialise pointer to character of input string to zero
Total length of resultant string
Traverse the string from starting and check if each character is alphabet then increment total_len
If total_leg equal to k then return string else increment i
Parse the number
Update next_total_len
Get the position of kth character
Position not found then update position with total_len
Recursively find the kth position
Else update total_len by next_total_len
Return - 1 if character not found
Driver code
Python 3 program to check if the average character is present in the string or not
Checks if the character is present
Get the length of string
Iterate from i = 0 to the length of the string to check if the character is present in the string
Finds the average character of the string
Calculate the sum of ASCII values of each character
Calculate average of ascii values
Convert the ASCII value to character and return it
Driver code
Get the average character
Check if the average character is present in string or not
Function to print the character sequence for the given ASCII sentence
Append the current digit
If num is within the required range
Convert num to char
Reset num to 0
Driver code
Function to return the count of distinct state codes
Insert every sub - string of length 2 in the set
Return the size of the set
Driver code
Array to store how many times a button has to be pressed for typing a particular character
Function to return the count of buttons pressed to type the given string
Count the key presses
Return the required count
Driver code
Function that returns true if s1 is equal to reverse of s2
If both the strings differ in length
In case of any character mismatch
Function to return the first word whose reverse is also present in the array
Check every string
Pair with every other string appearing after the current string
If first string is equal to the reverse of the second string
No such string exists
Driver code
Function that returns true if sub - string of length k starting at index i is also a prefix of the string
k length sub - string cannot start at index i
Character mismatch between the prefix and the sub - string starting at index i
Function that returns true if str is K - periodic
Check whether all the sub - strings str [ 0 , k - 1 ] , str [ k , 2 k - 1 ] ... are equal to the k length prefix of the string
Driver code
Function to return the minimum letters required to make a total of n
Driver code
Function to find maximum length even word
To store length of current word .
To store length of maximum length word .
To store starting index of maximum length word .
If current character is space then word has ended . Check if it is even length word or not . If yes then compare length with maximum length found so far .
Set currlen to zero for next word .
Update length of current word .
Check length of last word .
If no even length word is present then return - 1.
Driver code
Function to find minimum length substring having exactly k distinct character .
Starting index of sliding window .
Ending index of sliding window .
To store count of character .
To store count of distinct character in current sliding window .
To store length of current sliding window .
To store minimum length .
To store starting index of minimum length substring .
Increment count of current character If this count is one then a new distinct character is found in sliding window .
If number of distinct characters is is greater than k , then move starting point of sliding window forward , until count is k .
Remove characters from the beginning of sliding window having count more than 1 to minimize length .
Compare length with minimum length and update if required .
Return minimum length substring .
Driver code
Function to return the minimum number of characters of the given binary string to be replaced to make the string alternating
If there is 1 at even index positions
If there is 0 at odd index positions
Driver code
Function to return the count of deletions of sub - strings "01" or "10"
To store the count of 0 s and 1 s
Driver code
Function to return the modified string
Store original string
Remove all white spaces
To store the resultant string
Traverse the string
Group upper case characters
Group numeric characters
Group arithmetic operators
Return the resultant string
Driver code
Function to return the minimum number of pre - processing moves required on string A
Length of the given strings
To store the required answer
Run a loop upto n / 2
To store frequency of 4 characters
If size is 4
If size is 3
If size is 2
If n is odd
Driver code
This function returns the least lexicogr aphical string obtained from its two halves
Base Case - If string size is 1
Divide the string into its two halves
Form least lexicographical string
Driver Code
Function to check if the character is vowel or not
Function that checks if a string can be converted to another string
Find length of string
If length is not same
Iterate for every character
If both vowel
Both are consonants
Driver Code
Function to generate and print the required string
More ' b ' , append " bba "
More ' a ' , append " aab "
Equal number of ' a ' and ' b ' append " ab "
Driver code
Function to return the count of valid strings
Set to store indices of valid strings
Find the maximum digit for current position
Add indices of all the strings in the set that contain maximal digit
Return number of strings in the set
Driver code
Function to return the lexicographically largest sub - sequence of s
Get the max character from the string
Use all the occurrences of the current maximum character
Repeat the steps for the remaining string
Driver code
Function that returns true if the equation is valid
If it is an integer then add it to another string array
Evaluation of 1 st operator
Evaluation of 2 nd operator
Evaluation of 3 rd operator
If the LHS result is equal to the RHS
Driver code
Function to return the count of sub - strings of str that are divisible by k
Take all sub - strings starting from i
If current sub - string is divisible by k
Return the required count
Driver code
Function to return Colour Combination
Check for B * G = Y
Check for B * Y = G
Check for Y * G = B
Driver Code
Function to reverse the middle x characters in a str1ing
Find the position from where the characters have to be reversed
Print the first n characters
Print the middle x characters in reverse
Print the last n characters
Driver code
Function to count numbers
Count the number of ' a ' , ' b ' and ' c ' in string
If equal previously
If not a multiple of 3
Increase the number of a ' s ▁ by ▁ ▁ removing ▁ extra ▁ ' b ' and c
Check if it is ' b ' and it more than n / 3
Check if it is ' c ' and it more than n / 3
Increase the number of b ' s ▁ by ▁ ▁ removing ▁ extra ▁ ' c
Check if it is ' c ' and it more than n / 3
Increase the number of c 's from back
Check if it is ' a ' and it more than n / 3
Increase the number of b 's from back
Check if it is ' a ' and it more than n / 3
Increase the number of c 's from back
Check if it is ' b ' and it more than n / 3
Driver Code
Function to return the count of steps required to move from i to j
Starting from i + 1
Count of steps
Current character
If current character is different from previous
Increment steps
Update current character
Return total steps
Function to return the minimum number of steps required to reach j from i
Swap the values so that i <= j
Steps to go from i to j ( left to right )
While going from i to j ( right to left ) First go from i to 0 then from ( n - 1 ) to j
If first and last character is different then it 'll add a step to stepsToLeft
Return the minimum of two paths
Driver code
Python3 implementation of the approach
Function to return the count of valid sub - strings
Store all characters of anotherStr in a direct index table for quick lookup .
To store distinct output substrings
Traverse through the given string and one by one generate substrings beginning from s [ i ] .
One by one generate substrings ending with s [ j ]
If character is illegal
If current substring is valid
If current substring is invalid , adding more characters would not help .
Return the count of distinct sub - strings
Driver code
Python3 program to count the number of pairs of balanced parentheses
Function to count the number of pairs
Hashing function to count the opening and closing brackets
Traverse for all bracket sequences
Get the string
Counts the opening and closing required
Traverse in the string
If it is a opening bracket
If openings are there , then close it
else : Else increase count of closing
If requirements of openings are there and no closing
If requirements of closing are there and no opening
Perfect
Divide by two since two perfect makes one pair
Traverse in the open and find corresponding minimum
Driver Code
Function to return the original string after decryption
Stores the decrypted string
If length is odd
Step counter
Starting and ending index
Iterate till all characters are decrypted
Even step
Odd step
If length is even
Step counter
Starting and ending index
Even step
Odd step
Reverse the decrypted string
Driver Code
Function to return the modified string
Traverse through the remaining characters in the string
If the current and the previous characters are not in the same case then take the character
Driver code
Function to return the total cost required to make the string Pangram
Mark all the alphabets that occurred in the string
Calculate the total cost for the missing alphabets
Driver Code
Function to insert * at desired position
Append current character
If we reached last character
If next character is same , append '*
Driver code
Function to return max possible operation of the given type that can be performed on str
Increment count of sub - sequence ' gk ' , if ' g ' is available
Increment count of sub - sequence ' gks ' if sub - sequence ' gk ' appeared previously
Return the count of sub - sequence 'gks
Driver code
Function to return the frequency array for the given string
Function to return the required count
Add frequencies of the even appearing characters
Count of the characters that appeared odd number of times
If there are no characters with odd frequency
If there are no characters with even frequency
Only a single character with odd frequency
More than 1 character with odd frequency string isn 't a palindrome
All odd appearing characters can also contribute to the even length palindrome if one character is removed from the frequency leaving it as even
If k palindromes are possible where k is the number of characters with odd frequency
Current character can no longer be an element in a string other than the mid character
If current character has odd frequency > 1 take two characters which can be used in any of the parts
Update the frequency
If not possible , then every character of the string will act as a separate palindrome
Driver code
Function to print the required pattern
Print the unmodified string
Reverse the string
Replace the first and last character by ' * ' then second and second last character and so on until the string has characters remaining
Driver code
Function that returns true if n is prime
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function that returns true if c is a vowel
Function that returns true if the count of vowels in word is prime
If count of vowels is prime
Driver code
Function to print the expansion of the string
Take sub - string from i to n - 1
Print the sub - string
Driver code
Python3 program to solve the logical expression .
Function to evaluate the logical expression
traversing string from the end .
for NOT operation
for AND and OR operation
Driver code
Python3 program to find number of substrings of length k whose sum of ASCII value of characters is divisible by k
Finding length of string
finding sum of ASCII value of first substring
Using sliding window technique to find sum of ASCII value of rest of the substring
checking if sum is divisible by k
Driver code
Function to return the modified string
Count number of 'x
min ( x , y ) number of ' x ' and ' y ' will be deleted
Driver Code
Function to return a string which when repeated exactly k times gives a permutation of s
size of string
to frequency of each character
get frequency of each character
to store final answer
check if frequency is divisible by k
add to answer
if frequency is not divisible by k
Driver code
function call
Python3 code to find the maximum length of sub - string ( of even length ) which can be arranged into a Palindrome
function that returns true if the given sub - string can be arranged into a Palindrome
This function returns the maximum length of the sub - string ( of even length ) which can be arranged into a Palindrome
If we reach end of the string
if string is of even length
if string can be arranged into a palindrome
Even length sub - string
Check if current sub - string can be arranged into a palindrome
Odd length sub - string
Driver code
Function to find the minimum deletions
Array to store the occurrences of each characters
Length of the string
ASCII of the character
Increasing the frequency for this character
Choosing two character
Finding the minimum deletion
Driver code
Function to count the number of characters whose ascii value not in range [ l , r ]
Initializing the count to 0
using map to pra character only once
Increment the count if the value is less
return the count
Driver Code
Function to return final positions of the boxes
Populate forces going from left to right
Populate forces going from right to left
return final state of boxes
Driver code
Function call to print answer
Function to count the words
Sum of ascii values
Number of words having sum of ascii less than k
If character is a space
Add the ascii value to sum
Handling the Last word separately
Driver code
Python3 implementation of the approach
Function to return the minimum number of operations to convert string A to B
If both the strings are equal then no operation needs to be performed
store the position of '_
to store the generated string at every move and the position of ' _ ' within it
vis will store the minimum operations to reach that particular string
minimum moves to reach the string ss
if ' _ ' can be swapped with the character on it 's left
swap with the left character
if the string is generated for the first time
if generated string is the required string
update the distance for the currently generated string
restore the string before it was swapped to check other cases
swap ' _ ' with the character on it 's right this time
if ' _ ' can be swapped with the character 'i+2
if ' _ ' can be swapped with the character at 'i+2
Driver Code
function to return maximum volume
separate digits and alphabets
change digit sum to string
change alphabet sum to string
concatenate sum to alphabets string
Driver code
Python3 program to find the count of palindromic sub - string of a string in it 's ascending form
function to return count of palindromic sub - string
calculate frequency
calculate count of palindromic sub - string
return result
Driver Code
Function to count the minimum number of elements to remove from a number so that pairwise two consecutive digits are same .
initialize counting variable
check if two consecutive digits are same
Driver code
function to check if all digits are odd of a given number
iterate for all digits
if digit is even
all digits are odd
function to return the smallest number with all digits odd
iterate till we find a number with all digits odd
Driver Code
function to return the smallest number with all digits odd
convert the number to string to perform operations
find out the first even number
if no even numbers are there , than n is the answer
add all digits till first even
increase the even digit by 1
add 1 to the right of the even number
Driver Code
Function to count the number of characters whose ascii value is in range [ l , r ]
Initializing the count to 0
Increment the count if the value is less
return the count
Driver code
Function to find the minimum steps
substring "010" found
Get the binary string
Find the minimum steps
Python3 program to find XOR of Prime Frequencies of Characters in a String
Function to create Sieve to check primes
False here indicates that it is not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p , set them to non - prime
Function to find XOR of prime frequencies
map is used to store character frequencies
Traverse the map
Calculate XOR of all prime frequencies
Driver code
Function to count the number of characters whose ascii value is less than k
Initialising the count to 0
Incrementing the count if the value is less
return the count
Driver code
Python3 implementation of the above approach
Modified DFS in which no edge is traversed twice
Function to find a de Bruijn sequence of order n on k characters
Clearing global variables
Number of edges
Driver code
Function to find the count of words in a CamelCase sequence
Driver code
Python3 program to check whether the frequency of characters in a string make Fibonacci Sequence
Function to check if the frequencies are in Fibonacci series
map to store the frequencies of character
Vector to store first n fibonacci numbers
Get the size of the map
a and b are first and second terms of fibonacci series
vector v contains elements of fibonacci series
Compare vector elements with values in Map
Driver code
Function to return the smallest string
iterate the string
first point where s [ i ] > s [ i + 1 ]
append the string without i - th character in it
leave the last character
Driver Code
Python3 program to find the number of ways in which the characters of the word can be arranged such that the vowels occupy only the odd positions
Function to return the factorial of a number
calculating nPr
Function to find the number of ways in which the characters of the word can be arranged such that the vowels occupy only the odd positions
Get total even positions
Get total odd positions
Store frequency of each character of the string
Count total number of vowels
Count total number of consonants
Calculate the total number of ways
Driver code
Function to replace consonant with nearest vowels
Driver code
Function to check if a character is vowel or not
Function that replaces consonant with next immediate consonant alphabatically
Start traversing the string
if character is z , than replace it with character b
if the alphabet is not z
replace the element with next immediate alphabet
if next immediate alphabet is vowel , than take next 2 nd immediate alphabet ( since no two vowels occurs consecutively in alphabets ) hence no further checking is required
Driver code
Python 3 program to reduce the string by removing the characters which appears less than k times
Function to reduce the string by removing the characters which appears less than k times
Hash table initialised to 0
Increment the frequency of the character
create a new empty string
Append the characters which appears more than equal to k times
Driver Code
Python3 program to count number of on offs to display digits of a number .
store the led lights required to display a particular number .
compute the change in led and keep on adding the change
Driver code
Python implementation of the above approach
creating a frequency array
Finding length of s
counting frequency of all characters
checking if any odd frequency is there or not
Driver code
returns the maximum size of a substring consisting only of zeroes after k concatenation
stores the maximum length of the required substring
if the current character is 0
stores maximum length of current substrings with zeroes
if the whole is filled with zero
computes the length of the maximal prefix which contains only zeroes
computes the length of the maximal suffix which contains only zeroes
if more than 1 concatenations are to be made
Driver code
Function that checks if the string contain exactly K characters having ASCII value greater than p
if ASCII value is greater than 'p
if count of satisfying characters is equal to ' K ' then return true
otherwise return false
function to count sub - strings
length of the string
count of sub - strings
' i ' is the starting index for the sub - string
' j ' is the no . of characters to include in the sub - string
check if the sub - string satisfies the condition
Driver code
Function that counts valid sub - strings
Only take those numbers that do not start with '0' .
converting the sub - string starting from index ' i ' and having length ' len ' to int and checking if it is greater than X or not
Driver code
Function that returns false if the number passed as argument contains digit ( s ) other than '0' or '1
Function that checks whether the binary string can be formed or not
Empty string for storing the binary number
check if a [ i ] can be a part of the binary string
Conversion of int into string
if a [ i ] can 't be a part  then break the loop
possible to create binary string
impossible to create binary string
Driver code
Function to check if the string is palindrome
Function that checks whether all the palindromic sub - strings are of odd length .
Creating each substring
If the sub - string is of even length and is a palindrome then , we return False
Driver code
Function to return factorial of the number passed as argument
Function to get the total permutations which satisfy the given condition
Create has to store count of each character
Store character occurrences
Count number of times Particular character comes
If particular character isn 't  present in the string then return 0
Remove count of particular character
Total length of the string
Assume all occurrences of particular character as a single character .
Compute factorial of the length
Divide by the factorials of the no . of occurrences of all the characters .
return the result
Driver code
Assuming the string and the character are all in uppercase
Function to check if there exists at least 1 sub - sequence in a string which is not palindrome
use set to count number of distinct characters
insert each character in set
If there is more than 1 unique characters , return true
Else , return false
Driver code
this function return n !
this will return total number of ways
freq maintains frequency of each character in word
check character is vowel or not
the characters that are not vowel must be consonant
number of ways to arrange vowel
multiply both as these are independent
string contains only capital letters
this will contain ans
Function to check if a string is palindrome or not
String that stores characters of s in reverse order
Length of the string s
String used to form substring using N
Variable to store sum of digits of N
Forming the substring by traversing N
Appending the substr to str till it 's length becomes equal to sum
Trimming the string str so that it 's length becomes equal to sum
Driver code
Calling function isPalindrome to check if str is Palindrome or not
Function to find product of ASCII value of characters in string
Traverse string to find the product
Return the product
Driver code
Print balanced and remove extra brackets from string
Maintain a count for opening brackets Traversing string
check if opening bracket
print str [ i ] and increment count by 1
check if closing bracket and count != 0
decrement count by 1
if str [ i ] not a closing brackets print it
balanced brackets if opening brackets are more then closing brackets
print remaining closing brackets
Driver code
Python3 program to minimum operation require to make first and last character same
Recursive function call
Decrement ending index only
Increment starting index only
Increment starting index and decrement index
Driver code
Function call
Function to find the count of strings
Variable to store the final result
Loop iterating through string
If ' $ ' is present at the even position in the string
' sum ' is multiplied by 21
If ' $ ' is present at the odd position in the string
' sum ' is multiplied by 5
Driver code
Let the string ' str ' be s$$e$
Print result
Function to remove duplicates
keeps track of visited characters
gets character value
keeps track of length of resultant string
check if Xth bit of counter is unset
mark current character as visited
Driver code
Method to remove duplicates
Table to keep track of visited characters
To keep track of end index of resultant string
Driver code
Utility function to get the position of first character in the string
Get the position of first character in the string
Utility function to get the position of last character in the string
Get the position of last character in the string
Function to check if the characters in the given string forms a Palindrome in O ( 1 ) extra space
break , when all letters are checked
if mismatch found , break the loop
Driver code
Function to calculate the maximum length of substring of the form R ^ nK ^ n
Count no . Of R 's before a K
Count no . Of K 's after a K
Update maximum length
Driver code
Function to store frequency of each character in each string
Function to Find longest possible sequence of N strings which is anagram to each other
to get lexicographical largest sequence .
find minimum of that character
print that character minimum number of times
Driver code
to store frequency of each character in each string
To get frequency of each character
Function call
function to check whether two strings are Permutation of each other
Get lengths of both strings
If length of both strings is not same , then they cannot be Permutation
Sort both strings
Compare sorted strings
Driver Code
Python3 function to check whether two strings are Permutations of each other
Create a count array and initialize all values as 0
For each character in input strings , increment count in the corresponding count array
If both strings are of different length . Removing this condition will make the program fail for strings like " aaca " and " aca "
See if there is any non - zero value in count array
Function to calculate the maximum power of the jump
Initialize the count with 1
Find the character at last index
Start traversing the string
Check if the current char is equal to the last character
max_so_far stores maximum value of the power of the jump from starting to ith position
Reset the count to 1
Else , increment the number of jumps / count
Return the maximum number of jumps
Driver Code
Function to find longest substring having count of 1 s more than count of 0 s .
To store sum .
To store first occurrence of each sum value .
To store maximum length .
To store current substring length .
Add 1 if current character is 1 else subtract 1.
If sum is positive , then maximum length substring is bin1 [ 0. . i ]
If sum is negative , then maximum length substring is bin1 [ j + 1. . i ] , where sum of substring bin1 [ 0. . j ] is sum - 1.
Make entry for this sum value in hash table if this value is not present .
Driver code
Function to find average of ASCII value of chars
loop to sum the ascii value of chars
Returning average of chars
Driver code
Function to check if similar subsequences occur in a string or not
iterate and count the frequency
counting frequency of the letters
check if frequency is more than once of any character
Driver Code
function for winner prediction
increase count
check losing condition
check winning condition
check tie on n - 1 point
increase count
check for 2 point lead
condition of lost
condition of win
Driver Code
Function to check if given string is palindrome or not .
Function to find counter clockwise shifts to make string palindrome .
Pointer to starting of current shifted string .
Pointer to ending of current shifted string .
Concatenate string with itself
To store counterclockwise shifts
Move left and right pointers one step at a time .
Check if current shifted string is palindrome or not
If string is not palindrome then increase count of number of shifts by 1.
Driver code .
Function that prints the required string
Find modulus with 26
Print extra characters required
Print the given reverse string countOfStr times
Driver Code
Initialize a string in reverse order
A Utility Function to find the common prefix between first and last strings
Compare str1 and str2
A Function that returns the longest common prefix from the array of strings
sorts the N set of strings
prints the common prefix of the first and the last string of the set of strings
Driver Code
Multiplies str1 and str2 , and prints result .
Will keep the result number in vector in reverse order
Below two indexes are used to find positions in result .
Go from right to left in num1
To shift position to left after every multiplication of a digit in num2
Go from right to left in num2
Take current digit of second number
Multiply with current digit of first number and add result to previously stored result at current position .
Carry for next iteration
Store result
Store carry in next cell
To shift position to left after every multiplication of a digit in num1 .
Ignore '0' s from the right
If all were '0' s - means either both or one of num1 or num2 were '0
Generate the result string
Driver code
Function to perform every step
perform N steps
Traverse in the string
for last digit
recur for current string
Driver Code
Python3 program to find all special subsequences of the given type
Function to generate the required subsequences
If the index pointer has reached the end of input string
Skip empty ( " ▁ " ) subsequence
Exclude current character in output string
Include current character in output string
Remove the current included character and and include it in its uppercase form
Function to print the required subsequences
Output String to store every subsequence
Set of strings that will store all special subsequences in lexicographical sorted order
Sort the strings to print in sorted order
Driver Code
Function to check if the word is in the dictionary or not
map to store all words in dictionary with their count
adding all words in map
search in map for all words in the sentence
all words of sentence are present
Driver Code
Calling function to check if words are present in the dictionary or not
Function to print 3 digit repeating numbers
Hashmap to store the frequency of a 3 digit number
first three digit number
if key already exists increase value by 1
Output the three digit numbers with frequency > 1
Driver Code
Input string
Calling Function
Recursive function to count the number of occurrences of " hi " in str .
Base Case
Recursive Case Checking if the first substring matches
Otherwise , return the count from the remaining index
Driver Code
Python3 Program to Check If a String Contains All Binary Codes of Size K
Unordered map of type string
Driver code
This function adds two binary strings and return result as a third string
Initialize result
Initialize digit sum
Traverse both strings starting from last characters
Compute sum of last digits and carry
If current digit sum is 1 or 3 , add 1 to result
Compute carry
Move to next digits
function to add n binary strings
Driver code
Reverse the letters of the word
Temporary variable to store character
Swapping the first and last character
This function forms the required string
Checking the number of words present in string to reverse
Reverse the letter of the words
Driver Code
finding which path have minimum flip bit and the minimum flip bits
concatenating given string to itself , to make it circular
check x is greater than y . marking if output need to be opposite .
iterate Clockwise
if current bit is not equal to next index bit .
iterate Anti - Clockwise
if current bit is not equal to next index bit .
Finding whether Clockwise or Anti - clockwise path take minimum flip .
Driver Code
Function to count prefixes
calculating for string S
count == 0 or when N == 1
when all characters are a or a - b == 0
checking for saturation of string after repetitive addition
Driver Code
Python3 Program to find number of pairs whose concatenation contains all digits from 0 to 9.
Function to return number of pairs whose concatenation contain all digits from 0 to 9
Making the mask for each of the number .
for each of the possible pair which can make OR value equal to 1023
Finding the count of pair from the given numbers .
Driven Program
pre define some constant
global values for pre computation
function to print number of required string
calculate answer using proposed algorithm
Driver code
Python 3 Program to find the " GFG " subsequence in the given string
Print the count of " GFG " subsequence in the string
Traversing the given string
If the character is ' G ' , increment the count of ' G ' , increase the result and update the array .
If the character is ' F ' , increment the count of ' F ' and update the array .
Ignore other character .
Driver Code
Python 3 program to find the lexicographically maximum substring .
loop to find the max leicographic substring in the substring array
Driver code
Python 3 program to find the lexicographically maximum substring .
We store all the indexes of maximum characters we have in the string
We form a substring from that maximum character index till end and check if its greater that maxstring
Driver code
Function to check if a word is palindrome
making the check case case insensitive
loop to check palindrome
Function to find longest palindrome word
to check last word for palindrome
to store each word
extracting each word
Driver code
function for finding common divisor .
Checking if ' base ' is base string of 's1
Checking if ' base ' is base string of 's2
Driver code
Function to find the string after operation
Travesing through string
Checking for character Between two zeros
Deleting the character At specific position
Updating the length of the string
Driver code
Python3 program to find if string is a perfect square or not .
calculating the length of the string
calculating the ASCII value of the string
Find floating point value of square root of x .
If square root is an integer
Driver code
function to find number of substring in which each character has count less than or equal to k .
initialize left and right pointer to 0
an array to keep track of count of each alphabet
decrement the count
Driver code
function which returns True or False for occurrence of a vowel
this compares vowel with character 'c
function to print resultant string
print 1 st character
loop to check for each character
comparison of consecutive characters
Driver code
Python 3 program to print the number which contain the digit d from 0 to n
function to display the values
Converting d to character
Loop to check each digit one by one .
initialize the string
checking for digit
Driver code
function to transform string with string passed as reference
initializing the variable ch to 'a
if the length of string is less than 26 , we can 't obtain the required  subsequence
if ch has reached ' z ' , it means we have transformed our string such that required subsequence can be obtained
current character is not greater than ch , then replace it with ch and increment ch
Driver Code
Checks if a given is Pandigital
digit i is not present thus not pandigital
Returns number of pairs of strings resulting in Pandigital Concatenations
iterate over all pair of strings
Driver code
Python3 program to count number of changes to make all substrings distinct .
Returns minimum changes to str so that no substring is repeated .
If length is more than maximum allowed characters , we cannot get the required string .
Variable to store count of distinct characters
To store counts of different characters
Answer is , n - number of distinct char
Driver Code
Node of a linked list
Function to create newNode in a linked list
reverse each node data
iterate each node and call reverse_word for each node data
printing linked list
Driver program
Return the count of strings with no palindromic substring .
Driven Program
Function to count special Palindromic susbstring
store count of special Palindromic substring
it will store the count of continues same char
traverse string character from left to right
store same character count
count smiler character
Case : 1 so total number of substring that we can generate are : K * ( K + 1 ) / 2 here K is sameCharCount
store current same char count in sameChar [ ] array
increment i
Case 2 : Count all odd length Special Palindromic substring
if current character is equal to previous one then we assign Previous same character count to current one
case 2 : odd length
subtract all single length substring
Driver Code
function to print the bracket number
used to print the bracket number for the left bracket
used to obtain the bracket number for the right bracket
traverse the given expression 'exp
if current character is a left bracket
print ' left _ bnum ' ,
push ' left _ bum ' on to the stack 'right_bnum
increment ' left _ bnum ' by 1
else if current character is a right bracket
print the top element of stack ' right _ bnum ' it will be the right bracket number
pop the top element from the stack
Driver Code
Python program to find if a given corner string is present at corners .
If length of corner string is more , it cannot be present at corners .
Return true if corner string is present at both corners of given string .
Driver Code
Function to store binary Representation
Function to find ith character
Function to change decimal to binary
Assign s1 string in s string
Driver code
Function to Find Maximum Number
Maximum segment length
Find value of first segment of seg_len
Find value of remaining segments using sliding window
To find value of current segment , first remove leading digit from previous value
Then add trailing digit
Driver Code
Returns true if it is possible to convert str1 to str2 using k operations .
Case A ( i )
finding common length of both string
Case A ( ii ) -
Case B -
Driver Code
Python3 Program to find maximum lowercase alphabets present between two uppercase alphabets
Function which computes the maximum number of distinct lowercase alphabets between two uppercase alphabets
Ignoring lowercase characters in the beginning .
We start from next of first capital letter and traverse through remaining character .
If character is in uppercase ,
Count all distinct lower case characters
Update maximum count
Reset count array
If character is in lowercase
Driver function
Function which computes the maximum number of distinct lowercase alphabets between two uppercase alphabets
Ignoring lowercase characters in the beginning .
We start from next of first capital letter and traverse through remaining character .
If character is in uppercase ,
Update maximum count if lowercase character before this is more .
clear the set
If character is in lowercase
Driver Code
Function to find string which has first character of each word .
Driver code
Python3 implementation for counting maximum length palindromes
factorial of a number
function to count maximum length palindromes .
Count number of occurrence of a charterer in the string
k = 0 Count of singles num = 0 numerator of result den = 1 denominator of result
if frequency is even fi = ci / 2
if frequency is odd fi = ci - 1 / 2.
sum of all frequencies
product of factorial of every frequency
if all character are unique so there will be no pallindrome , so if num != 0 then only we are finding the factorial
k are the single elements that can be placed in middle
Driver Code
Python3 Program to count all even decimal value substring
Generate all substring in arr [ 0. . n - 1 ]
Store the count
Pick starting point
Pick ending point
Substring between current starting and ending points
increment power of 2 by one
Driver code
Function performing calculations
Calculating the two halves of string s as first and second . The final string p
It joins the characters to final string in reverse order
It joins the characters to final string in reverse order
Driver code
Calling function
Function to create a palindrome
Count the occurrences of every character in the string
Create a string of characters with odd occurrences
Change the created string upto middle element and update count to make sure that only one odd character exists .
decrease the count of character updated
Create three strings to make first half second half and middle one .
characters with even occurrences
fill the first half .
character with odd occurrence
fill the first half with half of occurrence except one
For middle element
create the second half by reversing the first half .
Driver Code
Python program to calculate length of a string using recursion
Function to calculate length
if we reach at the end of the string
Driver Code
Function to check for consonant
To handle lower case
To check is character is Consonant
Driver code
Function to check for consonant
To handle lower case
To count total number of consonants from 0 to n - 1
Driver code
function to reverse bits of a number
traversing bits of ' n ' from the right
bitwise left shift ' rev ' by 1
if current bit is '1
bitwise right shift ' n ' by 1
required number
function to check whether binary representation of a number is palindrome or not
get the number by reversing bits in the binary representation of 'n
Driver program to test above
Python 3 code to decrease hamming distance using swap .
Function to return the swapped indexes to get minimum hamming distance .
Find the initial hamming distance
Case - I : To decrease distance by two
ASCII values of present character .
If two same letters appear in different positions print their indexes
Store the index of letters which is in wrong position
Case : II
If misplaced letter is found , print its original index and its new index
Store the index of letters in wrong position
Case - III
Driver code
Python3 program to convert string X to string Y which minimum number of changes .
Function that converts string X into lexicographically smallest anagram of string Y with minimal changes
Counting frequency of characters in each string .
We maintain two more counter arrays ctrx [ ] and ctry [ ] Ctrx [ ] maintains the count of extra elements present in string X than string Y Ctry [ ] maintains the count of characters missing from string X which should be present in string Y .
This means that we cannot edit the current character as it 's frequency  in string X is equal to or less  than the frequency in string Y.  Thus, we go to the next position
Here , we try to find that character , which has more frequency in string Y and less in string X . We try to find this character in lexicographical order so that we get lexicographically smaller string
This portion deals with the lexicographical property . Now , we put a character in string X when either this character has smaller value than the character present there right now or if this is the last position for it to exchange , else we fix the character already present here in this position .
Driver Code
Python3 program to count the number of pairs
Function to count the number of equal pairs
Hash table
Traverse the string and count occurrence
Stores the answer
Traverse and check the occurrence of every character
Driver code
Function to find the lexicographically next string
Iterate from last character
If not ' z ' , increase by one
if ' z ' , change it to 'a
Driver Code
If not equal , print the resultant string
prints the arrangement at time = t
Checking the entire queue for every moment from time = 1 to time = t .
If current index contains ' B ' and next index contains ' G ' then swap
Driver code
Return sum of two number represented by the arrays . Size of a [ ] is greater than b [ ] . It is made sure be the wrapper function
array to store sum .
Until we reach beginning of array . we are comparing only for second array because we have already compare the size of array in wrapper function .
find sum of corresponding element of both array .
Finding carry for next sum .
If second array size is less the first array size .
Add carry to first array elements .
If there is carry on adding 0 index elements . append 1 to total sum .
Converting array into number .
Wrapper Function
Making first array which have greater number of element
Driven Code
Python 3 implementation to find the length of the longest common anagram subsequence
function to find the length of the longest common anagram subsequence
List for storing frequencies of each character
calculate frequency of each character of 'str1[]
calculate frequency of each character of 'str2[]
for each character add its minimum frequency out of the two strings in 'len
required length
Driver Code
Return if given string contain panalphabetic window .
traversing the string
if character of string is equal to ch , increment ch .
if all characters are found , return true .
Driver Code
Python3 program to print Characters at Prime index in a given String
Corner case
Check from 2 to n - 1
Function to print character at prime index
Loop to check if index prime or not
Driver Code
Python3 code to check whether the given string is Heterogram or not .
traversing the string .
ignore the space
if already encountered
else return false .
Driven Code
Function to compute the ASCII value of each character one by one
Driver code
Function to replace spaces and convert into snake case
Converting space to underscor
If not space , convert into lower character
Driver program
Calling function
Utility function to find size of largest subset of anagram
sort the string
Increment the count of string
Compute the maximum size of string
Driver code
Function to count number of vowels , consonant , digits and special character in a string .
Declare the variable vowels , consonant , digit and special characters
str . length ( ) function to count number of character in given string .
To handle upper case letters
Driver function .
Function to return lexicographically next word
we made m as m + 97 that means our required string contains not more than m + 97 ( as per ASCII value ) in it .
increment last alphabet to make next lexicographically next word .
if i - th alphabet not in first k letters then make it as " a " and then increase ( i - 1 ) th letter
to check whether formed string palindrome or not .
increment i .
if i less than or equals to one that means we not formed such word .
Driver code
Python3 program to replace c1 with c2 and c2 with c1
loop to traverse in the string
check for c1 and replace
check for c2 and replace
Driver Code
Returns n - th Fibonacci word
driver program
function for decimal to binary conversion without using arithmetic operators
to store the binary equivalent of decimal
to get the last binary digit of the number ' n ' and accumulate it at the beginning of 'bin
right shift ' n ' by 1
required binary number
Function to find octal equivalent of binary
add min 0 's in the beginning to make  string length divisible by 3
create map between binary and its equivalent octal code
one by one extract from left , substring of size 3 and add its octal code
required octal number
function to find octal equivalent of decimal
convert decimal to binary
convert binary to octal required octal equivalent of decimal
Driver program to test above
function to split string into substrings on the basis of delimiter and return the substrings after split
to count the number of split strings
adding delimiter character at the end of 'str
length of 'str
traversing ' str ' from left to right
if str [ i ] is not equal to the delimiter character then accumulate it to 'word
if ' word ' is not an empty string , then add this ' word ' to the array 'substr_list[]
reset 'word
return the splitted strings
Driver Code
function for printing palindrome
iterate till i < j
continue if str [ i ] == str [ j ]
update str [ i ] = str [ j ] = ' a ' if both are '*
update str [ i ] = str [ j ] if only str [ i ] = '*
update str [ j ] = str [ i ] if only str [ j ] = '*
else print not possible and return
Driver Code
function for converting the string
find the index of each element of the string in the modified set of alphabets replace the element with the one having the same index in the actual set of alphabets
Driver Code
function to return number of different sub - strings
initially our answer is zero .
find the length of given strings
currently make array and initially put zero .
find occurrence of " a " and " b " in string " s "
We use a hash to make sure that same substring is not counted twice .
go through all the positions to find occurrence of " a " first .
if we found occurrence of " a " .
then go through all the positions to find occurrence of " b " .
if we do found " b " at index j then add it to already existed substring .
if we found occurrence of " b " .
now add string " b " to already existed substring .
If current substring is not included already .
put any non negative integer to make this string as already existed .
make substring null .
return answer .
Driver Code
Python 3 program to print the string in ' plus ' pattern
Function to make a cross in the matrix
As , it is not possible to make the cross exactly in the middle of the matrix with an even length string .
declaring a 2D array i . e a matrix
Now , we will fill all the elements of the array with 'X
Now , we will place the characters of the string in the matrix , such that a cross is formed in it .
here the characters of the string will be added in the middle column of our array .
here the characters of the string will be added in the middle row of our array .
Now finally , we will print the array
Driver Code
Python3 program find a binary String of given length that doesn 't contain a palindrome of size 3.
Printing the character according to i
Driver code
function to find subsequence
check if jth bit in binary is 1
if jth bit is 1 , include it in subsequence
function to print all subsequences
map to store subsequence lexicographically by length
Total number of non - empty subsequence in string is 2 ^ len - 1
i = 0 , corresponds to empty subsequence
subsequence for binary pattern i
storing sub in map
it . first is length of Subsequence it . second is set < string >
ii is iterator of type set < string >
Driver Code
Python3 program to print all Subsequences of a string in an iterative manner
function to find subsequence
loop while binary is greater than
get the position of rightmost set bit
append at beginning as we are going from LSB to MSB
resets bit at pos in binary
function to print all subsequences
map to store subsequence lexicographically by length
Total number of non - empty subsequence in string is 2 ^ len - 1
i = 0 , corresponds to empty subsequence
subsequence for binary pattern i
storing sub in map
it . first is length of Subsequence it . second is set < string >
ii is iterator of type set < string >
Driver Code
Function to return remainder
len is variable to store the length of number string .
loop that find remainder
Driver code
Returns length of the longest subsequence of the form 0 * 1 * 0 *
Precomputing values in three arrays pre_count_0 [ i ] is going to store count of 0 s in prefix str [ 0. . i - 1 ] pre_count_1 [ i ] is going to store count of 1 s in prefix str [ 0. . i - 1 ] post_count_0 [ i ] is going to store count of 0 s in suffix str [ i - 1. . n - 1 ]
string is made up of all 0 s or all 1 s
Compute result using precomputed values
Driver Code
Returns true if str [ curr ] does not matches with any of the characters after str [ start ]
Prints all distinct permutations in str [ 0. . n - 1 ]
Proceed further for str [ i ] only if it doesn 't match with any of  the characters after str[index]
Driver code
Python3 program to generate permutations with only one swap allowed .
don 't swap the current position
Swap with the next character and revert the changes . As explained above , swapping with previous is is not needed as it anyways happens for next character .
Driver Code
function to calculate the median back string
length of string
initialize a blank string
Flag to check if length is even or odd
traverse from first to last
if len is even then add first character to beginning of new string and second character to end
if current length is odd and is greater than 1
add first character to end and second character to beginning
if length is 1 , add character to end
Driver Code
Simple Python3 program to find maximum number of characters between two occurrences of same character
Driver code
Efficient Python3 program to find maximum number of characters between two occurrences of same character
Initialize all indexes as - 1.
If this is first occurrence
Else find distance from previous occurrence and update result ( if required ) .
Driver code
Python 3 program to check if given encoding represents a single string .
Return true if sum becomes k
Driver Code
Python 3 program to find lexicographically next string
If string is empty .
Find first character from right which is not z .
If all characters are ' z ' , append an ' a ' at the end .
If there are some non - z characters
Driver code
Function to check if a contains equal number of one and zeros or not
Function to find the length of the longest balanced substring
Driver code
Function call
Python3 Program to find all the common characters in n strings
primary array for common characters we assume all characters are seen before .
for each strings
secondary array for common characters Initially marked false
for every character of ith strings
if character is present in all strings before , mark it .
copy whole secondary array into primary
displaying common characters
Driver 's Code 
Function to check if the string is palindrome
to know the length of string
if the given string is a palindrome ( Case - I )
Sub - case - III )
if ( n % 2 == 0 ) : if the length is even
count = 2 * count + 1 sub - case - I
count = 2 * count + 2 sub - case - II
insertion point
Case - I
Case - II
Driver code
method returns total number of substring having K ones
initialize index having zero sum as 1
loop over binary characters of string
update countOfOne variable with value of ith character
if value reaches more than K , then update result
add frequency of indices , having sum ( current sum - K ) , to the result
update frequency of one 's count
Driver code
Python3 program to print two strings made of character occurring once and multiple times
function to print two strings generated from single string one with characters occurring onces other with character occurring multiple of times
initialize hashtable with zero entry
perform hashing for input string
generate string ( str1 ) consisting char occurring once and string ( str2 ) consisting char occurring multiple times
print both strings
Driver Code
function to reverse the digits in the range i to j in 'num
function to find next higher palindromic number using the same set of digits
if length of number is less than '3' then no higher palindromic number can be formed
find the index of last digit in the 1 st half of 'num
Start from the ( mid - 1 ) th digit and find the first digit that is smaller than the digit next to it .
If no such digit is found , then all digits are in descending order which means there cannot be a greater palindromic number with same set of digits
Find the smallest digit on right side of ith digit which is greater than num [ i ] up to index 'mid
swap num [ i ] with num [ smallest ]
as the number is a palindrome , the same swap of digits should be performed in the 2 nd half of 'num
reverse digits in the range ( i + 1 ) to mid
if n is even , then reverse digits in the range mid + 1 to n - i - 2
else if n is odd , then reverse digits in the range mid + 2 to n - i - 2
required next higher palindromic number
Driver Code
function to generate n digit numbers
if number generated
Append 1 at the current number and reduce the remaining places by one
If more ones than zeros , append 0 to the current number and reduce the remaining places by one
Driver Code
Function call
function to find the stem ( longestcommon substring ) from the string array
Determine size of the array
Take first word from array as reference
generating all possible substrings of our reference string arr [ 0 ] i . e s
Check if the generated stem is common to all words
If current substring is present in all strings and its length is greater than current result
Driver Code
Function call
Python 3 program to find if it is possible to make a string from characters present in other string .
Returns true if it is possible to make s1 from characters present in s2 .
Count occurrences of all characters present in s2 . .
For every character , present in s1 , reduce its count if count is more than 0.
Driver code
function to find the next higher number using atmost one swap operation
to store the index of the largest digit encountered so far from the right
to store the index of rightmost digit which has a digit greater to it on its right side
finding the ' index ' of rightmost digit which has a digit greater to it on its right side
required digit found , store its ' index ' and break
if no such digit is found which has a larger digit on its right side
to store the index of the smallest digit greater than the digit at ' index ' and right to it
finding the index of the smallest digit greater than the digit at ' index ' and right to it
swapping the digits
required number
Driver program to test above
Python3 program to find the longest substring of vowels .
Increment current count if s [ i ] is vowel
check previous value is greater then or not
Driver code
Python3 program to count number of substrings with counts of distinct characters as k .
Returns true if all values in freq [ ] are either 0 or k .
Returns count of substrings where frequency of every present character is k
Pick a starting point
Initialize all frequencies as 0 for this starting point
One by one pick ending points
Increment frequency of current char
If frequency becomes more than k , we can 't have more substrings  starting with i
If frequency becomes k , then check other frequencies as well
Driver Code
Python3 program to count number of times a string appears in an array of strings
To store number of times a string is present . It is 0 is string is not present
function to insert a string into the Trie
calculation ascii value
If the given node is not already present in the Trie than create the new node
Returns count of occurrences of s in Trie
inserting in Trie
searching the strings in Trie
Driver code
Python3 program to Find longest subsequence where every character appears at - least k times
Count frequencies of all characters
Traverse given string again and print all those characters whose frequency is more than or equal to k .
Driver code
Finds and stores result in st for a given string s .
If current string is not already present .
Traverse current string , one by one remove every character and recur .
Driver Code
Function to count substrings with same first and last characters
base cases
driver code
Counts the no of manipulations required
store the count of character
iterate though the first String and update count
iterate through the second string update char_count . if character is not found in char_count then increase count
Driver code
Python3 program to count least number of manipulations to have two strings set of same characters
return the count of manipulations required
count the number of different characters in both strings
check the difference in characters by comparing count arrays
Driver Code
Given two strings , check which string makes palindrome first .
returns winner of two strings
Count frequencies of characters in both given strings
Check if there is a character that appears more than once in A and does not appear in B
Driver Code
function to find and print the longest common substring of X [ 0. . m - 1 ] and Y [ 0. . n - 1 ]
Create a table to store lengths of longest common suffixes of substrings . Note that LCSuff [ i ] [ j ] contains length of longest common suffix of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ] . The first row and first column entries have no logical meaning , they are used only for simplicity of program
To store length of the longest common substring
To store the index of the cell which contains the maximum value . This cell 's index helps in building  up the longest common substring  from right to left.
Following steps build LCSuff [ m + 1 ] [ n + 1 ] in bottom up fashion .
if true , then no common substring exists
allocate space for the longest common substring
traverse up diagonally form the ( row , col ) cell until LCSuff [ row ] [ col ] != 0
move diagonally up to previous cell
required longest common substring
Driver Code
Simple Python3 program to convert all substrings from decimal to given base .
Saving substring in sub
Evaluating decimal for current substring and printing it .
Driver code
Here curr_str is the string whose LCP is needed leng is length of string evaluated till now and s is original string
If there is nothing at all ! !
If a single letter is left out
For each length of substring chunk in string
If left side chunk and right side chunk are same
Call LCP for the part between the chunks and add 2 to the result . Length of string evaluated till now is increased by ( i + 1 ) * 2
Wrapper over LPCRec ( )
Driver code
Python3 program to find number of balancing points in string
function to return number of balancing points
hash array for storing hash of string initialized by 0 being global
process string initially for rightVisited
check for balancing points
for every position inc left hash & dec rightVisited
check whether both hash have same character or not
Either both leftVisited [ j ] and rightVisited [ j ] should have none zero value or both should have zero value
if both have same character increment count
Driver Code
To find min number of flips in binary string
If last character is not equal to str [ i ] increase res
To return min flips
Driver Code
function to find the maximum length of substring having character ch
traverse the whole string
if character is not same as ch increase count
While count > k traverse the string again until count becomes less than k and decrease the count when characters are not same
length of substring will be rightIndex - leftIndex + 1. Compare this with the maximum length and return maximum length
function which returns maximum length of substring
Driver Code
Python3 program for finding all anagram pairs in the given array
Utility function for printing anagram list
Utility function for storing the vector of strings into HashMap
Check for sorted string if it already exists
Push new string to already existing key
Print utility function for printing all the anagrams
Driver code
Initialize vector of strings
Utility function for storing strings into hashmap
Function to check is all the characters in string are or not
Insert characters in the set
If all characters are same Size of set will always be 1
Driver code
function to find the minimum index character
to store the index of character having minimum index
lengths of the two Strings
traverse 'patt
for each character of ' patt ' traverse 'Str
if patt [ i ] is found in ' Str ' , check if it has the minimum index or not . If yes , then update ' minIndex ' and break
print the minimum index character
if no character of ' patt ' is present in 'Str
Driver code
Python3 implementation to find the character in first string that is present at minimum index in second string
Function to find the minimum index character
unordered_map ' um ' implemented as hash table
to store the index of character having minimum index
Lengths of the two strings
Store the first index of each character of 'str
traverse the string 'patt
If patt [ i ] is found in ' um ' , check if it has the minimum index or not accordingly update 'minIndex
Print the minimum index character
If no character of ' patt ' is present in 'str
Driver program to test above
Python3 program to check if it is possible to split string or not
Function to check if we can split string or not
Counter array initialized with 0
Length of the string
Traverse till the middle element is reached
First half
Second half
Checking if values are different set flag to 1
String to be checked
Python 3 program to count substrings with recursive sum equal to 9
to store no . of previous encountered modular sums
no . of modular sum ( == 0 ) encountered till now = 1
if number is 0 increase
no . of continuous_zero by 1
else continuous_zero is 0
increase d value of this mod_sum
subtract no . of cases where there are only zeroes in substring
Driver Code
Utility function to find maximum string
If both having equal lengths
Reach first unmatched character / value
Return string with maximum value
If different lengths return string with maximum length
Function to extract the maximum value
Start traversing the string
Ignore leading zeroes
Store numeric value into a string
Update maximum string
To handle the case if there is only 0 numeric value
Return maximum string
Driver Code
function to check divisibility
Append required 0 s at the beginning .
add digits in group of three in gSum
group saves 3 - digit group
calculate result till 3 digit sum
Driver code
Python3 program for above implementation
Function to return string in lexicographic order followed by integers sum
Traverse the string
Count occurrence of uppercase alphabets
Store sum of integers
Traverse for all characters A to Z
Append the current character in the string no . of times it occurs in the given string
Append the sum of integers
return resultant string
Driver code
Instantiate the string
Trim the given string
Replace All space ( unicode is \\ s ) to % 20
Display the result
Function to print all sub strings
Pick starting point
Pick ending point
Print characters from current starting point to current ending point .
Driver program to test above function
Function to reverse the string and preserve the space position
Mark spaces in result
Traverse input string from beginning and put characters in result from end
Ignore spaces in input string
Ignore spaces in result .
Driver code
size of the hash table
function to find the uncommon characters of the two strings
mark presence of each character as 0 in the hash table 'present[]
for each character of str1 , mark its presence as 1 in 'present[]
for each character of str2
if a character of str2 is also present in str1 , then mark its presence as - 1
else mark its presence as 2
print all the uncommon characters
Driver Code
Python3 program for implementation of simple approach to find length of last word
String a is ' final ' -- can not be modified So , create a copy and trim the spaces from both sides
Driver code
Python3 program for implementation of efficient approach to find length of last word
Split by space and converting String to list and
Driver code
Function to check the Vowel
Returns count of vowels in str
Check for vowel
string object
Total number of Vowels
Python3 program to get toggle case of a string
tOGGLE cASE = swaps CAPS to lower case and lower case to CAPS
Bitwise EXOR with 32
Driver Code
Python3 program to illustrate String with unique characters
Converting string to set
If length of set is equal to len of string then it will have unique characters
Driver Code
Function that concatenates strings a [ 0. . n1 - 1 ] and b [ 0. . n2 - 1 ] and stores the result in c [ ]
Copy characters of A [ ] to C [ ]
Copy characters of B [ ]
Driver Code
Concatenate a [ ] and b [ ] and store result in c [ ]
Function to find the next greater number with same number of 1 ' s ▁ and ▁ 0' s
locate first ' i ' from end such that bnum [ i ] == '0' and bnum [ i + 1 ] == '1' swap these value and break
if no swapping performed
Since we want the smallest next value , shift all 1 ' s ▁ at ▁ the ▁ end ▁ in ▁ the ▁ binary ▁ ▁ substring ▁ starting ▁ from ▁ index ▁ ' i + 2
special case while swapping if '0' occurs then break
required next greater number
Driver code
Print all the rotated strings .
Generate all rotations one by one and print
Current index in str
Current index in temp
Copying the second part from the point of rotation .
Copying the first part from the point of rotation .
Driver Code
Python3 code to generate all possible strings that can be formed from given string
Number of subsequences is ( 2 * * n - 1 )
Generate all subsequences of a given string . using counter 000. . 1 to 111. . 1
Check if jth bit in the counter is set If set then print jth element from arr [ ]
Print all permutations of current subsequence
Driver program
utility function to check whether a string is palindrome or not
Check for palindrome .
palindrome string
function to find maximum length substring which is not palindrome
to check whether all characters of the string are same or not
All characters are same , we can 't  make a non-palindromic string.
If string is palindrome , we can make it non - palindrome by removing any corner character
Complete string is not a palindrome .
Driver Code
Function to find spaces and move to beginning
Traverse from end and swap spaces
Driver code
Function to find spaces and move to beginning
Keep copying non - space characters
Move spaces to be beginning
Driver code
Checking if the String is palindrome or not
single character is always palindrome
pointing to first character
pointing to last character
Recursive function to count number of appends
Removing first character of String by incrementing base address pointer .
Driver Code
Returns resul when we pass title .
This process is similar to binary - to - decimal conversion
Driver function
PHP program to check if k - th bit of a given number is set or not using right shift operator .
Driver code
Function to reverse string and return reversed string
Iterate loop upto start not equal to end
XOR for swapping the variable
Driver Code
Python3 code to check a ^ nb ^ n pattern
if length of str is odd return No
check first half is ' a ' and other half is full of 'b
Driver code
Function call
Return the number of substring divisible by 6 and starting at index i in s [ ] and previous sum of digits modulo 3 is m .
End of the string .
If already calculated , return the stored value .
Converting into integer .
Increment result by 1 , if current digit is divisible by 2 and sum of digits is divisible by 3. And recur for next index with new modulo .
Returns substrings divisible by 6.
For storing the value of all states .
If string contain 0 , increment count by 1.
Else calculate using recursive function . Pass previous sum modulo 3 as 0.
Driver Code
Python3 program to find first palindromic permutation of given string
Function to count frequency of each char in the string . freq [ 0 ] for ' a ' , ... . , freq [ 25 ] for 'z
Cases to check whether a palindr0mic string can be formed or not
count_odd to count no of chars with odd frequency
For even length string no odd freq character
For odd length string one odd freq character
Function to find odd freq char and reducing its freq by 1 returns " " if odd freq char is not present
To find lexicographically first palindromic string .
Assigning odd freq character if present else empty string .
Traverse characters in increasing order
Divide all occurrences into two halves . Note that odd character is removed by findOddAndRemoveItsFreq ( )
creating front string
creating rear string
Final palindromic string which is lexicographically first
Driver code
Returns true if first and last characters of s are same .
Starting point of substring
Length of substring
Check if current substring has same starting and ending characters .
Driver code
Space efficient Python3 program to count all substrings with same first and last characters .
Iterating through all substrings in way so that we can find first and last character easily
Driver Code
Python3 program to find a missing number in a string of consecutive numbers without any separator .
gets the integer at position i with length m , returns it or - 1 , if none
Find value at index i and length m .
Returns value of missing number
Try all lengths for first number
Get value of first number with current length
To store missing number of current length
To indicate whether the sequence failed anywhere for current length .
Find subsequent numbers with previous number as n
If we haven 't yet found  the missing number for  current length. Next  number is n+2. Note  that we use Log10 as  (n+2) may have more  length than n.
If next value is ( n + 1 )
not found or no missing number
Driver code
function to find out the maximum repeating character in given string
Find the maximum repeating character starting from str [ i ]
Update result if required
Driver code
Function for finding sum of larger numbers
Before proceeding further , make sure length of str2 is larger .
Take an empty string for storing result
Calculate length of both string
Reverse both of strings
Do school mathematics , compute sum of current digits and carry
Calculate carry for next step
Add remaining digits of larger number
Add remaining carry
reverse resultant string
Driver code
Function for finding sum of larger numbers
Before proceeding further , make sure length of str2 is larger .
Take an empty string for storing result
Calculate length of both string
Initially take carry zero
Traverse from end of both strings
Do school mathematics , compute sum of current digits and carry
Add remaining digits of str2 [ ]
Add remaining carry
reverse resultant string
Driver code
Utility function to check if a string is a palindrome
Compare each character from starting with its corresponding character from last
Function to check if a palindrome pair exists
Consider each pair one by one
Concatenate both strings
Check if the concatenated string is palindrome
Check for other combination of the two strings
Driver code
Python3 program to print consecutive characters together in a line .
Driver Code
Returns true if all characters of str are unique . Assumptions : ( 1 ) str contains only characters from ' a ' to ' z ' ( 2 ) integers are stored using 32 bits
An integer to store presence / absence of 26 characters using its 32 bits
If bit corresponding to current character is already set
set bit in checker
Driver code
Return the count of words .
If word contain single letter , return 1.
Checking for first letter .
Traversing the string and multiplying for combinations .
If all three letters are same .
If two letter are distinct .
If all three letter are distinct .
Checking for last letter .
Driven Program
Find new value of x after replacing digit " from " to " to "
Required digit found , replace it
Returns maximum and minimum possible sums of x1 and x2 if digit replacements are allowed .
We always get minimum sum if we replace 6 with 5.
We always get maximum sum if we replace 5 with 6.
Driver code
Query type 1 : update str1ing position i with character x .
Pr " Yes " if range [ L . . R ] can form palindrome , else pr " No " .
Find the frequency of each character in S [ L ... R ] .
Checking if more than one character have frequency greater than 1.
Driver Code
Python3 program to Queries on substr1ing palindrome formation .
Return the frequency of the character in the i - th prefix .
Updating the BIT
Query to update the character in the str1ing .
Adding - 1 at L position
Updating the character
Adding + 1 at R position
Query to find if rearrangement of character in range L ... R can form palindrome
Checking on the first character of the str1ing S .
Checking if frequency of character is even or odd .
Creating the Binary Index Tree of all aphabet
Driver code
Finds if it is possible to partition str into two parts such that first part is divisible by a and second part is divisible by b .
Create an array of size lenn + 1 and initialize it with 0. Store remainders from left to right when divided by 'a
Compute remainders from right to left when divided by 'b
Find a pothat can partition a number
If split is not possible at this point
We can split at i if one of the following two is true . a ) All characters after str [ i ] are 0 b ) after str [ i ] is divisible by b , i . e . , str [ i + 1. . n - 1 ] is divisible by b .
Driver code
Function to find two 's complement
Traverse the string to get first '1' from the last of string
If there exists no '1' concatenate 1 at the starting of string
Continue traversal after the position of first '1
Just flip the values
return the modified string
Driver code
Function to find if given number is equal to length or not
Traverse string from end and find the number stored at the end . x is used to store power of 10.
Check if number is equal to string length except that number 's digits
Driver Code
Python 3 program for the above approach
Function to check k anagram of two strings
First Condition : If both the strings have different length , then they cannot form anagram
Converting str1 to Character Array arr1
Converting str2 to Character Array arr2
Sort arr1 in increasing order
Sort arr2 in increasing order
Iterate till str1 . length ( )
Condition if arr1 [ i ] is not equal to arr2 [ i ] then add it to list
Condition to check if strings for K - anagram or not
Driver Code
Function Call
Returns count of minimum characters to be removed to make s alternate .
if two alternating characters of string are same
result += 1 then need to delete a character
Driver code
Returns True if S can be converted to a with k repeated subs after replacing k characters .
Length of must be a multiple of k
Map to store s of length k and their counts
If is already a repetition of k subs , return True .
If number of distinct subs is not 2 , then not possible to replace a .
One of the two distinct must appear exactly once . Either the first entry appears once , or it appears n / k - 1 times to make other sub appear once .
Driver code
Since only lower case characters are there
Function to print the string
Initialize counts of all characters as 0
Count occurrences of all characters in string
Starts traversing the string
Print the character till its count in hash array
Make this character 's count value as 0.
Driver code
Python3 program to sort a string according to the order defined by a pattern string
Sort str according to the order defined by pattern .
Create a count array store count of characters in str .
Count number of occurrences of each character in str .
Traverse the pattern and print every characters same number of times as it appears in str . This loop takes O ( m + n ) time where m is length of pattern and n is length of str .
Driver code
Utility method to check str is possible palindrome after ignoring
If both left and right character are not dot and they are not equal also , then it is not possible to make this string a palindrome
Returns lexicographically smallest palindrome string , if possible
loop through character of string
if one of character is dot , replace dot with other character
if both character are dot , then replace them with smallest character 'a
return the result
Driver code
Utility method to flip a character
Utility method to get minimum flips when alternate string starts with expected char
if current character is not expected , increase flip count
flip expected character each time
method return minimum flip to make binary string alternate
return minimum of following two 1 ) flips when alternate string starts with 0 2 ) flips when alternate string starts with 1
Driver code to test above method
Function which return Remainder after dividing the number by 7
This series is used to find remainder with 7
Index of next element in series
Initialize result
Traverse num from end
Find current digit of num
Add next term to result
Move to next term in series
Make sure that result never goes beyond 7.
Make sure that remainder is positive
Driver Code
Returns true if str can be made empty by recursively removing sub_str .
idx : to store starting index of sub - string found in the original string
Erasing the found sub - string from the original string
Driver code
This function basically checks if string is palindrome or not
iterate from left and right
Driver Code
Python3 program to find if a string follows order defined by a given pattern
Returns true if characters of str follow order defined by a given ptr .
Initialize all orders as - 1
Assign an order to pattern characters according to their appearance in pattern
Give the pattern characters order
Increment the order
Now one by one check if string characters follow above order
If order of this character is less than order of previous , return false
Update last_order for next iteration
return that str followed pat
Driver Code
Python3 program to check if characters of a string follow pattern defined by given pattern .
Insert all characters of pattern in a hash set ,
Build modified string ( string with characters only from pattern are taken )
Remove more than one consecutive occurrences of pattern characters from modified string .
After above modifications , the length of modified string must be same as pattern length
And pattern characters must also be same as modified string characters
Driver Code
Function to find K 'th character in Encoded String
expand string variable is used to store final string after decompressing string str
Current substring freq = 0 Count of current substring
read characters until you find a number or end of string
push character in temp
read number for how many times string temp will be repeated in decompressed string
generating frequency of temp
now append string temp into expand equal to its frequency
this condition is to handle the case when string str is ended with alphabets not with numeric value
Driver Code
Function to calculate roman equivalent
Storing roman values of digits from 0 - 9 when placed at different places
Converting to roman
Driver code
A Function to find the string having the minimum length and returns that length
A Function that returns the longest common prefix from the array of strings
We will do an in - place binary search on the first string of the array in the range 0 to index
Same as ( low + high ) / 2 , but avoids overflow for large low and high
If all the strings in the input array contains this prefix then append this substring to our answer
And then go for the right part
Go for the left part
Driver Code
Converts a string to uppercase
Driver code
A Utility Function to find the common prefix between strings - str1 and str2
A Divide and Conquer based function to find the longest common prefix . This is similar to the merge sort technique
Same as ( low + high ) / 2 , but avoids overflow for large low and high
Driver Code
A Utility Function to find the common prefix between strings - str1 and str2
Compare str1 and str2
A Function that returns the longest common prefix from the array of strings
Driver Code
Function to find all strings formed from a given number where each digit maps to given characters .
vector of strings to store output
stores index of first occurrence of the digits in input
maintains index of current digit considered
for each digit
store index of first occurrence of the digit in the map
clear vector contents for future use
do for each character thats maps to the digit
for first digit , simply push all its mapped characters in the output list
from second digit onwards
for each string in output list append current character to it .
convert current character to string
Imp - If this is not the first occurrence of the digit , use same character as used in its first occurrence
store strings formed by current digit
nothing more needed to be done if this is not the first occurrence of the digit
replace contents of output list with temp list
Driver Code
vector to store the mappings
vector to store input number
print all possible strings
Returns '0' for '1' and '1' for '0
Print 1 ' s ▁ and ▁ 2' s complement of binary number represented by " bin "
for ones complement flip every bit
for two 's complement go from right  to left in ones complement and if  we get 1 make, we make them 0 and  keep going left when we get first  0, make that 1 and go out of loop
If No break : all are 1 as in 111 or 11111 in such case , add extra 1 at beginning
Driver Code
Function for zig - zag Concatenation
Check is n is less or equal to 1
Iterate rowNum from 0 to n - 1
Iterate i till s . length ( ) - 1
Check is rowNum is 0 or n - 1
Driver Code
Function to print given string in cross pattern
i and j are the indexes of characters to be displayed in the ith iteration i = 0 initially and go upto length of string j = length of string initially in each iteration of i , we increment i and decrement j , we print character only of k == i or k == j
driver code
Python program recursively print all sentences that can be formed from list of word lists
A recursive function to print all possible sentences that can be formed from a list of word list
Add current word to output array
If this is last word of current output sentence , then print the output sentence
Recur for next row
A wrapper over printUtil
Create an array to store sentence
Consider all words for first row as starting points and print all sentences
Driver program
Python3 implementation to check if characters of a given string can be rearranged to form a palindrome
function to check whether characters of a string can form a palindrome
Create a count array and initialize all values as 0
For each character in input strings , increment count in the corresponding count array
Count odd occurring characters
Return true if odd count is 0 or 1 ,
Driver code
This function generates all n bit Gray codes and prints the generated codes
Base case
Recursive case
Append 0 to the first half
Append 1 to the second half
Function to generate the Gray code of N bits
Print contents of arr
Driver Code
Python program to check if two strings are anagrams of each other
Function to check whether two strings are anagram of each other
Create two count arrays and initialize all values as 0
For each character in input strings , increment count in the corresponding count array
If both strings are of different length . Removing this condition will make the program fail for strings like " aaca " and " aca "
Compare count arrays
Driver code
Function call
Python3 program to find the smallest window containing all characters of a pattern .
Function to find smallest window containing all characters of 'pat
Check if string ' s ▁ length ▁ is ▁ ▁ less ▁ than ▁ pattern ' s length . If yes then no such window can exist
Store occurrence ofs characters of pattern
Start traversing the string count = 0 count of characters
count occurrence of characters of string
If string ' s ▁ char ▁ matches ▁ with ▁ ▁ pattern ' s char then increment count
if all the characters are matched
Try to minimize the window
update window size
If no window found
Return substring starting from start_index and length min_len
Driver code
Python 3 program to remove duplicates
we extract every character of string string 2
we find char exit or not
if char exit we simply remove that char
Driver Code
Python3 program to remove duplicate character from character array and prin sorted order
Used as index in the modified string
Traverse through all characters
Check if str [ i ] is present before it
If not present , then add it to result .
Driver code
A boolean function that returns true if it 's possible to completely fill the container else return false
Base Case
Backtracking
Function to check the conditions
Storing frequencies
Function Call for backtracking
Driver Code
Given Input
Function Call
Function to find the maximum Bitwise XOR of any subset of the array of size K
Number of node must K + 1 for K edges
Stores the maximum Bitwise XOR
Generate all subsets of the array
__builtin_popcount ( ) returns the number of sets bits in an integer
Initialize current xor as 0
If jth bit is set in i then include jth element in the current xor
Update the maximum Bitwise XOR obtained so far
Return the maximum XOR
Driver Code
Python program for the above approach
Function to print order of movement of N disks across three rods to place all disks on the third rod from the first - rod using binary representation
Iterate over the range [ 0 , 2 ^ N - 1 ]
Print the movement of the current rod
Driver Code
Python3 program for the above approach
Function to check if it is valid to move to the given index or not
Otherwise return false
Function to check if there exists a path from the cell ( X , Y ) of the matrix to any boundary cell with sum of elements at most K or not
Base Case
If K >= board [ X ] [ Y ]
Stores the current element
Mark the current cell as visited
Visit all the adjacent cells
Mark the cell unvisited
Return false
Driver Code
Function to check is a given number is a perfect number or not
Stores sum of divisors
Add all divisors of x to sum_div
If the sum of divisors is equal to the given number , return true
Otherwise , return false
Function to find the sum of all the subsets from an array whose sum is a perfect number
Stores the total number of subsets , i . e . 2 ^ n
Consider all numbers from 0 to 2 ^ n - 1
Consider array elements from positions of set bits in the binary representation of n
If sum of chosen elements is a perfect number
Driver Code
Recursive function to play Game
Box is empty , Game Over ! or Both have quit , Game Over !
P1 moves
P2 moves
Increment X
Switch moves between P1 and P2
Function to find the number of pens remaining in the box and calculate score for each player
Score of P1
Score of P2
Initialized to zero
Move = 0 , P1 ' s ▁ turn ▁ ▁ Move ▁ = ▁ 1 , ▁ P2' s turn
Has P1 quit
Has P2 quit
Recursively continue the game
Driver Code
Function that recursively finds the possible numbers and append into ans
Base Case
Check the sum of last digit and k less than or equal to 9 or not
If k == 0 , then subtraction and addition does not make any difference Hence , subtraction is skipped
Function to call checkUntil function for every integer from 1 to 9
check_util function recursively store all numbers starting from i
Function to print the all numbers which satisfy the conditions
Driver Code
Given N and K
To store the result
Function call
Print resultant numbers
Stores minimum - cost of path from source
Function to Perform BFS on graph g starting from vertex v
If destination is reached
Set flag to true
Visit all the intermediate nodes
If any intermediate node is not visited
If all intermediate nodes are visited
Update the minSum
Mark the current node visited
Traverse adjacent nodes
Mark the neighbour visited
Find minimum cost path considering the neighbour as the source
Mark the neighbour unvisited
Mark the source unvisited
Driver Code
Stores the graph
Number of nodes
Source
Destination
Keeps a check on visited and unvisited nodes
Stores intemediate nodes
If no path is found
Function to find all the subsequences of a given length and having sum S
Termination condition
Add value to sum
Check if the resultant sum equals to target sum
If true
Print resultant array
End this recursion stack
Check all the combinations using backtracking
Check all the combinations using backtracking
Driver code
Given array
To store the subsequence
Function call
Static variable for changing Row and column
Flag variable for handling Bottum up diagonal traversing
Recursive function to traverse the matrix Diagonally Bottom - up
Base Condition
Condition when to traverse Bottom Diagonal of the matrix
Print matrix cell value
Recursive function to traverse The matrix diagonally
Recursive function to change diagonal
Initialize the 5 x 5 matrix
Function call for traversing matrix
Python3 implementation to find the minimum colors required to such that edges forming cycle don 't have same color
Variable to store the graph
To store that the vertex is visited or not
Boolean Value to store that graph contains cycle or not
Variable to store the color of the edges of the graph
Function to traverse graph using DFS Traversal
Loop to iterate for all edges from the source vertex
If the vertex is not visited
Condition to check cross and forward edges of the graph
Presence of Back Edge
Driver Code
Loop to run DFS Traversal on vertex which is not visited
Loop to print the colors of the edges
Function to print the subsets whose sum is equal to the given target K
Create the new array with size equal to array set [ ] to create binary array as per n ( decimal number )
Convert the array into binary array
Calculate the sum of this subset
Check whether sum is equal to target if it is equal , then print the subset
Function to find the subsets with sum K
Calculate the total no . of subsets
Run loop till total no . of subsets and call the function for each subset
Driver code
Python3 implementation of the approach
To store factorial values
Function to return ncr
Function to return the required sum
Initialising factorial
Multiplier
Finding the value of multipler according to the formula
To store the final answer
Calculate the final answer
Driver code
Python3 implementation of the approach
Function to return the count of possible paths in a maze [ R ] [ C ] from ( 0 , 0 ) to ( R - 1 , C - 1 ) that do not pass through any of the marked cells
If the initial cell is blocked , there is no way of moving anywhere
Initializing the leftmost column
If we encounter a blocked cell in leftmost row , there is no way of visiting any cell directly below it .
Similarly initialize the topmost row
If we encounter a blocked cell in bottommost row , there is no way of visiting any cell directly below it .
The only difference is that if a cell is - 1 , simply ignore it else recursively compute count value maze [ i ] [ j ]
If blockage is found , ignore this cell
If we can reach maze [ i ] [ j ] from maze [ i - 1 ] [ j ] then increment count .
If we can reach maze [ i ] [ j ] from maze [ i ] [ j - 1 ] then increment count .
If the final cell is blocked , output 0 , otherwise the answer
Function to return the count of all possible paths from ( 0 , 0 ) to ( n - 1 , m - 1 )
We have to calculate m + n - 2 C n - 1 here which will be ( m + n - 2 ) ! / ( n - 1 ) ! ( m - 1 ) !
Function to return the total count of paths from ( 0 , 0 ) to ( n - 1 , m - 1 ) that pass through at least one of the marked cells
Total count of paths - Total paths that do not pass through any of the marked cell
return answer
Driver code
Maze size
A utility function to prsolution matrix sol
A utility function to check if x , y is valid index for N * N maze
if ( x , y outside maze ) return false
This function solves the Maze problem using Backtracking . It mainly uses solveMazeUtil ( ) to solve the problem . It returns false if no path is possible , otherwise return True and prints the path in the form of 1 s . Please note that there may be more than one solutions , this function prints one of the feasible solutions .
A recursive utility function to solve Maze problem
if ( x , y is goal ) return True
Check if maze [ x ] [ y ] is valid
mark x , y as part of solution path
Move forward in x direction
Move forward in x direction
If moving in x direction doesn 't give  solution then Move down in y direction 
If none of the above movements work then BACKTRACK : unmark x , y as part of solution path
Driver Code
Python Program to print all N primes after prime P whose sum equals S
vector to store prime and N primes whose sum equals given S
function to check prime number
square root of x
since 1 is not prime number
if any factor is found return false
no factor found
function to display N primes whose sum equals S
function to evaluate all possible N primes whose sum equals S
if total equals S And total is reached using N primes
display the N primes
if total is greater than S or if index has reached last element
add prime [ index ] to set vector
include the ( index ) th prime to total
remove element from set vector
exclude ( index ) th prime
function to generate all primes
all primes less than S itself
if i is prime add it to prime vector
if primes are less than N
Driver Code
we have 2 choices for each of the n bits either we can include i . e invert the bit or we can exclude the bit i . e we can leave the number as it is .
base case when we run out bits to process we simply include it in gray code sequence .
ignore the bit .
invert the bit .
returns the vector containing the gray code sequence of n bits .
num is passed by reference to keep track of current code .
Driver Code
* array - given input array subsetSum array - sum to store each subset of the array taken - ean array to check whether element is taken into sum partition or not K - number of partitions needed N - total number of element in array curIdx - current subsetSum index limitIdx - lastIdx from where array element should be taken
current index ( K - 2 ) represents ( K - 1 ) subsets of equal sum last partition will already remain with sum 'subset
recursive call for next subsetition
start from limitIdx and include elements into current partition
if already taken , continue
if temp is less than subset , then only include the element and call recursively
mark the element and include into current partition sum
after recursive call unmark the element and remove from subsetition sum
Method returns True if arr can be partitioned into K subsets with equal sum
If K is 1 , then complete array will be our answer
If total number of partitions are more than N , then division is not possible
if array sum is not divisible by K then we can 't divide array into K partitions 
the sum of each subset should be subset ( = sum / K )
Initialize sum of each subset from 0
mark all elements as not taken
initialize first subsubset sum as last element of array and mark that as taken
call recursive method to check K - substitution condition
Driver Code
Method checks if character is parenthesis ( openor closed )
method returns true if contains valid parenthesis
method to remove invalid parenthesis
visit set to ignore already visited
queue to maintain BFS
pushing given as starting node into queu
If answer is found , make level true so that valid of only that level are processed .
Removing parenthesis from str and pushing into queue , if not visited already
Driver Code
Python3 program to solve N Queen Problem using backtracking
ld is an array where its indices indicate row - col + N - 1 ( N - 1 ) is for shifting the difference to store negative indices
rd is an array where its indices indicate row + col and used to check whether a queen can be placed on right diagonal or not
column array where its indices indicates column and used to check whether a queen can be placed in that row or not
A utility function to print solution
A recursive utility function to solve N Queen problem
base case : If all queens are placed then return True
Consider this column and try placing this queen in all rows one by one
A check if a queen can be placed on board [ row ] [ col ] . We just need to check ld [ row - col + n - 1 ] and rd [ row + coln ] where ld and rd are for left and right diagonal respectively
Place this queen in board [ i ] [ col ]
recur to place rest of the queens
board [ i ] [ col ] = 0 BACKTRACK
If the queen cannot be placed in any row in this colum col then return False
This function solves the N Queen problem using Backtracking . It mainly uses solveNQUtil ( ) to solve the problem . It returns False if queens cannot be placed , otherwise , return True and prints placement of queens in the form of 1 s . Please note that there may be more than one solutions , this function prints one of the feasible solutions .
Driver Code
Function to print pairs
Initializing the rem values with 0 's.
Perform the remainder operation only if the element is x , as numbers greater than x can 't  be used to get a sum x.Updating  the count of remainders.
Traversing the remainder list from start to middle to find pairs
The elements with remainders i and x - i will result to a sum of x . Once we get two elements which add up to x , we print x and break .
Once we reach middle of remainder array , we have to do operations based on x .
If x is even and we have more than 1 elements with remainder x / 2 , then we will have two distinct elements which add up to x . if we dont have than 1 element , print " No " .
When x is odd we continue the same process which we did in previous loop .
Driver Code
Function calling
Function to calculate factorial of a Number
Calculating factorial
Returning factorial
Function to calculate resultant remainder
Function call to calculate factorial of n
Calculating remainder
Returning resultant remainder
Driver Code
Given Input
Function Call
Function to check if a number N can be expressed in base B
Check if n is greater than 0
Initialize a boolean variable
Check if digit is 0 or 1
Subtract the appropriate power of B from it and increment higher digit
Driver code
Given number N and base B
Function call
Python3 program for the above approach
Function to find 2 ^ x using modular exponentiation
Base cases
If B is even
If B is odd
Function to count the number of ways to form the group having one leader
Find 2 ^ ( N - 1 ) using modular exponentiation
Count total ways
Print the total ways
Driver code
Given N number of people
Function call
Python program to find number of perfect square numbers in a subarray and performing updates
Function to check if a number is a perfect square or not
Find floating point value of square root of x .
If square root is an integer
A utility function to get the middle index from corner indexes .
where st -- > Pointer to segment tree index -- > Index of current node in the segment tree . Initially 0 is passed as root is always at index 0 ss & se -- > Starting and ending indexes of the segment represented by current node i . e . st [ index ] qs & qe -- > Starting and ending indexes of query range
If segment of this node is a part of given range , then return the number of perfect square numbers in the segment
If segment of this node is outside the given range
If a part of this segment overlaps with the given range
where st , si , ss & se are same as getSumUtil ( ) i -- > index of the element to be updated . This index is in input array . diff -- > Value to be added to all nodes which have i in range
Base Case : If the input index lies outside the range of this segment
If the input index is in range of this node , then update the value of the node and its children
Function to update a value in the input array and segment tree . It uses updateValueUtil ( ) to update the value in segment tree
Check for erroneous input index
Update the value in array
Case 1 : Old and new values both are perfect square numbers
Case 2 : Old and new values both not perfect square numbers
Case 3 : Old value was perfect square , new value is not a perfect square
Case 4 : Old value was non - perfect square , new_val is perfect square
Update values of nodes in segment tree
Return no . of perfect square numbers in range from index qs ( query start ) to qe ( query end ) . It mainly uses queryUtil ( )
Recursive function that constructs Segment Tree for array [ ss . . se ] . si is index of current node in segment tree st
If there is one element in array , check if it is perfect square number then store 1 in the segment tree else store 0 and return
if arr [ ss ] is a perfect square number
If there are more than one elements , then recur for left and right subtrees and store the sum of the two values in this node
Function to construct a segment tree from given array . This function allocates memory for segment tree and calls constructSTUtil ( ) to fill the allocated memory
Allocate memory for segment tree Height of segment tree
Maximum size of segment tree
Fill the allocated memory st
Return the constructed segment tree
Driver Code
Build segment tree from given array
Query 1 : Query ( start = 0 , end = 4 )
Query 2 : Update ( i = 3 , x = 11 ) , i . e Update a [ i ] to x
Query 3 : Query ( start = 0 , end = 4 )
Structure to store two values in one node
Function that returns the count of set bits in a number
Parity will store the count of set bits
Function to build the segment tree
Condition to check if there is only one element in the array
If there are more than one elements , then recur for left and right subtrees
Condition to check the maximum set bits is greater in two subtrees
Condition when maximum set bits are equal in both subtrees
Function to do the range query in the segment tree
If segment of this node is outside the given range , then return the minimum value .
If segment of this node is a part of given range , then return the node of the segment
If left segment of this node falls out of range , then recur in the right side of the tree
If right segment of this node falls out of range , then recur in the left side of the tree
If a part of this segment overlaps with the given range
Returns the value
Driver code
Calculates the length of array
Build Segment Tree
Find the max set bits value between 1 st and 4 th index of array
Find the max set bits value between 0 th and 2 nd index of array
Python program for the given problem
Class for each node in the segment tree
A utility function for merging two nodes
utility function for updating a node
A recursive function that constructs Segment Tree for given string
If start is equal to end then insert the array element
Build the segment tree for range qs to mid
Build the segment tree for range mid + 1 to qe
merge the two child nodes to obtain the parent node
Query in a range qs to qe
If the range lies in this segment
If the range is out of the bounds of this segment
Else query for the right and left child node of this subtree and merge them
range update using lazy prpagation
If the range is out of the bounds of this segment
If the range lies in this segment
Else query for the right and left child node of this subtree and merge them
Driver code
Build the segment tree
Query of Type 2 in the range 3 to 7
Query of Type 3 in the range 2 to 5
Query of Type 1 in the range 1 to 4
Query of Type 4 in the range 3 to 7
Query of Type 5 in the range 4 to 9
Python3 implementation of the approach
Function to multiply two 7 * 7 matrix
Function to perform matrix exponentiation
7 * 7 identity matrix
Loop to find the power
Function to return the required count
Base cases
Multiplier matrix
Finding the required multiplier i . e mul ^ ( X - 6 )
Final answer
Driver code
Function that returns true if the prisoners can be placed such that the minimum distance between any two prisoners is at least sep
Considering the first prisoner is placed at 1 st cell
If the first prisoner is placed at the first cell then the last_prisoner_placed will be the first prisoner placed and that will be in cell [ 0 ]
Checking if the prisoner can be placed at ith cell or not
If all the prisoners got placed then return true
Function to return the maximized distance
Sort the array so that binary search can be applied on it
Minimum possible distance for the search space
Maximum possible distance for the search space
To store the result
Binary search
If the prisoners can be placed such that the minimum distance between any two prisoners is at least mid
Update the answer
Driver code
Function to return the row and the column of the given integer
Binary search for the row number
Condition to get the maximum x that satisfies the criteria
Binary search for the column number
Condition to get the maximum y that satisfies the criteria
Get the row and the column number
Return the pair
Driver code
Function to perform queries in a range
No overlap
Totally Overlap
Partial Overlap
Finding the Answer for the left Child
Finding the Answer for the right Child
Combining the BitMasks
Function to perform update operation in the Segment seg
Forming the BitMask
Updating the left Child
Updating the right Child
Updating the BitMask
Building the Segment Tree
Building the Initial BitMask
Building the left seg tree
Building the right seg tree
Forming the BitMask
Utility Function to answer the queries
Counting the set bits which denote the distinct elements
Updating the value
Driver Code
Python3 implementation of the approach
Array to store segment - tree
Function to build segment - tree to answer range GCD queries
Base - case
Mid element of the range
Merging the result of left and right sub - tree
Function to perform range GCD queries
Base - cases
Mid - element
Calling left and right child
Function to find the required length
Buildinng the segment tree
Two pointer variables
To store the final answer
Loopinng
Incrementing j till we don 't get a gcd value of 1
Updating the final answer
Incrementing i
Updating j
Returning the final answer
Driver code
Function to find the n x n matrix that satisfies the given condition
Initialize x to 0
Divide the n x n matrix into n / 4 matrices for each of the n / 4 rows where each matrix is of size 4 x 4
Print the generated matrix
Driver code
Node of a linked list
Array to store segment tree
Function to create segment - tree to answer range - max query
Base case
Maximum index in left range
Maximum index in right range
If value at l1 > r1
Else
Returning the maximum in range
Function to answer range max query
Base cases
Maximum in left range
Maximum in right range
l1 = - 1 means left range was out - side required range
Returning the maximum among two ranges
Function to print the inorder traversal of the binary tree
Base case
Traversing the left sub - tree
Printing current node
Traversing the right sub - tree
Function to build cartesian tree
Base case
Maximum in the range
Creating current node
Creating left sub - tree
Creating right sub - tree
Returning current node
In - order traversal of cartesian tree
Size of the array
Building the segment tree
Building && printing cartesian tree
Function to return the kth smallest element from the array
Minimum and maximum element from the array
Modified binary search
To store the count of elements from the array which are less than mid and the elements which are equal to mid
If mid is the kth smallest
If the required element is less than mid
If the required element is greater than mid
Driver code
Iterating from lower_bound to upper_bound
Input the response from the judge
Python3 implementation of the approach
To store segment tree
To store pending updates
si -> index of current node in segment tree ss and se -> Starting and ending indexes of elements for which current nodes stores sum us and ue -> starting and ending indexes of update query diff -> which we need to add in the range us to ue
If lazy value is non - zero for current node of segment tree , then there are some pending updates . So we need to make sure that the pending updates are done before making new updates . Because this value may be used by parent after recursive calls ( See last line of this function )
Make pending updates using value stored in lazy nodes
Checking if it is not leaf node because if it is leaf node then we cannot go further
We can postpone updating children we don 't need their new values now.  Since we are not yet updating children of si,  we need to set lazy flags for the children
Set the lazy value for current node as 0 as it has been updated
Out of range
Current segment is fully in range
Add the difference to current node
Same logic for checking leaf node or not
This is where we store values in lazy nodes , rather than updating the segment tree itelf Since we don 't need these updated values now  we postpone updates by storing values in lazy[]
If not completely in range , but overlaps recur for children
And use the result of children calls to update this node
Function to update a range of values in segment tree us and eu -> starting and ending indexes of update query ue -> ending index of update query diff -> which we need to add in the range us to ue
A recursive function to get the sum of values in a given range of the array . The following are the parameters for this function si -- > Index of the current node in the segment tree Initially , 0 is passed as root is always at index 0 ss & se -- > Starting and ending indexes of the segment represented by current node i . e . , tree [ si ] qs & qe -- > Starting and ending indexes of query range
If lazy flag is set for current node of segment tree then there are some pending updates . So we need to make sure that the pending updates are done before processing the sub sum query
Make pending updates to this node . Note that this node represents sum of elements in arr [ ss . . se ] and all these elements must be increased by lazy [ si ]
Checking if it is not leaf node because if it is leaf node then we cannot go further
Since we are not yet updating children os si , we need to set lazy values for the children
Unset the lazy value for current node as it has been updated
Out of range
If this segment lies in range
If a part of this segment overlaps with the given range
Return sum of elements in range from index qs ( querystart ) to qe ( query end ) . It mainly uses getSumUtil ( )
Check for erroneous input values
A recursive function that constructs Segment Tree for array [ ss . . se ] . si is index of current node in segment tree st .
out of range as ss can never be greater than se
If there is one element in array , store it in current node of segment tree and return
If there are more than one elements , then recur for left and right subtrees and store the sum of values in this node
Function to construct a segment tree from a given array . This function allocates memory for segment tree and calls constructSTUtil ( ) to fill the allocated memory
Fill the allocated memory st
Driver code
Build segment tree from given array
Add 4 to all nodes in index range [ 0 , 3 ]
Print maximum element in index range [ 1 , 4 ]
Function to return 2 ^ ( 2 ^ A ) % B
Base case , 2 ^ ( 2 ^ 1 ) % B = 4 % B
Driver code
Print 2 ^ ( 2 ^ A ) % B
Python3 implementation of the approach
Function to return the required sum
If range is valid
Sum of AP
Driver code
Python3 implementation of the approach
To store the random permutation
Utility function to print the generated permutation
Function to return a random number between x and y
Recursive function to generate the random permutation
Base condition
Random number returned from the function
Inserting random number in vector
Recursion call for [ l , n - 1 ]
Recursion call for [ n + 1 , r ]
Driver code
Generate permutation
Print the generated permutation
Python3 implementation of the above approach
Function to count sum of set bits of all numbers till N
Function to find the minimum number
Binary search for the lowest number
Find mid number
Check if it is atleast x
Driver Code
Python3 program to calculate sum of factorials in an interval and update with two types of operations
Modulus
Maximum size of input array
Size for factorial array
structure for queries with members type , leftIndex , rightIndex of the query
function for updating the value
function for calculating the required sum between two indexes
function to return answer to queries
Precomputing factorials
Declaring a Set
inserting indexes of those numbers which are lesser than 40
update query of the 1 st type
find the left index of query in the set using binary search
if it crosses the right index of query or end of set , then break
update the value of arr [ i ] to its new value
if updated value becomes greater than or equal to 40 remove it from the set
increment the index
update query of the 2 nd type
update the value to its new value
If the value is less than 40 , insert it into set , otherwise remove it
sum query of the 3 rd type
Driver Code
input array using 1 - based indexing
declaring array of structure of type queries
answer the Queries
Function to calculate trailing zeros
binary search for first number with n trailing zeros
Print all numbers after low with n trailing zeros .
Print result
Driver code
Utility method to get sum of first n numbers
Method returns minimum number of days after which tank will become empty
if water filling is more than capacity then after C days only tank will become empty
initialize binary search variable
loop until low is less than high
if cumulate sum is greater than ( C - l ) then search on left side
if ( C - l ) is more then search on right side
Final answer will be obtained by adding l to binary search result
Driver code
Python3 code to find number of days after which tank will become empty
Method returns minimum number of days after which tank will become empty
Driver code
Program to find kth element from two sorted arrays
Driver code
Python program to find k - th element from two sorted arrays
Python3 program to find kth element from two sorted arrays
In case we have reached end of array 1
In case we have reached end of array 2
k should never reach 0 or exceed sizes of arrays
Compare first elements of arrays and return
Size of array 1 is less than k / 2
Last element of array 1 is not kth We can directly return the ( k - m ) th element in array 2
Size of array 2 is less than k / 2
Normal comparison , move starting index of one array k / 2 to the right
Driver code
Python3 implementation to search an element in a sorted matrix
This function does Binary search for x in i - th row . It does the search from mat [ i ] [ j_low ] to mat [ i ] [ j_high ]
Element found
Element not found
Function to perform binary search on the mid values of row to get the desired pair of rows where the element can be found
Single row matrix
Do binary search in middle column . Condition to terminate the loop when the 2 desired rows are found
element found
If element is present on the mid of the two rows
search element on 1 st half of 1 st row
Search element on 2 nd half of 1 st row
Search element on 1 st half of 2 nd row
Search element on 2 nd half of 2 nd row
Driver program to test above
Return smallest element greater than or equal to the current element .
Return the minimum absolute difference adjacent elements of array
arr = [ 0 for i in range ( R ) ] [ for j in range ( C ) ] Sort each row of the matrix .
For each matrix element
Search smallest element in the next row which is greater than or equal to the current element
largest element which is smaller than the current element in the next row must be just before smallest element which is greater than or equal to the current element because rows are sorted .
Driver Program
Function to find bitonic point using binary search
base condition to check if arr [ mid ] is bitonic point or not
We assume that sequence is bitonic . We go to right subarray if middle point is part of increasing subsequence . Else we go to left subarray .
Driver Code
Returns index of second appearance of a repeating element The function assumes that array elements are in range from 1 to n - 1.
low = 0 , high = n - 1
Check if the mid element is the repeating one
If mid element is not at its position that means the repeated element is in left
If mid is at proper position then repeated one is in right .
Driver code
Returns the absolute value of n - mid * mid * mid
Returns cube root of a no n
Set start and end for binary search
Set precision
If error is less than e then mid is our answer so return mid
If mid * mid * mid is greater than n set end = mid
If mid * mid * mid is less than n set start = mid
Driver code
A recursive function to count number of occurrences for each element in the array without traversing the whole array
If element at index low is equal to element at index high in the array
increment the frequency of the element by count of elements between high and low
Find mid and recurse for left and right subarray
A wrapper over recursive function findFrequencyUtil ( ) . It print number of occurrences of each element in the array .
create a empty vector to store frequencies and initialize it by 0. Size of vector is maximum value ( which is last value in sorted array ) plus 1.
Fill the vector with frequency
Print the frequencies
Driver Code
Returns floor of square root of x
Base cases
Starting from 1 , try all numbers until i * i is greater than or equal to x .
Driver Code
Function to find the maximum number of overlapping rectangles
Stores the maximum count of overlapping rectangles
Stores the X and Y coordinates
Iterate over all pairs of Xs and Ys
Store the count for the current X and Y
Update the maximum count of rectangles
Returns the total count
Driver Code
Python program for above approach Node Class
Constructor to initialize the node object
Linked List class
Constructor to initialize head
function to form square linked list of matrix .
initialising A [ 0 ] [ 0 ] as head .
head is assigned to head .
i is row index , j is column index
loop till temp . top become equal to head .
iterating over first i . e 0 th row and connecting node .
iterating over last i . e ( m - 1 ) th column and connecting Node .
iterating over last i . e ( n - 1 ) th row and connecting Node .
iterating over first i . e 0 th column and connecting Node .
function to print Linked list .
printing head of linked list
loop till temp . top become equal to head
printing the node
Driver Code
n is number of rows
m is number of column
creation of object
Call Quad method to create Linked List .
Call printList method to print list .
Python program for the above approach
Function to check if the po ( X , Y ) is reachable from ( 0 , 0 ) or not
Find the Euclidian Distance
Calculate the maximum distance
Case 1.
Case 2.
Otherwise , check for the polygon condition for each side
Otherwise , prYes
Driver Code
Function to find whether ( 0 , 0 ) can be reached from ( X , Y ) by decrementing 3 ^ i at each ith step
Termination Condition
Otherwise , recursively call by decrementing 3 ^ i at each step
Driver Code
Function to find whether ( 0 , 0 ) can be reached from ( X , Y ) by decrementing 3 ^ i at each ith step
Stores the number of steps performed to reach ( X , Y )
Value of X in base 3
Value of Y in base 3
Check if any has value 2
If both have value 1
If both have value 0
Otherwise , return true
Driver Code
Python3 program for the above approach
Function to find the surface area of the given Ellipsoid
Formula to find surface area of an Ellipsoid
Print the area
Driver Code
Python 3 implementation of the above formulae
Function to find the fourth circle 's when three radius are given
Driver code
Radius of three circles
Calculation of r4 using formula given above
Function to make N pairs of coordinates such that they are enclosed in a minimum area rectangle with sides parallel to the X and Y axes
A variable to store the answer
For the case where the maximum and minimum are in different partitions
For the case where the maximum and minimum are in the same partition
Return the answer
Driver code
Given Input
Function call
Function to calculate the length of the latus rectum of a hyperbola
Store the length of major axis
Store the length of minor axis
Store the length of the latus rectum
Return the length of the latus rectum
Driver Code
Python3 program for the above approach
Function to find the radius of a circle
g and f are the coordinates of the center
Case of invalid circle
Apply the radius formula
Function to find the perpendicular distance between circle center and the line
Store the coordinates of center
Stores the perpendicular distance between the line and the point
Invalid Case
Return the distance
Function to find the length of intercept cut off from a line by a circle
Calculate the value of radius
Calculate the perpendicular distance between line and center
Invalid Case
If line do not cut circle
Print the intercept length
Driver Code
Given Input
Function Call
Function to check position of two points with respect to a plane in 3D
Put coordinates in plane equation
If both values have same sign
If both values have different sign
If both values are zero
If either of the two values is zero
Driver Code
Given Input
Coordinates of points
Function Call
Function to check if any pairs of the semicircles intersects or not
Stores the coordinates of all the semicircles
x and y are coordinates
Store the minimum and maximum value of the pair
Push the pair in vector
Compare one pair with other pairs
Generating the second pair
Extract all the second pairs one by one
1 st condition
2 nd condition
If any one condition is true
If any pair of semicircles doesn 't exists
Driver Code
Python 3 program for the above approach
Function to find the distance between center and the exterior point
Find the difference between the x and y coordinates
Using the distance formula
Function to find the angle between the pair of tangents drawn from the point ( X2 , Y2 ) to the circle .
Calculate the distance between the center and exterior point
Invalid Case
Find the angle using the formula
Print the resultant angle
Driver Code
Python3 code for the above approach
Function to calculate the ratio of area of N - th and ( N + 1 ) - th nested polygons formed by connecting midpoints
Stores the value of PI
Calculating area the factor
Printing the ratio precise upto 6 decimal places
Driver Code
Python3 program for the above approach
Function to calculate the interior angle of a N - sided regular polygon
Function to find the K - th polygon formed inside the ( K - 1 ) th polygon
Stores the interior angle
Stores the side length of K - th regular polygon
Return the length
Driver Code
Python3 program for the above approach
Function to find the angle between two lines
Store the tan value of the angle
Calculate tan inverse of the angle
Convert the angle from radian to degree
Print the result
Driver Code
Function to find the cosine of the angle of the intersection of two circles with radius R1 and R2
Return the cosine of the angle
Driver Code
Function to check if there exists any point with at most K distance from N given points
Traverse the given n points
Stores the count of pairs of coordinates having Manhattan distance <= K
For the same coordinate
Calculate Manhattan distance
If Manhattan distance <= K
If all coordinates can meet
If all coordinates can 't meet
Driver code
Function to find the minimum area of triangle formed by any tangent to ellipse with the coordinate axes
Stores the minimum area
Print the calculated area
Driver Code
Python3 program for the above approach
Function to find the interior angles of the cyclic quadrilateral
Stores the numerator and the denominator to find angle A
Stores the numerator and the denominator to find angle B
Stores the numerator and the denominator to find angle C :
Stores the numerator and the denominator to find angle D :
Driver Code
Python3 program for the above approach
Function to count number of smaller circles that can be inscribed in the larger circle touching its boundary
If R2 is greater than R1
Stores the angle made by the smaller circle
Stores the ratio of R2 / ( R1 - R2 )
Stores the count of smaller circles that can be inscribed
Stores the ratio
If the diameter of smaller circle is greater than the radius of the larger circle
Otherwise
Find the angle using formula
Divide 360 with angle and take the floor value
Return the final result
Driver Code
Function to find the number of pairs of points such that the line passing through them has a slope in the range [ - k , k ]
Store the result
Traverse through all the combination of points
If pair satisfies the given condition
Increment ans by 1
Print the result
Driver Code
Function Call
Function to count the number of largest circles in a rectangle
If length exceeds breadth
Swap to reduce length to smaller than breadth
Return total count of circles inscribed
Driver Code
Python3 program for the above approach
Function to find the length of the diagonal of a square of a given side
Driver Code
Python 3 program for the above approach
Function to calculate area of the isosceles triangle
If a and b are negative
Stores the area of the triangle
Print the area
Driver code
Given value of a & b
Function call to find the area of the isosceles triangle
Python3 implementation of above approach
Function to find answer of each query
Stores the count of points with sum less than or equal to their indices
Traverse the array
` If both x and y - coordinate < 0
Stores the sum of co - ordinates
Increment count of sum by 1
Prefix array
Perform queries
Drivers Code
Function to check if two rectangles are intersecting or not
If one rectangle is to the right of other 's right edge
If one rectangle is on the top of other 's top edge
Function to return the perimeter of the Union of Two Rectangles
Stores the resultant perimeter
If rectangles do not interesect
Perimeter of Rectangle 1
Perimeter of Rectangle 2
If the rectangles intersect
Get width of combined figure
Get length of combined figure
Return the perimeter
Driver Code
Function to check if two lines are parallel or not
If slopes are equal
Driver Code
Function Call
Python3 program for the above approach
Function to convert given angle from degree to radian
Function to calculate height and area of the triangle OAB
Stores the angle OAB and OBA
Stores the angle in radians
Stores the height
Print height of the triangle
Stores the base of triangle OAB
Stores the area of the triangle
Print the area of triangle OAB
Driver Code
Function to calculate radius of the circle having area equal to sum of the area of two circles with given radii
Area of first circle
Area of second circle
Area of third circle
Radius of third circle
Driver code
Given radius
Prints the radius of the required circle
Function to calculate and return LCM of a , b , and c
Find GCD of a and b
Find LCM of a and b
LCM ( a , b , c ) = LCM ( LCM ( a , b ) , c )
Finding LCM of a , b , c
return LCM ( a , b , c )
Function to find the minimum number of cuboids required to make the volume of a valid cube
Find the LCM of L , B , H
Volume of the cube
Volume of the cuboid
Minimum number cuboids required to form a cube
Driver Code
Given dimensions of cuboid
Function Call
Utility function to find cross product of two vectors
Stores coefficient of X direction of vector A [ 1 ] A [ 0 ]
Stores coefficient of Y direction of vector A [ 1 ] A [ 0 ]
Stores coefficient of X direction of vector A [ 2 ] A [ 0 ]
Stores coefficient of Y direction of vector A [ 2 ] A [ 0 ]
Return cross product
Function to check if the polygon is convex polygon or not
Stores count of edges in polygon
Stores direction of cross product of previous traversed edges
Stores direction of cross product of current traversed edges
Traverse the array
Stores three adjacent edges of the polygon
Update curr
If curr is not equal to 0
If direction of cross product of all adjacent edges are not same
Update curr
Driver code
Function to print sides of all the triangles having same perimeter & area
Stores unique sides of triangles
i + j + k values cannot exceed 256
Find the value of 2 * s
Find the value of 2 * ( s - a )
Find the value of 2 * ( s - b )
Find the value of 2 * ( s - c )
If triplets have same area and perimeter
Store sides of triangle
Sort the triplets
Inserting in set to avoid duplicate sides
Print sides of all desired triangles
Driver Code
Function call
Function to get the count of ractangles
Store distinct horizontal lines
Store distinct Vertical lines
Insert horizontal line passing through 0
Insert vertical line passing through 0.
Insert horizontal line passing through rectangle [ 3 ] [ 0 ]
Insert vertical line passing through rectangle [ 3 ] [ 1 ]
Insert all horizontal and vertical lines passing through the given array
Insert all horizontal lines
Insert all vertical lines
Driver Code
Function to count all the possible squares with given lines parallel to both the X and Y axis
Stores the count of all possible distances in X [ ] & Y [ ] respectively
Find distance between all pairs in the array X [ ]
Add the count to m1
Find distance between all pairs in the array Y [ ]
Add the count to m2
Find sum of m1 [ i ] * m2 [ i ] for same distance
Find current count in m2
Add to the total count
Return the final count
Driver Code
Given lines
Function call
Python3 program for the above approach
Function to return the area of parallelogram using sides and angle at the intersection of diagonal
Calculate area of parallelogram
Return the answer
Function to return the area of parallelogram using sides and angle at the intersection of sides
Calculate area of parallelogram
Return the answer
Function to return the area of parallelogram using diagonals and angle at the intersection of diagonals
Calculate area of parallelogram
Return the answer
Given diagonal and angle
Function Call
Print the area
Function to calculate the number of squares of size K in a square of size N
Stores the number of squares
Driver Code
Size of the bigger square
Size of smaller square
Function to find the number of the cubes of the size K
Stores the number of cubes
Stores the number of cubes of size k
Size of the bigger cube
Size of the smaller cube
Function to count smaller rectangles within the larger rectangle
If the dimension of the smaller rectangle is greater than the bigger one
Return the number of smaller rectangles possible
Driver code
Dimension of bigger rectangle
Dimension of smaller rectangle
Function call
Function to check if the triangle is equilateral or isosceles or scalene
_Check for equilateral triangle
Check for isosceles triangle
Otherwise scalene triangle
Given sides of triangle
Function Call
Function to find the remaining vertices of a square
Check if the x - coordinates are equal
Check if the y - coordinates are equal
If the the given coordinates forms a diagonal of the square
Otherwise
Square does not exist
Driver Code
Given two vertices
Python3 Program to calculate area of rhombus from given angle and side length
Function to return the area of rhombus using one angle and side .
Driver Code
Function Call
Print the final answer
Function to calculate the the number of Triangles possible
Regular Hexagon
Irregular Hexagon
Python3 Program to find length Of diagonal of a parallelogram Using sides and angle between them .
Function to return the length Of diagonal of a parallelogram using sides and angle between them .
Given Sides
Given Angle
Function Call
Print the final answer
Function to find the maximum number of tiles required to cover the floor of size m x n using 2 x 1 size tiles
Prthe answer
Driver code
Given M and N
Function call
Python Program to implement the above approach
Function to calculate the length of the diagonal of a parallelogram using two sides and other diagonal
Driver Code
Function Call
Print the final answer
Python3 program to implement the above approach
Function to calculate the length of diagonals of a cyclic quadrilateral
Driver Code
Function Call
Print the final answer
Python3 program to implement the above approach
Function to calculate Euclidean distance
Function to calculate the minimum sum of the euclidean distances to all points
Calculate the centroid
Calculate distance of all points
Driver Code
Initializing the points
Function to generate determinant
Return the sum
Driver Code
Position vector of first line
Direction ratios of line to which first line is parallel
Position vectors of second line
Direction ratios of line to which second line is parallel
Determinant to check coplanarity
If determinant is zero
Otherwise
Python3 program for the above approach
Function returns the required distance
Length of Inradius
Length of Circumradius
Function to check if the polygon exists or not
Initialize a variable to store the sum of angles
Loop through the array and calculate the sum of angles
Check the condition for an N - side polygon
Driver Code
Given array arr [ ]
Function Call
Python3 program for the above approach
If ' a ' and ' b ' same then double ' a ' or ' b ' and return ( 2 * a ) or ( 2 * b )
Check if a != b
If a > b
Double the smaller value that is ' b ' and store it to 'newB
Find the difference of ' newB ▁ and ▁ ' a
If ' newB ' < a
Then add the difference of ' newB ' and ' a ' to the ' b ' to make ' b ' and ' a ' as same
Return side of the square a or b
If ' newB ' > a then then add the difference of ' newB ' and ' a ' to the ' a ' to make ' a ' and ' newB ' as same
Return side of the square a or newB
If a < b
Double the smaller value that is ' a ' and store it to 'newA
Find the difference of ' newA ▁ and ▁ ' b
If ' newA ' < b
Then add the difference of ' newA ' and ' b ' to the ' a ' to make ' a ' and ' b ' as same
Return side of the square a or b
If ' newA ' > b then then add the difference of ' newA ' and ' b ' to the ' b ' to make ' b ' and ' newA ' as same
Return side of the square b or newA
Size of rectangle
Function to find required minimum angle of rotation
Calculating the angle of rotation and type - casting the integer N to type
Driver code
Python3 program to calculate area of a triangle from the given lengths of medians
Function to return the area of triangle using medians
Driver Code
Function Call
Print the final answer
Python3 program to find the number of cells enclosed by the given rectangles
Update the coordinates lying within the rectangle
Update arr [ i ] [ j ] for all ( i , j ) lying within the rectangle
Function to return the total area covered by rectangles
Stores the number of cells
arr [ i ] ] [ [ j ] == 1 means that grid is filled by some rectangle
Driver code
( A [ i ] [ 0 ] , A [ i ] [ 1 ] ) denotes the coordinate of the bottom left of the rectangle ( A [ i ] [ 2 ] , A [ i ] [ 3 ] ) denotes the coordinate of upper right of the rectangle
Update the coordinates that lie within the rectangle
Python3 implementation to find the equation of plane which passes through two points and parallel to a given axis
Find direction vector of points ( x1 , y1 , z1 ) and ( x2 , y2 , z2 )
Values that are calculated and simplified from the cross product
Print the equation of plane
Driver Code
Point A
Point B
Given axis
Function Call
Python3 implementation to Find the length of the median using sides of the triangle
Function to return the length of the median using sides of triangle .
Driver Code
Function Call
Print the final answer
Function to find the number of combinations in the N
Function to find the factorial of the given number N
Loop to find the factorial of the given number
Driver Code
Function Call
Python3 program for above approach
Function for computing other 2 side of the trianlgle
computing angle C
converting A in to radian
converting B in to radian
converting C in to radian
computing length of side b
computing length of side c
driver program
calling function
Function to find the area of the square
Larger side of rectangle
Smaller side of the rectangle
Driver code
Python 3 program to find the minimum side of the square in which a regular polygon with even sides can completely embed
PI value in Python 3 using acos function
Function to find the minimum side of the square in which a regular polygon with even sides can completely embed
Projection angle variation from axes
Projection angle variation when the number of sides are in multiple of 4
Distance between the end points
Projection from all N points on X - axis
Projection from all N points on Y - axis
Maximum side
Return the portion of side forming the square
Driver code
Finding the nth heptacontagon Number
Driver code
Python3 implementation to check that a number is icositetragonal number or not
Function to check that the number is a icositetragonal number
Condition to check if the number is a icositetragonal number
Driver Code
Function call
Python3 implementation to check that a number is a tridecagon number or not
Function to check that the number is a tridecagon number
Condition to check if the number is a tridecagon number
Driver Code
Function call
Python3 implementation to check that a number is icosihenagonal number or not
Function to check that the number is a icosihenagonal number
Condition to check if the number is a icosihenagonal number
Driver Code
Function call
Python3 implementation to check that a number is a icositrigonal number or not
Function to check that the number is a icositrigonal number
Condition to check if the number is a icositrigonal number
Driver Code
Function call
Function to check if three points make a triangle
Calculation the area of triangle . We have skipped multiplication with 0.5 to avoid floating point computations
Condition to check if area is not equal to 0
Driver code
Function to count such triplets
Iterate over all the points
Iterate over all points other than the current point
Compute squared euclidean distance for the current point
Compute nP2 that is n * ( n - 1 )
Return the final result
Driver code
Function to check if any point overlaps the given Circle and Rectangle
Find the nearest point on the rectangle to the center of the circle
Find the distance between the nearest point and the center of the circle Distance between 2 points , ( x1 , y1 ) & ( x2 , y2 ) in 2D Euclidean space is ( ( x1 - x2 ) * * 2 + ( y1 - y2 ) * * 2 ) * * 0.5
Driver code
Function to check if point p lies in between the line joining p1 and p2
If parallel to X - axis
Point p lies between p1 and p2
If parallel to Y - axis
Point p lies between p1 and p2
If point p satisfies the equation of line joining p1 and p2
Function to check if tower of sight issue occurred
B lies between AC
D lies between AC
A lies between BD
C lies between BD
Driver code
Point A
Point B
Point C
Point D
Function to find the number of lines which are formed from given N points and not parallel to X or Y axis
This will store the number of points has same x or y coordinates using the map as the value of coordinate can be very large
Counting frequency of each x and y coordinates
Total number of pairs can be formed
We can not choose pairs from these as they have same x coordinatethus they will result line segment parallel to y axis
we can not choose pairs from these as they have same y coordinate thus they will result line segment parallel to x - axis
Return the required answer
Driver Code
Function call
Function to check whether two convex polygons have the same center or not
Driver Code
Python 3 program to find the Modulus of a Complex Number
Function to find modulus of a complex number
Storing the index of '+
Storing the index of '-
Finding the real part of the complex number
Finding the imaginary part of the complex number
Driver code
Function to display output
Function to return minimum no of layers required to form the hollow prism
Function to calculate no of blocks required for each layer
No of blocks required for each row
Check for no of layers is minimum
Driver function
Length , width , height of each block
Side of one wall
height of each wall
Function to find the maximum area of the rectangle inscribed in an equilateral triangle of side S
Maximum area of the rectangle inscribed in an equilateral triangle of side S
Driver Code
Python3 program to find Area of semicircle in a square
Function to find area of semicircle
Driver code
side of a square
Call Function to find the area of semicircle
Function to to count the number of times the graph crosses the x - axis .
Iterate over the steps array
Update the previous level and current level by value given in the steps array
Condition to check that the graph crosses the origin .
Driver Code
Python program to find the X , Y and Z intercepts of a plane
For finding the x - intercept put y = 0 and z = 0
For finding the y - intercept put x = 0 and z = 0
For finding the z - intercept put x = 0 and y = 0
For Finding value of A , B , C , D
Calling the first created function
Driver Code
Function to find the change in hemispheric volume
Get the change in radius
Calculate the change in hemispheric volume
function to find all possible point
Find all 4 corners of the square whose side length is n
If n is even then the middle point of the square will be an integer , so we will take that point
Driver Code
Printing all possible points
Python3 implementation of the approach
Function to return the time when the glass will be empty
Check the condition when the glass will never be empty
Find the time
Driver code
Function to return the sum of internal angles of an n - sided polygon
Driver code
Function to return the required number of ways
Driver code
Function to return the count of possible triangles
Driver code
Function to find Angle subtended by an arc at the centre of a circle
Driver code
Function to Check if the given circles are orthogonal
calculating the square of the distance between C1 and C2
Check if the given circles are orthogonal
Driver code
Storing all the possible changes to make the triangle right - angled
Function to check if the triangle is right - angled or not
Function to check if the triangle can be transformed to right - angled
Boolean variable to return true or false
If it is already right - angled
Applying the changes on the co - ordinates
Applying on the first co - ordinate
Applying on the second co - ordinate
Applying on the third co - ordinate
If can 't be transformed
Driver Code
Python3 Program to find the area of a triangle inscribed in N - sided regular polygon
Function to find the area of the polygon
area of a regular polygon with N sides and side length len
Function to find the area of a triangle
area of one triangle in an N - sided regular polygon
area of inscribed triangle
Driver code
Function to find the area of quadrilateral
Driver code
Python3 program to find length of the diagonal of the cube
Function to find length of diagonal of cube
Formula to Find length of diagonal of cube
Driver code
Function call
Function to find nth concentric hexagon number
Driver code
Function call
Python 3 implementation of the approach
Function to return the area of the bigger circle
Find the radius of the bigger circle
Calculate the area of the bigger circle
Driver code
Function to check if a given quadrilateral is valid or not
Check condition
Driver code
Function to calculate central angle of a polygon
Calculate the angle
Driver code
Function to return the area of kite
use above formula
Driver code
Python implementation of the approach
Function to return the area of the kite
convert angle degree to radians
use above formula
Driver code
Python3 Program to calculate angle on the circumference subtended by the chord when the central angle subtended by the chord is given
Angle on center
Function to print the Maximum and Minimum values of the quadratic function
Calculate the value of second part
Print the values
Open upward parabola function
Open downward parabola function
If a = 0 then it is not a quadratic function
Driver code
Python3 program to find percentage increase in the cylinder if the height is increased by given percentage but radius remains constant
Driver code
Python program to find side of the squares inclined and touch each other externally at vertices and are lined in a row and distance between the centers of first and last squares is given
Driver code
Function calculate the area of the inner circle
the radius cannot be negative
area of the circle
Driver Code
Python3 program to find the angle subtended at the center by the chord when the angle subtended at center by another chord of equal length is given
Driver code
Python 3 program to find the distance of chord from center when distance between center and another equal length chord is given
Driver code
Python program to find the Length of the perpendicular bisector of the line joining the centers of two circles in which one lies completely inside touching the bigger circle at one point
Driver code
Python3 program to find the length of the chord of the circle if length of the other chord which is equally inclined through the diameter is given
Driver code
Python program to find the distance between centers of two intersecting circles if the radii and common chord length is given
Driver code
Python program to find the exterior angle of a cyclic quadrilateral when the opposite interior angle is given
Driver code
Python3 program to find the angle between a chord and a tangent when angle in the alternate segment is given
Driver code
Function to check if a number is perfect number or not
Stores sum of proper divisors
If sum of digits is equal to N , then it 's a perfect number
Otherwise , not a perfect number
Function to find the sum of digits of a number
Stores sum of digits
Return sum of digits
Function to count perfect numbers from an array whose sum of digits is also perfect
Traverse the array
If number is perfect
Stores sum of digits of the number
If that is also perfect number
Print that number
Driver Code
Given array
Size of the array
Function call to count perfect numbers having sum of digits also perfect
Structure of a Binary tree node
Helper function to allocate a new node with the given data and left and right pointers as None
Function to calculate the sum of bitwise AND of the sum of all leaf nodes and non - leaf nodes for each level
Initialize a queue and append root to it
Store the required answer
Stores the sum of leaf nodes at the current level
Stores the sum of non - leaf nodes at the current level
Get the size of the queue
Iterate for all the nodes in the queue currently
Dequeue a node from queue
Check if the node is a leaf node
If true , update the leaf node sum
Otherwise , update the non - leaf node sum
Enqueue left and right children of removed node
Update the answer
Return the answer
Given Tree
Function Call
Function to find the minimize replacements to make every element in the array A [ ] strictly greater than every element in B [ ] or vice - versa
Store the final result
Create two arrays and initialize with 0 s
Traverse the array a [ ]
Increment prefix_a [ a [ i ] ] by 1
Traverse the array b [ ]
Increment prefix_b [ b [ i ] ] by 1
Calculate prefix sum of the array a [ ]
Calculate prefix sum of the array b [ ]
Iterate over the range [ 0 , 9 ]
Make every element in array a [ ] strictly greater than digit i and make every element in the array b [ ] less than digit i
Make every element in array b [ ] strictly greater than digit i and make every element in array a [ ] less than digit i
Print the answer
Driver Code
Function to reverse the binary representation of a number
Traverse bits of N from the right
Bitwise left shift ' rev ' by 1
If current bit is '1
Bitwise right shift N by 1
Required number
Function to count elements from the original array that are also present in the array formed by reversing the binary representation of each element
Stores the reversed num
Iterate from [ 0 , N ]
Stores the presence of integer
Stores count of elements present in original array
Traverse the array
If current number is present
Print the answer
Driver Code
Function to generate FizzBuzz sequence
Stores count of multiples of 3 and 5 respectively
Iterate from 1 to N
Increment count3 by 1
Increment count5 by 1
Initialize a boolean variable to check if none of the condition matches
Check if the value of count3 is equal to 3
Reset count3 to 0 , and set flag as True
Check if the value of count5 is equal to 5
Reset count5 to 0 , and set flag as True
If none of the condition matches
Driver Code
Stores if a number is prime or not
Function to generate and store primes using Sieve Of Eratosthenes
Set all numbers as prime memset ( prime , true , sizeof ( prime ) )
If p is a prime
Set all its multiples as non - prime
Function to check if all diagonal elements are prime or not
Stores if all diagonal elements are prime or not
Precompute primes
Traverse the range [ 0 , N - 1 ]
Check if numbers on the cross diagonal and main diagonal are primes or not
If true , then pr " Yes "
Otherwise , pr " No "
Driver Code
Function Call
Function to find the permutation of integers from a given range such that number of mismatching bits between pairs of adjacent elements is 1
Initialize an arrayList to store the resultant permutation
Store the index of rotation
Iterate over the range [ 0 , N - 1 ]
Traverse all the array elements up to ( 2 ^ k ) - th index in reverse
If current element is S
Check if S is zero
Rotate the array by index value to the left
Driver Code
Function to count all pairs ( i , j ) such that a [ i ] + [ j ] = a [ i ] / a [ j ]
Stores total count of pairs
Generate all possible pairs
If a valid pair is found
Increment count
Return the final count
Driver Code
Function to find number of pairs with equal sum and quotient from a given array
Store the count of pairs
Stores frequencies
Traverse the array
If y is neither 1 or 0
Evaluate x
Increment count by frequency of x
Update map
Prthe final count
Driver Code
Function Call
Function to check if the given digit ' K ' is present in the decimal and octal representations of num or not
Stores if the digit exists or not
Iterate till nums is non - zero
Find the remainder
If the remainder is K
Function to count the numbers in the range [ 1 , N ] such that it doesn ' t ▁ contain ▁ the ▁ digit ▁ ' K ' in its decimal and octal representation
Stores count of numbers in the range [ 0 , i ] that contains the digit ' K ' in its octal or decimal representation
Traverse the range [ 0 , 1e6 + 5 ]
Check if i contains the digit ' K ' in its decimal or octal representation
Update pref [ i ]
Print the answer of queries
Driver Code
Function Call
Function to count tiles of dimensions 2 x 1 that can be placed in a grid of dimensions M * N as per given conditions
Number of tiles required
Driver Code
Function to check if arr1 [ ] can be converted to arr2 [ ] by swapping pair ( i , j ) such that i < j and arr [ i ] is 1 and arr [ j ] is 0
Stores the differences of prefix sum of arr1 and arr2
Stores the count of 1 and zero of arr1
Stores the count of 1 and zero of arr2
Iterate in the range [ 0 , N - 1 ]
If arr1 [ i ] is 1 , then increment arr1_one by one
Otherwise increment arr1_zero by one
If arr2 [ i ] is 1 , then increment arr2_one by one
Otherwise increment arr2_zero by one
Check if number of 1 s and 0 s of arr1 is equal to number of 1 s and 0 s of arr2 respectievly
Iterate over the range [ 0 , N - 1 ]
Increment count by differences arr1 [ i ] and arr2 [ i ]
Check if number of 1 's in  arr2 are more than arr1 and  then print "No"
Finally , print " Yes "
Driver Code
Given input a
Size of the array
Function Call
Function to check if a subarray of size i exists that contain all the numbers in the range [ 1 , i ]
Store the position of each element of arr [ ]
Traverse the array
Insert the position of arr [ i ]
Store position of each element from the range [ 1 , N ]
Iterate over the range [ 1 , N ]
Insert the index of i into st
Find the smallest element of st
Find the largest element of st
If distance between the largest and smallest element of arr [ ] till i - th index is equal to i
Driver Code
Function to check if two integers coincide at a point
Store the final position of integers A and B
Iterate over the range [ 0 , n ]
Store the final position of the integer i
If temp is present in the Map
Print Yes and return
Mark its final position as visited
If every integer stored in the Map is unique
Driver Code
Python program for the above approach
Function to find the sum of first N + 1 fibonacci numbers
Apply the formula
Prthe result
Driver Code
Pyhton3 program for the above approach
Function to find the sum of first N + 1 fibonacci numbers
Apply the formula
Print the result
Driver Code
Function Call
Python program for the above approach
Function to find the minimum number of pigs required to find the poisonous bucket
Prthe result
Driver Code
Python program for the above approach
Function to find the maximum product possible after repeatedly replacing pairs of adjacent array elements with their sum
Store the maximum product
Store the prefix sum
Store the total sum of array
Traverse the array to find the total sum
Iterate in the range [ 0 , N - 2 ]
Add arr [ i ] to prefix_sum
Store the value of prefix_sum
Store the value of ( total sum - prefix sum )
Update the maximum product
Print the answer
Driver Code
Function to find the mask for finding rightmost set bit in K
Function to find all array elements with rightmost set bit same as that in K
Stores mask of K
Store position of rightmost set bit
Traverse the array
Check if rightmost set bit of current array element is same as position of rightmost set bit in K
Driver Code
Input
Function call to find the elements having same rightmost set bit as of K
Utility function to find x ^ y in O ( log ( y ) )
Stores the result
Update x if it is >= p
If y is odd
Multiply x with res
y must be even now Set y = y / 2
Function to generate the N digit number satisfying the given conditions
Find all possible integers upto 2 ^ N
Generate binary representation of i
Reduce the length of the string to N
If current bit is '0
Convert string to equivalent integer
If condition satisfies
Prand break
Driver Code
Python3 program for the above approach
Function to check if x is a Pronic Number or not
Check for Pronic Number by multiplying consecutive numbers
Function to count pronic numbers in the range [ A , B ]
Initialise count
Iterate from A to B
If i is pronic
Increment count
Prcount
Driver Code
Function call to count pronic numbers in the range [ A , B ]
Function to count pronic numbers in the range [ A , B ]
Check upto sqrt N
If product of consecutive numbers are less than equal to num
Return N - 1
Function to count pronic numbers in the range [ A , B ]
Subtract the count of pronic numbers which are <= ( A - 1 ) from the count f pronic numbers which are <= B
Driver Code
Function call to count pronic numbers in the range [ A , B ]
Function to count integers in the range 1 to N having no odd divisors
Traverse the array
Stores the nearest power of two less than arr [ i ]
Stores the count of integers with no odd divisor for each query
Iterate until powerOfTwo is less then or equal to arr [ i ]
Print the answer for the current element
Driver Code
Given array
Size of the array
Function to check if it is possible to convert the array
Traverse the array range [ 1 , N - 1 ]
If arr [ i ] < arr [ i - 1 ]
Otherwise
Decrement arr [ i ] by arr [ i - 1 ]
If arr [ n - 1 ] is not equal to zero
Otherwise
Driver Code
Function Call
Python 3 program for the above approach
Function to find the nearest power of two for every digit of a given number
Converting number to string
Traverse the array
Calculate log base 2 of the current digit s [ i ]
Highest power of 2 <= s [ i ]
ASCII conversion
Driver Code
Python3 program for the above approach
Function to find the maximum prefix sum after K reversals of the array
Stores the required sum
If K is odd , reverse the array
Store current prefix sum of array
Traverse the array arr [ ]
Add arr [ i ] to currsum
Update maximum prefix sum till now
Prthe answer
Driver Code
Function Call
Function to print the submasks of N
Driven Code
Function to calculate ( x ^ y ) % MOD
Initialize result
Update x if it is more than or equal to MOD
If y is odd , multiply x with result
y must be even now y = y / 2
Return ( x ^ y ) % MOD
Function to count total pairs
The upper bound is 2 ^ N
Stores the count of pairs
Generate all possible pairs
Find XOR of both integers
Find OR of both integers
If both are equal
Increment count
Print count % MOD
Driver Code
Function Call
Python program for the above approach
Function to find the value of ( x ^ y ) % MOD
Initialize result
Update x if it is more than or equal to MOD
If y is odd , multiply x with result
y must be even now , then update y / 2
Return ( x ^ y ) % MOD
Function to count total pairs
Finding 3 ^ N % 10 ^ 9 + 7
Driver Code
Function Call
Python 3 program for the above approach
Function to find the minimum count of adjacent swaps to move largest and smallest element at the first and the last index of the array , respectively
Stores the smallest array element
Stores the smallest array element
Stores the last occurrence of the smallest array element
Stores the first occurrence of the largest array element
Traverse the array arr [ ]
If a [ i ] is less than min_element
Update min_element
Update min_ind
If a [ i ] is greater than max_element
Update max_element
Update max_ind
If max_ind is equal to min_ind
Return 0
If max_ind is greater than min_ind
Otherwise
Driver Code
Input
Print the result
Function to find index of the smallest array element required to be removed to make sum divisible by K
Stores sum of array elements
Stores index of the smallest element removed from the array to make sum divisible by K
Stores the smallest element removed from the array to make sum divisible by K
Traverse the array , arr [ ]
Update sum
Traverse the array arr [ ]
Calculate remaining sum
If sum is divisible by K
If res == - 1 or mini is greater than arr [ i ]
Update res and mini
Driver Code
python 3 program for the above approach
Function to count subarrays of single distinct element into which given array can be split
Stores the count
Stores frequency of array elements
Traverse the array
Traverse the map
Increase count of subarrays by ( frequency - 1 )
Driver Code
Function to count the number of inversions in K copies of given array
Stores count of inversions in the given array
Stores the count of pairs of distinct array elements
Traverse the array
Generate each pair
Check for each pair , if the condition is satisfied or not
If pairs consist of distinct elements
Count inversiosn in the sequence
Prthe answer
Given array
Given K
Size of the array
Modular function to calculate factorial
Stores factorial of N
Iterate over the range [ 1 , N ]
Update result
Function to count ways to replace array elements having 0 s with non - zero elements such that any M consecutive elements are distinct
Store m consecutive distinct elements such that arr [ i ] is equal to B [ i % M ]
Stores frequency of array elements
Traverse the array arr
If arr [ i ] is non - zero
If B [ i % M ] is equal to 0
Update B [ i % M ]
Update frequency of arr [ i ]
If a duplicate element found in M consecutive elements
Handling the case of inequality
Stores count of 0 s in B
Traverse the array , B
If B [ i ] is 0
Update cnt
Calculate factorial
Driver Code
Given M
Given array
Size of the array
Function Call
Function to find the maximum sum
Loop to traverse through the upper triangular matrix and update the maximum sum to ans
Traverse through the lower triangular matrix
Driver Code
Given matrix
Given dimension
Function to count array elements satisfying the given condition
If there is only one array element
Traverse the array
Update the maximum element encountered so far
Count the number of array elements strictly greater than all previous and immediately next elements
Print the count
Given array
Size of the array
Python3 program for above implementation
Base Cases
Check if 2 ^ k can be used as one of the numbers or not
Otherwise
Count number of ways to N using 2 ^ k - 1
Driver Code
Function to calculate possible number of triplets
counting frequency of positive numbers in array
If current array element is positive
Increment frequency
Select a triplet from freq elements such that i < j < k .
Driver Code
Function to find the maximum possible difference between sum of even and odd indices
Convert arr [ ] o 1 - based indexing
Reverse the array
Convert arr [ ] o 1 based index
Reverse the array
Stores maximum difference between sum of even and odd indexed elements
Traverse the array
If arr [ i ] is local maxima
Update maxDiff
If arr [ i ] is local minima
Update maxDiff
Driver Code
Size of array
Function Call
Function to print array arr [ ]
Print the array
Function to reverse elements of given circular array starting from index k
Initialize two variables as start = k and end = k - 1
Initialize count = N / 2
Loop while count > 0
Swap the elements at index ( start % N ) and ( end % N )
Update the start and end
If end equals to - 1 set end = N - 1
Print the circular array
Driver Code
Function Call
Function to find the matrix , A [ ] [ ] satisfying the given conditions
Store the final matrix
Initialize all the elements of the matrix A with 1
Traverse the matrix B [ ] [ ] row - wise
If B [ i ] [ j ] is equal to 0
Mark all the elements of ith row of A [ ] [ ] as 0
Mark all the elements of jth column of A [ ] [ ] as 0
Check if the matrix B [ ] [ ] can be made using matrix A [ ] [ ]
Store the bitwise OR of all elements of A [ ] [ ] in ith row and jth column
Traverse through ith row
Traverse through jth column
If B [ i ] [ j ] is not equal to c , pr " Not ▁ Possible "
Print the final matrix A [ ] [ ]
Driver Code
Function Call
Function to find gcd of x and y
Function to find lcm of x and y
Function to find minimum Cost
Subtracted initial cost of x
Subtracted initial cost of y
Driver Code
Returns the minimum cost required
Python program for the above approach
Function to find the value of ( a ^ n ) % d
Stores the value of ( a ^ n ) % d
Calculate the value of ( a ^ n ) % d
If n is odd
Update res
Update a
Update n
Function to find the GCD of ( p ^ n + q ^ n ) and p - q mod d
If p and q are equal
Stores GCD of ( p ^ n + q ^ n ) and ( p - q ) mod d
Stores the value of ( p - q )
Stores square root of num
Find the divisors of num .
If i divides num
Stores power of ( p ^ n ) mod i
Stores power of ( q ^ n ) mod i
Stores power of ( p ^ n + q ^ n ) mod i
If ( p ^ n + q ^ n ) is divisible by i
Calculate the largest divisor .
If i divides num , ( num / i ) also divides num . Hence , calculate temp .
If ( p ^ n + q ^ n ) is divisible by ( num / i )
Calculate the largest divisor .
Driver code
Given p , q and n
Function Call
Function to divide the isosceles triangle in equal parts by making N - 1 cuts parallel to the base
Iterate over the range [ 1 , n - 1 ]
Driver Code
Given N
Given H
Function call
Function to find the gcd of a and b
Function to find the number of Ks
Find gcd
Calculating value of totient function for n
Driver Code
Given X and Y
Function to check if N is equivalent to an integer
Convert float value of N to integer
If N is not equivalent to any integer
Driver Code
Python program to implement the above approach
Function to find the nearest power of two for every array element
Traverse the array
Calculate log of current array element
Find the nearest
Driver Code
Python3 program for the above approach
Function to count number of set bits in integer
Variable for counting set bits
Function to invert bits of a number
Calculate number of bits of N - 1 ;
Function to invert the sum of set bits in A and B
Stores sum of set bits
Driver Code
Function to calculate for each array element , sum of its Bitwise XOR with all other array elements
Declare an array of size 64 to store count of each bit
Traversing the array
Check if bit is present of not
Increase the bit position
Reduce the number to half
Traverse the array
Stores the bit position
Stores the sum of Bitwise XOR
Check if bit is present of not
Reduce the number to its half
Print the sum for A [ i ]
Given arr1 [ ]
Size of N
Function Call
Function to minimize the maximum difference between any pair of elements of the array by the given operations
Traverse the array
If current element is even
Insert it into even
Otherwise
Make it even by multiplying by 2 and insert it into set
Calculate difference between first and the last element of the set
Iterate until difference is minimized
Erase the current element
Reduce current element by half and insert it into the Set
Update difference
Return the resultant difference
Driver Code
Function to calculate XOR of numbers in the range [ 1 , n ]
If n is divisible by 4
If n mod 4 is equal to 1
If n mod 4 is equal to 2
Function to find XOR of even numbers in the range [ l , r ]
Update xor_r
Update xor_l
Driver Code
Function to calculate Variance of first N natural numbers
Driver Code
Python3 program for the above approach
Function to count the number of digits in each element of the given matrix
Traverse each row of arr [ ] [ ]
Traverse each column of arr [ ] [ ]
Store the current matrix element
Count the number of digits
Print the result
Driver Code
Given matrix
Function to find the sum of all even and odd frequent elements in an array
Stores the frequency of array elements
Traverse the array
Update frequency of current element
Stores sum of odd and even frequent elements
Traverse the map
If frequency is odd
Add sum of all occurrences of current element to sum_odd
If frequency is even
Add sum of all occurrences of current element to sum_even
Calculate difference between their sum
Return diff
Driver code
Function to find the number of arrays following the given condition
Initialize answer
Calculate nPm
Print ans
Driver Code
Given N and M
Function Call
Python3 program for the above approach
Function to print all permutations of arr [ ] such that the sum of Bitwise AND of all adjacent element is at least K
To check if any permutation exists or not
Sort the given array
Find all possible permutations
Stores the sum of bitwise AND of adjacent elements of the current permutation
Traverse the current permutation of arr [ ]
Update the sum
If the sum is at least K , then print the current permutation
Set the flag variable
Print the current permutation
If flag is unset , then print - 1
Driver Code
Function Call
Function to find positive integers from 1 to N that are not present in the array
Declare bitset
Iterate from 0 to M - 1
Iterate from 0 to n - 1
Iterate from bset . _Find_first ( ) to bset . size ( ) - 1
Driver Code
Function to calculate the sum of the first N terms of XOR Fibonacci Series
Base case
Stores the sum of the first N terms
Iterate from [ 0 , n - 3 ]
Store XOR of last 2 elements
Update sum
Update the first element
Update the second element
Print the final sum
Driver code
Function call
Function to calculate sum of the first N terms of XOR Fibonacci Series
Store the sum of first n terms
Store xor of a and b
Case 1 : If n is divisible by 3
Case 2 : If n % 3 leaves remainder 1
Case 3 : If n % 3 leaves remainder 2 on division by 3
Print the final sum
Driver code
Function call
Function to find the length of the longest subarray whose bitwise XOR is equal to K
Stores prefix XOR of the array
Stores length of longest subarray having bitwise XOR equal to K
Stores index of prefix XOR of the array
Insert 0 into the map
Traverse the array
Update prefixXOR
If ( prefixXOR ^ K ) present in the map
Update maxLen
If prefixXOR not present in the Map
Insert prefixXOR into the map
Driver Code
Python3 Program to implement the above approach
Function to initialize the difference array
Function to add k to the specified submatrix ( r1 , c1 ) to ( r2 , c2 )
Function to print the modified array
Function to perform the given queries
Difference array
Function to initialize the difference array
Count of queries
Perform Queries
Driver Code
Given Matrix
Given Queries
Python program for the above approach
Function to find complement of an integer
Count the number of bits of maxElement
Return 1 's complement
Function to find the value required to be added to maximize XOR of the given array
Stores the required value to be added to the array
Stores the maximum array element
Traverse the array
Update XOR of the array
Find maximum element in array
Calculate 1 s ' complement
Return the answer
Driver Code
Function to calculate factorial of all the numbers up to N
Factorial of 0 is 1
Calculate factorial of all the numbers upto N
Calculate factorial of i
Function to find count of ways to select at least K elements whose values in range [ L , R ]
Stores count of ways to select at leas K elements whose values in range [ L , R ]
Stores count of numbers having Value lies in the range [ L , R ]
Traverse the array
Check if the array elements Lie in the given range
Update cntNum
Stores factorial of numbers upto N
Calculate total ways to select at least K elements whose values Lies in [ L , R ]
Update cntWays
Driver code
Function to calculate bitwise AND of all pairs from the given array
Stores bitwise AND of all possible pairs
Generate all possible pairs
Calculate bitwise AND of each pair
Driver Code
Python 3 program to implement the above approach
Function to find the smallest divisor of N greater than 1
If i is a divisor of N
If N is a prime number
Function to find the value of N by performing the operations K times
Iterate over the range [ 1 , K ]
Update N
Driver Code
Python3 program to implement the above approach
Function to find the sum of all possible triplet products ( i * j * k )
Stores sum required sum
Iterate over all possible values of i
Iterate over all possible values of j
Iterate over all possible values of k
Stores the product of ( i * j * k )
Update sum
Driver Code
Python3 implementation to implement the above approach
Function to find the value of power ( X , N ) % M
Stores the value of ( X ^ N ) % M
Calculate the value of power ( x , N ) % M
If N is odd
Update res
Update x
Update N
Function to find modulo multiplicative inverse of X under modulo M
Function to find the sum of all possible triplet products ( i * j * k )
Stores modulo multiplicative inverse of 8
Stores the sum of all possible values of ( i * j * k )
Update res
Driver Code
Python3 program for the above approach
Function to find the maximum of minimum of array constructed from any two rows of the given matrix
Initialize global max as INT_MIN
Iterate through the rows
Iterate through remaining rows
Initialize row_min as INT_MAX
Iterate through the column values of two rows
Find max of two elements
Update the row_min
Update the global_max
Print the global max
Driver Code
Given matrix mat [ ] [ ]
Given number of rows and columns
Function Call
Function to create an N - ary Tree
Traverse the edges
Add edges
Function to get the maximum sum of MEX values of tree rooted at 1
Initialize mex
Iterate through all children of node
Recursively find maximum sum of MEX values of each node in tree rooted at u
Store the maximum sum of MEX of among all subtrees
Increase the size of tree rooted at current node
Resulting MEX for the current node of the recursive call
Driver Code
Given N nodes
Given N - 1 edges
Stores the tree
Generates the tree
Returns maximum sum of MEX values of each node
Function to count divisors of n
Function to find the minimum value exceeding x whose count of divisors has different parity with count of divisors of X
Divisor count of x
Iterate from x + 1 and check for each element
Driver Code
Given X
Function call
Function to find the minimum value exceeding x whose count of divisors has different parity with count of divisors of X
Check if x is perfect square
Driver Code
Function to find the sum of first N natural numbers with alternate signs
Stores sum of alternate sign of first N natural numbers
If N is an even number
Update alternateSum
If N is an odd number
Update alternateSum
Driver Code
Function to find minimum startValue for positive prefix sum at each index
Store the minimum prefix sum
Stores prefix sum at each index
Traverse over the array
Update the prefix sum
Update the minValue
Return the positive start value
Driver Code
Function Call
Function to find number of ways to split array into 2 subarrays having equal sum by changing element to 0 once
Stores the count of elements in prefix and suffix of array elements
Stores the sum of array
Traverse the array
Increase the frequency of current element in suffix
Stores prefix sum upto index i
Stores sum of suffix of index i
Stores the desired result
Traverse the array
Modify prefix sum
Add arr [ i ] to prefix map
Calculate suffix sum by subtracting prefix sum from total sum of elements
Remove arr [ i ] from suffix map
Store the difference between the subarrays
Count number of ways to split the array at index i such that subarray sums are equal
Update the final result
Return the result
Driver Code
Function Call
Function to count of set bits in Bitwise XOR of adjacent elements up to N
Stores count of set bits by Bitwise XOR on adjacent elements of [ 0 , N ]
Stores all possible values on right most set bit over [ 0 , N ]
Iterate over the range [ 0 , N ]
Update N
Update bit_Position
Driver Code
Python3 program to implement the above approach
Function to check if N is a perfect square number or not
If N is a non positive integer
Stores square root of N
Check for perfect square
If N is not a perfect square number
Function to check if given two sides of a triangle forms a right - angled triangle
If the value of ( A * A + B * B ) is a perfect square number
Update checkTriangle
If the value of ( A * A - B * B ) is a perfect square number
Update checkTriangle
If the value of ( B * B - A * A ) is a perfect square number
Update checkTriangle
Driver Code
If the given two sides of a triangle forms a right - angled triangle
Otherwise
Function to find the sum of array
Return the sum
Function that counts the minimum operations required to make the sum and product of array non - zero
Stores count of zero elements
Iterate over the array to count zero elements
Sum of elements of the array
Print result
Driver Code
Given array arr [ ]
Size of array
Function Call
Function to find the bitwise OR of all possible pairs of the array
Stores bitwise OR of all possible pairs of arr
Traverse the array arr
Update totalOR
Return bitwise OR of all possible pairs of arr
Driver Code
Function the print the difference between the lexicographical ranks
Store the permutations in lexicographic order
Initial permutation
Initial variables
Check permutation
Initialize second permutation
Check permutation
Print difference
Given array P [ ]
Given array Q [ ]
Given size
Function call
Function to print final array after performing all the operations
Initialize variables
Traverse through all operations
Operation Type
Move left
Move right
Pick a packet
Drop a packet
Exit
Print final array
Driver Code
Given capacity
Given array with initial values
Array size
Operations
Number of operations
Function call
Python3 program for the above approach
Function to check whether a number is prime or not
Corner cases
If given number is a multiple of 2 or 3
Function to check if sum of count of digits of all array elements is prime or not
Initialize sum with 0
Traverse over the array
Convert array element to string
Add the count of digits to sum
Print the result
Drive Code
Function call
Function to find the value of power ( X , N )
Stores the value of ( X ^ N )
Calculate the value of power ( x , N )
If N is odd
Update res
Update x
Update N
Function to find the probability of obtaining a prime number as the product of N thrown dices
Stores count of favorable outcomes
Stores count of sample space
Prthe required probability
Driver code
Function to check if a number is palindrome or not
Stores reverse of N
Stores the value of N
Calculate reverse of N
Update rev
Update N
Update N
If N is equal to rev of N
Function to find the closest smaller palindromic number to N
Calculate closest smaller palindromic number to N
Update N
Driver Code
Function to find the minimum number of operations required to make N a perfect square
Stores count of operations by performing decrements
Stores value of N
Decrement the value of temp
Stores square root of temp
If temp is a perfect square
Update temp
Store count of operations by performing increments
Increment the value of N
Stores sqrt of N
If N is a perfect square
Update temp
Return the minimum count
Driver code
Python3 program to implement the above approach
Function to find the value of power ( X , N ) % M
Stores the value of ( X ^ N ) % M
Calculate the value of power ( x , N ) % M
If N is odd
Update res
Update x
Update N
Function to find modulo multiplicative inverse of X under modulo M
Function to find the value of F ( 1 )
Stores power ( 2 , N - 1 )
Stores modulo multiplicative inverse of P_2 under modulo M
Stores the value of F ( 1 )
Update res
Driver code
Function to insert an element into the array
Function to update every array element a [ i ] by a [ i ] ^ x
Function to compute the final results after the operations
Driver Code
Queries
Function call
Function to find the K size subarray
Check if the first K elements forms a number which is divisible by 3
Using Sliding window technique
Calculate sum of next K size subarray
Check if sum is divisible by 3
Update the indices of the subarray
If no such subarray is found
Print the subarray
Driver code
Given array and K
Function call
Function to precompute the factorial of 1 to N
Function to get the value of nCr
nCr = fact ( n ) / ( fact ( r ) * fact ( n - r ) )
Function to count the number of ways to rearrange the array to obtain same BST
Store the size of the array
Base case
Store the elements of the left subtree of BST
Store the elements of the right subtree of BST
Store the root node
Push all the elements of the left subtree
Push all the elements of the right subtree
Store the size of leftSubTree
Store the size of rightSubTree
Recurrence relation
Driver Code
Store the size of arr
Store the factorial up to N
Precompute the factorial up to N
Function to calculate the sum of all pair - products
Stores sum of array
Update sum of the array
Driver Code
Iterative function to reverse digits of num
Loop to extract all digits of the number
Function to check if N satisfies given equation
Driver Code
Python3 program to implement the above approach
Function to check y is a power of x
logarithm function to calculate value
Compare to the result1 or result2 both are equal
Function to check if N satisfies the equation 2 * reverse ( n ) = n + 1
Driver Code
Python3 program for the above approach
Function to calculate Nth term of general recurrence relations
Stores the generated sequence
Current term is sum of previous k terms
Print the nth term
Driver code
Given Array F [ ] and C [ ]
Given N and K
Function call
Python3 program of the above approach
Function to find the mode of the frequency of the array
Stores the frequencies of array elements
Traverse through array elements and count frequencies
Stores the frequencies 's of  frequencies of array elements
Stores the minimum value
Find the Mode in 2 nd map
search for this Mode
When mode is find then return to main function .
If mode is not found
Driver Code
Function which returns the maximum number of isolated nodes
Used nodes
Remaining edges
Count nodes used
If given edges are non - zero
Driver Code
Given N and E
Function call
Function to check if N in base B is palindrome or not
Stores the reverse of N
Stores the value of N
Extract all the digits of N
Generate its reverse
Driver code
Function to return gcd of a and b
Base Case
Recursive GCD
Function to find the product of all the numbers till N that are relatively prime to N
Stores the resultant product
Iterate over [ 2 , N ]
If gcd is 1 , then find the product with result
Return the final product
Driver Code
Function to count maximum number of array elements equal
Driver Code
Function call
Function that count of the mismatched pairs in bot the array
Create a parent array and initialize it
Preprocessing of the given pairs of indices
1 - based indexing
If both indices doesn 't belong  to same component
Insert the indices in same component
HashMap to get the indices of array A
If current element is not present in array B then count this as mismatched
Get the index of the element in array B
Check if both indices belong to same connected component if not increment the count
Return answer
Function that gives the connected component of each index
Function that creates the connected components
Find parent of a and b recursively
Update the parent of a
Driver Code
Given arrays A [ ] , B [ ]
List of indices
Function call
Function that generate all valid triplets and calculate the value of the valid triplets
Generate all triplets
Check whether the triplet is valid or not
Update the value
Print the maximum value
Driver Code
Given array arr
Function call
Python3 implementation of the above approach
Function to precompute the product of proper divisors of a number at it 's corresponding index
Returning the pre - computed values
Driver code
Function to find LCM of first N natural numbers
Initialize result
Ans contains LCM of 1 , 2 , 3 , . . i after i 'th iteration
Function to find the highest power of 2 which divides LCM of first n natural numbers
Find lcm of first N natural numbers
To store the highest required power of 2
Counting number of consecutive zeros from the end in the given binary String
Driver code
Python3 implementation of the approach
Function to find the highest power of 2 which divides LCM of first n natural numbers
Driver code
Function to check if N is prime from builtins import range
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to delete character at index i from given String str
Deletes character at position 4
Function to check if a number becomes prime by deleting any digit
Converting the number to String
length of String
number should not be of single digit
Loop to find all numbers after deleting a single digit
Deleting ith character from the String
converting String to int
Driver Code
Function to find the count of even and odd factors of N
Loop runs till square root
Condition to check if the even factors of the number N is is even and count of odd factors is odd
Driver Code
Function to print the number of permutations possible
Driver Code
Function to find two distinct numbers X and Y s . t . their LCM lies between L and R and X , Y are minimum possible
Check if 2 * L lies in range L , R
Print the answer
Given value of ranges
Function call
Function to find the gcd of two numbers
Function to of pairwise co - prime and common divisors of two numbers
Initialize answer with 1 , to include 1 in the count
Count of primes of gcd ( N , M )
Finding prime factors of gcd
Increment count if it is divisible by i
Return the total count
Function Call for each pair to calculate the count of pairwise co - prime divisors
Driver Code
Given array of pairs
Function Call
Function to return the product of abs diff of all pairs ( x , y )
To store product
Iterate all possible pairs
Find the product
Return product
Driver Code
Given array arr [ ]
Function Call
Python3 program for the above approach
Function to print the two consecutive numbers whose difference is N
Iterate in the range [ 0 , 10 ^ 5 ]
Function to check if N is a perfect cube
Find floating povalue of square root of x .
If square root is an integer
Function to check whether a number can be represented as difference of two consecutive cubes
Check if 12 * N - 3 is a perfect square or not
Given number N
Recursive function to find sum of different bits between consecutive numbers from 0 to N
Base case
Calculate the Nth term
Given number
Function call
Function to find sum in the given range
Find the value of k
Find the common difference
Find the sum
Driver code
Python3 program to implement the above approach
Function to find a ^ b modulo M
Function to find the first and last M digits from N ^ K
Calculate Last M digits
Calculate First M digits
Extract the number after decimal
Find 10 ^ y
Move the Decimal Point M - 1 digits forward
Print the result
Driver Code
Python3 program for the above approach
Function to find the minimum operations required to make the modulo of each element of the array equal to each other
Variable to store minimum operation required
To store operation required to make all modulo equal
Iterating through all possible modulo value
Iterating through all different modulo obtained so far
Calculating oprn required to make all modulos equal to x
Checking the operations that will cost less
Check operation that will cost less
Update the minimum number of operations
Returning the answer
Function to store different modulos
Set to store all different modulo
Map to store count of all different modulo obtained
Storing all different modulo count
Insert into the set
Increment count
Function call to return value of min oprn required
Driver Code
Function to find GCD of two numbers
Function to calculate the LCM of array elements
Initialize result
Function to find minimum steps required to obtain sorted sequence
Inititalize dat [ ] array for Direct Address Table .
Calculating steps required for each element to reach its sorted position
Calculate LCM of the array
Driver Code
Python3 program for the above approach
Function to return maximum of two double values
Check if a is greater than b then return a
Function that returns the Ratio of max Ratio subarray
Variable to store the maximum ratio
Compute the product while traversing for subarrays
Calculate the ratio
Update max ratio
Print the answer
Driver code
Python3 program for the above approach
Function to check for perfect number
Find a number close to 2 ^ q - 1
Calculate q - 1
Condition of perfect number
Check whether q is prime or not
Check whether 2 ^ q - 1 is a prime number or not
Function to check for prime number
Check whether it is equal to 2 or 3
Check if it can be divided by 2 and 3 then it is not prime number
Check whether the given number be divide by other prime numbers
Driver Code
Function to check if there exist a twin pythagorean triplet in the given array
Loop to check if there is a Pythagorean triplet in the array
Check if there is consecutive triple
Calculate square of array elements
Driver Code
Given array arr [ ]
Function call
Python3 program for the above approach
Function to prpair ( a , b ) such that a * b = N + 1 or N + 2
Loop to iterate over the desired possible values
Check for condition 1
Check for condition 2
Driver Code
Given Number
Function Call
Function that find given x and y is possible or not
Check if x is less than 2 and y is not equal to 0
Perform subtraction
Check if y is divisible by 2 and greater than equal to 0
Driver Code
Given X and Y
Function Call
Function to return the count of integers less than N satisfying given conditions
Stores Euler counts
Store Divisor counts
Based on Sieve of Eratosthenes
Update phi values of all multiples of i
Update count of divisors
Return the final count
Driver code
Function to calculate and return the sum of differences of maximum and minimum of strictly increasing subarrays
Stores the sum
Traverse the array
If last element of the increasing sub - array is found
Update sum
If the last element of the array is reached
Update sum
Return the sum
Driver Code
A binary tree node has data , pointer to left child and a pointer to right child
Helper method that allocates a new node with the given data and None left and right pointers .
Given a binary tree , print its nodes in inorder
first recur on left child
then print the data of node
now recur on right child
Method to find the maximum binary tree from two binary trees
Driver Code
First Binary Tree 3 / \ 2 6 / 20
Second Binary Tree 5 / \ 1 8 \ \ 2 8
Python3 implementation of the above approach
Function returns the minimum size of the string
From formula
Left limit of r
Right limit of r
Smallest integer in the valid range
Driver Code
Python3 program for the above approach
Function that returns True if N is a perfect square
Function that returns True check if N is sum of three squares
Factor out the powers of 4
N is NOT of the form 4 ^ a * ( 8 b + 7 )
Function that finds the minimum number of square whose sum is N
If N is perfect square
If N is sum of 2 perfect squares
If N is sum of 3 perfect squares
Otherwise , N is the sum of 4 perfect squares
Driver code
Given number
Function call
Function to check and return if all remainders are distinct
Stores the remainder
Calculate the remainder
If remainder already occurred
Insert into the set
Driver Code
Function to return number of ways of factoring N with all factors greater than 1
Variable to store number of ways of factoring n with all factors greater than 1
Driver code
2 is the minimum factor of number other than 1. So calling recursive function to find number of ways of factoring N with all factors greater than 1
Node for a Linked List
Function to find the last 2 survivors
Total is the count of alive people
Initiating the list of n people
Total != 2 is terminating condition because at last only two - person will remain alive
de represent next person to be deleted or killed
Last two person to survive ( in any order )
Driver code
Python3 implementation to find the minimum number of denominations required for any number
Function to find the minimum number of denomminations required
Driver Code
Function call
Python3 implementation to find the content of the polynomial
Function to find the content of the polynomial
Loop to iterate over the elements of the array
__gcd ( a , b ) is a inbuilt function for Greatest Common Divisor
Driver Code
Function call
Function to check if the inverse permutation of the given array is same as the original array
Stores the inverse permutation
Generate the inverse permutation
Check if the inverse permutation is same as the given array
Driver code
Function to generate random numbers
Initialize the seed state
Traverse to generate required numbers of random numbers
Follow the linear congruential method
Driver Code
Seed value
Modulus parameter
Multiplier term
Increment term
Number of Random numbers to be generated
To store random numbers
Function Call
Print the generated random numbers
Function to generate random numbers
Initialize the seed state
Traverse to generate required numbers of random numbers
Follow the linear congruential method
Driver Code
Seed value
Modulus parameter
Multiplier term
Number of Random numbers to be generated
To store random numbers
Function Call
Print the generated random numbers
Python3 program to implement the above approach
Function to calculate ( a ^ b ) % m
Function to calculate and return the product of divisors
Stores the frequencies of prime divisors
Iterate over the prime divisors
Update the product
Update the count of divisors
Driver Code
Function to print all proper functions
If the numerator and denominator are coprime
Driver code
Function for finding the maximum number of objects from N type - 1 and M type - 2 items
Storing minimum of N and M
Storing maximum number of objects from given items
Driver Code
Function to return the square root of the given number
Subtract n - th odd number
Return the result
Driver Code
Function to find the gcd of two numbers
Function to calculate and return the count of maximum possible distinct elements in the array
Find the maximum element
Base Case
Finding the gcd of first two element
Calculate Gcd of the array
Return the total count of distinct elements
Driver Code
Function to find all the local maxima and minima in the given array arr [ ]
Empty lists to store points of local maxima and minima
Checking whether the first point is local maxima or minima or neither
Iterating over all points to check local maxima and local minima
Condition for local minima
Condition for local maxima
Checking whether the last point is local maxima or minima or neither
Print all the local maxima and local minima indexes stored
Driver Code
Given array arr [ ]
Function Call
Function to calculate power
Function to check if the N - digit number satisfies the given condition or not
Getting the last digit
Every number is divisible by 1 and dividing a number by 0 isn 't possible. Thus  numbers with 0 as a digit  must be discarded.
If any digit divides the number , return false
If no digit divides the number , return true ;
Function to find the smallest number not divisible by any of its digits .
Get the lower range of n digit number
Get the high range of n digit number
check all the N - digit numbers
If the first number to satify the constraints is found print it , set the flag value and break out of the loop .
If no such digit found , return - 1 as per problem statement
Driver code
Initializing cost = 0
To store the removed element
This will store the sum of the subsequence
Checking all the element of the vector
Storing the value of arr [ i ] in temp variable
If the situation like arr [ i - 1 ] < arr [ i ] < arr [ i + 1 ] or arr [ i - 1 ] > arr [ i ] > arr [ i + 1 ] occur remove arr [ i ] i . e , temp from sequence
Insert the element in the set removedElements
Storing the value of arr [ i ] in temp
Taking the element not in removedElements
Adding the value of elements of subsequence
If we have to remove the element then we need to add the cost associated with the element
Printing the sum of the subsequence with minimum length possible
Printing the cost incurred in creating subsequence
Driver code
Calling the function
Python3 code to count of natural numbers in range [ L , R ] which are relatively prime with N
Container of all the primes up to sqrt ( n )
Function to calculate prime factors of n
Run the sieve of Eratosthenes
0 ( false ) means prime , 1 ( True ) means not prime
No even number is prime except for 2
All the multiples of each each prime numbers are non - prime
Get all the primes in prime vector
Count the number of numbers up to m which are divisible by given prime numbers
Run from i = 000. . 0 to i = 111. . 1 or check all possible subsets of the array
If the number of set bits is odd , then add to the number of multiples
Function calculates all number not greater than ' m ' which are relatively prime with n .
If square of the prime number is greater than ' n ' , it can ' t ▁ ▁ be ▁ a ▁ factor ▁ of ▁ ' n
If prime is a factor of n then increment count
Driver code
Function to find XOR in a range from L to R
Compute xor from arr [ 0 ] to arr [ i ]
Process every query in constant time
If L == 0
Driver code
query [ ]
Function that returns generated array
Dynamically allocate array
START , END = 0 , N
Iterate over array
If Str [ i ] = = ' I ' assign arr [ i ] as START and increment START
If str [ i ] = = ' D ' assign arr [ i ] as END and decrement END
Assign A [ N ] as START
Return starting address of array A
Driver code
Python3 program to find the square free divisors of a given number
The function to check if a number is prime or not
If the number is even then its not prime
Stores the count of distinct prime factors
Print the number of square - free divisors
Function to find the sequence
Initializing 1 st element
Creating sequence in terms of x
Finding min element
Finding value of x
Creating original sequence
Output original sequence
Driver code
Python3 code for the naive approach
Function to check condition
Initialize even_count and od_count
loop runs till square root
Driver Code
Function to check condition
Driver Code
Function to count the number of crazy primes in the given range [ L , R ]
Stores all primes
Stores count of primes
Stores if frequency of primes is a prime or not upto each index
Sieve of Eratosthenes
Count primes
If i is a prime
Stores frequency of primes
If the frequency of primes is a prime
Increase count of required numbers
Return the required count
Driver Code
Given Range
Function Call
Function to print the largest N - digit numbers of base b
Find the largest N digit number in base b using the formula B ^ N - 1
Print the largest number
Given number and base
Function Call
Function to generate the maximized array elements
Traverse the array
Iterate to count set and unset bits
Count of unset bits
Count of set bits
Bitwise right shift
Shifting all 1 ' s ▁ to ▁ MSB ▁ ▁ and ▁ 0' s to LSB
Driver Code
Python3 program to implement above approach
Function to calculate and return GCD of the given array
Initialise GCD
Once GCD is 1 , it will always be 1 with all other elements
Return GCD
Function to calculate and return LCM of the given array
Initialise LCM
LCM of two numbers is evaluated as [ ( a * b ) / gcd ( a , b ) ]
Return LCM
Function to print the ratio of LCM to GCD of the given array
Driver Code
Python3 implementation to find the Minimum number of moves required to update the array such that each of its element is divisible by K
Function to find the Minimum number of moves required to update the array such that each of its element is divisible by K
Initialize Map data structure
Iterate for all the elements of the array
Calculate the value to be added
Check if the value equals to 0 then simply continue
Check if the value to be added is present in the map
Update the answer
Print the required result We need to add 1 to maxX because we cant ignore the first move where initially X = 0 and we need to increase it by 1 to make some changes in array
Driver code
Function that print the sum of the array for Q queries
Stores the frequencies of array elements
Calculate the sum of the initial array and store the frequency of each element in map
Iterate for all the queries
Store query values
Decrement the sum accordingly
Increment the sum accordingly
Set count of Y [ i ]
Reset count of X [ i ]
Print the sum
Driver Code
Function call
Function to return the maximum bitwise OR for any pair of the given array in O ( n ) time complexity .
Find the maximum element in
Stores the maximum OR value the array
Traverse the array and perform Bitwise OR between every array element with the maximum element
Driver Code
Utility function to prthe elements of the array
Function to increment the count for each factor of given val
Function to generate and print the required array
Find max element of arr
Create count array of maxi size
For every element of the array
Count [ A [ i ] ] denotes how many previous elements are there whose factor is the current element .
Increment in count array for factors of A [ i ]
Print the generated array
Driver code
Function to generate all primes
If p is a prime
Mark all its multiples as non - prime
Store all prime numbers
Return the list of primes
Function to calculate the minimum increments to convert every array elements to a prime
Extract maximum element of the given array
Extract the index which has the next greater prime
Store the difference between the prime and the array element
Driver code
Function to find the sum of all multiples of N up to K
Calculate the sum
Return the sum
Function to find the total sum
If L is divisible by a [ i ]
Otherwise
Return the final sum
Driver code
Given array arr [ ]
Given range
Function call
Python3 program for the above approach
Create an array for storing primes
Create a prefix array that will contain whether sum is prime or not
Function to find primes in the range and check whether the sum of digits of a prime number is prime or not
Initialise Prime array arr [ ]
Since 0 and 1 are not prime numbers we mark them as '0
Using Sieve Of Eratosthenes
If the number is prime
Mark all the multiples of i starting from square of i with '0' ie . composite
'0' represents not prime
Initialise a sum variable as 0
Check if the number is prime
A temporary variable to store the number
Loop to calculate the sum of digits
Check if the sum of prime number is prime
If prime mark 1
If not prime mark 0
Computing prefix array
Function to count the prime numbers in the range [ L , R ]
Function call to find primes
Print the result
Driver Code
Input range
Function call
Function to calculate concentration from the given mass of solute and volume of a solution
Driver code
Python3 program to check if a number is Practical or not .
Returns true if there is a subset of set [ ] with sun equal to given sum
The value of subset [ i ] [ j ] will be true if there is a subset of set [ 0. . j - 1 ] with sum equal to i
If sum is 0 , then answer is true
If sum is not 0 and set is empty , then answer is false
Fill the subset table in bottom up manner
Function to store divisors of N in a vector
Find all divisors which divides 'num
If ' i ' is divisor of 'n
If both divisors are same then store it once else store both divisors
Returns true if num is Practical
Vector to store all divisors of N
To check all numbers from 1 to < N
Driver code
Checks if sums of all subsets of digits array divides the number N
To calculate length of array arr
There are totoal 2 ^ n subsets
Consider all numbers from 0 to 2 ^ n - 1
Consider binary representation of current i to decide which elements to pick .
Check sum of picked elements .
Function to check if a number is a super - niven number
To store digits of N
Driver code
Function to count the number of divisors of the N
Sieve method for prime calculation
Traversing through all prime numbers
Calculate number of divisor with formula total div = ( p1 + 1 ) * ( p2 + 1 ) * ... . . * ( pn + 1 ) where n = ( a1 ^ p1 ) * ( a2 ^ p2 ) . ... * ( an ^ pn ) ai being prime divisor for n and pi are their respective power in factorization
Function to check if a number is a highly composite number
Count number of factors of N
Loop to count number of factors of every number less than N
If any number less than N has more factors than N , then return false
Given Number N
Function Call
Function to find the N - th Pentacontahenagon Number
Driver Code
Function Call
Function to check if a number is a Saint - Exupery number
Considering triplets in sorted order . The value of first element in sorted triplet can be at - most n / 3.
The value of second element must be less than equal to n / 2
Given Number N
Function Call
Function to check if a number is a Repdigit number
To store previous digit ( Assigning initial value which is less than any digit )
Traverse all digits from right to left and check if any digit is smaller than previous .
Driver code
Python3 implementation of the above approach
Function to check if N is a Composite Number
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to return concatenation of distinct prime factors of a given number n
Handle prime factor 2 explicitly so that can optimally handle other prime factors .
n must be odd at this point . So we can skip one element ( Note i = i + 2 )
While i divides n , print i and divide n
This condition is to handle the case when n is a prime number greater than 2
Function to check if a number is is an enlightened number
Number should not be prime
Converting N to string
Function call
Driver code
Function to find N - th term in the series
Driver code
Function to check if number is an Idoneal numbers
Iterate for all triples pairs ( a , b , c )
If the condition is satisfied
Driver Code
Function call
Python3 implementation for the above approach
Function to check the divisibility of the number by its digit .
If the digit divides the number then return true else return false .
Function to check if all digits of n divide it or not
Taking the digit of the number into digit var .
Function to check if N has all distinct digits
Create an array of size 10 and initialize all elements as false . This array is used to check if a digit is already seen or not .
Traverse through all digits of given number
Find the last digit
If digit is already seen , return false
Mark this digit as seen
Remove the last digit from number
Function to check Lynch - Bell numbers
Driver Code
Given number N
Function call
Function to check if a number contains all the digits 0 , 1 , . . , ( b - 1 ) an equal number of times
to store number of digits of n in base B
to count frequency of digit 1
condition to check three or more 1 's  and number of ones is equal to number  of digits of n in base B
Driver Code
taking inputs
function to check
Python3 program for the above approach
Find the first digit
Find total number of digits - 1
Find first digit
Return first digit
Find the last digit
return the last digit
A function to check Gapful numbers
Return true if n is gapful number
Driver Code
Given Number
Function Call
Python3 implementation to find Economical Numbers till n
Array to store all prime less than and equal to MAX .
Utility function for sieve of sundaram
In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than MAX , we reduce MAX to half
Main logic of Sundaram . Mark all numbers which do not generate prime number by doing 2 * i + 1
Since 2 is a prime number
Prother primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .
Function to check if a number is a Economical number
Count digits in original number
Count all digits in prime factors of n pDigit is going to hold this value .
Count powers of p in n
If primes [ i ] is a prime factor ,
Count the power of prime factors
Add its digits to pDigit .
Add digits of power of prime factors to pDigit .
If n != 1 then one prime factor still to be summed up
If digits in prime factors is less than digits in original number then return true . Else return false .
Finding all prime numbers before limit . These numbers are used to find prime factors .
Function to return if allocation is possible or not
Stores the shelves needed for items of type - A and type - B
Find number of shelves needed for items of type - A
Fill A / K shelves fully by the items of type - A
Otherwise
Fill A / L shelves fully and add remaining to an extra shelf
Find number of shelves needed for items of type - B
Fill B / L shelves fully by the items of type - B
Fill B / L shelves fully and add remaining to an an extra shelf
Total shelves needed
If required shelves exceed N
Driver Code
Python3 program for the above approach
Array to store smallest prime factors of each no .
Function to calculate smallest prime factor of N .
Marking spf [ j ] if it is not previously marked
Array to store the count of factor for N
Prefix array which contains the count of factors from 1 to N
Function to count total factors from 1 to N
Store total factors of i
Stores total factors from 1 to i
Function to search lowest X such that the given condition is satisfied
Find mid
Search in the right half
Search in the left half
Return the position after Binary Search
Function to find the required sum
Precompute smallest prime factor of each value
Calculate count of total factors from 1 to N
Binary search to find minimum N
Driver code
Given Sum
Function Call
Stores true at prime indices
Function to generate the prime numbers using Sieve of Eratosthenes
If p is still true
Mark all multiples of p
Function returns sum of all elements of matrix
Function to check if for all prime ( i + j ) , a [ i ] [ j ] is prime
If index is prime
Driver code
Check for both conditions
Python3 program for the above approach
Function calculates and prints easter date for given year Y
All calculations done on the basis of Gauss Easter Algorithm
A corner case , when D is 29
Another corner case , when D is 28
If days > 31 , move to April April = 4 th Month
Otherwise , stay on March March = 3 rd Month
Driver Code
Python3 program for the above problem
Adjacency list for numbers till 100001
Visited array
To store distance of every vertex from A
Function to check if number is a prime
Function to check if numbers differ by only a single - digit
Check the last digit of both numbers and increase count if different
Generate all N digit primes
For every prime number i check if an edge can be made .
For every prime number i check if an edge can be made from i to j .
If edge is possible then insert in the adjacency list
Function to count distance
If unvisited push onto queue and mark visited as 1 and add the distance of curr + 1.
Driver code
Call bfs traversal with root as node A
Indicates not possible
Function to find place value
Digit , which we want to find place value .
Number from where we want to find place value .
Python3 implementation to check if N is a super Poulet number
Function to find the divisors
Loop to iterate over the square root of the N
Check if divisors are equal
Function to check if N is a super Poulet number
Loop to check that every divisor divides 2 ^ D - 2
Driver Code
Python3 implementation of the above approach
Function to print the first N terms of the Beatty sequence
Driver code
Python3 implementation of the above approach
Function to sum of divisors
Note that this loop runs till square root of N
If divisors are equal , take only one of them
Otherwise take both
Function to check Abundant Number
Return True if sum of divisors is greater than N .
Function to check Deficient Number
Check if sum ( n ) < 2 * n
Function to check all proper divisors of N is deficient number or not
if number itself is not abundant retuen False
find all divisors which divides 'num
if ' i ' is divisor of 'num
if both divisors are same then add it only once else add both
Driver Code
Function to calculate the sum
Driver code
Python3 implementation for the above approach
Function to calculate sum of all trivial divisors of given natural number
Final result of summation of trivial divisors
Find all divisors which divides 'num
if ' i ' is divisor of 'num
if both divisors are same then add it only once else add both
Function to return sum of squares of digits of N
Function to check if N is a Canada number
Given Number
Function Call
Function to find the sum of digits of a number N
Function to check for Self number
Driver code
Function to find the value of Nth Central Binomial Coefficient
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Driver code
Python3 implementation of the above approach
Function to find the sum of divisors
Note that this loop runs till square root of N
If divisors are equal , take only one of them
Otherwise take both
Function to check Multiply - perfect number
Driver code
Function to find the Totient number of the given value
Initialize result as n
Consider all prime factors of n and subtract their multiples from result
Check if p is a prime factor .
If yes , then update N and result
If n has a prime factor greater than sqrt ( n ) ( There can be at - most one such prime factor )
Function to check if the number is a perfect totient number
Store original value of n
Loop to calculate sum of iterated totients
Condition for Perfect Totient Number
Driver Code
Python3 implementation for the above approach
Function to check if a number can be expressed as a ^ b .
Function to check if N is a Cunningham number
Given Number
Function Call
Function to find the product of elements of all subarray
Initialize the result
Computing the product of subarray using formula
Return the product of all elements of each subarray
Given array arr [ ]
Function Call
Function for computing nCr
Function to find factorial of a number
Function for counting the number of ways to reach ( m , n ) without visiting ( x , y )
Given dimensions of Matrix
Cell not to be visited
Function call
Function to count the digits greater than K
Function to print the list
Function to find the number greater than or equal to n , which is only made of first k digits
If the number itself satisfy the conditions
Check digit from back
If digit > K is present previously and current digit is less than K
If current digit is greater than K
If an extra digit needs to be added
Print the number
Driver Code
Function to find the average of a batsman
Calculate number of dismissals
check for 0 times out
Calculate batting average
Driver Program
Recursive Function to calculate the sum upto Nth term
If N - th term is calculated
Update multi to store product upto K
Update add to store sum upto K
Update prevSum to store sum upto K
Proceed to next K
Function to calculate and return the Sum upto Nth term
Recursive Function
Driver code
Function to count and pr the required number of toggles
Store the count of toggles
Add the contribution of the current LSB
Update N
Print the result
Driver code
Function to return the maximum bitwise AND
Driver code
Function to return if odd sum is possible or not
Stores distinct odd elements
Stores distinct even elements
Iterating through given array
If element is even
If element is odd
If atleast K elements in the array are odd
Check for all odd frequencies of odd elements whether sufficient even numbers are present or not
Count of even numbers required
If required even numbers are present in the array
Driver Program
Function to count the number of elements of array which are not divisible by any other element of same array
Length for boolean array
Hash map for storing the element and it 's frequency
Update the maximum element
Boolean array of size of the max element + 1
Marking the multiples as false
To store the final count
Traverse boolean array
Check if i is not divisible by any other array elements and appears in the array only once
Return the final Count
Driver Code
Given array
Function Call
Function to find the smallest N - digit number divisible by N
Find largest n digit number
Find smallest n digit number
If i is divisible by N , then print i and return ;
Driver Code
Given number
Function call
Function to find the smallest number having a maximum product of prime factors
Declare the list arr
Initialise list with 1
Iterate from [ 2 , N ]
If value at index i is 1 , then i is prime and make update list at index for all multiples of i
Initialise maxValue
Find number having maximum product of prime factor <= N
Find the maximum value
Given number
Function call
Function to get product of digits
Function to check if N is an Zuckerman number
Driver code
Check if N is prime or not
Corner Cases
This is checked to skip middle five numbers
Function to get sum of digits
Return the sum of digits
Function to check whether the given number is Additive Prime number or not
If number is not prime
Check if sum of digits is prime or not
Given Number N
Function Call
Function to check if N is a Straight Line number or not
N must be > 99
Difference between consecutive digits must be same
Given Number N
Function Call
Function to find N - th term in the series
Driver Code
Function to check if a string is of the form even odd even odd ...
Function to check if a string is of the form odd even odd even ...
Function to check if n is an alternating number
Given Number N
Function Call
Function to check if the number is a prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to update the frequency array such that freq [ i ] stores the frequency of digit i in n
While there are digits left to process
Update the frequency of the current digit
Remove the last digit
Function that returns true if a and b are anagrams of each other
To store the frequencies of the digits in a and b
Update the frequency of the digits in a
Update the frequency of the digits in b
Match the frequencies of the common digits
If frequency differs for any digit then the numbers are not anagrams of each other
Returns true if n1 and n2 are Ormiston primes
Driver code
Function to find the N - th Decakismyriagon Number
Given Number N
Function Call
Python3 program for the above approach
Function to calculate sum of all proper divisors of num
Final result of summation of divisors
Find all divisors of num
If ' i ' is divisor of 'num
If both divisors are same then add it only once else add both
Add 1 to the result as 1 is also a divisor
Function to check if N is a Untouchable Number
Given Number N
Function Call
Function to check if N is an zygodrome number
Convert N to string
Adding a space at the beginning and end of the string
Traverse the string
If any character is not same as prev and next then return false
Driver code
Python3 program for the above approach
Function to check if N is a Loeschian Number
Iterate [ 0 , sqrt ( N ) ] for x
Iterate [ 0 , sqrt ( N ) ] for y
Check the given criteria
If no such pair found then return false
Given Number N
Function Call
Python3 implementation to check if N is an admirable number
Function to calculate the sum of all divisors of a given number
Sum of divisors
Find all divisors which divides 'num
If ' i ' is divisor of 'n
If both divisors are same then add it once else add
Add 1 and n to result as above loop considers proper divisors greater
Function to check if there exists a proper divisor D ' ▁ of ▁ N ▁ such ▁ that ▁ sigma ( n ) -2D ' = 2 N
Find all divisors which divides 'num
If ' i ' is divisor of 'num
If both divisors are same then add it only once else add both
Check 1 since 1 is also a divisor
Function to check if N is an admirable number
Driver code
Function to print the series
Generate the ith term and
Driver Code
Function to generate all possible pairs
Vector to store all the possible pairs
Checking all the possible pair in the range of [ 1 , c )
If the pair satisfies the condition push it in the vector
Driver code
If no valid pair exist
Print all valid pairs
function to calculate strike rate of a batsman
Driver Code
Python3 program to check if a number exists having exactly X positive divisors out of which Y are composite divisors
Count the number of times 2 divides N
Check for all possible numbers that can divide it
If N at the end is a prime number .
Function to check if any such number exists
Driver Code
Python3 program to find nearest prime number in the array for all array elements
Create a boolean array and set all entries it as false . A value in prime [ i ] will be true if i is not a prime , else false
Sieve of Eratosthenes function
Update all multiples of i greater than or equal to the square of it numbers which are multiple of i and are less than i ^ 2 are already been marked .
Function to find nearest prime number for all elements
Compute and store all prime numbers up to maxm
Store the indices of all primes
If no primes are present in the array
Store the current prime
If the current prime is nearer
If the next prime is nearer
Make the next prime as the current
Driver code
Function to find the position of the number N
To store the position of N
Iterate through all digit of N
If current digit is 7
If current digit is 4
Print the final position
Driver Code
Given number of the series
Function Call
Function to find average of cubes
Storing sum of cubes of numbers in sum
Calculate sum of cubes
Return average
Driver Code
Given Number
Function Call
Python3 program for the above approach
Function to find n digit largest number starting and ending with n
Corner Case when n = 1
Result will store the n - 2 * length ( n ) digit largest number
Find the number of digits in number n
Append 9
To make it largest n digit number starting and ending with n , we just need to append n at start and end
Return the largest number
Function to find n digit smallest number starting and ending with n
Corner Case when n = 1
Result will store the n - 2 * length ( n ) digit smallest number
Find the number of digits in number n
To make it smallest n digit number starting and ending with n , we just need to append n at start and end
Return the smallest number
Driver Code
Given Number
Function Call
Maximum number of 0 s that can be replaced by 1
Check for three consecutive 0 s
Flip the bit
Increase the count
Driver code
Function to find the sum of the first N star number
Variable to store the sum
Driver code
Function to count the number of distinct medians of an array where each array elements are given by a range
Loop to store the starting and end range in the array
Condition to check if the length of the array is odd
Driver Code
Function Call
Python3 implementation to find the pairs with equal sum and twice the bitwise AND of the pairs
Map to store the occurrence of elements of array
Function to find the pairs with equal sum and twice the bitwise AND of the pairs
Loop to find the frequency of elements of array
Function to find the count such pairs in the array
If an element occurs more than once then the answer will by incremented by nC2 times
Driver Code
Function Call
Function to find the nth 360 - gon Number
Driver Code
Function to find the nth 120 - gon Number
Driver Code
Function to find the nth Tetracontaoctagonal Number
Driver Code
Function to find the nth 257 - gon Number
Driver Code
Function to find the nth tetracontadigonal number
Driver Code
Python3 implementation of the above approach
Function to return index of smallest triangular no n digits
Driver Code
Function to return the LCM of two prime numbers
If the two numbers are equal then return any one of a and b
Else return product of the numbers
Driver code
Given two numbers
Function Call
Python3 program to find smallest multiple of n with exactly N digits in Binary number System .
Function to find smallest multiple of n with exactly n digits in Binary number representation .
Driver code
Python3 program to find largest multiple of N containing N digits
Function to find the largest N digit multiple of N
Driver code
Function to find the nth icosikaiheptagonal Number
Driver code
Python3 program to check whether a number is an triacontagonal number or not
Function to check whether a number is an triacontagonal number or not
Condition to check whether a number is an triacontagonal number or not
Given number
Function call
Function to find the required answer
Driver code
Python3 program to determine the parity of the given mathematical expression
Iterating through the given integers
If any odd number is present , then S is even parity
Else , S is odd parity
Driver code
Python3 program to find the number of digits after concatenating the first N positive integers
Function to find the number of digits after concatenating the first N positive integers
Driver code
function that returns the maximum length subarray having non zero product
zeroindex list to store indexex of zero
if zeroindex list is empty then Maxlength is as size of array
if zeroindex list is not empty
first zero is on index 2 that means two numbers positive , before index 2 so as their product is positive to
checking for other indexex
if the difference is greater than maxlen then maxlen is updated
to check the length of remaining array after last zeroindex
Driver Code
Function returns true if it is possible to have odd sum
Counting number of odd and even elements
Driver code
Function to print the last two digits of N !
For N >= 10 , N ! % 100 will always be 0
Calculating N ! % 100
Driver code
Function to calculate product of geometric series
Return the final product with the above formula
Given first term and common ratio
Number of terms
Function Call
Python3 program for the above approach
Function to calculate product of N terms of geometric series
Find the product of first and the last term
Return the sqrt of the above expression to find the product
Given first term and common ratio
Number of terms
Function Call
Python3 Program to find two numbers with difference of their squares equal to N
Function to check and print the required two positive integers
Iterate till sqrt ( n ) to find factors of N
Check if x is one of the factors of N
Store the factor
Compute the other factor
Check if the two factors are of the same parity
Compute a and b
If no pair exists
Driver Code
Python3 program to find the probability of an arbitrary positive divisor of Xth power of 10 to be a multiple of Yth power of 10
Function to calculate and print the required probability
Count of potential divisors of X - th power of 10 which are also multiples of Y - th power of 10
Count of divisors of X - th power of 10
Calculate GCD
Print the reduced fraction probability
Driver Code
Python3 for the above approach
Function to check that if N is Chiliagon Number or not
Condition to check if N is a Chiliagon Number
Given Number
Function call
Python3 implementation of above approach
Initialising Map for Index Mapping
Mapping elements of A
Modify elements of B according to Map
Changing B [ i ] as the index of B [ i ] in A
Count of common subarrays
Traversing array B
While consecutive elements are found , we increment K
Add number of subarrays with length K to total count
Driver code
Function to find the array with all the even / odd elements
First let 's check  kth is odd or even
if last element is also an odd number then we can choose odd elements for our answer
Add 1 in the array ( k - 1 ) times
Add last odd element
If array of even elements would be the answer then k - 1 elements would be 2
if last element is also an even number then we can choose even elements for our answer
Add 2 in the array ( k - 1 ) times
Add last even element
Printing the array
Driver Code
Check if all digits of num divide num
Array to store all digits of the given number
If any of the condition is true for any digit then N is not a nude number
Driver code
Function to find the modular inverse of a modulo m
Apply the Euclidean algorithm , to find the modular inverse
Function to find the derivative of f ( x ) and f '(x) = 3 * (x ^ 2)
Function to find the image of x in f ( x ) = x ^ 3 - k .
Function to find the next power of the number
Next power of prime for which solution is to be found
Using Hensel 's recursion to  find the solution(next_a) for  next power of prime
If next_a < 0 return equivalent positive remainder modulo p
Return the next power of a
Function to find the solution of the required exponent of prime
The lemma does not work for derivative of f ( x ) at a1
Looping from 1 to power of prime whose solution is to be found
Final answer after evaluating all the exponents up till the required exponent
Driver Code
Function Call
Python3 program to count the total numbers in the range L and R which have all the digit same
Function that count the total numbersProgram between L and R which have all the digit same
length of R
tmp has all digits as 1
For each multiple of tmp in range 1 to 9 , check if it present in range [ L , R ]
Increment the required count
Driver Code
Python3 program to find the pair having minimum LCM
function that return pair having minimum LCM
find max element in the array as the gcd of two elements from the array can 't greater than max element.
created a 2D array to store minimum two multiple of any particular i .
we already found two smallest multiple
iterating over all gcd
iterating over its multiple
if we already found the two smallest multiple of i
choosing smallest two multiple
calculating lcm
return final answer
Driver code
Function to find Number of triplets for given Number N such that middle element is always greater than left and right side element .
Check if arrangement is possible or Not
Else return total ways
Driver code .
Function to find the lexicographically smallest array
Maximum swaps possible
Hash to store swaps performed
Let current element be the minimum possible
Find actual position of the minimum element
Update minimum element and its position
Perform swaps if possible
Insert current swap in hash
Print the required array
Driver code
Python3 program to find the sum of all perfect square divisors of numbers from 1 to N
Function for finding inverse of a number iteratively Here we will find the inverse of 6 , since it appears as denominator in the formula of sum of squares from 1 to N
Store the value of the inverse of 6 once as we don 't need to call the function again and again
Formula for finding the sum of first n squares
No perfect square exists which is less than 4
Starting from 2 , present value of start is denoted here as curStart
Finding end of the segment for which the contribution will be same
Using the above mentioned formula to find ans % MOD
Now for mthe next iteration start will become end + 1
Finally return the answer
Driver Code
Here we are adding x because we have not counted 1 as perfect squares so if u want to add it you can just add that number to the ans
Function returns true if s1 is suffix of s2
Function to check if binary equivalent of a number ends in "001" or not
To store the binary number
Count used to store exponent value
Driver code
Function to check if binary equivalent of a number ends in "001" or not
To check if binary equivalent of a number ends in "001" or not
Driver code
Python3 program to print Practical Numbers in given range
Function to compute divisors of a number
Vector to store divisors
1 will always be a divisor
Check if i is squareroot of A then only one time insert it in ans
Function to check that a number can be represented as summ of distinct divisor or not
The value of subsett [ i ] [ j ] will be True if there is a subsett of sett [ 0. . j - 1 ] with summ equal to i
If summ is 0 , then answer is True
If summ is not 0 and sett is empty , then answer is False
Fill the subsett table in bottom up manner
Return the possibility of given summ
Function to check a number is Practical or not
Vector to store divisors
If all numbers can be represented as summ of unique divisors
Function to prPractical Numbers in a range
Driver code
Function to find the max result
Sort the array in descending order
Loop to divide in this order arr [ 0 ] / ( arr [ 1 ] / arr [ 2 ] / ... . arr [ n - 2 ] / arr [ n - 1 ] )
Return the final result
Driver code
Function to prall co - prime sets
Check if n is less than 4 then simply prall values till n
For all the values of n > 3
Check if n is even then every set will contain 2 adjacent elements up - to n
If n is odd then every set will contain 2 adjacent element except the last set which will have last three elements
Last element for odd case
Driver code
Python3 code to print sequence number of a triangular number
if N is not tringular number
Function to count the number of subarrays such that Xor of all the elements of that subarray is equal to sum of the elements
Maintain two pointers left and right
Iterating through the array
Calculate the window where the above condition is satisfied
Count will be ( right - left )
Remove the previous element as it is already included
Driver code
Function for Sieve Of Eratosthenes
Function to count total number of pairs of elements whose sum is prime
Driver code
Array to keep the track of digits occurred Initially all are 0 ( false )
Function to initialize true if the digit is present
Variable to store the last digit
Loop to iterate through every digit of the number N
Updating the array according to the presence of the digit in n at the array index
Function to check if the numbers in the array end with the digits of the number N
Variable to store the count
Variable to store the last digit
Checking the presence of the last digit in N
Function to find the required count
Driver code
Preprocessing
Function to check if count of even and odd divisors are equal
If ( n - 2 ) % 4 is an integer , then return true else return false
Given Number
Function Call
Function to find integer
Because 1 st integer is K itself
Initialize min_d and max_d
Updating min_d and max_d
Break if min digit is 0
Driver code
Python3 code for the above approach .
Function to find count of subarrays whose sum is a perfect square .
To search for index with ( current prefix sum - j * j )
Storing the prefix sum
Used to track the minimum value in prefixSum
Calculating the prefixSum and tracking the prefixMin
Below statement is used if array contains negative numbers
Counts the no of subarrays with perfect square sum
As 0 is a perfect square , so we initialize 0 th index - key with value 1
Here we count the perfect square subarray sum by searching if there is a prefix with sum = ( current prefixSum - ( sq * sq ) )
Increasing our subarray count
Increasing the current prefixSum index value in map by 1 to count the other perfect squares while traversing further
Driver code
Printing the result
Function to check if 2 quadratic equations have common roots or not .
Driver code
Function to find the required answer
Driver code
Python3 program to find the count of index pairs in the array positive range product
Condition if number of negative elements is even then increase even_count
Otherwise increase odd_count
Condition if current element is negative
Condition if number of negative elements is even then add even_count in answer
Otherwise add odd_count in answer
Driver Code
Python3 implementation to find a pair of integers A & B such that difference of fifth power is equal to the given number X
Function to find a pair of integers A & B such that difference of fifth power is equal to the given number X
Loop to choose every possible pair with in the range
Check if equation holds
Driver Code
Function Call
Function to Find Sum of GCD of each numbers
Consider all prime factors of no . and subtract their multiples from result
Check if p is a prime factor
If yes , then update no and result
If no has a prime factor greater than Math . sqrt ( n ) then at - most one such prime factor exists
Return the result
Finding GCD of pairs
Calculate the divisors
Return count of numbers from 1 to N with GCD d with N
Check if d1 and d2 are equal then skip this
Driver code
Returns true if a permutation of arr [ 0. . n - 1 ] can form a Fibonacci Series
Sort array
After sorting , check if every element is equal to the sum of previous 2 elements
Driver Code
Python3 program to find last digit in a power of 2.
Corner case
Find the shift in current cycle and return value accordingly
Driver code
Function to find nCr
Function that returns factorial of n
Function for finding sum of all K length subsequences
Calculate the sum of array
Calculate nCk
Return the final result
Driver Code
Function to find the sum
Find the last multiple of N
Find the K - th non - multiple of N
Calculate the sum of all elements from 1 to val
Calculate the sum of all multiples of N between 1 to val
Driver code
Python3 program to find count of non - prime divisors of given number
Function to factors of the given number
Loop to find the divisors of the number 2
Loop to find the divisors of the given number upto SQRT ( N )
Condition to check if the rest number is also a prime number
Function to find the non - prime divisors of the given number
Loop to count the number of the total divisors of given number
Driver Code
Function Call
Python3 program to check if a given number is a Full Fibonacci Number or not
A utility function that returns true if x is perfect square
Returns true if N is a Fibonacci Number and false otherwise
N is Fibonacci if one of 5 * N ^ 2 + 4 or 5 * N ^ 2 - 4 or both is a perferct square
Function to check digits
Check if all digits are fibonacci or not
Extract digit
Check if the current digit is not fibonacci
Function to check and return if N is a Full Fibonacci number or not
Driver Code
Function to check if the number is divisible by 53 or not
Driver Code
Function to check that two numbers are in silver ratio
Swapping the numbers such that A contains the maximum number between these numbers
First Ratio
Second Ratio
Condition to check that two numbers are in silver ratio
Driver Code
Function Call
Function to find minimum digit in the decimal representation of N
Loop to find the minimum digit in the number
Function to find maximum digit in the decimal representation of N
Loop to find the maximum digit in the number
Function to find the value of the given function
Loop to compute the values of the given number
Driver Code
Function Call
Python3 program for the above approach
Function to check if N is a decagonal number
Condition to check if the number is a decagonal number
Driver Code
Given number
Function Call
Python3 program for the above approach
Function to check if N is a octadecagon number
Condition to check if the number is a octadecagon number
Driver code
Given number
Function Call
Returns factorial of n
Function to return total number of combinations
Function check whether a number is prime or not
Corner case
Check from 2 to n - 1
Function for finding number of subsequences which consists exactly K primes
If number of primes are less than k
Driver code
Function to find the longest subarray
Length of longest alternating subarray
Iterate in the array
Increment count if consecutive elements has an odd sum
Store maximum count in longest
Reinitialize cnt as 1 consecutive elements does not have an odd sum
Length of ' longest ' can never be 1 since even odd has to occur in pair or more so return 0 if longest = 1
Driver Code
Function to calculate digit sum
Function to check if number is prime
Function to check if number is moran number
Calculate digit sum
Check if n is completely divisible by digit sum
Calculate the quotient
Check if the number is prime
Driver code
Python3 program for the above approach
Function to check if N is a Hendecagonal Number
Condition to check if the number is a hendecagonal number
Given Number
Function call
Python3 program for the above approach
Function to check if N is a hexadecagonal number
Condition to check if the number is a hexadecagonal number
Driver code
Given number
Function call
Function to check if N is a nonagonal number
Condition to check if the number is a nonagonal number
Driver code
Given number
Function call
Function to count the possible number of pairs
if the number is even then the answer in ( N / 2 ) - 1
if the number is odd then the answer in N / 2
Driver code
Function returns min step to reach 0 from N
Direct possible reduction of value N
Remaining steps needs to be reduced by 1
Summation of both the values
Return the final answer
Driver code
Function to construct an array of size N
Prints the first N natural numbers
Driver code
Python3 program for the above approach
Function to check if the number N is a centered decagonal number
Condition to check if N is centered decagonal number
Driver Code
Function call
Python 3 program to count Sexy Prime pairs in array
A utility function to check if the number n is prime or not
Base Cases
Check to skip middle five numbers in below loop
If n is divisible by i and i + 2 then it is not prime
A utility function that check if n1 and n2 are SPP ( Sexy Prime Pair ) or not
Function to find SPP ( Sexy Prime Pair ) pairs from the given array
Iterate through all pairs
Increment count if SPP ( Sexy Prime Pair ) pair
Driver code
Function call to find SPP ( Sexy Prime Pair ) pair
Function to find the index of number at first position of kth sequence of set of size n
n_actual_fact = n !
First position of the kth sequence will be occupied by the number present at index = k / ( n - 1 ) !
Function to find the kth permutation of n numbers
Store final answer
Insert all natural number upto n in set
Subtract 1 to get 0 based indexing
Mark the first position
itr now points to the number at index in set s
remove current number from the set
Driver code
Python3 implementation to find the largest N digit perfect square number in base B
Function to find the largest N digit number
Largest n - digit perfect square
Print the result
Driver Code
Python3 program to find cube root of a number using logarithm
Function to find the cube root
Calculate the cube root
Return the final answer
Driver code
Function to return the maximum value of f ( x )
Driver code
Function to find the minimum number of moves taken to move the element of each cell to any one cell of the square matrix of odd length
Initializing count to 0
Number of layers that are around the centre element
Iterating over ranger of layers
Increase the value of count by 8 * k * k
Driver code
Python3 implementation to check that a number is sum of squares of 2 consecutive numbers or not
Function to check that the a number is sum of squares of 2 consecutive numbers or not
Condition to check if the a number is sum of squares of 2 consecutive numbers or not
Driver code
Function call
Python3 implementation to check that a number is a centered heptagonal number or not
Function to check that the number is a centered heptagonal number
Condition to check if the number is a centered heptagonal number
Driver Code
Function call
Python3 implementation to check that a number is a Centered nonadecagonal number or not
Function to check that the number is a Centered nonadecagonal number
Condition to check if the number is a Centered nonadecagonal number
Driver Code
Function call
Python3 implementation to check that a number is a centered octadecagonal number or not
Function to check that the number is a centered octadecagonal number
Implement the formula generated
Condition to check if the number is a centered octadecagonal number
Driver code
Function call
Python3 implementation to find Kth root of the number
Function to find the Kth root of the number
Driver code
Python3 implementation to check if a number is a power of the other number
Function to check if the number is power of K
Logarithm function to calculate value
Compare to the result1 or result2 both are equal
Driver code
Function to find total sub - array which start and end with same element
Initialize result with 0
Array to count frequency of 1 to N
Update frequency of A [ i ]
Update result with sub - array contributed by number i
Print the result
Driver code
Function to find the max size possible
Counting the maximum frequency
Counting total distinct elements
Find max of both the answer
Driver code
Function to find largest sub array with all equal elements .
Traverse the array
If element is same as previous increment temp value
Return the required answer
Driver code
Function call
Function to find the maximum and minimum length subarray
Initialise minimum and maximum size of subarray in worst case
Left will scan the size of possible subarray in left of selected element
Right will scan the size of possible subarray in right of selected element
Temp will store size of group associateed with every element
Loop to find size of subarray for every element of array
Left will move in left direction and compare difference between itself and element left to it
Right will move in right direction and compare difference between itself and element right to it
If subarray of much lesser or much greater is found than yet known then update
Print minimum and maximum possible size of subarray
Driver Code
Function call to find maximum and minimum possible sub array
Function to count element such that their exist a subarray whose sum is equal to this element
Loop to compute frequency of the given elements
Loop to iterate over every possible subarray of array
Driver Code
Python3 implementation to find the Kth root of a number using log
Function to find the Kth root of the number using log function
Driver Code
Python3 Program to Distribute integer N among A , B , C such that they become equal
find maximum among the three elements
summation of three elements
check if difference is divisible by 3
Driver code
Function to print the representation
N must be greater than equal to 2 * K and must be odd
Driver Code
Function to find the minimum number of steps required
Condition to check if it is not possible to reach
Condition to check if the pair is reached to 1 , 1
Condition to change the A as the maximum element
Driver Code
Function to find the longest mountain subarray
If the size of the array is less than 3 , the array won 't show  mountain like behaviour
When a new mountain sub - array is found , there is a need to set the variables k , j to - 1 in order to help calculate the length of new mountain sub - array
j marks the starting index of a new mountain sub - array . So set the value of j to current index i .
Checks if next element is less than current element
Checks if starting element exists or not , if the starting element of the mountain sub - array exists then the index of ending element is stored in k
This condition checks if both starting index and ending index exists or not , if yes , the length is calculated .
d holds the length of the longest mountain sub - array . If the current length is greater than the calculated length , then value of d is updated .
Ignore if there is no increase or decrease in the value of the next element
Checks and calculates the length if last element of the array is the last element of a mountain sub - array
Driver code
Function that finds if it is possible to make the array contain only 1 element i . e . 0
Check if element is odd
According to the logic in above approach
Driver code
Python3 Program to count perfect squares of given length
Function to check if a number is perfect square
Find floating point value of square root of x .
If square root is an integer
Function to return the count of n digit perfect squares
Initialize result
Traverse through all numbers of n digits
Check if current number ' i ' is perfect square
Driver code
Python3 program to count perfect squares of given length
Function to return the count of n digit perfect squares
Driver code
Function to compute sum of the cubes with alternating sign
Driver Code
Python3 implementation to check that a number is a star number or not
Function to check that the number is a star number
Condition to check if the number is a star number
Driver Code
Function call
Python3 program to find the smallest number such that the sum of the array becomes less than or equal to K when every element of the array is divided by that number
Function to find the smallest number such that the sum of the array becomes less than or equal to K when every element of the array is divided by that number
Binary search between 1 and 10 ^ 9
Calculating the new sum after dividing every element by mid
If after dividing by mid , if the new sum is less than or equal to limit move low to mid + 1
Else , move mid + 1 to high
Returning the minimum number
Driver code
Function to count triplets
Iterate for middle element
Iterate left array for a [ i ]
Iterate right array for a [ k ]
Return the final result
Driver code
Function to find the maximum pair possible for the array
Loop to iterate over every possible pair in the array
Check pair ( x , y ) as well as ( y , x ) for maximum value
Update the answer
Driver Code
Python3 implementation to find the K 'th non-divisible number of N
Function to find the Kth not divisible by N
Driver Code
Function Call
Python3 implementation to find a pair with even parity and maximum sum
Function that returns true if count of set bits in given number is even
Parity will store the count of set bits
Function to print the elements of the array
Function to remove all the even parity elements from the given array
Traverse the array
If the current element has even parity
Driver Code
Function call
Python3 program to check if N is a hexagonal number
Function to check if number is hexagonal
Calculate the value for n
Check if n - floor ( n ) is equal to 0
Driver code
Python3 program to convert number in characters
To calculate the reverse of the number
The remainder will give the last digit of the number
Extract the first digit of the reversed number
Match it with switch case
Divide the number by 10 to get the next number
Driver code
Function to count all the non - contiguous subarrays whose sum can be split as the difference of the squares
Loop to iterate over all the possible subsequences of the array
Finding the sum of all the possible subsequences
Condition to check whether the number can be split as difference of squares
Driver code
Python3 program to find the product of all the combinations of M elements from an array whose index in the sorted order divides M completely
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
If y is odd , multiply x with result
y must be even now
Iterative Function to calculate ( nCr ) % p and save in f [ n ] [ r ] C ( n , r ) % p = [ C ( n - 1 , r - 1 ) % p + C ( n - 1 , r ) % p ] % p and C ( n , 0 ) = C ( n , n ) = 1
If j > i then C ( i , j ) = 0
If i is equal to j then C ( i , j ) = 1
C ( i , j ) = ( C ( i - 1 , j ) + C ( i - 1 , j - 1 ) ) % p
Initialize the answer
For every element arr [ i ] , x is count of occurrence of arr [ i ] in different set such that index of arr [ i ] in those sets divides m completely .
Finding the count of arr [ i ] by placing it at the index which divides m completely
Using fermat 's little theorem
Multiplying with the count
Driver code
Function to check if there exist two numbers product of whose squares is n .
Check whether the product of the square of both numbers is equal to N
Driver code
Function to check if there exist two numbers product of whose squares is n
Initialize dict / map
Store square value in hashmap
Driver Code
Function to print the required array
Check if number is a multiple of 4
Printing Left Half of the array
Printing Right Half of the array
Driver code
Function to find the sum of product of all the subsets formed by only divisors of N
Vector to store all the divisors of n
Loop to find out the divisors of N
Both ' i ' and ' n / i ' are the divisors of n
Check if ' i ' and ' n / i ' are equal or not
Calculating the answer
Excluding the value of the empty set
Driver Code
Python3 program to find the length of Longest Powerful Subsequence in an Array
Function to check if the number is powerful
First divide the number repeatedly by 2
Check if only 2 ^ 1 divides n , then return false
Check if n is not a power of 2 then this loop will execute repeat above process
Find highest power of " factor " that divides n
If only factor ^ 1 divides n , then return false
n must be 1 now if it is not a prime number . Since prime numbers are not powerful , we return false if n is not 1.
Function to find the longest subsequence which contain all powerful numbers
Driver code
Python3 implementation of the approach
Function to return the maximum bitwise OR for any pair of the given array without using bitwise OR operation
Find maximum element in the array
Finding complement will set all unset bits in a number
Iterate through all other array elements to find maximum AND value
c will give the maximum value that could be added to max_value to produce maximum OR value
Driver code
Function to perform the update operation on the given array
Converting the indices to 0 indexing .
Saving the XOR of K from the starting index in the range [ L , R ] .
Saving the XOR of K at the ending index in the given [ L , R ] .
Function to display the resulting array
Finding the resultant value in the result array
Combining the effects of the updates with the original array without changing the initial array .
Driver code
Query 1
Query 2
Query 3
Python3 program to make array elements pairwise distinct by removing at most one subarray of minimum length
Function to check if elements of Prefix and suffix of each sub array of size K are pairwise distinct or not
Hash map to store frequencies of elements of prefix and suffix
Variable to store number of occurrences of an element other than one
Adding frequency of elements of suffix to hash for subarray starting from first index There is no prefix for this sub array
Counting extra elements in current Hash map
If there are no extra elements return true
Check for remaining sub arrays
First element of suffix is now part of subarray which is being removed so , check for extra elements
Decrement frequency of first element of the suffix
Increment frequency of last element of the prefix
Check for extra elements
If there are no extra elements return true
Function for calculating minimum length of the subarray , which on removing make all elements pairwise distinct
Possible range of length of subarray
Binary search to find minimum ans
Driver code
Function to print distinct n numbers such that their sum is 0
Print 2 symmetric numbers
Print a extra 0 if N is odd
Driver code
Function to calculate the electricity bill
Condition to find the charges bar in which the units consumed is fall
Driver Code
Function to find the factors of the numbers from 1 to N
Loop to find the factors of the first N natural numbers of the integer
Driver Code
Python3 program to find the factors of first N natural numbers
Initialize divisor list ( array ) of sequence container
Calculate all divisors of a number
Function to find the factors of first n natural numbers
Driver code
Function call
Python3 implementation to find the maximum count of the prime factors by the count of factors of number
Function to count number of prime factors of x
Count variable is incremented form every prime factor of x
Loop to count the number of the prime factors of the given number
Driver Code
Function to find the count of N digits palindromic numbers which are divisible by 9
If N is odd
If N is even
Driver Code
Function that returns the count of sub - arrays with odd product
Initialize the count variable
Initialize variable to store the last index with even number
Initialize variable to store count of continuous odd numbers
Loop through the array
Check if the number is even or not
Calculate count of continuous odd numbers
Increase the count of sub - arrays with odd product
Store the index of last even number
N considered as index of even number
Driver Code
Function call
Python3 program to calculate the CGPA and CGPA percentage of a student
Variable to store the grades in every subject
Variables to store CGPA and the sum of all the grades
Computing the grades
Computing the sum of grades
Computing the CGPA
Driver code
Function to find the minimum XOR of the subarray of size K
K must be smaller than or equal to n
Initialize beginning index of result
Compute XOR sum of first subarray of size K
Initialize minimum XOR sum as current xor
Traverse from ( k + 1 ) ' th ▁ ▁ element ▁ to ▁ n ' th element
XOR with current item and first item of previous subarray
Update result if needed
Driver Code
Subarray size
Function Call
Python3 implementation to find the greatest number from the given pairs of the array
Function to find the greatest number formed from the pairs
first append Y at the end of X
then append X at the end of Y
Now see which of the two formed numbers is greater than other
Function to find pairs from array
Iterate through all pairs
Driver code
Function to check that two numbers are in golden ratio
Swapping the numbers such that A contains the maximum number between these numbers
First Ratio
Second Ratio
Condition to check that two numbers are in golden ratio
Driver Code
Function Call
Python3 program to find the minimum number to be added to N to make it a power of K
Function to return the minimum number to be added to N to make it a power of K .
Computing the difference between then next greater power of K and N
Driver code
Python3 implementation to find the previous perfect square and cube smaller than the given number
Function to find the previous perfect square of the number N
If N is already a perfect square decrease prevN by 1.
Function to find the previous perfect cube
If N is already a perfect cube decrease prevN by 1.
Driver Code
Function to count the pairs in array of the form ( even , odd )
Variable to store count of such pairs
Iterate through all pairs
Increment count if condition is satisfied
Driver code
Function to count the pairs in array of the form ( even , odd )
Check if number is even or not
Driver code
Function to find the product of all non - repeating Subarrays of an Array
Finding the occurrence of every element
Iterating through the array and finding the product
We are taking the power of each element in array with the occurrence and then taking product of those .
Driver code
Python 3 program for the above approach
Function to find a ^ b efficiently
Base Case
To store the value of a ^ b
Multiply temp by a until b is not 0
Return the final ans a ^ b
Function to find sum of all N - digit palindromic number divisible by 9
Base Case
If N is even , decrease ways by 1
Find the total number of ways
Iterate over [ 1 , N ] and find the sum at each index
Print the final Sum
Driver Code
Function to join the two numbers
Loop to reverse the digits of the one number
Loop to join two numbers
Function to find the maximum array sum
Loop to iterate over the two elements of the array
Find the array sum
Return the array sum
Driver Code
Function to create and print the two sets
For n <= 2 such sets can never be formed
Check if N is even or odd and store the element which divides the sum of N natural numbers accordingly
First set
Print elements of second set
Driver code
Function to find the count of factors of K present in array
Loop to consider every element of array
Driver Code
Function Call
Function which returns the in digit format
a : real b : imaginary
sa : sign of a sb : sign of b
Extract the real number
Extract the imaginary part
If size == 1 means we reached at result
Extract the first two elements
Remove them
Calculate and store the real part
Calculate and store the imaginary part
Append the real part
Append the imaginary part
Insert into vector
Driver code
Function that returns true if n is perfect
To store sum of divisors
Find all divisors and add them
check if the sum of divisors is equal to n , then n is a perfect number
Function to return the length of the largest sub - array of an array every element of whose is a perfect number
check if arr [ i ] is a perfect number
Driver code
Python 3 program to find the length of the largest sub - array of an array every element of whose is a powerful number
function to check if the number is powerful
First divide the number repeatedly by 2
If only 2 ^ 1 divides n ( not higher powers ) , then return false
If n is not a power of 2 then this loop will execute repeat above process
Find highest power of " factor " that divides n
If only factor ^ 1 divides n ( not higher powers ) , then return false
n must be 1 now if it is not a prime numenr . Since prime numbers are not powerful , we return false if n is not 1.
Function to return the length of the largest sub - array of an array every element of whose is a powerful number
If arr [ i ] is a Powerful number
Driver code
Function to return maximum sum
Base case
Pick the start index
Pick the end index
Recursive function call
Return the final answer
Function to find the maximized sum
Driver code
Function to return maximum sum
Initialize variables
Iterate over first K elements of array and update the value for curr_points
Update value for max_points
j points to the end of the array
Return the final result
Driver code
Function for finding count of N digits palindrome which are divisible by 9
If N is odd
If N is even
Function for finding sum of N digits palindrome which are divisible by 9
Count the possible number of palindrome
Driver Code
Python3 implementation to find the count of natural numbers up to N digits
Function to return the count of natural numbers upto N digits
Loop to iterate from 1 to N and calculating number of natural numbers for every ' i ' th digit .
Driver Code
Python3 code to find out the smallest perfect square X which when added to N yields another perfect square number .
X is the smallest perfect square number
Loop from 1 to square root of N
Condition to check whether i is factor of N or not
Condition to check whether factors satisfies the equation or not
Stores minimum value
Return if X * X if X is not equal to 1e9 else return - 1
Driver code
Function to find the minimum cost
Sort the given array
Initialise a new array of double size
Fill the array elements
Find the minimum path cost
Return the final result
Driver code
Function to find single occurrence element
By shifting 1 to left ith time and taking and with 1 will give us that ith bit of a [ j ] is 1 or 0
Taking modulo of p with k
Generate result
Loop for negative numbers
Check if the calculated value res is present in array , then mark c = 1 and if c = 1 return res else res must be - ve
Driver code
Function call
Python3 program to find the minimum GCD of any pair in the array
Function returns the Minimum GCD of any pair
Finding GCD of all the elements in the array .
Driver code
Function to count the number of jumps required to reach Nth stairs .
Till N becomes 0
Removes the set bits from the right to left
Driver Code
Number of stairs
Function Call
Python3 program for the above approach
Function to check whether a number is perfect square or not
Function to check whether a number is fibonacci number or not
If 5 * n * n + 4 or 5 * n * n - 5 is a perfect square , then the number is Fibonacci
Function to count the subarray with sum fibonacci number
Traverse the array arr [ ] to find the sum of each subarray
To store the sum
Check whether sum of subarray between [ i , j ] is fibonacci or not
Driver Code
Function Call
Python3 program to calculate the above formula
To store the factorials of all numbers
Function to calculate factorial of all numbers
Calculate x to the power y in O ( log n ) time
Function to find inverse mod of a number x
Calculate ( n C r )
Loop to compute the formula evaluated
Add even power terms
Subtract odd power terms
Choose the k boxes which were used
Driver code
Recursive function to print from N to 1
if N is less than 1 then return void function
recursive call of the function
Driver Code
Function to find the xor of the first half elements and second half elements of an array
xor of elements in FirstHalfXOR
xor of elements in SecondHalfXOR
Driver Code
Function call
Python3 program to find the minimum Volume of the cone that can be circumscribed about a sphere of radius R
Function to find the volume of the cone
r = radius of cone h = height of cone Volume of cone = ( 1 / 3 ) * ( 3.14 ) * ( r * * 2 ) * ( h ) we get radius of cone from the derivation is root ( 2 ) times multiple of R we get height of cone from the derivation is 4 times multiple of R
Driver code
Python3 program to find the Surface area and volume of octagonal prism
Function to find the Volume of octagonal prism
Formula to calculate volume = ( area * h )
Display volume
Function to find the surface area of octagonal prism
Formula to calculate Surface area
Driver Code
Python 3 program to find the count of pairs from 1 to N such that their LCM is not equal to their product
To store Euler 's Totient Function
To store prefix sum table
Compute Totients of all numbers smaller than or equal to N
Make phi [ 1 ] = 0 since 1 cannot form any pair
Initialise all remaining phi [ ] with i
Compute remaining phi
If phi [ p ] is not computed already , then number p is prime
phi of prime number is p - 1
Update phi of all multiples of p
Add the contribution of p to its multiple i by multiplying it with ( 1 - 1 / p )
Function to store prefix sum table
Prefix Sum of all Euler 's Totient Values
Total number of pairs that can be formed
Driver Code
Function call to compute all phi
Function call to store all prefix sum
Function to calculate GCD
Function to calculate b1 , b2 and b3
Variable declaration
temp variable to store gcd
Computing GCD
Driver code
Function to find maximum alternating subsequence sum
initialize sum to 0
calculate the sum
return the final result
array initiaisation
length of array
Function to find minimum size subarray of all array elements
Updating the array after processing each query
Making it to 0 - indexing
Prefix sum array concept is used to obtain the count array
Iterating over the array to get the final array
Variable to get count of all unique elements
Hash to maintain perviously occurred elements
Loop to find the all unique elements
Array to maintain counter of encountered elements
Variable to store answer
Using two pointers approach
Increment counter if occurred once
When all unique elements are found
update answer with minimum size
Decrement count of elements from left
Decrement counter
Driver code
Function to mark all the exponent of prime numbers
If number is prime then marking all of its exponent true
Function to display all required elements
Function to print the required numbers
To find the largest number
Function call to mark all the Exponential prime nos .
Function call
Driver code
Method returns Nth power of A
Smaller eps , denotes more accuracy
Initializing difference between two roots by INT_MAX
x ^ K denotes current value of x
loop untiwe reach desired accuracy
calculating current value from previous value by newton 's method
Function to check whether its k root is an integer or not
Function to find the numbers
Driver code
Function to count the number of contiguous subsequences whose product can be expressed as square of difference of two integers
Iterating through the array
Check if that number can be expressed as the square of difference of two numbers
Variable to compute the product
Finding the remaining subsequences
Check if that number can be expressed as the square of difference of two numbers
Return the number of subsequences
Driver code
Function to count all the contiguous subsequences whose product is expressed as the square of the difference of two integers
Creating vectors to store the remainders and the subsequences
Iterating through the array
Finding the remainder when the element is divided by 4
Bringing all the elements in the range [ 0 , 3 ]
If the remainder is 2 , store the index of the
If the remainder is 2 , store the index of the
Finding the total number of subsequences
If there are no numbers which yield the remainder 2
Iterating through the vector
If the element is 2 , find the nearest 2 or 0 and find the number of elements between them
Returning the count
Driver Code
Function to count the subarray for the given array
Function to count the subsequence for the given array length
Driver Code
Function to return the value of f ( x ) for the given value of x
Function to computes the integrand of y at the given intervals of x with step size h and the initial limit a and final limit b
Number of intervals
Computing the step size
Substituing a = 0 , b = 4 and h = 1
Driver code
Python3 program to find the number of subsets with equal bitwise AND , OR and XOR values
Function to find the number of subsets with equal bitwise AND , OR and XOR values
Precompute the modded powers of two for subset counting
Loop to iterate and find the modded powers of two for subset counting
Map to store the frequency of each element
Loop to compute the frequency
For every element > 0 , the number of subsets formed using this element only is equal to 2 ^ ( frequency [ element ] - 1 ) . And for 0 , we have to find all the subsets , so 2 ^ ( frequency [ element ] ) - 1
If element is greater than 0
Driver code
Python3 implementation to find the sum of all perfect numbers lying in the range [ L , R ]
Array to store the sum
Function to check if a number is a perfect number or not
Iterating till the square root of the number and checking if the sum of divisors is equal to the number or not
If it is a perfect number , then return the number
Else , return 0
Function to precompute the sum of perfect squares and store then in an array
Python3 program to convert a ternary number to decimal number
Function to convert a ternary number to a decimal number
If the number is greater than 0 , compute the decimal representation of the number
Loop to iterate through the number
Computing the decimal digit
Driver code
Python3 program for the above approach
Function to check whether N is Perfect Square or not
Find sqrt
Function to check whether the given pairs of numbers is Betrothed Numbers or not
For finding the sum of all the divisors of first number n
For finding the sum of all the divisors of second number m
Driver Code
Function Call
Function to calculate GCD using euler totient function
Finding the prime factors of limit to calculate it 's  euler totient function
Calculating the euler totient function of ( mk )
Function print the count of numbers whose GCD with M equals to K
GCD of m with any integer cannot be equal to k
0 and m itself will be the only valid integers
Finding the number upto which coefficient of k can come
Driver code
Function to find the product of the sum of diagonals .
Initialize sums of diagonals
Return the answer
Driven code
Function call
Program to calculate the percentile
flat variable to store the result
calculate and return the percentile
Driver Code
Python3 implementation to find the Sum of numbers in the Kth level of a Fibonacci triangle
Function to return the nth Fibonacci number
Function to return the required sum of the array
Using our deduced result
Function to return the sum of fibonacci in the Kth array
Count of fibonacci which are in the arrays from 1 to k - 1
Driver code
Function to generate the series in the form of array
Pick a starting point
Find the sum of all elements till count < K
Find the value of sum at i position
Driver Code
Function to generate the series in the form of array
Pick a starting point
Computing the previous sum
Loop to print the series
Driver code
Function to find GCD
To store the maximum GCD
Traverse the array
Find GCD of the consecutive element
If calculated GCD > maxGCD then update it
Print the maximum GCD
Driver Code
Function call
Function to find sum in the given range
Find the value of k
Find the common difference
Find the sum
Driver code
Function to check whether there exists a subarray whose sum is greater than or equal to sum of given array elements
Initialize sum with 0
Checking possible prefix subarrays . If sum of them is less than or equal to zero , then return 1
again reset sum to zero
Checking possible suffix subarrays . If sum of them is less than or equal to zero , then return 1
Otherwise return 0
Driver Code
A sample function f ( x ) = 1 / ( 1 + x ^ 2 )
Function to find the integral value of f ( x ) with step size h , with initial lower limit and upper limit a and b
Find step size h
To store the final sum
Find sum using Weedle 's Formula
Return the final sum
Driver Code
lower limit and upper limit
Function Call
Function to check if a given number is a prime or not
Base cases
This is checked so that we can skip middle five numbers in below loop
For all the remaining numbers , check if any number is a factor if the number or not
If none of the above numbers are the factors for the number , then the given number is prime
Function to return the smallest number to be added to make a number prime
Base case
Loop continuously until isPrime returns true for a number greater than n
If the number is not a prime , then increment the number by 1 and the counter which stores the number to be added
Driver code
Python3 program to find the position of the given prime number
Function to precompute the position of every prime number using Sieve
0 and 1 are not prime numbers
Variable to store the position
Incrementing the position for every prime number
Driver code
Function to find the maximum sum of the sub array
max_so_far represents the maximum sum found till now and max_ending_here represents the maximum sum ending at a specific index
Iterating through the array to find the maximum sum of the subarray
If the maximum sum ending at a specific index becomes less than 0 , then making it equal to 0.
Function to find the minimum possible sum of the array elements after performing the given operation
Finding the sum of the array
Computing the minimum sum of the array
Driver code
Function to check if the sequence is concatenation of two permutations or not
Computing the sum of all the elements in the array
Computing the prefix sum for all the elements in the array
Iterating through the i from lengths 1 to n - 1
Sum of first i + 1 elements
Sum of remaining n - i - 1 elements
Lengths of the 2 permutations
Checking if the sums satisfy the formula or not
Function to print the two permutations
Print the first permutation
Print the second permutation
Function to find the two permutations from the given sequence
If the sequence is not a concatenation of two permutations
Find the largest element in the array and set the lengths of the permutations accordingly
Driver code
Function to reverse the digits of the number
Loop to iterate till the number is greater than 0
Extract the last digit and keep multiplying it by 10 to get the reverse of the number
Function to find the pairs from the such that one number is reverse of the other
Iterate through all pairs
Increment count if one is the reverse of other
Driver code
Python3 program to count the pairs in array such that one element is reverse of another
Function to reverse the digits of the number
Loop to iterate till the number is greater than 0
Extract the last digit and keep multiplying it by 10 to get the reverse of the number
Function to find the pairs from the array such that one number is reverse of the other
Iterate over every element in the array and increase the frequency of the element in hash map
Iterate over every element in the array
remove the current element from the hash map by decreasing the frequency to avoid counting when the number is a palindrome or when we visit its reverse
Increment the count by the frequency of reverse of the number
Driver code
Python 3 program to find the required sum
Function to return the required sum
Iterating for all the number of digits from 1 to 10
If the range is valid
Sum of AP
Computing the next minimum and maximum numbers by for the ( i + 1 ) - th digit
Driver code
Function to check if a number is a prime number or not
Initializing with the value 2 from where the number is checked
Computing the square root of the number N
While loop till the square root of N
If any of the numbers between [ 2 , sqrt ( N ) ] is a factor of N Then the number is composite
If none of the numbers is a factor , then it is a prime number
Driver code
To check if a number is a prime or not
Function to check if it is possible to choose a subarray that contains exactly K even integers
Variable to store the count of even numbers
If we have to select 0 even numbers but there is all odd numbers in the array
If the count of even numbers is greater than or equal to K then we can select a subarray with exactly K even integers
If the count of even numbers is less than K then we cannot select any subarray with exactly K even integers
Driver code
Function to Count of pairs ( A , B ) in range 1 to N
count C i , j
Calculate number of pairs
Driver code
Function call
Function to count the number of ways to divide C into two parts and add to A and B such that A is strictly greater than B
Minimum value added to A to satisfy the given relation
Number of different values of A , i . e . , number of ways to divide C
Driver code
Python 3 program to find the GCD of elements which occur Fibonacci number of times
Function to create hash table to check Fibonacci numbers
Inserting the first two numbers into the hash
Adding the remaining Fibonacci numbers using the previously added elements
Function to return the GCD of elements in an array having fibonacci frequency
Creating the hash
Map is used to store the frequencies of the elements
Iterating through the array
Traverse the map using iterators
Calculate the gcd of elements having fibonacci frequencies
Driver code
Function to prthe series
Generate the ith term and print
Driver Code
Function to find Nth term
Iterate from 1 till Nth term
Check if i is even and then add 6
Else add 2
Print ans
Driver Code
Python3 program to find the number of ordered pairs such that a * p + b * q = N where p and q are primes
Sieve of erastothenes to store the prime numbers and their frequency in form a * p + b * q
Performing Sieve of Eratosthenes to find the prime numbers unto 10001
Loop to find the number of ordered pairs for every combination of the prime numbers
Driver code
Printing the number of ordered pairs for every query
Function to find the sum of series
Generate the ith term and add it to the sum if i is even and subtract if i is odd
Print the sum
Driver Code
Function to find the summ of series
Generate the ith term and add it to the summ
Prthe summ
Driver Code
Function to find the sum of the given series
Initialise the sum to 0
Generate the ith term and add it to the sum
Print the final sum
Driver Code
Function to find the sum of series
Flag to find the multiplicating factor . . i . e , by 2 or 3 / 2
First term
If flag is true , multiply by 2
If flag is false , multiply by 3 / 2
Update the previous element to nextElement
Print the sum
Driver Code
Function to find the sum of two integers of base B
Padding 0 in front of the number to make both numbers equal
Condition to check if the strings have lengths mis - match
Loop to find the find the sum of two integers of base B
Current Place value for the resultant sum
Update carry
Find current digit
Update sum result
Driver Code
Function Call
Function that prminimum number of swap operations required
Condition if more than one zero exist
Condition if zero_exist
Computing total sum of all digits
Condition if zero does not exist or the sum is not divisible by 3
Condition to find a digit that is multiple of 2 other than one zero
Condition if multiple of 2 do not exist
Condition for zero swaps means the number is already is divisible by 60
Condition for only one swap
Otherwise 2 swaps required
Driver Code
Function to check if a number is a Palindrome or not
Taking the string value of the number
Loop to check if every i - th character from beginning is equal to every ( N - i ) th char
Function to find the largest palindrome which is a product of two N digited numbers
Find lowerBound , upperBound for a given nDigits . for n = 2 [ 10 , 99 ]
Result variables
Keep p decrementing by 11
Find the nearest number divisible by 11
Keep decrementing q by 1
Update the result if t > r and is a palindrome
Printing the final result
Driver code
Python3 implementation of the above approach
max_prime [ i ] represents maximum prime number that divides the number i
min_prime [ i ] represents minimum prime number that divides the number i
Function to store the minimum prime factor and the maximum prime factor in two arrays
Check for prime number if min_prime [ i ] > 0 , then it is not a prime number
If i is a prime number , then both minimum and maximum prime numbers that divide the number is the number itself
If this number is being visited for first time then this divisor must be the smallest prime number that divides this number
The last prime number that divides this number will be maximum .
Function to minimize the cost of finding two numbers for every number such that the product of those two is equal to X
Pre - calculation
If X == 1 , then there is no way to find N and M . Print - 1
Case 3 is always valid and cost for that is C + X C for choosing 1 and M = X / 1
Case 1 N is prime , first number cost is fixed N is max_prime number divides this number
If X is prime then the maximum prime number is the number itself . For this case , M becomes 1 and this shouldn 't be considered.
Find M for this case
Add cost for the second number also
Update min_cost , if the cost for prime is minimum
Case 2 If N is composite For this find the minimum prime number that divides A [ i ] and consider this as M
Find N for that number
Check if this number is composite or not if N is prime then there is no way to find any composite number that divides X If N = min_prime [ N ] then N is prime
Update min_cost , if the cost for the composite is minimum
Driver code
Function to count the digit K in the given number N
Extracting least significant digit
Driver Code
Function to find product of all subarrays
Variable to store the product
Compute the product while traversing for subarrays
Printing product of all subarray
Driver code
Function call
Function to find the required number as M
Finding the maximum value among X and Y
Loop to iterate through maximum value among X and Y .
If the condition satisfies , then print the value of M
Driver code
Function to prall the possible values of M such that X % M = Y % M
Finding the absolute difference of X and Y
Iterating from 1
Loop to prall the factors of D
If i is a factor of d , then pri
If d / i is a factor of d , then prd / i
Driver code
Function to check whether a number can be represented by the difference of two squares
Checking if n % 4 = 2 or not
Driver code
Python3 program to count number of divisors of N which are Fibonacci numbers
Function to create hash table to check Fibonacci numbers
Function to count number of divisors of N which are fibonacci numbers
If divisors are equal , check and count only one
Otherwise check and count both
Driver code
A binary tree node
A utility function to allocate a new node
Base Case : If node is None , return 0
Calculating the XOR of the current subtree
Increment res if xr is equal to k
Return the XOR value of the current subtree
Function to find the required count
Initialize result variable 'res
Recursively traverse the tree and compute the count
return the count 'res
Driver program
Create the binary tree by adding nodes to it
Function to find the minimum cost required to make array elements equal
Loop to find the count of odd elements
Driver Code
Function to find the count of prime digits in a number
Loop to compute all the digits of the number
Finding every digit of the given number
Checking if digit is prime or not Only 2 , 3 , 5 and 7 are prime one - digit number
Driver code
Function to check if an array represents a permutation or not
Counting the frequency
Check if each frequency is 1 only
Driver code
Function to check if the XOR of an array of integers is Even or Odd
Count the number of odd elements
If count of odd elements is odd , then XOR will be odd
Else even
Driver Code
Function call
Python 3 program to find the length of Longest Prime Subsequence in an Array
Function to create Sieve to check primes
False here indicates that it is not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p , set them to non - prime
Function to find the longest subsequence which contain all prime numbers
Precompute N primes
Find the length of longest prime subsequence
Driver code
Function call
Check if the number is odd or even
Check if the last digit is either '0' , '2' , '4' , or '6
Driver code
A sample differential equation " dy / dx ▁ = ▁ ( x ▁ - ▁ y ) /2"
Finds value of y for a given x using step size h and initial value y0 at x0 .
Count number of iterations using step size or step height h
Iterate for number of iterations
Apply Runge Kutta Formulas to find next value of y
Update next value of y
Update next value of x
Driver Code
Python program to find the count of Fibonacci pairs ( x , y ) which satisfy the equation Ax + By = N
Array to store the Fibonacci numbers
Array to store the number of ordered pairs
Function to find if a number is a perfect square
Function that returns 1 if N is non - fibonacci number else 0
N is Fibinacci if one of 5 * n * n + 4 or 5 * n * n - 4 or both are perferct square
Function to store the fibonacci numbers and their frequency in form a * x + b * y
Storing the Fibonacci numbers
For loop to find all the possible combinations of the Fibonacci numbers
Finding the number of ordered pairs
Driver code
Find the ordered pair for every query
Python program to maximise the sum of two Numbers using at most one swap between them
Function to maximize the sum by swapping only one digit
Store digits of max ( n1 , n2 )
Store digits of min ( n1 , n2 )
If length of the two numbers are unequal
Find the most significant number and the most significant index for swapping
If both numbers are of equal length
Fetch the index of current maximum digit present in both the arrays
Compute the difference
Find the most significant index and the most significant digit to be swapped
Restore the new numbers
Display the maximized sum
Driver function
Function to check if the number is divisible by 47 or not
While there are at least two digits
Extracting the last
Truncating the number
Subtracting fourteen times the last digit to the remaining number
Finally return if the two - digit number is divisible by 43 or not
Driver Code
Check if the number is odd or even
check if the last digit is either '0' , '2' , '4' , '6' , '8' , ' A ' ( = 10 ) , ' C ' ( = 12 ) or ' E ' ( = 14 )
Driver code
Function to check if the number is divisible by 31 or not
While there are at least two digits
Extracting the last
Truncating the number
Subtracting three times the last digit to the remaining number
Finally return if the two - digit number is divisible by 31 or not
Driver Code
Function to check if the number is divisible by 43 or not
While there are at least two digits
Extracting the last
Truncating the number
Adding thirteen times the last digit to the remaining number
Finally return if the two - digit number is divisible by 43 or not
Driver Code
Python 3 implementation of the approach
Function to check if a number is perfect square
Function to check if a number is Fibinacci Number
N is Fibinacci if either ( 5 * N * N + 4 ) , ( 5 * N * N - 4 ) or both is a perferct square
Function to find the next Non - Fibinacci Number
Case 1 If N <= 3 , then 4 will be next Non - Fibinacci Number
Case 2 If N + 1 is Fibinacci , then N + 2 will be next Non - Fibinacci Number
If N + 1 is Non - Fibinacci , then N + 2 will be next Non - Fibinacci Number
Driver code
Python 3 program to represent K ^ N as the sum of exactly N numbers
Function to print N numbers whose sum is a power of K
Printing K ^ 1
Loop to print the difference of powers from K ^ 2
Driver code
Function to check if the number is divisible by 71 or not
While there are at least two digits
Extracting the last
Truncating the number
Subtracting seven times the last digit to the remaining number
Finally return if the two - digit number is divisible by 71 or not
Driver Code
Function to find the number of digits in number which divides the number and is also a prime number
Only 2 , 3 , 5 and 7 are prime one - digit number
Loop to compute all the digits of the number untill it is not equal to the zero
Fetching each digit of the number
Checking if digit is greater than 0 and can divides n and is prime too
Driver Code
Python 3 implementation of the approach
Function to find the digits
Function to Find OR of all digits of a number
Find OR of all digits
return OR of digits
Function to Find AND of all digits of a number
Find AND of all digits
return AND of digits
Function to Find XOR of all digits of a number
Find XOR of all digits
return XOR of digits
Driver code
Find and store all digits
Find XOR of digits
Find OR of digits
Find AND of digits
Driver code
Function that count the Length of longest subarray with product greater than or equals to zero
If product is greater than zero , return array size
Traverse the array and if any negative element found then update the Length of longest subarray with the Length of left and right subarray
Driver Code
Python3 program to find any pair which has sum S and product P .
Prints roots of quadratic equation ax * 2 + bx + c = 0
calculating the sq root value for b * b - 4 * a * c
Finding the roots
Check if the roots are valid or not
Finding the roots
Check if the roots are valid or not
when d < 0
No such pair exists in this case
Driver code
Function to find the N numbers such that their product is a perfect cube
Loop to traverse each number from 1 to N
Print the cube of i as the ith term of the output
Driver Code
Function Call
Utility function to find sum of all proper divisor of number up to N
Loop to iterate over all the numbers from 1 to N
Find all divisors of i and add them
Subtracting ' i ' so that the number itself is not included
Driver Code
Utility function to find sum of all proper divisor of number up to N
Loop to find the proper divisor of every number from 1 to N
Driver Code
Function to find the minimum difference in the number D such that D is inside of every range
Loop to find the common range out of the given array of ranges .
Storing the start and end index
Sorting the range
Finding the maximum starting value of common segment
Finding the minimum ending value of common segment
If there is no common segment
If the given number is between the computed common range .
Finding the minimum distance
Driver Code
Given array of ranges
Python 3 implementation to find the Number of factors of very large number N modulo M
Function for modular multiplication
Function to find the number of factors of large Number N
Count the number of times 2 divides the number N
Condition to check if 2 divides it
Check for all the possible numbers that can divide it
Loop to check the number of times prime number i divides it
Condition to check if prime number i divides it
Condition to check if N at the end is a prime number .
Driver Code
Function to find the maximum value of B such that A ^ B = A + B
Binary Representation of A
Loop to find the negation of the integer A
output
Driver Code
Function Call
Python implementation of the above approach
Function for Sieve of Eratosthenes
If i is prime , then make all multiples of i false
Function to prall Pairs whose XOR is prime
if A [ i ] ^ A [ j ] is prime , then prthis pair
Driver Code
Generate all the prime number
Function Call
function to find 3 distinct number with given product
Declare a vector to store divisors
store all divisors of number in array
store all the occurence of divisors
check if n is not equals to - 1 then n is also a prime factor
Initialize the variables with 1
check for first number a
check for second number b
check for third number c
check for all unwanted condition
Driver function
Function that returns the all the distinct prime factors in a vector
If n is divisible by 2
Divide n till all factors of 2
Check for the prime numbers other than 2
Store i in Prime [ ] i is a factor of n
Divide n till all factors of i
If n is greater than 2 , then n is prime number after n divided by all factors
Returns the vector Prime
Function that check whether N is the product of distinct prime factors or not
Returns the vector to store all the distinct prime factors
To find the product of all distinct prime factors
Find the product
If product is equals to N , print YES , else print NO
Driver Code
Python 3 implementation to find the count of numbers those are powers of K in range L to R
Function to find the Nth root of the number
initially guessing a random number between 0 to 9
Smaller eps , denotes more accuracy
Initializing difference between two roots by INT_MAX
loo3p until we reach desired accuracy
calculating current value from previous value
Function to count the perfect powers of K in range L to R
Driver code
Function to check if n is prime
Function to count the minimum prime required for given sum N
Case 1 :
Case 2 :
Case 3 :
Case 3 a :
Case 3 b :
Driver Code
Function Call
Python3 program to find the square root of a number by using long division method
Function to find the square root of a number by using long division method
udigit , j = 0 , 0 Loop counters
Dividing the number into segments
Last index of the array of segments
Start long division from the last segment ( j = i )
Initialising the remainder to the maximum value
Including the next segment in new dividend
Loop to check for the perfect square closest to each segment
This condition is to find the divisor after adding a digit in the range 0 to 9
Calculating the remainder
Updating the units digit of the quotient
Adding units digit to the quotient
New divisor is two times quotient
Including the remainder in new dividend
Driver code
Python3 implementation to count the consecutive fibonacci pairs in the array
Function to find the previous fibonacci for the number N
Function to find the next fibonacci number for the number N
Function to check that a Number is a perfect square or not
Function to check that a number is fibonacci number or not
N is Fibinacci if one of ( 5 * n * n + 4 ) or ( 5 * n * n - 4 ) is a perferct square
Function to count the fibonacci pairs in the array
Loop to iterate over the array to choose all pairs of the array
Condition to check if both the number of pair is a fibonacci number
Condition to check if both the number form consecutive fibonacci numbers
Driver Code
Function to count the number of pairs whose product is equal to K
Pick all elements one by one
Check if the product of this pair is equal to K
Driver code
Python3 program to count the number of pairs whose product is equal to K
Function to count the number of pairs whose product is equal to K
Initialize the count
Initialize empty hashmap .
Insert array elements to hashmap
Checking if the index is a whole number and present in the hashmap
Driver code
Function to find K odd integers such that their sum is N
Condition to check if there exist such K integers
Loop to find first K - 1 distinct odd integers
Final Kth odd number
Driver code
Python3 implementation to find the sum of the product of proper divisors of all the numbers lying in the range [ L , R ]
Vector to store the product of the proper divisors of a number
Variable to store the prefix sum of the product array
Function to precompute the product of proper divisors of a number at it 's corresponding index
Modificatino of sieve to store the product of the proper divisors
Multiplying the existing value with i because i is the proper divisor of ans [ j ]
Loop to store the prefix sum of the previously computed product array
Computing the prefix sum
Function to prthe sum for each query
Function to prte sum of product of proper divisors of a number in [ L , R ]
Calling the function that pre computes the sum of product of proper divisors
Iterate over all Queries to prthe sum
Driver code
Function to search the most recent location of element N If not present in the array it will return - 1
Function to generate an array of size N by following the given rules
Loop to fill the array as per the given rules
Check for the occurrence of arr [ i - 1 ]
Driver code
Function to return an ArrayList containing all the perfect cubes upto n
while current perfect cube is less than or equal to n
Function to print the sum of maximum two elements from the array
Function to return the count of numbers that when added with n give a perfect cube
temp > n is checked so that pairs ( x , y ) and ( y , x ) don 't get counted twice
Function to count the pairs whose sum is a perfect cube
Sum of the maximum two elements from the array
List of perfect cubes upto max
Contains all the array elements
Add count of the elements that when added with arr [ i ] give a perfect cube
Driver code
Function that returns the count of squares parallel to both X and Y - axis from a given set of points
Initialize result
Initialize a set to store points
Initialize a map to store the points in the same vertical line
Store the points in a set
Store the points in the same vertical line i . e . with same X co - ordinates
Check for every two points in the same vertical line
Check if other two point are present or not
Driver Code
Function to count cubes between two numbers
Traverse through all numbers
Check if current number ' i ' is perfect cube
Driver code
An Efficient Method to count cubes between a and b
Function to count cubes between two numbers
Driver code
Function to check if a number is Armstrong or not
Function to find XOR of all N - digits Armstrong number
To store the XOR and OR of all Armstrong number
Starting N - digit Armstrong number
Ending N - digit Armstrong number
Iterate over starting and ending number
To check if i is Armstrong or not
Print the XOR and OR of all Armstrong number
Driver Code
Function to check if a number is a perfect Cube or not
Iterate from 1 - N
Find the cube of every number
Check if cube equals N or not
Driver code
Function call
Function to check if a number is a perfect Cube using inbuilt function
If cube of cube_root is equals to N , then print Yes Else print No
Driver 's code
Function call to check N is cube or not
Function to whether the array can be made zero or not
Count for even elements
Count for odd elements
Traverse the array to count the even and odd
If arr [ i ] is odd
If arr [ i ] is even
Check if count of even is zero or count of odd is zero
Driver 's Code
Python 3 implementation of the approach
Function to find the required summation
Find the sum of first N integers using the formula
Find the sum of numbers which are exact power of 2 by using the formula
Print the final Sum
Driver 's Code
Function to find the sum
Function to print the largest N - digit even and odd numbers of base B
Initialise the Number
If Base B is even , then B ^ n will give largest Even number of N + 1 digit
To get even number of N digit subtract 2 from B ^ n
To get odd number of N digit subtract 1 from B ^ n
If Base B is odd , then B ^ n will give largest Odd number of N + 1 digit
To get even number of N digit subtract 1 from B ^ n
To get odd number of N digit subtract 2 from B ^ n
Driver 's Code
Function to find the numbers
Returns the minimum divisor
Since 2 is only even prime , compute its power seprately .
If count is not divisible by 3 , it must be removed by dividing n by prime number power .
If count is not divisible by 3 , it must be removed by dividing n by prime number power .
if n is a prime number
Driver code
Python3 program to check whether the number can be made perfect square after adding K
Function to check whether the number can be made perfect square after adding K
Computing the square root of the number
Print Yes if the number is a perfect square
Driver code
Python3 implementation of the approach
Function to return the count of steps
Variable to store the count of steps
Iterate while N > 0
Get the largest perfect cube and subtract it from N
Increment steps
Return the required count
Driver code
Function to find the product of all elements in all subsets in natural numbers from 1 to N
Driver Code
Python3 program to find the radii of the three tangent circles of equal radius when the radius of the circumscribed circle is given
Driver code
Python3 program to find the number of common tangents between the two circles
Driver code
Python3 program to find the ratio of the distance between the centres of the circles and the point of intersection of two transverse common tangents to the circles which do not touch each other
Function to find the ratio
Driver code
Function to return the number of regions in a Planar Graph
Driver code
Function to find the GCD
Function to find the ratio
Driver code
python 3 program to find the length of the transverse common tangent between two circles which do not touch each other
Function to find the length of the transverse common tangent
Driver code
Function to return the area of the remaining plot
Continue while plot has positive area and there are persons left
If length > breadth then subtract breadth from length
Else subtract length from breadth
Driver code
Function to find the length of the direct common tangent
Driver code
Function to find the shortest distance
Driver code
Function to find the distance between parallel lines
Driver Code
Python3 implementation of the approach
Function to find the normal of the straight line
Length of the normal
Driver code
Function to check whether it is possible to create a polygon with given sides length
Sum stores the sum of all the sides and maxS stores the length of the largest side
If the length of the largest side is less than the sum of the other remaining sides
Driver code
Function to return the area of the shaded region
Area of the square
Area of the semicircle
There are 4 semicircles shadedArea = Area of 4 semicircles - Area of square
Driver code
Function to return the required position
Driver Code
Find if slope is good with only two intercept
if set of lines have only two distinct intercept
Function to check if required solution exist
check the result by processing the slope by starting three points
Driver code
Function that return true if the given point lies on the given line
If ( x , y ) satisfies the equation of the line
Driver code
Function that return the coordinates of the fourth vertex of the rectangle
Save the coordinates of the given vertices of the rectangle
1 - based indexing
Driver code
Python3 Program to find the biggest Reuleaux triangle inscribed within in a square which in turn is inscribed within an ellipse
Function to find the biggest reuleaux triangle
length of the axes cannot be negative
height of the reuleaux triangle
area of the reuleaux triangle
Driver code
Function to return the maximum rectangles possible
Cut rectangles horizontally if possible
One rectangle is a single cell
Total rectangles = total cells
Cut rectangles vertically if possible
Return the maximum possible rectangles
Driver code
Python3 Program to find the biggest right circular cone that can be inscribed within a right circular cone which in turn is inscribed within a cube
Function to find the biggest right circular cone
side cannot be negative
radius of right circular cone
height of right circular cone
volume of right circular cone
Driver code
Python3 Program to find the biggest Reuleaux triangle inscribed within in a square which in turn is inscribed within a hexagon
Function to find the biggest reuleaux triangle
side cannot be negative
height of the reuleaux triangle
area of the reuleaux triangle
Driver code
Python3 Program to find the biggest Reuleaux triangle inscribed within in a square which in turn is inscribed within a semicircle
Function to find the biggest reuleaux triangle
radius cannot be negative
height of the reuleaux triangle
area of the reuleaux triangle
Driver code
Python3 Program to find the biggest Reuleaux triangle inscribed within in a square which in turn is inscribed within an equilateral triangle
Function to find the biggest reuleaux triangle
side cannot be negative
height of the reuleaux triangle
area of the reuleaux triangle
Driver code
Function to calculate area of square after given number of folds
Driver Code
Python3 Program to find the biggest Reuleaux triangle inscribed within in a square which in turn is inscribed within a circle
Function to find the Area of the Reuleaux triangle
radius cannot be negative
Area of the Reuleaux triangle
Driver code
Python3 Program to find the biggest right circular cylinder that can be inscribed within a right circular cone which in turn is inscribed within a cube
Function to find the biggest right circular cylinder
side cannot be negative
radius of right circular cylinder
height of right circular cylinder
volume of right circular cylinder
Driver code
Python3 Program to find the biggest Reuleaux triangle inscribed within in a square which in turn is inscribed within a circle
Function to find the biggest reuleaux triangle
the height or base or hypotenuse cannot be negative
height of the reuleaux triangle
area of the reuleaux triangle
Driver code
Function to find the side of the square
Side cannot be negative
side of the square
Driver code
Python3 implementation of the approach
Function that returns true if a straight line is possible
Driver code
Python3 Program to find the diagonal of a regular polygon with given side length
Function to find the diagonal of a regular polygon
Side and side length cannot be negative
diagonal degree converted to radians
Driver code
Function to return the diagonal of a regular decagon
Side cannot be negative
Length of the diagonal
Driver code
Function to return the diagonal of a regular heptagon
Side cannot be negative
Length of the diagonal
Driver code
Function to find the diagonal of a regular hexagon
Side cannot be negative
Length of the diagonal
Driver code
Python3 program to find the area of Reuleaux triangle
function to the area of the Reuleaux triangle
Side cannot be negative
Area of the Reauleax triangle
Driver code
Function to find the area of the square
Side cannot be negative
Area of the square
Driver code
Python 3 program to find the volume occupied by Cube with given space diagonal
Function to calculate Volume
Formula to find Volume
Drivers code
space diagonal of Cube
Function to find the perimeter
Function to find the area
Driver code
Python3 code to find the area of leaf inside a square
Function to find the area of leaf
Driver code
Python3 code to find the length of rope
Function to find the length of rope
Driver code
Python3 implementation of the above approach
This function returns the required number of triangles
Hash Map to store the frequency of slope corresponding to a point ( X , Y )
Iterate over all possible points
Calculate slope of all elements with current element
find the slope with reduced fraction
Total number of ways to form a triangle having one point as current element
Subtracting the total number of ways to form a triangle having the same slope or are collinear
Driver Code
Python3 code to find the area of inscribed circle of right angled triangle
Function to find the area of inscribed circle
Driver code
Python3 code to find the area of circumscribed circle of right angled triangle
Function to find the area of circumscribed circle
Driver code
Python 3 Program to find the biggest right circular cylinder that can be fit within a right circular cone
Function to find the biggest right circular cylinder
radius and height cannot be negative
radius of right circular cylinder
height of right circular cylinder
volume of right circular cylinder
Driver code
Python 3 Program to find the biggest cube inscribed within a right circular cylinder
Function to find the volume of the cube
height and radius cannot be negative
volume of the cube
Driver code
Function to find the biggest sphere
radius and height cannot be negative
radius of sphere
Driver code
Python 3 Program to find the biggest right circular cylinder that can be fit within a sphere
Function to find the biggest right circular cylinder
radius cannot be negative
volume of cylinder
Driver code
Python 3 Program to find the longest rod that can be fit within a right circular cylinder
Function to find the side of the cube
height and radius cannot be negative
length of rod
Driver code
Python3 code to find the area of inscribed circle of equilateral triangle
Function to find the area of inscribed circle
Function to find the perimeter of inscribed circle
Driver code
Python3 Program to find the biggest cube inscribed within a right circular cone
Function to find the side of the cube
height and radius cannot be negative
side of the cube
Driver code
Python 3 Program to find the biggest cone that can be inscribed within a sphere
Function to find the radius of the cone
radius cannot be negative
radius of the cone
Function to find the height of the cone
side cannot be negative
height of the cone
Driver code
Python 3 Program to find the biggest cone inscribed within a cube
Function to find the radius of the cone
side cannot be negative
radius of the cone
Function to find the height of the cone
side cannot be negative
height of the cone
Driver code
Python 3 Program to find the biggest cube inscribed within a sphere
Function to find the side of the cube
radius cannot be negative
side of the cube
Driver code
Function to find the radius of the sphere
side cannot be negative
radius of the sphere
Driver code
function that calculates the maximum no . of cuts
Driver code
Calling function .
Python3 implementation of the above approach
function to return maximum volume
calculate length
calculate volume
return result
Driver code
Function call
Python 3 Program to calculate area and perimeter of a rhombus using diagonals
calculate area and perimeter of a rhombus
Driver code
Python3 Program to find the area of the decagon inscribed within a circle
Function to find the area of the decagon
radius cannot be negative
area of the decagon
Driver code
Python3 program to find maximum area rectangle
Function to find max area
return area
Driver code
Function to find foot of perpendicular
Driver Code
function call
Function to find equation of parabola .
Driver Code
Python3 code to find minimum number of squares to make a given rectangle .
if we take gcd ( l , w ) , this will be largest possible side for square , hence minimum number of square .
Number of squares .
Driver Code
Function to find the equation of circle
Printing result
Driver code
Function for calculating the area
Formula for finding the area
Function for calculating the perimeter
Formula for finding the perimeter
driver code
Get the radius
Find the area
Find the perimeter
Function to check the equilibrium of three vectors
summing the x coordinates
summing the y coordinates
summing the z coordinates
Checking the condition for equilibrium
Driver code
Checking for equilibrium
function for find Tangent
differentiate given equation
check that point on the curve or not
if differentiate is negative
differentiate is positive
differentiate is zero
Driver code
declare variable
call function findTangent
find the largest square
map to store which points exist
mark the available points
a nested loop to choose the opposite corners of square
remove the chosen point
remove the chosen point
check if the other two points exist
if the square is largest then store it
add the removed point
add the removed point
display the largest square
Driver code
given points
find the largest square
Function to find the diagonal of the hexagon
side cannot be negative
diagonal of the hexagon
Driver code
Python 3 Program to find the side of the octagon which can be inscribed within the square
Function to find the side of the octagon
side cannot be negative
side of the octagon
Driver code
Get he square side
Find the side length of the square
Python3 program to implement above approach
Return distance between the centers
Distance between centers
Case 5
SubCase 1
Subcase 2
Case 1
Case 3
Case 4
Case 2
Since value of k wialways be an integer
Driver Code
Function to check whether it is possible or not to move from ( 0 , 0 ) to ( x , y ) in exactly n steps
Driver code
Function to check if it is possible
Driver code
function call
Function to find the area of the triangle
length of a and b cannot be negative
area of the triangle
Driver code
Python Program to find the radius of the circumcircle of the given rectangle
Function to find the radius of the circumcircle
the sides cannot be negative
Radius of the circumcircle
Return the radius
Get the sides of the triangle
Find the radius of the circumcircle
Python3 Program to find the area the circumcircle of the given triangle
Function to find the area of the circumcircle
the sides cannot be negative
semi - perimeter of the circle
area of triangle
area of the circle
Get the sides of the triangle
Find and print the area of the circumcircle
Python 3 program to find the Altitude Area of an isosceles triangle
function to find the altitude
return altitude
function to find the area
return area
Driver Code
function to find the surface area
Driver Code
surface area of the square pyramid
Function to find the area of the triangle
a and b cannot be negative
area of the triangle
Driver code
function to check if it 's possible to divide the square in two equal parts
if the painted square is linked anyway to the center of the square then it 's  not possible
else yes it 's possible
Driver code
initialize the size of the square
initialize the dimension of the painted square
function to check if vector B is possible from vector A
if d = 0 , then you need to add nothing to vector A
for all four quadrants
initialize all three vector coordinates
Python 3 Program to find the biggest triangle which can be inscribed within the ellipse
Function to find the area of the triangle
a and b cannot be negative
area of the triangle
Driver Code
Function to find the area of the square
a and b cannot be negative
area of the square
Driver code
Function to find the area of the triangle
the radius cannot be negative
area of the triangle
Driver Code
Function to find the area of the square
the radius cannot be negative
area of the square
Driver code
Function to find the area of the rectangle
a and b cannot be negative
area of the rectangle
Driver code
Function to find the area of the biggest square
the height or base or hypotenuse cannot be negative
side of the square
squaring to get the area
Driver Code
Python 3 implementation of above approach
Print the answer to each query
setting the flag for exception
replacing the greater element in i and j
checking if that box is not used in previous query .
checking if connecting to the same box
case 1 : x < i and y lies between i and j
case 2 : x lies between i and j and y > j
if flag is not reset inbetween .
Driver code
Python3 program to find the minimum number of squares to cover the surface of the rectangle with given dimensions
function to count the number of squares that can cover the surface of the rectangle
Driver code
Recursive function to return gcd of a and b
Everything divides 0
Base case
a is greater
Function to find the area of the smallest square
the length or breadth or side cannot be negative
LCM of length and breadth
squaring to get the area
Driver code
Python Code for finding all angles of a triangle
function for finding the angle
driver code
Function to find the number of tiles
if breadth is divisible by side of square
tiles required is N / s
one more tile required
if length is divisible by side of square
tiles required is M / s
one more tile required
Driver Code
input length and breadth of rectangle and side of square
Python 3 implementation of above approach
Function to find the number of tiles
no of tiles
Driver Code
input length and breadth of rectangle and side of square
Function to find equation of plane .
Driver Code
Python program to find the distance between a given point and a given line in 2 D .
Function to find distance
Driver Code
Function to print octant
Driver Code
Function to find number of triangles in a plane .
Formula to find number of triangles nC3 = n * ( n - 1 ) * ( n - 2 ) / 6
Driver Code
Function to calculate centered dodecagonal number
Formula to calculate nth centered dodecagonal number
Driver code
Function to find centered tridecagonal number
Formula to calculate nth centered tridecagonal number
Driver Code
function to get nth Pentagonal pyramidal number .
Running loop from 1 to n
get nth pentagonal number
add to sum
Driver Program
function to get nth Pentagonal pyramidal number .
Driver Program
Return true if three line are concurrent , else false .
Driven Program
Centered octadecagonal number function
Formula to calculate nth centered octadecagonal number & return it into main function .
Driver Code
Centered decagonal number function
Formula to calculate nth centered decagonal number & return it into main function .
Driver Code
Return ( a + b ) ! / a ! b !
finding ( a + b ) !
finding ( a + b ) ! / a !
finding ( a + b ) ! / b !
Return the Kth smallest way to reach given coordinate from origin
if at origin
if on y - axis
decrement y .
Move vertical
recursive call to take next step .
If on x - axis
decrement x .
Move horizontal .
recursive call to take next step .
If x + y C x is greater than K
Move Horizontal
recursive call to take next step .
Move vertical
recursive call to take next step .
Driver Code
Function to calculate Centered pentagonal number .
Formula to calculate nth Centered pentagonal number .
Driver Code
Python 3 program for max and min distance
Function for finding distance between pivots
Function for minimum distance
Function for maximum distance
Drivers code
Function to find the maximum value of F
using the formula derived for getting the maximum value of F
Drivers code
function to find the end point of a line
find end point for x coordinates
find end point for y coordinates
Driven Program
function to print coordinate of smallest rectangle
find Xmax and Xmin
find Ymax and Ymin
print all four coordinates
driver program
Python program to find if line passing through two coordinates also passes through origin or not
Driver code
Python program to find number of horizontal ( or vertical line segments needed to connect three points .
Function to check if the third point forms a rectangle with other two points at corners
Returns true if point k can be used as a joining point to connect using two line segments
Check for the valid polyline with two segments
Check whether the X - coordinates or Y - cocordinates are same .
Iterate over all pairs to check for two line segments
Otherwise answer is three .
driver code
Python code to detect Pythagorean Quadruples .
function for checking
driver code
Python3 code to calculate Volume and Surface area of frustum of cone
Function to calculate Volume of frustum of cone
Function to calculate Curved Surface area of frustum of cone
Function to calculate Total Surface area of frustum of cone
Driver Code
Printing value of volume and surface area
Python3 Program to find Circumference of a square
Driver code
Python3 program to find maximum area of a quadrilateral
Calculating the semi - perimeter of the given quadrilateral
Applying Brahmagupta 's formula to  get maximum area of quadrilateral
Driver code
Structure for point in cartesian plane .
Constant integers for directions
Subtracting co - ordinates of point A from B and P , to make A as origin
Determining cross Product
Return RIGHT if cross product is positive
Return LEFT if cross product is negative
Return ZERO if cross product is zero
Driver code
A . y = 10 A ( - 30 , 10 )
B . y = - 15 B ( 29 , - 15 )
P . y = 28 P ( 15 , 28 )
Return minimum distance required so that aleast k point lie inside the circle .
Finding distance between of each point from origin
Sorting the distance
Driver Program
Utility function
Driver function
Python3 code to find the area of the square
Driver Code
Python3 program to find minimum perimeter using n blocks .
if n is a perfect square
Number of rows
perimeter of the rectangular grid
if there are blocks left
Driver code
Function to find if it 's possible to rotate page or not
Calculating distance b / w points
If distance is not equal
If the points are in same line
Points a , b , and c
Python3 program to check if two circles touch each other or not .
Driver code
C ++ program to count number of obtuse angles for given two points .
There are two arcs connecting a and b . Let us count points on both arcs .
Both arcs have same number of points
Points on smaller arc is answer
Driver code
Find the number of acute , right , obtuse triangle that can be formed from given array .
Finding the square of each element of array
Sort the sides of array and their squares .
x for acute triangles y for right triangles z for obtuse triangles
Finding the farthest point p where a ^ 2 + b ^ 2 >= c ^ 2.
Finding the farthest point q where a + b > c .
If point p make right triangle .
All triangle between j and p are acute triangles . So add p - j - 1 in x .
Increment y by 1.
All triangle between q and p are acute triangles . So add q - p in z .
If no right triangle
All triangle between j and p are acute triangles . So add p - j in x .
All triangle between q and p are acute triangles . So add q - p in z .
Driver Code
Python3 program to check if a point lies inside a circle sector .
calculate endAngle
Calculate polar co - ordinates
Check whether polarradius is less then radius of circle or not and Angle is between startAngle and endAngle or not
Driver code
( X [ i ] , Y [ i ] ) are coordinates of i 'th point.
Initialize area
Calculate value of shoelace formula
Return absolute value
Driver program to test above function
Function to find the difference of count of distince elements to the left and right for each array elements
Stores distinct array element in the left and right
Traverse the array
Insert all element to the left in the set S1
Insert all element to the right in the set S2
Print the difference
Driver Code
Python3 program for the above approach
Function to find the maximum sum of sub - array
Initialize the variables
Traverse over the range
Add the current value to the variable currsum for prefix sum
Calculate the result
Return the answer
Driver Code
Function that returns the value of the function at a given value of x
calculating the value of the differential of the function
The function that returns the root of given number
Defining range on which answer can be found
finding mid value
Driver code
To calculate the factorial
To return the number of permutations of an array with maximum MEXs sum of prefix array
Map to store the frequency of each element
Running a loop from i = 0 to i < n
If continuity breaks , then break the loop
Considering choices available to be filled at this position , i . e . mp [ i ]
Decrement the count of remaining right elements
Adding all permutations of the elements present to the right of the point where continuity breaks .
Driver Code
Function to count number of set bits in N
Stores the count of set bits
If N is odd , then it a set bit
Return the result
Driver Code
python program of the above approach
Stores the count of distinct prime number in factor of current number
Function to return the vector of semi prime numbers in range [ 1 , N ]
Count of distinct prime number in the factor of current number using Sieve of Eratosthenes
If current number is prime
Stores the semi prime numbers
If p has 2 distinct prime factors
Return vector
Function to count unordered pairs of semi prime numbers with prime sum
Stores the final count
Loop to iterate over al the l unordered pairs
If sum of current semi prime numbers is a prime number
Return answer
Driver Code
python program for the above approac
Function to find the minimum number of operations to make the GCD of the array odd
Stores the minimum operations required
Stores the powers of two for the current array element
Dividing by 2
Increment the count
Update the minimum operation required
Return the result required
Driver Code
Function to find the minimum size of array with given MEX and XOR
Find the XOR of values from 0 to A - 1
If A is a multiple of 4
If A % 4 gives remainder 1
If A % 4 gives remainder 2
Initializing array size by A
If XOR of all values of array is equal to B
If the required integer to be added is equal to A
Else any integer can be added
Driver Code
Function to find number of triplets ( A , B , C ) having A * B * C <= N
Stores the count of triplets
Iterate a loop fixing the value of A
Iterate a loop fixing the value of A
Find the total count of triplets and add it to cnt
Return the total triplets formed
Driver Code
python program for the above approach
Stores the Greatest Prime Factor
Modified Sieve to find the Greatest Prime Factor of all integers in the range [ 1 , maxn ]
Initialize the array with 0
Iterate through all values of i
If i is not a prime number
Update the multiples of i
Function to find integer in the range [ 1 , N ] such that its Greatest Prime factor is greater than its square root
Iterate through all values of i in the range [ N , 1 ]
If greatest prime factor of i is greater than its sqare root
Return answer
If no valid integer exist
Driver Code
Function to find the subfactorial of the number
Initialize variables
Iterating over range N
Fact variable store factorial of the i
If count is even
Increase the value of count by 1
Driver Code
Function to find the minimum number of operations to delete all elements of permutation A in order described by B
Stores the count of operations
Stores the index of current integer in B to be deleted
Loop to iterate over all values of B
Stores the current index in A
Iterate over all values A
If current integer of B and A equal , increment the index of the current integer of B
As the permutation A has been traversed completely , increment the count of operations by 1
Return Answer
Driver Code
python program for the above approach
Function to find number of pairs ( x , y ) such that x ^ 2 - y is a square number
Stores the count of total pairs
Iterate q value 1 to sqrt ( N )
Maximum possible value of p is min ( 2 * N - q , N / q )
P must be greater than or equal to q
Total number of pairs are
Adding all valid pairs to res
Return total no of pairs ( x , y )
Driver Code
Function to find the maximum size of the subset such that the product of subset elements is a factor of N
Base Case
Stores maximum size of valid subset
Traverse the given array
If N % arr [ i ] = 0 , include arr [ i ] in a subset and recursively call for the remaining array integers
Return Answer
Driver Code
Function to find total number of different sums of N numbers in the range [ L , R ]
To store minimum possible sum with N numbers with all as L
To store maximum possible sum with N numbers with all as R
All other numbers in between maxSum and minSum can also be formed so numbers in this range is the final answer
Driver Code
Python 3 program for the above approach
Function to modify the array element such that the sum is close to 0
Stores the modified elements
Stores the sum of array element
Stores minimum size of the array
Traverse the array and find the sum
If sum is positive
Find the minimum number of elements that must be changed
Iterate until M elements are modified or the array end
Update the current array elements to its floor
Print the resultant array
Driver Code
Function to perform th Get operation of disjoint set union
Function to perform the union operation of dijoint set union
Update the graph [ a ] as b
Function to perform given queries on set of vertices initially not connected
Stores the vertices
Mark every vertices rightmost vertex as i
Traverse the queries array
Check if it is first type of the givan query
Get the parent of a
Print the answer for the second query
Driver Code
Python 3 implementation for the above approach
Denotes the digit place
Method to convert any number to binary equivalent
denotes the current digits place
If current digit is >= K increment its value by 1
Else add the digit as it is
Move to the next digit
Driver code
Function to return true or false if size of array is odd
To prevent overflow
If element is greater than mid , then it can only be present in right subarray
If element is smaller than mid , then it can only be present in left subarray
Else the element is present at the middle then return 1
when element is not present in array then return 0
Function to return true or false if size of array is even
Calculating Candidate Median
If Candidate Median if greater than Mean then decrement j
If Candidate Median if less than Mean then increment i
If Candidate Median if equal to Mean then return 1
when No candidate found for mean
Function to return true if Mean can be equal to any candidate median otherwise return false
Calculating Mean
If N is Odd
If N is even
Driver Code
Function to find the count of distinct integers that belong to the first N terms of at least one of them is GP
Stores the integers that occur in GPs in a set data - structure
Stores the current integer of the first GP
Iterate first N terms of first GP
Insert the ith term of GP in S
Stores the current integer of the second GP
Iterate first N terms of second GP
Return Answer
Driver Code
Function to find minimum the number of operations required to make all the array elements to - 1
Stores the array elements with their corresponding indices
Push the array element and it 's index
Sort the elements according to it 's first value
Stores the minimum number of operations required
Traverse until vp is not empty
Stores the first value of vp
Stores the second value of vp
Update the minCnt
Pop the back element from the vp until the first value is same as val and difference between indices is less than K
Return the minCnt
Driver Code
Function to find the nearest non - zero element in the left direction
Stores the index of the first element greater than 0 from the right side
Traverse the array in the range [ 1 , N ]
Check arr [ i ] is greater than 0
Update the value of L
Traverse the array from the left side
Check arr [ i ] is greater than 0
Update the value of L
Update the value of steps [ i ]
Function to find the nearest non - zero element in the right direction
Stores the index of the first element greater than 0 from the left side
Traverse the array from the left side
Check arr [ i ] is greater than 0
Update the value of R
Traverse the array from the right side
Check arr [ i ] is greater than 0
Update the value of R
Update the value of steps [ i ]
Function to find the sum of the array after the given operation M times
Stores the distance of the nearest non zero element .
Stores sum of the initial array arr [ ]
Traverse the array from the left side
Update the value of sum
Print the total sum of the array
Driver Code
Python 3 program for the above approach
Stores the parent and size of the set of the ith element
Function to initialize the ith set
Function to find set of ith vertex
Base Case
Recursive call to find set
Function to unite the set that includes a and the set that includes b
If a and b are not from same set
Function to find the smallest vertex in the connected component of the ith vertex for all i in range [ 1 , N ]
Loop to initialize the ith set
Loop to unite all vertices connected by edges into the same set
Stores the minimum vertex value for ith set
Loop to iterate over all vertices
If current vertex does not exist in minVal initialize it with i
Update the minimum value of the set having the ith vertex
Loop to print required answer
Driver Code
Function to find the product of digits of the given number
Function to find the count of pairs ( a , b ) such that a : b = ( product ofdigits of a ) : ( product of digits of b )
Stores the count of the valid pairs
Loop to iterate over all unordered pairs ( a , b )
Stores the product of digits of a
Stores the product of digits of b
If x != 0 and y != 0 and a : b is equivalent to x : y
Increment valid pair count
Return Answer
Driver code
Function Call
Python 3 program for the above approach
Function to find the maximum sum of matrix element after flipping the signs of adjacent matrix elements
Initialize row and column
Stores the sum of absolute matrix element
Find the minimum absolute value in the matrix
Store count of negatives
Find the smallest absolute value in the matrix
Increment the count of negative numbers
Find the absolute sum
If the count of negatives is even then print the sum
Subtract minimum absolute element
Driver Code
Function to calculate last positive element of the array
Return the first element if N = 1
Stores the greatest and the second greatest element
Traverse the array A [ ]
If current element is greater than the greatest element
If current element is greater than second greatest element
Return the final answer
Driver Code
Function to replace all the subarray having values < K with their sum
Stores the sum of subarray having elements less than K
Stores the updated array
Traverse the array
Update the sum
Otherwise , update the vector
Print the result
Driver Code
Python program for the above approach
Stores the input tree
Stores the set number of all nodes
Function to add an edge in the tree
Function to convert the given tree into a bipartite graph using BFS
Set the set number to - 1 for all node of the given tree
Stores the current node during the BFS traversal of the tree
Initialize the set number of 1 st node and enqueue it
BFS traversal of the given tree
Current node
Traverse over all neighbours of the current node
If the set is not assigned
Assign set number to node u
Function to find if the path length between node A and B is even or odd
If the set number of both nodes is same , path length is odd else even
Driver Code
Function to convert tree into bipartite
Python program for the above approach
Function to find the highest odd power of 2 in the range [ 0 , N ]
If P is even , subtract 1
Function to find the minimum operations to make N
If N is odd and X = 0 , then no valid set exist
Stores the minimum possible size of the valid set
Loop to subtract highest odd power of 2 while X < N , step 2
If N > 0 , then increment the value of answer by 1
Return the resultant size of set
Driver Code
Function to check if all the digits in the number N is the same or not
Find the last digit
Find the current last digit
Update the value of N
If there exists any distinct digit , then return No
Otherwise , return Yes
Driver Code
Function to find the value obtained after alternatively reducing X and adding Y to 0 total K number of times
Stores the final result after adding only Y to 0
Stores the final number after reducing only X from 0
Return the result obtained
Driver Code
Function to find maximum value of k which makes bitwise AND zero .
Take k = N initially
Start traversing from N - 1 till 0
Whenever we get AND as 0 we stop and return
Driver Code
Function of find the count of unordered pairs ( i , j ) in the array such that arr [ j ] / arr [ i ] = j / i .
Stores the count of valid pairs
Iterating over all possible pairs
Check if the pair is valid
Return answer
Driver Code
Function Call
Function of find the count of unordered pairs ( i , j ) in the array such that arr [ j ] / arr [ i ] = j / i .
Stores the count of valid pairs
Iterating over all values of x in range [ 1 , N ] .
Iterating over all values of y that are divisible by x in the range [ 1 , N ] .
Check if the pair is valid
Return answer
Driver Code
Function Call
Function to calculate the distances from node 1 to N
Stores the number of edges
Storing the edges in vector
Initialize queue
BFS from 1 st node using queue
Pop from queue
Traversing the adjacency list
Initialize queue
BFS from last node
Pop from queue
Traverse the adjacency list
Print the count of minimum distance
Driver Code
Python program for the above approach
Function to find the count of odd and even integers having N bits and K set bits
Find the count of even integers
Find the count of odd integers
Print the total count
Driver Code
Function to find the sum of all sub - sets of size K
Frequency of each array element in summation equation .
calculate factorial of n - 1
calculate factorial of k - 1
calculate factorial of n - k
Calculate sum of array .
Sum of all subsets of size k .
Driver Code
Function to calculate maximum triplet XOR form 3 ranges
Initialize a variable to store the answer
create minimum number that have a set bit at ith position
Check for each number and try to greedily choose the bit if possible If A >= cur then A also have a set bit at ith position
Increment the answer
Subtract this value from A
Check for B
Increment the answer
Subtract this value from B
Check for C
Increment the answer
Subtract this value from C
If any of the above conditions is not satisfied then there is no way to turn that bit ON .
Driver Code
Function to return the count of integers from 1 to X having the last K digits as equal
Stores the total count of integers
Loop to iterate over all possible values of z
Terminate the loop when z > X
Add count of integers with last K digits equal to z
Return count
Function to return the count of integers from L to R having the last K digits as equal
Driver Code
Function Call
Function to find the total number of subsequences satisfying the given criteria
Stores the count of quadruplets
Stores the frequency of product of the triplet
Traverse the given array arr [ ]
Consider arr [ i ] as fourth element of subsequences
Generate all possible pairs of the array [ 0 , i - 1 ]
Increment the frequency of the triplet
Return the total count obtained
Driver Code
Helper function to check if we can perform Mid number of moves
Remove atleast Mid * B from both X and Y
If any value is negative return false .
Calculate remaining values
If val >= Mid then it is possible to perform this much moves
else return false
Initialize a variable to store the answer
Fix the left and right range
Binary Search over the answer
Check for the middle value as the answer
It is possible to perform this much moves
Maximise the answer
Return answer
Driver Code
Generalise that A >= B
Python Program for the above approach
Function to find two proper factors of N such that their sum is coprime with N
Find factors in sorted order
Find largest value of d2 such that d1 and d2 are co - prime
Check if d1 and d2 are proper factors of N
Print answer
No such factors exist
Driver code
Function Call
Function to count the number of unordered triplets such that their sum is an odd integer
Count the number of odd and even integers in the array
Number of ways to create triplets using one odd and two even integers
Number of ways to create triplets using three odd integers
Return answer
Driver Code
Function Call
Print Answer
Function to return length of longest remaining array of pairwise distinct array possible by removing triplets
Stores the frequency of array elements
Traverse the array
Iterate through the map
If frequency of current element is even
Stores the required count of unique elements remaining
If count is odd
Driver Code
Function to count the number of cells in the grid such that maximum cell is reachable with a jump of K
Maximum reachable rows from the current row
Stores the count of cell that are reachable from the current row
Count of reachable rows
Update the maximum value
Add it to the count
Maximum reachable columns from the current column
Stores the count of cell that are reachable from the current column
Count of rechable columns
Update the maximum value
Add it to the count
Return the total count of cells
Driver Code
Function to count the number of pairs ( a , b ) such that a % b is at least K
Base Case
Stores resultant count of pairs
Iterate over the range [ K + 1 , N ]
Find the cycled elements
Find the remaining elements
Return the resultant possible count of pairs
Driver Code
Function to find the minimum value of the sum of absolute difference between all pairs of arrays
Stores the sum of array elements
Find the sum of array element
Store the value of sum % N
Return the resultant value
Driver Code
Python program for the above approach
Function to find the value of x ^ y
Stores the value of x ^ y
Iterate until y is positive
If y is odd
Divide y by 2
Return the value of x ^ y
Function to find the number of N - digit integers satisfying the given criteria
Count of even positions
Count of odd positions
Return the resultant count
Driver Code
Utility function to find minimum steps
Initialize count and result
Traverse over the range [ 1 , N ]
Update res
Increment count
Return res
Driver Code
Input
Function call
Python 3 implementation of the above approach
Utility function to find minimum steps
Driver code
Input integer
Function call
Function to find number written on the opposite face of the dice
Stores number on opposite face of dice
Print the answer
Given value of N
Function call to find number written on the opposite face of the dice
Function to count points from the range [ X , Y ] that can be reached by moving by L or R steps
Initialize difference array
Initialize Count
Marking starting point
Iterating from X to Y
Accumulate difference array
If diff_arr [ i ] is greater than 1
Updating difference array
Visited point found
Driver Code
Given Input
Function Call
Function to find the SPF [ i ] using the Sieve Of Erastothenes
Stores whether i is prime or not
Initializing smallest factor as 2 for all even numbers
Iterate for all odd numbers < N
SPF of i for a prime is the number itself
Iterate for all the multiples of the current prime number
The value i is smallest prime factor for i * j
Function to generate prime factors and its power
Current prime factor of N
Stores the powers of the current prime factor
Find all the prime factors and their powers
Return the total count of factors
Function to count the number of triplets satisfying the given criteria
Stores the count of resultant triplets
Add the count all factors of N - z to the variable CountTriplet
Return total count of triplets
Driver Code
S [ i ] stores the smallest prime factor for each element i
Find the SPF [ i ]
Function Call
Function to find the minimum length of the subarray to be changed .
Stores the frequencies of array elements
Stores the number of array elements that are present more than N / M times
Iterate over the range
Increment the frequency
If the frequency of all array elements are already N / M
Stores the resultant length of the subarray
The left and right pointers
Iterate over the range
If the current element is
If the value of c is 0 , then find the possible answer
Iterate over the range
If the element at left is making it extra
Update the left pointer
Update the right pointer
Return the resultant length
Driver Code
Function to compare the sum of K most and least occurrences
Stores frequency of array element
Stores the frequencies as indexes and putelements with the frequency in a vector
Find the frequency
Insert in the vector
Stores the count of elements
Traverse the frequency array
Find the kleastfreqsum
If the count is K , break
Reinitialize the count to zero
Traverse the frequency
Find the kmostfreqsum
If the count is K , break
Comparing the sum
Otherwise , return No
Driver Code
Function to find the consecutive digit numbers in the given range
Initialize num as empty string
Stores the resultant number
Iterate over the range [ 1 , 9 ]
Check if the current number is within range
Iterate on the digits starting from i
Checking the consecutive digits numbers starting from i and ending at j is within range or not
Sort the numbers in the increasing order
Driver Code
Print the required numbers
Python3 program for the above approach
Function to return the minimum distance the person has to move order to get the pictures
To store the minimum ending point
To store the maximum starting point
Find the values of minSeg and maxSeg
Impossible
The person doesn 't need to move
Get closer to the left point
Get closer to the right point
Driver code
Function to calculate the value of x raised to the power y in O ( log y )
Base Case
If the power y is even
Otherwise
Function to calculate the order of the number , i . e . count of digits
Stores the total count of digits
Iterate until num is 0
Function to check a number is an Armstrong Number or not
Find the order of the number
Check for Armstrong Number
If Armstrong number condition is satisfied
Utility function to find the maximum sum of a subarray of size K
If k is greater than N
Find the sum of first subarray of size K
Find the sum of the remaining subarray
Return the maximum sum of subarray of size K
Function to find all the Armstrong Numbers in the array
Traverse the array arr [ ]
If arr [ i ] is an Armstrong Number , then replace it by 1. Otherwise , 0
Return the resultant count
Driver Code
Function to calculate the power of n ^ k % p
Update x if it is more than or equal to p
In case x is divisible by p ;
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Function to count the number of arrays satisfying required conditions
Calculating N ^ K
Driver Code
Function to find the factorial of the given number N
Stores the factorial
Iterate over the range [ 2 , N ]
Return the resultant result
Function to find the number of ways of choosing r objects from n distinct objects
Function to find the number of ways to replace ' ? ' in string t to get the same count of 0 s and 1 s in the string S and T
Traverse the string s
If the current character is 1
Update the value of the sum1
Otherwise
Traverse the string t
If the current character is 1 , then update the value of sum2
If the current character is 0
Otherwise , update the value of K
Check if P is greater than K or if K - P is odd
Print the count of ways
Driver Code
Function to find all possible pairs of the given array such that the sum of arr [ i ] + arr [ j ] is i + j
Stores the total count of pairs
Iterate over the range
Iterate over the range
Print the total count
Driver code
Function to check if it is possible to distribute R red and B blue beans in packets such that the difference between the beans in each packet is atmost D
Check for the condition to distributing beans
Print the answer
Distribution is not possible
Driver Code
Python3 program for the above approach
Function to calculate the prime factors of N with their count
Initialize a vector , say v
Initialize the count
Count the number of divisors
Divide the value of N by 2
For factor 2 divides it
Find all prime factors
Count their frequency
Push it to the vector
Push N if it is not 1
Function to print the array that have the maximum size
Stores the all prime factor and their powers
Traverse the vector and find the maximum power of prime factor
If max size is less than 2
Otherwise
Print the maximum size of sequence
Print the final sequence
Print the prime factor
Print the last value of the sequence
Driver Code
Function to check destination can be reached from source in even number of steps
Coordinates differences
Minimum number of steps required
Minsteps is even
Minsteps is odd
Driver Code
Given Input
Function Call
Function to find the absolute value of x
Function to find the fraction with minimum absolute difference
Initialize the answer variables
Iterate over the range
Nearest fraction
x / y - d / i < x / y - A / B ( B * x - y * A ) * ( i * y ) > ( i * x - y * d ) * ( B * y )
Check for d + 1
Print the answer
Driver Code
Function to convert N to equivalent representation in base - 2
Stores the required answer
Iterate until N is not equal to zero
If N is Even
Add char '0' in front of string
Add char '1' in front of string
Decrement N by 1
Divide N by - 2
If string is empty , that means N is zero
Put '0' in string s
Given Input
Function Call
Python program for the above approach
Function to find the number of instances after completion
Traverse the array , arr [ ]
If current element is less than 25
Divide instances by 2
If the current element is greater than 60
Double the instances
Print the instances at the end of the traversal
Driver Code
Function Call
Function to check whether all array elements can be made zero or not
Stores if a power of K has already been subtracted or not
Stores all the Kth power
Iterate until X is less than INT_MAX
Traverse the array arr [ ]
Iterate over the range [ 0 , M ]
If MP [ V [ j ] ] is 0 and V [ j ] is less than or equal to arr [ i ]
If arr [ i ] is not 0
If i is less than N - 1
Otherwise ,
Driver code
Python 3 program for the above approach
Function to check if the product of every subsequence of the array is a perfect square or not
Traverse the given array
If arr [ i ] is a perfect square or not
Return " Yes "
Driver Code
Function to count subarray having average exactly equal to K
To Store the final answer
Calculate all subarrays
Calculate required average
Check if average is equal to k
Required average found
Increment res
Driver code
Given Input
Function Call
Function to find the maximized minimum element of the array after performing given operation exactly K times
Stores the minimum element
Traverse the given array
Update the minimum element
Stores the required operations to make all elements equal to the minimum element
Update required operations
If reqOperations < K
Decrement the value of K by reqOperations
Update minElement
Return minimum element
Driver Code
Function to split the fraction into distinct unit fraction
To store answer
While numerator is positive
Finding x = ceil ( d / n )
Add 1 / x to list of ans
Update fraction
Given Input
Function Call
Print Answer
Function to generate the permutation of the first N natural numbers having sum of absolute difference between element and indices as minimum
Initialize array arr [ ] from 1 to N
Swap alternate positions
Check N is greater than 1 and N is odd
Swapping last two positions
Print the permutation
Driver Code
Function to find array after performing the given query to the array elements
Traverse the given query
Traverse the given array
Update the value of A [ i ]
Update the value of curr
Print the array elements
Driver Code
Function Call
Function to find the maximum value of N after inserting the digit K
Convert it into N to string
Stores the maximum value of N after inserting K
Iterate till all digits that are not less than K
Add the current digit to the string result
Add digit ' K ' to result
Iterate through all remaining characters
Add current digit to result
Print the maximum number formed
Driver Code
Function to find the value of X to the power Y
Stores the value of X ^ Y
If y is odd , multiply x with result
Update the value of y and x
Return the result
Function to count number of arrays having element over the range [ 0 , 2 ^ K - 1 ] with Bitwise AND value 0 having maximum possible sum
Print the value of N ^ K
Driver Code
Function to find the minimum absolute value of ( K - arr [ i ] ) for each possible value of K over the range [ 0 , N - 1 ] |
Traverse the given array arr [ ]
Stores the mininimum distance to any array element arr [ i ]
Check if there is no safe position smaller than i
Check if the current position is between two safe positions
Take the minimum of two distances
Check if the current index is a safe position
Check if there is no safe position greater than i
Print the minimum distance
Driver Code
Function to find the number of pairs that satisfy the given criteria i . e . , i < j and ( arr [ i ] ^ arr [ j ] ) & X is 0
Stores the resultant count of pairs
Iterate over the range [ 0 , N )
Iterate over the range
Check for the given condition
Return the resultant count
Driver Code
Function to find the number of pairs that satisfy the given criteria i . e . , i < j and ( arr [ i ] ^ arr [ j ] ) & X is 0
Stores the resultant count of pairs
Initialize the dictionary M
Populate the map
Count number of pairs for every element in map using mathematical concept of combination
As nC2 = n * ( n - 1 ) / 2
Return the resultant count
Driver Code
Function to count submatrixes with average greater than or equals to K
Stores count of submatrices
Stores the prefix sum of matrix
Iterate over the range [ 1 , N ]
Iterate over the range [ 1 , M ]
Update the prefix sum
Iterate over the range [ 1 , N ]
Iterate over the range [ 1 , M ]
Iterate until l and r are greater than 0
Update count
Stores sum of submatrix with bottom right corner as ( i , j ) and top left corner as ( l , r )
If sum1 is less than or equal to sum2
Increment cnt by 1
Return cnt as the answer
Driver Code
Given Input
Function Call
Python3 program for the above approach
Function to find the integer value obtained by joining array elements together
Stores the resulting integer value
Traverse the array arr [ ]
Stores the count of digits of arr [ i ]
Update ans
Increment ans by arr [ i ]
Return the ans
Driver Code
Input
Function call
Function to count all the integers less than N satisfying the given condition
Store the count of even numbers less than N + 1
Return the count
Driver Code
Given Input
Function Call
Recursive function to find the maximum absolute displacement from origin by performing the given set of moves
If i is equal to N
If S [ i ] is equal to 'L
If S [ i ] is equal to 'R
If S [ i ] is equal to '?
Function to find the maximum absolute displacement from the origin
Return the maximum absolute displacement
Input
Function call
Function to find the number of pairs such that both the elements are in the range [ P , Q ] and the numbers should be multiple of R , and the product of numbers should lie in the range [ P * Q / 4 , P * Q ]
Store multiple of r in range of [ P , Q ]
Itearte in the range [ p , q ]
Vector to store pair of answer
Iterate through the vector v
Iterate in the range [ i + 1 , v . size ( ) - 1 ]
If pair follow this condition insert the pair in vector ans
If no pair satisfy the conditions , pr - 1
Print the pairs which satisfy the given condition
Driver Code
Given Input
Function Call
Function to print the matrix filled with rectangle pattern having center coordinates are c1 , c2
Iterate in the range [ 0 , n - 1 ]
Iterate in the range [ 0 , n - 1 ]
Given Input
Function Call
Function to return the count of required numbers
If rightmost bit is 0
Return the required count
Driver code
Call function countNumbers
Function to return the count of required numbers
Count of numbers in range which are divisible by 2
Driver code
Python3 program for the above approach
A utility function that returns true if x is perfect square
Returns true if n is a Fibonacci Number , else false
Here n is fibonacci if one of 5 * n * n + 4 or 5 * n * n - 4 or both is a perfect square
Function to find the length of the largest sub - array of an array every element of whose is a Fibonacci number
Traverse the array arr
Check if arr [ i ] is a Fibonacci number
stores the maximum length of the Fibonacci number subarray
Finally , return the maximum length
Driver code
Given Input
Function Call
The four direction coordinates changes from the current cell
Function that returns true if there exists any path from the top - left to the bottom - right cell of 0 s
If the bottom - right cell is reached
Update the cell to 1
Traverse in all four directions
Find the new coordinates
If the new cell is valid
Recursively call DFS
If path exists , then return true
Return false , if there doesn 't  exists any such path
Function to flip the minimum number of cells such that there doesn 't exists any such path from (0, 0) to (N - 1, M - 1) cell consisting of 0s
Case 1 : If no such path exists already
Case 2 : If there exists only one path
Case 3 : If there exists two - path
Driver Code
Function to find the maximum product of the sum of the subarray with its maximum element
Traverse the array arr [ ]
Increment currSum by a [ i ]
Maximize the value of currMax
Maximize the value of largestSum
If currSum goes less than 0 then update currSum = 0
Return the resultant value
Function to maximize the product of the sum of the subarray with its maximum element
Find the largest sum of the subarray
Multiply each array element with - 1
Find the largest sum of the subarray with negation of all array element
Return the resultant maximum value
Driver Code
Function to partition the array into two subsets such that count of unique elements in both subsets is the same
Stores the subset number for each array elements
Stores the count of unique array elements
Stores the frequency of elements
Traverse the array
Count of elements having a frequency of 1
Check if there exists any element with frequency > 2
Count of elements needed to have frequency exactly 1 in each subset
Initialize all values in the array ans [ ] as 1
Traverse the array ans [ ]
This array element is a part of first subset
Half array elements with frequency 1 are part of the second subset
If count of elements is exactly 1 are odd and has no element with frequency > 2
If count of elements that occurs exactly once are even
Print the result
If the count of elements has exactly 1 frequency are odd and there is an element with frequency greater than 2
Print the result
Driver Codea
Function to modify the given array as per the given conditions
Traverse the given array arr [ ]
Initialize the count of even and odd digits
Initialize temp with the current array element
For count the number of even digits
Increment the odd count
Otherwise
Divide temp by 10
Performe addition
Performe multiplication
Otherwise
Driver Code
Function to print the prime factorization of the product of all numbers <= N that are even and can be expressed as a product of two distinct prime numbers
Sieve of Eratosthenese
Store prime numbers in the range [ 3 , N / 2 ]
Print the coefficient of 2 in the prime factorization
Print the coefficients of other primes
Driver code
Input
Function calling
Function to find the sum of first M numbers formed by the infinite concatenation of the array A [ ]
Stores the resultant sum
Iterate over the range [ 0 , M - 1 ]
Add the value A [ i % N ] to sum
Return the resultant sum
Driver Code
Function to check if it is possible to reach M from 0
Stores the farther point that can reach from 1 point
Stores the farthest point it can go for each index i
Initialize rightMost [ i ] with 0
Traverse the array
Update the rightMost position reached from a1
Find the farthest point it can reach from i
If point < can be reached
Driver Code
Recursive program to return gcd of two numbers
Function to count the number of non co - prime pairs for each query
Traverse the array arr [ ]
Stores the count of non co - prime pairs
Iterate over the range [ 1 , x ]
Iterate over the range [ x , y ]
If gcd of current pair is greater than 1
Driver code
Given Input
Function Call
Function to count maximum number of multiplication by 3 or division by 2 operations that can be performed
Stores the maximum number of operations possible
Traverse the array arr [ ]
Iterate until arr [ i ] is even
Increment count by 1
Update arr [ i ]
Return the value of Count as the answer
Given Input
Function Call
Function to check if it is possible to distribute W and B into maximum groups possible
If W is greater than B , swap them
Distribution is not possible
Distribution is possible
Driver code
Input
Function call
Function to calculate GCD
Function to calculate maximum GCD in a range
Variable to store the answer
If Z has two multiples in [ L , R ]
Update ans
Return the value
Input
Function Call
Function to calculate number of ways a number can be formed that has the maximum number of Ks
Convert to string
Calculate length of subarrays that can contribute to the answer
Count length of subarray where adjacent digits add up to K
Current subarray can contribute to the answer only if it is odd
Return the answer
Driver code
Input
Function call
Function for counting number of set bit
Function to return the count of minimum operations required
cnt to count the number of bits set in A and in B
If odd numbers of total set bits
one_zero = 1 in A and 0 in B at ith bit similarly for zero_one
When bitpos is set in B , unset in B
When bitpos is set in A , unset in B
Number of moves is half of number pairs of each group
Odd number pairs
Driver code
Input
Function call to compute the result
Python3 program for the above approach
Function to find the largest sum subarray such that it contains K consecutive elements
Stores sum of subarray having K consecutive elements
Stores the maximum sum among all subarrays of size K having consecutive elements
Traverse the array
Store K elements of one subarray at a time
Sort the duplicate array in ascending order
Checks if elements in subarray are consecutive or not
Traverse the k elements
If not consecutive , break
If flag is true update the maximum sum
Stores the sum of elements of the current subarray
Update the max_sum
Reset curr_sum
Return the result
Driver Code
Python3 program for the above approach
Array to store all prime less than and equal to MAX
Utility function for sieve of sundaram
Main logic of Sundaram .
Since 2 is a prime number
only primes are selected
Function to check whether a number is a smith number .
Find sum the digits of prime factors of n
Add its digits of prime factors to pDigitSum .
One prime factor is still to be summed up
Now sum the digits of the original number
Return the answer
Function to check if X and Y are a Smith Brother Pair
Function to find pairs from array
Iterate through all pairs
Increment count if there is a smith brother pair
Driver code
Preprocessing
Input
Function call
Function to find the number of pairs whose sums divides the sum of array
Initialize the totalSum and count as 0
Calculate the total sum of array
Generate all possible pairs
If the sum is a factor of totalSum or not
Increment count by 1
Print the total count obtained
Driver Code
Function to find the change in the ratio in pair after applying operation
Stores the current ratio
Stores the new ratio
Stores the increase in ratio
Returns the change
Function to find the maximum average of the ratio of the pairs by applying M increments
Stores the required result
Declare a priority queue for storing the increments
Store the increase in the ratio after applying one operation
Push the increased value and index value in priority queue
Store the ratio
Update the value of sum
Iterate while M > 0
Add the maximum change to the sum
Remove the element from the priority queue
Increase the pairs elements by 1 on which operation is applied
Push the updated change of the pair in priority queue
Decrease the operation count
Update the value of the sum by dividing it by N
Return the result
Driver Code
python 3 program for the above approach
Function to print all numbers that are divisors of N and are co - prime with the quotient of their division
Iterate upto square root of N
If divisors are equal and gcd is 1 , then print only one of them
Otherwise print both
Driver Code
utility function to calculate the GCD of two numbers
Function to calculate the largest K , replacing all elements of an array A by their modulus with K , makes A a palindromic array
check if A is palindrome
A is not palindromic
K can be infitely large in this case
variable to store the largest K that makes A palindromic
return the required answer
Driver code
Input
Function call
Function to try all permutations of distinct powers
Base Case
If the distinct powers sum is obtained
Otherwise
If current element not selected in power [ ]
If current element selected in power [ ]
Return 1 if any permutation found
Function to check the N can be represented as the sum of the distinct powers of 3
Stores the all distincts powers of three to [ 0 , 15 ]
Function Call
Print
Driver Code
Function to check whether the given N can be represented as the sum of the distinct powers of 3
Iterate until N is non - zero
Termination Condition
Right shift ternary bits by 1 for the next digit
If N can be expressed as the sum of perfect powers of 3
Driver Code
Function to print permutation of size N with absolute difference of adjacent elements in range [ 2 , 4 ]
If N is less than 4
Check if N is even
Traverse through odd integers
Update the value of i
Traverse through even integers
Driver Code
Function to calculate gcd
Function to find number of possible final values
Find the gcd of two numbers
Calculate number of distinct values
Return values
Driver Code
Function to reconstruct the array arr [ ] with xor of adjacent elements
Iterate through each element
Store the xor of current and next element in arr [ i ]
Function to print array
Driver Code
Inputs
Length of the array given
Function call to reconstruct the arr [ ]
Function call to prarr [ ]
Function to calculate the score of same - indexed subarrays selected from the arrays a [ ] and b [ ]
Traverse the current subarray
Finding the score without reversing the subarray
Calculating the score of the reversed subarray
Return the score of subarray
Function to find the subarray with the maximum score
Stores the maximum score and the starting and the ending point of subarray with maximum score
Traverse all the subarrays
Store the score of the current subarray
Update the maximum score
Prthe maximum score
Driver Code
Function to calculate the score of same - indexed subarrays selected from the arrays a [ ] and b [ ]
Store the required result
Iterate in the range [ 0 , N - 1 ]
Consider the case of odd length subarray
Update the maximum score
Expanding the subarray in both directions with equal length so that mid poremains same
Update both the scores
Consider the case of even length subarray
Update both the scores
Print the result
Driver Code
Function to find the minimum length of the subarray whose sum is maximum
Stores the starting and the ending index of the resultant subarray
Traverse the array until a non - zero element is encountered
If the array contains only of 0 s
Traverse the array in reverse until a non - zero element is encountered
Return the resultant size of the subarray
Driver Code
Python program for the above approach
Function to count number of ways to represent N as the Bitwise XOR of distinct integers
Count number of subsets using above - mentioned formula
Print the resultant count
Driver Code
Function to count numbers less than N , whose modulo with A gives B
If the value of B at least A
If the value of B is 0 or not
Stores the resultant count of numbers less than N
Update the value of ans
Print the value of ans
Driver Code
Function to find the maximum sum of a subsequence whose Bitwise AND is non - zero
Stores the resultant maximum sum of the subsequence
Iterate over all the bits
Stores the sum of array elements whose i - th bit is set
Traverse the array elements
If the bit is set , then add its value to the sum
Update the resultant maximum sum
Return the maximum sum
Driver Code
Function to check if it is possible to reduce the size of the array to K by removing the set of the distinct array elements
Stores all distinct elements present in the array arr [ ]
Traverse the given array
Insert array elements into the set
Condition for reducing size of the array to at most K
Driver Code
Function to find the max sum after processing q queries
Store the cumulative sum
Store the maximum sum
Iterate over the range 0 to q
Variables to extract values from vector
Iterate over the range [ 1 , n ]
Calculate cumulative sum
Calculate maximum sum
Return the maximum sum after q queries
Stores the size of array and number of queries
Stores the sum
Storing input queries
Function call to find the maximum sum
Function to check if there exists any pair ( P , Q ) whose Bitwise XOR is greater than the Bitwise XOR of X and Y
Stores the Bitwise XOR of X & Y
Traverse all possible pairs
If a pair exists
If a pair is found
Driver Code
Function to check if there exists any pair ( P , Q ) whose Bitwise XOR is greater than the Bitwise XOR of X and Y
Check for the invalid condition
Otherwise ,
Driver Code
Function to find the smallest number greater than or equal to N , that is divisible by k
Function to find the smallest number required to be added to to M to make it divisible by N
Stores the smallest multiple of N , greater than or equal to M
Return the result
Driver Code
Given Input
Function Call
Function to find the factorial of prefix sum at every possible index
Find the prefix sum array
Stores the factorial of all the element till the sum of array
Find the factorial array
Find the factorials of each array element
Print the resultant array
Driver code
Function to find the maximum possible frequency of a most frequent element after at most K increment operations
Sort the input array
Stores the sum of sliding window and the maximum possible frequency of any array element
Traverse the array
Add the current element to the window
If it is not possible to make the array elements in the window equal
Update the value of sum
Increment the value of start
Update the maximum possible frequency
Print the frequency of the most frequent array element after K increments
Driver code
Function to count the number of pairs ( i , j ) such that i < j and arr [ i ] - arr [ j ] = X * ( j - i )
Stores the count of all such pairs that satisfies the condition .
Stores count of distinct values of arr [ i ] - x * i
Iterate over the Map
Increase count of pairs
Print the count of such pairs
Driver Code
Function to check if it is possible to select three buildings that satisfy the given condition
Stores prefix min array
Iterate over the range [ 1 , N - 1 ]
Stores the element from the ending in increasing order
Iterate until j is greater than or equal to 0
If current array element is greater than the prefix min upto j
Iterate while stack is not empty and top element is less than or equal to preMin [ j ]
Remove the top element
If stack is not empty and top element of the stack is less than the current element
Push the arr [ j ] in stack
If none of the above case satisfy then return " No "
Driver code
Input
Function to check if the number N can be expressed as the sum of different powers of X or not
While n is a positive number
Find the remainder
If rem is at least 2 , then representation is impossible
Divide the value of N by x
Driver Code
Function that obtains the number using said operations from N
Stores the binary representation of the number N
Find the binary representation of the number N
Check for the set bits
Reverse the string S
Stores the obtained number
Calculating the decimal value
Check for set bits
Function to find the maximum value between N and the obtained number
Driver Code
Function to find the sum of Euler Totient Function of divisors of N
Return the value of N
Driver Code
Python3 program for the above approach
Function to find the square root of a complex number
Stores all the square roots
Stores the first square root
Push the square root in the ans
Stores the second square root
If X2 is not 0
Push the square root in the array ans [ ]
Stores the third square root
If X3 is greater than 0
Push the square root in the array ans [ ]
Stores the fourth square root
Push the square root in the array ans [ ]
Prints the square roots
Driver Code
Function to find minimum required time to schedule all process
Stores max element from A [ ]
Find the maximum element
Stores frequency of each element
Stores minimum time required to schedule all process
Count frequencies of elements
Find the minimum time
Decrease the value of K
Increment tmp [ i / 2 ]
Increment the count
Return count , if all process are scheduled
Increment count
Return the count
If it is not possible to schedule all process
Driver code
Function to find GCD of two numbers a and b
Base Case
Find GCD recursively
Function to find the LCM of the resultant array
Initialize a variable ans as the first element
Traverse the array
Update LCM
Return the minimum length of the rod
Function to find the minimum length of the rod that can be divided into N equals parts and each part can be further divided into arr [ i ] equal parts
Print the result
Driver Code
Function to check if N contains digit D in it
Iterate until N is positive
Find the last digit
If the last digit is the same as digit D
Return false
Function to check if the value of N can be represented as sum of integers having digit d in it
Iterate until N is positive
Check if N contains digit D or not
Subtracting D from N
Return false
Driver Code
Python program for the above approach
Function to calculate x ^ y modulo 10 ^ 9 + 7 in O ( log y )
Stores the result of ( x ^ y )
Update x , if it exceeds mod
If x is divisible by mod
If y is odd , then multiply x with res
Divide y by 2
Update the value of x
Return the value of x ^ y
Function to count the number of relations that are neither reflexive nor irreflexive
Return the resultant count
Driver Code
Function to find the minimum number of operations required to make the array elements equal
Stores the array elements
Stores the sum of the array
Iterate over the range [ 0 , N ]
Update the value arr [ i ]
Increment the sum by the value arr [ i ]
Stores the middle element
If N is even
Otherwise
Stores the result
Traverse the range [ 0 , N / 2 ]
Update the value of ans
Return the result
Driver Code
Function to find the minimum number of operations required to make the array elements equal
If the value of N is even
Return the value
Otherwise , N is odd
Return the value
Driver Code
Function to find the Bitwise XOR of Bitwise AND of all pairs from the arrays arr1 [ ] and arr2 [ ]
Stores the result
Iterate over the range [ 0 , N - 1 ]
Iterate over the range [ 0 , M - 1 ]
Stores Bitwise AND of the pair { arr1 [ i ] , arr2 [ j ] }
Update res
Return the res
Driver Code
Input
Function to find the Bitwise XOR of Bitwise AND of all pairs from the arrays arr1 [ ] and arr2 [ ]
Stores XOR of array arr1 [ ]
Stores XOR of array arr2 [ ]
Traverse the array arr1 [ ]
Traverse the array arr2 [ ]
Return the result
Driver Code
Input
Function to check if a number can be expressed as a power of 2
if N is power of two
Function to count numbers that cannot be expressed as sum of two or more consecutive + ve integers
Stores the resultant count of integers
Iterate over the range [ 1 , N ]
Check if i is power of 2
Increment the count if i is not power of 2
Print the value of count
Driver Code
Python 3 program for the above approach
Function to count numbers that cannot be expressed as sum of two or more consecutive + ve integers
Stores the count of such numbers
Driver Code
Python3 program for the above approach
Function to calculate the power of base nearest to x
Stores logX to the base K
Function to replace array elements with nearest power of K
Traverse the array
Convert integer into a string
If K is found , then replace with the nearest power of K
Print the array
Given array
Given value of K
Function call to replace array elements with nearest power of K
Python3 program for the above approach
Function to find absolute difference between array sum divided by x and sum of ceil of array elements divided by x
Stores the total sum
Stores the sum of ceil of array elements divided by x
Traverse the array
Adding each array element
Add the value ceil of arr [ i ] / x
Find the ceil of the total sum divided by x
Return absolute difference
Driver Code
Function to remove trailing zeros from the sum of two numbers
Stores the sum of A and B
Stores the digits
Stores the equivalent string of integer N
Traverse the string
Push the digit at i in the stack
While top element is '0
Pop the top element
Stores the resultant number without tailing 0 's
While s is not empty
Append top element of S in res
Pop the top element of S
Reverse the string res
Driver Code
Input
Function Call
Function to count the number of triplets whose product is at most N
Stores the count of triplets
Iterate over the range [ 0 , N ]
Iterate over the range [ 0 , N ]
If the product of pairs exceeds N
Increment the count of possible triplets
Return the total count
Driver Code
Function to calculate the sum of an infinite Geometric Progression
Case for Infinite Sum
Store the sum of GP Series
Print the value of sum
Driver Code
Python 3 program for the above approach
Function to calculate x ^ y % mod in O ( log y )
Stores the result of x ^ y
Update x if it exceeds mod
If y is odd , then multiply x with result
Divide y by 2
Update the value of x
Return the value of x ^ y
Function to count relations that are irreflexive and antisymmetric in a set consisting of N elements
Return the resultant count
Driver Code
Python 3 program for the above approach
Function to count all the numbers in the range [ 1 , N ] having common factor with N other than 1
Stores the count of numbers having more than 1 factor with N
Iterate over the range [ 1 , N ]
If gcd is not 1 then increment the count
Print the resultant count
Driver Code
Function to calculate the value of Euler 's totient function
Initialize result with N
Find all prime factors of N and subtract their multiples
Check if p is a prime factor
If found to be true , then update N and result
If N has a prime factor greater than sqrt ( N ) , then there can be at - most one such prime factor
Function to count all the numbers in the range [ 1 , N ] having common factor with N other than 1
Stores the resultant count
Print the count
Driver Code
Function to modify the array by performing given queries
Stores the multiplication of all integers of type 1
Stores the value obtained after performing queries of type 1 & 2
Iterate over the queries
Query of type 0
Update the value of add
Query of type 1
Update the value of mul
Update the value of add
Otherwise
Store the element at index Q [ i ] [ 1 ]
Prthe result for the current query
Driver Code
Python program for the above approach
Function to find the N - th Fibonacci Number
Find the value of a , b , and r
Find the N - th Fibonacci
Return the result
Function to find the Fibonacci number which is nearest to X
Calculate the value of n for X
Return the nearest Fibonacci Number
Function to find the minimum cost to convert all array elements to Fibonacci Numbers
Stores the total minimum cost
Traverse the given array arr [ ]
Find the nearest Fibonacci Number
Add the cost
Return the final cost
Driver Code
Function to find the largest sum pair that are K distant apart
Stores the prefix maximum array
Base Case
Traverse the array and update the maximum value upto index i
Stores the maximum sum of pairs
Iterate over the range [ K , N ]
Find the maximum value of the sum of valid pairs
Return the resultant sum
Driver Code
Function to find the sum of the infinite AGP
Stores the sum of infinite AGP
Print the required sum
Driver Code
Function to count pairs from an array having GCD equal to minimum element of that pair
Stores the resultant count
Iterate over the range [ 0 , N - 2 ]
Iterate over the range [ i + 1 , N ]
If arr [ i ] % arr [ j ] is 0 or arr [ j ] % arr [ i ] is 0
Increment count by 1
Return the resultant count
Driver Code
Python3 program for the above approach
Function to count pairs from an array having GCD equal to minimum element of that pair
Stores the resultant count
Stores the frequency of each array element
Traverse the array arr [ ]
Iterate over the Map mp
Stores the array element
Stores the count of array element x
If x is 1
Increment res by N - 1
Increment res by yC2
Iterate over the range [ 2 , sqrt ( x ) ]
If x is divisible by j
Increment the value of res by mp [ j ]
If j is not equal to x / j
Increment res by mp [ x / j ]
Return the resultant count
Driver Code
Function to count the set bits in an integer
Stores the count of set bits
Iterate while N is not equal to 0
Increment count by 1
Divide N by 2
Return the total count obtained
Function to find the product of count of set bits present in each element of an array
Stores the resultant product
Traverse the array arr [ ]
Stores the count of set bits of arr [ i ]
Update the product
Return the resultant product
Driver Code
Python3 program for the above approach
Function to find the sum of elements having odd number of divisors in index range [ L , R ] for Q queries
Initialize the dp [ ] array
Traverse the array , arr [ ]
If a [ i ] is a perfect square , then update value of DP [ i ] to a [ i ]
Find the prefix sum of DP [ ] array
Iterate through all the queries
Find the sum for each query
Driver Code
Python 3 program for the above approach
Function to split array elements into two subsets having sum of the smaller subset maximized
Stores the size of the array
Stores the frequency of array elements
Stores the total sum of the array
Stores the sum of the resultant set
Stores if it is possible to split the array that satisfies the conditions
Stores the elements of the first subseta
Traverse the array arr [ ]
Increment total sum
Increment count of arr [ i ]
Sort the array arr [ ]
Stores the index of the last element of the array
Traverse the array arr [ ]
Stores the frequency of arr [ i ]
If frq + ans . size ( ) is at most remaining size
Append arr [ i ] to ans
Decrement totSum by arr [ i ]
Increment s by arr [ i ]
Otherwise , decrement i by frq
If s is greater than totSum
Mark flag 1
If flag is equal to 1
Print the arrList ans
Otherwise , print " - 1"
Driver Code
Function to find minimum number of Bitwise XOR of array elements with 1 required to make sum of the array at least K
Stores the count of even array elements
Stores sum of the array
Traverse the array arr [ ]
Increment sum
If array element is even
Increase count of even
If S is at least K
If S + E is less than K
Otherwise , moves = K - S
Driver Code
Function to find maximum and minimum value of a number that can be obtained by rotating bits
Stores the value of N
Stores the maximum value
Stores the minimum value
If temp is odd
Update the maximum and the minimum value
If flag is 1 , then return the maximum value
Otherwise , return the maximum value
Function to find the maximum difference between the sum of odd and even - indexed array elements possible by rotating bits
Stores the maximum difference
Stores the sum of elements present at odd indices
Stores the sum of elements present at even indices
Traverse the given array
If the index is even
Update the caseOne
Stores the maximum difference
Stores the sum of elements placed at odd positions
Stores the sum of elements placed at even positions
Traverse the array
If the index is even
Update the caseTwo
Return the maximum of caseOne and caseTwo
Driver Code
Function to find the element with minimum sum of differences between any elements in the array
Stores the required X and sum of absolute differences
Calculate sum of array elements
The sum of absolute differences can 't be greater than sum
Update res that gives the minimum sum
If the current difference is less than the previous difference
Update min_diff and res
Print the resultant value
Driver Code
Function to calculate sum of array elements after adding arr [ i ] / K to the end of the array if arr [ i ] is divisible by K
Stores the sum of the array
Stores the array elements
Traverse the array
Stores if the operation should be formed or not
Traverse the vector V
If flag is false and if v [ i ] is divisible by K
Otherwise , set flag as true
Increment the sum by v [ i % N ]
Return the resultant sum
Driver Code
Function to count the array elements whose count of divisors is prime
Stores the maximum element
Find the maximum element
Store if i - th element is prime ( 0 ) or non - prime ( 1 )
Base Case
If i is a prime number
Mark all multiples of i as non - prime
Stores the count of divisors
Base Case
Iterate to count factors
Stores the count of array elements whose count of divisors is a prime number
Traverse the array arr [ ]
If count of divisors is prime
Return the resultant count
Driver Code
Function to store all prime numbers up to N using Sieve of Eratosthenes
Set 0 and 1 as non - prime
If p is prime
Set all multiples of p as non - prime
Function to count prime numbers up to N that can be represented as the sum of two prime numbers
Stores all the prime numbers
Update the prime array
Create a dp array of size n + 1
Update dp [ 1 ] = 0
Iterate over the range [ 2 , N ]
Add the previous count value
Increment dp [ i ] by 1 if i and ( i - 2 ) are both prime
Print the result
Driver Code
Function to find the minimum sum of the array such that Bitwise AND of arr [ i ] ana arr [ j ] is mat [ i ] [ j ]
Stores the minimum possible sum
Traverse the range [ 0 , N - 1 ]
Stores the Bitwise OR of all the element of a row
Traverse the range [ 0 , N - 1 ]
If i not equal to j
Update the value of res
Increment the sum by res
Return minimum possible sum
Driver code
Python3 program for the above approach
Function to find GCD of two numbers
Base Case
Recursively find the GCD
Function to find LCM of two numbers
Function to find LCM of unique elements present in the array
Stores the frequency of each number of the array
Store the frequency of each element of the array
Store the required result
Traverse the map freq
If the frequency of the current element is 1 , then update ans
If there is no unique element , set lcm to - 1
Print the result
Driver Code
Function Call
Python3 program to implement the above approach
Function to find maximum difference between adjacent array elements
Store the maximum difference
Traverse the array
Update maximum difference
Function to calculate the minimum of maximum difference between adjacent array elements possible by removing a single array element
Stores the required minimum
Stores the updated array
Skip the i - th element
Update MinValue
return MinValue
Driver Code
Python3 program for the above approach
Function to calculate the value of x ^ y % mod in O ( log y )
Stores the result of x ^ y
Update x if it exceeds mod
If y is odd , then multiply x with result
Divide y by 2
Update the value of x
Return the resultant value of x ^ y
Function to count the number of antisymmetric relations in a set consisting of N elements
Print the count of antisymmetric relations
Driver Code
Python3 program for the above approach
Function to calculate x ^ y modulo ( 10 ^ 9 + 7 )
Stores the result of x ^ y
Update x if it exceeds mod
If x is divisible by mod
If y is odd , then multiply x with result
Divide y by 2
Update the value of x
Return the final value of x ^ y
Function to count the number of asymmetric relations in a set consisting of N elements
Return the resultant count
Driver Code
Function to calculate cross product of two vectors
Update cross_P [ 0 ]
Update cross_P [ 1 ]
Update cross_P [ 2 ]
Function to check if two given vectors are collinear or not
Store the first and second vectors
Store their cross product
Calculate their cross product
Check if their cross product is a NULL Vector or not
Driver Code
Given coordinates of the two vectors
Function to calculate Kinetic Energy
Stores the Kinetic Energy
Function to calculate Potential Energy
Stores the Potential Energy
Driver Code
Function to count the number of pairs required to be removed from the array and replaced by their Bitwise OR values
Stores the count of even array elements
Traverse the given array
Increment the count of even array elements
If the array contains at least one odd array element
Otherwise , print 0
Driver Code
Function to find distribution of M objects among all array elements
Stores the distribution of M objects
Stores the indices of distribution
Stores the remaining objects
Iterate until rem is positive
If the number of remaining objects exceeds required the number of objects
Increase the number of objects for the index ptr by arr [ ptr ]
Decrease remaining objects by arr [ ptr ]
Increase the number of objects for the index ptr by rem
Decrease remaining objects to 0
Increase ptr by 1
Print the final distribution
Driver Code
Function to calculate sum of squares of differences of all possible pairs
Stores the final sum
Stores temporary values
Traverse the array
Final sum
Prthe answer
Driver Code
Given array
Size of the array
Function call to find sum of square of differences of all possible pairs
Function to count the number of ways of removing objects such that after removal , exactly M equidistant objects remain
Store the resultant number of arrangements
Base Case : When only 1 object is left
Print the result and return
Iterate until len <= n and increment the distance in each iteration
Total length if adjacent objects are d distance apart
If length > n
Update the number of ways
Print the result
Driver Code
Python3 program for the above approach
Function to count the number of unique stairs visited
Checks whether the current stair is visited or not
Store the possible moves from the current position
Initialize a queue
Push the starting position
Mark the starting position S as visited
Iterate until queue is not empty
Store the current stair number
Check for all possible moves from the current stair
Store the new stair number
If it is valid and unvisited
Push it into queue
Mark the stair as visited
Store the result
Count the all visited stairs
Print the result
Driver Code
Function to count for each array element , the number of elements that are smaller than that element
Traverse the array
Stores the count
Traverse the array
Increment count
Print the count of smaller elements for the current element
Driver Code
Function to calculate GCD of two numbers
Base Case
Calculate GCD recursively
Function to count the minimum number of divisions required to make X and Y equal
Calculate GCD of X and Y
Divide X and Y by their GCD
Stores the number of divisions
Iterate until X != Y
Maintain the order X <= Y
If X is divisible by 2 , then divide X by 2
If X is divisible by 3 , then divide X by 3
If X is divisible by 5 , then divide X by 5
If X is not divisible by 2 , 3 , or 5 , then pr - 1
Increment count by 1
Print the value of count as the minimum number of operations
Driver Code
Function to find the minimum number of increments or decrements required to convert array into a power sequence
Initialize the count to f ( X ) for X = 1
Calculate the value of f ( X ) X ^ ( n - 1 ) <= f ( 1 ) + a [ n - 1 ]
Calculate F ( x )
Check if X ^ ( n - 1 ) > f ( 1 ) + a [ n - 1 ]
Update ans to store the minimum of ans and F ( x )
Return the minimum number of operations required
Driver Code
Python3 program for the above approach
Function to print the array
Traverse the array
Function to modify array elements by absolute difference of the nearest perfect power of a and b
Traverse the array arr [ ]
Find the log a of arr [ i ]
Find the power of a less than and greater than a
Find the log b of arr [ i ]
Find the power of b less than and greater than b
Update arr [ i ] with absolute difference of log_a & log _b
Print the modified array
Driver Code
Function to count the number of subarrays having even Bitwise OR
Store number of subarrays having even bitwise OR
Store the length of the current subarray having even numbers
Traverse the array
If the element is even
Increment size of the current continuous sequence of even array elements
If arr [ i ] is odd
If length is non zero
Adding contribution of subarrays consisting only of even numbers
Make length of subarray as 0
Add contribution of previous subarray
Return total count of subarrays
Driver Code
Function Call
Function to print the resultant array
Stores the sum of the array
Calculate sum of the array
If sum > K
Not possible to construct the array
Update K
Stores the resultant array
Traverse the array
Stores the current element
If jth bit is not set and value of 2 ^ j is less than K
Update curr
Update K
Push curr into B
If K is greater than 0
Print the vector B
Otherwise
Driver Code
Input
Size of the array
Given input
Function call to print the required array
Function to prpairs whose difference raised to the power K is X
Stores the count of valid pairs
Iterate over the range [ - 1000 , 1000 ]
Iterate over the range [ - 1000 , 1000 ]
If the current pair satisfies the given condition
Increment the count by 1
If no such pair exists
Driver Code
Function to find the maximum Bitwise AND of connected components possible by connecting a graph using M edges
Stores total number of ways to connect the graph
Stores the maximum Bitwise AND
Iterate over the range [ 0 , 2 ^ n ]
Store the Bitwise AND of the connected vertices
Store the count of the connected vertices
Check for all the bits
If i - th bit is set
If the first vertex is added
Set andans equal to arr [ i ]
Calculate Bitwise AND of arr [ i ] with andans
Increase the count of connected vertices
If number of connected vertices is ( m + 1 ) , no cycle is formed
Find the maximum Bitwise AND value possible
Return the maximum Bitwise AND possible
Driver Code
Function to find the sum of the array formed by performing given set of operations while traversing the array ops [ ]
If the size of array is 0
Stores the required sum
Traverse the array ops [ ]
If the character is C , remove the top element from the stack
If the character is D , then push 2 * top element into stack
If the character is + , add sum of top two elements from the stack
Otherwise , push x and add it to ans
Print the resultant sum
Driver Code
Function to calculate Bitwise XOR of major diagonal elements of 3D matrix
Stores the Bitwise XOR of the major diagonal elements
If element is part of major diagonal
Print the resultant Bitwise XOR
Driver Code
Function to find the Bitwise XOR of both diagonal elements of 3D matrix
Stores the Bitwise XOR of the major diagonal elements
Print the resultant Bitwise XOR
Driver Code
Python3 program of the above approach
Adjacency list to represent the graph
Stores the count of subtrees possible from given N - ary Tree
Utility function to count the number of subtrees possible from given N - ary Tree
Stores the count of subtrees when cur node is the root
Traverse the adjacency list
Iterate over every ancestor
Calculate product of the number of subtrees for each child node
Update the value of ans
Return the resultant count
Function to count the number of subtrees in the given tree
Initialize an adjacency matrix
Add the edges
Function Call to count the number of subtrees possible
Prcount of subtrees
Driver Code
Function to check which player wins the game
Stores the difference between + ve and - ve array elements
Traverse the array
Update diff
Checks if diff is even
Driver Code
Given Input
Function call to check which player wins the game
Python3 program for the above approach
Function to construct the array such the sum of values of Euler Totient functions of all array elements is N
Stores the resultant array
Find divisors in sqrt ( N )
If N is divisible by i
Push the current divisor
If N is not a perfect square
Push the second divisor
Print the resultant array
Driver Code
Function Call
Function to calculate GCD of two numbers
Function to count maximum persons that can be placed in a row
Driver Code
Input
Function to count maximum persons that can be placed in a row
Python3 program for the above approach
Function to generate a convolution array of two given arrays
Stores the size of arrays
Stores the final array
Traverse the two given arrays
Update the convolution array
Print the convolution array c [ ]
Driver Code
Python3 program for the above approach
Function to count number of 1 s present in a sub matrix from ( start_i , start_j ) to ( end_i , end_j )
Stores the number of 1 s present in current submatrix
Traverse the submatrix
If mat [ x ] [ y ] is equal to 1
Increase count by 1
Return the total count of 1 s
Function to find the minimum number of 1 s present in a sub - matrix of size A * B or B * A
Stores the minimum count of 1 s
Iterate i from 0 to N
Iterate j from 0 to M
If a valid sub matrix of size A * B from ( i , j ) is possible
Count the number of 1 s present in the sub matrix of size A * B from ( i , j )
Update minimum if count is less than the current minimum
If a valid sub matrix of size B * A from ( i , j ) is possible
Count the number of 1 s in the sub matrix of size B * A from ( i , j )
Update minimum if count is less than the current minimum
Return minimum as the final result
Driver Code
Given Input
Function call to find the minimum number of 1 s in a submatrix of size A * B or B * A
Function to check if N can be expressed as an even power of 2
Iterate till x is N
If x is even then return true
Increment x
If N is not a power of 2
Driver Code
Function to check if N can be expressed as an even power of 2 or not
Iterate until low > high
Calculate mid
If 2 ^ mid is equal to n
If mid is odd
Update the value of low
Update the value of high
Otherwise
Driver code
Function to check if N can be expressed as an even power of 2 or not
If N is not a power of 2
Bitwise AND operation
Driver Code
Function to calculate sum of quotients obtained by dividing N by powers of K <= N
Store the required sum
Iterate until i exceeds N
Update sum
Multiply i by K to obtain next power of K
Prthe result
Driver Code
Given N and K
Function to count the number of APs with sum S and common difference D
Multiply S by 2
Stores the count of APs
Iterate over the factors of 2 * S
Check if i is the factor or not
Conditions to check if AP can be formed using factor F
Return the total count of APs
Driver Code
Function to count minimum number of insertions required to make sum of every pair of adjacent elements at most K
Stores if it is possible to make sum of each pair of adjacent elements at most K
Stores the count of insertions
Stores the previous value to index i
Traverse the array
If arr [ i ] is greater than or equal to K
Mark possible 0
If last + arr [ i ] is greater than K
Increment res by 1
Assign arr [ i ] to last
If possible to make the sum of pairs of adjacent elements at most K
Otherwise print " - 1"
Driver Code
Function to count the number of distinct elements present in the array
Insert all elements into the Set
Return the size of set
Function that finds the maximum sum of K - length subarray having same unique elements as arr [ ]
Not possible to find a subarray of size K
Initialize Set
Calculate sum of the distinct elements
If the set size is same as the count of distinct elements
Update the maximum value
Driver code
Stores the count of distinct elements
Function to count the number of distinct elements present in the array
Insert array elements into set
Return the st size
Function to calculate maximum sum of K - length subarray having same unique elements as arr [ ]
Not possible to find an subarray of length K from an N - sized array , if K > N
Traverse the array
Update the mp
If i >= K , then decrement arr [ i - K ] element 's one  occurence
If frequency of any element is 0 then remove the element
If mp size is same as the count of distinct elements of array arr [ ] then update maximum sum
Function that finds the maximum sum of K - length subarray having same number of distinct elements as the original array
Size of array
Stores count of distinct elements
Print maximum subarray sum
Driver Code
Function Call
Python3 program for the above approach
Function to calculate x ^ y modulo 1000000007 in O ( log y )
Stores the result of x ^ y
Update x if it exceeds mod
If x is divisible by mod
If y is odd , then multiply x with result
Divide y by 2
Update the value of x
Return the resultant value of x ^ y
Function to count the number of irreflixive relations in a set consisting of N elements
Return the resultant count
Driver Code
Function to count all possible AP series with common difference 1 and sum of elements equal to N
Stores the count of AP series
Traverse through all factors of 2 * N
Check for the given conditions
Increment count
Prcount - 1
Given value of N
Function call to count required number of AP series
Stores if i is prime ( 1 ) or non - prime ( 0 )
Function to build sieve array
Inititalize all the values in sieve equals to 1
Sieve of Eratosthenes
If current number is prime
Set all multiples as non - prime
Function to check if the numbers formed by combining first and last digits generates a prime number or not
Check if any of the numbers formed is a prime number or not
Traverse the array of queries
Extract the last digit
Extract the first digit
If any of the two numbers is prime
Otherwise
Driver Code
Computes and stores primes using Sieve
Function call to perform queries
Function to check whether N has at least one odd divisor not exceeding N - 1 or not
Stores the value of N
Reduce the given number N by dividing it by 2
If N is divisible by an odd divisor i
Check if N is an odd divisor after reducing N by dividing it by 2
Otherwise
Driver Code
Function Call
Stores the prime factor of numbers
Function to find GCD of a and b
Base Case
Otherwise , calculate GCD
Function to precompute the prime numbers till 1000000
Initialize all the positions with their respective values
Iterate over the range [ 2 , sqrt ( 10 ^ 6 ) ]
If i is prime number
Mark it as the factor
Utility function to count the number of steps to make X and Y equal
Initialise steps
Iterate x is at most 1
Divide with the smallest prime factor
If X and Y can 't be  made equal
Return steps
Function to find the minimum number of steps required to make X and Y equal
Generate all the prime factors
Calculate GCD of x and y
Divide the numbers by their gcd
If not possible , then return - 1
Return the resultant number of steps
Driver Code
Python3 program for the above approach
Function to check if n is a deficient number or not
Stores sum of divisors
Iterate over the range [ 1 , sqrt ( N ) ]
If n is divisible by i
If divisors are equal , add only one of them
Otherwise add both
Function to print the longest subsequence which does not contain any deficient numbers
Stores the count of array elements which are non - deficient
Traverse the array
If element is non - deficient
Return the answer
Driver Code
Function to check if a number is pronic number or not
Iterate over the range [ 1 , sqrt ( N ) ]
Return true if N is pronic
Otherwise , return false
Function to count the number of subarrays consisting of pronic numbers
Stores the count of subarrays
Stores the number of consecutive array elements which are pronic
Traverse the array
If i is pronic
Return the total count
Driver Code
Python3 program for the above approach
Function to calculate log x for given base
Function to replace all array elements with the nearest power of previous adjacent nelement
For the first element , set the last array element to its previous element
Traverse the array
Find K for which x ^ k is nearest to arr [ i ]
Find the power to x nearest to arr [ i ]
Update x
Return the array
Driver Code
Function Call
Function to find the last remaining array element after performing the given operations repeatedly
Stores the resultant sum
Traverse the array
Increment sum by arr [ i ] * coefficient of i - th term in ( x - y ) ^ ( N - 1 )
Update multiplier
Return the resultant sum
Driver Code
Function to maximize the count of pairs with even XOR possible in an array by given operations
Stores count of odd array elements
Traverse the array
If arr [ i ] is odd
Stores the total number of even pairs
Driver Code
Input
Function call to count the number of pairs whose XOR is even
Python3 program for the above approach
Function to count the number of pairs whose Bitwise AND is greater than the Bitwise XOR
Stores the frequency of MSB of array elements
Traverse the array
Increment count of numbers having MSB at log ( arr [ i ] )
Stores total number of pairs
Traverse the Map
Return total count of pairs
Driver Code
Python program for the above approach
Function to count total number of bits present in a number
Function to count total set bits in a number
Stores the count of set bits
Right shift by 1
Return the final count
Function to find maximum number by shifting two unequal bits
Count set bits in number n
Iterate the string bits
Function to find minimum number by shifting two unequal bits
Iterate the set bit
Function to find the maximum difference
Stores the maximum difference
Stores the sum of elements placed at odd positions
Stores the sum of elements placed at even positions
Traverse the array
Update CaseOne
Stores the maximum difference
Assign value O
Traverse the array
Update caseTwo
Return maximum of caseOne and CaseTwo
Drivers Code
Function Call
Functino to find the number after processing the diagonal elements
Store the required number
Checking for each position
Store the number of set bits & non - set bits at position i
Traverse the diagonal elements
Update count of S if current element is set at position i
Else update NS
If number of set bits is > number of non - set bits , add set bits value to the ans
Return the answer
Function to find the sum of the numbers generated after processing both the diagonals of the matrix
Store the primary diagonal elements
Store the secondary diagonal elements
Function Call to get the required numbers and return their sum
Driver Code
Function Call
Function to partition first N powers of 2 into two subsequences with minimum difference between their sum
Largest element in the first part
Place N / 2 - 1 smallest elements in the first sequence
Place remaining N / 2 elements in the second sequence
Print the minimum difference
Driver Code
Function to check if a number is a perfect Cube or not
Driver code
Function to find the square root of the number N using BS
If the range is still valid
Find the mid - value of the range
Base Case
Condition to check if the left search space is useless
Driver Code
Function to calculate gcd of two numbers
Function to prall the common divisors
Variable to find the gcd of N numbers
Set to store all the common divisors
Finding GCD of the given N numbers
Finding divisors of the HCF of n numbers
Prall the divisors
Driver 's Code
Function to prall the common divisors
Function that print the table of a given number using recursion
Base Case
Print the table for current iteration
Recursive call to next iteration
Input number whose table is to print
Function call to print the table
Python3 program to find the largest composite number that divides N which is less than N
Function to check whether a number is prime or not
Corner case
Check from 2 to n - 1
Function that find the largest composite number which divides N and less than N
Find the prime number
Driver Code
Get the smallest prime factor
Check if ( N / a ) is prime or not . If Yes print " - 1"
Else print largest composite number ( N / a )
Function to whether the numbers can be made equal or not
Check whether the numbers can reach an equal point or not
M and N cannot be made equal by increasing M and decreasing N when M is already greater than N
Driver code
Function to check if a number is palindrome or not
Convert the num n to string
Iterate over string to check whether it is palindromic or not
Function to find XOR of all N - digits palindrome number
To store the XOR and OR of all palindromic number
Starting N - digit palindromic number
Ending N - digit palindromic number
Iterate over starting and ending number
To check if i is palindromic or not
Print the XOR and OR of all palindromic number
Driver Code
pref [ ] array to precompute the sum of all palindromic number
Function that return number num if num is palindromic else return 0
Convert num to string
Function to precompute the sum of all palindrome numbers upto 100000
checkPalindrome ( ) return the number i if i is palindromic else return 0
Function to print the sum for each query
Function to prsum of all palindromic numbers between [ L , R ]
Function that pre computes the sum of all palindromic numbers
Iterate over all Queries to print the sum
Queries
Function that print the the sum of all palindromic number in Range [ L , R ]
Function to calculate the alternating sign sum
Variable to store the sum
Loop to iterate each number from 1 to N
The alternating sign is put by checking if the number is even or odd
Add the square with the sign
Add the square with the sign
Driver code
Function to calculate the alternating sign sum
Variable to store the absolute sum
Variable to store the sign
Variable to store the resultant sum
Driver code
Function to count pairs
variable to store count
Generate all possible pairs such that 1 <= x < y < n
Driver code
Python3 program to count pairs in array such that one element is power of another
Function to check if given number number y is power of x
log function to calculate value
compare to the result1 or result2 both are equal
Function to find pairs from array
Iterate through all pairs
Increment count if one is the power of other
Driver code
XOR of all elements from 1 to N
Function to find the Array from the XOR Array
Take a vector to store the permutation
XOR of N natural numbers
Loop to find the XOR of adjacent elements of the XOR Array
Loop to find the other elements of the permutation
Finding the next and next elements
Driver Code
Required Permutation
Function to return a vector which consists the sum of four portions of the matrix
Iterating through the matrix
Condition for selecting all values before the second diagonal of metrics
Top portion of the matrix
Left portion of the matrix
Bottom portion of the matrix
Right portion of the matrix
Adding all the four portions into a vecto
Driver code
Function to check if X and Y can be made equal to zero by using given operation any number of times
Check for the two conditions
Driver code
Function to print the largest n - digit even and odd numbers in hexadecimal number system
Append ' F ' ( N - 1 ) times
Append ' E ' for an even number
Append ' F ' for an odd number
Driver code
Python3 program to find log ( a ) on any base b
Driver code
Recursive function to compute log a to the base b
Driver code
Function to return the largest N - digit number in Hexa - Decimal Number System
Append ' F ' N times
Function to return the smallest N - digit number in Hexa - Decimal Number System
Append '0' ( N - 1 ) times to 1
Function to print the largest and smallest N - digit Hexa - Decimal number
Driver code
Python3 implementation of the approach
Function to return the highest power of k less than or equal to n
Function to return the smallest power of k greater than or equal to n
Function to print the result
Driver code
Function to check if all the elements can be made 0 in an array
Variable to store sum and maximum element in an array
Loop to calculate the sum and max value of the given array
If n is 1 or sum is odd or sum - max element < max then no solution
For the remaining case , print Yes
Driver code
Python3 program to find the sum of all perfect squares in the given range
Array to precompute the sum of squares from 1 to 100010 so that for every query , the answer can be returned in O ( 1 ) .
Function to check if a number is a perfect square or not
Find floating point value of square root of x .
If square root is an integer
Function to precompute the perfect squares upto 100000.
Function to print the sum for each query
Driver code
To calculate the precompute function
Calling the printSum function for every query
Recursive function to prfactors of a number
Checking if the number is less than N
Calling the function recursively for the next number
Driver code
Function to maximize the value of ( a + b ) such that ( a * a - b * b = n )
Driver code
Function to find the maximum number of edges in a N - vertex graph .
According to the Mantel 's theorem  the maximum number of edges will be  floor of [(n^2)/4]
Driver Function
Function to pr the multiplication table upto K - th term
For loop to iterate from 1 to N where i serves as the value of K
Inner loop which at every iteration goes till i
Printing the table value for i
New line after every row
Driver code
BVA for nature of roots of a quadratic equation
If a = 0 , D / 2 a will yield exception Hence it is not a valid Quadratic Equation
If D > 0 , it will be Real Roots
If D == 0 , it will be Equal Roots
If D < 0 , it will be Imaginary Roots
Function to check for all testcases
Driver Code
Function to find if the Vacation is possible or not
Find the required number of hours of study
find the hours of study that can be done if the vacation is taken
check if the required hours are less than or equal to the hours of study that can be done if the vacation is taken
Driver Code
Function to return maximum among the two numbers
Function to return minimum among the two numbers
Driver code
Displaying the maximum value
Displaying the minimum value
Function to find array with K subarrays with sum S
Driver Code
Function call
Python Implementation to find the minimum number of cuts to pay the worker .
Function to find the minimum number of cuts to pay the worker .
Nearest Integer to the Log value of the number N
Driver Code
Cuts Required in the Length of 15
Python3 implementation of the approach
max_prime [ i ] represent maximum prime number that divides the number i
min_prime [ i ] represent minimum prime number that divides the number i
Function to store the minimum prime factor and the maximum prime factor in two arrays
Check for prime number if min_prime [ i ] > 0 , then it is not a prime number
if i is a prime number min_prime number that divide prime number and max_prime number that divide prime number is the number itself .
If this number is being visited for first time then this divisor must be the smallest prime number that divides this number
The last prime number that divides this number will be maximum .
Function to find the sum of the minimum and the maximum prime factors of every number from the given array
Pre - calculation
For every element of the given array
The sum of its smallest and largest prime factor
Driver code
Function to count valid pairs
Driver code
Python3 implementation of the approach
Divisors array to keep track of the maximum divisor
Function to pre - compute the prime numbers and largest divisors
Visited array to keep track of prime numbers
0 and 1 are not prime numbers
Initialising divisors [ i ] = i
For all the numbers divisible by 2 the maximum divisor will be number / 2
If divisors [ i ] is not equal to i then this means that divisors [ i ] contains minimum prime divisor for the number
Update the answer to i / smallest_prime_divisor [ i ]
Condition if i is a prime number
If divisors [ j ] is equal to j then this means that i is the first prime divisor for j so we update divi [ j ] = i
If the current element is prime then it has no divisors other than 1 and itself
Driver code
Function to compute sum of Digits of Number N in base B
Initialize sum with 0
Compute unit digit of the number
Add unit digit in sum
Update value of Number
Driver code
Function to compute Nth digit from right in base B
Skip N - 1 Digits in Base B
Nth Digit from right in Base B
Driver Code
Python3 implementation of the approach
The vector primes holds the prime numbers
Function to generate prime numbers
Initialize the array elements to 0 s
Set the non - primes to true
Fill the vector primes with prime numbers which are marked as false in the numbers array
Function to print three prime numbers which sum up to the number N
Take the first prime number
Take the second prime number
Subtract the two prime numbers from the N to obtain the third number
If the third number is prime
Print the three prime numbers if the solution exists
Driver code
Function for generating prime numbers using Sieve of Eratosthenes
Function to print the three prime numbers whose sum is equal to N
Function to print each of maximal contiguous increasing subarray
Loop to iterate through the array and print the maximal contiguous increasing subarray .
Condition to check whether the element at i , is greater than its next neighbouring element or not .
Driver function
Function to return the count of different arrays
No such combination exists
Arrays formed with single elements
Driver code
Python3 implementation of the above approach
Finding the minimum element
Loop over all the elements and find the difference
Solution found and returned
Driver code
Returns value of Binomial Coefficient C ( n , k )
Since nC0 is 1
Compute next row of pascal triangle using the previous row
Function to find the count of required subarrays
The required count is the binomial coefficient as explained in the approach above
Driver Function
Function to do a binary search on a given range .
Total sum is the sum of N numbers .
Sum until mid
If remaining sum is < the required value , then the required number is in the right half
Driver code
Function for the distribution of the number
Distribute the number among k elements
If there is some remaining sum to distribute
If there are elements remaining to distribute i . e . ( n - k )
Divide the remaining sum into n - k elements
Print the distribution
Driver code
Python3 implementation of the approach
Function to return the number of i 's such that Pi <= Pj for all 1 <= j <= i in the permutation of first N natural numbers
To store the count of such indices
Store the mini value
For all the elements
Return the required answer
Driver code
Function to Check if Sum and XOR of all elements of array is equal
Sum and XOR of all elements
Checking Sum and XOR to be equal
Driver Function
Check Sum and XOR is equal
Python code to Count the odd length contiguous Palindromic sequences in the matrix
Function to count the number of contiguous palindromic sequences in the matrix
Add the total number of elements in the matrix to the count
Length of possible sequence to be checked for palindrome horizontally and vertically
Iterate through each element of the matrix and count the number of palindromic sequences in each row and column
Find the possible length of sequences that can be a palindrome
From i , check if the sequence formed by elements to its left and right is palindrome or not
if the sequence [ i , j - k ] to [ i , j + k ] is a palindrome , increment the count by 1
From i , check if the sequence formed by elements to its above and below is palindrome or not
if the sequence [ i - k , j ] to [ i + k , j ] is a palindrome , increment the count by 1
Return the total count of the palindromic sequences
Driver code
Function to return the number of set bits in n
Function to return the minimum steps required to reach 1
If n is even then divide it by 2
If n is 3 or the number of set bits in ( n - 1 ) is less than the number of set bits in ( n + 1 )
Increment the number of steps
Return the minimum number of steps
Driver code
Function to return the minimum number
Store the elements which are divisible by two in stack1
Store the elements which are not divisible by two in stack2 .
Concatenate the answer with smaller value of the topmost elements of both the stacks and then pop that element
Concatenate the answer with remaining values of stack1 .
Concatenate the answer with remaining values of stack2 .
Driver code
Function calling
Function to find power of a number .
Function to find factorial of a number .
Function to print no of arrays
c variable counts the no of pairs
Map to store the frequency of each element
Sum of all elements of the array
Variable to check if it is possible to make any array
First element of suffix array and the last element of prefix array
Check if the element exists in the map
If elements of any pair are equal and their frequency is not divisible by 2 update the isArrayPossible variable to false and break through the loop
If elements of any pair are not equal and their frequency is not same update the isArrayPossible variable to false and break through the loop
Check if frequency is greater than zero
update the count of pairs
Multiply the answer by 2 ^ ( frequency of pairs ) since the elements of the pair are not the same in this condition
Divide the answer by the factorial of no of similar pairs
Make frequency of both these elements 0
Update the count of pairs
Divide the answer by the factorial of no . of similar pairs
Make frequency of this element 0
Check if it is possible to make the array and there are n - 1 pairs whose sum will be equal to s1
Driver code
Function calling
Python3 implementation of the approach
Function to return the LCM of a and b
Function to find and print the two numbers
To find the factors
To check if i is a factor of x and the minimum possible number satisfying the given conditions
Driver code
Python implementation of the approach
Function to return element common in maximum number of APs
Initialize the count variable
Increment count for every element of an AP
Find the index with maximum count
Return the maximum common element
Driver code
Function to return the count of trailing 0 s in the given function
If n is odd
If n is even
Find the trailing zeros in n / 2 factorial
Return the required answer
Driver code
Python3 implementation of the approach
Function to calculate maximum GCD
Minimum possible sum for K unique positive integers
It is not possible to divide N into K unique parts
All the factors greater than sqrt ( N ) are complementary of the factors less than sqrt ( N )
If i is a factor of N
Driver code
Python3 implementation of the approach
Radius of the 3 given circles
Calculation of area of a triangle by Heron 's formula
Applying binary search to find the radius r4 of the required circle
Area of main triangle
Loop runs until l and h becomes approximately equal
Area of smaller triangles
If sum of smaller triangles is less than main triangle
If sum of smaller triangles is greater than or equal to main triangle
Taking r1 , r2 , r3 as input
Call to function binary search
Python3 implementation of the approach
Taking r1 , r2 , r3 as input
Calculation of r4 using formula given above
Function that returns true if all the array elements can be made 0 with the given operation
Find the maximum element and the sum
Check the required condition
Driver code
Function that returns true if the required subarray exists in the given array
Map to store the positions of each integer in the original permutation
To store the address of each entry in arr [ n ] but with 1 - based indexing
To track minimum position sumcur for sum of a positions ti this position
Summing up addresses
Tracking minimum address encountered ti now
The sum of the addresses if it forms the required subarray
If current sum of address is equal to val
Driver code
Python program for the above approach
Function to check palindrome
Function to calculate the sum of n - digit palindrome
Run a loop to check all possible palindrome
If palindrome append sum
Driver code
Function to calculate sum of n digit number
Corner case
Using above approach
Driver code
Function to return the length of the largest subarray with maximum possible GCD
To store the maximum number present in the array
Finding the maximum element
To store the final answer
Two pointer
Running a loop from j = i
Condition for incrementing 'j
Updating the answer
Driver code
Function to return the count of pairs ( i , j ) such that arr [ i ] * arr [ j ] = arr [ i ] + arr [ j ]
Increment count if condition satisfy
Return count of pairs
Driver code
Get and print count of pairs
Function to return the count of pairs ( i , j ) such that arr [ i ] * arr [ j ] = arr [ i ] + arr [ j ]
Count number of 0 ' s ▁ and ▁ 2' s in the array
Total pairs due to occurrence of 0 's 
Total pairs due to occurrence of 2 's 
Return count of all pairs
Driver code
Get and print count of pairs
Python 3 implementation of the approach
Function to return the count of all the subsequences with positive product
To store the count of positive elements in the array
To store the count of negative elements in the array
If the current element is positive
If the current element is negative
For all the positive elements of the array
For all the negative elements of the array
For the empty subsequence
Driver code
Function to return the smallest number that divides minimum number of elements in the given array
m stores the maximum in the array
Frequency array
Sieve
Incrementing j
If no multiples of j are in the array
Driver code
Function to return the smallest number that divides minimum number of elements
m stores the maximum in the array
Frequency table
Loop to factorize
sqrt factorization of the numbers
Finding the smallest number with zero multiples
Driver code
Function to find the numbers to be removed
typecast appropriately so that answer is float
return the obtained result
Convert i to integer
If i is an integer is 0 then answer is Yes
Driver code
Python3 implementation of the approach
Function for Sieve of Eratosthenes
Function to pr the elements of the array
Function to remove all the prime numbers
Generate primes
Traverse the array
If the current element is prime
Shift all the elements on the right of it to the left
Decrease the loop counter by 1 to check the shifted element
Decrease the length
Pr the updated array
Driver code
Function to return the minimized OR after removing an element from the array
Base case
Prefix and suffix OR array
Computing prefix / suffix OR arrays
To store the final answer
Finding the final answer
Returning the final answer
Driver code
Function that returns true if any prime number satisfies the given conditions
No such prime exists
Driver code
Python3 implementation of the approach
Function to calculate the number of square areas of size K * K
Row array and column array to store the lengths of differences between consecutive rows / columns
Fill the conrow vector
Fill the concol vector
To store the required answer
Every pair of row size and column size would result in an unblocked region
Driver code
Function to return the count of digits of n
Function to return the sum of increasing powers of N
To store the required answer
Count of digits in n which will be the power of the last digit
While there are digits left
Get the last digit
Add the last digit after raising it to the required power
Decrement the power for the previous digit
Remove the last digit
Function to return the count of integers which satisfy the given conditions
If current element satisfies the given condition
Driver code
Function to print all the perfect squares from the given range
For every element from the range
If current element is a perfect square
Driver code
Python3 implementation of the approach
Function to print all the perfect squares from the given range
Getting the very first number
First number 's square
Next number is at the difference of
While the perfect squares are from the range
Print the perfect square
Get the next perfect square
Next odd number to be added
Driver code
Function to return n ^ n ^ ... k times
Find the result
Driver code
Python3 implementation of the approach
Function to find all the distinct remainders when n is divided by all the elements from the range [ 1 , n + 1 ]
Set will be used to store the remainders in order to eliminate duplicates
Find the remainders
Print the contents of the set
Driver code
Python3 implementation of the approach
Function for Sieve of Eratosthenes
False here indicates that it is not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p , set them to non - prime
Function to return the count of primes less than or equal to n which can be expressed as the sum of two primes
To store the required count
If the integer is prime and it can be expressed as the sum of 2 and a prime number
Driver code
Python 3 implementation of the approach
Returns true if given year is valid
Return true if year is a multiple pf 4 and not multiple of 100. OR year is multiple of 400.
Returns true if given year is valid or not .
If year , month and day are not in given range
Handle February month with leap year
Months of April , June , Sept and Nov must have number of days less than or equal to 30.
Function to print the palindrome dates between the given years
For every year
Current year as a string
To store the reverse of year
Get the day and the month
If the current palindrome date is valid
Driver code
Python3 implementation of the approach
Function that returns true if x contains all distinct digits
Last digit of x
If current digit has appeared before
Mark the current digit to present
Remove the last digit
Function to return the required value of k
To store the maximum value for the given expression
If i contains all distinct digits
If the value of the expression is also maximum then update k and the expression
Driver code
Function to find the required permutation
Each element in P ' is like a  cumulative sum in Q
To check if each entry in P is from the range [ 1 , n ]
Invalid permutation
If a valid permutation exists
Print the permutation
No valid permutation
Driver code
Function to convert decimal no . to hexadecimal number
map for decimal to hexa , 0 - 9 are straightforward , alphabets a - f used for 10 to 15.
string to be returned
check if num is 0 and directly return "0"
if num > 0 , use normal technique as discussed in other post
if num < 0 , we need to use the elaborated trick above , lets see this
store num in a u_int , size of u_it is greater , it will be positive since msb is 0
use the same remainder technique .
Driver Code
Function to check the wining player
As discussed in the above approach
Driver Code
Python3 implementation of the approach
To store the factorial and the factorial mod inverse of a number
Function to find ( a ^ m1 ) % mod
Function to find factorial of all the numbers
Function to find the factorial mod inverse of all the numbers
Function to return nCr
Function to find ways to arrange K green balls among N balls such that we need exactly i moves to collect all K green balls
Driver code
Function call
Function to return the minimum inversions required so that no two adjacent elements are same
To store the inversions required to make the array { 1 , 0 , 1 , 0 , 1 , 0 , 1 , ... } and { 0 , 1 , 0 , 1 , 0 , 1 , 0 , ... } respectively
Find all the changes required
Return the required answer
Driver code
Function to calculate sum
Driver Code
Function that returns true if multiple lines are possible passing through ( x , y ) that divide the given rectangle into two equal parts
If the point ( x , y ) is the centre of the rectangle
Driver code
Function to return the minimized number
Total digits in the number
If the string is empty or there are no operations to perform
"0" is a valid number
If the first digit is not already 1 then update it to 1 and decrement k
While there are operations left and the number can still be updated
If the current digit is not already 0 then update it to 0 and decrement k
Return the minimised number
Driver code
Function to calculate the minimum number of steps required total steps taken is divisible by m and only 1 or 2 steps can be taken at a time
If m > n ans is - 1
else discussed above approach
Driver code
Structure for a linked list node
A helper function to remove zeros from the start of the linked list
A helper function to find the length of linked list
Given a reference ( pointer to pointer ) to the head of a list and an int , push a new node on the front of the list .
Allocate node
Set the data
Link the old list after the new node
Set the head to point to the new node
Function to compare the numbers represented as linked lists
Remover leading zeroes from the linked lists
Since the number represented by a has a greater length , it will be greater
If the lengths of two numbers are equal we have to check their magnitudes
If we reach here , then a and b are not None and their data is same , so move to next nodes in both lists
If linked lists are identical , then we need to return zero
Driver code
The constructed linked lists are : a : 5.6 . 7 b : 2.3 . 3
Utility function to return the sum of the array
Function to return the sum of the modified array
Find the sum of the subarray arr [ i + 1. . . n - 1 ]
Subtract the subarray sum
Return the sum of the modified array
Driver code
Python3 implementation of the approach
Function to return the minimum possible health of the last player
Find the GCD of the array elements
Driver code
Python3 implementation of the approach
Utility function to print the array
Function to generate the original array from the pair - product array
First element of the resulting array
Find all the other elements
Print the elements of the generated array
Driver code
Function to find the count of pairs with odd sum and the count of pairs with even sum
To store the count of even and odd number from the array
If the current element is even
If it is odd
To store the count of pairs with even sum
All the even elements will make pairs with each other and the sum of the pair will be even
All the odd elements will make pairs with each other and the sum of the pair will be even
To store the count of pairs with odd sum
All the even elements will make pairs with all the odd element and the sum of the pair will be odd
Driver code
Python3 implementation of the approach
Function to return n ! % 1000000007
To store the factorial
Find the factorial
Function to return the count of possible ways
Driver code
Returns value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- - * 1 ]
A Binomial coefficient based function to find nth FussCatalan number in O ( n ) time
Calculate value of 3 nCn
return 3 nCn / ( 2 n + 1 )
Driver code
Python3 program for nth FussCatalan Number
Function that returns true if n is composite
Check if there is any divisor of n . we only need check divisor till sqrt ( n ) because if there is divisor which is greater than sqrt ( n ) then there must be a divisor which is less than sqrt ( n )
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
Initialize result
Update x if it is greater than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 ; y = y / 2
Function that returns true if N is Euler Pseudoprime to the base A
Invalid base
N is not a composite odd number
If A and N are not coprime
All the conditions for Euler Pseudoprime are satisfied
Driver code
Python3 implementation of the approach
Function for Sieve of Eratosthenes
Function to return the minimum difference between any two prime numbers from the given range [ L , R ]
Find the first prime from the range
Find the second prime from the range
If the number of primes in the given range is < 2
To store the minimum difference between two consecutive primes from the range
Range left to check for primes
For every integer in the range
If the current integer is prime
If the difference between i and snd is minimum so far
Driver code
Generate primes
Function to return the required count
To store the final result
Two pointer loop
Initialising j
Looping till the subarray increases
Update ret
Update i
Return ret
Driver code
Function to return the count of elements P [ i ] such that P [ i ] is the second smallest among P [ i 1 ] , P [ i ] and P [ i + 1 ]
To store the required answer
Traverse from the second element to the second last element
Return the required answer
Driver code
Python3 implementation of the approach
Function to return the count of integers from the range [ a , b ] that are not divisible by c and d
Numbers which are divisible by c
Numbers which are divisible by d
Find lowest common factor of c and d
Numbers which are divisible by both c and d
Return the required answer
Driver code
Function to return the count of increasing subarrays of length k
To store the final result
Two pointer loop
Initialising j
Looping till the subarray increases
Updating the required count
Updating i
Returning res
Driver code
Function to return the length of the largest subsequence with minimum possible LCM
Minimum value from the array
To store the frequency of the minimum element in the array
If current element is equal to the minimum element
Driver code
Function to find the last digit of X in base Y
Driver code
Function to return the count of squares that can be formed
Driver code
Python3 implementation of the approach
Function to return the integer part of the geometric mean of the divisors of n
Driver code
Function to return the count of K 's such that the array can be divided into two sets containing equal number of elements when all the elements less than K are in one set and the rest of the elements are in the other set
Sort the given array
Return number of such Ks
Driver code
Function to return the count of valid pairs
To store the count of odd numbers and the count of even numbers such that 2 is the only even factor of that number
If current number is odd
If current number is even and 2 is the only even factor of it
Calculate total number of valid pairs
Driver code
Function to make array non - decreasing
Take the first element
Perform the operation
Traverse the array
Next element
If next element is greater than the current element then decrease it to increase the possibilities
It is not possible to make the array non - decreasing with the given operation
Next element is now the current
The array can be made non - decreasing with the given operation
Driver code
Function to find maximum element among ( N - 1 ) elements other than a [ i ] for each i from 1 to N
To store prefix max element
To store suffix max element
Find the maximum element in the array other than a [ i ]
Driver code
Function to return the kth number from the required sequence
Count of odd integers in the sequence
kth number is even
It is odd
Driver code
Function to find k such that | a - k | = | b - k |
If ( a + b ) is even
Driver code
Function that returns true if it is possible to make the permutation increasing by swapping any two numbers
To count misplaced elements
Count all misplaced elements
If possible
Driver code
Function to return the number of positive integers less than or equal to N that have odd number of digits
Driver code
Function to return the count of N - digit palindrome numbers
Driver code
Function to return the maximum LCM among all the pairs ( i , j ) of first n natural numbers
Driver code
Function to return the sum of the nth row elements of the given triangle
Driver code
Function to return the count of edges in an n - level perfect binary tree
Driver code
Function to return the number of cells in the nth order figure of the given type
Driver code
Function to return the sum of the numbers in the nth parenthesis
Driver code
Function to return the count of n - digit natural hexadecimal numbers
Driver code
Function to print the largest n - digit even and odd numbers in octal number system
Append '7' ( N - 1 ) times
Append '6' for an even number
Append '7' for an odd number
Driver code
Function to return the nth term of the required sequence
Driver code
Function that returns true if the given four integers are in proportion
Array will consist of only four integers
Sort the array
Find the product of extremes and means
If the products are equal
Driver code
Function to return the missing element
Find the sum of the array elements
The numerator and the denominator of the equation
If not divisible then X is not an integer it is a floating ponumber
Return X
Driver code
Function to return the factorial of n
Function to return the count of n - digit numbers with all distinct digits
Driver code
Python3 implementation of the approach
Function to return the required count
Driver code
Python3 implementation of the approach
Function to return the previous fibonacci number
Driver code
Function to find the quadratic equation whose roots are a and b
Driver code
Python3 implementation of the approach
Function to return the smallest n - digit number which is a perfect fourth power
Driver code
Function to return the count of 0 s in an n - level hexagon
Driver code
Function to return the value of nCk
Function to return the factorial of n
Function that returns true if ch is a vowel
Function to return the number of words possible
To store the count of vowels and consonanats in the given string
If current character is a vowel
Find the total possible words
Driver code
Utility function to print the elements of the array
Function to generate and print the required array
For every element of the array
To store the count of elements on the left that the current element divides
Print the generated array
Driver code
Function to find two composite numbers which when added give sum as n
Only 8 and 10 can be represented as the sum of two composite integers
If n is even
If n is odd
Driver code
Function to return the count of possible numbers
Driver code
Python3 implementation of the approach
Function to return the next fibonacci number
Driver code
Function to find sum of numbers at Lth level in Pascals Triangle
Driver Code
Function to find product of all elements in all subsets
Driver Code
Function to find nth odd fibonacci number
Driver Code
Function to print the pair ( n , r ) such that nPr is maximum possible
There should be atleast 2 elements
Findex the largest 2 elements
Driver code
Function to return the required sum
Find the sum of the array elements
Every element appears 2 ^ ( n - 1 ) times
Driver code
Python3 code for printing the Triangle Pattern using last term N
Function to demonstrate printing pattern
number of spaces
character to be printed
outer loop to handle number of rows n in this case
inner loop to handle number spaces values changing acc . to requirement
decrementing k after each loop
inner loop to handle number of columns values changing acc . to outer loop
printing stars
ending line after each row
Function to find the max height or the number of lines in the triangle pattern
Driver Code
Function to return the number of distinct ways to represent n as the sum of two integers
Driver code
Function to find the number of ways
Calculate the number of 1 ' s ▁ and ▁ 0' s
Considering the 4 cases
Driver code
Python3 implementation of the approach
Function to return the highest power of 2 less than or equal to n
Function to return the smallest power of 2 greater than or equal to n
Function that returns the minimum absolute difference between n and any power of 2
Driver code
Function to return the maximum possible integer that can be obtained from the given integer after performing the given operations
For every digit
Digits greater than or equal to 5 need not to be changed as changing them will lead to a smaller number
The resulting integer cannot have leading zero
Driver code
Python3 program to Find the Ratio of number of Elements in two Arrays from their individual and combined Average
function to find the ratio of number of array elements
calculating GCD of them
make neumarator and denominator coprime
Driver Code
Python3 program to find the Maximum distance between two 1 's in Binary representation of N
Compute the binary representation
if N is a power of 2 then return - 1
else find the distance between the first position of 1 and last position of 1
Driver code
Function that returns true if it is possible to move from ( 0 , 0 ) to ( x , y ) in exactly k moves
Minimum moves required
If possible
Driver code
Python3 implementation of the approach
Function that returns true if n is a Factorion
fact [ i ] will store i !
A copy of the given integer
To store the sum of factorials of the digits of n
Get the last digit
Add the factorial of the current digit to the sum
Remove the last digit
Driver code
Python3 implementation of the approach
Function that returns true if it is possible to arrange the bits of n in alternate fashion
To store the count of 1 s in the binary representation of n
If the number set bits and the number of unset bits is equal
Driver code
Python3 implementation of the approach
Function to update the frequency array such that freq [ i ] stores the frequency of digit i in n
While there are digits left to process
Update the frequency of the current digit
Remove the last digit
Function that returns true if a and b are anagarams of each other
To store the frequencies of the digits in a and b
Update the frequency of the digits in a
Update the frequency of the digits in b
Match the frequencies of the common digits
If frequency differs for any digit then the numbers are not anagrams of each other
Driver code
Function to find the permutation of the first N natural numbers such that the sum of ( i % Pi ) is maximum possible and return the maximum sum
Driver code
Function call
Function that returns true if the number formed by the last digits of all the elements is divisible by 10
Last digit of the last element
Number formed will be divisible by 10
Driver code
Function to return the gcd of a and b
Function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c
Calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c
Driver code
Function to return the required array
Store the power of 2
while n is greater than 0
if there is 1 in binary representation
Divide n by 2 Multiply p2 by 2
Driver code
Get the answer
Printing the array
Python3 implementation of the above approach
Function to generate the index of the glass containing the ball
Change the index
Change the index
Print the index
Driver Code
Storing all the shuffle operation
Returns factorial of n
Returns nCr for the given values of r and n
Map to store the frequencies of each elements
Loop to store the frequencies of elements in the map
Using nCR formula to calculate the number of subsequences of a given length
Driver Code
Function calling
Function to return the sum of the elements of all possible pairs from the array
To store the required sum
For every element of the array
It appears ( 2 * n ) times
Driver code
Function to return the minimum required sum
To store the required sum
Sort the array in descending order
The indices which give 0 or 1 as the remainder when divided by 4 will be the maximum two elements of the group
Driver code
function to return the count of the valid triplets
Driver Code
function calling
Counts the number of triplets for a given value of b
Count all triples in which a = i
Smallest value j such that i * j > B2
Count all ( i , B2 , x ) such that x >= j
count all ( x , B2 , y ) such that x >= j this counts all such triples in which a >= j
As all triples with a >= j have been counted reduce A to j - 1.
Counts the number of triples that satisfy the given constraints
GetCount of triples in which b = i
Driver Code
Function calling
Python3 implementation of the approach
Function to return the summation of the given harmonic series
To store the summation
Floor of sqrt ( n )
Summation of floor ( n / i )
From the formula
Driver code
Function to return the count of distinct remainders that can be obtained when n is divided by every element from the range [ 1 , n ]
If n is even
If n is odd
Driver code
Function to return the count of unset bits in the binary representation of all the numbers from 1 to n
To store the count of unset bits
For every integer from the range [ 1 , n ]
A copy of the current integer
Count of unset bits in the current integer
If current bit is unset
Driver code
Function that returns true if a simple graph exists
Keep performing the operations until one of the stopping condition is met
Sort the list in non - decreasing order
Check if all the elements are equal to 0
Store the first element in a variable and delete it from the list
Check if enough elements are present in the list
Subtract first element from next v elements
Check if negative element is encountered after subtraction
Driver code
Function to return the count of subarrays with negative product
Replace current element with 1 if it is positive else replace it with - 1 instead
Take product with previous element to form the prefix product
Count positive and negative elements in the prefix product array
Return the required count of subarrays
Driver code
Function to return the sum of the first n natural numbers
Function to return the repeated sum
Perform the operation exactly k times
Update n with the sum of first n natural numbers
Driver code
Python3 program to find the difference between the sum of the cubes of the first N natural numbers and the sum of the first N natural number
Sum of first n natural numbers
Find the required difference
Driver Code
Function that returns true if all the digits of n divide the sum of the digits of n
Store a copy of the original number
Find the sum of the digits of n
Restore the original value
Check if all the digits divide the calculated sum
If current digit doesn 't  divide the sum
Driver code
Python implementation of above approach
Converting integer to string
Initialising sum to 0
Traversing through the string
Converting character to int
Comparing number and sum Traversing again
Check if any digit is not dividing the sum
Return false
If any value is not returned then all the digits are dividing the sum SO return true
Driver Code
passing this number to get result function
Python3 implementation of the approach
Function to calculate least prime factor of each number
If it is a prime number
For all multiples which are not visited yet .
Function to find the value of Mobius function for all the numbers from 1 to n
To store the values of Mobius function
If number is one
If number has a squared prime factor
Multiply - 1 with the previous number
Driver code
Function to find least prime factor
Function to find mobius function
Python3 implementation of the approach
Function to return the minimum element from the range [ prev , MAX ] such that it differs in at most 1 digit with cur
To start with the value we have achieved in the last step
Store the value with which the current will be compared
Current value
There are at most 4 digits
If the current digit differs in both the numbers
Eliminate last digits in both the numbers
If the number of different digits is at most 1
If we can 't find any number for which  the number of change is less than or  equal to 1 then return -1
Function to get the non - decreasing list
Creating a vector for the updated list
Let 's assume that it is possible to  make the list non-decreasing
Element of the original array
Can 't make the list non-decreasing
If possible then print the list
Driver code
Python3 implementation of the approach
Function to find maximum fruits Can buy from given values of x , y , z .
Items of type 1 that can be bought
Update the coins
Items of type 2 that can be bought
Update the coins
Items of type 3 that can be bought
Update the coins
Items of type 4 that can be bought To buy a type 4 item , a coin of each type is required
Total items that can be bought
Driver code
Function to return the highest power of p that divides n
Function to return the count of times p appears in the prime factors of the elements from the range [ l , r ]
To store the required count
For every element of the range
Add the highest power of p that divides i
Driver code
Function to return the count of times p appears in the prime factors of the elements from the range [ l , r ]
To store the required count
Number of values in the range [ 0 , r ] that are divisible by val
Number of values in the range [ 0 , l - 1 ] that are divisible by val
Increment the power of the val
( a - b ) is the count of numbers in the range [ l , r ] that are divisible by val
No values that are divisible by val thus exiting from the loop
Driver Code
Function that returns true if str is Topsy Turvy
For every character of the string
If the current digit cannot form a valid digit when turned upside - down
Driver code
Function to return the count of all valid subsequences
To store the count of elements which are divisible by k
If current element is divisible by k then increment the count
Total ( 2 ^ n - 1 ) non - empty subsequences are possible with n element
Driver code
Python3 implementation of the approach
Function to return the count of numbers below N whose sum of prime factors is K
To store the sum of prime factors for all the numbers
If i is prime
Add i to all the numbers which are divisible by i
To store the count of required numbers
Return the required count
Driver code
Python3 implementation of the approach
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .
Function to return the smallest prime number with d digits
check if prime
Function to return the largest prime number with d digits
check if prime
Driver code
Perform queries
Function to print the required matrix
Print k for the left diagonal elements
Print 0 for the rest
Driver code
Function that returns true if the subsets are possible
If n <= 3 then it is not possible to divide the elements in three subsets satisfying the given conditions
Sum of all the elements in the range [ 1 , n ]
If the sum is divisible by 3 then it is possible
Driver code
Function to return the Nth number of the modified Fibonacci series where A and B are the first two terms
To store the current element which is the sum of previous two elements of the series
This loop will terminate when the Nth element is found
Return the Nth element
Driver code
Function to check the type of the array
If the first two and the last two elements of the array are in increasing order
If the first two and the last two elements of the array are in decreasing order
If the first two elements of the array are in increasing order and the last two elements of the array are in decreasing order
If the first two elements of the array are in decreasing order and the last two elements of the array are in increasing order
Driver code
Python3 implementation of the approach
Function to calculate Indian Standard Time
Separate integer part
Separate float part and return ceil value
Driver code
Number of hours ( 1 - 24 )
Rotations in degrees
Function that returns true if it is possible to divide the grid satisfying the given conditions
To store the sum of all the cells of the given parts
If the sum is equal to the total number of cells in the given grid
Driver code
Function to return the minimum steps required
To store the count of 0 s , positive and negative numbers
To store the ans
If array element is equal to 0
If array element is a negative number
Extra cost needed to make it - 1
If array element is a positive number
Extra cost needed to make it 1
Now the array will have - 1 , 0 and 1 only
As count of negative is even so we will change all 0 to 1 total cost here will be count of 0 s
If there are zeroes present in the array
Change one zero to - 1 and rest of them to 1 Total cost here will be count of '0
If there are no zeros in the array
As no 0 s are available so we have to change one - 1 to 1 which will cost 2 to change - 1 to 1
Driver code
Function to return the sum of digits of n
Add the last digit to the sum
Remove last digit
Return the sum of digits
Function to print the first n numbers whose sum of digits is 10
First number of the series is 19
If the sum of digits of the current number is equal to 10
Print the number
Add 9 to the previous number
Driver code
Function to return the required sum
Number of element between 1 to n divisible by m
Array to store the last digit of elements in a cycle
Storing and adding last digit of cycle
Number of elements present in last cycle
Sum of k / 10 cycle
Adding value of digits of last cycle to the answer
Driver Code
input n and m
Function to find number of Subsequences with Even and Odd Sum
Counting number of odds
Even count
Total Subsequences is ( 2 ^ n - 1 ) For NumberOfEvenSubsequences subtract NumberOfOddSubsequences from total
Driver code
Calling the function
Python3 implementation of the approach
Function that returns True if n is prime else returns False
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to return the smallest prime number greater than N
Base case
Loop continuously until isPrime returns True for a number greater than n
Driver code
Return the number is Flavious Number or not
index i starts from 2 because at 1 st iteration every 2 nd element was remove and keep going for k - th iteration
removing the elements which are already removed at kth iteration
Driver Code
Function to return the nth XOR Fibonacci number
Driver code
Recursive function to return the gcd of a and b
Everything divides 0
Function to print the number of flips for both the sand timers
Driver code
Function to find the arcsin ( x )
The power to which ' x ' is raised
Numerator value
Denominator value
Driver code
Function that will calculate the price
Calculate the number of items we can get for free
Calculate the number of items we will have to pay the price for
Calculate the price
Driver code
Calling function
Python3 implementation of the approach
Modulo exponentiation function
Function to calculate ( x ^ y ) % p in O ( log ( y ) )
Driver Code
Evaluating ( ( 3 ^ n - 2 ^ ( n + 1 ) + 1 ) / 2 ) % p
From Fermatss little theorem a ^ - 1 ? a ^ ( m - 2 ) ( mod m )
Function to return the rightmost non - zero digit in the multiplication of the array elements
To store the count of times 5 can divide the array elements
Divide the array elements by 5 as much as possible
increase count of 5
Divide the array elements by 2 as much as possible
If c5 is more than the multiplier should be taken as 5
Driver code
Function to find the remainder
Get the last digit
Get the first digit
Compute the remainder
Driver code
Function to return the percentage increase in the volume of the cuboid
Driver code
Function to count the occurrences of the digit D in N
Loop to find the digits of N
check if the digit is D
return the count of the occurrences of D in N
Driver code
Function to find the number of factors
print the number of factors
Driver code
initialize the factors position
Function to return the optimal strategy
Removing matchsticks in blocks of five
Driver code
Function to find the smallest positive number which can not be represented by given digits
Storing the count of 0 digit or store the value at 0 th index
Calculates the min value in the array starting from 1 st index and also store its index .
If its value at 0 th index is less than min value than either 10 , 100 , 1000 ... can 't be expressed
If its value is greater than min value then iterate the loop upto first min value index and simply print its index value .
Driver code
Value of N is always 10 as we take digit from 0 to 9
Calling function
implementation of the approach
Function to return the count of digits in num
Function to return the sum of first n digits of num
Remove the unnecessary digits
Function to return the sum of the last n digits of num
If the average can 't be calculated without  using the same digit more than once
Sum of the last l digits of n
Sum of the first k digits of n ( totalDigits - k ) must be removed from the end of the number to get the remaining k digits from the beginning
Return the average
Driver code
Python3 program to find Wythoff array
Function to find the n , k term of Wythoff array
tau = ( sqrt ( 5 ) + 1 ) / 2
Already_stored
T ( n , - 1 ) = n - 1.
T ( n , 0 ) = floor ( n * tau ) .
T ( n , k ) = T ( n , k - 1 ) + T ( n , k - 2 ) for k >= 1.
Store
Return the ans
Function to find first n terms of Wythoff array by traversing in anti - diagonal
Map to store the Wythoff array
Anti diagonal
Driver code
Function call
Function to return the sum of numbers which are in the ration a : b and after adding x to both the numbers the new ratio becomes c : d
Driver code
Python3 code for printing the Triangle of numbers arising from Gilbreath 's conjecture
Check whether the number is prime or not
Set the 0 th row of the matrix with c primes from 0 , 0 to 0 , c - 1
Find the n , k term of matrix of Gilbreath 's conjecture
recursively find
store the ans
Print first n terms of Gilbreath sequence successive absolute differences of primes read by antidiagonals upwards .
map to store the matrix and hash to check if the element is present or not
set the primes of first row
print the Gilbreath number
increase the count
anti diagonal upwards
Driver code
Function to print the roots of the quadratic equation when a + b + c = 0
Driver code
Function to find the longest
Marks the starting of odd number as sequence and alternatively changes
Finding the longest odd / even sequence
Find odd number
Find even number
Length of the longest even / odd sequence
Find odd number
Find even number
Answer is maximum of both odd / even or even / odd subsequence
Driver Code
Function to return the Nambiar number of the given number
If there is no digit to choose
Choose the first digit
Chosen digit 's parity
To store the sum of the consecutive digits starting from the chosen digit
While there are digits to choose
Update the sum
If the parity differs
Return the current sum concatenated with the Numbiar number for the rest of the String
Driver code
Python 3 program to find depreciation of the value initial value , rate and time are given
Function to return the depreciation of value
Driver Code
Iterative Function to calculate ( x ^ y ) in O ( log y )
res = 1 Initialize result
If y is odd , multiply x with the result
n must be even now y = y >> 1 y = y / 2 x = x * x Change x to x ^ 2
Function to find nth fermat number
2 to the power i
2 to the power 2 ^ i
Function to find first n Fermat numbers
Calculate 2 ^ 2 ^ i
Driver code
Function call
Function to find euler totient number
Consider all prime factors of n and subtract their multiples from result
Check if p is a prime factor .
If yes , then update n and result
If n has a prime factor greater than sqrt ( n ) ( There can be at - most one such prime factor )
Function to find first n highly totient numbers
Count of Highly totient numbers and value of count of phi of previous numbers
Store all the values of phi ( x ) upto 10 ^ 5 with frequencies
If count is greater than count of previous element
Display the number
Store the value of phi
Driver code
Function call
Python3 implementation of the approach
Function to find the Speed of train
Driver code
calling Function
Function to maximum value of division of two numbers in an array
Traverse through the array
Return the required answer
Driver code
Python3 program to find Ramanujan numbers
FUnction to return a vector of primes
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it . numbers which are multiple of p and are less than p ^ 2 are already been marked .
Print all prime numbers
Function to find number of primes less than or equal to x
Binary search to find out number of primes less than or equal to x
Function to find the nth ramanujan prime
For n >= 1 , a ( n ) < 4 * n * log ( 4 n )
We start from upperbound and find where pi ( i ) - pi ( i / 2 ) < n the previous number being the nth ramanujan prime
Function to find first n Ramanujan numbers
Get the prime numbers
Driver code
Python3 implementation of the approach
Function that returns true if the array contains a valid quadruplet pair
We can always find a valid quadruplet pair for array size greater than MAX
For smaller size arrays , perform brute force
Driver code
Function to returns factorial of n
Function to find nCr
Function to find the number of words of X vowels and Y consonants can be formed from M vowels and N consonants
Driver code
Function call
function to return the factorial of a number
function to return the Sum of the series
Driver code
Function to check if a number is prime or not
Function to find whether elements are prime or not
Traverse in the given range
Check if a number is prime or not
Function to print the prime numbers in the first half and second half of an array
Driver Code
Function call
Function to find the elements which do not change the mean on removal
To store the Sum of the array elements
To store the initial mean
to store the count of required elements
Iterate over the array
Finding the new mean
If the new mean equals to the initial mean
Driver code
Python implementation of the approach
Function to return the maximum xor for a subset of size j from the given array
If the subset is complete then return the xor value of the selected elements
Return if already calculated for some mask and j at the i 'th index
Initialize answer to 0
If we can still include elements in our subset include the i 'th element
Exclude the i 'th element  ans store the max of both operations
Driver code
Python3 program to possible prime number
Function to check if a number is prime or not
Function to find possible prime number
Find a possible prime number
Last condition
Driver code
Function call
Python3 implementation of the approach
Function to return the time taken per hour for stoppage
Driver code
Function to remove a number from the array without changing its arithmetic mean
Find sum of all elements
If mean is an integer
Check if mean is present in the array or not
Driver code
Function to find factorial of a number
To store factorial of a number
Return the factorial of a number
Function to find tan ( x ) upto n terms
To store value of the expansion
This loops here calculate Bernoulli number which is further used to get the coefficient in the expansion of tan x
Print the value of expansion
Driver code
Function call
Function to find gcd of two numbers
Function to calculate minimum numbers to be inserted to make equal differences between two consecutive elements
Check if there is only one element in the array then answer will be 0
Calculate difference between first and second element of array
If there is only two elements in the array then gcd of differences of consecutive elements of array will be equal to difference of first and second element of the array
Loop to calculate the gcd of the differences between consecutive elements of the array
Loop to calculate the elements to be inserted
Return the answer
Driver code
Python3 program to check if N is Fermat pseudoprime to the base A or not
Function to check if the given number is composite
Check if there is any divisor of n less than sqrt ( n )
Effectively calculate ( x ^ y ) modulo mod
Initialize result
If power is odd , then update the answer
Square the number and reduce the power to its half
Return the result
Function to check for Fermat Pseudoprime
If it is composite and satisfy Fermat criterion
Else return 0
Driver code
Function call
Function to the largest and smallest digit of a number
Find the largest digit
Find the smallest digit
Driver code
Function call
Function to find factorial of a number
Function to find nCr
Function to find probability of first bag to contain N items such that M items are distributed among X bags
Driver code
Function call
Function to return the factorial of n
Function to return the count of numbers possible
Driver code
Function to return the factorial of a number
Function to return the value of nPr
Function to return the total number of M length words which have at least a single character repeated more than once
Driver code
Function to find the minimum and the maximum possible length of the third side of the given triangle
Not a valid triangle
Not a valid triangle
Driver code
Function to return the integer formed by taking the rightmost set bit in n
n & ( n - 1 ) unsets the first set bit from the right in n
Take xor with the original number The position of the ' changed ▁ bit ' will be set and rest will be unset
Driver code
Function to calculate the value of ncr effectively
Initializing the result
Multiply and divide simultaneously to avoid overflow
Return the answer
Function to return the number of sequences of length N such that their product is M
Hashmap to store the prime factors of M
Calculate the prime factors of M
If i divides M it means it is a factor Divide M by i till it could be divided to store the exponent
Increase the exponent count
If the number is a prime number greater than sqrt ( M )
Initializing the ans
Multiply the answer for every prime factor
it . second represents the exponent of every prime factor
Return the result
Driver code
Function to return the number of hours for the second person to move ahead
Time taken to equalize
Time taken to move ahead
Driver code
Function to return the value of ncr effectively
Initialize the answer
Divide simultaneously by i to avoid overflow
Function to return the number of ways to distribute N identical objects in R distinct objects
Driver code
Function to return the value of ncr effectively
Initialize the answer
Divide simultaneously by i to avoid overflow
Function to return the number of ways to distribute N identical objects in R distinct objects
Driver code
Function call
Python3 implementation of the approach
Function that returns true if n is a perfect cube
Takes the sqrt of the number
Checks if it is a perfect cube number
Function to return the smallest perfect cube from the array
Stores the minimum of all the perfect cubes from the array
Traverse all elements in the array
Store the minimum if current element is a perfect cube
Driver code
Function to find two vertices of an isosceles triangle in which there is rectangle with opposite side ( 0 , 0 ) and ( x , y )
Required value ;
print x1 and y1
print x2 and y3
Driver code
Function call
Function to find a subarray whose sum is a multiple of N
Prefix sum array to store cumulative sum
Single state dynamic programming relation for prefix sum array
Generating all sub - arrays
If the sum of the sub - array [ i : j ] is a multiple of N
If the function reaches here it means there are no subarrays with sum as a multiple of N
Driver code
Function to check is there exists a subarray whose sum is a multiple of N
Prefix sum array to store cumulative sum
Single state dynamic programming relation for prefix sum array
Modulo class vector
Storing the index value in the modulo class vector
If there exists a sub - array with starting index equal to zero
In this class , there are more than two presums % N Hence difference of any two subarrays would be a multiple of N
0 based indexing
Driver code
Function to count the total bits
Iterate and find the number of set bits
Right shift the number by 1
Function to find the nearest number
Count the total number of bits
To get the position
If the last set bit is at odd position then answer will always be a number with the left bit set
Set all the even bits which are possible
If the number still is less than N
Return the number by setting the next even set bit
If we have reached this position it means tempsum > n hence turn off even bits to get the first possible number
Turn off the bit
If it gets lower than N then set it and return that number
Driver code
Function to return the count of n - bit numbers whose 0 th and nth bits are set
Driver code
Function to return the generated by appending "10" n - 1 times
Initialising as empty
Function to return the decimal equivaLent of the given binary string
Initializing base value to 1 i . e 2 ^ 0
Function that calls the constructString and binarytodecimal and returns the answer
Driver code
Node for linked list
Function to insert a node at the head of the linked list
Function to return the bitonic of the given linked list
If list is empty
If list contains only a single node
Invalid bitonic sequence
If current node is the bitonic point
Get to the next node in the list
Nodes must be in descending starting from here
Out of order node
Get to the next node in the list
Driver code
Function to remove minimum elements to make the given array good
To store count of each subsequence
Increase the count of subsequence [ 0 ]
If Previous element subsequence count is greater than zero then increment subsequence count of current element and decrement subsequence count of the previous element .
Return the required answer
Driver code
Function call
Function to return the nth mosaic number
Iterate from 2 to the number
If i is the factor of n
Find the count where i ^ count is a factor of n
Divide the number by i
Increase the count
Multiply the answer with count and i
Return the answer
Function to print first N Mosaic numbers
Driver code
Python3 implementation of the approach
Function to find the count of the required nodes
Height of the complete binary tree with n nodes
If X > height then no node can be present at that level
Corner case
Maximum total nodes that are possible in complete binary tree with height h
Nodes at the last level
To store the count of nodes x dist away from root
To store the count of nodes x dist away from leaf
If X = h then prnodes at last level else nodes at Xth level
2 ^ X
Number of left leaf nodes at ( h - 1 ) th level observe that if nodes are not present at last level then there are a / 2 leaf nodes at ( h - 1 ) th level
If X = h then prleaf nodes at the last h level + leaf nodes at ( h - 1 ) th level
First calculate nodes for leaves present at height h
Then calculate nodes for leaves present at height h - 1
Add both the resuls
Driver code
Number of ways of writing n as a sum of 4 squares
sum of odd and even factor
iterate from 1 to the number
if i is the factor of n
if factor is even
if factor is odd
n / i is also a factor
if factor is even
if factor is odd
if n is odd
if n is even
Driver code
Function to return the nth mosaic number
Iterate from 2 to the number
If i is the factor of n
Find the count where i ^ count is a factor of n
Divide the number by i
Increase the count
Multiply the answer with count and i
Return the answer
Driver code
Function to return the total count of ways
Find ( n - 1 ) factorial
Return ( n - 1 ) ! * 2 !
Driver code
Function to find the maximum number of elements divisible by 3
To store frequency of each number
Store modulo value
Store frequency
Add numbers with zero modulo to answer
Find minimum of elements with modulo frequency one and zero
Add k to the answer
Remove them from frequency
Add numbers possible with remaining frequency
Return the required answer
Driver code
Function call
Function to return the count of set bits in n
Function to return the count of required pairs
To store the count
Sum of set bits in both the integers
If current pair satisfies the given condition
Driver code
Python implementation of the approach
Function to return the count of set bits in n
Function to return the count of required pairs
To store the count
Frequency array
If current pair satisfies the given condition
( arr [ i ] , arr [ i ] ) cannot be a valid pair
Driver code
Python3 implementation of the approach
Function to print the Upper Hessenberg matrix of order n
If element is below sub - diagonal then pr0
Pra random digit for every non - zero element
Driver code
Python3 implementation of the approach
Function to print the Upper Hessenberg matrix of order n
If element is below sub - diagonal then pr0
Pra random digit for every non - zero element
Driver code
Function to return the count of prime factors of n
Initialise array with 0
Stored i value into an array
Every non - zero value at a [ i ] denotes that i is a factor of n
Find if i is prime
If i is a factor of n and i is not prime
Driver code
Function that returns true if n is a Mersenne number
Function to return the sum of all the Mersenne numbers from the given array
To store the required sum
If current element is a Mersenne number
Driver code
Function to return the sum of all the proper factors of n
f is the factor of n
Function to return the required sum
To store the sum
If current element is non - zero and equal to the sum of proper factors of itself
Driver code
Function that return true if A and B have same number of digits
Both must be 0 now if they had same lengths
Driver code
Python3 implementation of the approach
Function to generate and print the required matrix
Replace the '.
Toggle number
For each row , change the starting number
Driver code
To store the count of negative integers
Check if zero exists
Function to find the count of negative integers and check if zero exists in the array
Function that returns true if array elements can be made positive by changing signs exactly k times
Driver code
Pre - processing
Perform queries
Sum of XOR of all K length sub - array of an array
If the length of the array is less than k
Array that will store xor values of subarray from 1 to i
Traverse through the array
If i is greater than zero , store xor of all the elements from 0 to i
If it is the first element
If i is greater than k
Xor of values from 0 to i
Now to find subarray of length k that ends at i , xor sum with x [ i - k ]
Add the xor of elements from i - k + 1 to i
Return the resultant sum ;
Driver code
Function to return the reverse of n
Function that returns true if n is a palindrome
Function to return the count of digits of n
Function to return the count of digits in all the palindromic numbers of arr [ ]
If arr [ i ] is a one digit number or it is a palindrome
Driver code
Function to reverse a number n
Function to check if a number n is palindrome
If n is equal to the reverse of n it is a palindrome
Function to calculate sum of all array elements which are palindrome
summation of all palindrome numbers present in array
Driver Code
Python3 implementation of the approach
Function to update prime [ ] such prime [ i ] stores the count of prime numbers <= i
Initialization
0 and 1 are not primes
Mark composite numbers as false and prime numbers as true
Update prime [ ] such that prime [ i ] will store the count of all the prime numbers <= i
Function to return the absolute difference between the number of primes and the number of composite numbers in the range [ l , r ]
Total elements in the range
Count of primes in the range [ l , r ]
Count of composite numbers in the range [ l , r ]
Return the sbsolute difference
Driver code
Perform queries
Function that returns true if given Prufer sequence is valid
Iterate in the Prufer sequence
If out of range
Driver code
Recursive Function global variables p and f
Termination condition
Recursive call
Update the power of x
Factorial
Driver code
Python3 program to check if each element of the given array is a product of exactly K prime factors
initialise the global sieve array
Function to generate Sieve
NOTE : k value is necessarily more than 1 hence , 0 , 1 and any prime number cannot be represented as product of two or more prime numbers
Function to check if each number of array satisfies the given condition
Driver Code
first construct the sieve
Iterative function to compute modular power
Initialize result
Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now
Helper function that multiplies 2 matrices F and M of size 2 * 2 , and puts the multiplication result back to F [ ] [ ]
Helper function that calculates F [ ] [ ] raise to the power n and puts the result in F [ ] [ ] Note that this function is designed only for fib ( ) and won 't work as general power function
Function that returns nth Fibonacci number
Driver Code
Function to count the number of ways to divide an array into two halves with same sum
if length of array is 1 answer will be 0 as we have to split it into two non - empty halves
variables to store total sum , current sum and count
finding total sum
checking if sum equals total_sum / 2
Driver Code
Pyhton 3 implementation of the approach
Function to pre - calculate all the powers of 2 upto MAX
Function to return the count of set bits in x
To store the count of set bits
Function to add num to the answer by setting all bit positions as 0 which are also 0 in K
Bit i is 0 in K
Function to find and print N distinct numbers whose bitwise OR is K
Choosing K itself as one number
Find the count of set bits in K
Impossible to get N distinct integers
Add i to the answer after setting all the bits as 0 which are 0 in K
If N distinct numbers are generated
Print the generated numbers
Driver code
Pre - calculate all the powers of 2
Function to return the count of all possible values for x such that ( A % x ) = B
Case 1
Case 2
Case 3
Find the number of divisors of x which are greater than b
Driver code
Function to return the intersection set of s1 and s2
Find the intersection of the two sets
Function to return the Jaccard index of two sets
Sizes of both the sets
Get the intersection set
Size of the intersection set
Calculate the Jaccard index using the formula
Return the Jaccard index
Function to return the Jaccard distance
Calculate the Jaccard distance using the formula
Return the Jaccard distance
Driver code
Elements of the 1 st set
Elements of the 2 nd set
Print the Jaccard index and Jaccard distance
Function to return the sum of all the powers of k from the range [ 1 , n ]
To store the sum of the series
While current power of k <= n
Add current power to the sum
Next power of k
Return the sum of the series
Find to return the sum of the elements from the range [ 1 , n ] excluding those which are powers of k
Sum of all the powers of k from [ 1 , n ]
Sum of all the elements from [ 1 , n ]
Return the required sum
Driver code
Python3 implementation of the approach
Function to return the maximum number of people that can be killed
Loop will break when the ith person cannot be killed
Driver code
Python3 implementation of the approach
Function to return the maximum number of people that can be killed
Storing the sum beforehand so that it can be used in each query
lower_bound returns an iterator pointing to the first element greater than or equal to your val
Previous value
Returns the index in array upto which killing is possible with strength P
Driver code
helper function which returns the sum of series ( 1 ^ 2 + 2 ^ 2 + ... + n ^ 2 )
maxPeople function which returns appropriate value using Binary Search in O ( logn )
Set the lower and higher values
calculate the mid using low and high
compare value with n
return the ans
Function that returns the index which will be the last to become zero after performing given operation
Initialize the result
Finding the ceil value of each index
Finding the index with maximum ceil value
Driver code
Python3 implementation of the approach
Function to solve queries of the maximum xor value between the nodes in a given level L of a perfect binary tree and a given value X
Initialize result
Initialize array to store bits
Initialize a copy of X and size of array
Storing the bits of X in the array a [ ]
Filling the array b [ ]
Initializing variable which gives maximum xor
Getting the maximum xor value
Return the result
Driver code
Perform queries
Function to return the count of required index pairs
To store the required count
Array to store the left elements upto which current element is maximum
Iterating through the whole permutation except first and last element
If current element can be maximum in a subsegment
Current maximum
Iterating for smaller values then current maximum on left of it
Storing left borders of the current maximum
Iterating for smaller values then current maximum on right of it
Condition satisfies
Return count of subsegments
Driver Code
Function that returns true if n can be represented as the sum of exactly k distinct positive integers
If n can be represented as 1 + 2 + 3 + ... + ( k - 1 ) + ( k + x )
Driver code
Function to check whether the product of integers of the range [ a , b ] is positive , negative or zero
If both a and b are positive then the product will be positive
If a is negative and b is positive then the product will be zero
If both a and b are negative then we have to find the count of integers in the range
Total integers in the range
If n is even then the resultant product is positive
If n is odd then the resultant product is negative
Driver code
Function to return the minimum possible value of | K - X | where X is the bitwise AND of the elements of some sub - array
Check all possible sub - arrays
Find the overall minimum
Driver code
Function to return the required rate percentage
Driver code
Python 3 implementation of the approach
Function to return the required prime number from the array
Find maximum value in the array
USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array " prime [ 0 . . n ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
Remaining part of SIEVE
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
To store the maximum prime number
If current element is prime then update the maximum prime
Return the maximum prime number from the array
Driver code
Python3 implementation of the approach
Function to return the smallest number which on dividing with any element from the range [ 2 , N ] leaves a remainder of 1
Find the LCM of the elements from the range [ 2 , N ]
Return the required number
Driver code
Function to return the maximum number of edges possible in a Bipartite graph with N vertices
Driver code
Function that returns true if the robot is safe
If current move is " L " then increase the counter of coll
If value of coll is equal to column then break
If current move is " R " then increase the counter of colr
If value of colr is equal to column then break
If current move is " U " then increase the counter of rowu
If value of rowu is equal to row then break
If current move is " D " then increase the counter of rowd
If value of rowd is equal to row then break
If robot is within the bounds of the grid
Unsafe
Driver code
Function to print the valid indices in the array
Function to find sub - arrays from two different arrays with equal sum
Map to store the indices in A and B which produce the given difference
Find the smallest j such that b [ j ] >= a [ i ]
Difference encountered for the second time
b [ j ] - a [ i ] = b [ idx . second ] - a [ idx . first ] b [ j ] - b [ idx . second ] = a [ i ] = a [ idx . first ] So sub - arrays are a [ idx . first + 1. . . i ] and b [ idx . second + 1. . . j ]
Store the indices for difference in the map
Utility function to calculate the cumulative sum of the array
Driver code
Function to update the arrays with their cumulative sum
Swap is true as a and b are swapped during function call
Function to find permutation ( p ) of first N natural numbers such that there are exactly K elements of permutation such that GCD ( p [ i ] , i ) > 1
First place all the numbers in their respective places
Modify for first n - k integers
In first index place n - k
Print the permutation
Driver code
Function to count number of 1 's in the array after performing N moves
If index is multiple of move number
arr [ j - 1 ] = 1 Convert 0 to 1
arr [ j - 1 ] = 0 Convert 1 to 0
Count number of 1 's
count += 1 count number of 1 's
Driver Code
Initialize all elements to 0
Function that will find out the valid position
find sum of all the elements
adding K to the element and check whether it is greater than sum of all other elements
Driver code
Function to count the unique numbers
If the number has already been visited
Insert the number to the set
First step
Second step remove trailing zeros
Recur again for the new number
Driver code
Function to return the element from the array which has the maximum set bits
To store the required element and the maximum set bits so far
Count of set bits in the current element
Update the max
Driver code
Python 3 implementation of the approach
Function to return the count of valid pairs
Frequency array Twice the original size to hold negative elements as well
Update the frequency of each of the array element
If say x = - 1000 then we will place the frequency of - 1000 at ( - 1000 + 1000 = 0 ) a [ 0 ] index
To store the count of valid pairs
Remember we will check only for ( even , even ) or ( odd , odd ) pairs of indexes as the average of two consecutive elements is a floating point number
Driver code
Function to return the smallest sum of 2 n - digit numbers
Function to return the largest sum of 2 n - digit numbers
Driver code
Function that returns the number of pairs
Count of odd and even numbers
Traverse in the first array and count the number of odd and evene numbers in them
Traverse in the second array and count the number of odd and evene numbers in them
Count the number of pairs
Return the number of pairs
Driver code
Function to find the leftmost unset bit in a number .
Function that perform the step
Find the leftmost unset bit
If the number has no bit unset , it means it is in form 2 ^ x - 1
Count the steps
Iterate till number is of form 2 ^ x - 1
At even step increase by 1
Odd step xor with any 2 ^ m - 1
Find the leftmost unset bit
2 ^ m - 1
Perform the step
Increase the steps
Driver code
Function to find out the number of that vertices
Another person can 't stand on  vertex on which 2 children stand.
calculating minimum jumps from each vertex .
Calculate Sum of jumps .
Driver code
Calling function
Function to return the factorial of n
Function to return the sum of factorials of the array elements
To store the required sum
Add factorial of all the elements
Driver code
To store the required answer
To store the graph
Function to add edges
Dfs function
When there is difference in colors
For all it 's child nodes
Here zero is for parent of node 1
Adding edges in the graph
Dfs call
Required answer
Function to return the highest power of 2 which divides the given binary number
To store the highest required power of 2
Counting number of consecutive zeros from the end in the given binary string
Driver code
Python3 implementation of the approach
Function to return n ! % p
res = 1 Initialize result
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Returns n ^ ( - 1 ) mod p
Returns nCr % p using Fermat 's little theorem.
Base case
Fifactorial array so that we can find afactorial of r , n and n - r
Function to return the number of ways to arrange K different objects taking N objects at a time
Drivers Code
Function call
Function that returns the maximum product of digits among numbers less than or equal to N
Driver code
Python3 program to implement the above approach
Function to check if a number from every row can be selected such that xor of the numbers is greater than zero
Find the xor of first column for every row
If Xorr is 0
Traverse in the matrix
Check is atleast 2 distinct elements
Driver code
Function to find the sum of first N odd numbers
Function to find the sum of first N even numbers
Function to overall find the sum of series
Initial odd numbers
Initial even numbers
First power of 2
Check for parity for odd / even
Counts the sum
Get the minimum out of remaining num or power of 2
Decrease that much numbers from num
If the segment has odd numbers
Summate the odd numbers By exclusion
Increase number of odd numbers
If the segment has even numbers
Summate the even numbers By exclusion
Increase number of even numbers
Next set of numbers
Change parity for odd / even
Driver code
Function to return the nth term of the given series
Driver code
Function to check if they are identical
Driver Code
Python 3 implementation of the approach
To store the smallest prime factor for every number
Initialize map to store count of prime factors
Function to calculate SPF ( Smallest Prime Factor ) for every number till MAXN
Marking smallest prime factor for every number to be itself
Separately marking spf for every even number as 2
Checking if i is prime
Marking SPF for all numbers divisible by i
Marking spf [ j ] if it is not previously marked
Function to factorize using spf and store in cnt
Function to return n ! % p
Initialize result
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
Initialize result
Update x if it is >= p
If y is odd , multiply x with result
y must be even now y = y / 2
Function that returns n ^ ( - 1 ) mod p
Function that returns nCr % p using Fermat 's little theorem
Base case
Fill factorial array so that we can find all factorial of r , n and n - r
Function to return the count the number of possible arrays mod P of length K such that the product of all elements of that array is equal to the product of all elements of the given array of length N
Initialize result
Call sieve to get spf
Factorize arr [ i ] , count and store its factors in cnt
Driver code
Python3 implementation of the above approach
Initialize an array to store factorial values
Function to calculate and store X ! values
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 ; y = y / 2
Function that return modular inverse of x under modulo p
Function that returns the count of different number possible by using all the digits its frequency times
Preprocess factorial values
Initialize the result and sum of aint the frequencies
Calculate the sum of frequencies
Putting res equal to x !
Multiplying res with modular inverse of X0 ! , X1 ! , . . , X9 !
Driver Code
Function to print the equation of the required line
Driver code
Python3 implementation of the approach
Function that prints the original matrix
Iterate in the row
Iterate in the column
If previously existed an element
Driver code
Function to return the x % of n
Function to return the total loss
To store the total loss
Original price of the item
The price at which the item will be sold
The discounted price of the item
Loss incurred
Driver code
Total items
Function to return the maximum absolute difference between any two elements of the array
To store the minimum and the maximum elements from the array
Driver code
Python3 implementation of the approach
Function to return the maximum sub - array sum
Initialized
Traverse in the array
Increase the sum
If sub - array sum is more than the previous
If sum is negative
Function that returns the maximum sub - array sum after removing an element from the same sub - array
Maximum sub - array sum using Kadane 's Algorithm
Re - apply Kadane 's with minor changes
Increase the sum
If sub - array sum is greater than the previous
If elements are 0 , no removal
If elements are more , then store the minimum value in the sub - array obtained till now
If sum is negative
Re - initialize everything
Driver code
Function that returns true if n is an Osiris number
3 rd digit
2 nd digit
1 st digit
Check the required condition
Driver code
Function that returns true if n is a Dudeney number
If n is not a perfect cube
Last digit
Update the digit sum
Remove the last digit
If cube root of n is not equal to the sum of its digits
Driver code
Function to return the number of positive area triangles
To store the count of total triangles
To store the count of pairs of sticks with equal lengths
Back - traverse and count the number of triangles
Count the number of pairs
If we have one remaining stick and we have a pair
Count 1 triangle
Reduce one pair
Count the remaining triangles that can be formed
Driver code
Function to return the smallest n digit number which is a multiple of 5
Driver code
Function to return the HCF of x and y
Minimum of the two numbers
If both the numbers are divisible by the minimum of these two then the HCF is equal to the minimum
Highest number between 2 and minimum / 2 which can divide both the numbers is the required HCF
If both the numbers are divisible by i
1 divides every number
Driver code
Python 3 implementation of the approach
Function that returns true if n is prime
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function that return true if the product of the first n natural numbers is divisible by the sum of first n natural numbers
Driver code
Python 3 implementation of the approach
Function to return the maximum sum of a cocktail glass
If no cocktail glass is possible
Initialize max_sum with the mini
Here loop runs ( R - 2 ) * ( C - 2 ) times considering different top left cells of cocktail glasses
Considering mat [ i ] [ j ] as the top left cell of the cocktail glass
Update the max_sum
Driver code
Function to return the count of sub - arrays in the given permutation of first n natural numbers such that their median is m
If element is less than m
If element greater than m
If m is found
Count the answer
Increment Sum
Driver code
Function to return the count of odd days
Count of years divisible by 100 and 400
Every 4 th year is a leap year
Every 100 th year is divisible by 4 but is not a leap year
Every 400 th year is divisible by 100 but is a leap year
Total number of extra days
modulo ( 7 ) for final answer
Number of days
Function to find the area of the biggest ellipse
the radius cannot be negative
area of the ellipse
Driver code
Python3 implementation of the approach
Function to return the minimum operations required to make all array elements equal
To store the frequency of all the array elements
Traverse through array elements and update frequencies
To store the maximum frequency of an element from the array
Traverse through the map and find the maximum frequency for any element
Return the minimum operations required
Driver code
Function to return the count of total binary prefix which are divisible by x
Initialize with zero
Convert all prefixes to decimal
If number is divisible by x then increase count
Driver code
Function to return the count of consecutive elements in the array which are equal
If consecutive elements are same
Driver code
Python3 program to reduce a fraction x / y to its lowest form
Function to reduce a fraction to its lowest form
Driver Code
Python3 implementation of the approach
Function to generate all the sub - strings
Length of the string
Generate all sub - strings
Count the occurrence of every sub - string
Compute the Binomial Coefficient
Calculate value of Binomial Coefficient in bottom up manner
Base Cases
Calculate value using previously stored values
Function to return the result for a query
Iterate for every unique sub - string
Count the combinations
Driver code
Get all the sub - strings Store the occurrence of all the sub - strings
Pre - computation
Queries
Perform queries
Function to return the no . of years
Driver code
Function that returns true if n divides the sum of the factorials of its digits
To store factorials of digits
To store sum of the factorials of the digits
Store copy of the given number
Store sum of the factorials of the digits
If it is divisible
Driver code
Python3 implementation of the approach
Function to find the longest subsequence having LCM less than or equal to K
Map to store unique elements and their frequencies
Update the frequencies
Array to store the count of numbers whom 1 <= X <= K is a multiple of
Check every unique element
Find all its multiples <= K
Store its frequency
Obtain the number having maximum count
Condition to check if answer doesn 't exist
Print the answer
Driver code
Python 3 implementation of the approach
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Function to count the number of binary strings of length N having only 0 ' s ▁ and ▁ 1' s
Driver code
Function to return the most significant bit
Function to return the required XOR
Finding the MSB
Value of the current bit to be added
To store the final answer
Loop for case 1
Edge case when both the integers lie in the same segment of continuous 1 s
To store whether parity of count is odd
Updating the answer if parity is odd
Updating the number to be added
Case 2
Driver code
Final answer
Function to return the required XOR
If n is a multiple of 4
If n % 4 gives remainder 1
If n % 4 gives remainder 2
Driver code
Function to find the number of integers from 1 to n which contains 0 ' s ▁ and ▁ 1' s only
If number is greater than n
otherwise add count this number and call two functions
Driver code
Python 3 implementation of the approach
Function to count number of times prime P divide factorial N
Lengendre Formula
Function to find count number of times all prime P divide summation
Formula for summation of square after removing n and constant 6
Loop to traverse over all prime P which divide summation
If Number itself is a Prime Number
Driver Code
Python3 program to count number of non increasing subarrays
Initialize result
Initialize length of current non - increasing subarray
Traverse through the array
If arr [ i + 1 ] is less than or equal to arr [ i ] , then increment length
Else Update count and reset length
If last length is more than 1
Driver code
Python3 implementation of the approach
First term of the sequence is always 0
Fill remaining terms using recursive formula
If arr [ i - 1 ] - i is negative or already exists
Function that returns minimum changes required
Set to store first n Recaman numbers
Generate and store first n Recaman numbers
Insert first n Recaman numbers to set
If current element of the array is present in the set
Return the remaining number of elements in the set
Driver code
Function that returns true if the product of all the array elements is a perfect square
Update the frequencies of all the array elements
If frequency of some element in the array is odd
Driver code
Function to print the good permutation of first N natural numbers
If n is odd
Otherwise
Driver code
Python 3 implementation of the above approach
Function to find the minimum number of steps
If n exceeds M
If N reaches the target
The minimum of both the states will be the answer
Driver code
Function to return the minimum operations required
Counting all 2 s
Counting all 3 s
If q contained only 2 and 3 as the only prime factors then it must be 1 now
Driver code
Function to return the nth Fibonacci number
Function to return the required sum
To store the sum
Calculate the sum
Driver Code
Program to find the biggest sphere which is inscribed within a cube which in turn inscribed within a right circular cone
Function to find the radius of the sphere
height and radius cannot be negative
radius of the sphere
Driver code
Function to find the number of ways to divide N into four parts such that a = c and b = d
Driver code
Function to count sub - arrays whose product is divisible by K
Calculate the product of the current sub - array
If product of the current sub - array is divisible by K
Driver code
Python3 implementation of the approach
Segment tree implemented as an array
Function to build the segment tree
Function to query product of sub - array [ l . . r ] in O ( log n ) time
Function to count sub - arrays whose product is divisible by K
Query segment tree to find product % k of the sub - array [ i . . j ]
Driver code
Build the segment tree
Function to print the pair that gives maximum nCr
This gives the value of N in nCr
Case 1 : When N is odd
Case 2 : When N is even
Driver code
Function to return the count of good permutations
For m = 0 , ans is 1
If k is greater than 1
If k is greater than 2
If k is greater than 3
Driver code
Function to return a ^ n
Function to return count of integers that satisfy n % phi ( n ) = 0
Driver Code
Function to find the number of pairs from the set of natural numbers up to N whose sum is divisible by K
Declaring a Hash to store count
Storing the count of integers with a specific remainder in Hash array
Check if K is even
Count of pairs when both integers are divisible by K
Count of pairs when one remainder is R and other remainder is K - R
Count of pairs when both the remainders are K / 2
Count of pairs when both integers are divisible by K
Count of pairs when one remainder is R and other remainder is K - R
Driver code
Print the count of pairs
Python3 implementation of the above approach
To check if a number is prime or not
Sieve of Eratosthenes function to find all prime numbers
Function to return the sum of all truncatable primes below n
To store the required sum
Check every number below n
Check from right to left
If number is not prime at any stage
Check from left to right
If number is not prime at any stage
If flag is still true
Return the required sum
Driver code
Python3 implementation of the approach
Function to print the largest and the smallest n - digit perfect squares
Smallest n - digit perfect square
Largest n - digit perfect square
Driver code
Python 3 implementation of the approach
Function to return the maximum trace possible for a sub - matrix of the given matrix
Calculate the trace for each of the sub - matrix with top left corner at cell ( r , s )
Update the maximum trace
Return the maximum trace
Driver code
Python 3 implementation of the approach
Function that returns true if matrix1 can be converted to matrix2 with the given operation
Traverse all the diagonals starting at first column
Traverse in diagonal
Store the diagonal elements
Move up
Sort the elements
Check if they are same
Traverse all the diagonals starting at last row
Traverse in the diagonal
Store diagonal elements
Sort all elements
Check for same
If every element matches
Driver code
Function to print the last digit of product a * b
Driver code
Python 3 implementation of the above approach
Function to print the smallest and largest palindrome with N digits
Driver Code
Function to prsum of 2 numbers without propagating carry
Reverse a
Reverse b
Generate sum Since length of both a and b are same , take any one of them .
Extract digits from a and b and add
If sum is single digit
If sum is not single digit reverse sum
Extract digits from sum and append to result
Driver code
Function to return the number of digits before the decimal in a / b
Absolute value of a / b
If result is 0
Count number of digits in the result
Return the required count of digits
Driver code
Python3 implementation of the approach
Function to return the number of digits before the decimal in a / b
Return the required count of digits
Driver code
Function to return smallest even number with n digits
Driver Code
Function to print the largest n - digit even and odd numbers
Driver code
Function to return the length of the longest sub - array whose product of elements is 0
Driver code
Function to return smallest even number with n digits
Driver Code
Python3 implementation of the approach
Function to return the maximum profit
min ( x , y ) * n / lcm ( a , b )
Driver code
Python 3 implementation of the approach
Function to return the sum of the given series
Driver code
Function to return the kth odd element from the array
Traverse the array
If current element is odd
If kth odd element is found
Total odd elements in the array are < k
Driver code
Function to find the last five digits of a five digit number raised to power five
Driver code
Function to return a ^ n % mod
Compute sum of max ( A ) - min ( A ) for all subsets
Sort the array .
Maxs = 2 ^ i - 1
Mins = 2 ^ ( n - 1 - i ) - 1
Driver code
Function to return the count of such numbers
If n is odd
Driver code
Function to return the required count
To store the count of numbers
Every power of 2 contains only 1 set bit
Driver code
Function to find the K - th minimum element from an array concatenated M times
sort the elements in ascending order
return K 'th Min element  present at K-1 index
Driver Code
Function to return the required sum
Total odd numbers from 1 to n
Sum of first n odd numbers
Driver code
Function to return the count of numbers from 1 to N which are not divisible by any number in the range [ 2 , 10 ]
Driver code
Function to find max count of primes
if n is even n / 2 is required answer if n is odd floor ( n / 2 ) = ( int ) ( n / 2 ) is required answer
Driver code
Function to return sum
Driver code
Python3 implementation of the above approach
Function to find the minimum divisor
Iterate for all factors of N
Check for gcd > 1
Check for gcd > 1
If gcd is m itself
Drivers code
Function to generate a fixed number
Finding nth term
Driver code
Function to return the kth smallest element from the range [ 1 , n ] after removing all the odd elements
Driver code
Function that return true if n can be represented as the sum of powers of 2 without using 2 ^ 0
Driver code
Function to find the element
Value variable for storing the total value
Declaring maximum value as zero
If array contains on element
Storing the maximum value in temp variable
Adding the adjacent difference modulus values of removed element . Removing adjacent difference modulus value after removing element
Returning total value - maximum value
Drivers code
Function to return the time for which the two policemen can communicate
time = distance / speed
Driver code
Python implementation of the approach
Function to return the number of teams
To store both roots of the equation
sqrt ( b ^ 2 - 4 ac )
First root ( - b + sqrt ( b ^ 2 - 4 ac ) ) / 2 a
Second root ( - b - sqrt ( b ^ 2 - 4 ac ) ) / 2 a
Return the positive root
Driver code
Function to return the greatest number not gtreater than B that can be formed with the digits of A
To store size of A
To store the required answer
Traverse from leftmost digit and place a smaller digit for every position .
Keep all digits in A
To avoid leading zeros
For all possible values at ith position from largest value to smallest
Take largest possible digit
Keep duplicate of string a
Remove the taken digit from s2
Sort all the remaining digits of s2
Add s2 to current s1
If s1 is less than B then it can be included in the answer . Note that int ( ) converts a string to integer
change A to s2
Return the required answer
Driver Code
Function to return the required Sum
Generate lucas number and keep on adding them
Driver code
Function to return the count of required numbers
Count of numbers in range which are divisible by 6
Driver code
Function to find the sum of minimum of all subsequence
Driver code
Python 3 program to find the number of trailing zeroes in base B representation of N !
To find the power of a prime p in factorial N
calculating floor ( n / r ) and adding to the count
increasing the power of p from 1 to 2 to 3 and so on
returns all the prime factors of k
vector to store all the prime factors along with their number of occurrence in factorization of B
Returns largest power of B that divides N !
calculating minimum power of all the prime factors of B
Driver code
Function to count total numbers divisible by x but not y in range 1 to N
Check if Number is divisible by x but not Y if yes , Increment count
Driver Code
Function to return the required position
Driver code
Function to return the parity of a number
Function to return the minimum number of operations required
Operation needs to be performed
Parity of previous element
Parity of next element
Update parity of current element to be other than the parities of the previous and the next number
Driver Code
Function to find required prefix - count for each row from right to left
Function to find the count of submatrices with OR value 1
Array to store prefix count of zeros from right to left for boolean array
Variable to store the count of submatrices with OR value 0
Loop to evaluate each column of the prefix matrix uniquely . For each index of a column we will try to determine the number of sub - matrices starting from that index and has all 1 s
First part of pair will be the value of inserted element . Second part will be the count of the number of elements pushed before with a greater value
Variable to store the number of submatrices with all 0 s
Return the final answer
Driver Code
Function to find to required XOR value
Nested loop to find the number of sub - matrix each index belongs to
Number of ways to choose from top - left elements
Number of ways to choose from bottom - right elements
Driver code
Python3 program to find the N - th number whose digital root is X
Function to find the digital root of a number
Function to find the Nth number with digital root as X
Counter variable to keep the count of valid numbers
Find digital root
Check if is required answer or not
Print the answer if you have found it and breakout of the loop
Driver Code
Function to find the N - th number with digital root as X
Driver Code
Function to return the sum
If current number gives R as the remainder on dividing by K
Update the sum
Return the sum
Driver code
Function to return the length of the longest required sub - sequence
Find the maximum element from the array
Insert all lucas numbers below max to the set a and b are first two elements of the Lucas sequence
If current element is a Lucas number , increment count
Return the count
Driver code
Function to return the count of valid values of X
Iterate through all possible sum of digits of X
Get current value of X for sum of digits i
Find sum of digits of cr
If cr is a valid choice for X
Return the count
Driver code
Function to check if it is possible to split the array in two halfs with equal Sum
Calculate Sum of elements and count of 1 's
If total Sum is odd , return False
If Sum of each half is even , return True
If Sum of each half is even but there is atleast one 1
Driver Code
Function to Make a tree with n vertices , d as it 's diameter and degree of each vertex is at most k
If diameter > n - 1 impossible to build tree
To store the degree of each vertex
To store the edge between vertices
To store maximum distance among all the paths from a vertex
Make diameter of tree equals to d
Add an edge between them
Store maximum distance of each vertex from other vertices
For next ( n - d - 1 ) edges
If the vertex already has the degree k
If not possible
Increase the degree of vertices
Add an edge between them
Store the maximum distance of this vertex from other vertices
Prall the edges of the built tree
Driver code
Python3 program to find the sum of all possible submatrices of a given Matrix
Function to find the sum of all possible submatrices of a given Matrix
Variable to store the required sum
Nested loop to find the number of submatrices , each number belongs to
Number of ways to choose from top - left elements
Number of ways to choose from bottom - right elements
Driver Code
Function to return the maximum bitwise AND possible among all the possible pairs
Maximum among all ( i , j ) pairs
Driver code
Function to check
Check the result by processing the first & last element and size
Driver code
Function to find minimum removals
Count odd numbers
If the counter is odd return 0 otherwise return 1
Driver Code
Python3 implementation of the approach
Function that returns true if x is a perfect square
Find floating po value of square root of x
If square root is an eger
Function that returns true if n is a sunny number
If ( n + 1 ) is a perfect square
Driver code
Function to return the minimum number of operations required
To store modulos values
If it 's size greater than k  it needed to be decreased
If it 's size is less than k  it needed to be increased
Driver code
Python3 implementation of the approach
To check if a number is prime or not
To store possible numbers
Function to return all prime numbers
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .
Function to count all possible prime numbers that can be expressed as the sum of two consecutive primes and one
All possible prime numbers below N
Driver code
Python3 program to find Sum of bitwise AND of all subarrays
Function to find the Sum of bitwise AND of all subarrays
variable to store the final Sum
multiplier
variable to check if counting is on
variable to store the length of the subarrays
loop to find the contiguous segments
updating the multiplier
returning the Sum
Driver Code
Function that returns true if it is possible to move from source to the destination with the given moves
Driver code
Function to return the number of pairs ( x , y ) such that x < y
To store the number of valid pairs
If a valid pair is found
Return the count of valid pairs
Driver code
Function that returns true if number n is a composite number
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function that returns true if the eventual digit sum of number nm is 1
Loop till the sum is not single digit number
Intitialize the sum as zero
Find the sum of digits
If sum is eventually 1
Function to print the required numbers from the given range
If i is one of the required numbers
Driver code
Function to calculate leaf nodes in n - ary tree
Driver Code
Python3 implementation of the approach
Function to calculate factorial of a number mod 1000000007
Factorial of i = factorial of ( i - 1 ) * i
Taking mod along with calculation .
Function for modular exponentiation
If p is odd
If p is even
Function to return the count of required permutations
Calculating multiplicative modular inverse for x ! and multiplying with ans
Calculating multiplicative modular inverse for y ! and multiplying with ans
Driver Code
Pre - compute factorials
Function to find the values of X and Y
base condition
required answer
Driver Code
Consider a structure to keep each pair of x and y together
Function to calculate the inverse interpolation
Initialize final x
Calculate each term of the given formula
Add term to final result
Driver Code
Sample dataset of 4 points Here we find the value of x when y = 4.5
Size of dataset
Sample y value
Using the Inverse Interpolation function to find the value of x when y = 4.5
Function to return the count of possible triplets
Insert all the points in a set
If the mid point exists in the set
Return the count of valid triplets
Driver code
Function to return the concentration of the resultant mixture
Driver code
Python 3 implementation of the approach
Function that returns true if the num contains a and b digits only
Modular Exponentiation
Function to return the modular inverse of x modulo MOD
Function to return the required count of numbers
Generating factorials of all numbers
Generating inverse of factorials modulo MOD of all numbers
Keeping a as largest number
Iterate over all possible values of s and if it is a valid S then proceed further
Check for invalid cases in the equation
Find answer using combinatorics
Add this result to final answer
Driver Code
Function to count the perfect squares
Driver code
Function to return the number of squares that the king can reach in the given number of moves
Calculate initial and final coordinates
Since chessboard is of size 8 X8 so if any coordinate is less than 1 or greater than 8 make it 1 or 8.
Calculate total positions
Driver code
Function to find the M - th number whosesum till one digit is N
Driver Code
Function to check if it is possible or not
Store all triangular numbers up to N in a Set
Check if a pair exists
Driver Code
Function to find the number of digits in the integer
Function to find the absolute difference
Store the last x digits in last
Count the no . of digits in N
Remove the digits except the first x
Store the first x digits in first
Return the absolute difference between the first and last
Driver code
Function to print the required sequence
arr [ ] will hold the sequence sum variable will store the sum of the sequence
If sum of the sequence is odd
Print the sequence
Driver Code
Return the number of odd numbers in the range [ L , R ]
if either R or L is odd
Driver code
Function to return the minimum cost
Driver code
Function to return the minimum number of given operation required to make all the array elements equal
Check if all the elements from kth index to last are equal
Finding the 1 st element which is not equal to the kth element
Driver code
Function to return the value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * ... * 1 ]
Driver Code
Function to print the required sequence
Driver Code
Python 3 Program to find LCM of Fib ( a ) and Fib ( b )
Create an array for memoization
Function to return the n 'th Fibonacci number using table f[].
Base cases
If fib ( n ) is already computed
Applying recursive formula Note value n & 1 is 1 if n is odd , else 0.
Function to return gcd of a and b
Function to return the LCM of Fib ( a ) and Fib ( a )
Driver code
Function to check if XOR of all numbers in range [ L , R ] is Even or Odd
Count odd Numbers in range [ L , R ]
Check if count of odd Numbers is even or odd
Driver Code
Function to return the number of trailing zeros
To store the number of 2 s and 5 s
If we get a factor 2 then we have i number of 2 s because the power of the number is raised to i
If we get a factor 5 then we have i number of 5 s because the power of the number is raised to i
Take the minimum of them
Driver code
Python3 implementation of the above approach
Function to generate Sieve of Eratosthenes
If prime [ p ] is not changed , then it is a prime
Add the prime numbers to the array b
Function to return the gcd of a and b
Function to print the required sequence of integers
Including the primes in a series of primes which will be later multiplied
This is done to mark a product as existing
Maximum number of primes that we consider
For different interval
For different starting index of jump
For storing the numbers
Checking for occurrence of a product . Also checking for the same prime occurring consecutively
Including the primes in a series of primes which will be later multiplied
Driver Code
Python3 program for the above approach
Function for Sieve of Eratosthenes
Function to print the required sequence
Store only the required primes
Base condition
First integer in the list
Second integer in the list
Third integer in the list
Generate ( N - 1 ) th term
Generate Nth term
Modify first term
Print the sequence
Driver code
Python3 program for implementing Mid - Point Ellipse Drawing Algorithm
Initial decision parameter of region 1
For region 1
Print points based on 4 - way symmetry
Checking and updating value of decision parameter based on algorithm
Decision parameter of region 2
Plotting points of region 2
printing points based on 4 - way symmetry
Checking and updating parameter value based on algorithm
To draw a ellipse of major and minor radius 15 , 10 centred at ( 50 , 50 )
Function to check if the given number is divisible by sum of its digits
Find sum of digits
check if sum of digits divides n
Driver Code
Python implementation of above approach
Converting integer to string
Initialising sum to 0
Traversing through the string
Converting character to int
Comparing number and sum
Driver Code
passing this number to get result function
Python3 tp implement above approach
Function to get final value of X and Y
Following the sequence but by replacing minus with modulo
Step 1
Step 2
Step 3
Otherwise terminate
Get the initial X and Y values
Find the result
Python 3 implementation of the approach
Function to return the digit product of n
Function to print all multiplicative primes <= n
Create a boolean array " prime [ 0 . . n + 1 ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
If i is prime and its digit sum is also prime i . e . i is a multiplicative prime
Driver code
Python3 implementation of the above approacdh
Function to calculate gcd of two number
Function to check if two numbers are coprime or not
two numbers are coprime if their gcd is 1
Function to find largest integer less than or equal to N / 2 and coprime with N
Check one by one a numbers less than or equal to N / 2
Driver code
Function to find largest integer less than or equal to N / 2 and is coprime with N
Handle the case for N = 6
Driver code
Python 3 implementation of the approach
Function to print first n safe primes
Initialize all entries of integer array as 1. A value in prime [ i ] will finally be 0 if i is Not a prime , else 1
0 and 1 are not primes
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
If i is prime
2 p + 1
If 2 p + 1 is also a prime then set prime [ 2 p + 1 ] = 2
i is a safe prime
Driver code
Function to find powers of 2 , 3 and 7 in x
To keep count of each divisor
To store the result
Count powers of 2 in x
Count powers of 3 in x
Count powers of 7 in x
Remaining number which is not divisible by 2 , 3 or 7
Function to return the minimum number of given operations required to make a and b equal
a = x * 2 ^ a1 * 3 ^ a2 * 7 ^ a3 va [ 0 ] = a1 va [ 1 ] = a2 va [ 2 ] = a3 va [ 3 ] = x
Similarly for b
If a and b cannot be made equal with the given operation . Note that va [ 3 ] and vb [ 3 ] contain remaining numbers after repeated divisions with 2 , 3 and 7. If remaining numbers are not same then we cannot make them equal .
Minimum number of operations required
Driver code
Function to return the largest odd digit in n
If all digits are even then - 1 will be returned
Last digit from n
If current digit is odd and > maxOdd
Remove last digit
Return the maximum odd digit
Function to return the product of n with its largest odd digit
If there are no odd digits in n
Product of n with its largest odd digit
Driver code
Program to find if x is a perfect square .
Check if mid is perfect square
Mid is small -> go right to increase mid
Mid is large -> to left to decrease mid
Driver code
Function Call
function to prnumbers
Count the number of set bits
Not - possible condition
Stores the number
Get the set bits
Iterate till we get K elements
Get the topmost element
append the elements / 2 into priority queue
Prall elements
Driver Code
Python3 implementation of the approach
Euler totient Function
Function to return the required LCM sum
Summation of d * ETF ( d ) where d belongs to set of divisors of n
Driver code
Factorial of a number
Function to find c ( n , r )
Function to count permutations of string such that no two vowels are adjacent
Finding the frequencies of the characters
finding the no . of vowels and consonants in given word
finding places for the vowels
ways to fill consonants 6 ! / 2 !
ways to put vowels 7 C5 x 5 !
Driver code
Function to return the number of set bits in n
Function to return the count of required pairs
Set bits for first element of the pair
Set bits for second element of the pair
Set bits of the resultant number which is the XOR of both the elements of the pair
If the condition is satisfied
Increment the count
Return the total count
Driver code
Function to return gcd of a and b
Function to Return the number of elements of arr [ ] which can be derived from D by performing ( + A , - A , + B , - B )
find the gcd of A and B
counter stores the number of array elements which can be derived from D
arr [ i ] can be derived from D only if | arr [ i ] - D | is divisible by gcd of A and B
Driver Code
Function to return the sum of the first n terms of the given series
As described in the approach
Driver Code
Function to find the array elements using XOR of consecutive elements
array to store the original elements
first elements a i . e elements [ 0 ] = a
To get the next elements we have to calculate xor of previous elements with given xor of 2 consecutive elements . e . g . if a ^ b = k1 so to get b xor a both side . b = k1 ^ a
Printing the original array elements
Driver code
Python3 implementation of above approach
Function to find maximum GCD of N integers with product P
map to store prime factors of P
prime factorization of P
traverse all prime factors and multiply its 1 / N power to the result
Driver code
Function to return the sum of distinct digits of a number
Take last digit
If digit has not been used before
Set digit as used
Remove last digit
Function to check whether the sum of distinct digits of two numbers are equal
Driver code
Function that returns true if n is prime
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to return the count of valid pairs
If xor ( a [ i ] , a [ j ] ) is prime and unique
Driver code
Python program to find the sum of the elements of an array whose prime factors are present in the same array
Stores smallest prime factor for every number
Function to calculate SPF ( Smallest Prime Factor ) for every number till MAXN
Marking smallest prime factor for every number to be itself .
Separately marking spf for every even number as 2
If i is prime
Marking SPF for all numbers divisible by i
Marking spf [ j ] if it is not previously marked
Function to return the sum of the elements of an array whose prime factors are present in the same array
Function call to calculate smallest prime factors of all the numbers upto MAXN
Create map for each element
If smallest prime factor of num is present in array
Each factor of arr [ i ] is present in the array
Driver Code
Function call to print required answer
Python 3 program to find nth Hermite number
Utility function to calculate double factorial of a number
Function to return nth Hermite number
If n is even then return 0
If n is odd
Calculate double factorial of ( n - 1 ) and multiply it with 2 ^ ( n / 2 )
If n / 2 is odd then nth Hermite number will be negative
Return nth Hermite number
Driver Code
Print nth Hermite number
Python3 implementation of the approach
Vector to store powers greater than 3
Set to store perfect squares
Set to store powers other than perfect squares
Pushing squares
if the values is already a perfect square means present in the set
Run loop until some power of current number doesn 't exceed MAX
Pushing only odd powers as even power of a number can always be expressed as a perfect square which is already present in set squares
Inserting those sorted values of set into a vector
Precompute the powers
Calculate perfect squares in range using sqrtl function
Calculate upper value of R in vector using binary search
Calculate lower value of L in vector using binary search
Calculate perfect powers
Compute final answer
Driver Code
Function to return the required sum
If the unit digit is d
Driver code
Python3 program to split a number into three parts such than none of them is divisible by 3.
Print x = 1 , y = 1 and z = N - 2
Otherwise , print x = 1 , y = 2 and z = N - 3
Driver code
Python 3 program to find the minimum absolute difference between a number and its closest prime
Function to check if a number is prime or not
Function to find the minimum absolute difference between a number and its closest prime
Variables to store first prime above and below N
Finding first prime number greater than N
Finding first prime number less than N
Variables to store the differences
Driver code
Python3 implementation of the approach
Function that returns true if the the sum of all the perfect squares of the given array is divisible by x
If a [ i ] is a perfect square
Driver code
Python3 Program to find the largest divisor not divisible by any perfect square greater than 1
Function to find the largest divisor not divisible by any perfect square greater than 1
set to store divisors in descending order
If the number is divisible by i , then insert it
Vector to store perfect squares
Check for each divisor , if it is not divisible by any perfect square , simply return it as the answer .
Driver Code
Python3 program to find the number of Quadruples having maximum product
Returns the number of ways to select r objects out of available n choices
ncr = ( n * ( n - 1 ) * ( n - 2 ) * ... . . ... ( n - r + 1 ) ) / ( r * ( r - 1 ) * ... * 1 )
Returns the number of quadruples having maximum product
stores the frequency of each element
remaining_choices denotes the remaining elements to select inorder to form quadruple
traverse the elements of the map in reverse order
If Frequency of element < remaining choices , select all of these elements , else select only the number of elements required
Decrement remaining_choices acc to the number of the current elements selected
if the quadruple is formed stop the algorithm
Driver Code
Python3 program to find minimum and maximum no . of pairs
Driver code
Python 3 code for finding greater between the a ^ b and b ^ a
Function to find the greater value
Driver code
Python3 implementation of the approach
Function to return the GCD of given numbers
Recursive function to return ( x ^ n ) % m
Function to return the fraction modulo mod
( b ^ m - 2 ) % m
Final answer
Driver code
Python 3 program to find sum of n and it 's largest prime factor
Function to return the sum of n and it 's largest prime factor
Initialise maxPrime to - 1.
n must be odd at this point , thus skip the even numbers and iterate only odd numbers
This condition is to handle the case when n is a prime number greater than 2
finally return the sum .
Driver Code
Function to return the sum of the digits of n
Loop for each digit of the number
Function to return the greatest number less than n such that the sum of its digits is greater than the sum of the digits of n
Starting from n - 1
Check until 1
If i satisfies the given condition
If the condition is not satisfied
Driver code
Function to find the N - th term
initializing the 1 st number
loop from 2 nd term to nth term
if i is even , double the previous number
if i is odd , subtract 8 from previous number
Driver Code
Dimension of Array
Count of 1 s
Counting all neighbouring 1 s
Comparing the number of neighbouring 1 s with given ranges
Copying changes to the main matrix
Driver code
Function call to calculate the resultant matrix after ' K ' iterations .
Printing Result
Function that returns the required moves
Final move
Driver Code
Python3 implementation of the approach
Function to return an ArrayList containing all the perfect squares upto n
while current perfect square is less than or equal to n
Function to return the count of triplet ( a , b , c ) pairs such that a ^ 2 + b ^ 2 = c ^ 2 and 1 <= a <= b <= c <= n
List of perfect squares upto n ^ 2
Since , a ^ 2 + b ^ 2 = c ^ 2
If c < a or bSquare is not a perfect square
If triplet pair ( a , b , c ) satisfy the given condition
Driver code
Function to count Numbers with N digits which consists of odd number of 0 's
Driver code
Function to calculate determinant
Driver code
Python 3 implementation of the approach
Total elements in the range
If total elements are already divisible by k
Value that must be added to count in order to make it divisible by k
Driver Program to test above function
Function to return the sum of all natural numbers
Function to return sum of even numbers in range L and R
Driver Code
Function to check whether n is divisible by a number whose digits are either a or b
base condition
recursive call
Check for all numbers beginning with ' a ' or 'b
Driver Code
function to Find the minimum number of moves required to reach the destination by the king in a chess board
minimum number of steps
while the king is not in the same row or column as the destination
Go up
Go down
Go left
Go right
Driver code
Function to return an ArrayList containing all the perfect squares upto n
while current perfect square is less than or equal to n
Function to print the sum of maximum two elements from the array
Function to return the count of numbers that when added with n give a perfect square
temp > n is checked so that pairs ( x , y ) and ( y , x ) don 't get counted twice 
Function to count the pairs whose sum is a perfect square
Sum of the maximum two elements from the array
List of perfect squares upto max
Contains all the array elements
Add count of the elements that when added with arr [ i ] give a perfect square
Driver code
Function to find the element
sum is use to store sum of all elements of array
iterate over all elements
Driver Code
Function to return the sum of all natural numbers
Function to return the sum of all numbers in range L and R
Driver Code
check divisibleBy3
to store sum of Digit
traversing through each digit
summing up Digit
check if sumOfDigit is divisibleBy3
check divisibleBy25
if a single digit number
length of the number
taking the last two digit
checking if the lastTwo digit is divisibleBy25
Function to check divisibleBy75 or not
check if divisibleBy3 and divisibleBy25
Driver Code
divisible
if divisibleBy75
Function that will calculates the zeroes at the end
Driver code
Calling function
Python implementation of above approach
Calculate successive change of 1 st 2 change
Calculate successive change for rest of the value
Driver code
Calling function
Function to find the minimum numbers required to get to S
Driver Code
Python 3 program to find the sum of all multiples of A and B below N
Function to find sum of AP series
Number of terms
Function to find the sum of all multiples of A and B below N
Since , we need the sum of multiples less than N
common factors of A and B
Driver code
Python3 program to check if a prime number can be expressed as sum of two Prime Numbers
Function to check whether a number is prime or not
Function to check if a prime number can be expressed as sum of two Prime Numbers
if the number is prime , and number - 2 is also prime
Driver code
Function to return the total pairs of elements whose modulo yield K
set is used to avoid duplicate pairs
check which element is greater and proceed according to it
check if modulo is equal to K
return size of the set
Driver code
Python 3 program to find the length of the largest sub - array of an array every element of whose is a perfect square
function to return the length of the largest sub - array of an array every element of whose is a perfect square
if both a and b are equal then arr [ i ] is a perfect square
Driver code
Function to count pairs
variable to store count
Generate all possible pairs such that 1 <= x < y < n
Driver code
Function that returns the index of the left pointer
there 's only one element  in the array
initially both are at end
Driver code
Python3 program to find the position of the last removed element from the array
Function to find the original position of the element which will be removed last
take ceil of every number
Since position is index + 1
Driver code
Function to find value of given F ( n )
iterate over n
calculate result
return the result
Driver code
function to check if such element exists or not
storing frequency in dict
stores the sum
traverse the array and count the array element
Only possible if sum is even
if half sum is available
Driver code
Python 3 program to print all the numbers less than N which have at most 2 unique digits
Function to generate all possible numbers
If the number is less than n
If the number exceeds
Check if it is not the same number
Function to print all numbers
All combination of digits
Print all numbers
Driver code
This function finds all prime numbers upto 10 ^ 5
use sieve to find prime
If number is prime , then store it in prime list
Function to find the smallest prime missing
first of all find all prime
now store all number as index of freq arr so that we can improve searching
now check for each prime
Driver Code
find smallest prime which is not present
Function to find the number
Driver Code
Python3 implementation of the above approach
Using mod because the number of ways might be very large
ways is serving the same purpose as discussed
pairing up zero people requires one way .
map count stores count of s .
sort according to value
Iterating backwards .
Checking if current count is odd .
if current count = 5 , multiply ans by ways [ 4 ] .
left out person will be selected in current_count ways
left out person will pair with previous person in previous_count ways
if previous count is odd , then multiply answer by ways [ prev_count - 1 ] . since one has already been reserved , remaining will be even . reduce prev_count = 0 , since we don 't need it now.
if prev count is even , one will be reserved , therefore decrement by 1. In the next iteration , prev_count will become odd and it will be handled in the same way .
if current count is even , then simply multiply ways [ current_count ] to answer .
multiply answer by ways [ first__count ] since that is left out , after iterating the array .
Driver code
Function to calculate Profit or loss
Driver Code
Python3 program to find all good indices in the given array
Function to find all good indices in the given array
hash to store frequency of each element
Storing frequency of each element and calculating sum simultaneously
check if array is good after removing i - th index element
print good indices
Driver Code
Function to find number of pieces of circle after N cuts
Driver Code
Function to find sum of AP series
Number of terms
Function to find the sum of all multiples of 3 and 7 below N
Since , we need the sum of multiples less than N
Driver code
Below function checks whether product of digits at even places is divisible by sum of digits at odd places
if size is even
if size is odd
Driver code
Below function checks whether product of digits at even places is divisible by sum of digits at odd places
Converting integer to string
Traveersing the string
Driver code
Python 3 program to find GCD of a ^ n and b .
Returns GCD of a ^ n and b .
Driver code
Function to return the last destination
Driver Code
Function to find the smallest number greater than or equal to N that is divisible by k
Driver Code
Print the sum and product of digits that divides the number .
Fetching each digit of the number
Checking if digit is greater than 0 and can divides n .
Driver code
Function to find the largest number smaller than or equal to N that is divisible by k
Driver code
Function to check if any permutation of a number is divisible by 3 and is Palindromic
Hash array to store frequency of digits of n
traverse the digits of integer and store their frequency
Calculate the sum of digits simultaneously
Check if number is not divisible by 3
If more than one digits have odd frequency , palindromic permutation not possible
Driver Code
Python implementation of above approach
Function to return lcm of two numbers
Make a graph
Add edge
Count reachable nodes from every node .
Driver code
below function checks whether product of digits at even places is divisible by K
if position is even
Driver code
Function checks whether product of digits at even places is divisible by K
Converting integer to string
Traversing the string
Driver code
def to find factorial of a number
def to calculate p ( n , r )
def to find the number of permutations of n different things taken r at a time with k things grouped together
Driver code
Python3 program to illustrate greatest integer Function
Function to calculate the GIF value of a number
GIF is the floor of a number
Driver code
Returns factorial of a number
calculate c ( n , r )
Driver code
function that checks the divisibility of the sum of the digits at odd places of the given number
if position is odd
Driver code
Python3 implementation of the above approach
Converting integer to string
Traversing the string
Driver code
Python program to check if a triangle of positive area is possible with the given angles
Checking if the sum of three angles is 180 and none of the angles is zero
Checking if sum of any two angles is greater than equal to the third one
Driver Code
Python 3 program to maximize the value of x such that n ! % ( k ^ x ) = 0
Function to maximize the value of x such that n ! % ( k ^ x ) = 0
Find square root of k and add 1 to it
Run the loop from 2 to m and k should be greater than 1
optimize the value of k
Minimum store
Driver Code
Returns factorial of the number
Function to calculate ncr
Function to calculate the total possible ways
Driver code
Python 3 implementation of the approach
0 and 1 are not prime numbers
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
compute the answer
count of primes
product of the primes
traverse the array
if the number is a prime
increase the count
if it is the K 'th prime
Driver code
create the sieve
Function to return sum of first n odd numbers
Recursive function to return sum of greatest odd divisor of numbers in range [ 1 , n ]
Odd n
Even n
Function to return sum of greatest odd divisor of numbers in range [ a , b ]
Driver code
function to count length of binary expression of n
Driver code
Program to check if the given number is an Achilles Number
function to check if the number is powerful number
First divide the number repeatedly by 2
If only 2 ^ 1 divides n ( not higher powers ) , then return false
if n is not a power of 2 then this loop will execute repeat above process
Find highest power of " factor " that divides n
If only factor ^ 1 divides n ( not higher powers ) , then return false
n must be 1 now if it is not a prime number . Since prime numbers are not powerful , we return false if n is not 1.
Utility function to check if number is a perfect power or not
Function to check Achilles Number
Driver Code
Function to count numbers having odd number of divisors in range [ A , B ]
variable to odd divisor count
iterate from a to b and count their number of divisors
variable to divisor count
if count of divisor is odd then increase res by 1
Driver code
Python 3 program to find the largest factor of a number which is also a perfect square
Function to find the largest factor of a given number which is a perfect square
Initialise the answer to 1
Finding the prime factors till sqrt ( num )
Frequency of the prime factor in the factorisation initialised to 0
If the frequency is odd then multiply i frequency - 1 times to the answer
Else if it is even , multiply it frequency times
Driver Code
calculate Nth term of given series
Driver code
function to count all permutations
count of all permutations
count of permutations with leading zeros
Return the permutations without leading zeros
Driver code
Function to find the difference between the product of non - primes and the product of primes of an array .
Find maximum value in the array
USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array " prime [ 0 . . n ] " . A value in prime [ i ] will finally be false if i is Not a prime , else true .
Remaining part of SIEVE
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Store the product of primes in P1 and the product of non primes in P2
the number is prime
the number is non - prime
Return the absolute difference
Driver Code
Find the absolute difference
Function to find the maximum number of equal numbers in an array
to store sum of elements
if sum of numbers is not divisible by n
Driver Code
size of an array
function to count odd sum pair
if number is even
if number is odd
count of ordered pairs
function to count even sum pair
Driver code
Function to count the steps required
Start at 1
Initialize steps
If nxt is greater than cur
Now we are at a [ i ]
Driver code
Function to convert Hexadecimal to Binary Number
Driver code
Get the Hexadecimal number
Convert HexaDecimal to Binary
Function to check if x is power of 2
First x in the below expression is for the case when x is 0
Function to Count unordered pairs
is a number can be expressed as power of two
count total number of unordered pairs
Driver code
This function will return the factorial of a given number
This function will calculate nCr of given n and r
This function will Calculate number of ways
Driver code
function to Find values of a , in equation ( a + b ) <= n and a + b is divisible by x .
least possible which is divisible by x
run a loop to get required answer
increase value by x
answer is possible
Driver code
function call
Function to calculate product of digits between given indexes
Function to check if all sub - numbers have distinct Digit product
Length of number N
Digit array
set to maintain digit products
Finding all possible subarrays
Driver Code
Python3 code to print nth Ulam number
Array to store Ulam Number
function to compute ulam Number
Set to search specific Ulam number efficiently
push First 2 two term of the sequence in the array and set for further calculation
loop to generate Ulam number
traverse the array and check if i can be represented as sum of two distinct element of the array
Check if i - arr [ j ] exist in the array or not using set . If yes , Then i can be represented as sum of arr [ j ] + ( i - arr [ j ] )
if Count is greater than 2 break the loop
If count is 2 that means i can be represented as sum of two distinct terms of the sequence
i is ulam number
Driver Code
pre compute Ulam Number sequence
print nth Ulam number
Utility function to return Nth Hilbert Number
Driver code
Function to calculate nth kynea number
Firstly calculate 2 ^ n + 1
Now calculate ( 2 ^ n + 1 ) ^ 2
Now calculate ( ( 2 ^ n + 1 ) ^ 2 ) - 2
return nth Kynea number
Driver Code
print nth kynea number
Function to calculate nth kynea number
Calculate nth kynea number
Driver Code
print nth kynea number
Utility function to Check power of two
Function to check if the Given number is Proth number or not
check if k divides n or not
Check if n / k is power of 2 or not
update k to next odd number
If we reach here means there exists no value of K Such that k is odd number and n / k is a power of 2 greater than k
Get n
Check n for Proth Number
Function to find the unit ' s ▁ and ▁ ten ' s place digit
Let us write for cases when N is smaller than or equal to 10
We know following ( 1 ! + 2 ! + 3 ! + 4 ! ... + 10 ! ) % 100 = 13 ( N >= 10 )
Driver Code
function to check whether product of ' n ' numbers is even or odd
if a single even number is found , then final product will be an even number
product is an odd number
Driver Code
Function to calculate sum of squares of Fibonacci numbers
Initialize result
Add remaining terms
Driver Code
function for obtaining the value of f ( n ) mod 4
Find the remainder of n when divided by 4
If n is of the form 4 k or 4 k + 3
If n is of the form 4 k + 1 or 4 k + 2
Driver code
function to find minimum moves required to make the array in increasing order
to store answer
iterate over an array
non - increasing order
add moves to answer
increase the element
return required answer
Driver code
function to return sum of digits of a number
function to Check if a large number is divisible by 2 , 3 and 5 or not
Driver code
Function to check if k is a prime number or not
Corner case
Check from 2 to n - 1
Function to check if a number is not divisible by any number between 2 and K - 1
to check if the num is divisible by any numbers between 2 and k - 1
if not divisible by any number between 2 and k - 1 but divisible by k
Function to find count of numbers in range [ a , b ] with smallest factor as K
a number can be divisible only by k and not by any number less than k only if k is a prime
to check if a number has smallest factor as K
Driver code
Function to find the largest integer with the given set
find sum of all the digits look if any 0 is present or not
if 0 is not present , the resultant number won 't be divisible by 5
sort all the elements in a non - decreasing manner
if there is just one element 0
find the remainder of the sum of digits when divided by 3
there can a remainder as 1 or 2
traverse from the end of the digits
first element which has the same remainder , remove it
if there is no element which has a same remainder as y
subtract it by 3 ( could be one or two )
delete two minimal digits which has a remainder as y
print all the digits as a single integer
Driver code
initialize the number of set of digits
initialize all the set of digits in a vector
Python3 program to find the K - th smallest factor
Function to find the k 'th divisor
initialize vectors v1 and v2
store all the divisors in the two vectors accordingly
reverse the vector v2 to sort it in increasing order
if k is greater than the size of vectors then no divisor can be possible
else print the ( k - 1 ) th value of vector
If K is lying in first vector
If K is lying in second vector
Driver code
function to Find the number of solutions for x < y , where a <= x <= b and c <= y <= d and x , y integers .
to store answer
iterate explicitly over all possible values of x
return answer
Driver code
function call
Function to find the value of F ( n )
Driver code
Function to return N digits number which is divisible by D
to store answer
Driver code
Python3 implementation of above approach
the sieve of prime number and count of minimum prime factor
form the prime sieve
1 is not a prime number
form the sieve
if i is prime
if i is the least prime factor
mark the number j as non prime
count the numbers whose least prime factor is i
form the sieve
display
display
Python3 Program to read a square matrix and print the elements above secondary diagonal
Get the square matrix
Display the matrix
Print the elements above secondary diagonal
check for elements above secondary diagonal
Python3 Program to read a square matrix and print the Corner Elements
Get the square matrix
Display the matrix
Print the Corner elements
check for corner elements
function to return distinct prime factors
to store distinct prime factors
run a loop upto sqrt ( n )
place this prime factor in vector
This condition is to handle the case when n is a prime number greater than 1
function that returns good number
distinct prime factors
to store answer
product of all distinct prime factors is required answer
Driver code
function call
Function to check whether the number is a special prime or not
While number is not equal to zero
If the number is not prime return false .
Else remove the last digit by dividing the number by 10.
If the number has become zero then the number is special prime , hence return true
Function to find the Largest Special Prime which is less than or equal to a given number
Initially all numbers are considered Primes .
There is always an answer possible
Checking if the number is a special prime or not
If yes print the number and break the loop .
Else decrement the number .
Driver code
Python3 Code to check if an integer can be expressed as sum of two semi - primes
Utility function to compute semi - primes in a range
Increment count of prime numbers
If number is greater than 1 , add it to the count variable as it indicates the number remain is prime number
if count is equal to '2' then number is semi - prime
Utility function to check if a number sum of two semi - primes
arr [ i ] is already a semi - prime if n - arr [ i ] is also a semi - prime then a number can be expressed as sum of two semi - primes
Driver code
Utility function to check if a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Driver Code
Check if number is prime and of the form 4 n + 1
Python 3 program , to find height h which divide isosceles triangle into ratio n : m
Function to return the height
type cast the n , m into float
calculate the height for cut
Driver code
Check a number is prime or not
run a loop upto square of given number
Check if n ^ 2 - m ^ 2 is prime
Driver code
Function to calculate all the solutions
there is no solutions
print first element as y - n + 1
print rest n - 1 elements as 1
initialize the number of elements and the value of x an y
Function to find the position
Driver code
Function to find the nth odd number
Driver code
Function to find the nth Even number
Driver code
Function to find N - th Harmonic Number
H1 = 1
loop to apply the forumula Hn = H1 + H2 + H3 ... + Hn - 1 + Hn - 1 + 1 / n
Driver code
calculate Nth term of series
Driver code
calculate Nth term of series
Driver code
calculate Nth term of series
Driver code
calculate Nth term of series
Driver code
calculate Nth term of series
Driver code
calculate Nth term of series
Driver code
calculate Nth term of series
Driver code
Python 3 program to print all sides and angles of right angle triangle given one side
Function to find angle A Angle in front of side a
applied cosine rule
convert into degrees
Function to find angle B Angle in front of side b
applied cosine rule
convert into degrees and return
Function to print all angles of the right angled triangle
for calculate angle A
for calculate angle B
Function to find other two sides of the right angled triangle
if n is odd
case of n = 1 handled separately
case of n = 2 handled separately
Print angles of the triangle
Driver Code
Function to calculate the sum
number of terms to be included in the sum
find the Sum
Calculate Nth term of series
Driver code
calculate Nth term of series
Driver code
Python3 program to find whether a number is power - isolated or not
for 2 as prime factor
for odd prime factor
calculate product of powers and prime factors
check result for power - isolation
Driver code
Function to calculate sum
Return Nth term
driver code
declaration of number of terms
Get the Nth term
Function to find the sum
sum2 is sum of numbers divisible by 2
sum5 is sum of number divisible by 5
sum10 of numbers divisible by 2 and 5
Driver code
Python3 implementation of above approach
Function to find primes
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to find factors
run a loop upto square root of that number
if the n is perfect square
otherwise push it 's two divisors
sort the divisors
Function to find max product
To store factors of 'n
find factors
if it is divisible by 4.
if it is prime
otherwise answer will be possible
include last third factor
nested loop to find other two factors
Driver code
function call
function to calculate ratio of mth and nth term
ratio will be tm / tn = ( 2 * m - 1 ) / ( 2 * n - 1 )
Driver code
Function to calculate the sum
return total sum
Driver code
This function finds single digit sum of n .
Returns single digit sum of a ^ n . We use modular exponentiation technique .
Driver Code
Function to find the total number of edges in a complete graph with N vertices
Driver Code
Python3 program to find number of log values needed to calculate all the log values from 1 to N
In this list prime [ i ] will store true if prime [ i ] is prime , else store false
Using sieve of Eratosthenes to find all prime upto N
Function to find number of log values needed to calculate all the log values from 1 to N
calculate primes upto N
Driver code
function to calculate coin .
Converting each of them in rupees . As we are given totalRupees = 1800
Driver code
function which return the sum of series
Driver code
Python3 program to find four factors of N with maximum product and sum equal to N
Function to find factors and to prthose four factors
push all the factors in the container
number of factors
Initial maximum
hash - array to mark the pairs
form all the pair sums
if the pair sum is less than n
push in another container
mark the sum with the elements formed
mark in the map that v [ i ] + v [ j ] is present
new size of all the pair sums
iterate for all pair sum
the required part
if the required part is also present in pair sum
find the elements with which the first pair is formed
find the elements with which the second pair is formed
check for previous maximum
Driver code
Python 3 implementation of above approach
Declare the vector of factors for storing the
function to find out the factors of a number
Loop until the i reaches the sqrt ( n )
Check if i is a factor of n
if both the factors are same we only push one factor
factor1 is pushed
factor2 is pushed
Function to find the maximum product
Initialize the product with - 1
Find the sum of factors and store it in s
Compare whether it is equal to the n
product of factors
Check whether we have a better p now if yes update
Driver code
initializes the vectors with the divisors of n
prints out the maximised product .
For calculation of a ^ b
Function to check
every odd and number less than 3.
every number divisible by 4.
every number divisible by 6.
every number divisible by 10.
for every even number which is not divisible by above values .
Driver code
Function to check if the number is divisible by 17 or not
Extracting the last digit
Truncating the number
Subtracting the five times the last digit from the remaining number
Return n is divisible by 17
Driver Code
Python 3 to find minimum number of elements to remove to get maximum XOR value
First n in the below condition is for the case where n is 0
Function to find minimum number of elements to be removed .
Driver Code
print minimum number of elements to be removed
function to calculate the length of bridge .
Driver Code
Assuming the input variables
Python3 program to find the sum of the given sequence
function to find moudulo inverse under 10 ^ 9 + 7
Function to find the sum of the given sequence
Driver code
Function to print a , b and c
check if n - 2 is divisible by 3 or not
Driver code
Function to print all pairs
check if even
we can print all adjacent pairs for i in range ( l , r , 2 ) : print ( " { " , i , " , " , i + 1 , " } , " )
Driver Code
Function to check if the number is palindrome
if divisible by 11 then return True
if not divisible by 11 then return False
Driver code
The target value for which we have to find the solution
This variable contains the total count of triplets found
Loop from the first to the third last integer in the list
Check if arr [ i ] is a factor of target or not . If not , skip to the next element
Check if the pair ( arr [ i ] , arr [ j ] ) can be a part of triplet whose product is equal to the target
Find the remaining element of the triplet
If element is found . increment the total count of the triplets
Returns value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] [ k * ( k - 1 ) * -- - * 1 ]
A Binomial coefficient based function to find nth catalan number in O ( n ) time
Calculate value of 2 nCn
return 2 nCn / ( n + 1 )
Driver code
function to check if number is fascinating or not
frequency count array using 1 indexing
obtaining the resultant number using string concatenation
Traversing the string character by character
gives integer value of a character digit
To check if any digit has appeared multiple times
Traversing through freq array to check if any digit was missing
Driver Code
Input number
Not a valid number
Calling the function to check if input number is fascinating or not
function used to generate binomial coefficient time complexity O ( m )
helper function for generating no of ways to distribute m mangoes amongst n people
not enough mangoes to be distributed
ways -> ( n + m - 1 ) C ( n - 1 )
Driver function
m represents number of mangoes n represents number of people
Python3 program to find number of unordered coprime pairs of integers from 1 to N
to store euler 's totient function
to store required answer
Computes and prints totient of all numbers smaller than or equal to N .
Initialise the phi [ ] with 1
Compute other Phi values
If phi [ p ] is not computed already , then number p is prime
Phi of a prime number p is always equal to p - 1.
Update phi values of all multiples of p
Add contribution of p to its multiple i by multiplying with ( 1 - 1 / p )
function to compute number coprime pairs
function call to compute euler totient function
prefix sum of all euler totient function values
Driver code
function call
Function to return the decimal value of a binary number
Initializing base value to 1 , i . e 2 ^ 0
find the binary representation of the N - th number in sequence
base case
answer string
add n - 1 1 's
add 0
add n 1 's at end
Driver Code
calculate Nth term of series
calculates the N - th term
Driver Code
Function for checking number is prime or not
if flag = 0 then number is prime and return 1 otherwise return 0
Function for printing alternate prime number
counter is initialize with 0
looping through 2 to n - 1
function calling along with if condition
if counter is multiple of 2 then only print prime number
Driver code
Function calling
Python 3 program to print all equal to n using Sieve of Eratosthenes
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Print all prime numbers
for next prime to get printed
Driver Code
Function to find maximum
Case 1
Case 2
Driver Code
Python3 implementation of above approach
b [ 0 ] will contain the maximum profit
b [ 1 ] will contain the day on which we are getting the maximum profit
here finding the max profit
if we get less then or equal to zero it means we are not getting the profit
check if Sum is greater then maximum then store the new maximum
Driver code
Find sum of binomial coefficients xCi ( where i varies from 1 to n ) . If the sum becomes more than K
Do binary search to find minimum number of trials in worst case .
Initialize low and high as 1 st and last floors
Do binary search , for every mid , find sum of binomial coefficients and check if the sum is greater than k or not .
Driver Code
Python3 program to find next palindromic prime for a given number .
if ( 8 <= N <= 11 ) return 11
generate odd length palindrome number which will cover given constraint .
if y >= N and it is a prime number then return it .
Driver code
This function returns the sum of the digits of a number
This function creates the array of valid numbers
this computes s ( x ) ^ a
this gives the result of equation
checking if the sum same as i
counter to keep track of numbers
resultant array
prints the number
Driver Code
calculate which value of x are possible
Function to print Cunningham chain of the second kind
Iterate till all elements are printed
check prime or not
Driver Code
Function to return the count
making a list to store ( a , b ) pairs
no triangle if p is odd
make ( a , b ) pair in sorted order
check to avoid duplicates
store the new pair
Driver Code
Python program to count pairs with Odd AND
Count total odd numbers
return count of even pair
Driver Code
calling function findOddPair and print number of odd pair
define a isSurd function which Returns true if x is Surd number .
Try all powers of i
Driver code
Find the first digit
Get the last digit from the number
Remove last digit from number
Get the last digit from the number ( last second of num )
Take last digit to ten 's position  i.e. last second digit
Add the value of ones and tens to make it complete 2 digit number
return the first digit
Driver Code
pow function used
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
function to calculate number of digits in x
function to print last 2 digits of 2 ^ n
Generating 10 ^ 2
Calling modular exponentiation
Printing leftmost zeros . Since ( 2 ^ n ) % 2 can have digits less then 2. In that case we need to print zeros
If temp is not zero then print temp If temp is zero then already printed
Driver Code
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Finds GCD of a and b
Finds GCD of a ^ n and c
check if c is a divisor of a
First compute ( a ^ n ) % c
Now simply return GCD of modulo power and c .
Driver code
Python 3 code to find count of sub - arrays with odd sum
Find sum of all subarrays and increment result if sum is odd
Driver code
Python 3 proggram to find count of sub - arrays with odd sum
A temporary array of size 2. temp [ 0 ] is going to store count of even subarrays and temp [ 1 ] count of odd . temp [ 0 ] is initialized as 1 because there is a single odd element is also counted as a subarray
Initialize count . sum is sum of elements under modulo 2 and ending with arr [ i ] .
i ' th ▁ iteration ▁ computes ▁ ▁ sum ▁ of ▁ arr [ 0 . . i ] ▁ under ▁ ▁ modulo ▁ 2 ▁ and ▁ increments ▁ ▁ even / odd ▁ count ▁ according ▁ ▁ to ▁ sum ' s value
2 is added to handle negative numbers
Increment even / odd count
An odd can be formed by even - odd pair
Driver code
Python 3 program to print prime factors in pairs .
Driver code
Function to find the sum between L and R
array created
fill the first half of array
fill the second half of array
find the sum between range
Driver Code
Function to calculate the sum if n is even
Both l and r are to the left of mid
First and last element
Total number of terms in the sequence is r - l + 1
Use of formula derived
Both l and r are to the right of mid
First and last element
Use of formula derived
Left is to the left of mid and right is to the right of mid
Take two sums i . e left and right differently and add
First and last element
total terms
no of terms
The first even number is 2
The last element is
formula applied
Function to calculate the sum if n is odd
Take ceil value if n is odd
Both l and r are to the left of mid
First and last element
number of terms
formula
both l and r are to the right of mid
first and last term ,
no of terms
formula used
If l is on left and r on right
calculate separate sums
first half
calculate terms
second half
add both halves
Function to find the sum between L and R
If n is even
If n is odd
Driver Code
function to find the interior and exterior angle
formula to find the interior angle
formula to find the exterior angle
Displaying the output
Driver code
Function calling
Python program to find distance between two points in 3 D .
Function to find distance
Driver Code
function call for distance
Check if a number is divisible by 41 or not
array to store all the digits
base values
calculate remaining digits
calculate answer
check for divisibility
Driver Code
Function to generate nth tetrahedral number
Function to print pentatope number series upto nth term .
Initialize prev as 0. It store the sum of all previously generated pentatope numbers
Loop to print pentatope series
Find ith tetrahedral number
Add ith tetrahedral number to sum of all previously generated tetrahedral number to get ith pentatope number
Update sum of all previously generated tetrahedral number
Driver code
Function call to print pentatope number series
Function to print pentatope series up to nth term
Loop to print pentatope number series
calculate and print ith pentatope number
Driver code
Function call to print pentatope number series
Finding the number of unique pairs
Using the derived formula
Printing the unique pairs
Driver Code
function to generate nth triangular number
function to print tetrahedral number series up to n
Initialize prev as 0. It stores the sum of all previously generated triangular number
Loop to print series
Find ith triangular number
Add ith triangular number to sum of all previously generated triangular number to get ith tetrahedral number
Update sum of all previously generated triangular number
Driver code
function call to print series
function to print tetrahedral series up to n
loop to print series
Calculate and print ith Tetrahedral number
Driver code
function call to print series
Function that prints the number of odd and even results
If constant at layer i is even , beven is True , otherwise False . If the coefficient of x at layer i is even , aeven is True , otherwise False .
If any of the coefficients at any layer is found to be even , then the product of all the coefficients will always be even .
Checking whether the constant added after all layers is even or odd .
Assuming input x is even .
Assuming input x is odd .
Displaying the counts .
Driver Code
Function that returns the maximum number of ones
Minimum number of zeroes
Totol cells = square of the size of the matrices
Initialising the answer
Initialising the variables
Function that returns minimum number of changes
Hash - table to store frequency
Increase the frequency of elements
Traverse in the map to sum up the ( occurrences - 1 ) of duplicate elements
Driver Code
Python 3 program to check if M - th fibonacci divides N - th fibonacci
exceptional case for F ( 2 )
if none of the above cases , hence not divisible
Driver Code
Python3 program to find the Surface Area and Volume of Hexagonal Prism .
Function to calculate Surface area
Formula to calculate surface area
Display surface area
Function to calculate Volume
formula to calculate Volume
Display Volume
Driver Code
surface area function call
volume function call
Python3 code to find the minimum number of mails
Function returns the min no of mails required
Using the formula derived above
no of questions
no of students
maximum no of questions a mail can hold
Calling function
Function to find area of an ellipse .
formula to find the area of an Ellipse .
Display the result
Driver code
Python3 program for computing x ^ x ^ x ^ x . . % m
Function to compute the given value
compute power k times
Driver Code
Calling function
Recursive function that returns the reverse of digits
base case
stores the reverse of a number
Driver Code
Python3 code for finding greater between the a ^ n and b ^ n
Function to find the greater value
If n is even
Driver code
Python3 code to print fibonacci numbers till n using direct formula .
Function to calculate fibonacci using recurrence relation formula
Using direct formula
Driver code
centered hexadecagonal function
Formula to calculate nth centered hexadecagonal number
Driver Code
Python3 Program to check if the nth is odd or even in a sequence where each term is sum of previous two term
Return if the nth term is even or odd .
Return true if odd
Driver Code
Python3 program to compare which is greater m ^ n or n ^ m
function to compare m ^ n and n ^ m
m ^ n
n ^ m
Driver Code
function call to compare m ^ n and n ^ m
Python3 program to find LCM of two large numbers
Function to calculate LCM of two large numbers
Convert string ' a ' and ' b ' into Integer
Calculate multiplication of both integers
Calculate gcd of two integers
Calculate lcm using formula : lcm * gcd = x * y
Driver Code
Input ' a ' and ' b ' are in the form of strings
Return the greatest common divisor of two numbers
Return the gretest common divisor of a and b which lie in the given range .
Loop from 1 to sqrt ( GCD ( a , b ) .
if i divides the GCD ( a , b ) , then find maximum of three numbers res , i and g / i
Driver Code
function to check if a number can be expressed as sum of five consecutive integer .
if n is 0
if n is positive , increment loop by 1.
if n is negative , decrement loop by 1.
Running loop from 0 to n - 4
check if sum of five consecutive integer is equal to n .
Driver Code
function to check if a number can be expressed as sum of five consecutive integers .
if n is multiple of 5
else print " - 1" .
Driver Code
Python Program to find the number of transpositions in a permutation
This array stores which element goes to which position
This function returns the size of a component cycle
If it is already visited
This functio returns the number of transpositions in the permutation
Initializing visited [ ] array
building the goesTo [ ] array
Driver Code
Function to find the nth term of series
Loop to add 4 th powers
Driver code
Python3 Program to determine the number of unmarked integers in a special sieve
Driver Code
Python program to find sum of the series .
Function to calculate required series
Drivers code
Python program to find sum of the series .
Function to calculate required series
Driver code
Function to calculate sum of all proper divisors
1 is a proper divisor
Note that this loop runs till square root of n
If divisors are equal , take only one of them
Otherwise take both
Calculate sum of all proper divisors only
Function to get last number of Aliquot Sequence .
Calculate next term from previous term
Returns true if n is perfect
To store sum of divisors
Find all divisors and add them
If sum of divisors is equal to n , then n is a perfect number
Returns true if n is aspiring else returns false
Checking condition for aspiring
Driver Code
Return the size of smallest array with given constraint .
Drivers code
function to find the other - end point of diameter
find end point for x coordinates
find end point for y coordinates
Driven Program
Function to find the product term
Function for calculating divided difference table
Function for applying Newton 's  divided difference formula 
Function for displaying divided difference table
number of inputs given
y [ ] [ ] is used for divided difference table where y [ ] [ 0 ] is used for input
calculating divided difference table
displaying divided difference table
value to be interpolated
printing the value
Function to find Centered heptagonal number
Formula to calculate nth Centered heptagonal number
Driver Code
Function to find sum of sum of square of first n natural number
Driven Program
Python 3 Program to check if given matrix is Hankel Matrix or not .
Function to check if given matrix is Hankel Matrix or not .
for each row
for each column
checking if i + j is less than n
checking if the element is equal to the corresponding diagonal constant
checking if the element is equal to the corresponding diagonal constant
Drivers code
Python3 program to find if a number can be expressed as x raised to power y .
Find Log n in different bases and check if the value is an integer
Driver code
Python Program to answer queries on sum of sum of odd number digits of all the factors of a number
finding sum of odd digit number in each integer .
for each number
using previous number sum , finding the current number num of odd digit also , adding last digit if it is odd .
finding sum of sum of odd digit of all the factors of a number .
for each possible factor
adding the contribution .
Wrapper def
Driver Code
Efficient function to calculate number of digits in the nth number constructed by using 6 , 1 , 4 and 9 as digits in the ascending order .
Number of digits increase after every i - th number where i increases in powers of 4.
Driver Code
Python3 program to print all primes between 1 to N in reverse order using Sieve of Eratosthenes
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Print all prime numbers in reverse order
static input
to display
Python3 code to verify Vantieghem 's Theorem
Check if above condition is satisfied
Product of previous powers of 2
Driver code
Python 3 program to count the number of numbers formed by digits a and b exactly of a length N such that the sum of the digits of the number thus formed is of digits a and b .
function to check if sum of digits is made of a and b
sum of digits is 0
if any of digits in sum is other than a and b
calculate the modInverse V of a number in O ( log n )
q is quotient
m is remainder now , process same as Euclid 's algo
Update y and x
Make x positive
function to pregenerate factorials
function to pre calculate the modInverse of factorials
calculates the modInverse of the last factorial
precalculates the modInverse of all factorials by formulae
function that returns the value of nCi
function that returns the count of numbers
function call to pre - calculate the factorials and modInverse of factorials
if a and b are same
Driver Code
Function to generate a fixed number
Driver Code
returns the number of odd factors
If i is an odd factor and n is a perfect square
If n is not perfect square
N as sum of consecutive numbers
Python3 program to find if it is possible to make all array elements 0 by decrement operations .
used for storing the sum of even and odd position element in array .
if position is odd , store sum value of odd position in odd
if position is even , store sum value of even position in even
Driver Code
Python3 program to find the sum of cos ( x ) series
here x is in degree . we have to convert it to radian for using it with series formula , as in series expansion angle is in radian
Driver Code
def to calculate sum of digit for a given base
Sum of digits
Calculating the number ( n ) by taking mod with the base and adding remainder to the result and parallelly reducing the num value .
returning the result
def calling for multiple bases
Driver code
Function returns true if it is possible to split into two sets otherwise returns false
Driver code
C ++ program to find required minimum digits need to remove to make a number perfect square
function to check minimum number of digits should be removed to make this number a perfect square
size of the string
our final answer
to store string which is perfect square .
We make all possible subsequences
to check jth bit is set or not .
we do not consider a number with leading zeros
convert our temporary string into integer
checking temp is perfect square or not .
taking maximum sized string
print PerfectSquare
Driver code
Prints all the possible combinations 4 numbers whose sum of squares is equal to the given no .
loops checking the sum of squares
if sum of four squares equals the given no .
printing the numbers
Driver Code
74 = 0 * 0 + 0 * 0 + 5 * 5 + 7 * 7 74 = 0 * 0 + 1 * 1 + 3 * 3 + 8 * 8 74 = 0 * 0 + 3 * 3 + 4 * 4 + 7 * 7 74 = 1 * 1 + 1 * 1 + 6 * 6 + 6 * 6 74 = 2 * 2 + 3 * 3 + 5 * 5 + 6 * 6
Python3 program to count all prime factors
A function to count prime factors of a given number n
n must be odd at this point . So we can skip one element ( Note i = i + 2 )
This condition is to handle the case when n is a prime number greater than 2
Driver Code
Python Program to calculate no . of digits in a ^ b
function to calculate number of digits in a ^ b
Driver Program
Checking whether a number is semi - prime or not
Increment count of prime numbers
If number is still greater than 1 , after exiting the add it to the count variable as it indicates the number is a prime number
Return '1' if count is equal to '2' else return '0
Checking whether a number is emirpimes or not
Number itself is not semiprime .
Finding reverse of n .
The definition of emirpimes excludes palindromes , hence we do not check further , if the number entered is a palindrome
Checking whether the reverse of the semi prime number entered is also a semi prime number or not
Driver Code
Function to generate a fixed number of even or odd terms . The size of r decides whether numbers to be generated even or odd .
Generating the first ' n ' terms of Connell Sequence
A dummy 0 is inserted at the beginning for consistency
Calling function gen ( ) to generate ' k ' number of terms
Checking if ' n ' terms are already generated
Removing the previously inserted dummy 0
Driver Code
function to find factorial of given number
Prints n consecutive numbers .
Driver Code
Finding primes upto entered number
Finding primes by Sieve of Eratosthenes method
If prime [ i ] is not changed , then it is prime
Update all multiples of p
Forming array of the prime numbers found
Returns number of digits in n
Checking whether a number is Frugal or not
Finding number of digits in prime factorization of the number
Exponent for current factor
Counting number of times this prime factor divides ( Finding exponent )
Finding number of digits in the exponent Avoiding exponents of value 1
Checking condition for frugal number
Driver Code
program to find n - th number which is both square and cube .
Driver code
Function to find if the given number is sum of the cubes of first n natural numbers
Start adding cubes of the numbers from 1
If sum becomes equal to s return n
Driver code
Function to find kth good number .
Find the last digit of n .
If last digit is between 0 to 4 then return 2 * n .
If last digit is between 5 to 9 then return 2 * n + 1.
Driver code
Python3 program to verify Nicomachu 's Theorem
Compute sum of cubes
Check if sum is equal to given formula .
Driver Code
function to check if all digits are even of a given number
iterate for all digits
if digit is odd
all digits are even
function to return the largest number with all digits even
Iterate till we find a number with all digits even
Driver Code
Python3 program to print the largest integer not greater than N with all even digits
function to return the largest number with all digits even
convert the number to a string for easy operations
find first odd digit
if no digit , then N is the answer
till first odd digit , add all even numbers
decrease 1 from the odd digit
add 0 in the rest of the digits
Driver Code
Python3 program to find number of digits in 2 ^ n
Function to find number of digits in 2 ^ n
Driver code
function to check if all digits are even of a given number
iterate for all digits
if digit is odd
all digits are even
function to return the smallest number with all digits even
iterate till we find a number with all digits even
Driver Code
Python 3 code to find the bucket to choose for picking flowers out of it
Driver code
Function to calculate the factorial
returning the factorial of the largest number in the given three consecutive numbers
Driver code
Python 3 program to count number of ways we can express a factorial as sum of consecutive numbers
sieve of Eratosthenes to compute the prime numbers
Store all prime numbers
function to calculate the largest power of a prime in a number
Modular multiplication to avoid the overflow of multiplication Please see below for details https : www . geeksforgeeks . org / how - to - avoid - overflow - in - modular - multiplication /
Returns count of ways to express n ! as sum of consecutives .
We skip 2 ( First prime ) as we need to consider only odd primes
compute the largest power of prime
if the power of current prime number is zero in N ! , power of primes greater than current prime number will also be zero , so break out from the loop
multiply the result at every step
subtract 1 to exclude the case of 1 being an odd divisor
Driver Code
Check if the given two number are friendly pair or not .
Returns sum of all factors of n .
Traversing through all prime factors .
THE BELOW STATEMENT MAKES IT BETTER THAN ABOVE METHOD AS WE REDUCE VALUE OF n .
This condition is to handle the case when n is a prime number greater than 2.
Function to return gcd of a and b
Function to check if the given two number are friendly pair or not .
Finding the sum of factors of n and m
Finding gcd of n and sum of its factors .
Finding gcd of m and sum of its factors .
checking is numerator and denominator of abundancy index of both number are equal or not .
Driver code
Python3 program to find n - th Fortunate number
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to Find primorial of order n ( product of first n prime numbers ) .
Function to find next prime number greater than n
Note that difference ( or m ) should be greater than 1.
loop continuously until isPrime returns true for a number above n
Ignoring the prime number that is 1 greater than n
Returns n - th Fortunate number
Driver Code
Function to calculate probability
Driver code
Python3 program to verify fermat 's last theorem for a given range and n.
Check if there exists a triplet such that a ^ n + b ^ n = c ^ n
Driver code
Function to return gcd of a and b
Print the Product of N fraction in Reduced Form .
finding the product of all N numerators and denominators .
Finding GCD of new numerator and denominator
Converting into reduced form .
Driver Code
Function for f ( n ) mod 5
if n % 5 == 1 return 4
else return 0
Driver Code
Return single digit sum of a number
Returns recursive sum of digits of a number formed by repeating a number X number of times until sum become single digit .
Driver Code
Returns sum of n digit numbers divisible by 'number
compute the first and last term
sum of number which having n digit and divisible by number
Driver code
Simple Python 3 program to count n digit divisible numbers
Returns count of n digit numbers divisible by number
compute the first and last term
count total number of which having n digit and divisible by number
Driver code
Python3 program to find N - th term in George Cantor set of rational numbers
let i = numerator
let j = denominator
to keep the check of no . of terms
loop till k is not equal to n
check if k is already equal to N then the first term is the required rational number
loop for traversing from right to left downwards diagonally
loop for traversing from left to right upwards diagonally
Driver code
Returns true if n is divisible by 29 else returns false .
add the lastdigit * 3 to renaming number until number comes only 2 digit
return true if number is divisible by 29 another
Driver Code
def to solve the given equation
Traverse the equation
For cases such as : x , - x , + x
Flip sign once ' = ' is seen
There may be a number left in the end
For infinite solutions
For no solution
x = total sum / coeff of x ' - ' sign indicates moving numeric value to right hand side
Driver code
Python program to check if a number is pronic or not
function to check Pronic Number
Checking Pronic Number by multiplying consecutive numbers
Driver Code
Python3 program for the above approach
If ceil and floor are equal the number is a perfect square
Driver code
Maximum number of digits in output
This function multiplies x with the number represented by res [ ] . res_size is size of res [ ] or number of digits in the number represented by res [ ] . This function uses simple school mathematics for multiplication . This function may value of res_size and returns the new value of res_size
Initialize carry
One by one multiply n with individual digits of res [ ]
Store last digit of ' prod ' in res [ ]
Put rest in carry
Put carry in res and increase result size
This function finds power of a number x
printing value "1" for power = 0
Initialize result
Multiply x n times ( x ^ n = x * x * x ... . n times )
Driver program
Python 3 program to check if a number is a p - smooth number or not
function to check if number n is a P - smooth number or not
prime factorise it by 2
if the number is divisible by 2
check for all the possible numbers that can divide it
prime factorize it by i
stores the maximum if maximum and i , if i divides the number
if n at the end is a prime number , then it a divisor itself
Driver program to test above function
Python3 program change RGB Color Model to HSV Color Model
R , G , B values are divided by 255 to change the range from 0. .255 to 0. .1 :
if cmax and cmax are equal then h = 0
if cmax equal r then compute h
if cmax equal g then compute h
if cmax equal b then compute h
if cmax equal zero
compute v
print ( rgb_to_hsv ( 45 , 215 , 0 ) ) print ( rgb_to_hsv ( 31 , 52 , 29 ) )
Function to find the minute
Finding the angle between minute hand and the first hour hand
Driver code
function that calculate the sum of the nth series
Using formula of the nth term
Driver function
Python Program to check whether a number is sandwiched between two primes or not
returns true if number n is prime
0 and 1 both are non - primes
finding square root of n
checking if n has any factor upto square root of n if yes its not prime
driver Function
function to implement tomohiko sakamoto algorithm
array with leading number of days values
if month is less than 3 reduce year by 1
Driver Code
Returns true if n is prime , else return false . i is current divisor to check .
Base cases
Check for next divisor
Driver Program
Python3 Program to print all prime factors
Returns true if n is a square free number , else returns false .
If 2 again divides n , then n is not a square free number .
n must be odd at this point . So we can skip one element ( Note i = i + 2 )
Check if i is a prime factor
If i again divides , then n is not square free
Driver program
Returns area of square from given diagonal
Driver function .
Python Program to find sum of series 1 ^ 2 + 3 ^ 2 + 5 ^ 2 + . . . + ( 2 * n - 1 ) ^ 2.
Function to find sum of series .
driver code
Python Program to find sum of series 1 ^ 2 + 3 ^ 2 + 5 ^ 2 + . . . + ( 2 * n - 1 ) ^ 2.
Function to find sum of series .
Formula to find sum of series .
driver code
Python 3 Program to implement standard error of mean .
Function to find sample mean .
loop to calculate sum of array elements .
Function to calculate sample standard deviation .
Function to calculate sample error .
Formula to find sample error .
Driver function
Python code to find minimum moves to reach target
Function to find minimum steps to reach target
Handling negatives by symmetry
Keep moving while sum is smaller i . e calculating n
case 1 : d is even
d is odd
Driver code
Function call
Function to find sum of series up - to n terms
initializing counter by 1
variable to calculate result
while loop until nth term is not reached
boolean type variable for checking validation
Driver Code
function find the square of n
Base case
Return 2 ^ ( n ( n + 1 ) / 2 )
Driver code
Function to find nth centered nonagonal number
Formula to find nth centered nonagonal number .
Driver function .
Function to find mean of the array elements .
Calculate sum of all elements .
Function to find mean absolute deviation of given elements .
Calculate the sum of absolute deviation about mean .
Return mean absolute deviation about mean .
Driver function .
Returns true if it is possible to get ratio r from given cost and quantity ranges .
Calculating cost corresponding to value of i
Driver Code
Function to implement calculation
Driver code
calculate the sum of fourth power of first n odd natural numbers
Driven Program
Returns number of zeros in factorial n
Dividing x by powers of 5 and update count
Returns count of trailing zeros in M ! x N !
Driver program
Function to check Trimorphic number
Store the cube
Start Comparing digits
Return false , if any digit of N doesn ' t ▁ match ▁ with ▁ ▁ its ▁ cube ' s digits from last
Reduce N and cube
Driver code
Python3 program to find nth Trimorphic number
Functions to find nth Trimorphic number
Comparing the digits
Return false , if any digit of num doesn ' t ▁ match ▁ with ▁ ▁ its ▁ cube ' s digits from last
Reduce num and cube
Check in max int size
check number is Trimorphic or not
if counter is equal to the n then return nth number
Driver code
Python 3 program to find minimum moves to reach target if we can move i steps in i - th move .
Handling negatives by symmetry
Keep moving while sum is smaller or difference is odd .
Driver code
Calculate the sum of fifth power of first n natural numbers
Driven Program
Returns unit digit of x raised to power y
Initialize result as 1 to handle case when y is 0.
One by one multiply with x mod 10 to avoid overflow .
Driver program
function to find max occurring divisor interval [ x , y ]
if there is only one number in the in the interval , return that number
otherwise , 2 is max occurring divisor
Driver code
Function to calculate average of square number
Driver code
Formula based Python3 program to find sum of alldivisors of n .
Returns sum of all factors of n .
If n is odd , then there are no even factors .
Traversing through all prime factors .
While i divides n print i and divide n
here we remove the 2 ^ 0 that is 1. All other factors
This condition is to handle the case when n is a prime number .
Driver code
Python program to find LCM of given array
get lcm of two numbers
Finds LCM of numerators
calculate the lcm of all numerators
return all numerator lcm
Get GCD of all the denominators
calculate the gcd of all the denominators
return all denominator gcd
find lcm of all the rational number
return the LCM of all numerator / GCD of all denominator
Driver code
give rational number 2 / 7 , 3 / 14 , 5 / 3 make pair as a numerator and denominator
Determines focal length of a spherical concave mirror
Determines focal length of a spherical convex mirror
Driver function
Formula based Python3 program to find sum of all divisors of n .
Returns sum of all factors of n .
Traversing through all prime factors .
ignore even factors by of 2
While i divides n , print i and divide n
This condition is to handle the case when n is a prime number .
Driver code
return number of non negative integral solutions
initialize total = 0
Base Case if n = 1 and val >= 0 then it should return 1
iterate the loop till equal the val
total solution of equations and again call the recursive function Solutions ( variable , value )
return the total no possible solution
driver code
Python3 Program to print Fibonomial Triangle of height n .
Function to produce Fibonacci Series .
0 th and 1 st number of the series are 0 and 1
Add the previous 2 numbers in the series and store it
Function to produce fibonomial coefficient
Function to print Fibonomial Triangle .
Finding the fibonacci series .
to store triangle value .
initialising the 0 th element of each row and diagonal element equal to 0.
for each row .
for each column .
finding each element using recurrence relation .
printing the Fibonomial Triangle .
Driver Code
Python3 code to find the sum of first n terms .
Return the sum of first n term of AGP
finding the each term of AGP and adding it to sum .
Driven Code
function to find the sum of the given series
first term of each i - th term
next term
required sum
Driver program to test above
Function to calculate sum of series .
Driver code
Python3 code to get the sum of the series
Function to get the series
Sum of n - 1 terms starting from 2 nd term
Driver Code
Function to get the series
Computing sum of remaining n - 1 terms .
Driver Code
Function to count two 's factor
Count number of 2 s present in n
Function to count five 's factor
Function to count number of zeros
Count the two 's factor of n number
Count the five 's factor of n number
Return the minimum
Driver Code
function to print the first digit
reduce the number to its mod
traverse for every decimal places
get every fraction places when ( a * 10 / b ) / c
check if it is equal to the required integer
mod the number
driver code to test the above function
function to print difference
summation of n elements
if divisible by 4
if remainder 1 or 2. In case of remainder 2 , we divide elements from 3 to n in groups of size 4 and put 1 in one group and 2 in group . This also makes difference 1.
We put elements from 4 to n in groups of size 4. Remaining elements 1 , 2 and 3 can be divided as ( 1 , 2 ) and ( 3 ) .
driver code to test the above function
function to calculate time to meet
Driver Code
functionn to find the sum of the given series
first term of each i - th term
next term
required sum
Driver program
function to check if a number can be written as sum of three consecutive integer .
if n is 0
if n is positive , increment loop by 1.
if n is negative , decrement loop by 1.
Running loop from 0 to n - 2
check if sum of three consecutive integer is equal to n .
Driver Code
Python3 code to find sum of all divisor of number up to 'n
Utility function to find sum of all divisor of number up to 'n
Find all divisors of i and add them
Driver code
Function to print binomial table
B ( m , x ) is 1 if either m or x is is 0.
Otherwise using recursive formula B ( m , x ) = B ( m , x - 1 ) * ( m - x + 1 ) / x
Driver Function
Python3 code to find largest prime factor of number
A function to find largest prime factor
Initialize the maximum prime factor variable with the lowest one
Print the number of 2 s that divide n
n must be odd at this point
now we have to iterate only for integers who does not have prime factor 2 and 3
This condition is to handle the case when n is a prime number greater than 4
Driver code to test above function
Function to get no of set bits in the binary representation of 'n
function to count unset bits in the given range
calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits
returns number of unset bits in the range ' l ' to ' r ' in 'n
Driver code to test above
calculate the sum of fourth power of first n even natural numbers
made even number
Driver Code
calculate the sum of fourth power of first n even natural numbers
Driver Code
Python3 code to find Nth Balanced Prime
Return the Nth balanced prime .
Sieve of Eratosthenes
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
storing all primes
Finding the Nth balanced Prime
Driven Program
Python3 program to print the smallest integer with n factors or more
array to store prime factors
function to generate all prime factors of numbers from 1 to 10 ^ 6
Initializes all the positions with their value .
Initializes all multiples of 2 with 2
A modified version of Sieve of Eratosthenes to store the smallest prime factor that divides every number .
check if it has no prime factor .
Initializes of j starting from i * i
if it has no prime factor before , then stores the smallest prime divisor
function to calculate number of factors
stores the smallest prime number that divides n
stores the count of number of times a prime number divides n .
reduces to the next number after prime factorization of n
false when prime factorization is done
if the same prime number is dividing n , then we increase the count
if its a new prime factor that is factorizing n , then we again set c = 1 and change dup to the new prime factor , and apply the formula explained above .
prime factorizes a number
for the last prime factor
function to find the smallest integer with n factors or more .
check if no of factors is more than n or not
generate prime factors of number upto 10 ^ 6
Return the sum of square of first n natural numbers
Iterate i from 1 and n finding square of i and add to sum .
Driven Program
Function to check if a number is prime or not .
If n is an even number ( we can write it as sum of two primes )
If n is odd and n - 2 is prime .
If n is odd , n - 3 must be even .
Driver code
Find the first digit
Remove last digit from number till only one digit is left
return the first digit
Find the last digit
return the last digit
Driver Code
Python3 program to find first and last digits of a number
Find the first digit
Find total number of digits - 1
Find first digit
Return first digit
Find the last digit
return the last digit
Driver Code
Function to check if a number is prime or not .
Prints at most three prime numbers whose sum is n .
CASE - I
CASE - II
CASE - III
Driver Code
array used to store coefficients .
function to calculate the coefficients of ( x - 1 ) ^ n - ( x ^ n - 1 ) with the help of Pascal 's triangle .
function to check whether the number is prime or not
Calculating all the coefficients by the function coef and storing all the coefficients in c array .
subtracting c [ n ] and adding c [ 0 ] by 1 as ( x - 1 ) ^ n - ( x ^ n - 1 ) , here we are subtracting c [ n ] by 1 and adding 1 in expression .
checking all the coefficients whether they are divisible by n or not . if n is not prime , then loop breaks and ( i > 0 ) .
Return true if all coefficients are divisible by n .
Driver Code
Return the nth Motzkin Number .
Base Case
Recursive step
Driver code
Python3 program to find sum of 0.6 , 0.06 , 0.006 , 0.0006 , ... to n terms
function which return the sum of series
Driver code
function to count digits
Returns true if n is Narcissistic number
Count the number of digits
Calculates the sum of digits raised to power
Driver code
Function to calculate series
Driver Code
Python3 program to print first N Leyland Numbers .
Print first n Leyland Number .
Outer loop for x from 2 to n .
Inner loop for y from 2 to x .
Calculating x ^ y + y ^ x
Sorting the all Leyland Number .
Printing first n Leyland number .
Driver Code
Return the sum of k - th group of positive odd integers .
Finding first element of kth group .
Finding the sum .
Driver code
Returns n - th term of the series 2 , 12 , 36 , 80 , 150
driver code
Function to find the sum of series
Driver code
Function to calculate speed
Function to calculate distance traveled
Function to calculate time taken
Calling function cal_speed ( )
Calling function cal_dis ( )
Calling function cal_time ( )
Function to find the nth term of series
Loop to add numbers
Driver code
Return the average of first n natural numbers
Driven Program
Python3 program to find the sum of the series 1 + 11 + 111 + 1111 + ... .
Function for finding summation
Driver Code
Python 3 code to print the sum of the series
Driver code
Python program to find the nth term of the series 1 2 2 3 3 3 ...
function to solve the quadratic equation
calculating the Nth term
Driver code
Returns count of digits in n .
Returns true if x is Diserium
Compute powers of digits from right to left .
If sum of powers is same as given number .
Driver code
__gcd function
function return number which divides these three number and leaves same remainder .
We find the differences of all three pairs
Return GCD of three differences .
Driver program
Function to find mean of series .
Function to find the standard deviation of series .
Function to find combined variance of two different series .
mean1 and mean2 are the mean of two arrays .
sd1 and sd2 are the standard deviation of two array .
combinedMean is variable to store the combined mean of both array .
d1_square and d2_square are the combined mean deviation .
combinedVar is variable to store combined variance of both array .
Driver Code
Function call to combined mean .
Returns true if number is divisible by 13 else returns false
Append required 0 s at the beginning .
Same as strcat ( num , "00" ) ; in c .
Same as strcat ( num , "0" ) ; in c .
Alternatively add / subtract digits in group of three to result .
Store group of three numbers in group variable .
Generate alternate series of plus and minus
Driver code
Python3 program to find x such that a % x is equal to b .
if a is less than b then no solution
if a is equal to b then every number greater than a will be the solution so its infinity
count variable store the number of values possible
checking for both divisor and quotient whether they divide ( a - b ) completely and greater than b .
Here y is added twice in the last iteration so 1 y should be decremented to get correct solution
Driver code
Function to count ' num ' as sum of digits ( 1 , 2 , 3 , 4 )
Initialize dp [ ] array
Base case
Initialize the current dp [ ] array as '0
if i == j then there is only one way to write with element itself 'i
If j == 1 , then there exist two ways , one from '1' and other from '4
if i - j is positive then pick the element from ' i - j ' element of dp [ ] array
Check for modulas
return the final answer
Driver code
function to check if there exist two numbers sum of whose squares is n .
store square value in hashmap
Driver Code
Check whether a number can be represented by sum of two squares using Fermat Theorem .
Count all the prime factors .
Ifany prime factor of the form ( 4 k + 3 ) ( 4 k + 3 ) occurs an odd number of times .
If n itself is a x prime number and can be expressed in the form of 4 k + 3 we return false .
Driver Code
function to count the frequency of 1.
Driver Code
check if character is prime
replace with previous prime character
if 2 erase s [ i ] and replace next with 7
find first non prime char
find first char greater than 2
like 20
like 7721
replace remaining with 7
Driver code
Python3 program to count number of divisors of n ^ 2 which are not divisible by divisor of n
Function to count divisors of n ^ 2 having no factors of 'n
Increment count of i - th prime divisor
Find next prime divisor
Increment count if divisor still remains
Initialize variable for counting the factors of n ^ 2 and n as ans1 and ans2 respectively
Range based for - loop
Use formula as discussed in above
return the difference of answers
Driver code
Python program to print digit 's position to be removed to make number divisible by 6
function to print the number divisible by 6 after exactly removing a digit
stores the Sum of all elements
traverses the string and converts string to number array and Sums up
if second last is odd or Sum of n - 1 elements are not divisible by 3.
second last is even and prn - 1 elements removing last digit
last digit removed
counter to check if any element after removing , its Sum % 3 == 0
traverse till second last element
to check if any element after removing , its Sum % 3 == 0
the leftmost element
break at the leftmost element
stores the right most element
if no element has been found as a [ i + 1 ] > a [ i ]
if second last is even , then remove last if ( Sum - last ) % 3 == 0
if no element which on removing gives Sum % 3 == 0
driver program to test the above function
Python3 program to check if m can be represented as powers of w .
If m is not zero means , it can 't be  represented in terms of powers of w.
Driver code
function to count the no of removal of digits to make a very large number divisible by 3
add up all the digits of num
if num is already is divisible by 3 then no digits are to be removed
if there is single digit , then it is not possible to remove one digit .
traverse through the number and find out if any number on removal makes the sum divisible by 3
if there are two numbers then it is not possible to remove two digits .
Otherwise we can always make a number multiple of 2 by removing 2 digits .
Driver Code
Python3 implementation for dot product and cross product of two vector .
Function that return dot product of two vector array .
Loop for calculate cot product
Function to find cross product of two vector array .
Driver function
dotProduct function call
crossProduct function call
Loop that print cross product of two vector array .
function to find number of n digit numbers possible
driver function
Initialize mod variable as constant
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Return number of ways to write ' n ' as sum of even integers
Driver code
Python 3 program to count number of steps required to convert an integer array to array of factors .
array to store prime factors
function to generate all prime factors of numbers from 1 to 10 ^ 6
Initializes all the positions with their value .
Initializes all multiples of 2 with 2
A modified version of Sieve of Eratosthenes to store the smallest prime factor that divides every number .
check if it has no prime factor .
Initializes of j starting from i * i
if it has no prime factor before , then stores the smallest prime divisor
function to calculate the number of representations
keep an count of prime factors
traverse for every element
count the no of factors
subtract 1 if Ai is not 1 as the last step wont be taken into count
Driver Code
call sieve to calculate the factors
Python program to find count of subsequences of size three divisible by M .
Three nested loop to find all the sub sequences of length three in the given array A [ ] .
checking if the sum of the chosen three number is divisible by m .
Driver code
Python program to find count of subsequences of size three divisible by M .
Storing frequencies of all remainders when divided by M .
including i and j in the sum rem calculate the remainder required to make the sum divisible by M
if the required number is less than j , we skip as we have already calculated for that value before . As j here starts with i and rem is less than j .
if satisfies the first case .
if satisfies the second case
if satisfies the third case
Driver code
utility function
since first element of the series is 7 , we initialise a variable with 7
Using iteration to find nth term
driver function
Returns n - th number in sequence 1 , 1 , 2 , 1 , 2 , 3 , 1 , 2 , 4 , ...
One by one subtract counts elements in different blocks
Driver code
Python Program to find correlation coefficient .
function that returns correlation coefficient .
sum of elements of array X .
sum of elements of array Y .
sum of X [ i ] * Y [ i ] .
sum of square of array elements .
use formula for calculating correlation coefficient .
Driver function
Find the size of array .
Function call to correlationCoefficient .
Python program to find number of spectators standing at a time
If the time is less than k then we can print directly t time .
If the time is n then k spectators are standing .
Otherwise we calculate the spectators standing .
Stores the value of n , k and t t is time n & k is the number of specators
Function to calculate weighted mean .
Take num array and corresponding weight array and initialize it .
Calculate the size of array .
Check the size of both array is equal or not .
Python code for finding the GCD of two floating numbers .
Recursive function to return gcd of a and b
base case
Driver Function .
Function that returns harmonic mean .
Declare sum variables and initialize with zero .
Driver code
Function that returns harmonic mean .
Driver code
Function to calculate the colliding point of two series
Iterating through n terms of the first series
x is i - th term of first series
d is first element of second series and c is common difference for second series .
If no term of first series is found
Driver code
PYTHON program to find Armstrong numbers in a range
Prints Armstrong Numbers in given range
number of digits calculation
compute sum of nth power of
checks if number i is equal to the sum of nth power of its digits
Driver code
Python3 program for Lucas Primality Test
Function to generate prime factors of n
If 2 is a factor
If prime > 2 is factor
This function produces power modulo some number . It can be optimized to using
Base cases
Generating and storing factors of n - 1
Array for random generator . This array is to ensure one number is generated only once
Shuffle random array to produce randomness
Now one by one perform Lucas Primality Test on random numbers generated .
This is to check if every factor of n - 1 satisfy the condition
If a ^ ( ( n - 1 ) / q ) equal 1
If all condition satisfy
Driver code
Find the maximum GCD pair with maximum sum
array to keep a count of existing elements
first [ i ] and second [ i ] are going to store maximum multiples of i in a [ ] and b [ ] respectively .
traverse through the first array to mark the elements in cnt
Find maximum multiple of every number in first array
Find maximum multiple of every number in second array We re - initialise cnt [ ] and traverse through the second array to mark the elements in cnt
if the multiple is present in the second array then store the max of number or the pre - existing element
traverse for every elements and checks the maximum N that is present in both the arrays
driver program to test the above function
Maximum possible value of elements in both arrays .
Python3 program to print Pierpont prime numbers smaller than n .
Finding all numbers having factor power of 2 and 3 Using sieve
Storing number of the form 2 ^ i . 3 ^ k + 1.
Finding prime number using sieve of Eratosthenes . Reusing same array as result of above computations in v .
Printing n pierpont primes smaller than n
Driver Code
Python program to check if a number is Woodball or not .
If number is even , return false .
If x is 1 , return true .
While x is divisible by 2
Divide x by 2
Count the power
If at any point power and x became equal , return true .
Driven Program
function to generate k numbers whose difference is divisible by m
Using an adjacency list like representation to store numbers that lead to same remainder .
stores the modulus when divided by m
If we found k elements which have same remainder .
If we could not find k elements
driver program to test the above function
Number is given as string .
We stop traversing digits , once it become smaller than current number . For that purpose we use small variable .
Array indicating if index i ( represents a digit ) is prime or not .
Store largest
If there is only one character , return the largest prime less than the number
If number starts with 1 , return number consisting of 7
Traversing each digit from right to left Continue traversing till the number we are forming will become less .
If digit is prime , copy it simply .
If not prime , copy the largest prime less than current number
If not prime , and there is no largest prime less than current prime
Make current digit as 7 Go left of the digit and make it largest prime less than number . Continue do that until we found a digit which has some largest prime less than it
If the given number is itself a prime .
Make last digit as highest prime less than given digit .
If there is no highest prime less than current digit .
Once one digit become less than any digit of input replace 7 ( largest 1 digit prime ) till the end of digits of number
If number include 0 in the beginning , ignore them . Case like 2200
Driver Program
Returns smallest value x such that 1 * n , 2 * n , 3 * n ... x * n have all digits from 1 to 9 at least once
taking temporary array and variable .
iterate till we get all the 10 digits at least once
checking all the digits
Driver code
utility function for digit sum
function for finding x
iterate from 1 to n . For every no . check if its digit sum with it isequal to n .
if no such i found return - 1
Driver Code
Python3 program to find 9 's complement of a number.
Driver code
To count number of ways in which number expressed as product of two different numbers
To store count of such pairs
Counting number of pairs upto sqrt ( n ) - 1
To return count of pairs
Driver program to test countWays ( )
Python3 program to count divisors of n that have at least one digit common with n
Function to return true if any digit of m is present in hash [ ] .
check till last digit
if number is also present in original number then return true
if no number matches then return 1
Count the no of divisors that have at least 1 digits same
Store digits present in n in a hash [ ]
marks that the number is present
last digit removed
loop to traverse from 1 to sqrt ( n ) to count divisors
if i is the factor
call the function to check if any digits match or not
if n / i != i then a different number , then check it also
return the answer
Driver Code
Python3 Program to decompose a matrix into lower and upper triangular matrix
Decomposing matrix into Upper and Lower triangular matrix
Upper Triangular
Summation of L ( i , j ) * U ( j , k )
Evaluating U ( i , k )
Lower Triangular
lower [ i ] [ i ] = 1 Diagonal as 1
Summation of L ( k , j ) * U ( j , i )
Evaluating L ( k , i )
setw is for displaying nicely
Displaying the result :
Lower
Upper
Driver code
method prints divisible parts if possible , otherwise prints 'Not possible
creating arrays to store reminder
looping over all suffix and storing reminder with f
getting suffix reminder from previous suffix reminder
looping over all prefix and storing reminder with s
getting prefix reminder from next prefix reminder
updating base value
now looping over all reminders to check partition condition
if both reminders are 0 and digit itself is not 0 , then print result and return
if we reach here , then string can ' be partitioned  under constraints
Driver code
calculate the no of contiguous subarrays which has same minimum and maximum
stores the answer
loop to traverse from 0 - n
start checking subarray from next element
traverse for finding subarrays
if the elements are same then we check further and keep a count of same numbers in 'r
the no of elements in between r and i with same elements .
the no of subarrays that can be formed between i and r
again start checking from the next index
returns answer
Driver Code
function that returns sum of digits in a number
initially sum of digits is 0
loop runs till all digits have been extracted
last digit from backside
sums up the digits
the number is reduced to the number removing the last digit
returns the sum of digits in a number
function to calculate the count of such occurrences
counter to calculate the occurrences
loop to traverse from n - 97 to n
calls the function to calculate the sum of digits of i
calls the function to calculate the sum of digits of a
if the summation is equal to n then increase counter by 1
returns the count
driver program to test the above function
calls the function to get the answer
Python program to check if a number can be raised to k
loop to change base n to base = k
Find current digit in base k
If digit is neither 0 nor 1
Make sure that only one 1 is present .
Driver code
Python3 program to check if octal representation of a number is prime
Function to Check no is in octal or not
Function To check no is palindrome or not
If number is already in octal , we traverse digits using repeated division with 10. Else we traverse digits using repeated division with 8
To store individual digits
Traversing all digits
checking if octal no is palindrome
Driver Code
Python3 program to find all factorial numbers smaller than or equal to n .
Compute next factorial using previous
Driver code
Returns sum of squares of digits of a number n . For example for n = 12 it returns 1 + 4 = 5
Returns true if n is Happy number else returns false .
A set to store numbers during repeated square sum process
Keep replacing n with sum of squares of digits until we either reach 1 or we endup in a cycle
Number is Happy if we reach 1
Replace n with sum of squares of digits
If n is already visited , a cycle is formed , means not Happy
Mark n as visited
Driver code
Python 3 program to check whether number has exactly three distinct factors or not
Utility function to check whether a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to check whether given number has three distinct factors or not
Find square root of number
Check whether number is perfect square or not
If number is perfect square , check whether square root is prime or not
Driver program
Function which computes the last digit of resultant of B ! / A !
if ( A == B ) : If A = B , B ! = A ! and B ! / A ! = 1
If difference ( B - A ) >= 5 , answer = 0
If non of the conditions are true , we iterate from A + 1 to B and multiply them . We are only concerned for the last digit , thus we take modulus of 10
driver function
Function to find sum of series .
Driver function
Python program to calculate product of factors of number
function to product the factors
If factors are equal , multiply only once
Otherwise multiply both
Driver Code
Python program to calculate product of factors of number
Iterative Function to calculate ( x ^ y ) in O ( log y )
function to count the factors
If factors are equal , count only once
Otherwise count both
Calculate product of factors
If numFactor is odd return power ( n , numFactor / 2 ) * sqrt ( n )
Driver Code
function to check whether decimal representation of given binary number is divisible by 10 or not
if last digit is '1' , then number is not divisible by 10
to accumulate the sum of last digits in perfect powers of 2
traverse from the 2 nd last up to 1 st digit in 'bin
if digit in '1
calculate digit 's position  from the right
according to the digit 's  position, obtain the last  digit of the applicable  perfect power of 2
if last digit is 0 , then divisible by 10
not divisible by 10
Driver program to test above function
A space optimized based Python 3 program to print first n Tribinocci numbers .
Initialize first three numbers
Loop to add previous three numbers for each number starting from 3 and then assign first , second , third to second , third , and curr to third respectively
Driver code
Function to create an array of prime numbers upto number 'n
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Append all the prime numbers to the list
Utility function to count the number of set bits
Driver program
Here prime numbers are checked till the maximum number of bits possible because that the maximum bit sum possible is the number of bits itself .
Python3 implementation of the above approach
Function to print count of trailing zeroes present in binary representation of N
Count set bits in ( N ^ ( N - 1 ) )
If res < 0 , return 0
Driver Code
Function call to print the count of trailing zeroes in the binary representation of N
Function to generate all the possible permutation and get the max score
If arr [ ] length is equal to N process the permutation
Generating the permutations
If the current element is chosen
Mark the current element as true
Recursively call for next possible permutation
Backtracking
Return the ans
Function to calculate the score
Stores the possible score for the current permutation
Traverse the permutation array
Return the final score
Driver Code
Stores the permutation
To display the result
Function to generate random numbers
Initialize the seed state
Traverse to generate required numbers of random numbers
Follow the linear congruential method
Driver Code
Seed value
Modulus parameter
Multiplier term
Number of Random numbers to be generated
To store random numbers
Function Call
Print the generated random numbers
Modulo
Fenwick tree to find number of indexes greater than x
Function to compute x ^ y % MOD
Loop to compute the x ^ y % MOD
Function to update the Binary Indexed Tree
Loop to update the BIT
Function to find prefix sum upto idx
Function to find number of ways to change the array such that MAX of array is same as LCM
Updating BIT with the frequency of elements
Maximum element in the array
For storing factors of i
Finding factors of i
Sorting in descending order
For storing ans
For storing number of indexes greater than the i - 1 element
Number of remaining factors
Number of indexes in the array with element factor [ j ] and above
Multiplying count with remFcators ^ ( indexes - prev )
Remove those counts which have lcm as i but i is not present
Adding cnt - toSubtract to ans ;
Driver Code
Function to find N - th term in the series
Driver Code
Function to find the nth 65537 - gon Number
Driver Code
Function to Find the Nth Hexacontatetragon Number
Driver Code
Function to find the N - th icosikaipentagon number
Driver code
Finding the nth chiliagon Number
Driver Code
Finding the nth pentacontagon Number
Driver Code
Python3 program to find the array value by repeatedly replacing max 2 elements with their absolute difference
Function that return last value of array
Build a binary max_heap .
Multipying by - 1 for max heap
For max 2 elements
Iterate until queue is not empty
If only 1 element is left
Return the last remaining value
Check that difference is non zero
Driver Code
Function to find the formed number
K -= 1 M ( 1 ) = N
Check if minimum digit is 0
Function that returns the product of maximum and minimum digit of N number .
Find the last digit .
Moves to next digit
Driver Code
Python3 implementation count the number of digits in a number
Function to count the number of digits in a number
Driver code
Function to find the sum of the series and print N terms of the given series
First Term
Loop to print the N terms of the series and find their sum
Driver code
Function to find the remainder
Bitwise AND with 3
Return x
Driver code
Python implementation to find Autobiographical numbers with length N
Function to return if the number is autobiographical or not
Converting the integer number to string
Extracting each character from each index one by one and converting into an integer
Initialize count as 0
Check if it is equal to the index i if true then increment the count
It is an Autobiographical number
Return false if the count and the index number are not equal
Function to print autobiographical number with given number of digits
Left boundary of interval
Right boundary of interval
Flag = 0 implies that the number is not an autobiographical no .
Driver Code
Function to check whether a number is a palindrome or not
Convert num to stringing
Comparing kth character from the beginning and N - kth character from the end . If all the characters match , then the number is a palindrome
If all the above conditions satisfy , it means that the number is a palindrome
Driver code
Recursive function to return the count of subsets with sum equal to the given value
The recursion is stopped at N - th level where all the subsets of the given array have been checked
Incrementing the count if sum is equal to 0 and returning the count
Recursively calling the function for two cases Either the element can be counted in the subset If the element is counted , then the remaining sum to be checked is sum - the selected element If the element is not included , then the remaining sum to be checked is the total sum
Driver code
Function to return an array of prime numbers upto n using Sieve of Eratosthenes
Function to return distinct prime factors from the given array
Creating an empty array to store distinct prime factors
Iterating through all the prime numbers and check if any of the prime numbers is a factor of the given input array
Driver code
Finding prime numbers upto 10000 using Sieve of Eratosthenes
function to calculate the sum of all cells adjacent value
Driver Code
''Function to return the count of required pairs
'' Sort the given array
''To store the required count
''Update j such that it is always > i
'' Find the first element arr[j] such that  (arr[j] - arr[i]) >= K  This is because after this element, all the elements will have absolute difference  with arr[i] >= k and the count of  valid pairs will be (n - j)
'' Update the count of valid pairs
'' Get to the next element to repeat the steps
'' Return the count
''Driver code
Function to return the volume of the rectangular right wedge
Driver code
Function to return the count of odd length squares possible
To store the required count
For all odd values of i
Add the count of possible squares of length i
Return the required count
Driver code
Function to return the number of anomalies
To store the count of anomalies
To store the Sum of the array elements
Find the Sum of the array elements
Count the anomalies
Driver code
Python3 implementation of the above approach
To store number of divisors and Prefix sum of such numbers
Function to find the number of integers 1 < x < N for which x and x + 1 have the same number of positive divisors
Count the number of divisors
Run a loop upto sqrt ( i )
If j is divisor of i
If it is perfect square
x and x + 1 have same number of positive divisors
Driver code
Function call
Required answer
Function to return length of the resultant number
If K is a multiple of 2 or 5
Generate all possible numbers 1 , 11 , 111 , 111 , ... , K 1 's
If number is divisible by k then return the length
Driver code
Function that returns true if the sequence will contain B
Driver code
Function to find the required permutation of first 2 * N natural numbers
Iterate in blocks of 2
We need more increments , so print in reverse order
We have enough increments , so print in same order
Driver Code
Function to return the maximum possible sum
Initialize degree for node u to 2
If u is the leaf node or the root node
Initialize degree for node v to 2
If v is the leaf node or the root node
Update the sum
Driver code
Function to print the integers that divide the maximum number of elements from the array
Initialize two lists to store rank and factors
Start from 2 till the maximum element in arr
Initialize a variable to count the number of elements it is a factor of
Maximum rank in the rank list
Print all the elements with rank m
Driver code
Returns sum of first n natural numbers
Driver code
Function for calculating median
First we sort the array
check for even case
Driver program
Function for calculating mean
Driver program
Python3 implementation of the above approach
Function to Check if the array has an element which is equal to product of all the remaining elements
Storing frequency in map
Calculate the product of all the elements
If the prod is a perfect square
then check if its square root exist in the array or not
Driver code
''Python Implementation of above approach
function to find minimum area of Rectangle
creating empty columns
fill columns with coordinates
check if rectangle can be formed
Driver code
We first convert to given base , then check if the converted number has two consecutive 0 s or not
Function to convert N into base K
Weight of each digit
Function to check for consecutive 0
Flag to check if there are consecutive zero or not
If there are two consecutive zero then returning False
Driver code
Python3 implementation of the approach
0 and 1 are not prime numbers
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
compute the answer
count of primes
sum of the primes
traverse the array
if the number is a prime
increase the count
if it is the K 'th prime
create the sieve
Python3 for finding super power of n
global hash for prime
sieve method for storing a list of prime
function to return super power
find the super power
Driver Code
Function to check if a number is prime
Corner cases
This is checked so that we can skip middle five numbers in below loop
Link list node
Push a new node on the front of the list .
Function to find count of prime nodes in a linked list
If current node is prime
Update count
Driver Code
Start with the empty list
create the linked list 15 -> 5 -> 6 -> 10 -> 17
Function call to print require answer
Function to find the smallest divisor
if divisible by 2
iterate from 3 to sqrt ( n )
Driver Code
Function that calculates Rabbits
Driver code
''Python3 program to evaluate the given expression
''Function to find the sum
''Driver Code
calculate sum upto N term of series
Driver code
Function to calculate count of numbers with XOR equals OR
variable to store count of unset bits
Driver code
Method to find the factorial of a number
Method to compute the sum
Iterate the loop till n and compute the formula
Driver code
Get x and n
Print output
Function to find sum of series
If i is even
If i is odd
return the result
Driver Code
Get n
Find the sum
Get n
Find the sum
calculate Nth term of series
Driver Function
Get the value of N
Get the sum of the series
''Python3 program to find the value of sin(n-theta) 
''Function to calculate the binomial  coefficient upto 15 
'' use simple DP to find coefficient 
''Function to find the value of cos(n-theta)
'' find sinTheta from sinTheta 
'' to store required answer 
'' use to toggle sign in sequence. 
''Driver code 
Python program to find N - th term of the series : 9 , 23 , 45 , 75 , 113. . .
calculate Nth term of series
Get the value of N
Find the Nth term and print it
''Python3 program to find the value of cos(n-theta)
''Function to calculate the binomial coefficient upto 15
'' use simple DP to find coefficient
''Function to find the value of cos(n-theta)
''find sinTheta from cosTheta
'' to store the required answer
'' use to toggle sign in sequence.
''Driver code
Function to calculate sum
Return sum
driver code
Function to calculate sum
when n is odd
when n is not odd
Driver code
Python 3 Program to check if a number can be expressed as a ^ b
Driver Code
Python3 program to calculate Root Mean Square
Function that Calculate Root Mean Square
Calculate square
Calculate Mean
Calculate Root
Driver code
Function to calculate the Remaining amount .
calculate Right hand Side ( RHS ) .
calculate Amount left by multiply it with original value .
Driver Code
modulo value
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with the result
y must be even now y = y >> 1 y = y / 2
function to find ff ( n )
In formula n is starting from zero
calculate answer using formula 2 ^ n * ( n ^ 2 + n + 2 ) - 1
whenever answer is greater than or equals to mod then modulo it .
adding modulo while subtraction is very necessary otherwise it will cause wrong answer
Driver code
function call
Python 3 program to find LCM of 2 numbers without using GCD
Function to return LCM of two numbers
Driver Code
Python program to print the first ' n ' terms of the Smarandache - Wellin Sequence
Function to collect first ' n ' prime numbers
List to store first ' n ' primes
Function to generate Smarandache - Wellin Sequence
Storing the first ' n ' prime numbers in a list
Driver Method
Function to calculate Pentatope number
Formula to calculate nth Pentatope number
Driver Code
Function to calculate Centered icosahedral number
Formula to calculate nth Centered icosahedral number
Driver Code
Function to calculate Centered square number function
Formula to calculate nth Centered square number
Driver Code
Function to find the sum of series
Driver code
Function to calculate Dodecagonal number
Formula to calculate nth Dodecagonal number
Driver Code
Python3 program to check if a number is Arithmetic number or not
Sieve Of Eratosthenes
1 is not a prime number
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Storing primes in an array
Update value in primesquare [ p * p ] , if p is prime .
Function to count divisors
If number is 1 , then it will have only 1 as a factor . So , total factors will be 1.
for storing primes upto n
Calling SieveOfEratosthenes to store prime factors of n and to store square of prime factors of n
ans will contain total number of distinct divisors
Loop for counting factors of n
a [ i ] is not less than cube root n
Calculating power of a [ i ] in n . cnt is power of prime a [ i ] in n .
if a [ i ] is a factor of n
incrementing power
Calculating number of divisors . If n = a ^ p * b ^ q then total divisors of n are ( p + 1 ) * ( q + 1 )
First case
Second case
Third casse
Returns sum of all factors of n .
Traversing through all prime factors .
This condition is to handle the case when n is a prime number greater than 2.
Check if number is Arithmetic Number or not .
Driver code
A formula based Python program to find sum of series with cubes of first n natural numbers
Driver Function
Storing N raised to power 0
Find next power by multiplying N with current power
Store digits of Power one by one .
Calculate carry .
Store carry in Power array .
Prints number formed by corner digits of powers of N .
Initializing empty result
One by one compute next powers and add their corner digits .
Call Function that store power in Power array .
Store unit and last digits of power in res .
Driver Code
Python3 program for finding the First digit of the large factorial number
Removing trailing 0 s as this does not change first digit .
loop for divide the fact until it become the single digit and return the fact
Driver Code
Python 3 program to find sum of the series 1.2 . 3 + 2.3 . 4 + 3.4 . 5 + ...
Driver Program
Python3 program to find n geometric means between A and B
Prints N geometric means between A and B .
calculate common ratio ( R )
for finding N the Geometric mean between A and B
Driver Code
function for digit sum
function to calculate count of integer s . t . integer - digSum > s
if n < s no integer possible
iterate for s range and then calculate total count of such integer if starting integer is found
if no integer found return 0
driver code
Function to find division without using ' / ' operator
Handling negative numbers
if num1 is greater than equal to num2 subtract num2 from num1 and increase quotient by one .
checking if neg equals to 1 then making quotient negative
Driver program
Function to find nonagonal number series .
driver Function
func for calualtion
for summation of square of first n - natural nos .
summation of first n natural nos .
return result
Driver Code
Python 3 implementation to check if the number is plus perfect or not
function to check plus perfect number
calculating number of digits
calculating plus perfect number
checking whether number is plus perfect or not
driver program
Python3 program to count number of distinct subsets in an array of distinct numbers
Returns 2 ^ n
driver code
Python3 Program to compute GST from original and net prices .
return value after calculate GST %
Driver program to test above functions
Function to find centered hexagonal number
Formula to calculate nth centered hexagonal
Driver Code
function to calculate the distance
main function
Python3 code to check twin prime
Function to check whether a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Returns true if n1 and n2 are twin primes
Driver code
Python3 code to find sum of series 2 , 22 , 222 , . .
function which return the sum of series
driver code
Python program to find sum even indexed Binomial Coefficient
Returns value of even indexed Binomial Coefficient Sum which is 2 raised to power n - 1.
Driver method
Function to find triangular number
For each iteration increase j by 1 and add it into k
Increasing j by 1
Add value of j into k and update k
Driven Code
functionn to find the sum of the given series
required sum
Driver program to test above
Function to find sum of series
Driver Code
function to calculate number of triangles in Nth step
Driver code
Return the nth Motzkin Number .
Base case
Finding i - th Motzkin number .
Driver code
Return the sum of kth group of positive odd integer .
Driver code
function to find x y and z that satisfy given equation .
driver code to test the above function
Function to print nth term of series 1 3 6 10 ... .
Driver code
Python 3 implementation of compution of arithmetic mean , geometric mean and harmonic mean
Function to calculate arithmetic mean , geometric mean and harmonic mean
Driver function
Returns n - th element of the series
Driver Code
python program to find if all prime factors of y divide x .
Returns true if all prime factors of y divide x .
Driver Code
Python program to print the sum of series . function to calculate sum of given series .
multiply ( a / i ) to previous term
store result in res
Driver code
Python code to convert Celsius scale to Fahrenheit scale
Used the formula
Driver Code
Python3 code to find the series with largest GCD and sum equals to n
stores the maximum gcd that can be possible of sequence .
if maximum gcd comes out to be zero then not possible
the smallest gcd possible is 1
traverse the array to find out the max gcd possible
checks if the number is divisible or not
x = x + 1
checks if x is smaller then the max gcd possible and x is greater then the resultant gcd till now , then r = x
checks if n / x is smaller than the max gcd possible and n / x is greater then the resultant gcd till now , then r = x
x = x + 1
traverses and prints d , 2d , 3d , ... , ( k - 1 ) d ,
main driver
Python code to find the total number of compositions of a natural number
function to return the total number of composition of n
Driver Code
Recursive Python program to count number of digits in a number
Driver Code
A DP based Python 3 program to print first n Tribonacci numbers .
Driver code
Program to print first n tribonacci numbers Matrix Multiplication function for 3 * 3 matrix
Recursive function to raise the matrix T to the power n
base condition .
recursively call to square the matrix
calculating square of the matrix T
if n is odd multiply it one time with M
base condition
T [ 0 ] [ 0 ] contains the tribonacci number so return it
Driver Code
Program to calculate the geometric mean of the given array elements .
function to calculate geometric mean and return float value .
declare sum variable and initialize it to 1.
Compute the sum of all the elements in the array .
compute geometric mean through formula antilog ( ( ( log ( 1 ) + log ( 2 ) + . . ... + log ( n ) ) / n ) and return the value to main function .
Driver Code
function call
Python3 implementation to find smallest number k such that the product of digits of k is equal to n
function to find smallest number k such that the product of digits of k is equal to n
if ' n ' is a single digit number , then it is the required number
stack the store the digits
repeatedly divide ' n ' by the numbers from 9 to 2 until all the numbers are used or ' n ' > 1
save the digit ' i ' that divides ' n ' onto the stack
if true , then no number ' k ' can be formed
pop digits from the stack ' digits ' and add them to 'k
required smallest number
Driver Code
Python3 program to check if a number is Magic number .
Note that the loop continues if n is 0 and sum is non - zero . It stops when n becomes 0 and sum becomes single digit .
Return true if sum becomes 1.
Driver code
Accepting sample input
Condition to check Magic number
Perform hashing for given n
perform hashing
check whether any arrangement exists
Create a hash for given number n The hash is of size 10 and stores count of each digit in n .
check for all possible multipliers
check hash table for both .
Driver Code
Python Code for Sylvester sequence
To store the product .
To store the current number .
Loop till n .
Driver program to test above function
Returns sum of first n natural numbers
Driver code
function to print hailstone numbers and to calculate the number of steps required
N is initially 1.
N is reduced to 1.
If N is Even .
N is Odd .
Driver Code
Function to generate Hailstone Numbers
Output : Number of Steps
Python3 program to count digits after dot when a number is divided by another .
ans = 0 Initialize result
calculating remainder
if this remainder appeared before then the numbers are irrational and would not converge to a solution the digits after decimal will be infinite
Driver Code
function to return the required n
if k is of form 2 ^ i - 1
driver program
Python3 program to find n - th number containing only 4 and 7.
If n is odd , append 4 and move to parent
If n is even , append7 and move to parent
Reverse res and return .
Driver code
program for finding no . of divisors
sieve method for prime calculation
Traversing through all prime numbers
calculate number of divisor with formula total div = ( p1 + 1 ) * ( p2 + 1 ) * ... . . * ( pn + 1 ) where n = ( a1 ^ p1 ) * ( a2 ^ p2 ) . ... * ( an ^ pn ) ai being prime divisor for n and pi are their respective power in factorization
Driver Code
Return smallest number having maximum prime factors .
Sieve of eratosthenes method to count number of unique prime factors .
Return maximum element in arr [ ]
Driver Code
function for decimal to binary conversion without using arithmetic operators
to store the binary equivalent of decimal
to get the last binary digit of the number ' n ' and accumulate it at the beginning of 'bin
right shift ' n ' by 1
required binary number
Driver Code
Remove ' : ' and convert it into an integer
Main function which finds difference
Change string ( eg . 2 : 21 -- > 221 , 00 : 23 -- > 23 )
Difference between hours
Difference between minutes
Convert answer again in string with ' : '
Driver code
Efficient python method to find sum of the elements of array that is halfway increasing and then halfway decreassing
Driver code
Python 3 implementation to count number of digits in the product of two numbers
function to count number of digits in the product of two numbers
if either of the number is 0 , then product will be 0
required count of digits
Driver program to test above
n == > Size of circle m == > Number of items k == > Initial position
n - k + 1 is number of positions before we reach beginning of circle If m is less than this value , then we can simply return ( m - 1 ) th position
Let us compute remaining items before we reach beginning .
We compute m % n to skip all complete rounds . If we reach end , we return n else we return m % n
Driver code
Python3 program to prints prime numbers smaller than n
Compute factorials and apply Wilson 's  theorem.
Driver code
Python program for product array puzzle with O ( n ) time and O ( 1 ) space .
epsilon value to maintain precision
to hold sum of all values
output product for each index antilog to find original product value
Driver code
Returns modified number with all even bits 0.
To store sum of bits at even positions .
To store bits to shift
One by one put all even bits to end
If current last bit is set , add it to ans
Next shift position
Driver code
Function to find the number closest to n and divisible by m
Find the quotient
1 st possible closest number
2 nd possible closest number
if true , then n1 is the required closest number
else n2 is the required closest number
Driver program to test above
Python program to check and print Pronic Numbers upto 200
function to check Pronic Number
Checking Pronic Number by multiplying consecutive numbers
Printing Pronic Numbers upto 200
To find minimum sum of product of number
Find factors of number and add to the sum
Return sum of numbers having minimum product
Driver Code
Prints minimum number with given digit sum and only allowed digits as 4 and 7.
Cases where all remaining digits are 4 or 7 ( Remaining sum of digits should be multiple of 4 or 7 )
If both 4 s and 7 s are there in digit sum , we subtract a 4.
Driver code
Function to find out minimum number
Count odd number of terms in array
Driver code
Function to print maximum number
Hashed array to store count of digits
Converting given number to string
Updating the count array
Result stores final number
traversing the count array to calculate the maximum number
return the result
Driver code
function to form the largest number by applying atmost one swap operation
for the rightmost digit , there will be no greater right digit
index of the greatest right digit till the current index from the right direction
traverse the array from second right element up to the left element
if ' num [ i ] ' is less than the greatest digit encountered so far
else
there is no greater right digit for 'num[i]
update ' right ' index
traverse the ' rightMax [ ] ' array from left to right
if for the current digit , greater right digit exists then swap it with its greater right digit and break
performing the required swap operation
required largest number
Driver program to test above
function to calculate nCr i . e . , number of ways to choose r out of n objects
Since nCr is same as nC ( n - r ) To decrease number of iterations
function to calculate binomial r . v . probability
Driver code
Python program to Find pair with maximum GCD in an array
function to find GCD of pair with max GCD in the array
Computing highest element
Array to store the count of divisors i . e . Potential GCDs
Iterating over every element
Calculating all the divisors
Divisor found
Incrementing count for divisor
Element / divisor is also a divisor Checking if both divisors are not same
Checking the highest potential GCD
If this divisor can divide at least 2 numbers , it is a GCD of at least 1 pair
Array in which pair with max GCD is to be found
Size of array
function to find GCD of pair with max GCD in the array
Calculating MAX in array
Maintaining count array
Variable to store the multiples of a number
Iterating from MAX to 1 GCD is always between MAX and 1 The first GCD found will be the highest as we are decrementing the potential GCD
Iterating from current potential GCD till it is less than MAX
A multiple found
Incrementing potential GCD by itself To check i , 2 i , 3 i ... .
2 multiples found , max GCD found
Array in which pair with max GCD is to be found
Size of array
returns number of 1 s from the binary number
Counting 1 s
Check if number is evil or not
Converting n to binary form
Calculating Remainder Storing the remainders in binary form as a number
Calling the count_one function to count and return number of 1 s in bin
Driver Code
returns number of valid pairs
initialize k
loop till imin <= n
Initialize result
max i with given k floor ( n / k )
adding k * ( number of i with floor ( n / i ) = k to ans
set imin = imax + 1 and k = n / imin
Driver code
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
x = x % p ; Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 ; y = y / 2
Returns modulo inverse of a with respect to m using extended Euclid Algorithm
q is quotient
m is remainder now , process same as Euclid 's algo 
Make x1 positive
Function to calculate the above expression
Initialize the result
Compute first part of expression
Compute second part of expression i . e . , ( ( 4 ^ ( n + 1 ) - 1 ) / 3 ) mod 10 Since division of 3 in modulo can ' t ▁ ▁ ▁ be ▁ performed ▁ directly ▁ therefore ▁ we ▁ ▁ ▁ need ▁ to ▁ find ▁ it ' s modulo Inverse
Driver code
Returns power of p in n !
initializing answer
initializing
loop until temp <= n
add number of numbers divisible by n
each time multiply temp by p
Driver Code
Function to return the binary equivalent of decimal value N
To store the binary number
Count used to store exponent value
Driver code
Function to convert binary to decimal
Initializing base value to 1 , i . e 2 ^ 0
Driver Code
Python3 program for calculating factorial of a number using Stirling Approximation
Function for calculating factorial
value of natural e
evaluating factorial using stirling approximation
Driver Code
A function will return number of pair whose XOR is odd
To store count of odd and even numbers
Increase even if number is even otherwise increase odd
Return number of pairs
Driver Code
Max Iterations
Function to check whether number is Lychrel Number
Function to check whether the number is Palindrome
Function to reverse the number
Driver Code
Returns n - th rectangular number
Driver code
Python3 Program to find root of a function , f ( x )
Function to calculate f ( x )
Taking f ( x ) = x ^ 3 + 2 x ^ 2 + 10 x - 20
Calculating various constants required to calculate x3
Taking the root which is closer to x2
checking for resemblance of x3 with x2 till two decimal places
Driver Code
Python3 program to efficiently compute values of euler totient function for multiple inputs .
Stores prime numbers upto MAX - 1 values
Finds prime numbers upto MAX - 1 and stores them in vector p
if prime [ i ] is not marked before
fill vector for every newly encountered prime
run this loop till square root of MAX , mark the index i * j as not prime
function to find totient of n
this loop runs sqrt ( n / ln ( n ) ) times
subtract multiples of p [ i ] from r
Remove all occurrences of p [ i ] in n
when n has prime factor greater than sqrt ( n )
preprocess all prime numbers upto 10 ^ 5
Python3 implementation for finding nth number made of prime digits only
Prints n - th number where each digit is a prime number
Finding the length of n - th number
Count of numbers with len - 1 digits
Count of numbers with i digits
if i is the length of such number then n < 4 * ( 4 ^ ( i - 1 ) - 1 ) / 3 and n >= 4 * ( 4 ^ i - 1 ) / 3 if a valid i is found break the loop
check for i + 1
Finding ith digit at ith place
j = 1 means 2 j = 2 means ... j = 4 means 7
if prev_count + 4 ^ ( len - i ) is less than n , increase prev_count by 4 ^ ( x - i )
else print the ith digit and break
Driver Code
Returns ( - 1 ) ^ n
Driver program
Python program which check is a number divided with every element in list or not
Checking if a number is divided by every element or not
Driver code
function to calculate factorial
to print range of length n having all composite integers
driver code to test above functions
Python3 program to find minimum value that can be assigned to all elements so that product becomes greater than current product .
sort the array to apply Binary search
using log property add every logarithmic value of element to val val = 0 where ld is long double
set left and right extremities to find min value
multiplying n to mid , to find the correct min value
Driver code
Python 3 implementation to find the sum of all the terms in the nth row of the given series
function to find the required sum
sum = n * ( 2 * n ^ 2 + 1 )
Driver Code
Python implementation to find first digit of a single number
Keep dividing by 10 until it is greater than equal to 10
driver function
Python3 program to count appearances of a digit ' d ' in range from [ 0. . n ]
Initialize result
Count appearances in numbers starting from d .
When the last digit is equal to d
When the first digit is equal to d then
increment result as well as number
In case of reverse of number such as 12 and 21
Driver code
Python 3 code for implementing cos function
Function for calculation
Converting degrees to radian
maps the sum along the series
holds the actual value of sin ( n )
Driver Code
Function to multiply x with large number stored in vector v . Result is stored in v .
Calculate res + prev carry
updation at ith position
Returns sum of digits in n !
One by one multiply i to current vector and update the vector .
Find sum of digits in vector v [ ]
Driver code
Finds two sides of a right angle triangle if it they exist .
if n is odd
case of n = 1 handled separately
case of n = 2 handled separately
Driver Code
Python3 program to make a number odd
Return 1 if already odd
Check on dividing with a number when the result becomes odd Return that number
If n is divided by i and n / i is odd then return i
Driver code
Returns XOR of all subarray xors
if even number of terms are there , all numbers will appear even number of times . So result is 0.
else initialize result by 0 as ( a xor 0 = a )
Driver code
Returns count of iterations to fill arr [ ] with 1 s .
Start traversing the array
Traverse until a 0 is found
Count contiguous 0 s
Condition for Case 3
Condition to check if Case 1 satisfies :
If count_zero is even
If count_zero is odd
Reset count_zero
Case 2
Update res
Driver code
Python3 program to demonstrate that Fibonacci numbers that are divisible by their indexes have indexes as either power of 5 or multiple of 12.
storing Fibonacci numbers
Print consecutive numbers from last to first
Driver code
Return n - th number in series made of 4 and 7
create an array of size ( n + 1 )
If i is odd
Driver code
Returns maximum sum of numbers with LCM as N
Initialize result
Finding a divisor of n and adding it to max_sum
Driver code
Python3 program to demonstrate finding square root of a number using sqrt ( )
Python3 program to find maximum value of an integer for which factorial can be calculated on your system
when fact crosses its size it gives negative value
Driver Code
Function to check any number of array is divisible by k or not
If any array element is divisible by k , then LCM of whole array should also be divisible .
Driver Code
Python 3 program to find closest tidy number smaller than the given number
check whether string violates tidy property
if string violates tidy property , then decrease the value stored at that index by 1 and replace all the value stored right to that index by 9
Driver code
num will store closest tidy number
Returns count of m digit numbers having n as divisor
Generating largest number of m digit
Generating largest number of m - 1 digit
returning number of dividend
Driver code
function to calculate nth number made of even digits only
variable to note how many such numbers have been found till now
bool variable to check if 1 , 3 , 5 , 7 , 9 is there or not
checking each digit of the number
If 1 , 3 , 5 , 7 , 9 is found temp is changed to false
temp is true it means that it does not have 1 , 3 , 5 , 7 , 9
If nth such number is found , return it
Driver Code
function to find nth number made of even digits only
If n = 1 return 0
vector to store the digits when converted into base 5
Reduce n to n - 1 to exclude 0
Reduce n to base 5 number and store digits
pushing the digits into vector
variable to represent the number after converting it to base 5. Since the digits are be in reverse order , we traverse vector from back
return 2 * result ( to convert digits 0 , 1 , 2 , 3 , 4 to 0 , 2 , 4 , 6 , 8.
Driver Code
Function to find that number divisible by 25 or not .
If length of string is single digit then it 's  not divisible by 25
Driver code
Function to find that number divisible by 16 or not
Empty string
If there is double digit
If there is triple digit
If number formed by last four digits is divisible by 16.
Driver code
A simple Python 3 program to find index of given Fibonacci number .
if Fibonacci number is less than 2 , its index will be same as number
iterate until generated fibonacci number is less than given fibonacci number
res keeps track of number of generated fibonacci number
Driver program to test above function
Return if year is leap year or not .
Given a date , returns number of days elapsed from the beginning of the current year ( 1 stjan ) .
Given a year and days elapsed in it , finds date by storing results in d and m .
Add x days to the given date .
y2 is going to store result year and offset2 is going to store offset days in result year .
x may store thousands of days . We find correct year and offset in the year .
Find values of day and month from offset of result year .
Driven Program
Python3 program to check whether a given number is k - hyperperfect
Function to find the sum of all proper divisors ( excluding 1 and N )
Iterate only until sqrt N as we are going to generate pairs to produce divisors
As divisors occur in pairs , we can take the values i and N / i as long as i divides N
Function to check whether the given number is prime
Base and corner cases
Since integers can be represented as some 6 * k + y where y >= 0 , we can eliminate all integers that can be expressed in this form
Start from 5 as this is the next prime number
Returns true if N is a K - Hyperperfect number . Else returns false .
Condition from the definition of hyperperfect
Driver code
First two statements test against the condition N = 1 + K * ( sum ( proper divisors ) )
Python3 program to generate k digits of n ^ n
function to calculate first k digits of n ^ n
take log10 of n ^ n . log10 ( n ^ n ) = n * log10 ( n )
We now try to separate the decimal and integral part of the / product . The floor function returns the smallest integer less than or equal to the argument . So in this case , product - floor ( product ) will give us the decimal part of product
we now exponentiate this back by raising 10 to the power of decimal part
We now try to find the power of 10 by which we will have to multiply the decimal part to obtain our final answer
Driver Code
number -- > Current value of number . x -- > Current digit to be considered k -- > Remaining number of digits
Try all possible greater digits
Generates all well ordered numbers of length k .
Driver code
Returns ( a * b ) % mod
Update a if it is more than or equal to mod
If b is odd , add a with result
Here we assume that doing 2 * a doesn 't cause overflow
b >>= 1 ; b = b / 2
Driver Code
Write Python3 code here
Driver code
Counts the number of 2 s in a number at d - th digit
if the digit in spot digit is
Counts the number of '2' digits between 0 and n
Convert integer to String to find its length
Traverse every digit and count for every digit
Driver Code
f = f * i WRONG APPROACH as f may exceed ( 2 ^ 64 - 1 )
f = ( f * i ) % M Now f never can exceed 10 ^ 9 + 7
Returns n - th star number
Driver code
Function to find that number divisible by 5 or not . The function assumes that string length is at least one .
Driver code
Returns true if num is Tidy
To store previous digit ( Assigning initial value which is more than any digit )
Traverse all digits from right to left and check if any digit is smaller than previous .
Driver code
Function to find nth square free number
To maintain count of square free number
Loop for square free numbers
Checking whether square of a number is divisible by any number which is a perfect square
If number is square free
If the cnt becomes n , return the number
Driver Code
Python 3 Program to find the nth square free number
Maximum prime number to be considered for square divisibility
Maximum value of result . We do binary search from 1 to MAX_RES
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Store all prime numbers in a [ ]
Function to count integers upto k which are having perfect squares as factors . i is index of next prime number whose square needs to be checked . curr is current number whos square to be checked .
variable to store square of prime
If value of greatest integer becomes zero
Counting integers with squares as factor
Inclusion ( Recur for next prime number )
Exclusion ( Recur for next prime number )
Final count
Function to return nth square free number
Computing primes and storing it in an array a [ ]
Applying binary search
' c ' contains Number of square free numbers less than or equal to 'mid
If c < n , then search right side of mid else search left side of mid
nth square free number
Driver Program
Python3 program to find if it is possible to write a number n as product of exactly k positive numbers greater than 1.
Prints k factors of n if n can be written as multiple of k numbers . Else prints - 1
list to store all prime factors of n
insert all 2 's in list
n must be odd at this point so we skip one element ( i = i + 2 )
This is to handle when n > 2 and n is prime
if size ( a ) < k , k factors are not possible
printing first k - 1 factors
calculating and printing product of rest of numbers
Driver code
Returns the required number
loop to recursively check the numbers less than or equal to given number
Keep traversing digits from right to left . For every digit check if it is smaller than prev_dig
We found the required number
Driver Code
Prints the largest number smaller than s and digits in non - decreasing order .
array to store digits of number
conversion of characters of string int number
variable holds the value of index after which all digits are set 9
Checking the condition if the digit is less than its left digit
If first digit is 0 no need to print it
Driver Code
Python3 implementation of Naive method to count all divisors
function to count the divisors
If divisors are equal , count only one
else : Otherwise count both
Driver program to test above function
Python 3 implementation of doors open or closed
Function to check whether ' n ' has even number of factors or not
if ' n ' is a perfect square it has odd number of factors
else ' n ' has even number of factors
Function to find and print status of each door
If even number of factors final status is closed
else odd number of factors final status is open
Driver program
Function to validate number ( Check iffrequency of a digit is less than thedigit itself or not )
If current digit of temp is same as i
if frequency is greater than digit value , return false
Driver Code
Function to check whether a number is divisible by 36 or not
null number cannot be divisible by 36
single digit number other than 0 is not divisible by 36
number formed by the last 2 digits
if number is not divisible by 4
number is divisible by 4 calculate sum of digits
sum of digits is not divisible by 9
Number is divisible by 4 and 9 hence , number is divisible by 36
Driver program
Function to find that number divisible by 8 or not
Empty string
If there is single digit
If there is double digit
If number formed by last three digits is divisible by 8.
Driver code
Function to count number of digits
Function to check whether a number is prime or not . Returns 0 if prime else - 1
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function to print prime points
counting digits
As single and double digit numbers do not have left and right number pairs
Finding all left and right pairs . Printing the prime points accordingly . Discarding first and last index point
Calculating left number
Calculating right number
Prime point condition
No prime point found
Driver Program
Function to calculate and return the power of any given number
Function to check power representations recursively
Initialize number of ways to express x as n - th powers of different natural numbers
Calling power of ' i ' raised to 'n
Recursively check all greater values of i
If sum of powers is equal to x then increase the value of result .
Return the final result
Driver Code .
Function to return gcd of a and b
Print generators of n
1 is always a generator
A number x is generator of GCD is 1
Driver Code
Function to find that number divisible by 3 or not
Compute sum of digits
Check if sum of digits is divisible by 3.
main function
Below is Python3 code to count total perfect divisors
Pre - compute counts of all perfect divisors of all numbers upto MAX .
Iterate through all the multiples of i * i
Increment all such multiples by 1
Returns count of perfect divisors of n .
Driver code
Python3 program to find prime factorization of a number n in O ( Log n ) time with precomputation allowed .
stores smallest prime factor for every number
Calculating SPF ( Smallest Prime Factor ) for every number till MAXN . Time Complexity : O ( nloglogn )
marking smallest prime factor for every number to be itself .
separately marking spf for every even number as 2
checking if i is prime
marking SPF for all numbers divisible by i
marking spf [ j ] if it is not previously marked
A O ( log n ) function returning prime factorization by dividing by smallest prime factor at every step
precalculating Smallest Prime Factor
calling getFactorization function
Python3 program to print nearest element with at least one common prime factor .
Pre - computation of smallest prime divisor of all numbers
Prime number will have same divisor
Function to calculate all divisors of input array
Pre - compute all the divisors of array element by using prime factors
Traverse all elements ,
For every divisor of current element , find closest element .
Visit divisor if not visited
Fetch the index of visited divisor
Update the divisor index to current index
Set the minimum distance
Set the min distance of current index ' i ' to nearest one
Add 1 as indexing starts from 0
Set the min distance of found index 'ind
Add 1 as indexing starts from 0
Simple sieve to find smallest prime divisor of number from 2 to MAX
function to calculate nearest distance of every array elements
Print the nearest distance having GDC > 1
Returns length of the largest subsequence with GCD more than 1.
Finding the Maximum value in arr [ ]
Iterate from 2 to maximum possible divisor of all give values
If we found divisor , increment count
Driver code
Python3 program to find sum prime factors in given range .
using sieve method to evaluating the prime factor of numbers
if i is prime
setting number of prime factor of a prime number .
Returns sum of counts of prime factors in range from l to r . This function mainly uses count [ ] which is filled by Sieve ( )
finding the sum of number of prime factor of numbers in a range .
Driver Code
Generate n numbers with factors in factor [ ]
array of k to store next multiples of given factors
Prints n numbers output = 0 ; Next number to print as output
Find the next smallest multiple
Printing minimum in each iteration print the value if output is not equal to current value ( to avoid the duplicates )
incrementing the current value by the respective factor
Driver code
Function to check reversible number
Calculate reverse of n
Calculate sum of number and its reverse
Check for reverse number reach digit must be odd
Driver Code
function for GCD
Function return smallest + ve integer that holds condition A ^ k ( mod N ) = 1
result store power of A that rised to the power N - 1
modular arithmetic
return smallest + ve integer
increment power
Driver program
Python3 program to find sum of product of x and y such that n / x = y ( Integer Division )
Return the sum of natural number in a range .
n * ( n + 1 ) / 2.
Return the sum of product x * y .
Iterating i from 1 to sqrt ( n )
Finding the upper limit .
Finding the lower limit .
Driven Code
Python3 program to find primitive root of a given number n
Returns True if n is prime
Corner cases
This is checked so that we can skip middle five numbers in below loop
Iterative Function to calculate ( x ^ n ) % p in O ( logy )
x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Utility function to store prime factors of a number
Print the number of 2 s that divide n
n must be odd at this po . So we can skip one element ( Note i = i + 2 )
While i divides n , print i and divide n
This condition is to handle the case when n is a prime number greater than 2
Function to find smallest primitive root of n
Check if n is prime or not
Find value of Euler Totient function of n . Since n is a prime number , the value of Euler Totient function is n - 1 as there are n - 1 relatively prime numbers .
Find prime factors of phi and store in a set
Check for every number from 2 to phi
Iterate through all prime factors of phi . and check if we found a power with value 1
Check if r ^ ( ( phi ) / primefactors ) mod n is 1 or not
If there was no power with value 1.
If no primitive root found
Driver Code
Return minimum power terms of x required
if x is 1 , return n since any power of 1 is 1 only .
Consider n = a * x + b where a = n / x and b = n % x .
Update count of powers for 1 's added
Repeat the process for reduced n
Driver code
function for sum of first n Perrin number .
if ( n == 0 ) : n = 0
if ( n == 1 ) : n = 1
if ( n == 2 ) : n = 2
calculate k = 5 sum of three previous step .
Sum remaining numbers
calculate next term
Driver code
Returns k 'th common factor of x and y.
Find smaller of two numbers
Count common factors until we either reach small or count becomes k .
If we reached small
Driver code
Python program to find minimum number which divide n to make it a perfect square .
Return the minimum number to be divided to make n a perfect square .
Since 2 is only even prime , compute its power separately .
If count is odd , it must be removed by dividing n by prime number .
If count is odd , it must be removed by dividing n by prime number .
Driver Code
Function to find if n reaches to 1 or not .
If there is a cycle formed , we can 't reach 1.
If n is odd then pass n = 3 n + 1 else n = n / 2
Wrapper over isToOneRec ( )
To store numbers visited using recursive calls .
Driver Code
Function to find if n reaches to 1 or not .
Return true if n is positive
Drivers code
Return the Greatest common Divisor of two numbers .
Prints Greatest Common Divisor of number formed by n repeating x times and y times .
Finding GCD of x and y .
Print n , g times .
Driver code
GCD function to compute the greatest divisor among a and b
Returns first number whose factorial is divisible by x .
Result
Remove common factors
We found first i .
Count of natural numbers whose factorials are divisible by x but not y .
Return difference between first natural number whose factorial is divisible by y and first natural number whose factorial is divisible by x .
Driver code
Returns first number whose factorial divides x .
i = 1 ; Result
Driver code
Generate all prime numbers less than n .
Initialize all entries of boolean array as True . A value in isPrime [ i ] will finally be False if i is Not a prime , else True bool isPrime [ n + 1 ]
If isPrime [ p ] is not changed , then it is a prime
Update all multiples of p
Prints a prime pair with given sum
Generating primes using Sieve
Traversing all numbers to find first pair
Driven program
Utility method to get first digit of x
method to return count of numbers with same starting and ending digit from 1 upto x
get ten - spans from 1 to x
add 9 to consider all 1 digit numbers
Find first and last digits
If last digit is greater than first digit then decrease count by 1
Method to return count of numbers with same starting and ending digit between start and end
Driver Code
Generate all prime numbers less than n .
Initialize all entries of boolean array as true . A value in isPrime [ i ] will finally be false if i is Not a prime , else true bool isPrime [ n + 1 ] ;
If isPrime [ p ] is not changed , then it is a prime
Update all multiples of p
Returns true if n is right - truncatable , else false
Generating primes using Sieve
Checking whether the number remains prime when the last ( " right " ) digit is successively removed
Driven program
Generate all prime numbers less than n .
Initialize all entries of boolean array as true . A value in prime [ i ] will finally be false if i is Not a prime , else true bool prime [ n + 1 ]
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Function to generate mersenne primes less than or equal to n
Create a boolean array " prime [ 0 . . n ] "
Generating primes using Sieve
Generate all numbers of the form 2 ^ k - 1 and smaller than or equal to n .
Checking whether number is prime and is one less then the power of 2
Driver Code
Return sum of modulo K of first N natural numbers .
Iterate from 1 to N && evaluating and adding i % K .
Driver Code
Return sum of modulo K of first N natural numbers .
Counting the number of times 1 , 2 , . . , K - 1 , 0 sequence occurs .
Finding the number of elements left which are incomplete of sequence Leads to Case 1 type .
adding multiplication of number of times 1 , 2 , . . , K - 1 , 0 sequence occurs and sum of first k natural number and sequence from case 1.
Driver Code
Python program to find the smallest number to multiply to convert a floating point number into natural number . Finding GCD of two number
Returns smallest integer k such that k * str becomes natural . str is an input floating point number
Find size of string representing a floating point number .
Below is used to find denominator in fraction form .
Used to find value of count_after_dot
To find numerator in fraction form of given number . For example , for 30.25 , numerator would be 3025.
If there was no dot , then number is already a natural .
Find denominator in fraction form . For example , for 30.25 , denominator is 100
Result is denominator divided by GCD - of - numerator - and - denominator . For example , for 30.25 , result is 100 / GCD ( 3025 , 100 ) = 100 / 25 = 4
Driver Program
Calculating the maximum number of handshake using derived formula .
Driver Code
Utility function to check divisibility by digit
( N [ i ] - '0' ) gives the digit value and form the number
Function to count digits which appears in N and divide N divide [ 10 ] -- > array which tells that particular digit divides N or not count [ 10 ] -- > counts frequency of digits which divide N
We initialize all digits of N as not divisible by N .
start checking divisibility of N by digits 2 to 9
if digit divides N then mark it as true
Now traverse the number string to find and increment result whenever a digit divides N .
Driver Code
Python implementation of Optimized approach to generate Aliquot Sequence
Function to calculate sum of all proper divisors
Note that this loop runs till square root of n
If divisors are equal , take only one of them
Otherwise take both
calculate sum of all proper divisors only
Function to print Aliquot Sequence for an input n .
Print the first term
Calculate next term from previous term
Print next term
Driver Code
Returns count of numbers from 1 to n that can be formed using x and y .
Create an auxiliary array and initialize it as false . An entry arr [ i ] = True is going to mean that i can be formed using x and y
x and y can be formed using x and y .
Initialize result
Traverse all numbers and increment result if a number can be formed using x and y .
If i can be formed using x and y
Then i + x and i + y can also be formed using x and y .
Increment result
Driver code
Function to find reverse of any number
Sieve method used for generating emirp number ( use of sieve ofEratosthenes )
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Traverse all prime numbers
Find reverse a number
A number is emrip if it is not a palindrome number and its reverse is also prime .
Mark reverse prime as false so that it 's  not printed again
Driver Code
An Optimized Solution to check Abundant Number in PYTHON
Function to calculate sum of divisors
Note that this loop runs till square root of n
If divisors are equal , take only one of them
else : Otherwise take both
calculate sum of all proper divisors only
Function to check Abundant Number
Return true if sum of divisors is greater than n .
Driver program to test above function
Python program to find if a number is powerful or not .
function to check if the number is powerful
First divide the number repeatedly by 2
If only 2 ^ 1 divides n ( not higher powers ) , then return false
if n is not a power of 2 then this loop will execute repeat above process
Find highest power of " factor " that divides n
If only factor ^ 1 divides n ( not higher powers ) , then return false
n must be 1 now if it is not a prime numenr . Since prime numbers are not powerful , we return false if n is not 1.
Driver code
Python program to implement an Optimized Solution to check Deficient Number
Function to calculate sum of divisors
Note that this loop runs till square root of n
If divisors are equal , take only one of them
else : Otherwise take both
Function to check Deficient Number
Check if sum ( n ) < 2 * n
Driver program to test above function
Python implementation of above approach
Converting integer to string
Initialising sum to 0
Traversing through the string
Converting character to int
Comparing number and sum
Driver Code
passing this number to get result function
Python program to to check whether a number is Smith Number or not .
array to store all prime less than and equal to 10 ^ 6
utility function for sieve of sundaram
In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than MAX , we reduce MAX to half This array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j
Main logic of Sundaram . Mark all numbers which do not generate prime number by doing 2 * i + 1
Since 2 is a prime number
Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .
Returns true if n is a Smith number , else false .
Find sum the digits of prime factors of n
If primes [ i ] is a prime factor , add its digits to pDigitSum .
If n != 1 then one prime factor still to be summed up
All prime factors digits summed up Now sum the original number digits
If sum of digits in prime factors and sum of digits in original number are same , then return true . Else return false .
Driver method Finding all prime numbers before limit . These numbers are used to find prime factors .
Python program to check if a number is Kaprekar number or not
Returns true if n is a Kaprekar number , else false
Count number of digits in square
Split the square at different poitns and see if sum of any pair of splitted numbers is equal to n .
To avoid numbers like 10 , 100 , 1000 ( These are not Karprekar numbers
Find sum of current parts and compare with n
compare with original number
Driver method
Returns true if x is Keith , else false .
Store all digits of x in a vector " terms " Also find number of digits and store in " n " .
n = 0 ; n is number of digits in x
To get digits in right order ( from MSB to LSB )
Keep finding next trms of a sequence generated using digits of x until we either reach x or a number greate than x
Next term is sum of previous n terms
When the control comes out of the while loop , either the next_term is equal to the number or greater than it . If next_term is equal to x , then x is a Keith number , else not
Driver Code
This function returns true if n can be expressed sum of consecutive .
We basically return true if n is a power of two
Driver code
Returns sum of even Fibonacci numbers which are less than or equal to given limit .
Initialize first two even prime numbers and their sum
calculating sum of even Fibonacci value
get next even value of Fibonacci sequence
If we go beyond limit , we break loop
Move to next even number and update sum
Driver code
Python3 program to count numbers with k odd divisors in a range .
Utility function to check if number is perfect square or not
Utility Function to return count of divisors of a number
Note that this loop runs till square root
If divisors are equal , counbt it only once
Otherwise print both
Function to calculate all divisors having exactly k divisors between a and b
calculate only for perfect square numbers
check if number is perfect square or not
total divisors of number equals to k or not
Driver program to run the case
Function which return nth even fibonnaci number
calculation of Fn = 4 * ( Fn - 1 ) + Fn - 2
Driver Code
Python 3 implementation of the above idea to process queries of finding a number with maximum divisors .
Finds smallest prime factor of allnumbers in range [ 1 , maxn ) and stores them in smallest_prime [ ] , smallest_prime [ i ] should contain the smallest prime that divides i
Initialize the smallest_prime factors of all to infinity
to be built like eratosthenes sieve
prime number will have its smallest_prime equal to itself
if ' i ' is the first prime number reaching 'j
number of divisors of n = ( p1 ^ k1 ) * ( p2 ^ k2 ) . . . ( pn ^ kn ) are equal to ( k1 + 1 ) * ( k2 + 1 ) . . . ( kn + 1 ) . This functionfinds the number of divisors of all numbersin range [ 1 , maxn ) and stores it in divisors [ ] divisors [ i ] stores the number of divisors i has
we can obtain the prime factorization of the number n n = ( p1 ^ k1 ) * ( p2 ^ k2 ) . . . ( pn ^ kn ) using the smallest_prime [ ] array , we keep dividing n by its smallest_prime until it becomes 1 , whilst we check if we have need to set k zero
use p ^ k , initialize k to 0
builds segment tree for divisors [ ] array
leaf node
build left and right subtree
combine the information from left and right subtree at current node
returns the maximum number of divisors in [ l , r ]
If current node 's range is disjoint  with query range
If the current node stores information for the range that is completely inside the query range
Returns maximum number of divisors from left or right subtree
Driver code
First find smallest prime divisors for all the numbers
Then build the divisors [ ] array to store the number of divisors
Build segment tree for the divisors [ ] array
Limit on result
Function to calculate n 'th smart number 
Initialize all numbers as not prime
iterate to mark all primes and smart number
Traverse all numbers till maximum limit
' i ' is maked as prime number because it is not multiple of any other prime
mark all multiples of ' i ' as non prime
If i is the third prime factor of j then add it to result as it has at least three prime factors .
Sort all smart numbers
return n 'th smart number 
Driver Code
Python3 program to count of steps until one of the two numbers become 0.
Returns count of steps before one of the numbers become 0 after repeated subtractions .
If y divides x , then simply return x / y .
Else recur . Note that this function works even if x is smaller than y because in that case first recursive call exchanges roles of x and y .
Driver code
Python3 implementation of program
Map to store the count of each prime factor of a
Function that calculate the count of each prime factor of a number
Function to calculate all common divisors of two given numbers a , b -- > input integer numbers
Find count of each prime factor of a
stores number of common divisors
Find the count of prime factors of b using distinct prime factors of a
Prime factor of common divisor has minimum cnt of both a and b
Driver code
Program to count number of values that satisfy x ^ 2 = 1 mod p where x lies in range [ 1 , n ]
Initialize result
Traverse all numbers smaller than given number p . Note that we don 't traverse from  1 to n, but 1 to p
If x is a solution , then count all numbers of the form x + i * p such that x + i * p is in range [ 1 , n ]
The largest number in the form of x + p * i in range [ 1 , n ]
Add count of numbers of the form x + p * i . 1 is added for x itself .
Driver code
This function checks validity of kaprekar ' s ▁ constant . ▁ It ▁ returns ▁ kaprekar ' s constant for any four digit number " n " such that all digits of n are not same .
Store current n as previous number
Get four digits of given number
Sort all four dgits in ascending order And giet in the form of number " asc "
Get all four dgits in descending order in the form of number " desc "
Get the difference of two numbers
If difference is same as previous , we have reached kaprekar 's constant
Else recur
A wrapper over kaprekarRec ( )
Trying few four digit numbers , we always get 6174
This Python3 program gives result approximated to 5 decimal places .
This will be the nearest perfect square to s
This is the sqrt of pSq
Find the nearest perfect square to s
calculate d
calculate P
calculate A
calculate sqrt ( S ) .
Driver Code
method return x ^ a in log ( a ) time
Method returns maximum product obtained by breaking N
base case 2 = 1 + 1
base case 3 = 2 + 1
breaking based on mod with 3
If divides evenly , then break into all 3
If division gives mod as 1 , then break as 4 + power of 3 for remaining part
If division gives mod as 2 , then break as 2 + power of 3 for remaining part
Driver code to test above methods
Python program to find sum of digits of a number until sum becomes single digit .
method to find sum of digits of a number until sum becomes single digit
Driver method
''Driver program to test the above function
Returns count of all numbers smaller than or equal to n and multiples of 3 or 7 or both
Driver code
Iterative function to reverse digits of num
Function to check whether the number is palindrome or not
Reverse and Add Function
Reversing the digits of the number
Adding the reversed number with the original
Checking whether the number is palindrome or not
Driver Code
Function to implement Stein 's Algorithm
GCD ( 0 , b ) == b ; GCD ( a , 0 ) == a , GCD ( 0 , 0 ) == 0
look for factors of 2 a is even
b is odd
both a and b are even
a is odd , b is even
reduce larger number
Driver code
Array to store the sum of digits
Utility function to evaluate a character 's integer value
This function receives the string representation of the number and precomputes the sum array
This function receives l and r representing the indices and prs the required output
Driver function to check the program
n , sum -- > value of inputs out -- > output array index -- > index of next digit to be filled in output array
Base case
If number becomes N - digit
if sum of its digits is equal to given sum , print it
Traverse through every digit . Note that here we ' re ▁ considering ▁ leading ▁ ▁ 0' s as digits
append current digit to number
recurse for next digit with reduced sum
This is mainly a wrapper over findNDigitNumsUtil . It explicitly handles leading digit
output array to store N - digit numbers
fill 1 st position by every digit from 1 to 9 and calls findNDigitNumsUtil ( ) for remaining positions
Driver Code
A function that returns true only if num contains one digit
comparison operation is faster than division operation . So using following instead of " return ▁ num ▁ / ▁ 10 ▁ = = ▁ 0 ; "
A recursive function to find out whether num is palindrome or not . Initially , dupNum contains address of a copy of num .
Base case ( needed for recursion termination ) : This statement / mainly compares the first digit with the last digit
This is the key line in this method . Note that all recursive / calls have a separate copy of num , but they all share same copy of dupNum . We divide num while moving up the recursion tree
The following statements are executed when we move up the recursion call tree
At this point , if num % 10 contains ith digit from beginning , then ( dupNum ) % 10 contains ith digit from end
The main function that uses recursive function isPalUtil ( ) to find out whether num is palindrome or not
If num is negative , make it positive
Create a separate copy of num , so that modifications made to address dupNum don 't change the input number.  dupNum = num; dupNum = num
Function to generate all primes and checking whether number is palindromic or not
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Print all palindromic prime numbers
checking whether the given number is prime palindromic or not
Driver Code
Python3 Program to print first n numbers that are k - primes
A function to count all prime factors of a given number
Count the number of 2 s that divide n
n must be odd at this point . So we can skip one element ( Note i = i + 2 )
While i divides n , count i and divide n
This condition is to handle the case when n is a prime number greater than 2
A function to print the first n numbers that are k - almost primes .
Print this number if it is k - prime
Increment count of k - primes printed so far
Driver Code
Function to return gcd of a and b
Function to convert the obtained fraction into it 's simplest form
Finding gcd of both terms
Converting both terms into simpler terms by dividing them by common factor
Function to add two fractions
Finding gcd of den1 and den2
Denominator of final fraction obtained finding LCM of den1 and den2 LCM * GCD = a * b
Changing the fractions to have same denominator Numerator of the final fraction obtained
Calling function to convert final fraction into it 's  simplest form
Driver Code
This function receives an integer n and returns the maximum number of pieces that can be made form pancake using n cuts
Use the formula
Driver Code
A optimised Python3 program to find the number of digits in a factorial
Returns the number of digits present in n ! Since the result can be large long long is used as return type
factorial of - ve number doesn 't exists
base case
Use Kamenetsky formula to calculate the number of digits
Driver Code
Python3 program to find the number of digits in a factorial
This function receives an integer n , and returns the number of digits present in n !
factorial exists only for n >= 0
base case
else iterate through n and calculate the value
Driver code
Python 3 program to count number of sub - arrays whose sum is even using brute force Time Complexity - O ( N ^ 2 ) Space Complexity - O ( 1 )
Find sum of all subarrays and increment result if sum is even
Driver code
Python 3 program to count number of sub - arrays with even sum using an efficient algorithm Time Complexity - O ( N ) Space Complexity - O ( 1 )
A temporary array of size 2. temp [ 0 ] is going to store count of even subarrays and temp [ 1 ] count of odd . temp [ 0 ] is initialized as 1 because there a single even element is also counted as a subarray
Initialize count . sum is sum of elements under modulo 2 and ending with arr [ i ] .
i ' th ▁ iteration ▁ computes ▁ sum ▁ of ▁ arr [ 0 . . i ] ▁ ▁ under ▁ modulo ▁ 2 ▁ and ▁ increments ▁ even / odd ▁ ▁ count ▁ according ▁ to ▁ sum ' s value
2 is added to handle negative numbers
Increment even / odd count
Use handshake lemma to count even subarrays ( Note that an even cam be formed by two even or two odd )
Driver code
Computes value of first fibonacci numbers
Initialize result
Add remaining terms
Driver program to test above function
arr - array to store the combination index - next location in array num - given number reducedNum - reduced number
Base condition
If combination is found , print it
Find the previous number stored in arr [ ] . It helps in maintaining increasing order
note loop starts from previous number i . e . at array location index - 1
next element of array is k
call recursively with reduced number
Function to find out all combinations of positive numbers that add upto given number . It uses findCombinationsUtil ( )
array to store the combinations It can contain max n elements
find all combinations
Driver code
utility function to find pow ( base , exponent ) % modulus
utility function to find gcd
Returns k such that b ^ k = 1 ( mod p )
Initializing k with first odd prime number
function return p - 1 ( = x argument ) as x * 2 ^ e , where x will be odd sending e as reference because updation is needed in actual e
Main function for finding the modular square root
a and p should be coprime for finding the modular square root
If below expression return ( p - 1 ) then modular square root is not possible
expressing p - 1 , in terms of s * 2 ^ e , where s is odd number
finding smallest q such that q ^ ( ( p - 1 ) / 2 ) ( mod p ) = p - 1
q - 1 is in place of ( - 1 % p )
Initializing variable x , b and g
keep looping until b become 1 or m becomes 0
finding m such that b ^ ( 2 ^ m ) = 1
updating value of x , g and b according to algorithm
Driver Code
p should be prime
Python3 program to check given number number y
logarithm function to calculate value
Note : this is double
compare to the result1 or result2 both are equal
Driver Code
Python program to find roots of a quadratic equation
Prints roots of quadratic equation ax * 2 + bx + x
If a is 0 , then equation is not quadratic , but linear
else : d < 0
Driver Program
Function call
This function returns true if n is perfect square , else false
the_sum is sum of all odd numbers . i is used one by one hold odd numbers
Driver code
Python 3 program to find the count of positive integer of a given number of digits that contain atleast one zero
Returns count of ' d ' digit integers have 0 as a digit
Driver Code
Returns count Dyck paths in n x n grid
Compute value of 2 nCn
return 2 nCn / ( n + 1 )
Driver Code
Returns True if ' num ' is triangular , else False
Base case
A Triangular number must be sum of first n natural numbers
Driver code
Python3 program to check if a number is a triangular number using quadratic equation .
Returns True if num is triangular
Considering the equation n * ( n + 1 ) / 2 = num The equation is : a ( n ^ 2 ) + bn + c = 0
Find roots of equation
checking if root1 is natural
checking if root2 is natural
Driver code
To return value of a char . For example , 2 is returned for '2' . 10 is returned for ' A ' , 11 for 'B
Function to convert a number from given base ' b ' to decimal
Initialize power of base
Initialize result
Decimal equivalent is str [ len - 1 ] * 1 + str [ len - 2 ] * base + str [ len - 3 ] * ( base ^ 2 ) + ...
A digit in input number must be less than number 's base
Driver code
Utility function to find gcd
Function to print the desired output
Solution doesn 't exist   if GCD is not 1
Else apply the formula
Driver Code
Helper function to xor two characters
Helper function to flip the bit
function to convert binary string to gray string
MSB of gray code is same as binary code
Compute remaining bits , next bit is computed by doing XOR of previous and current in Binary
Concatenate XOR of previous bit with current bit
function to convert gray code string to binary string
MSB of binary code is same as gray code
Compute remaining bits
If current bit is 0 , concatenate previous bit
Else , concatenate invert of previous bit
Driver Code
Recursive function for finding sum of series calculated - number of terms till which sum of terms has been calculated current - number of terms for which sum has to be calculated N - Number of terms in the function to be calculated
checking termination condition
product of terms till current
recursive call for adding terms next in the series
input number of terms in the series
invoking the function to calculate the sum
To compute ( a * b ) % mod
res = 0 ; Initialize result
If b is odd , add ' a ' to result
Multiply ' a ' with 2
Divide b by 2
Return result
Driver Code
Python3 program to count inversions using Binary Indexed Tree
Returns sum of arr [ 0. . index ] . This function assumes that the array is preprocessed and partial sums of array elements are stored in BITree .
Traverse ancestors of BITree [ index ]
Add current element of BITree to sum
Move index to parent node in getSum View
Updates a node in Binary Index Tree ( BITree ) at given index in BITree . The given value ' val ' is added to BITree [ i ] and all of its ancestors in tree .
Traverse all ancestors and add 'val
Add ' val ' to current node of BI Tree
Update index to that of parent in update View
Converts an array to an array with values from 1 to n and relative order of smaller and greater elements remains same . For example , 7 , - 90 , 100 , 1 is converted to 3 , 1 , 4 , 2
Create a copy of arrp in temp and sort the temp array in increasing order
Traverse all array elements
lower_bound ( ) Returns pointer to the first element greater than or equal to arr [ i ]
Returns inversion count arr [ 0. . n - 1 ]
Convert arr to an array with values from 1 to n and relative order of smaller and greater elements remains same . For example , 7 , - 90 , 100 , 1 is converted to 3 , 1 , 4 , 2
Create a BIT with size equal to maxElement + 1 ( Extra one is used so that elements can be directly be used as index )
Traverse all elements from right .
Get count of elements smaller than arr [ i ]
Add current element to BIT
Driver program
Returns value of n ! % p
Driver Code
Returns modulo inverse of a with respect to m using extended Euclid Algorithm . Refer below post for details : https : www . geeksforgeeks . org / multiplicative - inverse - under - modulo - m /
Apply extended Euclid Algorithm
q is quotient
m is remainder now , process same as euclid 's algo
Make x1 positive
k is size of num [ ] and rem [ ] . Returns the smallest number x such that : x % num [ 0 ] = rem [ 0 ] , x % num [ 1 ] = rem [ 1 ] , ... ... ... ... ... ... x % num [ k - 2 ] = rem [ k - 1 ] Assumption : Numbers in num [ ] are pairwise coprime ( gcd for every pair is 1 )
Compute product of all numbers
Initialize result
Apply above formula
Driver method
k is size of num [ ] and rem [ ] . Returns the smallest number x such that : x % num [ 0 ] = rem [ 0 ] , x % num [ 1 ] = rem [ 1 ] , ... ... ... ... ... ... x % num [ k - 2 ] = rem [ k - 1 ] Assumption : Numbers in num [ ] are pairwise coprime ( gcd forevery pair is 1 )
As per the Chinise remainder theorem , this loop will always break .
Check if remainder of x % num [ j ] is rem [ j ] or not ( for all j from 0 to k - 1 )
If all remainders matched , we found x
Else try next number
Driver Code
Returns nCr % p . In this Lucas Theorem based program , this function is only called for n < p and r < p .
The array C is going to store last row of pascal triangle at the end . And last entry of last row is nCr
Top row of Pascal Triangle
One by constructs remaining rows of Pascal Triangle from top to bottom
Fill entries of current row using previous row values
Lucas Theorem based function that returns nCr % p . This function works like decimal to binary conversion recursive function . First we compute last digits of n and r in base p , then recur for remaining digits
Base case
Compute last digits of n and r in base p
Driver Code
To limit on the largest Fibonacci number to be used
Array to store fibonacci numbers . fib [ i ] is going to store ( i + 2 ) 'th Fibonacci number
Stores values in fib and returns index of the largest fibonacci number smaller than n .
Fib [ 0 ] stores 2 nd Fibonacci No .
Fib [ 1 ] stores 3 rd Fibonacci No .
Keep Generating remaining numbers while previously generated number is smaller
Return index of the largest fibonacci number smaller than or equal to n . Note that the above loop stopped when fib [ i - 1 ] became larger .
Returns pointer to the char string which corresponds to code for n
allocate memory for codeword
index of the largest Fibonacci f <= n
Mark usage of Fibonacci f ( 1 bit )
Subtract f from n
Move to Fibonacci just smaller than f
Mark all Fibonacci > n as not used ( 0 bit ) , progress backwards
additional '1' bit
return pointer to codeword
Driver Code
Function to check whether n is a good number and doesn ' t ▁ contain ▁ digit ▁ ' d
Get last digit and initialize sum from right side
If last digit is d , return
Traverse remaining digits
Current digit
If digit is d or digit is less than or equal to sum of digits on right side
Update sum and n
Print Good numbers in range [ L , R ]
Traverse all numbers in given range
If current numbers is good , print it
Driver Code
Print good numbers in [ L , R ]
Returns count of all squares in a rectangle of size m x n
If n is smaller , swap m and n
Now n is greater dimension , apply formula
Driver Code
Returns the greatest Fibonacci Number smaller than or equal to n .
Corner cases
Finds the greatest Fibonacci Number smaller than n .
Prints Fibonacci Representation of n using greedy algorithm
Find the greates Fibonacci Number smaller than or equal to n
Print the found fibonacci number
Reduce n
Driver code test above functions
A Dynamic Programming based solution to count number of ways to represent n as sum of four numbers
" parts " is number of parts left , n is the value left " nextPart " is starting point from where we start trying for next part .
Base cases
If this subproblem is already solved
Count number of ways for remaining number n - i remaining parts " parts - 1" , and for all part varying from ' nextPart ' to 'n
Store computed answer in table and return result
This function mainly initializes dp table and calls countWaysUtil ( )
Driver Code
This functions finds all primes smaller than ' limit ' using simple sieve of eratosthenes .
Create a boolean array " mark [ 0 . . limit - 1 ] " and initialize all entries of it as true . A value in mark [ p ] will finally be false if ' p ' is Not a prime , else true .
One by one traverse all numbers so that their multiples can be marked as composite .
If p is not changed , then it is a prime
Update all multiples of p
Print all prime numbers and store them in prime
Python3 program to print all primes smaller than n , using segmented sieve
This method finds all primes smaller than ' limit ' using simple sieve of eratosthenes . It also stores found primes in list prime
Create a boolean list " mark [ 0 . . n - 1 ] " and initialize all entries of it as True . A value in mark [ p ] will finally be False if ' p ' is Not a prime , else True .
If p is not changed , then it is a prime
Update all multiples of p
Print all prime numbers and store them in prime
Prints all prime numbers smaller than 'n
Compute all primes smaller than or equal to square root of n using simple sieve
Divide the range [ 0. . n - 1 ] in different segments We have chosen segment size as sqrt ( n ) .
While all segments of range [ 0. . n - 1 ] are not processed , process one segment at a time
To mark primes in current range . A value in mark [ i ] will finally be False if ' i - low ' is Not a prime , else True .
Use the found primes by simpleSieve ( ) to find primes in current range
Find the minimum number in [ low . . high ] that is a multiple of prime [ i ] ( divisible by prime [ i ] ) For example , if low is 31 and prime [ i ] is 3 , we start with 33.
Mark multiples of prime [ i ] in [ low . . high ] : We are marking j - low for j , i . e . each number in range [ low , high ] is mapped to [ 0 , high - low ] so if range is [ 50 , 100 ] marking 50 corresponds to marking 0 , marking 51 corresponds to 1 and so on . In this way we need to allocate space only for range
Numbers which are not marked as False are prime
Update low and high for next segment
Driver Code
Python3 program to find the smallest twin in given range
Create a boolean array " prime [ 0 . . high ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
Look for the smallest twin
If p is not marked , then it is a prime
Update all multiples of p
Now print the smallest twin in range
Driver Code
Python 3 program to find if a given number is fancy or not .
To store mappings of fancy pair characters . For example 6 is paired with 9 and 9 is paired with 6.
Find number of digits in given number
Traverse from both ends , and compare characters one by one
If current characters at both ends are not fancy pairs
Driver program
Python3 program to find next sparse number
Find binary representation of x and store it in bin [ ] . bin [ 0 ] contains least significant bit ( LSB ) , next bit is in bin [ 1 ] , and so on .
There my be extra bit in result , so add one extra bit
The position till which all bits are finalized
Start from second bit ( next to LSB )
If current bit and its previous bit are 1 , but next bit is not 1.
Make the next bit 1
Make all bits before current bit as 0 to make sure that we get the smallest next number
Store position of the bit set so that this bit and bits before it are not changed next time .
Find decimal equivalent of modified bin [ ]
Driver Code
n is size of arr [ ] and m is sizeof gcd [ ]
Map to store frequency of array elements
Map to store number of subsets with given gcd
Initialize maximum element . Assumption : all array elements are positive .
Find maximum element in array and fill frequency map .
Run a loop from max element to 1 to find subsets with all gcds
Run a loop for all multiples of i
Sum the frequencies of every element which is a multiple of i
Excluding those subsets which have gcd > i but not i i . e . which have gcd as multiple of i in the subset . for ex : { 2 , 3 , 4 } considering i = 2 and subset we need to exclude are those having gcd as 4
Number of subsets with GCD equal to ' i ' is pow ( 2 , add ) - 1 - sub
Driver Code
Python program to compute sum of pairwise bit differences
traverse over all bits
count number of elements with i 'th bit set
Add " count ▁ * ▁ ( n ▁ - ▁ count ) ▁ * ▁ 2" to the answer
Driver prorgram
Utility function to print array arr [ 0. . n - 1 ]
Recursive Function to generate all non - increasing sequences with sum x arr [ ] -- > Elements of current sequence curr_sum -- > Current Sum curr_idx -- > Current index in arr [ ]
If current sum is equal to x , then we found a sequence
Try placing all numbers from 1 to x - curr_sum at current index
The placed number must also be smaller than previously placed numbers and it may be equal to the previous stored value , i . e . , arr [ curr_idx - 1 ] if there exists a previous number
Place number at curr_idx
Recur
Try next number
A wrapper over generateUtil ( )
Array to store sequences on by one
Driver program
Returns true if n is perfect
To store sum of divisors
Find all divisors and add them
If sum of divisors is equal to n , then n is a perfect number
Driver program
Returns true if ' num ' can be represented using ' dig ' digits in 'base
Base case
If there are more than 1 digits left and number is more than base , then remove last digit by doing num / base , reduce the number of digits and recur
return true of num can be represented in ' dig ' digits in any base from 2 to 32
Check for all bases one by one
driver code
Function to compute num ( mod a )
Initialize result
One by one process all digits of 'num
Driver program
A naive method to find modulor multiplicative inverse of ' a ' under modulo 'm
Driver Code
Function call
Returns modulo inverse of a with respect to m using extended Euclid Algorithm Assumption : a and m are coprimes , i . e . , gcd ( a , m ) = 1
q is quotient
m is remainder now , process same as Euclid 's algo
Update x and y
Make x positive
Driver code
Function call
Function to return gcd of a and b
A simple method to evaluate Euler Totient Function
Driver Code
Python 3 program to calculate Euler ' s ▁ Totient ▁ Function ▁ using ▁ Euler ' s product formula
Consider all prime factors of n and for every prime factor p , multiply result with ( 1 - 1 / p )
Check if p is a prime factor .
If yes , then update n and result
If n has a prime factor greater than sqrt ( n ) ( There can be at - most one such prime factor )
Driver program to test above function
Function to return num % divisor without using % ( modulo ) operator
While divisor is smaller than n , keep subtracting it from num
Driver code
Function to find factorial of a number
A Simple Function to return value of 1 / 1 ! + 1 / 2 ! + . . + 1 / n !
Driver program to test above functions
Returns value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- - * 1 ]
A Binomial coefficient based function to find nth catalan number in O ( n ) time
Calculate value of 2 nCn
return 2 nCn / ( n + 1 )
Function to find possible ways to put balanced parenthesis in an expression of length n
If n is odd , not possible to create any valid parentheses
Otherwise return n / 2 'th  Catalan Number
Driver Code
A utility function to check if a given character is operand
utility function to find value of and operand
This function evaluates simple expressions . It returns - 1 if the given expression is invalid .
Base Case : Given expression is empty
The first character must be an operand , find its value
Traverse the remaining characters in pairs
The next character must be an operator , and next to next an operand
If next to next character is not an operand
Update result according to the operator
If not a valid operator
Driver Code
Function to print first n Fibonacci Numbers
Driven code
Recursive function to return gcd of a and b
Function to return LCM of two numbers
Driver program to test above function
Driver code
Calling accumulate function , passing first , last element and initial sum , which is 0 in this case .
A function that prints given number in words
Get number of digits in given number
Base cases
The first string is not used , it is to make array indexing simple
The first string is not used , it is to make array indexing simple
The first two string are not used , they are to make array indexing simple
Used for debugging purpose only
For single digit number
Iterate while num is not '\0
Code path for first 2 digits
here len can be 3 or 4
Code path for last 2 digits
Need to explicitly handle 10 - 19. Sum of the two digits is used as index of " two _ digits " array of strings
Need to explicitely handle 20
Rest of the two digit numbers i . e . , 21 to 99
Assuming that integer takes 4 bytes , there can be maximum 10 digits in a integer
Check the last character of string
Driver Code
python program for the above approach
Stores the moves in the matrix
Function to find if the current cell lies in the matrix or not
Function to perform the DFS Traversal
Iterate over the direction vector
DFS Call
Function to check if it satisfy the given criteria or not
Keeps the count of cell having value as 0
If condition doesn 't satisfy
Keeps the track of unvisted cell having values 0
Increasing count of black_spot
Find the GCD of N and M
Print the result
Driver Code
Function to count the subsequences having odd bitwise OR value
Stores count of odd elements
Stores count of even elements
Traverse the array arr [ ]
If element is odd
Return the final answer
Driver Code
Given array arr [ ]
Structure of a node of th tree
Function to compress all the nodes on the same vertical line
Stores node by compressing all nodes on the current vertical line
Check if i - th bit of current bit set or not
Iterate over the range [ 0 , 31 ]
Stores count of set bits at i - th positions
Stores count of clear bits at i - th positions
Traverse the array
If i - th bit of current element is set
Update S
Update NS
If count of set bits at i - th position is greater than count of clear bits
Update ans
Update getBit
Function to compress all the nodes on the same vertical line with a single node that satisfies the condition
Map all the nodes on the same vertical line
Function to traverse the tree and map all the nodes of same vertical line to vertical distance
Storing the values in the map
Recursive calls on left and right subtree
Getting the range of horizontal distances
Driver Code
Function Call
Function to find the OR of AND of all subsets of the array for each query
An array to store the bits
Itearte for all the bits
Iterate over all the numbers and store the bits in bits [ ] array
Itearte over all the queries
Replace the bits of the value at arr [ queries [ p ] [ 0 ] ] with the bits of queries [ p ] [ 1 ]
Substitute the value in the array
Find OR of the bits [ ] array
Print the answer
Given Input
Function Call
Function to calculate the XOR sum of all ANDS of all pairs on A and B
variable to store anshu
when there has been no AND of pairs before this
Driver code
Input
Function call
Function to count set bits in a number
Stores count of set bits in xo
Iterate over each bits of xo
If current bit of xo is 1
Update count
Update xo
Function to find length of shortest path between the nodes a and b
Stores XOR of a and b
Stores the count of set bits in xorVal
If cnt is an even number
Driver Code
Given N
Given a and b
Function call
Python3 program for the above approach
Function to calculate Bitwise XOR of digits present in X
Stores the Bitwise XOR
While X is true
Update Bitwise XOR of its digits
Return the result
Function to print matrix after converting each matrix element to XOR of its digits
Traverse each row of arr [ ] [ ]
Traverse each column of arr [ ] [ ]
Function to convert the given matrix to required XOR matrix
Traverse each row of arr [ ] [ ]
Traverse each column of arr [ ] [ ]
Store the current matrix element
Find the xor of digits present in X
Stores the XOR value
Print resultant matrix
Driver Code
Python 3 program for the above approach
Function to find the sum of Bitwise AND of sum of pairs and their Bitwise AND from a given array
Stores the total sum
Check if jth bit is set
Stores the right shifted element by ( i + 1 )
Update the value of X
Push in vector vec
Sort the vector in ascending order
Traverse the vector vec
Stores the value 2 ^ ( i + 1 ) - 2 ^ ( i ) - vec [ j ]
Stores count of numbers whose value > Y
Update the ans
Return the ans
Driver Code
Function to count the number of set bits in an integer N
Stores the count of set bits
While N is non - zero
If the LSB is 1 , then increment ans by 1
Return the total set bits
Function to count the number of subarrays having made up of elements having K set bits
Stores the total count of resultant subarrays
Traverse the given array
If the current element has K set bits
Otherwise
Increment count of subarrays
Return total count of subarrays
Driver Code
Function Call
Function to count the number of subarrays of the given array having odd Bitwise XOR
Stores number of odd numbers upto i - th index
Stores number of required subarrays starting from i - th index
Store the required result
Find the number of subarrays having odd Bitwise XOR values starting at 0 - th index
Check if current element is odd
If the current value of odd is not zero , increment c_odd by 1
Find the number of subarrays having odd bitwise XOR value starting at ith index and add to result
Add c_odd to result
Print the result
Driver Code
Given array
Stores the size of the array
Function to print required sum for every valid index i
Store the required sum for current array element
Generate all possible pairs ( arr [ i ] , arr [ j ] )
Update the value of req_sum
Print required sum
Given array
Size of array
Function call
Function to compute sum of Bitwise OR of each element in arr1 [ ] with all elements of the array arr2 [ ]
Declaring an array of size 32 to store the count of each bit
Traverse the array arr1 [ ]
Current bit position
While num exceeds 0
Checks if i - th bit is set or not
Increment the count at bit_position by one
Increment bit_position
Right shift the num by one
Traverse in the arr2 [ ]
Store the ith bit value
Total required sum
Traverse in the range [ 0 , 31 ]
Check if current bit is set
Increment the Bitwise sum by N * ( 2 ^ i )
Right shift num by one
Left shift valee_at_that_bit by one
Print the sum obtained for ith number in arr1 [ ]
Given arr1 [ ]
Given arr2 [ ]
Size of arr1 [ ]
Size of arr2 [ ]
Function Call
Function that counts the pairs from the array whose Bitwise OR is K
Stores the required count of pairs
Generate all possible pairs
Perform OR operation
If Bitwise OR is equal to K , increment count
Print the total count
Driver Code
Function Call
Initialize the adjacency list to represent the tree
Marks visited / unvisited vertices
Stores the required count of nodes
DFS to visit each vertex
Mark the current node as visited
Update the counter xor is K
Visit adjacent nodes
Calculate Bitwise XOR of edges in the path
Recursive call to dfs function
Function to construct the tree and prrequired count of nodes
Add edges
Print answer
Driver Code
Given K and R
Given edges
Number of vertices
Function call
Function to find the minimum XOR of the subarray of size K
K must be smaller than or equal to n
Initialize the beginning index of result
Compute XOR sum of first subarray of size K
Initialize minimum XOR sum as current xor
Traverse from ( k + 1 ) ' th ▁ ▁ element ▁ to ▁ n ' th element
XOR with current item and first item of previous subarray
Update result if needed
Print the minimum XOR
Driver Code
Given array arr
Given subarray size K
Function call
Function to find the maximum number of consecutive 1 's after flipping all zero in a K length subarray
Initialize variable
Iterate unil n - k + 1 as we have to go till i + k
Iterate in the array in left direction till you get 1 else break
Iterate in the array in right direction till you get 1 else break
Compute the maximum length
Return the length
Driver code
Array initialization
Size of array
Python3 program to count of array elements which do not form a pair with sum equal to a power of 2 with any other array element
Function to calculate and return the count of elements
Stores the frequencies of every array element
Stores the count of removals
For every element , check if it can form a sum equal to any power of 2 with any other element
Store pow ( 2 , j ) - a [ i ]
Pair possible
If no pair possible for the current element
Return the answer
Driver Code
Python3 program for the above approach
Function to find the array
Loop through all bits in number
If bit is set in AND then set it in every element of the array
If bit is not set in AND
But set in b ( OR )
Set bit position in first element
If bit is not set in c then set it in second element to keep xor as zero for bit position
Calculate AND , OR and XOR of array
Check if values are equal or not
If not , then array is not possible
Driver Code
Given Bitwise AND , OR , and XOR
Function Call
Function to find the minimum value of XOR of AND and OR of any pair in the given array
Sort the array
Traverse the array arr [ ]
Compare and Find the minimum XOR value of an array .
Return the final answer
Driver Code
Given array
Function Call
Function to return count of required subarrays
If K is odd
Not possible to have any such subarrays
Stores the starting index of every subarrays
Stores the count of required subarrays
Stores Xor of the current subarray .
Xor of first subarray of size K
If all elements appear even number of times , increase the count of such subarrays
Remove the starting element from the current subarray
Traverse the array for the remaining subarrays
Update Xor by adding the last element of the current subarray
Increment i
If currXor becomes 0 , then increment count
Update currXor by removing the starting element of the current subarray
Return count
Driver Code
Python3 program to count number of even and odd set bits elements after XOR with a given element
Store the count of set bits
Brian Kernighan 's algorithm
Function to solve Q queries
Store set bits in X
Count set bits of X
Driver code
Function to find the largest number whose frequency is equal to itself .
Find the maximum element in the array
Driver code
Function to find the largest number whose frequency is equal to itself .
Adding 65536 to keep the count of the current number
Right shifting by 16 bits to find the count of the number i
Driver code
Function returns sum of both the binary number without carry
XOR of N and M
Driver code
Python3 program to check if all the set bits of the binary representation of N are at least K places away .
Initialize check and count with 0
The i - th bit is a set bit
This is the first set bit so , start calculating all the distances between consecutive bits from here
If count is less than K return false
Adding the count as the number of zeroes increase between set bits
Driver code
This function returns minimum number of bits to be flipped in X and Y to make X | Y = Z
If current bit in Z is set and is also set in either of X or Y or both
If current bit in Z is set and is unset in both X and Y
Set that bit in either X or Y
If current bit in Z is unset and is set in both X and Y
Unset the bit in both X and Y
If current bit in Z is unset and is set in either X or Y
Unset that set bit
Driver Code
''function for finding count of possible subsequence
'' creating a map to count the frequency of each element
store frequency of each element
iterate through the map
add all possible combination for key equal zero
add all ( odd number of elements ) possible combination for key other than zero
Driver function
Function to calculate Minimum possible value of the Maximum XOR in an array
base case
Divide elements into two sections
Traverse all elements of current section and divide in two groups
Check if one of the sections is empty
explore both the possibilities using recursion
Function to calculate minimum XOR value
Start recursion from the most significant pos position
Driver code
Function to find the Nth number with exactly two bits set
Keep incrementing until we reach the partition of ' N ' stored in bit_L
set the rightmost bit based on bit_R
Driver code
Python3 program to find XOR of all Prime numbers in an Array at positions divisible by K
0 and 1 are not prime numbers
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Function to find the required XOR
To store XOR of the primes
Traverse the array
If the number is a prime
If index is divisible by k
Print the xor
Driver code
Function call
Function to find the XOR of all elements in the array
Resultant variable
Iterating through every element in the array
Find XOR with the result
Return the XOR
Driver Code
Function call
Function that count the XOR of B with all the element in A having even set bit
Count the set bits in A [ i ]
check for even or Odd
To store the count of element for B such that XOR with all the element in A having even set bit
Count set bit for B [ i ]
check for Even or Odd
Driver Code
Returns true if n is even , else odd
n ^ 1 is n + 1 , then even , else odd
Driver code
Function to return the bitwise OR of all the even numbers upto N
Initialize result as 2
Driver code
Python3 implementation of the above approach
Function to return the bitwise OR of all even numbers upto N
For value less than 2
Count total number of bits in bitwise or all bits will be set except last bit
Compute 2 to the power bitCount and subtract 2
Driver code
Function to Generating N - bit Gray Code starting from K
Generate gray code of corresponding binary number of integer i .
Driver code
Function to return the winner of the game
Both the players chose to play the same move
Player A wins the game
Function to perform the queries
Driver code
Python implementation of the approach
Initializing dp of size = ( 2 ^ 18 ) * 18 * 2.
Recursive Function to calculate Minimum Cost with alternate colour edges
Base case
If already calculated
Masking previous edges as explained in above formula .
Function to Adjacency List Representation of a Graph
Function to getCost for the Minimum Spanning Tree Formed
Assigning maximum possible value .
Driver Code
Function to return the count of maximum consecutive 1 s in the binary representation of x
Initialize result
Count the number of iterations to reach x = 0.
This operation reduces length of every sequence of 1 s by one
Function to return the count of maximum consecutive 1 s in the binary representation among all the elements of arr [ ]
To store the answer
For every element of the array
Count of maximum consecutive 1 s in the binary representation of the current element
Update the maximum count so far
Driver code
Function to return the maximum bitwise OR possible among all the possible pairs
Check for every possible pair
Maximum among all ( i , j ) pairs
Driver code
Python3 implementation of the approach
Function to return the maximum bitwise OR possible among all the possible pairs
If there is only a single value in the range [ L , R ]
Loop through each bit from MSB to LSB
MSBs where the bits differ , all bits from that bit are set
If MSBs are same , then ans bit is same as that of bit of right or left limit
Driver code
Function to return the required length
To store the filtered numbers
Filtering the numbers
If there are no elements to check
Find the OR of all the filtered elements
Check if the OR is equal to m
Driver code
Function to return the required length
To store the filtered numbers
Filtering the numbers
If there are no elements to check
Find the OR of all the filtered elements
Check if the OR is equal to m
Driver code
Function to toggle the kth bit of n
Driver code
Function to clear the kth bit of n
Driver code
Python3 implementation of the approach
Function to return the value of the maximized expression
int can have 32 bits
Consider the ith bit of D to be 1
Calculate the value of ( B AND bitOfD )
Check if bitOfD satisfies ( B AND D = D )
Check if bitOfD can maximize ( A XOR D )
Note that we do not need to consider ith bit of D to be 0 because if above condition are not satisfied then value of result will not change which is similar to considering bitOfD = 0 as result XOR 0 = result
Driver code
Python3 Program to count number of subarrays with Bitwise - XOR as power of 2
Function to find number of subarrays
Hash Map to store prefix XOR values
When no element is selected
Check for all the powers of 2 , till a MAX value
Insert Current prefixxor in Hash Map
Driver Code
Function to return the maximum xor
Calculating xor of each pair
Driver Code
Function to return the maximum xor
set the i 'th bit in mask  like 100000, 110000, 111000..
Just keep the prefix till i ' th ▁ bit ▁ neglecting ▁ all ▁ ▁ the ▁ bit ' s after i 'th bit
find two pair in set such that a ^ b = newMaxx which is the highest possible bit can be obtained
clear the set for next iteration
Driver Code
Function to return the count of required triplets
First element of the current sub - array
XOR every element of the current sub - array
If the XOR becomes 0 then update the count of triplets
Driver code
Number of bits in the integer
Variable to calculate majority element
Loop to iterate through all the bits of number
Loop to iterate through all elements in array to count the total set bit at position i from right
If the total set bits exceeds n / 2 , this bit should be present in majority Element .
iterate through array get the count of candidate majority element
Verify if the count exceeds n / 2
Driver Code
Function to return the count of bits to be flipped to convert a to b
To store the required count
Loop until both of them become zero
Store the last bits in a as well as b
If the current bit is not same in both the integers
Right shift both the integers by 1
Return the count
Driver code
Recursive function to find number of set bist in a number
Base condition
If Least significant bit is set
If Least significant bit is not set
Driver code
Function call
Python3 implementation of the approach
Function to return the sum of arr [ 0. . index ] This function assumes that the array is preprocessed and partial sums of array elements are stored in BITree [ ]
Initialize result
Traverse ancestors of BITree [ index ]
Add current element of BITree to sum
Move index to parent node in getSum View
Updates a node in Binary Index Tree ( BITree ) at given index in BITree . The given value ' val ' is added to BITree [ i ] and all of its ancestors in tree .
Traverse all ancestors and add 'val
Add ' val ' to current node of BI Tree
Update index to that of parent in update View
Converts an array to an array with values from 1 to n and relative order of smaller and greater elements remains same . For example , { 7 , - 90 , 100 , 1 } is converted to { 3 , 1 , 4 , 2 }
Create a copy of arrp [ ] in temp and sort the temp array in increasing order
Traverse all array elements
lower_bound ( ) Returns pointer to the first element greater than or equal to arr [ i ]
Function to find smaller_right array
Convert arr [ ] to an array with values from 1 to n and relative order of smaller and greater elements remains same . For example , { 7 , - 90 , 100 , 1 } is converted to { 3 , 1 , 4 , 2 }
Create a BIT with size equal to maxElement + 1 ( Extra one is used so that elements can be directly be used as index )
To store smaller elements in right side and greater elements on left side
Traverse all elements from right .
Get count of elements smaller than arr [ i ]
Add current element to BIT
Print smaller_right array
Find all left side greater elements
Get count of elements greater than arr [ i ]
Add current element to BIT
Print greater_left array
Driver Code
Function call
Returns value of " arr [ 0 ] ▁ | ▁ arr [ 1 ] ▁ + ▁ arr [ 0 ] ▁ | ▁ arr [ 2 ] ▁ + ▁ . . . ▁ arr [ i ] ▁ | ▁ arr [ j ] ▁ + ▁ . . . . . ▁ arr [ n - 2 ] ▁ | ▁ arr [ n - 1 ] "
Consider all pairs ( arr [ i ] , arr [ j ) such that i < j
Driver program to test above function
Function that returns true if n is prime
Check from 2 to n
Function to find the count of 0 s and 1 s at prime indices
To store the count of 0 s and 1 s
If current 0 is at prime position
If current 1 is at prime position
Driver code
Python3 program to implement the above approach
Compute the xor of elements from ( 1 , 1 ) to ( i , j ) and store it in prefix_xor [ i ] [ j ]
xor of submatrix from 1 , 1 to i , j is ( xor of submatrix from 1 , 1 to i - 1 , j ) ^ ( xor of submatrix from 1 , 1 to i , j - 1 ) ^ ( xor of submatrix from 1 , 1 to i - 1 , j - 1 ) ^ arr [ i ] [ j ]
find the submatrix with maximum xor value
we need four loops to find all the submatrix of a matrix
xor of submatrix from i , j to i1 , j1 is ( xor of submatrix from 1 , 1 to i1 , j1 ) ^ ( xor of submatrix from 1 , 1 to i - 1 , j - 1 ) ^ ( xor of submatrix from 1 , 1 to i1 , j - 1 ) ^ ( xor of submatrix from 1 , 1 to i - 1 , j1 )
if the xor is greater than maximum value substitute it
Driver code
Find the prefix_xor
Find submatrix with maximum bitwise xor
Function to return ( 15 * N ) without using ' * ' or ' / ' operator
prod = 16 * n
( ( 16 * n ) - n ) = 15 * n
Driver code
Function to perform Multiplication
prod = 8 * n
Add ( 4 * n )
Add ( 2 * n )
Add n
( 8 * n ) + ( 4 * n ) + ( 2 * n ) + n = ( 15 * n )
Driver code
Python 3 implementation of the approach
Function to find an integer X such that the sum of all the array elements after getting XORed with X is minimum
Finding Maximum element of array
Find Maximum number of bits required in the binary representation of maximum number so log2 is calculated
Running loop from p times which is the number of bits required to represent all the elements of the array
If the bits in same position are set then increase count
If count becomes greater than half of size of array then we need to make that bit '0' by setting X bit to '1
Again using shift operation to calculate the required number
Calculate minimized sum
Print solution
Driver code
Numbers are in range of pow ( 3 , 32 )
Conversion of ternary into balanced ternary as start iterating from Least Significant Bit ( i . e 0 th ) , if encountered 0 or 1 , safely skip and pass carry 0 further 2 , replace it to - 1 and pass carry 1 further 3 , replace it to 0 and pass carry 1 further
Similar to binary conversion
Driver code
Moving on to first occupied bit
Printing
Print ' Z ' in place of - 1
Python program for the above approach
Find AND of whole array
Print the answer
Driver code
Function to check if it is possible or not
Driver code
Utility function to print the contents of the array
Function to find the required array
Print the array
Driver code
Function to return the count of valid values of x
Convert n into binary String
To store the count of 1 s
If current bit is 1
Calculating answer
Driver code
Function to convert decimal to binary
Count same bits in last block
If n is 0 or it has all 1 s , then it is not considered to have equal number of 0 s and 1 s in blocks .
Count same bits in all remaining blocks .
Driver Code
Python 3 implementation of the approach
Function to print the first and last 3 bits equivalent decimal number
Converting n to binary
Length of the array has to be at least 3
Convert first three bits to decimal
Print the decimal
Convert last three bits to decimal
Print the decimal
Driver code
Function to print the first and last 3 bits equivalent decimal number
Number formed from last three bits
Let us get first three bits in n
Number formed from first three bits
Printing result
Driver code
Function that returns true if x is a power of 2
If x & ( x - 1 ) = 0 then x is a power of 2
Function to return the required count
If a [ i ] or ( a [ i ] + 1 ) is a power of 2
Driver code
Function that returns true if x has even parity
We basically count set bits https : www . geeksforgeeks . org / count - set - bits - in - an - integer /
Function to return the sum of the elements from an array which have even parity
If a [ i ] has even parity
Driver code
Python program to calculate sum in an interval and update with square root
Maximum size of input array
structure for queries with members type , leftIndex , rightIndex of the query
function for updating the value
function for calculating the required sum between two indexes
function to return answer to queries
Declaring a Set
inserting indexes of those numbers which are greater than 1
update query
find the left index of query in the set using binary search auto it = s . lower_bound ( que [ i ] . l ) ;
if it crosses the right index of query or end of set , then break
update the value of arr [ i ] to itss square root
if updated value becomes equal to 1 remove it from the set
increment the index
sum query
Driver Code
input array using 1 - based indexing
declaring array of structure of type queries
answer the Queries
Function to count pairs with odd OR
find OR operation check odd or odd
return count of odd pair
Driver Code
Function to count number of even pairs
variable for counting even pairs
find all pairs
find XOR operation check even or even
return number of even pair
Driver Code
calling function findevenPair and prnumber of even pair
Function to count number of even pairs
find all pairs
return number of even pair
Driver Code
calling function findEvenPair and pr number of even pair
Function to count number of pairs EVEN bitwise AND
variable for counting even pairs
find all pairs
find AND operation to check evenpair
return number of even pair
Driver Code
Function to count number of pairs with EVEN bitwise AND
count odd numbers
count odd pairs
return number of even pair
Driver Code
Function To Calculate Answer
Find number of bits in the given integer
XOR the given integer with poe ( 2 , number_of_bits - 1 and print the result
Driver Code
Function to find Xor of desired elements
Initialize vector
push required elements
Initialize result with first element of vector
Driver code
Function to replace the elements
Calculate the xor of all the elements
Replace every element by the xor of all other elements
Driver code
Print the modified array .
Function to alternate the values
Driver code
Function to count the no . of leading zeros
Keep shifting x by one until leftmost bit does not become 1.
Driver Code
Function to count the no . of leading zeros
Main function
Function to compare the no . of leading zeros
if both have same no . of leading zeros
if y has more leading zeros
Driver Code
This recursive function calls subset function to print the subsets one by one . numBits -- > number of bits needed to represent the number ( simply input value n ) . num -- > Initially equal to 2 ^ n - 1 and decreases by 1 every recursion until 0.
Print the subset corresponding to binary representation of num .
Call the function recursively to print the next subset .
This function recursively prints the subset corresponding to the binary representation of num . nthBit -- > nth bit from right side starting from n and decreases until 0.
Print number in given subset only if the bit corresponding to it is set in num .
Check for the next bit
Driver Code
compute number of different bits
since , the numbers are less than 2 ^ 31 run the loop from '0' to '31' only
right shift both the numbers by ' i ' and check if the bit at the 0 th position is different
Driver code
find number of different bits
Python3 program to set the rightmost unset bit
If all bits are set
Set rightmost 0 bit
Driver code
Binary Tree node
Utility function that allocates a new Node
Function to print the number of set bits in each node of the binary tree
Print the number of set bits of current node using count ( )
Traverse Left Subtree
Traverse Right Subtree
Driver Code
function to return AND of sub - arrays
Driver Code
size of the array
print and of all subarrays
Python program to find 2 's complement using XOR.
A flag used to find if a 1 bit is seen or not .
xor operator is used to flip the
bits after converting in to ASCII values
if there is no 1 in the string so just add 1 in starting of string and return
Driver code
function to check whether rightmost kth bit is set or not in 'n
function to set the rightmost kth bit in 'n
kth bit of n is being set by this operation
function to check if all the bits are set or not in the binary representation of 'n
if true , then all bits are set
else all bits are not set
function to check if a number has bits in alternate pattern
to check if all bits are set in 'num
function to check whether bits are in alternate pattern in the given range
preparing a number ' num ' and ' left _ shift ' which can be further used for the check of alternate pattern in the given range
unset all the bits which are left to the rth bit of ( r + 1 ) th bit
right shift ' num ' by ( l - 1 ) bits
Driver Code
function to check whether bits are in alternate pattern in the given range
right shift n by ( l - 1 ) bits
get the bit at the last position in 'num
right shift ' num ' by 1
loop until there are bits in the given range
get the bit at the last position in 'num
if true , then bits are not in alternate pattern
update 'prev
right shift ' num ' by 1
bits are in alternate pattern in the given range
Driver Code
function that increment the value .
Invert bits and apply negative sign
Driver code
Python 3 program to find lower_bound of x in prefix sums array using binary lifting .
function to make prefix sums array
function to find lower_bound of x in prefix sums array using binary lifting .
initialize position
find log to the base 2 value of n .
if x less than first number .
starting from most significant bit .
if value at this position less than x then updateposition Here ( 1 << i ) is similar to 2 ^ i .
+ 1 because ' pos ' will have position of largest value less than 'x
Driver code
given array
value to find
size of array
to store prefix sum
call for prefix sum
function call
count the number of bits for each element of array
Count the number of set bits
Function to return the the maximum sum
Calculate the
Assuming the number to be a maximum of 32 bits
Add the number to the number of set bits
Find the maximum sum
Driver code
Python3 program to find XOR of pair sums .
Driver program to test the above function
Python 3 program to count pairs with even OR
Count total even numbers in array .
return count of even pair
Driver Code
function to check whether all the bits are unset in the given range or not
calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits
new number which could only have one or more set bits in the range l to r and nowhere else
if true , then all bits are unset in the given range
else all bits are not unset in the given range
Driver Code
Function to check if a number has same setbits and unset bits
iterate for all bits of a number
if set
if unset
right shift number by 1
is number of set bits are equal to unset bits
Driver Code
function to check
Check if given string is balanced bracket sequence or not .
If current bracket is an opening bracket push it to stack .
If current bracket is a closing bracket then pop from stack if it is not empty . If stack is empty then sequence is not balanced .
If stack is not empty , then sequence is not balanced .
Function to check if string obtained by concatenating two bracket sequences is balanced or not .
Check if s1 + s2 is balanced or not .
Check if s2 + s1 is balanced or not .
Driver Code
Function to find the i - th character
distance between two consecutive elements after N iterations
binary representation of M
kth digit will be derived from root for sure
Check whether there is need to flip root or not
Driver Code
function to check whether the number has only first and last bits set
Driver Code
Python 3 program to print the integer with all the bits set in range L - R Naive Approach
Function to return the integer with all the bits set in range L - R
iterate from L to R and add all powers of 2
Driver Code
Function to return the integer with all the bits set in range L - R
Driver Code
Function to find XOR of sum of all pairs
Calculate xor of all the elements
Return twice of xor value
Driver code
function to find the largest set with bitwise OR equal to n
If the bitwise OR of n and i is equal to n , then include i in the set
Driver Code
Python 3 code to find two odd occurring elements in an array where all other elements appear even number of times .
Find XOR of all numbers
Find a set bit in the XOR ( We find rightmost set bit here )
Traverse through all numbers and divide them in two groups ( i ) Having set bit set at same position as the only set bit in set_bit ( ii ) Having 0 bit at same position as the only set bit in set_bit
XOR of two different sets are our required numbers .
Driver code
function to find the maximum subset with bitwise OR equal to k
If the bitwise OR of k and element is equal to k , then include that element in the subset
Store the bitwise OR of elements in v
If ans is not equal to k , subset doesn 't exist
Driver Code
This function returns the number to be inserted in the given array
initialise the answer with k
ans ^= A [ i ] XOR of all elements in the array
Driver Code
2 - D array that will stored the count of bits set in element of array
Function store the set bit count in BitCount Array
traverse over all bits
mark elements with i 'th bit set
Check whether the current bit is set or not if it 's set then mark it.
store cumulative sum of bits
Function to process queries
Driver Code
Function to convert decimal to binary
leftmost digits are filled with 0
Function to generate gray code
generate gray code of corresponding binary number of integer i .
printing gray code
Driver code
Python3 program to calculate sum of Bit - wise and sum of all subsets of an array
assuming representation of each element is in 32 bit
iterating array element
Counting the set bit of array in ith position
counting subset which produce sum when particular bit position is set .
multiplying every position subset with 2 ^ i to count the sum .
Driver code
An efficient python3 program to find minimum number formed by bits of a given number .
Returns maximum number formed by bits of a given number .
_popcnt32 ( a ) gives number of 1 's  present in binary representation of a.
If all 32 bits are set .
Find a number witn n least significant set bits .
Now shift result by 32 - n
Driver code
Returns minimum number formed by bits of a given number .
_popcnt32 ( a ) gives number of 1 's  present in binary representation  of a.
Driver Code
Python3 code to find maximum possible cost
Edge structure
v : Adjacency list representation of Graph p : stores parents of nodes
Weighted union - find with path compression
DFS is called to generate parent of a node from adjacency list representation
Utility function for Union
Fixed ' i ' as AND
Generating supermasks of 'i
Checking whether p [ x ] is also a supermask of i .
Keep track of maximum size of subtree
Storing maximum cost of subtree with a given AND
Separating components which are merged during Union operation for next AND value .
Driver code
Number of nodes
Taking edges as input and put them in adjacency list representation
Initializing parent vertex of '1' as '1
Call DFS to generate ' p ' array
Function to get no of set bits in binary representation of positive integer n
Driver code
Returns true if n is even , else odd
Driver code
Returns true if n is even , else odd
Return true if n / 2 does not result in a float value .
Driver code
Python program to do recursive addition of two integers
If bitwise & is 0 , then there is not going to be any carry . Hence result of XOR is addition .
Driver code
Returns true if the pair is valid , otherwise false
converting integers to strings
Iterate over the strings and check if a character in first string is also present in second string , return true
No common digit found
Returns the number of valid pairs
Iterate over all possible pairs
Driver Code
Python3 Program to check if Bitwise AND of any subset is power of two
Check for power of 2 or not
Check if there exist a subset whose bitwise AND is power of 2.
if there is only one element in the set .
Finding a number with all bit sets .
check all the positions at which the bit is set .
include all those elements whose i - th bit is set
check for the set contains elements make a power of 2 or not
Driver Program
Python3 program to build levelwise OR / XOR alternating Segment tree
A utility function to get the middle index from corner indexes .
A recursive function that constructs Segment Tree for array [ ss . . se ] . ' si ' is index of current node in segment tree ' st ' , operation denotes which operation is carried out at that level to merge the left and right child . It 's either 0 or 1.
If there is one element in array , store it in current node of segment tree and return
If there are more than one elements , then recur for left and right subtrees and store the sum of values in this node
Build the left and the right subtrees by using the fact that operation at level ( i + 1 ) = ! ( operation at level i )
merge the left and right subtrees by checking the operation to be carried . If operation = 1 , then do OR else XOR
OR operation
XOR operation
Function to construct segment tree from given array . This function allocates memory for segment tree and calls constructSTUtil ( ) to fill the allocated memory
Height of segment tree
Maximum size of segment tree
Allocate memory
operation = 1 ( XOR ) if Height of tree is even else it is 0 ( OR ) for the root node
Fill the allocated memory st
Return the constructed segment tree
Driver Code
leaf nodes
Build the segment tree
Root node is at index 0 considering 0 - based indexing in segment Tree
print value at rootIndex
Python3 program to print the Leftover element after performing alternate Bitwise OR and Bitwise XOR operations to the pairs .
count the step number
if one element is there , it will be the answer
at first step we do a bitwise OR
keep on doing bitwise operations till the last element is left
perform operations
if step is the odd step
else : even step
answer when one element is left
Driver Code
1 st query
2 nd query
Function to find winner of NIM - game
case when Alice is winner
when Bob is winner
Driver code
function to check whether a number is fibbinary or not
if the number does not contain adjacent ones then ( n & ( n >> 1 ) ) operation results to 0
Not a fibbinary number
Driver code
Python3 program to obtain maximum XOR value sub - array
Function to calculate maximum XOR value
Return ( 2 ^ c - 1 )
Driver Code
Function to divide a by b and return floor value it
Calculate sign of divisor i . e . , sign will be negative either one of them is negative only iff otherwise it will be positive
remove sign of operands
Initialize the quotient
test down from the highest bit and accumulate the tentative value for valid bit
if the sign value computed earlier is - 1 then negate the value of quotient
Driver code
Function to count the number of bits in binary representation of an integer
initialize count
count till n is non zero
right shift by 1 i . e , divide by 2
Function to calculate the xor of two numbers by adding trailing zeros to the number having less number of bits in its binary representation .
stores the minimum and maximum
left shift if the number of bits are less in binary representation
Driver Code
Function to check if the binary String is divisible by 3.
checking if the bit is nonzero
checking if the nonzero bit is at even position
Checking if the difference of non - zero oddbits and evenbits is divisible by 3.
Driver Program
Python program to swap every two bits in a byte .
Extracting the high bit shift it to lowbit Extracting the low bit shift it to highbit
driver Function
set even bit of number n
res for store 101010. . number
generate number form of 101010. . ... till temp size
if bit is even then generate number and or with res
return set even bit number
set odd bit of number m
res for store 101010. . number
generate number form of 101010. . . . till temp size
if bit is even then generate number and or with res
return set odd bit number
set even bit of number n
set odd bit of number m
take OR with these number
Driver code
n = 1 0 1 0 ^ ^ m = 1 0 1 1 ^ ^ result = 1 0 1 1
function to check whether decimal representation of given binary number is divisible by 10 or not
if last digit is '1' , then number is not divisible by 10
to accumulate the sum of last digits in perfect powers of 2
traverse from the 2 nd last up to 1 st digit in 'bin
if digit in '1
calculate digit 's position from  the right
according to the digit 's position,  obtain the last digit of the  applicable perfect power of 2
if last digit is 0 , then divisible by 10
not divisible by 10
function to check whether decimal representation of given binary number is divisible by 20 or not
if ' bin ' is an odd number
check if bin ( 0. . n - 2 ) is divisible by 10 or not
Driver program to test above
function for the Nega_bit
Driver program to test above
Returns a number which has all even bits of n toggled .
Generate number form of 101010 . . till of same order as n
if bit is even then generate number and or with res
return toggled number
Driver code
Returns a number which has same bit count as n and has only first and last bits as set .
set all the bit of the number
Adding one to n now unsets all bits and moves MSB to one place . Now we shift the number by 1 and add 1.
if number is 1
take XOR with first and last set bit number
Driver code
Function to get no of set bits in binary representation of passed binary no . Please refer below for details of this function : https : www . geeksforgeeks . org / count - set - bits - in - an - integer
Check if number is odious or not
Driver Code
Set left most unset bit
if number contain all 1 then return n
Find position of leftmost unset bit
if temp L . S . B is zero then unset bit pos is change
return OR of number and unset bit pos
Driver Function
To return max xor sum of 1 to n using at most k numbers
If k is 1 then maximum possible sum is n
Finding number greater than or equal to n with most significant bit same as n . For example , if n is 4 , result is 7. If n is 5 or 6 , result is 7
Return res - 1 which denotes a number with all bits set to 1
Driver code
python 3 implementation to increment a number by one by manipulating the bits
function to find the position of rightmost set bit
function to toggle the last m bits
calculating a number ' num ' having ' m ' bits and all are set
toggle the last m bits and return the number
function to increment a number by one by manipulating the bits
get position of rightmost unset bit if all bits of ' n ' are set , then the bit left to the MSB is the rightmost unset bit
kth bit of n is being set by this operation
from the right toggle all the bits before the k - th bit
required number
Driver program
Python3 program to find XNOR of two numbers
log ( n ) solution
Make sure a is larger
for last bit of a
for last bit of b
counter for count bit and set bit in xnor num
for make new xnor number
for set bits in new xnor number
get last bit of a
get last bit of b
Check if current two bits are same
counter for count bit
Driver method
python program to find XNOR of two numbers
Please refer below post for details of this function https : www . geeksforgeeks . org / toggle - bits - significant - bit /
Make a copy of n as we are going to change it .
Suppose n is 273 ( binary is 100010001 ) . It does following 100010001 | 010001000 = 110011001
This makes sure 4 bits ( From MSB and including MSB ) are set . It does following 110011001 | 001100110 = 111111111
Returns XNOR of num1 and num2
Make sure num1 is larger
Driver code
function to find maximum OR sum
OR sum of all the elements in both arrays
Driver Code
Python3 implementation to find the position of rightmost bit where a carry is generated first
function to find the position of rightmost set bit in 'n
function to find the position of rightmost bit where a carry is generated first
Driver program to test above
function to check if x is power of 2
First x in the below expression is for the case when x is 0
function to check whether the two numbers differ at one bit position only
Driver code to test above
Returns 2 raised to power n
Driven program
Efficient Python3 code to compute x * ( 2 ^ n )
Driven code to check above function
function to check whether n is divisible by pow ( 2 , m )
if expression results to 0 , then n is divisible by pow ( 2 , m )
n is not divisible
Driver program to test above
Return true if player A wins , return false if player B wins .
Checking the last bit of N .
Driven Program
Returns a number which has all odd bits of n toggled .
Generate number form of 101010. . . . . till of same order as n
If bit is odd , then generate number and or with res
Return toggled number
Driver code
Python 3 to find remainder and quotient
function to print remainder and quotient
print Remainder by n AND ( m - 1 )
print quotient by right shifting n by ( log2 ( m ) ) times
driver program
Function for finding maximum and value pair
Driver function
function to return 1 if it is zero returns 0 if it is negative returns 2 if it is positive
string array to store all kinds of number
function call to check the sign of number
driver program to test the above function
Function that takes in the sum and XOR of two numbers and generates the two numbers such that the value of X is minimized
Traverse through all bits
Let us leave bits as 0.
else : ( Xi == 1 and Ai == 1 )
Driver function
function to check if it is possible to make it a multiple of 64.
counter to count 0 's
loop which traverses right to left and calculates the number of zeros before 1.
Driver code
Returns modified n .
Driver code
Function to get no of set bits in the binary representation of 'n
function to count set bits in the given range
calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits
returns number of set bits in the range ' l ' to ' r ' in 'n
Driver program to test above
function to check if all the bits are set or not in the binary representation of 'n
all bits are not set
if True , then all bits are set
else all bits are not set
function to check if one of the two numbers is one 's complement of the other
Driver program
Python 3 program to find unique element where every element appears k times except one
Create a count array to store count of numbers that have a particular bit set . count [ i ] stores count of array elements with i - th bit set .
AND ( bitwise ) each element of the array with each set digit ( one at a time ) to get the count of set bits at each position
Now consider all bits whose count is not multiple of k to form the required number .
Driver Code
function to check whether ' n ' is a power of 2 or not
function to check whether number has only first and last bits set
Driver program to test above
function to check if all the bits are set or not in the binary representation of 'n
if true , then all bits are set
else all bits are not set
function to check if a number has bits in alternate pattern
to check if all bits are set in 'num
Driver code
Python3 for finding min flip for maximizing given n
function for finding set bit
return count of set bit
function for finding min flip
number of bits in n
Find the largest number of same size with k set bits
Count bit differences to find required flipping .
Driver Code
Function to toggle bits in the given range
calculating a number ' range ' having set bits in the range from l to r and all other bits as 0 ( or unset ) .
Driver code
Python3 program to find total bit in given number
log function in base 2 take only integer part
Driver Code
function to check whether all the bits are unset in the given range or not
calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits
new number which will only have one or more set bits in the range l to r and nowhere else
if new num is 0 , then all bits are unset in the given range
else all bits are not unset
Driver Code
Returns a number which has all set bits starting from MSB of n
This makes sure two bits ( From MSB and including MSB ) are set
This makes sure 4 bits ( From MSB and including MSB ) are set
Driver code
Python 3 program to check if there are two adjacent set bits .
Driver Code
Python3 implementation to find the position of rightmost same bit
Function to find the position of rightmost set bit in 'n
Function to find the position of rightmost same bit in the binary representations of ' m ' and 'n
position of rightmost same bit
Driver Code
Function to find the position of rightmost same bit in the binary representations of ' m ' and 'n
Initialize loop counter
Check whether the value ' m ' is odd
Check whether the value ' n ' is odd
Below ' if ' checks for both values to be odd or even
Right shift value of m
Right shift value of n
When no common set is found
Driver code
Function to check whether all the bits are set in the given range or not
calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits
new number which will only have one or more set bits in the range l to r and nowhere else
if both are equal , then all bits are set in the given range
else all bits are not set
Driver code
Python3 program to print all numbers upto n bits with no consecutive set bits .
Let us first compute 2 raised to power n .
loop 1 to n to check all the numbers
A number i doesn ' t ▁ contain ▁ ▁ consecutive ▁ set ▁ bits ▁ if ▁ ▁ bitwise ▁ and ▁ of ▁ i ▁ and ▁ left ▁ ▁ shifted ▁ i ▁ do ' t contain a common set bit .
Driver code
Efficient Python3 program to find n - th palindrome
Construct the nth binary palindrome with the given group number , aux_number and operation type
No need to insert any bit in the middle
Length of the final binary representation
Fill first and last bit as 1
Start filling the a [ ] from middle , with the aux_num binary representation
Get the auxiliary number 's ith  bit and fill around middle
Insert bit 0 in the middle
Length of the final binary representation
Fill first and last bit as 1
Start filling the a [ ] from middle , with the aux_num binary representation
Get the auxiliary number 's ith  bit and fill around middle
Length of the final binary representation
Fill first and last bit as 1
Start filling the a [ ] from middle , with the aux_num binary representation
Get the auxiliary number 's ith  bit and fill around middle
Convert the number to decimal from binary
Will return the nth binary palindrome number
Add number of elements in all the groups , until the group of the nth number is found
Total number of elements until this group
Element 's offset position in the group
Finding which bit to be placed in the middle and finding the number , which we will fill from the middle in both directions
We need to fill this auxiliary number in binary form the middle in both directions
op = 0 Need to Insert 0 at middle
op = 1 Need to Insert 1 at middle
Driver code
Function Call
Function to find card at given index
Answer will be reversal of N bits from MSB
Calculating the reverse binary representation
Printing the result
No . of Shuffle Steps
Key position
To count number of set bits
To calculate sum of numbers
To count sum of number whose 2 bit are set
Driver code
function to toggle the last m bits
calculating a number ' num ' having ' m ' bits and all are set .
toggle the last m bits and return the number
Driver code
Python3 implementation to set the rightmost unset bit
function to find the position of rightmost set bit
if n = 0 , return 1
if all bits of ' n ' are set
position of rightmost unset bit in ' n ' passing ~ n as argument
set the bit at position 'pos
Driver code
Python3 implementation to find the previous smaller integer with one less number of set bits
Function to find the position of rightmost set bit .
Function to find the previous smaller integer
position of rightmost set bit of n
turn off or unset the bit at position 'pos
Driver code
function to create map between binary number and its equivalent octal
Function to find octal equivalent of binary
length of string before '.
add min 0 's in the beginning to make  left substring length divisible by 3
if decimal point exists
length of string after '.
add min 0 's in the end to make right  substring length divisible by 3
create dictionary between binary and its equivalent octal code
one by one extract from left , substring of size 3 and add its octal code
if ' . ' is encountered add it to result
required octal number
Driver Code
function to check if all the bits are set or not in the binary representation of 'n
all bits are not set
loop till n becomes '0
if the last bit is not set
right shift ' n ' by 1
all bits are set
Driver program to test above
function to check if all the bits are set or not in the binary representation of 'n
all bits are not set
if true , then all bits are set
else all bits are not set
Driver program to test above
Python3 implementation to find the next greater integer with one more number of set bits
Function to find the position of rightmost set bit . Returns - 1 if there are no set bits
Function to find the next greater integer
position of rightmost unset bit of n by passing ~ n as argument
if n consists of unset bits , then set the rightmost unset bit
n does not consists of unset bits
Driver code
Returns a number with all bit toggled in n except k - th bit
1 ) Toggle k - th bit by doing n ^ ( 1 << k ) 2 ) Toggle all bits of the modified number
Driver code
Function to find total 0 bit in a number
Function to find Count of non - negative numbers less than or equal to x , whose bitwise XOR and SUM with x are equal .
count number of zero bit in x
power of 2 to count
Driver code
Function call
Returns the missing number Size of arr2 [ ] is n - 1
missing number 'mnum
1 st array is of size 'n
2 nd array is of size 'n - 1
Required missing number
Driver Code
A class to represent array of bits using array of integers
Constructor
Divide by 32. To store n bits , we need n / 32 + 1 integers ( Assuming int is stored using 32 bits )
Get value of a bit at given position
Divide by 32 to find position of integer .
Now find bit number in arr [ index ]
Find value of given bit number in arr [ index ]
Sets a bit at given position
Find index of bit position
Set bit number in arr [ index ]
Main function to print all Duplicates
create a bit with 32000 bits
Traverse array elements
Index in bit array
If num is already present in bit array
Else insert num
Driver Code
Python3 program to find count of values whose XOR with x is greater than x and values are smaller than x
Initialize result
Traversing through all bits of x
If current last bit of x is set then increment count by n . Here n is a power of 2 corresponding to position of bit
Simultaneously calculate the 2 ^ n
Replace x with x / 2 ;
Driver code
function to construct new array
calculate xor of array
update array
Driver code
print result
Utility function to count total ones in a number
Function to count pairs of K different bits
initialize final answer
Check for K differ bit
Driver code
Function to calculate K bit different pairs in array
Get the maximum value among all array elemensts
Set the count array to 0 , count [ ] stores the total frequency of array elements
Initialize result
For 0 bit answer will be total count of same number
if count [ i ] is 0 , skip the next loop as it will not contribute the answer
Update answer if k differ bit found
Driver code
Function to multiply matrix .
Power function in log n
function that returns ( n + 1 ) th Fibonacci number Or number of ways to represent n as sum of 1 ' s ▁ 2' s
Driver Code
Function for multiplication
check for set bit and left shift n , count times
increment of place value ( count )
Driver code
Function return true if A ^ B > 0 else false
Driver Code
Returns true if n has increasing count of continuous - 1 else false
store the bit - pattern of n into bit bitset - bp
set prev_count = 0 and curr_count = 0.
increment current count of continuous - 1
traverse all continuous - 0
check prev_count and curr_count on encounter of first zero after continuous - 1 s
check for last sequence of continuous - 1
Driver code
Python3 program to check if counts of consecutive 1 s are increasing order .
Returns true if n has counts of consecutive 1 's are increasing order.
Initialize previous count
We traverse bits from right to left and check if counts are decreasing order .
Ignore 0 s until we reach a set bit .
Count current set bits
Compare current with previous and update previous .
Driver code
Returns true if n has alternate bit pattern else false
Store last bit
Traverse through remaining bits
If current bit is same as previous
Driver code
Returns XOR of counts 0 s and 1 s in binary representation of n .
calculating count of zeros and ones
Driver Code
Returns count of pairs in arr [ 0. . n - 1 ] with XOR value equals to x .
create empty map that stores counts of individual elements of array .
If there exist an element in map m with XOR equals to x ^ arr [ i ] , that means there exist an element such that the XOR of element with arr [ i ] is equal to x , then increment count .
Increment count of current element
return total count of pairs with XOR equal to x
Driver Code
Find position of MSB in n . For example if n = 17 , then position of MSB is 4. If n = 7 , value of MSB is 3
Function to find Bit - wise & of all numbers from x to y .
res = 0 Initialize result
Find positions of MSB in x and y
If positions are not same , return
Add 2 ^ msb_p1 to result
subtract 2 ^ msb_p1 from x and y .
Driver code
Function to find multiplication of n with 10 without using multiplication operator
Driver program to run the case
function to count number of values less than equal to n that satisfy the given condition
Traverse all numbers from 0 to n and increment result only when given condition is satisfied .
Driver Code
function to count number of values less than equal to n that satisfy the given condition
unset_bits keeps track of count of un - set bits in binary representation of n
Return 2 ^ unset_bits
Driver code
Returns ' e ' if profession of node at given level and position is engineer . Else doctor . The function assumes that given position and level have valid values .
Base case
Recursively find parent 's profession. If parent  is a Doctor, this node will be a Doctor if it is  at odd position and an engineer if at even position
If parent is an engineer , then current node will be an engineer if at add position and doctor if even position .
Driver code
Prints first n numbers with two set bits
Initialize higher of two sets bits
Keep reducing n for every number with two set bits .
Consider all lower set bits for current higher set bit
Print current number
If we have found n numbers
Consider next lower bit for current higher bit .
Increment higher set bit
Driver code
Function to find the even occurring elements in given array
do for each element of array
left - shift 1 by value of current element
Toggle the bit every time element gets repeated
Traverse array again and use _xor to find even occurring elements
left - shift 1 by value of current element
Each 0 in _xor represents an even occurrence
print the even occurring numbers
set bit as 1 to avoid printing duplicates
Driver code
Returns XOR of ' a ' and ' b ' ( both of same length )
initialize result
Traverse all bits , if bits are same , then XOR is 0 , else 1
Performs Modulo - 2 division
Number of bits to be XORed at a time .
Slicing the divident to appropriate length for particular step
replace the divident by the result of XOR and pull 1 bit down
else : If leftmost bit is '0' If the leftmost bit of the dividend ( or the part used in each step ) is 0 , the step cannot use the regular divisor ; we need to use an all - 0 s divisor .
increment pick to move further
For the last n bits , we have to carry it out normally as increased value of pick will cause Index Out of Bounds .
Function used at the sender side to encode data by appending remainder of modular division at the end of data .
Appends n - 1 zeroes at end of data
Append remainder in the original data
Driver code
Function to get no of set bits in binary representation of passed binary no .
Returns true if n is Bleak
Check for all numbers ' x ' smaller than n . If x + countSetBits ( x ) becomes n , then n can 't be Bleak.
Driver code
Number of bits to represent int
Function to return maximum XOR subset in set [ ]
Initialize index of chosen elements
Traverse through all bits of integer starting from the most significant bit ( MSB )
Initialize index of maximum element and the maximum element
If i 'th bit of set[j]  is set and set[j] is  greater than max so far.
If there was no element with i 'th  bit set, move to  smaller i
Put maximum element with i ' th ▁ bit ▁ set ▁ ▁ at ▁ index ▁ ' index
Update maxInd and increment index
Do XOR of set [ maxIndex ] with all numbers having i 'th bit as set.
XOR set [ maxInd ] those numbers which have the i 'th bit set
Increment index of chosen elements
Final result is XOR of all elements
Driver code
Returns XOR of all XOR 's of given subset
XOR is 1 only when n is 1 , else 0
Driver code
Returns XOR of x and y
Assuming 32 - bit Integer
Find current bits in x and y
If both are 1 then 0 else xor is same as OR
Update result
Driver Code
Returns XOR of x and y
Driver Code
This function swaps bit at positions p1 and p2 in an integer n
Move p1 'th to rightmost side
Move p2 'th to rightmost side
XOR the two bits
Put the xor bit back to their original positions
XOR ' x ' with the original number so that the two sets are swapped
Driver program to test above function
Function to return the maximum length of the required sub - array
For the first consecutive pair of elements
While a consecutive pair can be selected
If current pair forms a valid sub - array
2 is the length of the current sub - array
To extend the sub - array both ways
While elements at indices l and r are part of a valid sub - array
Update the maximum length so far
Select the next consecutive pair
Return the maximum length
Driver code
Python3 code to implement FreivaldaTMs Algorithm
Function to check if ABx = Cx
Generate a random vector
Now comput B * r for evaluating expression A * ( B * r ) - ( C * r )
Now comput C * r for evaluating expression A * ( B * r ) - ( C * r )
Now comput A * ( B * r ) for evaluating expression A * ( B * r ) - ( C * r )
Finally check if value of expression A * ( B * r ) - ( C * r ) is 0 or not
Runs k iterations Freivald . The value of k determines accuracy . Higher value means higher accuracy .
Driver code
Function to calculate expectation
variable prb is for probability of each element which is same for each element
calculating expectation overall
returning expectation as sum
Driver program
Function for calculating expectation
Display expectation of given array
Python program to automatically generate CAPTCHA and verify user
Returns true if given two strings are same
Generates a CAPTCHA of given length
Characters to be included
Generate n characters from above set and add these characters to captcha .
Generate a random CAPTCHA
Ask user to enter a CAPTCHA
Notify user about matching status
Function to calculate the sum recursively
Base cases
If n is odd
If n is even
Function to print the value of Sum
Driver Program
first element
common difference
Number of elements
Mod value
Function to find the Length of a longest subarray in which elements greater than K are more than elements not greater than K
Create a new array in which we store 1 if a [ i ] > k otherwise we store - 1.
Taking prefix sum over it
Len will store maximum Length of subarray
This indicate there is at least one subarray of Length mid that has sum > 0
Check every subarray of Length mid if it has sum > 0 or not if sum > 0 then it will satisfy our required condition
x will store the sum of subarray of Length mid
Satisfy our given condition
Check for higher Length as we get Length mid
Check for lower Length as we did not get Length mid
Driver code
Function to find the required points
Driver code
A NON - tail - recursive function . The function is not tail recursive because the value returned by fact ( n - 1 ) is used in fact ( n ) and call to fact ( n - 1 ) is not the last thing done by fact ( n )
Driver program to test above function
Function to find the minimum number of days required to work to at least arr [ i ] points for every array element
Traverse the array P [ ]
Find the prefix sum
Traverse the array arr [ ]
Find the minimum index of the array having value at least arr [ i ]
If the index is not - 1
Otherwise
Function to find the lower bound of N using binary search
Stores the lower bound
Stores the upper bound
Stores the minimum index having value is at least N
Iterater while i <= j
Stores the mid index of the range [ i , j ]
If P [ mid ] is at least N
Update the value of mid to index
Update the value of j
Update the value of i
Return the resultant index
Driver Code
Python3 program for the above approach
Function to find the maximum profit earned by selling an item among N buyers
Stores the maximum profit
Stores the price of the item
Sort the array
Traverse the array
Count of buyers with budget >= arr [ i ]
Update the maximum profit
Return the maximum possible price
Driver code
Function to return true if S [ i ... j ] is a palindrome
Iterate until i < j
If unequal character encountered
Otherwise
Function to find for every index , longest palindromic substrings starting or ending at that index
Stores the maximum palindromic substring length for each index
Traverse the string
Stores the maximum length of palindromic substring
Consider that palindromic substring ends at index i
If current character is a valid starting index
If S [ i , j ] is palindrome ,
Update the length of the longest palindrome
Consider that palindromic substring starts at index i
If current character is a valid ending index
If str [ i , j ] is palindrome
Update the length of the longest palindrome
Update length of the longest palindromic substring for index i
Print the length of the longest palindromic substring
Driver Code
Function to find the sum of array elements which are multiples of N
Stores the sum
Traverse the array
Print total sum
Driver Code
Given arr [ ]
Function call
Function to find the farthest index that can be reached
Declare a priority queue
Iterate the array
If current element is greater than the next element
Otherwise , store their difference
Push diff into pq
If size of pq exceeds Y
Decrease X by the top element of pq
Remove top of pq
If X is exhausted
Current index is the farthest possible
Print N - 1 as farthest index
Driver Code
Function Call
Function to return nearest lower character
Traverse charset from start - 1
If no character can be appended
Function to find largest string
Stores the frequency of characters
Traverse the string
Append larger character
Decrease count in charset
Increase count
Check if count reached to charLimit
Find nearest lower char
If no character can be appended
Append nearest lower character
Reset count for next calculation
Return new largest string
Driver code
Given string s
Function to replace odd elements with even elements and vice versa
Length of the array
Traverse the given array
If arr [ i ] is visited
Find the next odd element
Find next even element
Mark them visited
Swap them
Print the final array
Driver Code
Given array arr
Function Call
Python3 program to implement the above approach
iterate through the length if we could find a [ i ] = = b [ j ] we could increment I and decrement j
else we could just break the loop as its not a palindrome type sequence
we could concatenate the a ' s ▁ left ▁ part ▁ ▁ + b ' s right part in a variable a and a ' s ▁ ▁ right ▁ part + b ' s left in the variable b
we would check for the palindrome condition if yes we print True else False
Function to find the maximum number of indices having equal elements after adding at most k numbers
Sort the array in ascending order
Make prefix sum array
Initialize variables
Update mid
Check if any subarray can be obtained of length mid having equal elements
Decrease max to mid
Function to check if a subarray of length len consisting of equal elements can be obtained or not
Sliding window
Last element of the sliding window will be having the max size in the current window
The current number of element in all indices of the current sliding window
If the current number of the window , added to k exceeds totalNumbers
Driver Code
Function call
Function to print the sum of product of all pairs of the given array
Stores count of one in the given array
Stores the size of the given array
If current element is 1
Increase count
Return the sum of product of all pairs
Driver Code
''Python program for the above approach
''Function to find the minimum number needed to be added so that the sum of the digits does not exceed K
'' Add the digits of num2
''If the sum of the digits of N  is less than or equal to K
'' No number needs to  be added
'' Otherwise
'' Calculate the sum of digits  from least significant digit
'' If sum exceeds K
'' Increase previous  digit by 1
'' Add zeros to the end
'' Calculate difference  between the result and N
'' Return the result
''Driver Code
Python3 program to implement the above approach
Function to call dfs to calculate the number of ways
Iterate till the length of array
Initialize the memorization table
Function to perform the DFS to calculate the number of ways
Base case : Reached the end of array
If current sum is obtained
Otherwise
If previously calculated subproblem occurred
Check if the required sum can be obtained by adding current element or by subtracting the current index element
Store the count of ways
Driver Code
Function to print the longest subarray with sum of elements not divisible by X
Pref [ ] stores the prefix sum Suff [ ] stores the suffix sum
If array element is divisibile by x
Increase count
If all the array elements are divisible by x
No subarray possible
Reverse v to calculate the suffix sum
Calculate the suffix sum
Reverse to original form
Reverse the suffix sum array
Calculate the prefix sum
Stores the starting index of required subarray
Stores the ending index of required subarray
If suffix sum till i - th index is not divisible by x
Update the answer
If prefix sum till i - th index is not divisible by x
Update the answer
Print the longest subarray
Driver code
Function to find the count the number of times maximum and minimum value updated
Update the maximum and minimum values during traversal
Driver code
Function to find the farthest smaller number in the right side
To store minimum element in the range i to n
If current element in the suffix_min is less than a [ i ] then move right
Print the required answer
Driver code
Function to print the elements in descending along with their frequencies
Sorts the element in decreasing order
traverse the array elements
Prints the number and count
Prints the last step
Driver Code
Python 3 implementation of the approach
Function to return the value of f ( n ) for given values of a , b , c , n
if c is 0 , then value of n can be in order of 10 ^ 15. if c != 0 , then n ^ 3 value has to be in order of 10 ^ 18 so maximum value of n can be 10 ^ 6.
for efficient searching , use binary search .
Driver code
A linear Python 3 program to check if array becomes sorted after one swap
Create a sorted copy of original array
Check if 0 or 1 swap required to get the sorted array
Driver Code
Function that will tell whether such Indices present or Not .
Checking 1 st condition i . e whether Arr [ i ] equal to Arr [ j ] or not
Checking 2 nd condition i . e whether Arr [ Arr [ i ] ] equal to Arr [ Arr [ j ] ] or not .
Driver Code
Calling function .
Function to find two non - overlapping with same Sum in an array
first create an empty Map key -> which is Sum of a pair of elements in the array value -> vector storing index of every pair having that Sum
consider every pair ( arr [ i ] , arr [ j ] ) and where ( j > i )
calculate Sum of current pair
if Sum is already present in the Map
check every pair having equal Sum
if pairs don 't overlap,  print them and return
Insert current pair into the Map
If no such pair found
Driver Code
Returns number of pairs in arr [ 0. . n - 1 ] with sum equal to 'sum
Consider all possible pairs and check their sums
Driver Code
def countTripletsLessThanL ( n , L , arr ) :
arr = sorted ( arr ) ; ways = 0 ; for i in range ( n ) :
indexGreater = upper_bound ( arr , 0 , n , arr [ i ] + L ) ;
numberOfElements = indexGreater - ( i + 1 ) ;
if ( numberOfElements >= 2 ) : ways += ( numberOfElements * ( numberOfElements - 1 ) / 2 ) ; return ways ; def upper_bound ( a , low , high , element ) : while ( low < high ) : middle = int ( low + ( high - low ) / 2 ) ; if ( a [ middle ] > element ) : high = middle ; else : low = middle + 1 ; return low ;
if __name__ == ' _ _ main _ _ ' : set of n points on the X axis
To find minimum sum of unique elements .
While current element is same as previous or has become smaller than previous .
Driver code
To find minimum sum of unique elements
If violation happens , make current value as 1 plus previous value and add to sum .
No violation .
Drivers code
Python3 program to implement recursive randomized algorithm . To generate random number between x and y ie . . [ x , y ]
A recursive randomized binary search function . It returns location of x in given array arr [ l . . r ] is present , otherwise - 1
Here we have defined middle as random index between l and r ie . . [ l , r ]
If the element is present at the middle itself
If element is smaller than mid , then it can only be present in left subarray
Else the element can only be present in right subarray
We reach here when element is not present in array
Driver code
Python program to remove vowels from a string Function to remove vowels
Driver program
This function assumes that a [ ] is sorted . If a [ ] is not sorted , we need to sort it first .
If there are odd elements , we choose middle element
If there are even elements , then we choose the average of middle two .
After deciding the final value , find the result .
Driver code
Function to check if array can be sorted or not
Function to check if given array can be sorted or not
Traverse the array
Traverse remaining elements at indices separated by 2
If current element is the minimum
If any smaller minimum exists
Swap with current element
If array is sorted
Otherwise
Given array
Function to + find the upper_bound of an array element
Stores minimum index in which K lies
Stores maximum index in which K lies
Calculate the upper bound of K
Stores mid element of l and r
If arr [ mid ] is less than or equal to K
Right subarray
Left subarray
Function to prall array elements whose frequency is greater than N / K
Sort the array arr
Stores index of an array element
Traverse the array
Stores upper bound of arr [ i ]
If frequency of arr [ i ] is greater than N / 4
Update i
Driver Code
Given array arr
Size of array
Function Call
Function to find maximum possible sum after changing the array elements as per the given constraints
Stores the frequency of elements in given array
Update frequency
stores the previously selected integer
Stores the maximum possible sum
Traverse over array count [ ]
Run loop for each k
Update ans
Return maximum possible sum
Driver Code
Given array arr [ ]
Size of array
Function Call
Function to solve queries
Calculating answer for every query
The end points of the ith query
Map for storing frequency
Incrementing the frequency
Iterating over map to find answer
Adding the contribution of ith number
Print answer
Driver code
Python implementation of the above approach
Function to update the value in Fenwick tree
Function to return the query result
Function to return the length of subsequence
Store the value in struct Array
If less than 2 elements are present return that element .
Set the left and right pointers to extreme
Calculate left and right pointer index .
Store the queries from [ L + 1 , R - 1 ] .
Sort array and queries for fenwick updates
For each query calculate maxx for the answer and store it in ans array .
if queries [ i ] . index < q :
Mx will be mx + 2 as while calculating mx , we excluded element at index left and right
Driver Code
Calculate the multiplicand , multiplier , and product eligible for pandigital
To check the string formed from multiplicand multiplier and product is pandigital
Driver code
Function that sort input array a [ ] and calculate mode and median using counting sort
The output array b [ ] will have sorted array
Variable to store max of input array which will to have size of count array
Auxiliary ( count ) array to store count . Initialize count array as 0. Size of count array will be equal to ( max + 1 ) .
Store count of each element of input array
Mode is the index with maximum count
Update count [ ] array with sum
Sorted output array b [ ] to calculate median
Median according to odd and even array size respectively .
Output the result
Driver Code
Python implementation to check if both halves of the string have at least one different character
Function which break string into two halves Counts frequency of characters in each half Compares the two counter array and returns true if these counter arrays differ
Declaration and initialization of counter array
Driver function
Python3 implementation to check if both halves of the string have at least one different character
Function which break string into two halves Increments frequency of characters for first half Decrements frequency of characters for second half true if any index has non - zero value
Declaration and initialization of counter array
Driver function
Returns min difference between max and min of any K - size subset
sort the array so that close elements come together .
initialize result by a big integer number
loop over first ( N - K ) elements of the array only
get difference between max and min of current K - sized segment
Driver Code
Python program to get index of array element in sorted array Method returns the position of arr [ idx ] after performing stable - sort on array
Count of elements smaller than current element plus the equal element occurring before given index
If element is smaller then increase the smaller count
If element is equal then increase count only if it occurs before
Driver code to test above methods
Function to check if sum is possible with remaining numbers
Stores the minimum sum possible with x numbers
Stores the maximum sum possible with x numbers
If S lies in the range [ minSum , maxSum ]
Function to find the resultant permutation
Stores the count of numbers in the given segment
If the sum is not possible with numbers in the segment
Output - 1
Stores the numbers present within the given segment
Iterate over the numbers from 1 to N
If ( S - i ) is a positive non - zero sum and if it is possible to obtain ( S - i ) remaining numbers
Update sum S
Update required numbers in the segement
Push i in vector v
If sum has been obtained
Break from the loop
If sum is not obtained
Output - 1
Stores the numbers which are not present in given segment
Loop to check the numbers not present in the segment
Pointer to check if i is present in vector v or not
If i is not present in v
Push i in vector v1
Point to the first elements of v1 and v respectively
Print the required permutation
Driver Code
Function to calculate minimum indices to be skipped so that sum till i remains smaller than T
Store the sum of all indices before i
Store the elements that can be skipped
Traverse the array , A [ ]
Store the total sum of elements that needs to be skipped
Store the number of elements need to be removed
Traverse from the back of map so as to take bigger elements first
Update sum
Update map with the current element
Driver code
Given Input
Function Call
Function to count the number of triplets from the range [ 1 , N - 1 ] having sum of all pairs divisible by K
If K is even
Otherwise
Driver Code
Function to count the maximum number of palindrome subsequences of length 3 considering the same index only once
Index of the S
Stores the frequency of every character
Stores the pair of frequency containing same characters
Number of subsequences having length 3
Counts the frequency
Counts the pair of frequency
Returns the minimum value
Driver Code
''Function to find the height sizeof the current component with vertex s
Visit the current Node
Call DFS recursively to find the maximum height of current CC
If the node is not visited then the height recursively for next element
Function to find the minimum Groups
Initialise with visited array
To find the minimum groups
Traverse all the non visited Node and calculate the height of the tree with current node as a head
If the current is not visited therefore , we get another CC
Return the minimum bipartite matching
Function that adds the current edges in the given graph
Driver code
Adjacency List
Adding edges to List
store the answer
Function to sum of all subsets of a given array
Function to generate the subsets
Base - case
Finding the sum of all the subsets of the generated subset
Recursively accepting and rejecting the current number
Driver code
Function that returns the second largest element in the array if exists , else 0
There must be at least two elements
To store the maximum and the second maximum element from the array
If current element is greater than first then update both first and second
If arr [ i ] is in between first and second then update second
No second maximum found
Driver code
Function to return the maximum result
To store the count of negative integers
Sum of all the three integers
Product of all the three integers
To store the smallest and the largest among all the three integers
Calculate the count of negative integers
When all three are positive integers
For single negative integer
For two negative integers
For three negative integers
Driver Code
Function to return the number of students that can pass
maximum marks
maximum bonus marks that can be given
counting the number of students that can pass
Driver code
Function to return the sum of first n natural numbers which are not positive powers of k
sum of first n natural numbers
subtract all positive powers of k which are less than n
next power of k
Driver code
Python 3 implementation of the above approach
function to find minimum operations
sort array
prepare hash of array
Driver Code
Python 3 program to find possibility to sort by multiple subarray reverse operarion
making the copy of the original array
sorting the copied array
checking mirror image of elements of sorted copy array and equivalent element of original array
Driver code
Function to find the waiting time for all processes
Copy the burst time into rt [ ]
Process until all processes gets completed
Find process with minimum remaining time among the processes that arrives till the current time `
Reduce remaining time by one
Update minimum
If a process gets completely executed
Increment complete
Find finish time of current process
Calculate waiting time
Increment time
Function to calculate turn around time
Calculating turnaround time
Function to calculate average waiting and turn - around times .
Function to find waiting time of all processes
Function to find turn around time for all processes
Display processes along with all details
Driver code
Process id 's
Function to count N - length strings consisting of vowels only sorted lexicographically
Initializing vector to store count of strings .
Summing up the total number of combinations .
Return the result
Function Call
Stores the value of overlapping states
Function to check whether a number have only digits X or Y or not
Until sum is positive
If any digit is not X or Y then return 0
Return 1
Function to find the count of numbers that are formed by digits X and Y and whose sum of digit also have digit X or Y
Initialize dp array
Base Case
Check if sum of digits formed by only X or Y
Return the already computed
Place the digit X at the current position
Place the digit Y at the current position
Update current state result
Driver Code
Function Call
Function to find the minimum cost to form any permutation of string s
Base Case
Return the precomputed state
Iterate over the string and check all possible characters available for current position
Check if character can be placed at current position
As there is no previous character so the cost for 1 st character is 0
Find the cost of current character and move to next position
Store the answer for each current state
Function that returns True if the current bit is set
Function that generates any permutation of the given string with minimum cost
Initialize dp table
Set all the bits of the current character id
Minimum cost of generating the permutation
Driver Code
Function Call
Python3 program for the above approach
Function to minimize the cost to add the array elements to a single element
Check if the value is already stored in the array
Compute left subproblem
Compute left subproblem
Calculate minimum cost
Store the answer to avoid recalculation
Function to generate the cost using Prefix Sum Array technique
Function to combine the sum of the two subproblems
Driver Code
Initialise dp array
Preprocessing the array
''Function to find the minimum number of operations
Storing the minimum operations to obtain all numbers up to N
Initial state
Iterate for the remaining numbers
If the number can be obtained by multiplication by 2
If the number can be obtained by multiplication by 3
Obtaining the number by adding 1
Return the minimum operations to obtain n
Driver code
Function to return the length of the Longest Reverse Bitonic Subsequence in the array
Allocate memory for LIS [ ] and initialize LIS values as 1 for all indexes
Compute LIS values from left to right
Allocate memory for LDS and initialize LDS values for all indexes
Compute LDS values from right to left Loop from n - 2 downto 0
Loop from n - 1 downto i - 1
Return the maximum value of ( lis [ i ] + lds [ i ] - 1 )
Driver code
Recursive function to check whether there is a path from the top left cell to the bottom right cell of the maze
Check whether the current cell is within the maze
If key is required to move further
If the key hasn 't been used before
If current cell is the destination
Either go down or right
Key has been used before
If current cell is the destination
Either go down or right
Driver code
If there is a path from the cell ( 0 , 0 )
Python 3 implementation of the approach
Function to return the minimum cost to reach the last index
If we reach the last index
Already visited state
Initially maximum
Visit all possible reachable index
If inside range
We cannot move any further
Memoize
Driver Code
Function to calculate the prefix sum of all the even factors
Add i to all the multiples of i
Update the prefix sum
Function to return the sum of all the even factors of the numbers in the given range
Driver code
Function to return the count of required numbers from 0 to num
Last position
If this result is already computed simply return it
Maximum limit upto which we can place digit . If tight is 1 , means number has already become smaller so we can place any digit , otherwise num [ pos ]
If the current digit is zero and nonz is 1 , we can 't place it
Function to convert x into its digit vector and uses count ( ) function to return the required count
Initialize dp
Driver code
n is the sum of digits and number should be divisible by m
States - position , sum , rem , tight sum can have values upto 162 , if we are dealing with numbers upto 10 ^ 18 when all 18 digits are 9 , then sum is 18 * 9 = 162
This function returns the count of required numbers from 0 to num
Last position
If count of non zero digits is less than or equal to K
If this result is already computed simply return it
Maximum limit upto which we can place digit . If tight is 1 , means number has already become smaller so we can place any digit , otherwise num [ pos ]
If the current digit is nonzero increment currCnt
At this position , number becomes smaller
Next recursive call
This function converts a number into its digit vector and uses above function to compute the answer
Initialize dp
Driver Code
states - position , count , tight
K is the number of non zero digits
Python3 implementation of above approach using memoization
Open brackets at position 1
Function to find Number of proper bracket expressions
If open - closed brackets < 0
If index reaches the end of expression
If brackets are balanced
If already stored in dp
If the current index has assigned open bracket
Move forward increasing the length of open brackets
Move forward by inserting open as well as closed brackets on that index
return the answer
DP array to precompute the answer
Calling the find function to calculate the answer
variable to store maximum value that can be obtained .
If entire array is traversed , then compare current value in num to overall maximum obtained so far .
Case 1 : Subtract current element from value so far if result is greater than or equal to zero .
Case 2 : Add current element to value so far if result is less than or equal to maxLimit .
def to find maximum possible value that can be obtained using array elements and given number .
variable to store current index position .
call to utility def to find maximum possible value that can be obtained .
Driver code
Function to print the equal sum sets of the array .
Print set 1.
Print set 2.
Utility function to find the sets of the array which have equal sum .
If entire array is traversed , compare both the sums .
If sums are equal print both sets and return true to show sets are found .
If sums are not equal then return sets are not found .
Add current element to set 1.
Recursive call after adding current element to set 1.
If this inclusion results in an equal sum sets partition then return true to show desired sets are found .
If not then backtrack by removing current element from set1 and include it in set 2.
Recursive call after including current element to set 2 and removing the element from set 2 if it returns False
Return true if array arr can be partitioned into two equal sum sets or not .
Calculate sum of elements in array .
If sum is odd then array cannot be partitioned .
Declare vectors to store both the sets .
Find both the sets .
Driver code
Python3 program to find out maximum subarray sum in linear time using prefix sum .
Function to compute maximum subarray sum in linear time .
Initialize minimum prefix sum to 0.
Initialize maximum subarray sum so far to - infinity .
Initialize and compute the prefix sum array .
loop through the array keep track of minimum prefix sum so far and maximum subarray sum .
Test case 1
Test case 2
Considering all possible digits as { 1 , 2 , 3 , . .9 }
DP [ i ] [ j ] is going to store monotone numbers of length i + 1 considering j + 1 digits .
Unit length numbers
Single digit numbers
Filling rest of the entries in bottom up manner .
Driver code
To declare array import module array
To store values of sequence in array
Driver code
Python3 code to print Hosoya 's triangle of height n.
Base case
Recursive step
Print the Hosoya triangle of height n .
Driven Code
Return euleriannumber A ( n , m )
Driver code
''function to find the longest Subsequence
dp [ i ] is going to store size of largest divisible subset beginning with a [ i ] .
Since last element is largest , d [ n - 1 ] is 1
Fill values for smaller elements
Find all multiples of a [ i ] and consider the multiple that has largest subset beginning with it .
Return maximum value from dp [ ]
Driver Code
This function returns the number of arrangements to form 'n
lookup dictionary / hashmap is initialized
Base cases negative number can 't be  produced, return 0
0 can be produced by not taking any number whereas 1 can be produced by just taking 1
Checking if number of way for producing n is already calculated or not if calculated , return that , otherwise calulcate and then return
Returns count of ways n people can remain single or paired up .
Filling dp [ ] in bottom - up manner using recursive formula explained above .
Driver code
Returns count of ways n people can remain single or paired up .
Driver code
Python3 program to find maximum binary sub - matrix with row swaps and column swaps .
Precompute the number of consecutive 1 below the ( i , j ) in j - th column and the number of consecutive 1 s on right side of ( i , j ) in i - th row .
Travesing the 2d matrix from top - right .
If ( i , j ) contain 0 , do nothing
Counting consecutive 1 on right side
Travesing the 2d matrix from bottom - left .
If ( i , j ) contain 0 , do nothing
Counting consecutive 1 down to ( i , j ) .
Return maximum size submatrix with row swap allowed .
Copying the column
Sort the copied array
Find maximum submatrix size .
Return maximum size submatrix with column swap allowed .
Copying the row .
Sort the copied array
Find maximum submatrix size .
Solving for row swap and column swap
Comparing both .
Driver Code
Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ] and Z [ 0. . o - 1 ]
Following steps build L [ m + 1 ] [ n + 1 ] [ o + 1 ] in bottom up fashion . Note that L [ i ] [ j ] [ k ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ] and Z [ 0. . ... k - 1 ]
L [ m ] [ n ] [ o ] contains length of LCS for X [ 0. . n - 1 ] and Y [ 0. . m - 1 ] and Z [ 0. . o - 1 ]
Driver program to test above function
''Driver code
returns shortest supersequence of X and Y
dp [ i ] [ j ] contains length of shortest supersequence for X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]
Fill table in bottom up manner
Below steps follow recurrence relation
string to store the shortest supersequence
Start from the bottom right corner and one by one push characters in output string
If current character in X and Y are same , then current character is part of shortest supersequence
Put current character in result
reduce values of i , j and index
If current character in X and Y are different
Put current character of Y in result
reduce values of j and index
Put current character of X in result
reduce values of i and index
If Y reaches its end , put remaining characters of X in the result string
If X reaches its end , put remaining characters of Y in the result string
reverse the string and return it
Driver Code
This function mainly returns LCS ( str , str ) with a condition that same characters at same index are not considered .
Create and initialize DP table
Fill dp table ( similar to LCS loops )
If characters match and indexes are not same
If characters do not match
Driver Program
Memoization based recursive function to count numbers with even and odd digit sum difference as 1. This function considers leading zero as a digit
Base Case
If current subproblem is already computed
Initialize result
If the current digit is odd , then add it to odd sum and recur
Add to even sum and recur
Store current result in lookup table and return the same
This is mainly a wrapper over countRec . It explicitly handles leading digit and calls countRec ( ) for remaining digits .
Initialize number digits considered so far
Initialize all entries of lookup table
Initialize final answer
Initialize even and odd sums
Explicitly handle first digit and call recursive function countRec for remaining digits . Note that the first digit is considered as even digit
Driver Code
A lookup table used for memoization .
Returns count of possible paths to reach cell at row number m and column number n from the topmost leftmost cell ( cell at 1 , 1 )
Create a 1D array to store results of subproblems
Driver Code
Returns length of the longest AP subset in a given set
Driver program to test above function
Function to calculate minimum Number of operations
Storing sum of array arr [ ]
Driver Code
Function Call
Function to find factorial of N with recursion
base condition
use recursion
calculate Nth term of series
Driver code
Python program for the above approach
Iterate from 0 to Len - 1
Driver code
''Python 3 program for the above approach include <bits/stdc++.h>
''Function to compute factorials till N
'' Iterate in the range [1, N]
'' Update ans to ans*i
''Store the value of ans  in fac[i]
''Function to check whether the current character is a vowel or not
''Function to count the number of anagrams of S satisfying the given condition
'' Store the factorials upto N
'' Function Call to generate  all factorials upto n
'' Create a hashmap to store  frequencies of all characters
'' Store the count of  vowels and consonants
'' Iterate through all  characters in the string
''Update the frequency  of current character
''Check if the character  is vowel or consonant
'' Check if C==V+1 or C==V
''Store the denominator
'' Calculate the denominator of the expression
'' Multiply denominator by factorial of counts of all letters
'' Store the numerator
'' Store the answer by dividing  numerator by denominator
'' Print the answer
''Otherwise, print 0
''Driver Code
Function to transform and return the transformed word
Stores resulting word
Iterate over the word
Add the position value to the letter
Convert it back to character
Add it to the string
Function to transform the given string
Size of string
Stores resultant string
Iterate over given string
End of word is reached
print ( s [ j : j + i ] ) Append the word
For the last word
Driver code
Given string
Function call
Helper Function to the Finding bigString
Initialize leftBigIdx and rightBigIdx and leftSmallIdx variables
Iterate until leftBigIdx variable reaches less than or equal to rightBigIdx
Check if bigString [ leftBigIdx ] is not equal to smallString [ leftSmallIdx ] or Check if bigString [ rightBigIdx ] is not equal to smallString [ rightSmallIdx ] than return false otherwise increment leftBigIdx and leftSmallIdx decrement rightBigIdx and rightSmallIdx
Function to the bigString
iterate in the bigString
Check if length of smallString + i is greater than the length of bigString
call the function isInBigStringHelper
Function to the multiStringSearch
iterate in the smallString
calling the isInBigString Function
Driver code
initialize string
initialize vector string
Function call
Print answers
Check if ans [ i ] is equal to 1 then Print true otherwise print false
Function to count the smaller characters on the right of index i
store the length of String
initialize each elements of arr to zero
array to store count of smaller characters on the right side of that index
initialize the variable to store the count of characters smaller than that at index i
adding the count of characters smaller than index i
print the count of characters smaller than index i stored in ans array
Driver Code
Z - algorithm function
bit update function which updates values from index " idx " to last by value " val "
Query function in bit
Driver Code
BIT array
Making the z array
update in the bit array from index z [ i ] by increment of 1
if the value in z [ i ] is not equal to ( n - i ) then no need to move further
queryng for the maximum length substring from bit array
Function declared to return the count of words in the given sentence that end with the given suffix
Variable to store count
split function used to extract words from sentence in form of list
using for loop with ' in ' to extract elements of list
returning the count
Driver Code
printing the final cde
Function that returns true if some character exists in the given string whose frequency is equal to the sum frequencies of other characters of the string
If string is of odd length
To store the frequency of each character of the string
Update the frequencies of the characters
No such character exists
Driver code
Function to count the number of minimal replacements
Find the length of the string
Iterate in the string
Check if adjacent is similar
If not the last pair
Check for character which is not same in i + 1 and i - 1
Last pair
Check for character which is not same in i - 1 index
Driver Code
Function that returns the index of next occurrence of the character c in string str starting from index start
Starting from start
If current character = c
Not found
Function to return the count of required sub - strings
Stores running count of ' x ' starting from the end
Next index of ' x ' starting from index 0
Next index of ' y ' starting from index 0
To store the count of required sub - strings
If ' y ' appears before ' x ' it won 't contribute to a valid sub-string
Find next occurrence of 'y
If ' y ' appears after ' x ' every sub - string ending at an ' x ' appearing after this ' y ' and starting with the current ' x ' is a valid sub - string
Find next occurrence of 'x
Return the count
Driver code
Python3 implementation of above approach
function that returns true if n is prime else false
1 is not prime
check if there is any factor or not
function that returns true if the frequencies of all the characters of s are prime
create a map to store the frequencies of characters
update the frequency
check whether all the frequencies are prime or not
Driver code
if all the frequencies are prime
Function to find number of substrings
Iterate over string length
if any two chars are in alphabetic order
find next char not in order
return the result
Driver Code
'' Python3 implementation to find non repeating character using 1D array and one traversal
The function returns index of the first non - repeating character in a string . If all characters are repeating then returns INT_MAX
initialize all character as absent
After below loop , the value of arr [ x ] is going to be index of of x if x appears only once . Else the value is going to be either - 1 or - 2.
If this character occurs only once and appears before the current result , then update the result
Driver prohram to test above function
Function to minimize string
Duplicate characters are removed
checks if character has previously occurred or not if not then add it to the minimized string 'mstr
Utility function to print the minimized , replaced string
Creating final string by replacing character
index calculation
Driver program
function for calculating the encryption
Driver Code
Function to check if a word is palindrome
Function to count palindrome words
splitting each word as spaces as delimiter and storing it into a list
Iterating every element from list and checking if it is a palindrome .
if the word is a palindrome increment the count .
Driver code
pre [ ] keeps record of the characters of w that need to be changed
stores the forbidden strings
Function to check if the particula r substring is present in w at position
If length of substring from this position is greater than length of w then return
n and n1 are used to check for substring without considering the case of the letters in w by comparing the difference of ASCII values
If same == true then it means a substring was found starting at position therefore all characters from position to length of substring found need to be changed therefore they needs to be marked
Function implementing logic
To verify if any substring is starting from index i
Modifying the string w according to th rules
This condition checks if w [ i ] = upper ( letter )
This condition checks if w [ i ] is any lowercase letter apart from letter . If true replace it with letter
This condition checks if w [ i ] is any uppercase letter apart from letter . If true then replace it with upper ( letter ) .
number of forbidden strings
given string
letter to replace and occur max number of times
Calling function
function to round the number
Smaller multiple
Larger multiple
Return of closest of two
driver code
Python3 program to count ways to divide a string in two parts a and b such that b / pow ( 10 , p ) == a
substring representing int a
no of digits in a
consider only most significant l1 characters of remaining string for int b
if any of a or b contains leading 0 s discard this
if both are equal
driver code to test above function
Python3 code to find number of subsequences of " ab " in the string S which is repeated K times .
Count of ' a ' s
Count of ' b ' s
occurrence of " ab " s in string S
Add following two : 1 ) K * ( Occurrences of " ab " in single string ) 2 ) a is from one string and b is from other .
Driver code
Python3 program to check if a given password is strong or not .
Checking lower alphabet in string
Strength of password
Driver code
Function to find a string of length n with k distinct characters .
Initialize result with first k Latin letters
Fill remaining n - k letters by repeating k letters again and again .
Driver code
Returns true if x is vowel .
Function to check whether a character is vowel or not
Function to FindSubstrings of string
hash = set ( ) ; To store vowels
If current character is vowel then insert into hash
If all vowels are present in current substring
Driver Code
Python3 program Find concatenated string with uncommon characters of given strings
res = " " result
store all characters of s2 in map
Find characters of s1 that are not present in s2 and append to result
Find characters of s2 that are not present in s1 .
Driver Code
Function to decode the message .
Store the decoded string
found variable is used to tell that the encoded encoded character is found in that particular word .
Set found variable to false whenever we find whitespace , meaning that encoded character for new word is not found
Driver code
Function to check the Vowel
to count total number of vowel from 0 to n
string object
Total numbers of Vowel
Print all the rotated string .
Concatenate str with itself
Print all substrings of size n . Note that size of temp is 2 n
Driver Code
Python3 program to get same frequency character string by removal of at most one char
Utility method to get index of character ch in lower alphabet characters
Returns true if all non - zero elements values are same
get first non - zero element
check equality of each element with variable same
Returns true if we can make all character frequencies same
fill frequency array
if all frequencies are same , then return true
Try decreasing frequency of all character by one and then check all equality of all non - zero frequencies
Check character only if it occurs in str
Driver code
Function to find that number divisible by 11 or not
Compute sum of even and odd digit sums
When i is even , position of digit is odd
Check its difference is divisible by 11 or not
Driver code
Function to calculate Hamming distance
Driver code
function call
Python3 program to check if two strings are k anagram or not .
Function to check that is k - anagram or not
If both strings are not of equal length then return false
Store the occurrence of all characters in a hash_array
Count number of characters that are different in both strings
Return true if count is less than or equal to k
Driver Code
Function to remove all spaces from a given string
To keep track of non - space character count
Traverse the given string . If current character is not space , then place it at index 'count++
Utility Function
Driver program
A Python3 program to count number of substrings starting and ending with 1
Count of 1 's in input string
Traverse input string and count of 1 's in it
Return count of possible pairs among m 1 's
Driver program to test above function
Python 3 program to count substrings with recursive sum equal to 9
count = 0 To store result
Consider every character as beginning of substring
sum of digits in current substring
One by one choose every character as an ending character
Add current digit to sum , if sum becomes multiple of 5 then increment count . Let us do modular arithmetic to avoid overflow for big strings
Driver Code
Python3 program to generate n - bit Gray codes
This function generates all n bit Gray codes and prints the generated codes
base case
' arr ' will store all generated codes
start with one - bit pattern
Every iteration of this loop generates 2 * i codes from previously generated i codes .
Enter the prviously generated codes again in arr [ ] in reverse order . Nor arr [ ] has double number of codes .
append 0 to the first half
append 1 to the second half
prcontents of arr [ ]
Driver Code
Python3 implementation of the above approach
Function returns true if the move taken is valid else it will return false .
Function to print all the possible paths from ( 0 , 0 ) to ( n - 1 , n - 1 ) .
This will check the initial point ( i . e . ( 0 , 0 ) ) to start the paths .
If reach the last cell ( n - 1 , n - 1 ) then store the path and return
Mark the cell as visited
Check if downward move is valid
Check if the left move is valid
Check if the right move is valid
Check if the upper move is valid
Mark the cell as unvisited for other possible paths
Function to store and print all the valid paths
vector to store all the possible paths
Call the utility function to find the valid paths
Print all possible paths
Driver code
Python code to for n Queen placement
Helper Function to check if queen can be placed
Function to display placed queen
Function to check queens placement
Driver Code
Python3 implementation of the approach
Set to store all possible AND values .
Starting index of the sub - array .
Ending index of the sub - array . res = 2147483647 Integer . MAX_VALUE
AND value is added to the set .
The set contains all possible AND values .
recursive method to collect coins from height array l to r , with height h already collected
if l is more than r , no steps needed
loop over heights to get minimum height index
choose minimum from , 1 ) collecting coins using all vertical lines ( total r - l ) 2 ) collecting coins using lower horizontal lines and recursively on left and right segments
method returns minimum number of step to collect coin from stack , with height in height [ ] array
Driver code
Function to count the total number of direct paths
Driver Code
Function to find the point that is not a part of the side of a square
Traverse each pair of coordinates
Minimize x - coordinate in all the points except current point
Maximize x - coordinate in all the points except the current point
Minimize y - coordinate in all the points except current point
Maximize y - coordinate in all the points except current point
If x - coordinate matches with other same line
If y coordinate matches with other same line
Check if the condition for square exists or not
Print the output
Driver Code
Finding the nth triacontagonal Number
Driver Code
Finding the nth hexacontagon Number
Driver Code
Finding the nth enneacontagon Number
Driver Code
Finding the nth triacontakaidigon Number
Driver Code
Finding the nth Icosihexagonal Number
Driver Code
Finding the nth icosikaioctagonal Number
Driver Code
Finding the nth octacontagon number
Driver code
Finding the nth hectagon number
Driver code
Finding the nth tetracontagon Number
Driver Code
Python3 program to find perimeter of an Ellipse
Function to find the perimeter of an Ellipse
Compute perimeter
Driver code
Function call
Function to find the Area of the Reuleaux triangle
Side cannot be negative
Area of the Reuleaux triangle
Driver code
Function to return the side of the hexagon
Side cannot be negative
Side of the hexagon
Driver code
function to find the side of the hexagon
Side cannot be negative
Side of the hexagon
Driver code
Function that returns the segment for the middle point
the middle point
stores the segment index
increment sum by length of the segment
if the middle is in between two segments
if sum is greater than middle point
Driver code
nC2 = ( n ) * ( n - 1 ) / 2
Driver code
n is number of line
function for surface area
function for VOlume
Driver Code
Function to check the point
checking the equation of parabola with the given point
Driver code
Python 3 Program to check if the point lies within the ellipse or not
Function to check the point
checking the equation of ellipse with the given point
Driver code
Function to find the area of the inscribed circle
the diagonals cannot be negative
area of the circle
Driver code
Function to find the area of the biggest circle
the length and breadth cannot be negative
area of the circle
Driver code
Centered cube number function
Formula to calculate nth Centered cube number return it into main function .
Driver Code
Function to find the center of the circle
Driver Code
Python3 Program to calculate volume of Octahedron
utility Function
Driver Function
Python3 program to Volume of ellipsoid
Function To calculate Volume
Driver Code
Python3 program to find area of octagon
Utility function
Driver function
utility function
driver function
Python function which finds coordinates of mirror image . This function return a pair of double
Driver code to test above function
Python program to find minimum number of revolutions to reach a target center
Minimum revolutions to move center from ( x1 , y1 ) to ( x2 , y2 )
Driver code
limit for float comparison define eps 1e-6
Utility method to get area of right angle triangle , given base and hypotenuse
Prints base and height of triangle using hypotenuse and area information
maximum area will be obtained when base and height are equal ( = sqrt ( h * h / 2 ) )
if given area itself is larger than maxArea then no solution is possible
binary search for base
get height by pythagorean rule
Driver code to test above methods
Python3 program to find countLattice podefs on a circle
Function to count Lattice podefs on a circle
Initialize result as 4 for ( r , 0 ) , ( - r . 0 ) , ( 0 , r ) and ( 0 , - r )
Check every value that can be potential x
Find a potential y
checking whether square root is an defeger or not . Count increments by 4 for four different quadrant values
Driver program
Function to count the subarrays of size K having average at least M
Stores the resultant count of subarray
Stores the sum of subarrays of size K
Add the values of first K elements to the sum
Increment the count if the current subarray is valid
Traverse the given array
Find the updated sum
Check if current subarray is valid or not
Return the count of subarrays
Driver Code
''Function to perform all the queries
''Stores the count of 0s
''Count the number of 0s for  query of type 1
'' Update the array element for  query of type 2
''Driver Code
Function to count the minimum count of integers such that bitwise AND of that many consecutive elements is equal to 0
Stores the binary representation of N
Excludes first two characters "0b "
Stores the MSB bit
Stores the count of numbers
Return res
Driver Code Given Input
Function Call
Function is to find the largest no which gives the sequence n & ( n - 1 ) & ( n - 2 ) & ... . . & ( n - k ) = 0.
Since , we need the largest no , we start from n itself , till 0
Driver Code
''Function to calculate factorial of N
'' Base Case
'' Otherwise, recursively  calculate the factorial
''Function to find the value of P(n + r) for polynomial P(X)
''Stores the value of k
'' Store the required answer
'' Iterate in the range [1, N] and  multiply (n + r - i) with answer
'' Add the constant value C as 1
'' Return the result
''Driver Code
Function to find the winner of the game
Stores sum of A and B
If N is of the form m * ( A + B ) + y
Otherwise ,
Input
Function call
Python3 program for the above approach
Function to find Nth number not a multiple of A in range [ L , R ]
Calculate the Nth no
Check for the edge case
Input parameters
Function Call
Function to count number of paths in binary tree such that bitwise AND of all nodes is Odd
vector dp to store the count of bitwise odd paths till that vertex
Precomputing for each value
Check for odd value
Number of odd elements will be + 1 till the parent node
For even case
Since node is even Number of odd elements will be 0
Even value node will not contribute in answer hence dp [ i ] = previous answer
Printing the answer for each query
Vector to store queries
Function to calculate number of cycles
BigInteger is used here if N = 10 ^ 9 then multiply will result into value greater than 10 ^ 18
BigInteger multiply function
Return the final result
Driver Code
Given N
Function Call
Function to find the subarray
Add the difference to vectors
Sort vector to find minimum k
Initialize result
Adding first k - 1 values
Return the minimized sum
Driver code
Length of array
Given K
Function Call
Function to find a ^ b using binary exponentiation
Initialise result
If b is odd then , multiply result by a
b must be even now Change b to b / 2
Change a = a ^ 2
Function to find the last digit of the given equation
To store cyclicity
Store cyclicity from 1 - 10
Observation 1
Observation 3
To store the last digits of factorial 2 , 3 , and 4
Find the last digit of X
Step 1
Divide a [ N ] by cyclicity of v
If remainder is 0
Step 1.1
Step 1.2
Step 1.3
If r is non - zero , then return ( l ^ r ) % 10
Else return 0
Else return 1
Driver Code
Given numbers
Function call
Print the result
Function to find the maximum possible value of Y
Pairs contain count of minimum elements that will be utilized at place of Z . It is equal to count of possible pairs that is size of array divided by 4
Sorting the array in descending order so as to bring values with minimal difference closer to arr [ i ]
Here , i + 2 acts as a pointer that points to the third value of every possible quadruplet
Returning the optimally maximum possible value
Array declaration
Size of array
Python3 implementation to Find the minimum concatenation required to get strictly Longest Increasing Subsequence for the given array with repetitive elements
ordered map containing value and a vector containing index of it 's occurrences  <int, vector<int> > m;
Mapping index with their values in ordered map
k refers to present minimum index
Stores the number of concatenation required
Iterate over map m
it . second . back refers to the last element of corresponding vector
find the index of next minimum element in the sequence
Return the final answer
Driver code
Recursive function to return gcd of a and b
Function returns if it 's possible to have X white and Y black balls or not.
Finding gcd of ( x , y ) and ( a , b )
If gcd is same , it 's always  possible to reach (x, y)
Here it 's never possible  if gcd is not same
Driver Code
Python3 program for the above approach
Function to count the ways to color block
For storing powers of 2
For storing binomial coefficient values
Calculating binomial coefficient using DP
Calculating powers of 2
Sort the indices to calculate length of each section
Initialise answer to 1
Find the length of each section
Merge this section
Return the final count
Driver Code
Number of blocks
Number of colored blocks
Function call
Function to print array in given order
Sort the array
Check elements till the middle index
Check if length is odd print the middle index at last
Print the remaining elements in the described order
Driver code
Array declaration
Size of array
Function to find the required smallest number
Finding smallest number that divides n
i divides n and return this value immediately
If n is a prime number then answer should be n , As we can 't take 1 as our answer.
Driver Code
Utility function to print the contents of an array
Function to generate and print the required array
Initially all the positions are empty
To store the count of positions i such that arr [ i ] = s
To store the final array elements
Set arr [ i ] = s and the gap between them is exactly 2 so in for loop we use i += 2
Mark the i 'th position as visited  as we put arr[i] = s
Increment the count
Finding the next odd number after s
If the i 'th position is not visited  it means we did not put any value  at position i so we put 1 now
Print the final array
Driver code
Python3 implementation of the approach
divi [ i ] stores the count of divisors of i
sum [ i ] will store the sum of all the integers from 0 to i whose count of divisors is prime
Function for Sieve of Eratosthenes
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be 0 if i is Not a prime , else true . prime [ i ] stores 1 if i is prime
0 and 1 is not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .
Function to count the divisors
For each number i we will go to each of the multiple of i and update the count of divisor of its multiple j as i is one of the factor of j
Function for pre - computation
If count of divisors of i is prime
taking prefix sum
Driver code
Find all the prime numbers till N
Update the count of divisors of all the numbers till N
Precomputation for the prefix sum array
Perform query
Python3 implementation of the approach
Iterative function to calculate ( x ^ y ) % p in O ( log y )
Initialize result
Update x if it is greater than or equal to p
If y is odd then multiply x with the result
y must be even now y = y >> 1 y = y / 2
Function to return n ^ ( - 1 ) mod p
Function to return ( nCr % p ) using Fermat 's little theorem
Base case
Fill factorial array so that we can find all factorial of r , n and n - r
Function to return the count of odd numbers from 1 to n
Function to return the count of even numbers from 1 to n
Function to return the count of the required sequences
Take i even and n - i odd numbers
Number of odd numbers must be even
Total ways of placing n - i odd numbers in the sequence of n numbers
Add this number to the final answer
Driver code
Python3 implementation of the approach
Function for Sieve of Eratosthenes
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .
Function to return the sum of primes in the Kth array
Update vector v to store all the prime numbers upto MAX
To store the sum of primes in the kth array
Count of primes which are in the arrays from 1 to k - 1
k is the number of primes in the kth array
A prime has been added to the sum
Driver code
Function to return the index of the next occurrence of character ch in strr starting from the given index
Return the index of the first occurrence of ch
No occurrence found
Function to return the count of all the substrings of strr which contain the character ch at least one
To store the count of valid substrings
Index of the first occurrence of ch in strr
No occurrence of ch after index i in strr
Substrings starting at index i and ending at indices j , j + 1 , ... , n - 1 are all valid substring
Driver code
Function to check if the bitwise AND of the array elements is even or odd
If at least an even element is present then the bitwise AND of the array elements will be even
Driver code
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
Initialize result
Update x if it is >= p
If y is odd , multiply x with result
Y must be even now y = y >> 1 ; y = y / 2
Driver Code
Python 3 implementation of the approach
Function to return the length of longest contiguous string containing only 4 aTMs from the first N characters of the string
Initialize prefix sum array of characters and product variable
Preprocessing of prefix sum array
Finding the string length where N belongs to
Driver Code
-- -- - Recursion -- -- - method to find factorial of given number
recursion call
-- -- - Iteration -- -- - Method to find the factorial of a given number
using iteration
Driver method
Python3 program to implement Jump pointer algorithm
n -> it represent total number of nodes len -> it is the maximum length of array to hold parent of each node . In worst case , the highest value of parent a node can have is n - 1. 2 ^ len <= n - 1 len = O ( log2n )
jump represent 2D matrix to hold parent of node in jump matrix here we pass reference of 2D matrix so that the change made occur directly to the original matrix len is same as defined above n is total nodes in graph
c -> it represent child p -> it represent parent i -> it represent node number p = 0 means the node is root node here also we pass reference of 2D matrix and depth vector so that the change made occur directly to the original matrix and original vector
Enter the node in node array it stores all the nodes in the graph
To confirm that no child node have 2 parents
Make parent of x as y
function to jump to Lth parent of any node
To check if node is present in graph or not
In this loop we decrease the value of L by L / 2 and increment j by 1 after each iteration , and check for set bit if we get set bit then we update x with jth parent of x as L becomes less than or equal to zero means we have jumped to Lth parent of node x
To check if last bit is 1 or not
Use of shift operator to make L = L / 2 after every iteration
Driver code
n represent number of nodes
Initialization of parent matrix suppose max range of a node is up to 1000 if there are 1000 nodes than also length of jump matrix will not exceed 10
Node array is used to store all nodes
isNode is an array to check whether a node is present in graph or not
Function to calculate len len -> it is the maximum length of array to hold parent of each node .
R stores root node
Construction of graph here 0 represent that the node is root node
Function to pre compute jump matrix
Query to jump to parent using jump pointers query to jump to 1 st parent of node 2
Query to jump to 2 nd parent of node 4
Query to jump to 3 rd parent of node 8
Query to jump to 5 th parent of node 20
Function to reverse arr [ ] from start to end
Create a copy array and store reversed elements
Now copy reversed elements back to arr [ ]
Driver code
Function to reverse arr [ ] from start to end
Driver code
Function to find the modified binary string after M iterations
Set the value of M to the minimum of N or M .
Declaration of current string state
Loop over M iterations
Set the current state as null before each iteration
Check if this zero has exactly one 1 as neighbour
Flip the zero
If there is no change , then no need for further iterations .
Set the current state as the new previous state
Driver Code
Given String
Number of Iterations
Function Call
Python3 program for the above approach
Function to find the number of subsequences of the given array with a sum in range [ L , R ] and the difference between the maximum and minimum element is at least X
Initialize answer as 0
Creating mask from [ 0 , 2 ^ n - 1 ]
Stores the count and sum of selected elements respectively
Variables to store the value of Minimum and maximum element
Traverse the array
If the jth bit of the ith mask is on
Add the selected element
Update maxVal and minVal value
Check if the given conditions are true , increment ans by 1.
Driver Code
Given Input
Function Call
Function to find minimum number of elements required to obtain sum K
Stores the maximum sum that can be obtained
If K is greater than the Maximum sum
If K is less than or equal to to N
Stores the sum
Stores the count of numbers needed
Iterate until N is greater than or equal to 1 and sum is less than K
Increment count by 1
Increment sum by N
Update the sum
Finally , return the count
Driver Code
Given Input
Function Call
Function to count the elements with sum of the first that many natural numbers less than or equal to K
If K equals to 0
Stores the result
Iterate until low is less than or equal to high
Stores the sum of first mid natural numbers
If sum is less than or equal to K
Update res and low
Otherwise ,
Update
Return res
Driver Code
Input
Function call
Function to find the largest number k such that both k and - k are present in the array
Stores the array elements
Initialize a variable res as 0 to store maximum element while traversing the array
Iterate through array arr
Add the current element into the st
Check if the negative of this element is also present in the st or not
Return the resultant element
Drive Code
Function to check whether X is present in the array A [ ]
Initialise a pointer
Store the number of comparisons
Variable to store product
Check is N is odd
Update i and T
Traverse the array
Check if i < N
Update T
Check if T is equal to 0
Driver Code
Given Input
Function Call
Function to search an element in a sorted array formed by reversing subarrays from a random index
Set the boundaries for binary search
Apply binary search
Initialize the middle element
If element found
Random point is on right side of mid
From l to mid arr is reverse sorted
Random point is on the left side of mid
From mid to h arr is reverse sorted
Return Not Found
Driver Code
Given Input
Function Call
Function to find the maximum number of items that can be removed from both the arrays
Stores the maximum item count
Stores the prefix sum of the cost of items
Build the prefix sum for the array A [ ]
Update the value of A [ i ]
Build the prefix sum for the array B [ ]
Update the value of B [ i ]
Iterate through each item of the array A [ ]
If A [ i ] exceeds K
Store the remaining amount after taking top i elements from the array A
Store the number of items possible to take from the array B [ ]
Store low and high bounds for binary search
Binary search to find number of item that can be taken from stack B in rem amount
Calculate the mid value
Update the value of j and lo
Update the value of the hi
Store the maximum of total item count
Print the result
Driver Code
Function to check whether the given number N is prime or not
Base Case
If N has more than one factor , then return false
Otherwise , return true
Function to find X which is co - prime with the integers from the range [ L , R ]
Store the resultant number
Check for prime integers greater than R
If the current number is prime , then update coPrime and break out of loop
Print the resultant number
Driver Code
Function to find the maximum value of arr [ i ] + arr [ j ] + i - j over all pairs
Stores the required result
Traverse over all the pairs ( i , j )
Calculate the value of the expression and update the overall maximum value
Print the result
Driver Code
Function to find the maximum value of ( arr [ i ] + arr [ j ] + i - j ) possible for a pair in the array
Stores the maximum value of ( arr [ i ] + i )
Stores the required result
Traverse the array arr [ ]
Calculate for current pair and update maximum value
Update maxValue if ( arr [ i ] + I ) is greater than maxValue
Print the result
Driver code
Lower_bound function
Function to find the value closest to K in the array A [ ]
Initialize close value as the end element
Find lower bound of the array
If lower_bound is found
If lower_bound is not the first array element
If * ( it - 1 ) is closer to k
Return closest value of k
Function to find the minimum sum of abs ( arr [ i ] - brr [ j ] ) and abs ( brr [ j ] - crr [ k ] )
Sort the vectors arr and crr
Initialize minimum as LET_MAX
Traverse the array brr [ ]
Stores the element closest to val from the array arr [ ]
Stores the element closest to val from the array crr [ ]
If sum of differences is minimum
Update the minimum
Print the minimum absolute difference possible
Driver code
Function Call
Function to find the minimum number of swaps required to make the first and the last elements the largest and smallest element in the array
Stores the count of swaps
Stores the maximum element
Stores the minimum element
If the array contains a single distinct element
Stores the indices of the maximum and minimum elements
If the first index of the maximum element is found
If current index has the minimum element
Update the count of operations to place largest element at the first
Update the count of operations to place largest element at the last
If smallest element is present before the largest element initially
Driver Code
Python3 program for the above approach
Function to perform DFS Traversal on the given graph
Update the value of ans
Update the currentMin and currentMax
Traverse the adjacency list of the node src
Recursively call for the child node
Function to calculate maximum absolute difference between a node and its ancestor
Stores the adjacency list of graph
Create Adjacency list
Add a directed edge
Perform DFS Traversal
Print the maximum absolute difference
Driver Code
Function to find the minimum cost path from the source vertex to destination vertex via K intermediate vertices
Initialize the adjacency list
Generate the adjacency list
Initialize the minimum priority queue
Stores the minimum cost to travel between vertices via K intermediate nodes
Push the starting vertex , cost to reach and the number of remaining vertices
Pop the top element of the stack
If destination is reached
Return the cost
If all stops are exhausted
Find the neighbour with minimum cost
Pruning
Update cost
Update priority queue
If no path exists
Driver Code
Function Call to find the path from src to dist via k nodes having least sum of weights
Function to check if the given string is a comment or not
If two continuous slashes preceeds the comment
Driver Code
Given string
Function call to check whether then given string is a comment or not
Function to find digits for each array element that doesn 't divide any digit of the that element
Traverse the array arr [ ]
Iterate over the range [ 2 , 9 ]
Stores if there exists any digit in arr [ i ] which is divisible by j
If any digit of the number is divisible by j
If the digit j doesn 't  divide any digit of arr[i]
Driver Code
Function to find the longest non - decreasing subsequence with difference between adjacent elements exactly equal to 1
Base case
Sort the array in ascending order
Stores the maximum length
Traverse the array
If difference between current pair of adjacent elements is 1 or 0
Extend the current sequence Update len and max_len
Otherwise , start a new subsequence
Print the maximum length
Driver Code
Given array
Size of the array
Function call to find the longest subsequence
Function to find the minimum sum for each query after removing elements from either ends
Traverse the query array
Traverse the array from the front
If element equals val , then break out of loop
Traverse the array from rear
If element equals val , break
Prthe minimum of the two as the answer
Driver Code
Function Call
Function to find the frequency of the lexicographically Kth smallest character
Convert the string to array of characters
Sort the array in ascending order
Store the Kth character
Store the frequency of the K - th character
Count the frequency of the K - th character
Prthe count
Driver Code
Function to find the longest substring satisfying the given condition
Stores all temporary substrings
Stores the longest substring
Stores the length of the subT
Stores the first character of S
Traverse the string
If the absolute difference is 1
Update the length of subT
Update the longest substring
Otherwise , stores the current character
Again checking for longest substring and update accordingly
Print the longest substring
Driver Code
Given string
Function call to find the longest substring satisfying given condition
Function to minimize length of the array by removing similar subarrays from both ends of the array
Initialize two pointers
Stores the current integer
Check if the elements at both ends are same or not
Move the front pointer
Move the rear pointer
Print the minimized length of the array
Input
Function call to find the minimized length of the array
Function to find the maximum and minimum array elements up to the i - th index
Traverse the array
Compare current value with maximum and minimum values up to previous index
Function to find the maximum and minimum array elements from i - th index
Traverse the array in reverse
Compare current value with maximum and minimum values in the next index
Function to find the maximum and minimum array elements for each query
If no index remains after excluding the elements in a given range
Find maximum and minimum from from the range [ R + 1 , N - 1 ]
Find maximum and minimum from from the range [ 0 , N - 1 ]
Find maximum and minimum values from the ranges [ 0 , L - 1 ] and [ R + 1 , N - 1 ]
Print maximum and minimum value
Function to perform queries to find the minimum and maximum array elements excluding elements from a given range
Size of the array
Size of query array
prefix [ i ] [ 0 ] : Stores the maximum prefix [ i ] [ 1 ] : Stores the minimum value
suffix [ i ] [ 0 ] : Stores the maximum suffix [ i ] [ 1 ] : Stores the minimum value
Function calls to store maximum and minimum values for respective ranges
Driver Code
Given array
Function to convert the jumbled into digits
Strings of digits 0 - 9
Initialize vector
Initialize answer
Size of the string
Traverse the string
Update the elements of the vector
Print the digits into their original format
Return answer
Driver Code
Function to check if a string s1 can be converted into s2
Count of '0' in strings in s1 and s2
Iterate both the strings and count the number of occurrences of
Count is not equal
Iterating over both the arrays and count the number of occurrences of '0
If the count of occurrences of '0' in S2 exceeds that in S1
Driver code
Function to check if it is possible to make two binary strings equal by given operations
Stores count of 1 ' s ▁ and ▁ 0' s of the string str1
Stores count of 1 ' s ▁ and ▁ 0' s of the string str2
Stores current count of 1 's  presenty in the string str1
Count the number of 1 ' s ▁ and ▁ 0' s present in the strings str1 and str2
If the number of 1 ' s ▁ and ▁ 0' s are not same of the strings str1 and str2 then prnot possible
Traversing through the strings str1 and str2
If the str1 character not equals to str2 character
Swaps 0 with 1 of the string str1
Breaks the loop as the count of 1 's is zero. Hence, no swaps possible
Swaps 1 with 0 in the string str1
Prnot possible
Given Strings
Function Call
Function to the count of array elements whose distinct digits are a subst of the digits of K
Stores distinct digits of K
Iterate over all the digits of K
Insert current digit into st
Update K
Stores the count of array elements whose distinct digits are a subst of the digits of K
Traverse the array , arr [ ]
Stores current element
Check if all the digits of arr [ i ] are present in K or not
Iterate over all the digits of arr [ i ]
Stores current digit
If digit not present in the st
Update flag
Update no
If all the digits of arr [ i ] present in st
Update count
Driver Code
Python 3 program for the above approach
Stores nodes value of the Tree
Function to build segment tree
Base Case
Find the value of mid
Update for left subtree
Update for right subtree
Update the value at the current index
Function for finding the index of the first element at least x
If current range does not lie in query range
If current range is inside of query range
Maximum value in this range is less than x
Finding index of first value in this range
Update the value of the minimum index
Find mid of the current range
Left subtree
If it does not lie in left subtree
Function for updating segment tree
Update the value , we reached leaf node
Find the mid
If pos lies in the left subtree
pos lies in the right subtree
Update the maximum value in the range
Function to print the answer for the given queries
Build segment tree
Find index of first value atleast 2 in range [ 0 , n - 1 ]
Update value at index 2 to 5
Find index of first value atleast 4 in range [ 0 , n - 1 ]
Find index of first value atleast 0 in range [ 0 , n - 1 ]
Driver Code
Function Call
Structure of a Node
Function to return depth of the Tree from root
If current node is a leaf node
Function to find the root of the smallest subtree consisting of all deepest nodes
Stores height of left subtree
Stores height of right subtree
If height of left subtree exceeds that of the right subtree
Traverse left subtree
If height of right subtree exceeds that of the left subtree
Otherwise
Return current node
Driver Code
Function to find the maximum count of even numbers from all the subarrays of size K
Stores the maximum count of even numbers from all the subarrays of size K
Generate all subarrays of size K
Store count of even numbers in current subarray of size K
Traverse the current subarray
If current element is an even number
Update the answer
Return answer
Driver Code
Size of the input array
Function to count pairs whose concatenation is divisible by 3 and each element can be present in at most one pair
Stores count of array elements whose remainder is 0 by taking modulo by 3
Stores count of array elements whose remainder is 1 by taking modulo by 3
Stores count of array elements whose remainder is 2 by taking modulo by 3
Traverse the array
Stores sum of digits of arr [ i ]
Update digitSum
If remainder of digitSum by by taking modulo 3 is 0
Update rem0
If remainder of digitSum by by taking modulo 3 is 1
Update rem1
Update rem2
Driver Code
To display the result
Function to print the maximum non - emepty subsequence sum
Stores the maximum non - emepty subsequence sum in an array
Stores the largest element in the array
Traverse the array
If a [ i ] is greater than 0
Update sum
Driver Code
Function to return the count of number of 1 's at ith bit in a range [1, n - 1]
Store count till nearest power of 2 less than N
If K - th bit is set in N
Add to result the nearest power of 2 less than N
Return result
Driver Code
Function Call
Function to check if a can be divided into two substrings such that one subis subof the other
Store the last character of S
Traverse the characters at indices [ 0 , N - 2 ]
Check if the current character is equal to the last character
If true , set f = 1
Break out of the loop
Driver Code
Given string , S
Store the size of S
Function Call
Python3 program for the above approach
Function to find the bulb having maximum glow
Initialize variables
Traverse the array consisting of glowing time of the bulbs
For 1 st bulb
Calculate the glowing time
Update the maximum glow
Find lexicographically largest bulb
Bulb with maximum time
Return the resultant bulb
Driver Code
Function call
Function to find a pair of intersecting ranges
Stores ending po of every range
Stores the maximum ending poobtained
Iterate from 0 to N - 1
Starting point of the current range
End point of the current range
Push pairs into tup
Sort the tup vector
Iterate over the ranges
If starting points are equal
Prthe indices of the intersecting ranges
If no such pair of segments exist
Driver Code
Given N
Given 2d ranges [ ] [ ] array
Function call
Function to find the NGE for the given circular array arr [ ]
create stack list
Initialize nge [ ] array to - 1
Traverse the array
If stack is not empty and current element is greater than top element of the stack
Assign next greater element for the top element of the stack
Pop the top element of the stack
Print the nge [ ] array
Driver Code
Function Call
Python3 program for the above approach
Function to generate prime numbers using Sieve of Eratosthenes
Set 0 and 1 as non - prime
If p is a prime
Set all multiples of p as non - prime
Function to calculate the product of digits of the given number
Stores the product of digits
Extract digits and add to the sum
Return the product of its digits
Function to print number of distinct values with digit product as composite
Initialize set
Initialize boolean array
Pre - compute primes
Traverse array
of the current array element
If Product of digits is less than or equal to 1
If Product of digits is not a prime
Print the answer
Driver Code
Given array
Given size
Function call
Python program to implement the above approach
Function to find all prime numbers in range [ 1 , lmt ] using sieve of Eratosthenes
segmentedSieve [ i ] : Stores if i is a prime number ( True ) or not ( False )
Set 0 and 1 as non - prime
Iterate over the range [ 2 , lmt ]
If i is a prime number
Append i into prime
Set all multiple of i non - prime
Update Sieve [ j ]
Function to find all the prime numbers in the range [ low , high ]
Stores square root of high + 1
Stores all the prime numbers in the range [ 1 , lmt ]
Find all the prime numbers in the range [ 1 , lmt ]
Stores count of elements in the range [ low , high ]
segmentedSieve [ i ] : Check if ( i - low ) is a prime number or not
Traverse the array prime [ ]
Store smallest multiple of prime [ i ] in the range [ low , high ]
If lowLim is less than low
Update lowLim
Iterate over all multiples of prime [ i ]
If j not equal to prime [ i ]
Update segmentedSieve [ j - low ]
Function to count the number of pairs in the range [ L , R ] whose sum is a prime number in the range [ L , R ]
segmentedSieve [ i ] : Check if ( i - L ) is a prime number or not
Stores count of pairs whose sum of elements is a prime and in range [ L , R ]
Iterate over [ L , R ]
If ( i - L ) is a prime
Update cntPairs
Driver Code
Function to count the number of zeroes present in the string
Traverse the string
Return the count
Function to rearrange the string s . t the string can be reduced to a length K as per the given rules
Distribute the count of 0 s and 1 s in segment of length 2 k
Store string that are initially have formed lexicographically smallest 2 k length substring
Store the lexicographically smallest string of length n that satisfy the condition
Insert temp_str into final_str ( n / 2 k ) times and add ( n % 2 k ) characters of temp_str at end
Return the final string
Function to reduce the string to length K that follows the given conditions
If the string contains either 0 s or 1 s then it always be reduced into a K length string
If the string contains only 0 s 1 s then it always reduces to a K length string
If K = 1
Check whether the given string is K reducing string or not
Otherwise recursively find the string
Driver Code
Function Call
Python3 program for the above approach
Function to return the number of quadruplets having the given sum
Initialize answer
Store the frequency of sum of first two elements
Traverse from 0 to N - 1 , where arr [ i ] is the 3 rd element
All possible 4 th elements
Sum of last two element
Frequency of sum of first two elements
Store frequency of all possible sums of first two elements
Return the answer
Driver Code
Given array arr [ ]
Given sum S
Function Call
Python3 program to implement the above approach
Iterative Function to calculate ( x ^ y ) % MOD
Initialize result
Update x if it exceeds MOD
If x is divisible by MOD
If y is odd
Multiply x with res
y must be even now
Function to count number of pairs whose product modulo 1000000007 is 1
Stores the count of desired pairs
Stores the frequencies of each array element
Traverse the array and update frequencies in hash
Calculate modular inverse of arr [ i ] under modulo 1000000007
Update desired count of pairs
If arr [ i ] and its modular inverse is equal under modulo MOD
Updating count of desired pairs
Return the final count
Driver code
Python3 program for the above approach
Function to check if all subarrays of array have at least one unique element
Stores frequency of subarray elements
Generate all subarrays
Insert first element in map
Update frequency of current subarray in the HashMap
Check if at least one element occurs once in current subarray
If any subarray doesn 't  have unique element
Clear map for next subarray
Return Yes if all subarray having at least 1 unique element
Driver Code
Given array arr [ ]
Function Call
Function to find insert position of K
Lower and upper bounds
Traverse the search space
If K is found
Return the insert position
Driver Code
Function to return the position of the given value using binary search
Return 0 if every value is greater than the given value
Return N - 1 if every value is smaller than the given value
Perform Binary Search
Iterate till start < end
Find the mid
Update start and end
Return the position of the given value
Function to return the number of make the array sorted
Index x to update
Increment value by y
Set newElement equals to x + y
Compute the new index
Print the minimum number of swaps
Driver Code
Given array arr [ ]
Given Queries
Function Call
Python3 program for the above approach
Class of a tree node
Function to create new tree node
Function to find the total number of required nodes
If current node is null then return to the parent node
Check if current node value is less than or equal to minNodeVal
Update the value of minNodeVal
Update the count
Go to the left subtree
Go to the right subtree
Driver Code
Binary Tree creation 8 / \ / \ 6 5 / \ / \ / \ / \ 6 7 3 9
Function Call
Print the result
Function to check if a string is palindrome or not
Start and end of the string
Iterate the string until i > j
If there is a mismatch
Increment first pointer and decrement the other
Given string is a palindrome
Function two check if the strings can be combined to form a palindrome
Initialize array of characters
Stores character of string in the character array
Find left and right parts of strings a and b
Substring a [ j ... i - 1 ]
Substring b [ j ... i - 1 ]
Substring a [ i ... n ]
Substring b [ i ... n ]
Check is left part of a + right part of b or vice versa is a palindrome
Print the result
Otherwise
Driver Code
Function to return minimum element to be added in array B so that array A become subsequence of array B
Stores indices of the array elements
Iterate over the array
Store the indices of the array elements
Stores the LIS
Check if element B [ i ] is in array A [ ]
Perform Binary Search
Find the value of mid m
Update l and r
If found better element ' e ' for pos r + 1
Otherwise , extend the current subsequence
Return the answer
Driver Code
Given arrays
Function call
Python3 program for the above approach
Stores the adjacency list of the given graph
Create Adjacency List
Stores the distance of all reachable vertex from source
Check if vertex is present in queue or not
Counts the relaxation for each vertex
Distance from src to src is 0
Create a queue
Push source in the queue
Mark source as visited
Front vertex of Queue
Relaxing all edges of vertex from the Queue
Update the dist [ v ] to minimum distance
If vertex v is in Queue
Negative cycle
No cycle found
Driver Code
Number of vertices
Given source node src
Number of Edges
Given Edges with weight
If cycle is present
Python3 program for the above approach
Function that performs the Floyd Warshall to find all shortest paths
Initialize the distance matrix
Pick all vertices as source one by one
Pick all vertices as destination for the above picked source
If vertex k is on the shortest path from i to j then update dist [ i ] [ j ]
Sum the upper diagonal of the shortest distance matrix
Traverse the given dist [ ] [ ]
Add the distance
Return the final sum
Function to generate the tree
Add edges
Get source and destination with weight
Add the edges
Perform Floyd Warshal Algorithm
Driver code
Number of Vertices
Number of Edges
Given Edges with weight
Function Call
Function to prkth integer in a given string
Size of the string
If space char found decrement K
If K becomes 1 , the next string is the required one
Print required number
Driver Code
Given string
Given K
Function call
Python3 program for the above approach
Function to return the list of minimum peak elements
Length of original list
Initialize resultant list
Traverse each element of list
Length of original list after removing the peak element
Traverse new list after removal of previous min peak element
Update min and index , if first element of list > next element
Update min and index , if last element of list > previous one
Update min and index , if list has single element
Update min and index , if current element > adjacent elements
Remove current min peak element from list
Insert min peak into resultant list
Print resultant list
Driver Code
Given array arr [ ]
Function call
Function to search if element X is present in reverse sorted array
Store the first index of the subarray in which X lies
Store the last index of the subarray in which X lies
Store the middle index of the subarray
Check if value at middle index of the subarray equal to X
Element is found
If X is smaller than the value at middle index of the subarray
Search in right half of subarray
Search in left half of subarray
If X not found
Driver Code
Python3 program for the above approach
Function to check if both a and b are present in the AP series or not
Iterate over the array arr [ ]
If a is present
If b is present
If both are present
Otherwise
Function to print all the elements of the Arithmetic Progression
Function to construct AP series consisting of A and B with minimum Nth term
Stores the resultant series
Initialise ans [ i ] as INT_MAX
Maintain a smaller than b
Swap a and b
Difference between a and b
Check for all possible combination of start and common difference d
Initialise arr [ 0 ] as start
Check if both a and b are present or not and the Nth term is the minimum or not
Update the answer
Print the resultant array
Driver Code
Function call
Function to find the position of the string having word as prefix
Initialize an List
Extract words from the sentence
Traverse each word
Traverse the characters of word
If prefix does not match
Otherwise
Return the word
Return - 1 if not present
Driver code
Python3 program to implement the above approach
Pair Class instance
Stores the current index
Stores the path travelled so far
Stores the minimum jumps required to reach the last index from current index
Constructor
Minimum jumps required to reach end of the array
Stores the maximum number of steps that can be taken from the current index
Checking if index stays within bounds
Stores the minimum number of jumps required to jump from ( i + j ) - th index
Function to find all possible paths to reach end of array requiring minimum number of steps
Storing the neighbours of current index element
Function to find the minimum steps and corresponding paths to reach end of an array
Stores the minimum jumps from each position to last position
Driver Code
Function to find the longest increasing absolute even subsequence
Length of arr
Stores length of required subsequence
Traverse the array
Traverse prefix of current array element
Check if the subsequence is LIS and have even absolute difference of adjacent pairs
Update lis [ ]
Stores maximum length
Find the length of longest absolute even subsequence
Return the maximum length of absolute even subsequence
Given arr [ ]
Function Call
Structure of a Tree Node
Function to get the sum of left subtree and right subtree
Base case
Store the sum of left subtree
Store the sum of right subtree
Check if node is balanced or not
Increase count of balanced nodes
Return subtree sum
Insert nodes in tree
Store the count of balanced nodes
Structure of a Node
Print alternate nodes of a binary tree
Store nodes of each level
Store count of nodes of current level
Print alternate nodes of the current level
If left child exists
Store left child
If right child exists
Store right child
Driver Code
Create a tree
Function to required count subarrays
For storing count of subarrays
For finding next smaller element left to a element if there is no next smaller element left to it than taking - 1.
For finding next smaller element right to a element if there is no next smaller element right to it than taking n .
Taking exact boundaries in which arr [ i ] is minimum
Similarly for right side
Driver code
Given array arr [ ]
Function call
Function to reorder the B to contain all the substrings of A
Find length of strings
Initialize array to count the frequencies of the character
Counting frequencies of character in B
Find remaining character in B
Declare the reordered string
Loop until freq [ j ] > 0
Decrement the value from freq array
Check if A [ j ] > A [ 0 ]
Check if A [ j ] < A [ 0 ]
Append the remaining characters to the end of the result
Push all the values from frequency array in the answer
Return the answer
Driver Code
Given strings A and B
Function call
Function to calculate the cost
Base case
Even condition
Odd condition
Return cost
Function to find Kth element
Array to store the costs
Sort the array based on cost
Given range and K
Function Call
Function to check if the string represents a hexadecimal number
Iterate over string
Check if the character is invalid
Print true if all characters are valid
Given string
Function call
Function that finds the longest arithmetic subsequence having the same absolute difference
Stores the length of sequences having same difference
Stores the resultant length
Iterate over the array
Update length of subsequence
Return res
Given array arr [ ]
Function Call
Python3 program for the above approach
Function to find the prime numbers till 10 ^ 5 using Sieve of Eratosthenes
False here indicates that it is not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p , set them to non - prime
Function which computes the length of the LIS of Prime Numbers
Create an array of size n
Create boolean array to mark prime numbers
Precompute N primes
Compute optimized LIS having prime numbers in bottom up manner
check for LIS and prime
Return maximum value in lis [ ]
Driver Code
Given array
Size of array
Function Call
Python3 program of the above approach
Function to check if the number is pair - sum of sum of first X natural numbers
Check if the given number is sum of pair of special numbers
X is the sum of first i natural numbers
t = 2 * Y
Condition to check if Y is a special number
Driver Code
Function Call
Function that finds the value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- - * 1 ]
Return the C ( n , k )
Binomial coefficient based function to find nth catalan number in O ( n ) time
Calculate value of 2 nCn
Return C ( 2 n , n ) / ( n + 1 )
Function to find possible ways to put balanced parenthesis in an expression of length n
If n is odd , not possible to create any valid parentheses
Otherwise return n / 2 th Catalan Number
Difference between counting ways of 2 * N and N is the result
Given value of N
Function call
Function to check if two integers are on the same diagonal of the matrix
Storing Indexes of y in P , Q
Condition to check if the both the elements are in same diagonal of a matrix
Driver Code
Dimensions of Matrix
Given Matrix
elements to be checked
Function Call
Function to check whether m number of steps of type 1 are valid or not
If m and n are the count of operations of type 1 and type 2 respectively , then n - m operations are performed
Find the value of S after step 2
If m steps of type 1 is valid
Function to find the number of operations of type 1 required
Iterate over the range
Find the value of mid
Check if m steps of type 1 are valid or not
If mid is the valid number of steps
If no valid number of steps exist
Given and N , K
Function call
Function to check if all the characters are lowercase or not
Traverse the string
If any character is not found to be in lowerCase
Function to print the decodings
If all characters are not in lowercase
Function to return the character corresponding to given integer
Function to return the decodings
Base case
Recursive call
Stores the characters of two digit numbers
Extract first digit and first two digits
Check if it lies in the range of alphabets
Next recursive call
Combine both the output in a single readonly output array
Index of readonly output array
Store the elements of output1 in readonly output array
Store the elements of output2 in readonly output array
Result the result
Driver Code
Function call
Print function call
Function to check if a number is prime or not
Base Case
Iterate till [ 5 , sqrt ( N ) ] to detect primality of numbers
If N is divisible by i or i + 2
Return 1 if N is prime
Function to count the prime numbers which can be expressed as sum of consecutive prime numbers
Initialize count as 0
Stores prime numbers
If i is prime
Initialize the sum
Find all required primes upto N
Add it to the sum
Return the final count
Given number N
Function call
Python3 program for the above approach
Function to check if a given number is a perfect square or not
Find square root of n
Check if the square root is an integer or not
Function to print the subarray whose sum is a perfect square
Sum of first K elements
If the first k elements have a sum as perfect square
Iterate through the array
If sum is perfect square
If subarray not found
Driver Code
Given array
Given subarray size K
Function call
Python3 program for the above approach
Function to update the frequency array such that freq [ i ] stores the frequency of digit i to n
While there are digits left to process
Update the frequency of the current digit
Remove the last digit
Function that returns true if a and b are anagrams of each other
To store the frequencies of the digits in a and b
Update the frequency of the digits in a
Update the frequency of the digits in b
Match the frequencies of the common digits
If frequency differs for any digit then the numbers are not anagrams of each other
Function to check if any permutation of a number is a power of 2 or not
Iterate over all possible perfect power of 2
Print that number
Given number N
Function call
Function to count total number of right angled triangle
Initialise count with 0
Run three nested loops and check all combinations of sides
Condition for right angled triangle
Increment count
Given N
Function call
Function to check whether the two matrices are mirror of each other
Initialising row and column of second matrix
Iterating over the matrices
Check row of first matrix with reversed row of second matrix
If the element is not equal
Increment column
Reset column to 0 for new row
Increment row
Driver code
Given 2 matrices
Function call
Function to return the count of nodes in the path from source to destination
Mark the node visited
If dest is reached
Traverse all adjacent nodes
If not already visited
If there is path , then include the current node
Return 0 if there is no path between src and dest through the current node
Function to return the count of nodes between two given vertices of the acyclic Graph
Initialize an adjacency list
Populate the edges in the list
Mark all the nodes as not visited
Count nodes in the path from src to dest
Return the nodes between src and dest
Driver Code
Given number of vertices and edges
Given source and destination vertices
Given edges
Function to calculate GCD
Function to calculate LCM
Function to check if aelements in the array are pairwise coprime
Initialize variables
Iterate over the array
Calculate product of array elements
Calculate LCM of array elements
If the product of array elements is equal to LCM of the array
Driver Code
Function call
Python3 program for above approach
Function to return the maximum difference between the subset sums
Stores the total sum of the array
Checks for positive and negative elements
Stores the minimum element from the given array
Traverse the array
Calculate total sum
Mark positive element present in the set
Mark negative element present in the set
Find the minimum element of the set
If the array contains both positive and negative elements
Otherwise
Driver Code
Given the array
Length of the array
Function Call
Python3 program for the above approach
Function to return minimum difference between two subarray sums
To store prefix sums
Generate prefix sum array
To store suffix sums
Generate suffix sum array
Stores the minimum difference
Traverse the given array
Calculate the difference
Update minDiff
Return minDiff
Driver Code
Given array
Length of the array
Function to determine how many days required to wait for the next warmer temperature
To store the answer
Traverse all the temperatures
Check if current index is the next warmer temperature of any previous indexes
Pop the element
Push the current index
Print waiting days
Given temperatures
Function call
To store the time
Function to perform DFS to store times , distance and parent of each node
Update the distance of node u
Update parent of node u
Increment time timeT
Discovery time of node u
Traverse the adjacency list of current node and recursively call DFS for each vertex
If current node Adj [ u ] [ i ] is unvisited
Update the finishing time
Function to add edges between nodes u and v
Function to find the node U such that path from root to U contains nodes in V [ ]
Initialise vis , dis , parent , preTime , and postTime
Store Adjacency List
Create adjacency List
Perform DFS Traversal
Stores the distance of deepest vertex 'u
Update the deepest node by traversing the qu [ ]
Find deepest vertex
Replace each vertex with it 's  corresponding parent except  the root vertex
Checks if the ancestor with respect to deepest vertex u
Update ans
Prthe result
Driver Code
Total vertices
Given set of vertices
Given edges
Function Call
Function to find if the array contains only one distinct element
Create a set
Compare and print the result
Driver code
Function call
To store the results and sum of all nodes in the array
To create adjacency list
Function to add edges into the adjacency list
Recursive function that calculate the value of the cost of splitting the tree recursively
Fetch the child of node - r
Neglect if cur node is parent
Add all values of nodes which are decendents of r
The two trees formed are rooted at ' r ' with its decendents
Check and replace if current product t1 * t2 is large
Function to find the maximum cost after splitting the tree in 2 halves
Find sum of values in all nodes
Traverse edges to create adjacency list
Function Call
Driver Code
Values in each node
Given Edges
Python3 program to implement the above approach
Keeps track of the farthest end of the diameter
Keeps track of the length of the diameter
Stores the nodes which are at ends of the diameter
Perform DFS on the given tree
Update diameter and X
If current node is an end of diameter
Traverse its neighbors
Function to call DFS for the required purposes
DFS from a random node and find the node farthest from it
DFS from X to calculate diameter
DFS from farthest_node to find the farthest node ( s ) from it
DFS from X ( other end of diameter ) and check the farthest node ( s ) from it
If node i is the end of a diameter
Increase diameter by 1
Otherwise
Remains unchanged
constructed tree is 1 / \ 2 3 / | \ 4 5 6 | 7
Creating undirected edges
Python3 program to implement the above approach
Function to find the minimum replacements required
Stores the maximum and minimum values for every pair of the form arr [ i ] , arr [ n - i - 1 ]
Map for storing frequencies of every sum formed by pairs
Minimum element in the pair
Maximum element in the pair
Incrementing the frequency of sum encountered
Insert minimum and maximum values
Sorting the vectors
Iterate over all possible values of x
Count of pairs for which x > x + k
Count of pairs for which x < mn + 1
Count of pairs requiring 2 replacements
Count of pairs requiring no replacements
Count of pairs requiring 1 replacement
Update the answer
Return the answer
Driver Code
Stores the nodes to be deleted
Structure of a Tree node
Function to create a new node
Function to check whether the node needs to be deleted or not
Function to perform tree pruning by performing post order traversal
If the node needs to be deleted
Store the its subtree
Perform Inorder Traversal
Function to print the forests
Stores the remaining nodes
Print the inorder traversal of Forests
Driver Code
Function to call dfs to calculate the number of ways
If target + sum is odd or S exceeds sum
No sultion exists
Return the answer
Driver Code
Function that find maximum distance between two elements whose absolute difference is K
To store the first index
Traverse elements and find maximum distance between 2 elements whose absolute difference is K
If this is first occurrence of element then insert its index in map
If next element present in map then update max distance
If previous element present in map then update max distance
Return the answer
Given array arr [ ]
Given difference K
Function call
Function to find the substring with K pairwise distinct characters and with same frequency
Stores the occurrence of each character in the substring Set all values at each index to zero
Length of the string
Iterate over the string
Stores the count of unique characters
Moving the substring ending at j
Calculate the index of character in frequency array
Increment the frequency
Update the maximum index
Check for both the conditions
Return the answer
Driver Code
Function call
Function to find number of ordered positive integer pairs ( x , y ) such that they satisfy the equation
Initialize answer variable
Iterate over all possible values of y
For valid x and y , ( n * n ) % ( y - n ) has to be 0
Increment count of ordered pairs
Print the answer
Driver Code
Function call
Initialize the adjacency list and visited array
Function to find the number of root to leaf paths that contain atmost m consecutive nodes with value k
Mark the current node as visited
If value at current node is k
Increment counter
If count is greater than m return from that path
Path is allowed if size of present node becomes 0 i . e it has no child root and no more than m consecutive 1 's
Driver code
Desigining the tree
Counter counts no . of consecutive nodes
Function to calculate and return the reverse of the number
Function to calculate the total count of N - digit numbers satisfying the necessary conditions
Initialize two variables
Calculate the sum of odd and even positions
Check for divisibility
Return the answer
Driver Code
Function to find the distance traveled together
Stores distance travelled by A
Stpres distance travelled by B
Stores the total distance travelled together
Sum of distance travelled
Condition for traveling together
Driver Code
Creating Adjacency list
Function to perform DFS traversal
Initializing parent of each node to p
Iterate over the children
Function to add values of children to respective parent nodes
Root node
Function to return sum of values of each node in path from V to the root
Path from node V to root node
Driver Code
Insert edges into the graph
Values assigned to each vertex
Constructing the tree using adjacency list
Parent array
store values in the parent array
Add values of children to the parent
Find sum of nodes lying in the path
Add root node since its value is not included yet
Function to find second largest product pair in arr [ 0. . n - 1 ]
No pair exits
Initialize max product pair
Traverse through every possible pair and keep track of largest product
If pair is largest
Second largest
If pair dose not largest but larger then second largest
Print the pairs
Driver Code
Given array
Function call
Utility function to check if a character is a vowel
Function to calculate and return the count of substrings with even number of vowels
Stores the count of substrings
If the current character is a vowel
Increase count
If substring contains even number of vowels
Increase the answer
Prthe final answer
Driver Code
Utility function to check if a character is a vowel
Function to calculate and return the count of substrings with even number of vowels
Stores the count of substrings with even and odd number of vowels respectively
Update count of vowels modulo 2 in sum to obtain even or odd
Increment even / odd count
Count substrings with even number of vowels using Handshaking Lemma
Driver Code
Python3 program to implement the above approach
Structure of a Tree node
Function to create new node
Function returns required level of width k , if found else - 1
To store the node and the label and perform traversal
Taking the last label of each level of the tree
Check width of current level
If the width is equal to k then return that level
Taking the first label of each level of the tree
If any level does not has width equal to k , return - 1
Driver Code
Function to check operation can be perform or not
Number of operation to perform s . t . mid is median
If mid is median of the array
Function to find max median of the array
Lowest possible median
Highest possible median
Checking for mid is possible for the median of array after doing at most k operation
Return the max possible ans
Driver Code
Given array
Given number of operation
Size of array
Sort the array
Function call
Function that returns true if the count of elements is less than mid
To store count of elements less than mid
Loop through each row
Count elements less than mid in the ith row
Function that returns the Kth smallest element in the NxM Matrix after sorting in an array
Initialize low and high
Perform binary search
Find the mid
Check if the count of elements is less than mid
Return Kth smallest element of the matrix
Driver Code
Function that finds the count of substrings containing only character C in the S
To store total count of substrings
To store count of consecutive C 's
Loop through the string
Increase the consecutive count of C 's
Add count of sub - strings from consecutive strings
Reset the consecutive count of C 's
Add count of sub - strings from consecutive strings
Print the count of sub - strings containing only C
Driver Code
Function to check if both halves of a string are palindrome or not
Length of string
Initialize both part as true
If first half is not palindrome
If second half is not palindrome
If both halves are palindrome
Driver code
Python3 program to find palindromic string
Stores frequency array and its count
Total number of pairs
Initializing array of size 26 to store count of character
Counting occurrence of each character of current string
Convert each count to parity ( 0 or 1 ) on the basis of its frequency
Adding to answer
Frequency of single character can be possibly changed , so change its parity
Driver code
Python3 program to find K - th smallest element in a perfect BST
A BST node
A utility function to create a new BST node
A utility function to insert a new node with given key in BST
If the tree is empty
Recur down the left subtree for smaller values
Recur down the right subtree for smaller values
Return the ( unchanged ) node pointer
FUnction to find Kth Smallest element in a perfect BST
Find the median ( division operation is floored )
If the element is at the median
Calculate the number of nodes in the right and left sub - trees ( division operation is floored )
If median is located higher
If median is located lower
Driver Code
Let us create following BST 50 / \ 30 70 / \ / \ 20 40 60 80 / \ / \ / \ / \ 14 25 35 45 55 65 75 85
Function call
Function to check if the string follows rules or not
Check for the first condition
Check for the third condition
Check for the second condition
Driver code
Given string
Function call
Function to check if the number is a Nude number
Variable initialization
Integer ' copy ' is converted to a string
Total digits in the number
Loop through all digits and check if every digit divides n or not
flag is used to keep check
Return true or false as per the condition
Function to find the longest subsequence which contain all Nude numbers
Find the length of longest Nude number subsequence
Given array arr [ ]
Function call
Function to return the length of the longest sub - array
Initialize set
Store 1 st element of sub - array into set
Check absolute difference between two elements
If the new element is not present in the set
If the set contains two elements
Otherwise
Update the maximum length
Remove the set elements
Driver Code
Function to find the maximum length of a subarray of 1 s after removing at most one 0
Stores the count of consecutive 1 's from left
Stores the count of consecutive 1 's from right
Traverse left to right
If cell is non - empty
Increase count
If cell is empty
Store the count of consecutive 1 's  till (i - 1)-th index
Traverse from right to left
Store the count of consecutive 1 s till ( i + 1 ) - th index
Stores the length of longest subarray
Store the maximum
If array a contains only 1 s return n else return ans
Driver code
Function to find the value of X
Loop to check all the numbers divisible by N that yield minimum N / i value
Prthe value of packages
Driver code
Given N and K
Function call
Function to find maximum side length of square
Sort array in asc order
Traverse array in desc order
Driver code
Given array arr [ ]
Function Call
Function to implement DFS traversal
Mark node v as visited
Traverse Adj_List of node v
If current node is not visited
DFS call for current node
Count the total red and blue nodes of children of its subtree
Count the no . of red and blue nodes in the subtree
If subtree contains all red node & no blue node
If subtree contains all blue node & no red node
Function to count the number of nodes with red color
Function to count the number of nodes with blue color
Function to create a Tree with given vertices
Traverse the edge [ ] array
Create adjacency list
Function to count the number of subtree with the given condition
For creating adjacency list
To store the count of subtree with only blue and red color
visited array for DFS Traversal
Count the number of red node in the tree
Count the number of blue node in the tree
Function Call to build tree
DFS Traversal
Print the final count
Driver Code
Function to minimize the difference between two elements of array
Find all the element which are possible by multiplying 2 to odd numbers
Sort the array
Find the minimum difference Iterate and find which adjacent elements have the minimum difference
Print the minimum difference
Driver Code
Given array
Function Call
To store the prefix sum1 array
Function for searching the lower bound of the subarray
Iterate until low less than equal to high
For each mid finding sum1 of sub array less than or equal to k
Return the final answer
Function to find the length of subarray with sum1 K
Initialize sum1 to 0
Push the prefix sum1 of the array arr [ ] in prefix [ ]
Search r for each i
Update ans
Print the length of subarray found in the array
Driver Code
Given array arr [ ]
Given sum1 K
Function Call
Function to find minimum reversals
Add all adjacent nodes to the node in the graph
Insert edges in the graph
Insert edges in the reversed graph
Create array visited to mark all the visited nodes
Stores the number of edges to be reversed
BFS Traversal
Pop the current node from the queue
mark the current node visited
Intitialize count of edges need to be reversed to 0
Push adjacent nodes in the reversed graph to the queue , if not visited
Push adjacent nodes in graph to the queue , if not visited count the number of nodes added to the queue
Update the reverse edge to the final count
Return the result
Driver Code
Given edges to the graph
Number of nodes
Function Call
Function to split the array
Sort the array in increasing order
Calculating the max difference between consecutive elements
Return the final minimum difference
Driver Code
Given array arr [ ]
Size of array
Function Call
Function to find the R ' th ▁ row ▁ and ▁ C ' th column value in the given pattern
First element of a given row
Element in the given column
Driver Code
Function call
Function that prints the number of maximum groups
Store the number of occurrence of elements
Make all groups of similar elements and store the left numbers
Condition for finding first leftover element
Condition for current leftover element
Condition if group size is equal to or more than current element
Printing maximum number of groups
Driver Code
Python3 program to calculate leftmost column having at least a 1
Function return leftmost column having at least a 1
If current element is 1 decrement column by 1
If current element is 0 increment row by 1
Driver Code
Function to implement the above approach
Hashmap to store remainder - length of the number as key - value pairs
Iterate till N + 1 length
Search remainder in the map
If remainder is not already present insert the length for the corresponding remainder
Keep increasing M
To keep M in range of integer
Length of one number is the current Length
Length of the other number is the length paired with current remainder in map
Driver code
2D prefix sum for submatrix sum query for matrix
Function to find the prefix sum of the matrix from i and j
Function to count the number of ways to select equal sized subarrays such that they have atleast K common elements
Combining the two arrays
Calculating the 2D prefix sum
iterating through all the elements of matrix and considering them to be the bottom right
applying binary search over side length
if sum of this submatrix >= k then new search space will be [ low , mid ]
else new search space will be [ mid + 1 , high ]
Adding the total submatrices
Driver Code
Function to return the lexicographically smallest string that can be formed by swapping at most one character . The characters might not necessarily be adjacent .
Set - 1 as default for every character .
Character index to fill in the last occurrence array
If this is true then this character is being visited for the first time from the last Thus last occurrence of this character is stored in this index
Character to replace
Find the last occurrence of this character .
Swap this with the last occurrence swap ( s [ i ] , s [ last_occ ] ) ;
Driver code
Function to preprocess the matrix for computing the sum of every possible matrix of the given size
Loop to copy the first row of the matrix into the aux matrix
Computing the sum column - wise
Computing row wise sum
Function to find the sum of a submatrix with the given indices
Overall sum from the top to right corner of matrix
Removing the sum from the top corer of the matrix
Remove the overlapping sum
Add the sum of top corner which is subtracted twice
Function to check whether square sub matrices of size mid satisfy the condition or not
Iterating throught all possible submatrices of given size
Function to find the maximum square size possible with the such that every submatrix have sum less than the given sum
Search space
Binary search for size
Check if the mid satisfies the given condition
Driver Code
Initialize array for segment tree
Function that builds the segment tree to return the max element in a range
update the value in segment tree from given array
find the middle index
If there are more than one elements , then recur for left and right subtrees and store the max of values in this node
Function to return the max element in the given range
If the range is out of bounds , return - 1
Function that returns length of longest subarray with same elements in atmost K increments .
Initialize the result variable Even though the K is 0 , the required longest subarray , in that case , will also be of length 1
Initialize the prefix sum array
Build the prefix sum array
Build the segment tree for range max query
Loop through the array with a starting point as i for the required subarray till the longest subarray is found
Performing the binary search to find the endpoint for the selected range
Find the mid for binary search
Find the max element in the range [ i , mid ] using Segment Tree
Total sum of subarray after increments
Actual sum of elements before increments
Check if such increment is possible If true , then current i is the actual starting point of the required longest subarray
Now for finding the endpoint for this range Perform the Binary search again with the updated start
Store max end point for the range to give longest subarray
If false , it means that the selected range is invalid
Perform the Binary Search again with the updated end
Store the length of longest subarray
Return result
Driver code
Function to return the count of the required numbers
Last digit of the current number
If the last digit is equal to any of the given digits
Driver code
Function to return the minimum value of k that satisfies the given condition
Find the maximum element
Lowest answer can be 1 and the highest answer can be ( maximum + 1 )
Binary search
Get the mid element
Calculate the sum after dividing the array by new K which is mid
Search in the second half
First half
Driver code
Python3 program to find Sum of GCD over all subarrays
Build Sparse Table
Building the Sparse Table for GCD [ L , R ] Queries
Utility Function to calculate GCD in range [ L , R ]
Calculating where the answer is stored in our Sparse Table
Utility Function to find next - farther position where gcd is same
BinarySearch for Next Position for EndPointer
Utility function to calculate sum of gcd
Initializing all the values
Finding the next position for endPointer
Adding the suitable sum to our answer
Changing prevEndPointer
Recalculating tempGCD
Driver code
Standard Lomuto partition function
Implementation of QuickSelect
Partition a [ left . . right ] around a pivot and find the position of the pivot
If pivot itself is the k - th smallest element
If there are more than k - 1 elements on left of pivot , then k - th smallest must be on left side .
Else k - th smallest is on right side .
Driver Code
Function to find pair with largest sum which is less than K in the array
To store the break point
Sort the given array
Find the break point
No need to look beyond i 'th index
Find the required pair
Print the required answer
Driver code
Function call
Function that returns true if str [ i ... j ] is a palindrome
Function to return the length of the longest palindromic sub - string such that it starts and ends with the character ch
If current character is a valid starting index
Instead of finding the ending index from the beginning , find the index from the end This is because if the current sub - string is a palindrome then there is no need to check the sub - strings of smaller length and we can skip to the next iteration of the outer loop
If current character is a valid ending index
If str [ i ... j ] is a palindrome then update the length of the maximum palindrome so far
Driver code
Function to find the starting and the ending index of the sub - array with equal number of alphabets and numeric digits
If its an alphabet
Else its a number
Pick a starting poas i
Consider all sub - arrays starting from i
If this is a 0 sum sub - array then compare it with maximum size sub - array calculated so far
If no valid sub - array found
Driver code
Python 3 implementation of the approach
Function to sort the given string using counting sort
Array to store the count of each character
Insert characters in the string in increasing order
Function that returns true if str can be generated from any permutation of the two strings selected from the given vector
Sort the given string
Select two strings at a time from given vector
Get the concatenated string
Sort the resultant string
If the resultant string is equal to the given string str
No valid pair found
Driver code
Maximum distinct characters possible
To store the frequency of the characters
Function to pre - calculate the frequency array
Only the first character has frequency 1 till index 0
Starting from the second character of the string
For every possible character
Current character under consideration
If it is equal to the character at the current index
Function to return the frequency of the given character in the sub - string str [ l ... r ]
Function to return the first non - repeating character in range [ l . . r ]
Starting from the first character
Current character
If frequency of the current character is 1 then return the character
All the characters of the sub - string are repeating
Driver Code
Pre - calculate the frequency array
Python3 implementation of the above approach
Function to return the length of the longest sub string having frequency of a character greater than half of the length of the sub string
for each of the character ' a ' to 'z
finding frequency prefix array of the character
Finding the r [ ] and l [ ] arrays .
for each j from 0 to n
Finding the lower bound of i .
storing the maximum value of i - j + 1
clearing all the vector so that it can be used for other characters .
Driver Code
Python3 program to find first repeating character
The function returns index of the first repeating character in a string . If all characters are repeating then returns - 1
Mark all characters as not visited
Traverse from right and update res as soon as we see a visited character .
Driver program to test above function
Function to return the maximum sum for every possible sequence such that a [ i ] + a [ i + k ] + a [ i + 2 k ] + ... + a [ i + qk ] is maximized
Initialize the maximum with the smallest value
Initialize the sum array with zero
Iterate from the right
Update the sum starting at the current element
Update the maximum so far
Driver code
Function to return the count of valid indices pairs
To store the frequencies of characters of string s1 and s2
To store the count of valid pairs
Update the frequencies of the characters of string s1
Update the frequencies of the characters of string s2
Find the count of valid pairs
Driver code
Python 3 implementation of the approach
Driver Code
Function that returns true if the array can be reduced to 0 s with the given operation performed given number of times
Set to store unique elements
Add every element of the array to the set
Count of all the unique elements in the array
Driver code
Function to find the sum pairs that occur the most
Hash - table
Keep a count of sum pairs
Variables to store maximum occurrence
Iterate in the hash table
Print all sum pair which occur maximum number of times
Driver code
Function to return the minimum required index
Start from arr [ pos - 1 ]
All elements are equal from arr [ i + 1 ] to arr [ pos ]
Driver code
Function Call
Function to return the minimum required index
Short - circuit more comparisions as found the border point
For cases were high = low + 1 and arr [ high ] will match with arr [ pos ] but not arr [ low ] or arr [ mid ] . In such iteration the if condition will satisfy and loop will break post that low will be updated . Hence i will not point to the correct index .
Driver code
Python3 implementation of the approach
Function to return the count of the required strings
Searching index after longest common prefix ends
Searching index before longest common suffix ends
If only 1 character is different in both the strings
Checking remaining part of string for equality
Searching in right of string h ( g to h )
Driver code
Function to return the minimum required difference
Sort the given array
When minimum element is removed
When maximum element is removed
Return the minimum of diff1 and diff2
Driver Code
Function to return the minimum required difference
If current element is greater than max
max will become secondMax
Update the max
If current element is greater than secondMax but smaller than max
Update the secondMax
If current element is smaller than min
min will become secondMin
Update the min
If current element is smaller than secondMin but greater than min
Update the secondMin
Minimum of the two possible differences
Driver code
Boolean function to check distinct digits of a number
Take last digit
Check if all other digits are same as last digit
Remove last digit
Function to return the count of integers that are composed of a single distinct digit only
If i has single distinct digit
Driver code
Python3 program to print the sum of the minimum pair
Function to return the sum of the minimum pair from the array
If found new minimum
Minimum now becomes second minimum
Update minimum
If current element is > min and < secondMin
Update secondMin
Return the sum of the minimum pair
Driver code
function to find longest subarray
this will contain length of longest subarray found
Driver code
Python3 program to remove the elements which appear strictly less than k times from the array .
Hash map which will store the frequency of the elements of the array .
Incrementing the frequency of the element by 1.
Print the element which appear more than or equal to k times .
Driver Code
function to check if two consecutive same characters are present
Driver Code
Python 3 program to remove the elements which appear more than k times from the array .
Hash map which will store the frequency of the elements of the array .
Incrementing the frequency of the element by 1.
Print the element which appear less than or equal to k times .
Driver Code
Python3 program to find the smallest number from the array after n deletions
Returns maximum element from arr [ 0. . m - 1 ] after deleting elements from del [ 0. . n - 1 ]
Hash Map of the numbers to be deleted
Increment the count of del [ i ]
Initializing the SmallestElement
Search if the element is present
Decrement its frequency
If the frequency becomes 0 , erase it from the map
Else compare it SmallestElement
Driver code
Python3 program to find the largest number from the array after n deletions
Returns maximum element from arr [ 0. . m - 1 ] after deleting elements from del [ 0. . n - 1 ]
Hash Map of the numbers to be deleted
Increment the count of del [ i ]
Initializing the largestElement
Search if the element is present
Decrement its frequency
If the frequency becomes 0 , erase it from the map
Else compare it largestElement
Driver code
A simple Python3 solution to count anomalies in an array .
Driver Code
Function to find count of all majority elements in a Matrix
Store frequency of elements in matrix
loop to iteratre through map
check if frequency is greater than or equal to ( N * M ) / 2
Driver Code
Function to find the column with max difference
Traverse matrix column wise
Insert elements of column to vector
calculating difference between maximum and minimum
Driver Code
A binary search based program to find the only missing number in a sorted in a sorted array of distinct elements within limited range
Driver Code
Function to delete L to R element
Return size of Array after delete element
Driver Code
Function to find index in preSum list of tuples upto which all prefix sum values are less than or equal to val .
Starting and ending index of search space .
To store required index value
If middle value is less than or equal to val then index can lie in mid + 1. . n else it lies in 0. . mid - 1
Function to find Longest subarray having average greater than or equal to x .
Update array by subtracting x from each element
Length of Longest subarray .
list to store pair of prefix sum and corresponding ending index value .
To store current value of prefix sum .
To store minimum index value in range 0. . i of preSum vector .
Insert values in preSum vector
Update minInd array .
If sum is greater than or equal to 0 , then answer is i + 1
If sum is less than 0 , then find if there is a prefix array having sum that needs to be added to current sum to make its value greater than or equal to 0. If yes , then compare length of updated subarray with maximum length found so far
Driver Code
PYTHON 3 program to find the only missing element .
If this is the first element which is not index + 1 , then missing element is mid + 1
if this is not the first missing element search in left side
if it follows index + 1 property then search in right side
if no element is missing
Driver code
Python3 program to find index of first occurrence of x when array is sorted .
lower_bound returns iterator pointing to first element that does not compare less to x .
If x is not present return - 1.
Driver Code
Python 3 program to find index of first occurrence of x when array is sorted .
Driver Code
Function to find duplicate
Find the intersection point of the slow and fast .
Find the " entrance " to the cycle .
Driver code
Python3 program to count greater characters on right side of every character .
Arrays to store result and character counts .
start from right side of string
Driver code
Returns number of pairs in arr [ 0. . n - 1 ] with sum equal to sum
Store counts of all elements in a dictionary
Traverse through all the elements
Search if a pair can be formed with arr [ i ]
Driver code
A O ( n ) Python 3 program to find maximum quadruple inan array .
Function to find a maximum product of a quadruple in array of integers of size n
if size is less than 4 , no quadruple exists
Initialize Maximum , second maximum , third maximum and fourth maximum element
Initialize Minimum , second minimum , third minimum and fourth minimum element
Update Maximum , second maximum , third maximum and fourth maximum element
Update second maximum , third maximum and fourth maximum element
Update third maximum and fourth maximum element
Update fourth maximum element
Update Minimum , second minimum third minimum and fourth minimum element
Update second minimum , third minimum and fourth minimum element
Update third minimum and fourth minimum element
Update fourth minimum element
Return the maximum of x , y and z
Driver program to test above function
Returns the number of triplets with distance between farthest points <= L
sort to get ordered triplets so that we can find the distance between farthest points belonging to a triplet
generate and check for all possible triplets : { arr [ i ] , arr [ j ] , arr [ k ] }
Since the array is sorted the farthest points will be a [ i ] and a [ k ] ;
Driver Code
set of n points on the X axis
Return the lower bound i . e smallest index of element having value greater or equal to value
Return the number of triplet indices satisfies the three constraints
sort the array
for each element from index 2 to n - 1.
finding the lower bound of arr [ i ] - k .
If there are at least two elements between lower bound and current element .
increment the count by lb - i C 2.
Driver code
Python3 program to find minimum sum of roots of a given polynomial
resultant list
a lis that store indices of the positive elements
a list that store indices of the negative elements
Case - 1 :
Case - 2 :
Case - 3 :
Case - 4 :
Driver code
Python3 code for Longest Palindromic substring using Palindromic Tree data structure
store start and end indexes of current Node inclusively
Stores length of substring
stores insertion Node for all characters a - z
stores the Maximum Palindromic Suffix Node for the current Node
Stores Node information for constant time access
Keeps track the Current Node while insertion
Function to insert edge in tree
Finding X , such that s [ currIndex ] + X + s [ currIndex ] is palindrome .
Check if s [ currIndex ] + X + s [ currIndex ] is already Present in tree .
Else Create new node
Setting suffix edge for newly Created Node .
Longest Palindromic suffix for a string of length 1 is a Null string .
Else
Driver code
Imaginary root 's suffix edge points to   itself, since for an imaginary string   of length = -1 has an imaginary suffix   string. Imaginary root.
NULL root 's suffix edge points to   Imaginary root, since for a string of   length = 0 has an imaginary suffix string. 
last will be the index of our last substring
Find the missing number in a range
here we xor of all the number
xor last number
Driver method
Returns last index of x if it is present . Else returns - 1.
String in which char is to be found
char whose index is to be found
Returns last index of x if it is present . Else returns - 1.
Traverse from right
Driver code
Returns smallest number whose set bits are maximum in given range .
driver code
Python3 code to find the largest value smaller than or equal to N
To create new BST Node
To insert a new node in BST
If tree is empty return new node
If key is less then or greater then node value then recur down the tree
Return the ( unchanged ) node pointer
Returns largest value smaller than or equal to key . If key is smaller than the smallest , it returns - 1.
Driver code
Function to find no . of elements to be added to get s
Apply Binary search
Find mid
find sum of 1 to mid natural numbers using formula
If sum is equal to n return mid
If greater than n do r = mid - 1
else do l = mid + 1
If not possible , return - 1
Drivers code
Compare two string equals are not
Main function to find string location
Move mid to the middle
If mid is empty , find closest non - empty string
If mid is empty , search in both sides of mid and find the closest non - empty string , and set mid accordingly .
If str is found at mid
If str is greater than mid
If str is smaller than mid
Driver Code
Input arr of Strings .
input Search String
Function to sort the given string in decreasing order by removing the non adjacent characters
Keeps the track whether the string can be sorted or not
Traverse the given string S
Check if S [ i ] and S [ i + 1 ] are both '1
Traverse the string S from the indices i to 0
If S [ j ] and S [ j + 1 ] is equal to 0
Mark flag false
If flag is 0 , then it is not possible to sort the string
Otherwise
Driver Code
Function to find the maximum sum of MEX of prefix arrays for any arrangement of the given array
Stores the final arrangement
Sort the array in increasing order
Iterate over the array arr [ ]
Iterate over the array , arr [ ] and push the remaining occurrences of the elements into ans [ ]
Prthe array , ans [ ]
Driver Code
Given array
Store the size of the array
Function Call
Function to implement bubble sort without using loops
Base Case : If array contains a single element
Base Case : If array contains two elements
Store the first two elements of the list in variables a and b
Store remaining elements in the list bs
Store the list after each recursive call
If a < b
Otherwise , if b >= a
Recursively call for the list less than the last element and and return the newly formed list
Driver Code
Print the array
Function to print the elements of the matrix in row - wise manner
Function to sort boundary elements of a matrix starting from the outermost to the innermost boundary and place them in a clockwise manner
k - starting row index m - ending row index l - starting column index n - ending column index i - iterator
Stores the current boundary elements
Push the first row
Push the last column
Push the last row
Push the first column
Sort the boundary elements
Update the first row
Update the last column
Update the last row
Update the first column
Print the resultant matrix
Driver Code
Given matrix
Python 3 Program for the above approach
Function to find minimum sum of absolute differences of pairs of a triplet
Sort the array
Stores the minimum sum
Traverse the array
Update the minimum sum
Print the minimum sum
Driver Code
Input
Function call to find minimum sum of absolute differences of pairs in a triplet
Function to check if all characters of the string can be made the same
Sort the string
Calculate ASCII value of the median character
Stores the minimum number of operations required to make all characters equal
Traverse the string
Calculate absolute value of current character and median character
Print the minimum number of operations required
Driver Code
Python program for the above approach
Function to count the maximum score of an index
Base Case
If the value for the current index is pre - calculated
Calculate maximum score for all the steps in the range from i + 1 to i + k
Score for index ( i + j )
Update dp [ i ] and return the maximum value
Function to get maximum score possible from the array A
Array to store memoization
Initialize dp with - 1
Driver Code
Function to find the count of triplets ( a , b , c ) Such that the equations ax ^ 2 + bx + c = 0 has real roots
store count of triplets ( a , b , c ) such that ax ^ 2 + bx + c = 0 has real roots
base case
Generate all possible triplets ( a , b , c )
if the coefficient of X ^ 2 and x are equal
if coefficient of X ^ 2 or x are equal to the constant
condition for having real roots
Driver code
Function Call
Function to check if all array elements can be reduced to less than X or not
Checks if all array elements are already a X or not
Traverse every possible pair
Calculate GCD of two array elements
If gcd is a 1
If gcd is a X , then a pair is present to reduce all array elements to a X
If no pair is present with gcd is a X
Function to check if all array elements area X
Function to calculate gcd of two numbers
Driver Code
Function to check if it is possible to choose X and Y elements from a [ ] and b [ ] such that maximum element among X element is less than minimum element among Y elements
Check if there are atleast X elements in arr1 [ ] and atleast Y elements in arr2 [ ]
Sort arrays in ascending order
Check if ( X - 1 ) - th element in arr1 [ ] is less than from M - Yth element in arr2 [ ]
Return false
Driver Code
Function Call
Function to split the array into two subset such that the Bitwise XOR between the maximum of one subset and minimum of other is minimum
Sort the array in increasing order
Calculating the min Bitwise XOR between consecutive elements
Return the final minimum Bitwise XOR
Driver Code
Given array arr [ ]
Size of array
Function Call
Function to check if an array is sorted in increasing order or not
Traverse the array
Function to sort the array by left shifting digits of array elements
Stores previous array element
Traverse the array arr [ ]
Stores current element
Stores current element in string format
Left - shift digits of current element in all possible ways
Left - shift digits of current element by idx
If temp greater than or equal to prev and temp less than optEle
Update arr [ i ]
Update prev
If arr is in increasing order
Otherwise
Driver Code
Python3 program for the above approach
Function to find maximum shops that can be visited by K persons
Store opening and closing time of shops
Sort the pair of array
Stores the result
Stores current number of persons visiting some shop with their ending time
Check if current shop can be assigned to a person who 's  already visiting any other shop
Checks if there is any person whose closing time <= current shop opening time
Erase previous shop visited by the person satisfying the condition
Insert new closing time of current shop for the person satisfying a1he condition
Increment the count by one
In case if no person have closing time <= current shop opening time but there are some persons left
Finally pr the ans
Driver Code
Given starting and ending time
Given K and N
Function call
Function to find the maximum subarray sum possible by swapping elements from array arr [ ] with that from array brr [ ]
Stores elements from the arrays arr [ ] and brr [ ]
Store elements of array arr [ ] and brr [ ] in the vector crr
Sort the vector crr in descending order
Stores maximum sum
Calculate the sum till the last index in crr [ ] which is less than N which contains a positive element
Print the sum
Driver code
Given arrays and respective lengths
Calculate maximum subarray sum
Function that counts the pairs whose Bitwise XOR is greater than both the elements of pair
Stores the count of pairs
Generate all possible pairs
Find the Bitwise XOR
Find the maximum of two
If xo < mx , increment count
Print the value of count
Driver Code
Function Call
Function to find the arrangement of seating
Stores the row in which the ith person sits
Stores the width of seats along with their index or row number
Sort the array
Store the seats and row for boy 's seat
Stores the index of row upto which boys have taken seat
Iterate the string
Push the row number at index in vector and heap
Increment the index to let the next boy in the next minimum width vacant row
Otherwise
If girl then take top of element of the max heap
Pop from queue
Print the values
Driver Code
Given N
Given arr [ ]
Given string
Function Call
Function to find the absolute difference between sum of first K maximum even and odd numbers
Stores index from where odd number starts
Segregate even and odd number
If current element is even
Sort in decreasing order even part
Sort in decreasing order odd part
Calculate sum of k maximum even number
Calculate sum of k maximum odd number
Print the absolute difference
Given array [ ] arr
Size of array
Function Call
Function to rearrange array that satisfies the given condition
Stores sum of elements of the given array
Calculate totalSum
If the totalSum is equal to 0
No possible way to rearrange array
If totalSum exceeds 0
Rearrange the array in descending order
Otherwise
Rearrange the array in ascending order
Driver Code
Python3 program for the above approach
Function to create the frequency array of the given array arr [ ]
Hashmap to store the frequencies
Store freq for each element
Get the total frequencies
Store frequencies in subset [ ] array
Return frequency array
Function to check is sum N / 2 can be formed using some subset
dp [ i ] [ j ] store the answer to form sum j using 1 st i elements
Initialize dp [ ] [ ] with true
Fill the subset table in the bottom up manner
If current element is less than j
Update current state
Return the result
Function to check if the given array can be split into required sets
Store frequencies of arr [ ]
If size of arr [ ] is odd then print " Yes "
Check if answer is true or not
Print the result
Driver Code
Given array arr
Function Call
Python3 program for the above approach
Function to find number of way to distribute coins giving exactly one coin to each person
Sort the given arrays
Start from bigger salary
Increment the amount
Reduce amount of valid coins by one each time
Return the result
Driver code
Given two arrays
Function call
Function that counts the pair in the array arr [ ]
Sort the array
Initialize two pointers
Add all valid pairs to answer
Return the answer
Driver Code
Given array arr [ ]
Function call
Comparator to sort the array in ascending order
Function to maximise the sum of the given array
Stores { A [ i ] , B [ i ] } pairs
Sort in descending order of the values in the array A [ ]
Stores the maximum sum
If B [ i ] is equal to 0
Simply add A [ i ] to the sum
Add the highest K numbers
Subtract from the sum
Return the sum
Driver Code
Python3 program to implement the above approach
For a single character
Stores count of repetitions of a character
If repeating character
Otherwise
Store frequency
Reset count
Insert the last character block
Sort the frequencies
Stores the minimum cost of all operations
Store the absolute difference of i - th frequencies of ordered and unordered sequences
Return the minimum cost
Driver Code
letters [ i ] stores the count of letters required to represent the digit i
Function to return the sum of letters required to represent N
Function to sort the array according to the sum of letters to represent n
List to store the digit sum with respective elements
Inserting digit sum with elements in the list pair
Making the vector pair
Sort the list , this will sort the pair according to the sum of letters to represent n
Print the sorted list content
Driver code
Function to find the minimum sum of differences possible for the given array when the array is divided into K subarrays
Array to store the differences between two adjacent elements
Iterating through the array
Appending differences to p
Sorting p in descending order
Sum of the first k - 1 values of p
Computing the result
Python3 implementation to sort the array of dates in the form of " DD - MM - YYYY " using custom comparator
Comparator to sort the array of dates
Condition to check the year
Condition to check the month
Condition to check the day
Function that prints the dates in ascensding order
Sort the dates using library sort function with custom Comparator
Loop to print the dates
Driver Code
Function to check the Vowel
Returns count of vowels in str
Check for vowel
Function to sort the array according to the number of the vowels
Vector to store the number of vowels with respective elements
Inserting number of vowels with respective strings in the vector pair
Sort the vector , this will sort the pair according to the number of vowels
Print the sorted vector content
Driver code
Function to return the minimum cost
Sort the price array
Calculate minimum price of n - 2 most costly person
Both the ways as discussed above
Calculate the minimum price of the two cheapest person
Driver code
Python3 implementation of the above approach .
states of DP
function to find minimum sum
base - case
if state is solved before , return
marking the state as solved
recurrence relation
driver function
input values
calling the required function ;
Function to return the kth element in the modified array
Finding the index from where the even numbers will be stored
Return the kth element
Driver code
Function to find all unique combination of given elements such that their sum is K
If a unique combination is found
For all other combinations
Check if the sum exceeds K
Check if it is repeated or not
Take the element into the combination
Recursive call
Remove element from the combination
Function to find all combination of the given elements
Sort the given elements
Driver code
Function call
Function that returns true if string s can be made up of by other two string from the array after concatenating one after another
If current string has been processed before
If current string is found in the map and it is not the string under consideration
Split the string into two contiguous sub - strings
If left sub - string is found in the map and the right sub - string can be made from the strings from the given array
If everything failed , we return false
Function to return the longest string that can made be made up from the other string of the given array
Put all the strings in the map
Sort the string in decreasing order of their lengths
Starting from the longest string
If current string can be made up from other strings
Driver code
Python3 implementation of the above approach
Function to return the sum of a triplet which is closest to x
To store the closest sum
Run three nested loops each loop for each element of triplet
Update the closestSum
Return the closest sum found
Driver code
Python3 implementation of the approach
Function to add edge to graph
Function to calculate indegrees of all the vertices
If there is an edge from i to x then increment indegree of x
Function to perform topological sort
Push every node to the queue which has no incoming edge
Since edge u is removed , update the indegrees of all the nodes which had an incoming edge from u
Function to generate the array from the given sub - sequences
Create the graph from the input sub - sequences
Add edge between every two consecutive elements of the given sub - sequences
Get the indegrees for all the vertices
Get the topological order of the created graph
Size of the required array
Given sub - sequences of the array
Get the resultant array as vector
Printing the array
Vector to store the primes
Create a boolean array " prime [ 0 . . n ] "
Initialize along prime values to be true
If prime [ p ] is not changed then it is a prime
Update amultiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked
Praprime numbers
Function to return the semi - prime sum
Variable to store the sum of semi - primes
Iterate over the prime values
Break the loop once the product exceeds N
Add valid products which are less than or equal to N each product is a semi - prime number
Driver code
Function to compress the array ranges
start iteration from the ith array element
loop until arr [ i + 1 ] == arr [ i ] and increment j
if the program do not enter into the above while loop this means that ( i + 1 ) th element is not consecutive to i th element
increment i for next iteration
print the consecutive range found
move i jump directly to j + 1
Driver code
Function to sort the array by removing misplaced elements
brr [ ] is used to store the sorted array elements
Print the sorted array
Driver code
Function to sort the array by removing misplaced elements
l stores the index
Print the sorted array
Driver code
Python3 implementation of the approach Function that returns X
Function that returns X
Sort the given array
Get the possible X
Container to store divisors
Find the divisors of x
Check if divisor
sort the vec because a is sorted and we have to compare all the elements
if size of both vectors is not same then we are sure that both vectors can 't be equal
Check if a and vec have same elements in them
Driver code
Function call
Function to print the Pendulum arrangement of the given array
Sort the array
pos stores the index of the last element of the array
odd stores the last odd index in the array
Move all odd index positioned elements to the right
Shift the elements by one position from odd to pos
Reverse the element from 0 to ( n - 1 ) / 2
Printing the pendulum arrangement
Driver code
A binary tree node
Function to append a node to the BST
If the tree is empty , return a new node
Otherwise , recur down the tree
Function to find the target pairs
LeftList which stores the left side values
RightList which stores the right side values
curr_left pointer is used for left side execution and curr_right pointer is used for right side execution
Storing the left side values into LeftList till leaf node not found
Storing the right side values into RightList till leaf node not found
Last node of LeftList
Last node of RightList
To prevent repetition like 2 , 6 and 6 , 2
Delete the last value of LeftList and make the execution to the right side
Delete the last value of RightList and make the execution to the left side
( left value + right value ) = target then print the left value and right value Delete the last value of left and right list and make the left execution to right side and right side execution to left side
Driver code
Function that returns the minimum number greater than Maximum of the array that cannot be formed using the elements of the array
Sort the given array
Maximum number in the array
table [ i ] will store the minimum number of elements from the array to form i
Calculate the minimum number of elements from the array required to form the numbers from 1 to ( 2 * Max )
If there exists a number greater than the Maximum element of the array that can be formed using the numbers of array
Driver code
Python 3 program to find product of all Subsequences of size K except the minimum and maximum Elements
2D array to store value of combinations nCr
Function to pre - calculate value of all combinations nCr
Function to calculate product of all subsequences except the minimum and maximum elements
Sorting array so that it becomes easy to calculate the number of times an element will come in first or last place
An element will occur ' powa ' times in total of which ' powla ' times it will be last element and ' powfa ' times it will be first element
In total it will come powe = powa - powla - powfa times
Multiplying a [ i ] powe times using Fermat Little Theorem under MODulo MOD for fast exponentiation
Driver Code
pre - calculation of all combinations
this function takes two unequal sized bit strings , converts them to same length by adding leading 0 s in the smaller string . Returns the the new length
Return len_b which is highest . No need to proceed further !
Return len_a which is greater or equal to len_b
The main function that performs AND operation of two - bit sequences and returns the resultant string
Make both strings of same length with the maximum length of s1 & s2 .
Initialize res as NULL string
We start from left to right as we have made both strings of same length .
Convert s1 [ i ] and s2 [ i ] to int and perform bitwise AND operation , append to " res " string
Driver Code
Check corner case : If there is just one binary string , then print it and return .
Function to return the maximum number of segments
Sort both the vectors
Initially pointing to the first element of b [ ]
Try to find a match in b [ ]
The segment ends before b [ j ]
The point lies within the segment
The segment starts after b [ j ]
Return the required count
Driver code
Python3 program to merge K sorted arrays
Merge and sort k arrays
Put the elements in sorted array .
Sort the output array
Driver Function
Input 2D - array
Number of arrays
Output array
Print merged array
Function to return the minimum number of operations required
Create another array to store the elements of matrix
will not work for negative elements , so . . adding this
adding this to handle negative elements too .
Sort the array to get median
To count the minimum operations
If there are even elements , then there are two medians . We consider the best of two as answer .
changed here as in case of even elements there will be 2 medians
Return minimum operations required
Driver code
Python3 implementation of above approach
Function to return length of smallest subarray containing both maximum and minimum value
find maximum and minimum values in the array
iterate over the array and set answer to smallest difference between position of maximum and position of minimum value
last occurrence of minValue
last occurrence of maxValue
Driver code
Python3 program find the minimum number of consecutive sequences in an array
Driver program
function call to print required answer
Function to find the minimum operations
Sort the given array
Count operations by assigning a [ i ] = i + 1
Driver Code
Function to print a case where the given sorting algorithm fails
only case where it fails
Driver Code
Function to find missing elements from given Ranges
First of all sort all the given ranges
store ans in a different vector
prev is use to store end of last range
j is used as a counter for ranges
for last segment
finally print all answer
Driver Code
Store ranges in vector of pair
Function to check if both sequences can be made equal
Sorting both the arrays
Flag to tell if there are more than one mismatch
To stores the index of mismatched element
If there is more than one mismatch then return False
If there is no mismatch or the difference between the mismatching elements is <= k then return true
Driver code
Function to return sum of width of all subsets
Sort the array
Driver program
Function to find value for covering maximum array elements
sort the students in ascending based on the candies
To store the number of happy students
To store the running sum
If the current student can 't be made happy
increment the count if we can make the ith student happy
If the sum = x then answer is n
If the count is equal to n then the answer is n - 1
Driver function
Linked List node
Function to check if linked list is pairwise sorted
Traverse further only if there are at - least two nodes left
Function to add a node at the beginning of Linked List
allocate node
put in the data
link the old list off the new node
move the head to point to the new node
Driver Code
The constructed linked list is : 10.15 . 9.9 .1 .5
Function that calculates maximum sum of products of two arrays
Variable to store the sum of products of array elements
length of the arrays
Sorting both the arrays
Traversing both the arrays and calculating sum of product
Driver code
Function to count such triplets
Sort the array
three pointer technique
Calculate the product of a triplet
Check if that product is greater than m , decrement mid
Check if that product is smaller than m , increment start
Check if that product is equal to m , decrement mid , increment start and increment the count of pairs
Drivers code
Python3 program to equally divide n elements into two sets such that second set has maximum distinct elements .
Insert all the resources in the set There will be unique resources in the set
return minimum of distinct resources and n / 2
Driver code
Python3 program to sort an array of size 3
Insert arr [ 1 ]
Insert arr [ 2 ]
Driver code
Python3 program to sort an array using merge sort such that merge operation takes O ( 1 ) extra space .
Obtaining actual values
Recursive merge sort with extra parameter , naxele
This functions finds max element and calls recursive merge sort .
Driver Code
Python3 program to print triplets with sum smaller than a given value
Sort input array
Every iteration of loop counts triplet with first element as arr [ i ] .
Initialize other two elements as corner elements of subarray arr [ j + 1. . k ]
Use Meet in the Middle concept
If sum of current triplet is more or equal , move right corner to look for smaller values
Else move left corner
This is important . For current i and j , there are total k - j third elements .
Driver code
function to print the characters in sorted order
primary stack
secondary stack
append first character
iterate for all character in string
i - th character ASCII
stack 's top element ASCII
if greater or equal to top element then push to stack
if smaller , then push all element to the temporary stack
push all greater elements
push operation
push till the stack is not - empty
push the i - th character
push the tempstack back to stack
print the stack in reverse order
Driver Code
Returns true if the array A can be fit into array B , otherwise false
Sort both the arrays
Iterate over the loop and check whether every array element of A is less than or equal to its corresponding array element of B
Driver Code
This functions returns the required number of toys
sort the cost array
Check if we can buy ith toy or not
Increment the count variable
Driver Code
Python Code Implementation of the above approach
Driver Code
Recursive python program to sort an array by swapping elements
Utility function to print a Vector
Function to perform Insertion Sort recursively
General Case Sort V till second last element and then insert last element into V
Insertion step
Insert V [ i ] into list 0. . i - 1
Swap V [ j ] and V [ j - 1 ]
Decrement j
Driver method
Function for checking almost sort
One by one compare adjacents .
check whether resultant is sorted or not
Is resultant is sorted return true
Driver Code
Function to find next gap .
comparing elements in the first array .
comparing elements in both arrays .
comparing elements in the second array .
Driver code
Function Call
Merge arr1 [ 0. . n1 - 1 ] and arr2 [ 0. . n2 - 1 ] into arr3 [ 0. . n1 + n2 - 1 ]
Traverse both array
Check if current element of first array is smaller than current element of second array . If yes , store first array element and increment first array index . Otherwise do same with second array
Store remaining elements of first array
Store remaining elements of second array
Driver code
Function to sort an square array
First convert each array elements into its square
Sort an array using " inbuild ▁ sort ▁ function " in Arrays class
Driver code
Merge two sorted halves of Array into single sorted array
Starting index of second half
Temp Array store sorted resultant array
First Find the point where array is divide into two half
If Given array is all - ready sorted
Merge two sorted arrays in single sorted array
Copy the remaining elements of A [ i to half_ ! ]
Copy the remaining elements of A [ half_ ! to n ]
Driver code
Print sorted Array
arr [ 0. . n - 1 ] represents sizes of packets m is number of students . Returns minimum difference between maximum and minimum values of distribution .
if there are no chocolates or number of students is 0
Sort the given packets
Number of students cannot be more than number of packets
Largest number of chocolates
Find the subarray of size m such that difference between last ( maximum in case of sorted ) and first ( minimum in case of sorted ) elements of subarray is minimum .
Driver Code
m = 7 Number of students
This function returns number of distinct absolute values among the elements of the array
set keeps all unique elements
Driver Code
The function returns return number of distinct absolute values among the elements of the array
initialize count as number of elements
Remove duplicate elements from the left of the current window ( i , j ) and also decrease the count
Remove duplicate elements from the right of the current window ( i , j ) and also decrease the count
break if only one element is left
Now look for the zero sum pair in current window ( i , j )
decrease the count if ( positive , negative ) pair is encountered
Driver code
Reverses arr [ 0. . i ]
Returns index of the maximum element in arr [ 0. . n - 1 ]
The main function that sorts given array using flip operations
Start from the complete array and one by one reduce current size by one
Find index of the maximum element in arr [ 0. . curr_size - 1 ]
Move the maximum element to end of current array if it 's not already at  the end
To move at the end , first move maximum number to beginning
Now move the maximum number to end by reversing current array
A utility function to print an array of size n
Driver program
Function to construct lexicographically smallest numeric string having an odd count of each characters
Stores the resultant string
If N is even
Otherwise
Driver code
Function to modify the given string satisfying the given criteria
Traverse the string S we cannot directly change string because it is immutable so change of list of char
If i is even
If the S [ i ] is ' a ' , then change S [ i ] to 'b
If S [ i ] is ' z ' , then change S [ i ] to 'y
Otherwise , change S [ i ] to 'z
Return the result join the list of char
Driver Code
Function to check if the value of X reduces N to 0 or not
Update the value of N as N - x
Check if x is a single digit integer
Function to find the number of values X such that N can be reduced to 0 after performing the given operations
Number of digits in N
Stores the count of value of X
Iterate over all possible value of X
Check if x follow the conditions
Return the total count
Driver Code
Returns the count of subarrays which contains both the maximum and minimum elements in the given vector
Initialize the low and high of array
If current element is less than least element
If current element is more than highest element
If current element is equal to low or high then update the pointers
Update number of subarrays
Return the result
Function to find the maximum count of subarrays
Iterate the array to find the maximum and minimum element
Vector after removing the minimum element
Using assignment operator to copy one vector to other
Vector after removing the maximum element
Given array
Function Call
Function to find the minimum number of increment and decrement of pairs required to make all array elements equal
Stores the sum of the array
If sum is not divisible by N
Update sum
Store the minimum number of operations
Iterate while i is less than N
Add absolute difference of current element with k to ans
Increase i bye 1
Return the value in ans2
Driver Code
Given Input
Function Call
Function to find minimum number of moves required to convert A into B
Stores the minimum number of moves required
Stores the absolute difference
FInd the number of moves
Return cnt
Input
Function call
Function to find lexicographically smallest string that is not a subsequence of S
Variable to store frequency of a
Calculate frequency of a
Initialize string consisting of freq number of a
Change the last digit to b
Add another ' a ' to the string
Return tha answer string
Driver code
Input
Function call
Function to find all possible numbers that can be obtained by adding A or B to N exactly M times
For maintaining increasing order
Smallest number that can be obtained
If A and B are equal , then only one number can be obtained , i . e . N + M * A
For finding others numbers , subtract A from number once and add B to number once
Driver Code
Given Input
Function Call
Python3 program for the above approach
Function to find the maximum number of buildings covered
Store the current sum
Traverse the array
Add the length of wire required for current building to cur_sum
Add extra unit distance 1
If curr_sum <= length of wire increment count by 1
If curr_sum > length of wire increment start by 1 and decrement count by 1 and update the new curr_sum
Update the max_count
Return the max_count
Driver Code
Given Input
Size of the array
Function Call
Function to count number of unset bits in the integer N
Stores the number of unset bits in N
Check if N is even
Increment the value of c
Right shift N by 1
Return the value of count of unset bits
Function to count numbers whose Bitwise AND with N equal to 0
Stores the number of unset bits in N
Prthe value of 2 to the power of unsetBits
Driver Code
Function to check if the given string can be partitioned into a number of subsequences all of which are equal to "010"
Store the size of the string
Store the count of 0 s and 1 s
Traverse the given string in the forward direction
If the character is '0' , increment count_0 by 1
If the character is '1' increment count_1 by 1
If at any point , count_1 > count_0 , return false
If count_0 is not equal to twice count_1 , return false
Reset the value of count_0 and count_1
Traverse the string in the reverse direction
If the character is '0' increment count_0
If the character is '1' increment count_1
If count_1 > count_0 , return false
Driver Code
Given string
Function Call
Python 3 program for the above approach
Function to find a line across a wall such that it intersects minimum number of bricks
Declare a hashmap
Store the maximum number of brick ending a point on x - axis
Iterate over all the rows
Initialize width as 0
Iterate over individual bricks
Add the width of the current brick to the total width
Increment number of bricks ending at this width position
Update the variable , res
Print the answer
Driver Code
Given Input
Function Call
Function to print the required permutation
Driver code
Function to count distinct profits possible
Stores the minimum total profit
Stores the maximum total profit
Return count of distinct profits
Driver code
Input
Function call
Function to find the minimum number of operations required to make all array elements equal
Store the count of operations required
Increment by K - 1 , as the last element will be used again for the next K consecutive elements
Increment count by 1
Return the result
Driver Code
Given Input
python 3 program for the above approach Function to check prime .
Function to check prime .
It means it is not a prime
No factor other than 1 therefore prime number
Function to find out the required consecutive primes .
Finding first prime just less than sqrt ( n ) .
Finding prime just greater than sqrt ( n ) .
Product of both prime is greater than n then print it
Finding prime greater than second
Driver Program
Python program to implement the above approach
Function to construct the original set of digits from the string in ascending order
Store the unique characters corresponding to word and number
Store the required result
Store the frequency of each character of S
Traverse the unique characters
Store the count of k [ i ] in S
Traverse the corresponding word
Decrement the frequency of characters by x
Append the digit x times to ans
Sort the digits in ascending order
Given string , s
Function Call
Function to count minimum number of operations required
Case 1 :
Case 2 :
Print the minimum number of operations required
The given matrix
Function Call to count the minimum number of decrements required
Function to check if X can be made equal to Y by converting X to ( 3 * X / 2 ) or ( X - 1 )
Conditions for possible conversion
Otherwise , conversion is not possible
Driver Code
Function to count distinct sum of pairs possible from the range [ L , R ]
Return the count of distinct sum of pairs
Driver Code
Function to count subarrays having even Bitwise XOR
Store the required result
Stores count of subarrays with even and odd XOR values
Stores Bitwise XOR of current subarray
Traverse the array
Update current Xor
If XOR is even
Update ans
Increment count of subarrays with even XOR
Otherwise , increment count of subarrays with odd XOR
Print the result
Given array
Stores the size of the array
Python3 program for the above approach
Function to count the occurrences of X in the generated square matrix
Stores the required result
Iterate upto square root of X
Check if i divides X
Store the quotient obtained on dividing X by i
If both the numbers fall in the range , update count
Return the result
Driver Code
Given N and X
Function Call
Function to find array with maximum product by changing array elements to ( - 1 ) arr [ i ] - 1
Traverse the array
Applying the operation on all the positive elements
Stores maximum element in array
Stores index of maximum element
Check if current element is greater than the maximum element
Find index of the maximum element
Perform the operation on the maximum element
Prthe elements of the array
Driver Code
Function Call
Function to print the lexicographically smallest permutation with K perfect indices
Iterator to traverse the array
Traverse first K array indices
Traverse remaining indices
Driver Code
Function to count pairs made up of elements from the range [ L , R ] having distinct sum
Stores the least sum which can be formed by the pairs
Stores the highest sum which can be formed by the pairs
Stores the count of pairs having distinct sum
Print the count of pairs
Driver Code
Function call to count the number of pairs having distinct sum in the range [ L , R ]
Python 3 program for the above approach
Function to count the number of pairs ( i , j ) their Bitwise OR is greater than Bitwise AND
Total number of pairs possible from the array
Stores frequency of each array element
Traverse the array A [ ]
Increment ump [ A [ i ] ] by 1
Traverse the Hashmap ump
Subtract those pairs ( i , j ) from count which has the same element on index i and j ( i < j )
Print the result
Driver Code
Function Call
Function to construct binary string according to the given conditions
Initialize with 1
Traverse the array
To check if the i - th eger needs to be considered or not
Print the binary string for i in range ( 1 , K ) : print ( bit [ i ] )
Given array
Size of the array
Given K
Function to check if it is possible to reach destination in a single move by a rook
Given arrays
Base case
If N is divisible by M
global variable to store result
Iterate over the range [ 0 , 9 ]
if N is Divisible by M upon appending X digits
Driver Code
Stores the number by appending X digits on the right side of N
Function to count minimum moves
Stores sum of given array
Stores maximum array element
Base Case
If N is 2 , the answer will always be 0
Traverse the array
Calculate sum of the array
Finding maximum element
Calculate ceil ( sum / N - 1 )
If k is smaller than maxelement
Final sum - original sum
Print the minimum number of increments required
Driver Code
Given array
Size of given array
Function Call
Driver Code
Function to check if the required array can be generated or not
To check if divisor exists
To store divisiors of K
Check if K is prime or not
If array can be generated
Print d1 and d2 alternatively
No such array can be generated
Driver Code
Given N and K
Function Call
Python3 program for the above approach
Function to add an edge to graph
Function to perform DFS traversal on the graph recursively from a given vertex u
Visit the current vertex
Total number of nodes in this component
Increment the frequency of u
Function for finding the minimum number changes required in given string
Form the edges according to the given conditions
Find minimum number of operations
Frequency array for finding the most frequent character
Frequency array for finding the most frequent character
Finding most frequent character
Change rest of the characters to most frequent one
Print total number of changes
Driver Code
Function Call
Function to display the valid matrix
Traverse the matrix
If the current cell is a free space and is even - indexed
If the current cell is a free space and is odd - indexed
Print the matrix
Given N and M
Given matrix
Function call
Function that finds lexicographically smallest after removing the duplicates from the given string
Stores the frequency of characters
Mark visited characters
Stores count of each character
Stores the resultant string
Decrease the count of current character
If character is not already in answer
Last character > S [ i ] and its count > 0
Mark letter unvisited
Add s [ i ] in res and mark it visited
Return the resultant string
Driver Code
Given S
Function Call
Function to count pairs having product equal to a power of 2
Stores count of array elements which are power of 2
If array element contains only one set bit
Increase count of powers of 2
Count required number of pairs
Print the required number of pairs
Driver Code
Given array
Size of the array
Function call
Python3 program for the above approach
Maximum value of N
Stores at each indices if given number is prime or not
Stores count_of_primes
Function to generate primes using Sieve of Eratsothenes
Assume all odds are primes
If a prime is encountered
Mark all its multiples as non - prime
Count primes <= MAXN
Function to calculate ( x ^ y ) % p in O ( log y )
Utility function to count the number of ways N ! can be split into co - prime factors
Driver Code
Calling sieve function
Given N
Function call
Function to find the maximum sum of squares of stack elements
Stores the sum ofsquares of stack elements
Check if sum is valid
Initialize all stack elements with 1
Stores the count the number of stack elements not equal to 1
Add the sum of squares of stack elements not equal to 1
Add 1 * 1 to res as the remaining stack elements are 1
Print the result
Driver Code
Function call
Function to return the value after unsetting K LSBs
Create a mask
Bitwise AND operation with the number and the mask
Given N and K
Function call
Function to check whether it is possible to do the operation or not
Calculate modulo 3 of all the colors
Check for any equal pair
Otherwise
Given colors
Function call
Function to calculate the minimum number of steps
count stores number of operations required to make all elements equal to minimum value
Remark , the array should remain unchanged for further calculations with different minimum
Storing the current value of arr [ i ] in val
Finds how much extra amount is to be removed
Subtract the maximum number of 5 and stores remaining
Subtract the maximum number of 2 and stores remaining
Restores the actual value of arr [ i ]
Return the count
Function to find the minimum number of steps to make array elements same
Sort the array in descending order
Stores the minimum array element
Stores the operations required to make array elements equal to minimum
Stores the operations required to make array elements equal to minimum - 1
Stores the operations required to make array elements equal to minimum - 2
Return minimum of the three counts
Driver Code
Python3 program for the above approach
Function to find largest palindrome possible from S and P after rearranging characters to make palindromic string T
Using unordered_map to store frequency of elements mapT will have freq of elements of T
Size of both the strings
Take all character in mapT which occur even number of times in respective strings & simultaneously update number of characters left in map
Check if a unique character is present in both string S and P
Making string T in two halves half1 - first half half2 - second half
Reverse the half2 to attach with half1 to make palindrome
If same unique element is present in both S and P , then taking that only which is already taken through mapT
If same unique element is not present in S and P , then take characters that make string T lexicographically smallest
If no unique element is present in both string S and P
Given string S and P
Function call
Python3 program for the above approach
Function that counts the subarrays with sum of its elements as its length
Decrementing all the elements of the array by 1
Making prefix sum array
Declare map to store count of elements upto current element
To count all the subarrays whose prefix sum is 0
Iterate the array
Increment answer by count of current element of prefix array
Return the answer
Given array arr [ ]
Function call
Python3 program to print subset at the nth position ordered by the sum of the elements
Function to print the elements of the subset at pos n
Initialize count = 0 and x = 0
Create a vector for storing the elements of subsets
Doing until all the set bits of n are used
This part is executed only when the last bit is set
Right shift the bit by one position
Increasing the count each time by one
Printing the values os elements
Driver Code
Function to find longest possible subsequence of s beginning with x and y
Iterate over the string
Increment count
Swap the positions
Return the result
Function that finds all the possible pairs
Update count
Return the answer
Given string s
Find the size of the string
Function call
This value is the count of minimum element to be removed
Function to count set bits in x
Base Case
Recursive Call
Function that returns count of set bits present in all numbers from 1 to N
Initialize the result
Return the setbit count
Driver Code
Given L and R
Function Call
Function to find all possible values of Q
Vector initialization to store all numbers satisfying the given condition
Iterate for all the values of X
Check if condition satisfied then push the number
Possible value of Q
Print all the numbers
Driver Code
Function that finds gcd of 2 strings
If str1 length is less than that of str2 then recur with gcd ( str2 , str1 )
If str1 is not the concatenation of str2
GCD string is found
Cut off the common prefix part of str1 & then recur
Function to find GCD of array of strings
Return the GCD of strings
Given array of strings
Function Call
Define the size of the matrix
Function to check given matrix balanced or unbalanced
Flag for check matrix is balanced or unbalanced
Iterate row until condition is true
Iterate cols until condition is true
Check for corner edge elements
Check for border elements
Check for the middle ones
Return balanced or not
Given matrix mat [ ] [ ]
Function call
Function to convert unix time to Human readable format
Save the time in Human readable format
Number of days in month in normal year
Calculate total days unix time T
Calculating current year
Updating extradays because it will give days till previous day and we have include current day
Calculating MONTH and DATE
Current Month
Calculating HH : MM : YYYY
Return the time
Driver code
Given unix time
Function call to convert unix time to human read able
Print time in format DD : MM : YYYY : HH : MM : SS
Function to find area of rectangle inscribed another rectangle of length L and width W
Area of rectangle
Return the area
Driver Code
Given Dimensions
Function Call
Python3 program to implement the above approach
Function to count the minimum steps required to reduce n
Base case
Allocate memory for storing intermediate results
Store base values
Stores square root of each number
Compute square root
Use rule 1 to find optimized answer
Check if it perfectly divides n
Use of rule 2 to find the optimized answer
Store computed value
Return answer
Driver Code
Function to find the minimum steps required to reduce n
Base case
Return answer based on parity of n
Driver Code
Function to find minimum number of elements required to form A [ ] by performing mirroring operation
Initialize K
Odd length array cannot be formed by mirror operation
Check if prefix of length K is palindrome
Check if not a palindrome
If found to be palindrome
Otherwise
Return the final answer
Driver code
Function to find the sum of the product of all the integers and their positive divisors up to N
Iterate for every number between 1 and N
Find the first multiple of i between 1 and N
Find the last multiple of i between 1 and N
Find the total count of multiple of in [ 1 , N ]
Compute the contribution of i using the formula
Add the contribution of i to the answer
Return the result
Given N
Function call
Function to return M < N such that N ^ M - N & M is maximum
Initialize variables
Iterate for all values < N
Find the difference between Bitwise XOR and AND
Check if new difference is greater than previous maximum
Update variables
Return the answer
Driver Code
Given number N
Function call
Python3 program for the above approach
Function to flip all bits of N
Finding most significant bit of N
Calculating required number
Return the answer
Driver Code
Given number
Function call
Matrix of containers
Function to find the number of containers that will be filled in X seconds
Container on top level
If container gets filled
Dividing the liquid equally in two halves
Driver code
Python3 program for the above approach
Function to check if there exist triplet in the array such that i < j < k and arr [ i ] < arr [ k ] < arr [ j ]
Initialize the heights of h1 and h3 to INT_MAX and INT_MIN respectively
Store the current element as h1
If the element at top of stack is less than the current element then pop the stack top and keep updating the value of h3
Push the current element on the stack
If current element is less than h3 , then we found such triplet and return true
No triplet found , hence return false
Driver Code
Given array
Function Call
Function to return minimum distinct character after M removals
Count the occurences of number and store in count
Count the occurences of the frequencies
Take answer as total unique numbers and remove the frequency and subtract the answer
Remove the minimum number of times
Return the answer
Driver Code
Initialize array
Size of array
Function call
Python3 implementation to find the minimum number of moves to bring all non - zero element in one cell of the matrix
Function to find the minimum number of moves to bring all elements in one cell of matrix
Moves variable to store the sum of number of moves
Loop to count the number of the moves
Condition to check that the current cell is a non - zero element
Driver Code
Coordinates of given cell
Given Matrix
Element to be moved
Function call
Function to check if it is possible to remove all array elements
Condition if we can remove all elements from the array
Driver code
Python3 program for the above approach
Function to find subarray
If the array has only one element , then there is no answer .
Array to store the last occurrences of the elements of the array .
To maintain the length
Variables to store start and end indices
Check if element is occurring for the second time in the array
Find distance between last and current index of the element .
If the current distance is less then len update len and set ' start ' and 'end
Set the last occurrence of current element to be ' i ' .
If flag is equal to 0 , it means there is no answer .
Driver Code
Function to find the substrings in binary string such that every character belongs to a palindrome
Total substrings
Loop to store the count of continuous characters in the given string
Subtract non special strings from answer
Driver Code
Given string
Function call
Function to get the required minutes
Storing hour and minute value in integral form
Keep iterating till first digit hour becomes equal to second digit of minute and second digit of hour becomes equal to first digit of minute
If mins is 60 , increase hour , and reinitilialized to 0
If hours is 60 , reinitialized to 0
Return the required time
Given Time as a string
Function call
Function to find the maximum sum of all subarrays
Initialize maxsum and prefixArray
Find the frequency using prefix Array
Perform prefix sum
Sort both arrays to get a greedy result
Finally multiply largest frequency with largest array element .
Return the answer
Driver Code
Initial Array
Subarrays
Function Call
Function to find the maximum profit from the given values
Iterating over every possible permutation
Driver Code
Function Call
Python3 program for the above approach
Function to reduce N to its minimum possible value by the given operations
Keep replacing n until is an integer
Keep replacing n until n is divisible by i * i
Print the answer
Given N
Function call
Function to check whether the substring from l to r is palindrome or not
If characters at l and r differ
Not a palindrome
If the string is a palindrome
Function to count and return the number of possible splits
Stores the count of splits
Check if the two substrings after the split are palindromic or not
If both are palindromes
Print the final count
Driver Code
Function to find the direction when stopped moving
Given size of NxM grid
Function Call
Function to return the maximum sum of modulus with every array element
Sum of array elements
Return the answer
Driver Code
Function to get the minimum jump value
Store all indices of ones
Populating one 's indices
Calculate median
Jumps required for 1 's  to the left of median
Jumps required for 1 's  to the right of median
Return the final answer
Driver Code
Maximum number of nodes
Tree represented as adjacency list
For storing value associates with node
For storing GCD of every subarray
Number of nodes
Function to find GCD of two numbers . Using Euclidean algo
If b == 0 then simply return a
DFS function to traverse the tree
Initializing answer with GCD of this node .
Iterate over each child of current node
Skipping the parent
Call DFS for each child
Taking GCD of the answer of the child to find node 's GCD
Calling DFS from the root ( 1 ) for precomputing answers
Function to find and prGCD for Q queries
Doing preprocessing
Iterate over each given query
Driver code
Tree : 1 ( 2 ) / \ 2 ( 3 ) 3 ( 4 ) / \ 4 ( 8 ) 5 ( 16 )
Making a undirected tree
Values associated with nodes
Function call
Function to find out the minimum cost to make two number X and Y equal to zero
If x is greater than y then swap
Cost of making y equal to x
Cost if we choose 1 st operation
Cost if we choose 2 nd operation
Total cost
Function to split the fraction into the N parts
Loop to find the N - 1 fraction
Loop to print the Fractions
Driver Code
Function Call
Function to return the count of Pairs
Driver code
Function to check that array can be converted into a strictly decreasing sequence
Loop to check that each element is greater than the ( N - index )
If element is less than ( N - index )
If array can be converted
Driver Code
Function calling
Function to find a maximum number X , such that a given string can be partitioned into X substrings that are each balanced
If the size of the string is 0 , then answer is zero
Variable that represents the number of ' R ' s and ' L ' s
To store maximum number of possible partitions
Increment the variable r if the character in the string is 'R
Increment the variable l if the character in the string is 'L
If r and l are equal , then increment ans
Return the required answer
Driver code
Function call
Function to minimize the non - zero elements in the given array
To store the min pos needed
Loop to iterate over the elements of the given array
If current position A [ i ] is occupied the we can place A [ i ] , A [ i + 1 ] and A [ i + 2 ] elements together at A [ i + 1 ] if exists .
Driver Code
Function Call
Python3 implementation of the approach
Function to return the minimum value of k that satisfies the given condition
store sum of array elements
Calculate the sum after
return minimum possible K
Driver code
Function to return the largest number less than N
Iterate through all possible values
Multiply the number by 2 i times
Return the final result
Driver code
Function to find the required output string
Each element at index i is modulus of K
Driver code
initialise integers N and K
Function to count no of collision
Length of the string
Driver code
Function to find the maximum number that can be displayed using the N segments
Condition to check base case
Condition to check if the number is even
Condition to check if the number is odd
Driver Code
Function to find the minimum number of subsequences required to convert one to another S2 == A and S1 == B
At least 1 subsequence is required Even in best case , when A is same as B
size of B
size of A
Create an 2D array next [ ] [ ] of size 26 * sizeOfB to store the next occurrence of a character ( ' a ' to ' z ' ) as an index [ 0 , sizeOfA - 1 ]
Loop to Store the values of index
If the value of next [ i ] [ j ] is infinite then update it with next [ i ] [ j + 1 ]
Greedy algorithm to obtain the maximum possible subsequence of B to cover the remaining of A using next subsequence
Loop to iterate over the A
Condition to check if the character is not present in the B
Condition to check if there is an element in B matching with character A [ i ] on or next to B [ pos ] given by next [ A [ i ] - ' a ' ] [ pos ]
Condition to check if reached at the end of B or no such element exists on or next to A [ pos ] , thus increment number by one and reinitialise pos to zero
Driver Code
Python3 program to print Horizontal filling
It is used for checking whether tape is full or not
It is used for calculating total retrieval time
It is used for calculating mean retrieval time
vector is used because n number of records can insert in one tape with size constraint
Null vector obtained to use fresh vector 'v
initialize variables to 0 for each iteration
sum is used for checking whether i 'th tape is full or not
check sum less than size of tape
increment in j for next record
calculating total retrieval time
MRT formula
calculating mean retrieval time using formula
v . size ( ) is function of vector is used to get size of vector
Driver Code
store the size of records [ ]
store the size of tapes [ ]
sorting of an array is required to attain greedy approach of algorithm
Python program to compute circular convolution of two arrays
Function to find circular convolution
Finding the maximum size between the two input sequence sizes
Copying elements of x to row_vec and padding zeros if size of x < maxSize
Copying elements of h to col_vec and padding zeros if size of h is less than maxSize
Generating 2D matrix of circularly shifted elements
Computing result by matrix multiplication and printing results
Driver program
Python3 program for the above approach
To check if there is any string of odd length
If there is at least 1 string of odd length .
If all the strings are of even length .
Count of 0 's in all  the strings
Count of 1 's in  all the strings
If z is even and o is even then ans will be N .
Otherwise ans will be N - 1.
Driver code
Function to return the minimum cost to travel from the first city to the last
To store the total cost
Start from the first city
If found any city with cost less than that of the previous boarded bus then change the bus
Calculate the cost to travel from the currently boarded bus till the current city
Update the currently boarded bus
Finally calculate the cost for the last boarding bus till the ( N + 1 ) th city
Driver code
Python 3 implementation of the approach
Function to return the minimum flips required such that the submatrix from mat [ i ] [ j ] to mat [ i + 1 ] [ j + 1 ] contains all equal elements
Function to return the minimum number of slips required such that the matrix contains at least a single submatrix of size 2 * 2 with all equal elements
To store the result
For every submatrix of size 2 * 2
Update the count of flips required for the current submatrix
Driver code
Function to return the kth element of the Odd - Even sequence of length n
Finding the index from where the even numbers will be stored
Return the kth element
Function to return the count of set bits in the kth number of the odd even sequence of length n
Required kth number
Return the count of set bits
Driver code
Function to return the minimum cost to convert str1 to sr2
For every character of str1
If current character is not equal in both the strings
If the next character is also different in both the strings then these characters can be swapped
Change the current character
Driver code
Function to find the required sets
Impossible case
Sum of first n - 1 natural numbers
Driver code
Recursive function to find gcd using euclidean algorithm
Function to find lcm of two numbers using gcd
Driver code
Function to check whether sum of any set of the array element is equal to k or not
Traverse the array from end to start
if k is greater than arr [ i ] then subtract it from k
If there is any subsequence whose sum is equal to k
Driver code
Function to return the maximum sub - array sum after at most x swaps
To store the required answer
For all possible intervals
Keep current ans as zero
To store the integers which are not part of the sub - array currently under consideration
To store elements which are part of the sub - array currently under consideration
Create two sets
Swap at most X elements
Remove the minimum of the taken elements
Add maximum of the discarded elements
Update the answer
Return the maximized sub - array sum
Driver code
Python3 implementation of the approach
Function to generate and print the required array
Initializing the array
Finding r ( from above approach )
If r < 0
Finding ceiling and floor values
Fill the array with ceiling values
Fill the array with floor values
Add 1 , 2 , 3 , ... with corresponding values
There is no solution for below cases
Modify A [ 1 ] and A [ k - 1 ] to get the required array
Driver Code
Function to return the maximized number
Iterate till the end of the string
Check if it is greater or not
Replace with the alternate till smaller
Return original s in case no change took place
Driver Code
Python3 implementation of the approach
Function to return the count of steps
Variable to store the count of steps
Iterate while N > 0
Get the largest perfect square and subtract it from N
Increment steps
Return the required count
Driver code
Utility function to return the sum of the array elements
Function to return the maximized sum of the array after performing the given operation exactly k times
Sort the array elements
Change signs of the negative elements starting from the smallest
If a single operation has to be performed then it must be performed on the smallest positive element
To store the index of the minimum element
Update the minimum index
Perform remaining operation on the smallest element
Return the sum of the updated array
Driver code
Python3 implementation of the approach
par and rank will store the parent and rank of particular node in the Union Find Algorithm
Find function of Union Find Algorithm
Union function of Union Find Algorithm
Function to find the required spanning tree
Initialising parent of a node by itself
Variable to store the node with maximum degree
Finding the node with maximum degree
Union of all edges incident on vertex with maximum degree
Carrying out normal Kruskal Algorithm
Driver code
Number of nodes
Number of edges
ArrayList to store the graph
Array to store the degree of each node in the graph
Add edges and update degrees
Function to find the maximum possible sum
To store required sum
Number of 234 's can be formed
Sum obtained with 234 s
Remaining 2 's
Sum obtained with 12 s
Return the required sum
Driver Code
Function to print the array elements
Function to replace all elements with absolute difference of absolute sums of positive and negative elements
calculate difference of both sums
if i - th element is positive , add it to positive sum
if i - th element is negative , add it to negative sum
replace i - th elements with absolute difference
Driver Code
Function to find the distinct pairs from 1 - a & 1 - b such that their sum is divisible by n .
pairs from 1 to n * ( a / n ) and 1 to n * ( b / n )
pairs from 1 to n * ( a / n ) and n * ( b / n ) to b
pairs from n * ( a / n ) to a and 1 to n * ( b / n )
pairs from n * ( a / n ) to a and n * ( b / n ) to b
Return answer
Driver code
Function to find the required array
calculating minimum possible sum
Array
place first P natural elements
Fill rest of the elements with 1
Driver Code
Function to print the intersection
First interval
Check rest of the intervals and find the intersection
If no intersection exists
Else update the intersection
Driver code
Function that compares a and b
Function to return length of longest subarray that satisfies one of the given conditions
Driver program
Print the required answer
Function to return the count of the required sub - strings
Iterate over all characters
Count with current character
If the substring has a length k then increment count with current character
Update max count
Driver Code
Function to return total valid pairs
Initialize count of all the elements
frequency count of all the elements
Add total valid pairs
Exclude pairs made with a single element i . e . ( x , x )
Driver Code
Function call to print required answer
Function to check The validity of distribution
Stroring the max age of all students + 1
Stroring the max candy + 1
creating the frequency array of the age of students
Creating the frequency array of the packets of candies
pointer to tell whether we have reached the end of candy frequency array
Flag to tell if distribution is possible or not
Flag to tell if we can choose some candy packets for the students with age j
If the quantity of packets is greater than or equal to the number of students of age j , then we can choose these packets for the students
Start searching from k + 1 in next operation
If we cannot choose any packets then the answer is NO
Driver code
Function to find minimum number of 1 ' s ▁ to ▁ be ▁ replaced ▁ to ▁ 0' s
return final answer
Driver Code
Function to find number of closing brackets and complete a regular bracket sequence
Finding the length of sequence
Counting opening brackets
Counting closing brackets
Checking if at any position the number of closing bracket is more then answer is impossible
If possible , print ' s ' and required closing brackets .
Driver code
Function to print the smallest permutation
when n is even
when n is odd
handling last 3 digit
add EOL and print result
Driver Code
Python3 implementation of above approach
Function to return minimum number of insertions required
Initialize insertions to 0
return total insertions
Driver Code
Function that returns the minimum number of operations to be performed to reduce the number to 1
To stores the total number of operations to be performed
if n is divisible by 3 then reduce it to n / 3
if n modulo 3 is 1 decrement it by 1
if n modulo 3 is 2 then increment it by 1
update the counter
Driver code
Function that returns the minimum number of operations to be performed to reduce the number to 1
Base cases
Driver Code
Python implementation of the approach
To store sum
To store ending indices of the chosen prefix arrays
Adding the absolute value of a [ i ]
If i == 0 then there is no index to be flipped in ( i - 1 ) position
print the maximised sum
print the ending indices of the chosen prefix arrays
Driver Code
Python program to find the longest common prefix between two strings after performing swaps on the second string
a = len ( x ) length of x b = len ( y ) length of y
creating frequency array of characters of y
storing the length of longest common prefix
checking if the frequency of the character at position i in x in b is greater than zero or not if zero we increase the prefix count by 1
Driver Code
Function to count possible pairs
total count of numbers in range
printing count of pairs
Driver code
Function to find problems not solved at the end of Nth day
Driver Code
Find set of vertex i
Does union of i and j . It returns false if i and j are already in same set .
Finds MST using Kruskal 's algorithm
Initialize sets of disjoint sets
Include minimum weight edges one by one
Let us create the following graph 2 3 ( 0 ) -- ( 1 ) -- ( 2 ) | / \ | 6 | 8 / \ 5 | 7 | / \ | ( 3 ) -- -- -- - ( 4 ) 9
Print the solution
Function to find the chocolates left
Driver code
Python Code to find sub - array whose sum shows the minimum deviation
starting index , ending index , Deviation
iterate i and j to get all subarrays
found sub - array with less sum
exactly same sum
Driver Code
Array to store return values
Python3 program to perform Q queries to find longest subsequence whose average is less than K
Function to print the length for evey query
sort array of N elements
Array to store average from left
Sort array of average
number of queries
print answer to every query using binary search
Driver Code
4 queries
Returns the minimum steps required to make an array of N elements equal , where the first array element equals M
Corner Case 1 : When N = 1
Corner Case 2 : When N = 2
Driver Code
Python3 code to count the change required to convert the array into non - increasing array
min heap
Here in the loop we will check that whether the upcoming element of array is less than top of priority queue . If yes then we calculate the difference . After that we will remove that element and push the current element in queue . And the sum is incremented by the value of difference
Driver code
Function to find new array a
find sum S of both arrays a and b .
Single element case .
This checks whether sum s can be divided equally between all array elements . i . e . whether all elements can take equal value or not .
Compute possible value of new array elements .
Possibility 1
ensuring that all elements of array b are used .
If a ( i ) already updated to x move to next element in array a .
Possibility 2
Possibility 3
Possibility 4
If a ( i ) can not be made equal to x even after adding all possible elements from b ( i ) then print - 1.
check whether all elements of b are used .
Return the new array element value .
Driver Code
function to find the minimum days
If we can not buy at least a week supply of food during the first week OR We can not buy a day supply of food on the first day then we can 't survive.
If we can survive then we can buy ceil ( A / N ) times where A is total units of food required .
Driver code
Find lexicographically largest subsequence of s [ 0. . n - 1 ] such that every character appears at least k times . The result is filled in t [ ]
Starting from largest charter ' z ' to 'a
Counting the frequency of the character
If frequency is greater than k
From the last point we leave
check if string contain ch
If yes , append to output string
Update the last point .
Driver Code
Function to find the largest permutation after k swaps
Storing the elements and their index in map
If number of swaps allowed are equal to number of elements then the resulting permutation will be descending order of given permutation .
If j is not at it 's best index
Change the index of the element which was at position 0. Swap the element basically .
Decrement number of swaps
Driver Code
K is the number of swaps
n is the size of the array
Function calling
Function to allocate memory to blocks as per Best fit algorithm
Stores block id of the block allocated to a process
pick each process and find suitable blocks according to its size ad assign to it
Find the best fit block for current process
If we could find a block for current process
allocate block j to p [ i ] process
Reduce available memory in this block .
Driver code
Returns number of bins required using first fit online algorithm
Initialize result ( Count of bins )
Create an array to store remaining space in bins there can be at most n bins
Place items one by one
Find the first bin that can accommodate weight [ i ]
Initialize minimum space left and index of best bin
If no bin could accommodate weight [ i ] , create a new bin
else : Assign the item to best bin
Driver code
Utility function to get maximum element in job [ 0. . n - 1 ]
Returns true if it is possible to finish jobs [ ] within given time 'time
cnt is count of current assignees required for jobs
time assigned to current assignee
If time assigned to current assignee exceeds max , increment count of assignees .
Else add time of job to current time and move to next job .
Returns true if count is smaller than k
Returns minimum time required to finish given array of jobs k -- > number of assignees T -- > Time required by every assignee to finish 1 unit m -- > Number of jobs
Set start and end for binary search end provides an upper limit on time
Find the job that takes maximum time
Do binary search for minimum feasible time
If it is possible to finish jobs in mid time
ans = min ( ans , mid ) Update answer
Driver program
Function to calculate longest substring with odd or even elements
Initializing dp [ ]
Initializing dp [ 0 ] with 1
ans will store the final answer
Traversing the array from index 1 to N - 1
Checking both current and previous element is even or odd
Updating dp [ i ] with dp [ i - 1 ] + 1
Storing max element to ans
Returning the final answer
Driver Code
Input
Function call
Function to count the subarrays with maximum not greater than K
If arr [ i ] > k then arr [ i ] cannot be a part of any subarray .
Count the number of elements where arr [ i ] is not greater than k .
Summation of all possible subarrays in the variable ans .
Function to count the subarrays with maximum value is equal to K
Stores count of subarrays with max <= k - 1.
Stores count of subarrays with max >= k + 1.
Stores count of subarrays with max = k .
Driver Code
Given Input
Function Call
Function to calculate the maximum subsequence sum such that no three elements are consecutive
when N is 1 , answer would be the only element present
when N is 2 , answer would be sum of elements
variable to store sum up to i - 3
variable to store sum up to i - 2
variable to store sum up to i - 1
variable to store the final sum of the subsequence
find the maximum subsequence sum up to index i
update first , second and third
return ans ;
Driver code
Input
Function call
Function to find the minimum number of operations required to reduce n to 2
Initialize a dp array
Handle the base case
Iterate in the range [ 2 , n ]
Check if i * 5 <= n
Check if i + 3 <= n
Return the result
Driver code
Given Input
Function Call
Print the result
Function to find maximum sum of difference between maximums and minimums in the splitted subarrays
Traverse the array
Stores the maximum and minimum elements upto the i - th index
Traverse the range [ 0 , i ]
Update the minimum
Update the maximum
Update dp [ i ]
Return the maximum sum of difference
Driver code
Function to count 0 's in a string
Stores count of 0 s
Iterate over characters of string
Recursive function to find the length of longest subset from an array of strings with at most A 0 ' s ▁ and ▁ B ▁ 1' s
If idx is equal to N or A + B is equal to 0
Stores the count of 0 's in arr[idx]
Stores the count of 1 's in arr[idx]
Stores the length of the subset if arr [ i ] is included
If zero is less than or equal to A and one is less than or equal to B
Stores the length of the subset if arr [ i ] is excluded
Returns max of inc and exc
Function to find the length of the longest subset from an array of strings with at most A 0 ' s ▁ and ▁ B ▁ 1' s
Return
Driver Code
Function to check if the string s consists of a single distinct character or not
Function to calculate the maximum score possible by removing substrings
If string is empty
If length of string is 1
Store the maximum result
Try to remove all substrings that satisfy the condition and check for resultant string after removal
Store the substring { s [ i ] , . . , s [ j ] }
Check if the substring contains only a single distinct character
Return the maximum score
Driver Code
Initialize a dictionary to store the precomputed results
Function to calculate the maximum score possible by removing substrings
If s is present in dp [ ] array
Base Cases :
If length of string is 0
If length of string is 1
Put head pointer at start
Initialize the max variable
Generate the substrings using two pointers
If s [ head ] and s [ tail ] are different
Move head to tail and break
Store the substring
Update the maximum
Move the tail
Store the score
Driver Code
Dimensions of the DP table
Stores the dp states
Function to recursively count the number of unique outcomes possible by performing S flips on N coins
Base Case
If the count for the current state is not calculated , then calculate it recursively
Otherwise return the already calculated value
Driver Code
Function to print the minimum number of character removals required to remove X as a subsequence from the string str
Length of the string str
Length of the string X
Stores the dp states
Fill first row of dp [ ] [ ]
If X [ j ] matches with str [ 0 ]
If s [ i ] is equal to X [ j ]
Update state after removing str [ i [
Update state after keeping str [ i ]
If str [ i ] is not equal to X [ j ]
Print the minimum number of characters removals
Driver Code
Input
Function call to get minimum number of character removals
Dp table for memoization
Function to count the number of ways to N - th station
Base Cases
If current state is already evaluated
Count ways in which train 1 can be chosen
Count ways in which train 2 can be chosen
Count ways in which train 3 can be chosen
Store the current state
Return the number of ways
Driver Code
Given Input
Function call to count the number of ways to reach the n - th station
Python3 program for the above approach
Function to find the maximum possible sum of arectangle which is less than K
Stores the values ( cum_sum - K )
Insert 0 into the set sumSet
Traverse over the rows
Get cumulative sum from [ 0 to i ]
Search for upperbound of ( cSum - K ) in the hashmap
If upper_bound of ( cSum - K ) exists , then update max sum
Insert cummulative value in the hashmap
Return the maximum sum which is less than K
Function to find the maximum sum of rectangle such that its sum is no larger than K
Stores the number of rows and columns
Store the required result
Set the left column
Set the right column for the left column set by outer loop
Calculate sum between the current left and right for every row
Stores the sum of rectangle
Update the overall maximum sum
Print the result
Driver Code
Function Call
Function to count binary strings of length N having substring "11"
Initialize dp [ ] of size N + 1
Base Cases
Stores the first N powers of 2
Generate
Iterate over the range [ 2 , N ]
Prtotal count of substrings
Driver Code
Python3 program for the above approach
Function to find maximum continuous maximum sum in the array
Stores current and maximum sum
Traverse the array v
Add the value of the current element
Update the maximum sum
Return the maximum sum
Function to find the maximum submatrix sum
Store the rows and columns of the matrix
Create an auxiliary matrix Traverse the matrix , prefix and initialize it will all 0 s
Calculate prefix sum of all rows of matrix A [ ] [ ] and store in matrix prefix [ ]
Update the prefix [ ] [ ]
Store the maximum submatrix sum
Iterate for starting column
Iterate for last column
To store current array elements
Traverse every row
Store the sum of the kth row
Update the prefix sum
Push it in a vector
Update the maximum overall sum
Print the answer
Driver Code
Function Call
Function to find the minimum cost of coloring the houses such that no two adjacent houses has the same color
Corner Case
Auxiliary 2D dp array
Base Case
If current house is colored with red the take min cost of previous houses colored with ( blue and green )
If current house is colored with blue the take min cost of previous houses colored with ( red and green )
If current house is colored with green the take min cost of previous houses colored with ( red and blue )
Print the min cost of the last painted house
Driver Code
Function Call
Initialize dp [ ] [ ]
Function to find the minimum number of operations to make sum of A [ ] 0
Initialize answer
Base case
Otherwise , return 0
Pre - computed subproblem
Recurrence relation for finding the minimum of the sum of subsets
Return the result
Function to find the minimum number of elements required to be flipped to amke sum the array equal to 0
Find the sum of array
Initialise dp [ ] [ ] with - 1
No solution exists
Otherwise
If sum is odd , no subset is possible
Driver Code
Function Call
Stores the dp states
Function to find the count of subsequences having average K
Base condition
Three loops for three states
Recurrence relation
Stores the sum of dp [ n ] [ j ] [ K * j ] all possible values of j with average K and sum K * j
Iterate over the range [ 1 , N ]
Return the final count
Driver Code
Function to count ways to remove pairs such that the remaining elements can be arranged in pairs vertically or horizontally
Store the size of matrix
If N is odd , then no such pair exists
Store the number of required pairs
Initialize an auxiliary matrix and fill it with 0 s
Traverse the matrix v [ ] [ ]
Check if i + j is odd or even
Increment the value dp [ v [ i ] [ j ] - 1 ] [ 0 ] by 1
Increment the value dp [ v [ i ] [ j ] - 1 ] [ 1 ] by 1
Iterate in range [ 0 , k - 1 ] using i
Iterate in range [ i + 1 , k - 1 ] using j
Update the ans
Print the answer
Driver code
Python3 program for the above approach
Store overlapping subproblems of the recurrence relation
Function to find maximum sum of at most N with different index array elements such that at most X are from A [ ] , Y are from B [ ] and Z are from C [ ]
Base Cases
If the subproblem already computed
Selecting i - th element from A [ ]
Selecting i - th element from B [ ]
Selecting i - th element from C [ ]
i - th elements not selected from any of the arrays
Select the maximum sum from all the possible calls
Driver Code
Given X , Y and Z
Given A [ ]
Given B [ ]
Given C [ ]
Given Size
Function Call
Python3 program for the above approach
Precalculate the values of power of 2
Function to calculate 2 ^ N % mod
Function to find sum of inversions
Initialise a list of 0 s and ? s
Traverse the string in the reversed manner
If the current character is 1
Effectively calculate a * b ^ ( b - 1 )
If the current character is 0
Increment count of zeroes
Double count the zeroes
Find b * 2 ^ ( b - 1 )
Increment count of questions
Return the final count
Driver Code
Given string S
Function Call
Utility function to count array elements required to be removed to make array a mountain array
Stores length of increasing subsequence from [ 0 , i - 1 ]
Stores length of increasing subsequence from [ i + 1 , n - 1 ]
Iterate for each position up to N - 1 to find the length of subsequence
If j is less than i , then i - th position has leftIncreasing [ j ] + 1 lesser elements including itself
Check if it is the maximum obtained so far
Search for increasing subsequence from right
Find the position following the peak condition and have maximum leftIncreasing [ i ] + rightIncreasing [ i ]
Function to count elements to be removed to make array a mountain array
Print the answer
Driver Code
Given array
Function Call
Bfs for odd numbers are source
Initialize queue
Stores for each node , the nodes visited and their distances
If parity is 0 -> odd Otherwise -> even
Perform multi - source bfs
Extract the front element of the queue
Traverse nodes connected to the current node
If u is not visited
If element with opposite parity is obtained
Store its distance from source in ans [ ]
Push the current neighbour to the queue
Function to find the minimum jumps required by each index to reach element of opposite parity
Initialise Inverse Graph
Stores the result for each index
For the jumped index
If the ind is valid then add reverse directed edge
Multi - source bfs with odd numbers as source by passing 0
Multi - source bfs with even numbers as source by passing 1
Print the answer
Driver Code
Python3 program for the above approach
Function to find GCD of pair with maximum GCD
Stores maximum element of arr [ ]
Find the maximum element
Maintain a count array
Store the frequency of arr [ ]
Stores the multiples of a number
Iterate over the range [ MAX , 1 ]
Iterate from current potential GCD till it is less than MAX
A multiple found
Increment potential GCD by itself io check i , 2 i , 3 i ...
If 2 multiples found max GCD found
Function to find longest subsequence such that GCD of any two distinct integers is maximum
Base Cases
Compare current GCD to the maximum GCD
If true increment and move the pointer
Return max of either subsequences
Drivers Code
Sorted array
Function call to calculate GCD of pair with maximum GCD
Print the result
Python3 program for the above approach
Stores the results
Count of unique product paths
Function to check whether number is perfect square or not
If square root is an integer
Function to calculate and store all the paths product in vector
Store the value a [ 0 ] [ 0 ]
Initialize first row of dp
Find prefix product
Initialize first column of dp
Find the prefix product
Iterate over range ( 1 , 1 ) to ( N , M )
Copy dp [ i - 1 ] [ j ] in top [ ]
Copy dp [ i ] [ j - 1 ] into left [ ]
Compute the values of current state and store it in curr [ ]
Find the product of a [ i ] [ j ] with elements at top [ ]
Find the product of a [ i ] [ j ] with elements at left [ ]
Update the current state
Traverse dp [ m - 1 ] [ n - 1 ]
Check if perfect square
Driver Code
Given matrix mat [ ] [ ]
Function Call
Print the final count
Python3 program for the above approach
dp array to memoize the results
List to store the result
Function to find the minimum number of coins to make the sum equals to X
Base case
If previously computed subproblem occurred
Initialize result
Try every coin that has smaller value than n
Check for INT_MAX to avoid overflow and see if result . an be minimized
Memoizing value of current state
Function to find the possible combination of coins to make the sum equal to X
Base Case
Print Solutions
Try every coin that has value smaller than n
Add current denominations
Backtrack
Function to find the minimum combinations of coins for value X
Min coins
If no solution exists
Backtrack to find the solution
Driver code
Set of possible denominations
Function call
Function to calculate Binomial Coefficient C ( n , r )
C ( n , r ) = C ( n , n - r )
[ n * ( n - 1 ) * -- - * ( n - r + 1 ) ] / [ r * ( r - 1 ) * -- -- * 1 ]
Function to calculate the total possible paths
Update n to n - 1
Stores 2 nCn
Stores Nth Catalan number
Stores the required answer
Driver Code
Python3 program for the above approach
Function that finds the minimum number of steps to find the minimum characters must be moved to convert string s to t
r = maximum value over all dp [ i ] [ j ] computed so far
dp [ i ] [ j ] stores the longest contiguous suffix of T [ 0. . j ] that is subsequence of S [ 0. . i ]
Update the maximum length
Return the resulting length
Given string s , t
Function call
Function to get the length of longest substring whose characters can be arranged to form a palindromic string
To keep track of the last index of each xor
Initialize answer with 0
Now iterate through each character of the string
Convert the character from [ a , z ] to [ 0 , 25 ]
Turn the temp - th bit on if character occurs odd number of times and turn off the temp - th bit off if the character occurs ever number of times
If a mask is present in the index Therefore a palindrome is found from index [ mask ] to i
If x is not found then add its position in the index dict .
Check for the palindrome of odd length
We cancel the occurrence of a character if it occurs odd number times
Given String
Length of given string
Function call
Function to find count of N - digit numbers with single digit XOR
dp [ i ] [ j ] stores the number of i - digit numbers with XOR equal to j
For 1 - 9 store the value
Iterate till N
Calculate XOR
Store in DP table
Initialize count
Print answer
Driver Code
Given number N
Function Call
Function to count the numbers that are divisible by the numbers in the array from range 1 to M
Initialize the count variable
Iterate over [ 1 , M ]
Iterate over array elements arr [ ]
Check if i is divisible by a [ j ]
Increment the count
Return the answer
Given list lst
Given number M
Function call
Python3 implementation to count the numbers upto N digits such that no two zeros are adjacent
Function to count the numbers upto N digits such that no two zeros are adjacent
Condition to check if only one element remains
If last element is non zero , return K - 1
If last element is 0
Condition to check if value calculated already
If last element is non zero , then two cases arise , current element can be either zero or non zero
Memoize this case
If last is 0 , then current can only be non zero
Memoize and return
Given N and K
Function call
Function to print the count of all prefix in the given string
Iterate over string s
Print the prefix and their frequency
Function to implement the LPS array to store the longest prefix which is also a suffix for every substring of the string S
Array to store LPS values Value of lps [ 0 ] is 0 by definition
Find the values of LPS [ i ] for the rest of the string using two pointers and DP
Initially set the value of j as the longest prefix that is also a suffix for i as LPS [ i - 1 ]
Check if the suffix of length j + 1 is also a prefix
If s [ i ] = s [ j ] then , assign LPS [ i ] as j + 1
If we reached j = 0 , assign LPS [ i ] as 0 as there was no prefix equal to suffix
Return the calculated LPS array
Function to count the occurrence of all the prefix in the string S
Call the prefix_function to get LPS
To store the occurrence of all the prefix
Count all the suffixes that are also prefix
Add the occurences of i to smaller prefixes
Adding 1 to all occ [ i ] for all the orignal prefix
Function Call to print the occurence of all the prefix
Given String
Function Call
Function to calculate maximum sum
Maximum elements that can be chosen from array A
Maximum elements that can be chosen from array B
Stores the maximum sum possible
Fill the dp [ ] for base case when all elements are selected from A [ ]
Fill the dp [ ] for base case when all elements are selected from B [ ]
Return the final answer
Driver Program
Function to reduce an integer N to Zero in minimum operations by removing digits from N
Initialise dp [ ] to steps
Iterate for all elements
For each digit in number i
Either select the number or do not select it
dp [ N ] will give minimum step for N
Given Number
Function Call
Function to print Nth Pentanacci number
Initialize first five numbers to base cases
declare a current variable
Loop to add previous five numbers for each number starting from 5 and then assign first , second , third , fourth to second , third , fourth and curr to fifth respectively
Driver code
Python3 program for the above approach
Table to store solution of each subproblem
Function to calculate the possible binary strings
If number of ones is equal to K
pos : current position Base Case : When n length is traversed
sum : count of 1 ' s ▁ ▁ Return ▁ the ▁ count ▁ ▁ of ▁ 1' s obtained
If the subproblem has already been solved
Return the answer
Store the solution to this subproblem
Driver Code
Initialising the table with - 1
Python3 program for the above approach
Since K can be 100 max
Initializing with - 1
Making vector A as 1 - Indexing
To Calculate the value nCk
Since nCj = ( n - 1 ) Cj + ( n - 1 ) C ( j - 1 ) ;
Function that summation of absolute differences of all pairs raised to the power k
Sort the given array
Precomputation part , O ( n * k )
Traverse the array arr [ ]
For each K
Return the final answer
Driver code
Given N and K
Given array
Creation of object of class
Function call
Python3 program to count total number of ways to return to origin after completing given number of steps .
Function Initialize dp [ ] [ ] [ ] array with - 1
Function returns the total count
Driver code
Python3 Program to find the count of distinct prime subsequences at most of of length K from a given array
Initialize all indices as true
A value in prime [ i ] will finally be false if i is not a prime , else true
If prime [ p ] is true , then it is a prime
Update all multiples of p as false , i . e . non - prime
Returns number of subsequences of maximum length k and contains distinct primes
Store the primes in the given array
Sort the primes
Store the frequencies of all the distinct primes
Store the frequency of primes
Store the sum of all frequencies
Store the length of subsequence at every instant
Store the frequency
Store the previous count of updated DP
Calculate total subsequences of current of_length
Add the number of subsequences to the answer
Update the value in dp [ i ]
Store the updated dp [ i ]
Driver Code
Function to find the minimum number of required such that adjacent smaller elements gets less number of prizes
Loop to iterate over every elements of the array
Loop to find the consecutive smaller elements at left
Loop to find the consecutive smaller elements at right
Driver code
Python3 implementation to count the number of ways to divide N in K groups such that each group has elements in range [ L , R ]
DP Table
Function to count the number of ways to divide the number N in K groups such that each group has number of elements in range [ L , R ]
Base Case
if N is divides completely into less than k groups
If the subproblem has been solved , use the value
put all possible values greater equal to prev
Function to count the number of ways to divide the number N
Initialize DP Table as - 1
Driver code
Function for finding minimum square numbers
arr [ i ] of array arr store minimum count of square number to get i
sqrNum [ i ] store last square number to get i
Find minimum count of square number for all value 1 to n
In worst case it will be arr [ i - 1 ] + 1 we use all combination of a [ i - 1 ] and add 1
Check for all square number less or equal to i
If it gives less count then update it
v stores optimum square number whose sum give N
Driver code
Calling function
Printing vector
