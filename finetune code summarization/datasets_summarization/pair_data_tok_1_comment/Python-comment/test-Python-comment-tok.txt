Function to find minimum sum after deletion
Stores frequency of array elements
Traverse the array
Calculate sum
Update frequency of the current element
Stores the minimum sum required
Traverse map
Find the minimum sum obtained
Return minimum sum
Input array
Size of array
Function to calculate maximum difference between adjacent elements excluding every array element once
Traverse the array
Stores the maximum diff
Check for maximum adjacent element
Exclude current element
pdate maximum difference
Update previous value
Append the result into a vector
Print the result
Driver Code
Function to find the size of the array if the array initially contains a single element
Base case
P / 2 -> findSize ( N 2 ) P % 2 -> 1 P / 2 -> findSize ( N / 2 )
Function to return the count of 1 s in the range [ L , R ]
Base Case
PART 1 -> N / 2 [ 1 , Siz_M ]
Update the right end point of the range to min ( Siz_M , R )
PART 2 -> N % 2 [ SizM + 1 , Siz_M + 1 ]
PART 3 -> N / 2 [ SizM + 2 , 2 * Siz_M - 1 ] Same as PART 1 Property of Symmetricity Shift the coordinates according to PART 1 Subtract ( Siz_M + 1 ) from both L , R
Driver Code
Input
Counts the number of 1 's in  the range [L, R]
Function to check if number is prime or not
As 1 is neither prime nor composite return false
Check if it is divided by any number then it is not prime , return false
Check if n is not divided by any number then it is prime and hence return true
Function to find the pair ( a , b ) such that sum is N & LCM is minimum
Check if the number is prime
Now , if it is not prime then find the least divisior
Check if divides n then it is a factor
Required output is a = n / i & b = n / i * ( n - 1 )
Driver Code
Function call
Python3 program for the above approach
To store Landau 's function of the number
Function to return gcd of 2 numbers
Function to return LCM of two numbers
Function to find max lcm value among all representations of n
Calculate Landau 's value
Recursive function to find different ways in which n can be written as sum of atleast one positive integers
Check if sum becomes n , consider this representation
Start from previous element in the representation till n
Include current element from representation
Call function again with reduced sum
Backtrack - remove current element from representation
Function to find the Landau 's function
Using recurrence find different ways in which n can be written as a sum of atleast one + ve integers
Print the result
Given N
Function call
Function to check if a number holds the condition ( N - 1 ) ! % N = N - 1
Corner cases
Number divisible by 2 or 3 are not prime
Iterate from 5 and keep checking for prime
Function to check the expression for the value N
Driver code
Function to check if array can be split in required K subsets
Store count of odd numbers
Check if element is odd
Check if split is possible
Driver Code
Python3 program to compute the sum of division of all the possible pairs for the given array
Function to compute the sum
Counting frequency of each term and finding maximum among it
Making cumulative frequency
Taking the ceil value
nos . in [ ( n - 0.5 ) X , ( n + 0.5 ) X ) range will add n to the ans
Return the final result
Driver code
Function to find the minimum number of elements that need to be inserted such that the sum of the elements of the array is twice the XOR of the array
Variable to store the Xor of all the elements
Variable to store the sum of all elements
Loop to find the Xor and the sum of the array
If sum = 2 * Xor
No need to insert more elements
We insert one more element which is Sum
We insert two more elements Sum + Xor and Xor .
Print the number of elements inserted in the array
Print the elements that are inserted in the array
Driver code
Function to check if the roots of a quadratic equation are reciprocal of each other or not
Driver code
Python3 program for the above approach
Function check whether x is a perfect square or not
Find floating point value of square root of x .
If square root is an integer
Function to check Sunny Number
Check if ( N + 1 ) is a perfect square or not
If ( N + 1 ) is not a perfect square
Driver Code
Given Number
Function call
Function to count the numbers which can convert N to 1 using the given operation
Iterate through all the integers
Check if N can be converted to 1
Incrementing the count if it can be converted
Driver code
Function that prints the required K numbers
Print 1 , K - 1 times
Print ( N - K + 1 )
Driver code
Function to find the Nth stepping natural number
Declare the queue
Enqueue 1 , 2 , ... , 9 in this order
Perform K operation on queue
Get the ith Stepping number
Perform Dequeue from the Queue
If x mod 10 is not equal to 0
then Enqueue 10 x + ( x mod 10 ) - 1
Enqueue 10 x + ( x mod 10 )
If x mod 10 is not equal to 9
then Enqueue 10 x + ( x mod 10 ) + 1
Return the dequeued number of the K - th operation as the Nth stepping number
Driver Code
initialise K
Python3 implementation of the approach
Function to return the Least number
Get the perfect square before and after N
Check which is nearest to N
return the result
Driver code
Python3 program to calculate the value of pi up to n decimal places
Function that prints the value of pi upto N decimal places
Find value of pi upto using acos ( ) function
Print value of pi upto N decimal places
Driver Code
Function that prints the value of pi
Python implementation of the approach
Function to convert decimal number n to its binary representation stored as an array arr [ ]
Function to convert the number represented as a binary array arr [ ] its decimal equivalent
Function to concatenate the binary numbers and return the decimal result
Number of bits in both the numbers
Convert the bits in both the gers to the arrays a [ ] and b [ ]
The number of bits in n are less than k
Flip the kth bit
Return the decimal equivalent of the number
Driver code
Python3 implementation of the approach
Declare result array globally
Function to precompute the product of factorials upto MAX
Initialize base condition if n = 0 then factorial of 0 is equal to 1 and answer for n = 0 is 1
Iterate loop from 1 to MAX
factorial ( i ) = factorial ( i - 1 ) * i
Result for current n is equal to result [ i - 1 ] multiplied by the factorial of i
Function to perform the queries
Precomputing the result tiMAX
Perform queries
Driver code
Python3 program to find nth term divisible by a , b or c
Function to return gcd of a and b
Function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c
Calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c
Function for binary search to find the nth term divisible by a , b or c
Set low to 1 and high to LONG_MAX
If the current term is less than n then we need to increase low to mid + 1
If current term is greater than equal to n then high = mid
Driver code
Function that checks whether given angle can be created using any 3 sides
Initialize x and y
Calculate the number of vertices between i and j , j and k
Calculate the angle subtended at the circumference
Angle subtended at j can be found using the fact that the sum of angles of a triangle is equal to 180 degrees
Driver code
Function that will find loss
Driver Code
Calling Function
Python3 implementation of the approach
Stores smallest prime factor for every number
Hash to store prime factors count
Function to calculate SPF ( SmallestPrime Factor ) for every number till MAXN
Separately marking spf for every even number as 2
Checking if i is prime
Marking SPF for all numbers divisible by i
Marking spf [ j ] if it is not previously marked
Function to store the prime factors after dividing by the smallest prime factor at every step
Storing the count of prime factors in hash
Function that returns true if there are no common prime factors between x and other numbers of the array
Checking whether it common prime factor with other numbers
Function that returns true if there is an element in the array which is coprime with all the other elements of the array
Using sieve for generating prime factors
Checking the common prime factors with other numbers
Driver code
Function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph
Total number of edges
Driver code
Initialize the matrix with 0
0 C0 = 1
Set every nCr = 1 where r = 0
Value for the current cell of Pascal 's triangle
Function to return the value of nCr
Return nCr
Build the Pascal 's triangle
Function to return the minimum required absolute difference
Driver code
Python implementation of the above approach
creating a frequency array
Finding the last digit of the number
Dividing the number by 10 to eliminate last digit
counting frequency of each digit
checking if the xor of all frequency is zero or not
Driver code
Function to print N lines
Iterate N times to print N lines
Driver code
Python program to find sum of n terms of the series
Sn = n * ( 4 * n * n + 6 * n - 1 ) / 3
number of terms for the sum
find the Sn
Python3 program to count the number of special strings of a given length N
Function to return count of special strings
Stores the answer for a particular value of n
For n = 0 we have empty string
For n = 1 we have 2 special strings
Calculate count of special string of length i
fib [ n ] stores the count of special strings of length n
Driver code
Initialise n
Python3 implementation of the above approach
Find the number of ways to reach the end
Base case
Recursive structure
Driver code
Python3 implementation of above approach
find the number of ways to reach the end
dp to store value
base case
Bottom up dp structure
F [ i ] is dependent of F [ i + 1 ] to F [ i + k ]
Return value of dp [ 0 ]
Driver code
Returns the count of odd and even subsequences
Initialising count_even and count_odd to 0 since as there is no subsequence before the iteration with even or odd count .
Find sum of all subsequences with even count and odd count and storing them as we iterate .
if the number is even
if the number is odd
Driver code
Calling the function
Python3 implementation of the approach
Function to convert a number into vector
Push all the digits of N from the end one by one to the vector
If the original number was 0
Reverse the vector elements
Return the required vector
Function to return the count of B length integers which are less than C and they contain digits from set A [ ] only
Convert number to digit array
Case 1 : No such number possible as the generated numbers will always be greater than C
Case 2 : All integers of length B are valid as they all are less than C
contain 0
Case 3
Update the lower [ ] array such that lower [ i ] stores the count of elements in A [ ] which are less than i
For first index we can 't use 0
Whether ( i - 1 ) digit of generated number can be equal to ( i - 1 ) digit of C
Is digit [ i - 1 ] present in A ?
Driver code
Python 3 program to count the number of paths with weight W in a K - ary tree
Function to return the number of ways having weight as wt in K - ary tree
Return 0 if weight becomes less than zero
Return one only if the current path has included edge weight of atleast M
If the current edge weight is greater than or equal to M , set used as true
Driver Code
Function to find the number of partitions of N
Base case
Driver code
Python3 program to find longest increasing path in a matrix .
Return the length of LIP in 2D matrix
If value not calculated yet .
If reach bottom left cell , return 1.
If reach the corner of the matrix .
If value greater than below cell .
If value greater than left cell .
Wrapper function
Driver Code
Recursive function to count number of paths
If we reach bottom or top left , we are have only one way to reach ( 0 , 0 )
Else count sum of both ways
Driver Code
Python program to solve Gold Mine problem
Returns maximum amount of gold that can be collected when journey started from first column and moves allowed are right , right - up and right - down
Create a table for storing intermediate results and initialize all cells to 0. The first row of goldMineTable gives the maximum gold that the miner can collect when starts that row
Gold collected on going to the cell on the right ( -> )
Gold collected on going to the cell to right up ( / )
Gold collected on going to the cell to right down ( \ )
Max gold collected from taking either of the above 3 paths
The max amount of gold collected will be the max value in first column of all rows
Driver code
Python3 program to find minimum adjustment cost of an array
Function to find minimum adjustment cost of an array
dp [ i ] [ j ] stores minimal adjustment cost on changing A [ i ] to j
handle first element of array separately
do for rest elements of the array
replace A [ i ] to j and calculate minimal adjustment cost dp [ i ] [ j ]
initialize minimal adjustment cost to INT_MAX
consider all k such that k >= max ( j - target , 0 ) and k <= min ( M , j + target ) and take minimum
return minimum value from last row of dp table
Driver Code
Function to find the number of triplets from the range [ L , R ] having sum of two numbers from the triplet equal to the third number
Stores the total number of triplets
Find the difference of the range
Case 1 : If triplets can 't  be formed, then return 0
Otherwise
Update the total number of triplets
Return the count
Driver Code
Function to generate two arrays satisfying the given conditions
Declare the two arrays A and B
Iterate from range [ 1 , 2 * n ]
Assign consecutive numbers to same indices of the two arrays
Print the first array
Print the second array , B
Driver Code
Function Call
Function to flip bits of A and B which are set in both of them
Iterate all possible bits of A and B
If ith bit is set in both A and B
Clear i - th bit of A
Clear i - th bit of B
Print A and B
Driver Code
Function to find the distinct sums
Driver code
Function to count the number of substrings consists of 0 , 1 , and 2
Initialize frequency array of size 3
Stores the resultant count
Traversing string str
Update frequency array
If all the characters are present counting number of substrings possible
Update number of substrings
Return the number of substrings
Driver Code
Function to find the minimum number of flips to make all three pairs of consecutive characters different
Stores resultant count of pairs
Base Case
Iterate over the range [ 0 , N - 2 ]
If the consecutive 3 numbers are the same then increment the count and the counter
Return the answer
Driver Code
Function to convert Decimal to Hex
Function to encrypt the string
Iterate the characters of the string
Iterate until S [ i ] is equal to ch
Update count and i
Decrement i by 1
Convert count to hexadecimal representation
Append the character
Append the characters frequency in hexadecimal representation
Reverse the obtained answer
Return required answer
Driver Code
Given Input
Function Call
Function to calculate and return the value of Binomial Coefficient C ( n , k )
Since C ( n , k ) = C ( n , n - k )
Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] / [ k * ( k - 1 ) * -- - * 1 ]
Function to return the count of binary strings of length N such that frequency of 1 ' s ▁ exceed ▁ that ▁ of ▁ 0' s
Count of N - length binary strings
Count of N - length binary strings having equal count of 0 ' s ▁ and ▁ 1' s
For even length strings
Driver Code
Function to remove all occurrences of a character in the string
Base Case
Check the first character of the given string
Pass the rest of the string to recursion Function call
Add the first character of str and string from recursion
Given String
Given character
Function call
Function checks whether given time is correct
To check minute value of time
To check hour value of time
Changes in value is not allowed at position where ' ? ' is not present
Function checks whether the absolute difference between hour and minute value is within [ L , R ]
Checks if the difference is outside the give range
Displays time in proper 24 - hour format
Function find the desired value of time whose difference lies in the range [ L , R ]
Decrease hour value from 23 to 0
Check if the hour value is valid if not valid then no need to change minute value , since time will still remain in valid , to check hour value flag is set to 1.
Decrease minute value from 59 to 0
Check if the minute value is valid , if not valid then skip the current iteration , to check ' minute ' value flag is set to 0.
Input time
Difference range
Function to check string str can be split a string into even length palindromic substrings
Initialize a stack
Iterate the string
If the i - th character is same as that at the top of the stack then pop the top element
Else push the current charactor into the stack
If the stack is empty , then even palindromic substrings are possible
Else not - possible
Given string
Function Call
Python3 program for the above approach
To store the frequency of string after bitmasking
To store result for each string in arr2 [ ]
Traverse the arr1 [ ] and bitmask each string in it
Bitmasking for each string s
Update the frequency of string with it 's bitmasking value
Traverse the arr2 [ ]
Bitmasking for each string s
Check if temp is present in an unordered_map or not
Check for next set bit
Push the count for current string in resultant array
Print the count for each string
Driver Code
Function call
Function to print the binary number
Check if the current number is 0
Find the continuous 0 s
Replace initially occurring 0 with 1
return the string and break the loop
Driver code
Function to return the original string after converting it back from camelCase
Print the first character as it is
Traverse the rest of the characters one by one
If current character is uppercase prspace followed by the current character in lowercase
Else print the current character
Driver code
Function to count the character 'a
atleast k repetition are required
if n is not the multiple of the string size check for the remaining repeating character .
Driver code
Python3 program to count frequencies of array items having small values .
Create an array to store counts . The size of array is limit + 1 and all values are initially 0
Traverse through array elements and count frequencies ( assuming that elements are limited by limit )
Driver Code
Function that checks if the binary string contains m consecutive 1 ' s ▁ or ▁ 0' s
length of binary string
counts zeros
counts 1 's
count consecutive 0 's
count consecutive 1 's
Driver Code
function call
Function to find product of digits of elements at k - th level
Initialize result
increasing level number
decreasing level number
check if current level is the desired level or not
required product
Driver program
Function to check duplicates in row and column
Create an array isPresent and initialize all entries of it as false . The value of isPresent [ i ] [ j ] is going to be true if s [ i ] [ j ] is present in its row or column .
Checking every row for duplicates of a [ i ] [ j ]
Checking every row for duplicates of a [ i ] [ j ]
If the character is unique in its row and column
Driver Code
character array
Calling function
Python code to check if a given ISBN is valid or not .
check for length
Computing weighted sum of first 9 digits
Checking last digit
If last digit is ' X ' , add 10 to sum , else add its value .
Return true if weighted sum of digits is divisible by 11
Driver Code
utility function to check for vowel
Function to reverse order of vowels
Storing the vowels separately
Placing the vowels in the reverse order in the string
Driver Code
Function to find string which has first character of each word .
Traverse the string .
If it is space , set v as true .
Else check if v is true or not . If true , copy character in output string and set v as false .
Driver Code
Function for dfs . i , j == > Current cell indexes vis == > To mark visited cells ans == > Result z == > Current count 0 s visited z_count == > Total 0 s present
Mark the block as visited
Update the count
If end block reached
If path covered all the non - obstacle blocks
Up
Down
Left
Right
Unmark the block ( unvisited )
Function to return the count of the unique paths
Total 0 s present
Count non - obstacle blocks
Starting position
Driver code
Return the number of unordered pairs satisfying the conditions
ans stores the number of unordered pairs
Making each value of array to positive
Sort the array
For each index calculating the right boundary for the unordered pairs
Return the final result
Driver code
Function to find the area of a square
Use above formula
Driver Code
Given Side of square
Function call
Python3 program to implement the above approach
Number of circles
Number of straight lines
Function Call
Function to find icosihenagonal number
Formula to calculate nth icosihenagonal number
Driver Code
Python3 program to implement the above approach
For all vertices
Calculate value of A using shoelace formula
Calculating coordinates of centroid of polygon
Coordinate of the vertices
Driver code
according to formula derived above
print all the angles
Python program to find the Distance between two parallel Planes in 3 D .
Function to find distance
Driver Code
Function to calculate factorial
Function to count number of ways to make 2 necklace having exactly N / 2 beads if each bead is considered different
Number of ways to choose N / 2 beads from N beads
Number of ways to permute N / 2 beads
Divide ans by 2 to remove repetitions
Return ans
Driver Code
Given Input
Function Call
Function to check if S is divisible by D while changing S to ( S + S % D )
V ( 0 ) = S % D
Stores the encountered values
V ( i ) = ( V ( i - 1 ) + V ( i - 1 ) % D ) % D
Check if the value has already been encountered
Edge Case
Otherwise , insert it into the hashmap
Driver Code
Function to count the number of steps required to convert ( x , y ) to ( 1 , 1 )
Store the required result
Iterate while both x and y are not equal to 0
If x is greater than y
Update count and value of x
Otherwise
Update count and value of y
If both x and y > 1
Print the result
Driver Code
Given X and Y
Returns count of minimum reversals for making expr balanced . Returns - 1 if expr cannot be balanced .
length of expression must be even to make it balanced by using reversals .
After this loop , stack contains unbalanced part of expression , i . e . , expression of the form " . . . . "
Length of the reduced expression red_len = ( m + n )
count opening brackets at the end of stack
return ceil ( m / 2 ) + ceil ( n / 2 ) which is actually equal to ( m + n ) / 2 + n % 2 when m + n is even .
Driver Code
Prints the minimum number that can be formed from input sequence of I ' s ▁ and ▁ D ' s
Initialize current_max ( to make sure that we don 't use repeated character
Initialize last_entry ( Keeps track for last printed digit )
Iterate over input array
Initialize ' noOfNextD ' to get count of next D 's available
If letter is ' I ' Calculate number of next consecutive D 's  available
If ' I ' is first letter , print incremented sequence from 1
Set max digit reached
If not first letter Get next digit to print
Print digit for I
For all next consecutive ' D ' print decremented sequence
If letter is 'D  
If ' D ' is first letter in sequence Find number of Next D 's available
Calculate first digit to print based on number of consecutive D 's
Print twice for the first time
Store last entry
If current ' D ' is not first letter Decrement last_entry
Driver code
Python3 program to print minimum number that can be formed from a given sequence of Is and Ds
min_avail represents the minimum number which is still available for inserting in the output vector . pos_of_I keeps track of the most recent index where ' I ' was encountered w . r . t the output vector
Vector to store the output
Cover the base cases
Traverse rest of the input
Print the number
Driver code
Function to decode the given sequence to construct minimum number without repeated digits
String for storing result
Take a List to work as Stack
run n + 1 times where n is length of input sequence , As length of result string is always 1 greater
Push number i + 1 into the stack
If all characters of the input sequence are processed or current character is 'I
Run While Loop Untill stack is empty
pop the element on top of stack And store it in result String
Driver Code
Returns minimum number made from given sequence without repeating digits
The loop runs for each input character as well as one additional time for assigning rank to remaining characters
Driver Code
Python3 implementation of above approach
function to check prime
Function to generate smallest possible number with given digits
Declare a Hash array of size 10 and initialize all the elements to zero
store the number of occurrences of the digits in the given array into the Hash table
Traverse the Hash in ascending order to print the required number
Print the number of times a digits occurs
extracting the first digit
extracting the last digit
printing the prime combinations
Driver code
Function to return gcd of a and b
function to check for gcd
a and b are coprime if their gcd is 1.
Checks if any possible triplet ( a , b , c ) satifying the condition that ( a , b ) is coprime , ( b , c ) is coprime but ( a , c ) isnt
Generate and check for all possible triplets between L and R
if we find any such triplets set flag to true
flag = True indicates that a pair exists between L and R
finding possible Triplet between 2 and 10
finding possible Triplet between 23 and 46
Python 3 program to determine if A and B can be reached starting from 1 , 1 following the given steps .
function to check is it is possible to reach A and B starting from 1 and 1
find the cuberoot of the number
divide the number by cuberoot
if it is a perfect cuberoot and divides a and b
Driver Code
Python3 program to check whether a number is undulating or not
Considering the definition with restriction that there should be at least 3 digits
Check if all alternate digits are same or not .
Driver Code
Function to calculate the following series
Driver Code
Efficient python program to count numbers with last digit as k in given range .
Returns count of numbers with k as last digit .
Driver Code
function to calculate the sum of all numbers divisible by 6 in range L - R . .
no of multiples of 6 upto r
no of multiples of 6 upto l - 1
summation of all multiples of 6 upto r
summation of all multiples of 6 upto l - 1
returns the answer
driver code
Python3 program to find the largest smaller number by swapping one digit .
Returns largest possible number with one swap such that the number is smaller than str . It is assumed that there are leading 0 s .
Traverse from right until we find a digit which is greater than its next digit . For example , in 34125 , our index is 4.
We can also use binary search here as digits after index are sorted in increasing order . Find the biggest digit in the right of arr [ index ] which is smaller than arr [ index ]
If index is - 1 i . e . digits are in increasing order .
Swap both values
Driver Code
returns value of poly [ 0 ] x ( n - 1 ) + poly [ 1 ] x ( n - 2 ) + . . + poly [ n - 1 ]
Initialize result
Evaluate value of polynomial using Horner 's method
Returns sign value of polynomial
Let us evaluate value of 2 x3 - 6 x2 + 2 x - 1 for x = 3
Python3 program to find minimum number to insert in array so their sum is prime
function to calculate prime using sieve of eratosthenes
Find prime number greater than a number
find prime greater than n
check if num is prime
Increment num
To find number to be added so sum of array is prime
call sieveOfEratostheneses to calculate primes
To find sum of array elements
If sum is already prime return 0
To find prime number greater than sum
Return difference of sum and num
Driver code
Computes sum all sub - array
Pick starting point
Pick ending point
sum subarray between current starting and ending points
driver program
Python3 program to find highest power of 2 smaller than or equal to n .
Driver code
Python program to find ( a ^ b ) mod m for a large 'a
utility function to calculate a % m
convert string s [ i ] to integer which gives the digit value and form the number
Returns find ( a ^ b ) % m
Find a % m
now multiply ans by b - 1 times and take mod with m
Driver program to run the case
To represent a data point corresponding to x and y = f ( x )
function to interpolate the given data points using Lagrange 's formula xi -> corresponds to the new data point whose value is to be obtained n -> represents the number of known data points
Initialize result
Compute individual terms of above formula
Add current term to result
Driver Code
creating an array of 4 known data points
Using the interpolate function to obtain a data point corresponding to x = 3
Prints all prime numbers smaller
In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than n , we reduce n to half
This array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j Initialize all elements as not marked
Main logic of Sundaram . Mark all numbers of the form i + j + 2 ij as true where 1 <= i <= j
Since 2 is a prime number
Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .
Driver Code
Function to construct an array with each element equal to XOR of all array elements except the element at the same index
Original array
Stores Bitwise XOR of array
Calculate XOR of all array elements
Print the original array B
Driver Code
Function Call
Function to return the extra element in B [ ]
To store the result
Find the XOR of all the element of array A [ ] and array B [ ]
Driver code
Function to calculate hamming distance
Driver code
function to find bitwise subsets Naive approach
Driver code
Python program to find MSB number for given n .
To find the position of the most significant set bit
To return the value of the number with set bit at k - th position
Driver code
function to count subsets such that all subsets have distinct elements .
take input and initialize res = 0
sort the array
traverse the input array and find maximum frequency
for each number find its repetition / frequency
update res
Driver code
Function to count subsets such that all subsets have distinct elements .
Traverse the input array and store frequencies of elements
Find the maximum value in map .
Driver code
''Store perfect squares less than or equal to N
''Utility function to calculate perfect squares less than or equal to N
''Function to find the number of ways to represent a number as sum of perfect squares
'' Handle the base cases
'' Include the i-th index element
'' Exclude the i-th index element
'' Return the result
''Driver Code
'' Given Input
'' Precalculate perfect  squares <= N
'' Function Call
''Stores the sum of distances of all nodes from the given node
''Structure of a binary tree node
''Function to count the number of nodes in the left and right subtrees
'' Initialize a pair that stores  the pair {number of nodes, depth}
'' Finding the number of nodes  in the left subtree
'' Find the number of nodes  in the right subtree
'' Filling up size field
''Function to find the total distance
'' If target node matches with  the current node
'' If root.left is not null
'' Update sum
'' Recur for the left subtree
'' If root.right is not null
'' Apply the formula given  in the approach
'' Recur for the right subtree
''Driver Code
'' Input tree
'' Total number of nodes
'' Print the sum of distances
''Function to rearrange array such that sum of similar indexed elements does not exceed K
'' Sort the array B[]  in descending order
'' If condition fails
'' Print the array
''Driver Code
'' Given arrays
''Function to count the number of rows whose sum exceeds the sum of elements of the remaining matrix
'' Stores the matrix dimensions
'' To store the result
'' Stores the total sum of  the matrix elements
'' Calculate the total sum
'' Traverse to check for each row
'' Stores the sum of elements  of the current row
'' Calculate the sum of elements  of the current row
'' If sum of current row exceeds  the sum of rest of the matrix
'' Increase count
'' Print the result
''Driver Code
'' Given matrix
'' Function call
function to check whether the array contains a set of contiguous integers
Sort the array
After sorting , check if current element is either same as previous or is one more .
Driver code
function to check whether the array contains a set of contiguous integers
Find maximum and minimum elements .
There should be at least m elements in array to make them contiguous .
Create a visited array and initialize fals
Mark elements as true .
If any element is not marked , all elements are not contiguous .
Driver program
Function to check whether the array contains a set of contiguous integers
Storing elements of ' arr [ ] ' in a hash table 'us  
As arr [ 0 ] is present in 'us  
Starting with previous smaller element of arr [ 0 ]
If ' curr _ ele ' is present in 'us  
Increment count
Update 'curr_ele"
Starting with next greater element of arr [ 0 ]
If ' curr _ ele ' is present in 'us  
Increment count
Update 'curr_ele"
Returns true if array contains a set of contiguous integers else returns false
Driver code
function to print the longest sub - array
mark the element visited
if its visited first time , then increase the counter of distinct elements by 1
When the counter of distinct elements increases from k , then reduce it to k
from the left , reduce the number of time of visit
if the reduced visited time element is not present in further segment then decrease the count of distinct elements
increase the subsegment mark
check length of longest sub - segment when greater then previous best then change it
print the longest sub - segment
Driver Code
Function that returns true if any k segments overlap at any point
Vector to store the starting point and the ending point
Starting points are marked by - 1 and ending points by + 1
Sort the vector by first element
Stack to store the overlaps
Get the current element
If it is the starting point
Push it in the stack
It is the ending point
Pop an element from stack
If more than k ranges overlap
Driver Code
Python3 program to finds out smallest range that includes elements from each of the given sorted lists .
array for storing the current index of list i
This function takes an k sorted lists in the form of 2D array as an argument . It finds out smallest range that includes elements from each of the k lists .
initializing to 0 index
for maintaining the index of list containing the minimum element
iterating over all the list
if every element of list [ i ] is traversed then break the loop
find minimum value among all the list elements pointing by the ptr [ ] array
update the index of the list
find maximum value among all the list elements pointing by the ptr [ ] array
if any list exhaust we will not get any better answer , so break the while loop
updating the minrange
Driver code
function to find largest d
sort the array in ascending order
iterating from backwards to find the required largest d
since all four a , b , c , d should be distinct
if the current combination of j , k , l in the set is equal to S [ i ] return this value as this would be the largest d since we are iterating in descending order
Driver Code
The function finds four elements with given sum X
Store sums ( a + b ) of all pairs ( a , b ) in a hash table
Traverse through all pairs and find ( d - c ) is present in hash table
If d - c is present in hash table ,
Making sure that all elements are distinct array elements and an element is not considered more than once .
Driver Code
Function to count maximum number of elements that can be selected
Sort he array
Traverse the array
Add current element to the sum
IF sum exceeds k
Increment count
Return the count
Driver code
Function call
Function to left Rotate arr [ ] of size n by 1
Function to left rotate arr [ ] of size n by d
utility function to print an array
Driver program to test above functions
Function to sort the elements of the array from index a to index b
Variables to store start and end of the index range
Temporary array
Sort the temporary array
Modifying original array with temporary array elements
Print the modified array
Driver code
length of the array
Python 3 implementation to sort the rows of matrix in descending order followed by sorting the columns in ascending order
function to sort each row of the matrix according to the order specified by descending .
function to find transpose of the matrix
swapping element at index ( i , j ) by element at index ( j , i )
function to sort the matrix row - wise and column - wise
sort rows of mat [ ] [ ] in descending order
get transpose of mat [ ] [ ]
again sort rows of mat [ ] [ ] in ascending order .
again get transpose of mat [ ] [ ]
function to print the matrix
Driver code
Function which pushes all zeros to end of an array .
Count of non - zero elements
Traverse the array . If element encountered is non - zero , then replace the element at index ' count ' with this element
here count is incremented
Now all non - zero elements have been shifted to front and ' count ' is set as index of first 0. Make all elements 0 from count to end .
Driver code
function to move all zeroes at the end of array
Count of non - zero elements
Traverse the array . If arr [ i ] is non - zero , then swap the element at index ' count ' with the element at index 'i  
function to print the array elements
Driver program to test above
function which pushes all zeros to end of an array .
Count of non - zero elements
Traverse the array . If element encountered is non - zero , then replace the element at index ' count ' with this element
here count is incremented
Now all non - zero elements have been shifted to front and ' count ' is set as index of first 0. Make all elements 0 from count to end .
function to rearrange the array elements after modification
if ' arr [ ] ' contains a single element only
traverse the array
if true , perform the required modification
double current index value
put 0 in the next index
increment by 1 so as to move two indexes ahead during loop iteration
push all the zeros at the end of 'arr[]  
function to print the array elements
Driver program to test above
shift all zero to left side of an array
Maintain last index with positive value
If Element is non - zero
swap current index , with lastSeen non - zero
next element will be last seen non - zero
A utility function to print an array of size n
Function to Rearrange positive and negative numbers in a array
if current element is positive do nothing
if current element is negative , shift positive elements of arr [ 0. . i - 1 ] , to one position to their right
Put negative element at its right position
Driver Code
Function to print an array
Function to reverse an array . An array can be reversed in O ( n ) time and O ( 1 ) space .
Merges two subarrays of arr [ ] . First subarray is arr [ l . . m ] Second subarray is arr [ m + 1. . r ]
Initial index of 1 st subarray
Initial index of IInd
arr [ i . . m ] is positive
arr [ j . . r ] is positive reverse positive part of left sub - array ( arr [ i . . m ] )
reverse negative part of right sub - array ( arr [ m + 1. . j - 1 ] )
reverse arr [ i . . j - 1 ]
Function to Rearrange positive and negative numbers in a array
Same as ( l + r ) / 2 , but avoids overflow for large l and h
Sort first and second halves
Driver Code
Python implementation of the above approach
Loop until arr [ i ] < 0 and still inside the array
Loop until arr [ j ] > 0 and still inside the array
if i is less than j
Driver Code
Function to find the winner of the game played based on given conditions
A wins if size of array is odd
Otherwise , B wins
Driver Code
Input array
Size of the array
python program for the above approach
Function to sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all possible values of X and Y , where Y is less than or equal to sqrt ( N ) .
Iterate over all possible values of X
Precompute for all possible values of an expression such that y <= sqrt ( N )
If i + j less than N
Update dp [ i ] [ j ]
Update dp [ i ] [ j ]
Function to Find the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all queries
dp [ x ] [ y ] : Stores sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ...
Traverse the query array , Q [ ] [ ]
If y is less than or equal to sqrt ( N )
Stores the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ...
Traverse the array , arr [ ]
Update sum
Update x
Driver Code
Python3 program to find all elements in array which have at - least two greater elements itself .
Pick elements one by one and count greater elements . If count is more than 2 , print that element .
Driver code
Sorting based Python 3 program to find all elements in array which have atleast two greater elements itself .
Driven source
Python3 program to find all elements in array which have atleast two greater elements itself .
If current element is smaller than first then update both first and second
If arr [ i ] is in between first and second then update second
Driver code
Function to find the minimum number of operations required to make the array non - increasing
Stores the count of required operations
If arr [ i ] > arr [ i + 1 ] , no increments required . Otherwise , add their difference to the answer
Return the result res
Driver Code
function that returns smallest elements missing in a sorted array .
Left half has all elements from 0 to mid
driver program to test above function
Function to find missing element
Index matches with value at that index , means missing element cannot be upto that point
Function to find Smallest Missing in Sorted Array
Check if 0 is missing in the array
Check is all numbers 0 to n - 1 are prsent in array
Driver code
Function Call
Function to return max sum such that no two elements are adjacent
Current max excluding i ( No ternary in Python )
Current max including i
return max of incl and excl
Driver program to test above function
Function for counting minimum number of changes
Distance of elements from ( 0 , 0 ) will is i range [ 0 , n + m - 2 ]
Store frequencies of [ 0 , 9 ] at distance i Initialize all with zero
Count frequencies of [ 0 , 9 ]
Increment frequency of value matrix [ i ] [ j ] at distance i + j
Find value with max frequency and count total cells at distance i from front end and rear end
Change all values to the value with max frequency
Return the answer
Driver code
Given matrix
Function call
Python3 program to do range minimum query using sparse table
Fills lookup array lookup [ ] [ ] in bottom up manner .
Initialize M for the intervals with length 1
Compute values from smaller to bigger intervals
Compute minimum value for all intervals with size 2 ^ j
For arr [ 2 ] [ 10 ] , we compare arr [ lookup [ 0 ] [ 7 ] ] and arr [ lookup [ 3 ] [ 10 ] ]
Returns minimum of arr [ L . . R ]
Find highest power of 2 that is smaller than or equal to count of elements in given range . For [ 2 , 10 ] , j = 3
Compute minimum of last 2 ^ j elements with first 2 ^ j elements in range . For [ 2 , 10 ] , we compare arr [ lookup [ 0 ] [ 3 ] ] and arr [ lookup [ 3 ] [ 3 ] ] ,
Driver Code
Python3 program to do range minimum query using sparse table
Fills lookup array lookup [ ] [ ] in bottom up manner .
GCD of single element is element itself
Build sparse table
Returns minimum of arr [ L . . R ]
Find highest power of 2 that is smaller than or equal to count of elements in given range . For [ 2 , 10 ] , j = 3
Compute GCD of last 2 ^ j elements with first 2 ^ j elements in range . For [ 2 , 10 ] , we find GCD of arr [ lookup [ 0 ] [ 3 ] ] and arr [ lookup [ 3 ] [ 3 ] ] ,
Driver Code
Modifies arr [ 0. . n - 1 ] to lexicographically smallest with k swaps .
Set the position where we we want to put the smallest integer
If we exceed the Max swaps then terminate the loop
Find the minimum value from i + 1 to max ( k or n )
Swap the elements from Minimum position we found till now to the i index
Set the final value after swapping pos - i elements
Driver Code
Print the final Array
Returns beginning index of maximum average subarray of length k
Check if ' k ' is valid
Create and fill array to store cumulative sum . csum [ i ] stores sum of arr [ 0 ] to arr [ i ]
Initialize max_sm as sum of first subarray
Find sum of other subarrays and update max_sum if required .
Return starting index
Driver program
Returns beginning index of maximum average subarray of length k
Check if ' k ' is valid
Compute sum of first ' k ' elements
Compute sum of remaining subarrays
Return starting index
Driver program
Stores the minimum score for each states as map < pair < pos , myturn > , ans >
Function to find the minimum score after choosing element from array
Return the stored state
Base Case
Player A 's turn
Find the minimum score
Store the current state
Return the result
Player B 's turn
Find minimum score
Store the current state
Return the result
Function that finds the minimum penality after choosing element from the given binary array
Starting position of choosing element from array
0 denotes player A turn 1 denotes player B turn
Function Call
Print the answer for player A and B
Minimum penalty
Calculate sum of all arr elements
Print the minimum score
Driver Code
Python3 program for the above approach
Create a boolean array prime [ ] and initialize all entires it as true A value in prime [ i ] will finally be false if i is Not a prime
Function to find prime numbers
Check if prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked
Function to get the middle index from corner indexes
Function to get the sum of values in the given range of the array
If segment of this node is a part of given range , then return the sum of the segment
If segment of this node is outside the given range
If a part of this segment overlaps with the given range
Function to update the nodes which have the given index in their range
If the input index lies outside the range of this segment
If the input index is in range of this node , then update the value of the node and its children
Function to update a value in input array and segment tree
Check for errorneous imput index
Get the difference between new value and old value
Update the value in array
Update the values of nodes in segment tree only if either previous value or new value or both are prime
If only new value is prime
If only old value is prime
If both are prime
Return sum of elements in range from index qs ( query start ) to qe ( query end ) . It mainly uses getSumUtil ( )
Check for erroneous input values
Function that constructs the Segment Tree
If there is one element in array , store it in current node of segment tree and return
Only add those elements in segment tree which are prime
If there are more than one elements , then recur for left and right subtrees and store the sum of values in this node
Function to construct segment tree from given array
Height of segment tree
Maximum size of segment tree
Allocate memory
Fill the allocated memory st
Return the constructed segment tree
Driver code
Function call
Build segment tree from given array
Print sum of values in array from index 1 to 3
Update : set arr [ 1 ] = 10 and update corresponding segment tree nodes
Find sum after value is updated
Python 3 Program to Count the number of ways to construct the target string
base case
If current subproblem has been solved , use the value
current character
search through all the indiced at which the current character occurs . For each index greater than prev , take the index and move to the next position , and add to the answer .
Store and return the solution for this subproblem
preprocess the strings by storing for each character of every string , the index of their occurrence we will use a common list for all because of only the index matter in the string from which the character was picked
we are storing j + 1 because the initial picked index in the recursive step will ne 0. This is just for ease of implementation
initialise dp table . - 1 represents that the subproblem hasn 't been solve
Driver Code
Python 3 implementation of the approach
Function to return the count of numbers from the range [ 0 , n ] whose digit sum is a multiple of k using bottom - up dp
The digit in this index can only be from [ 0 , num [ idx ] ]
The digit in this index can be anything from [ 0 , 9 ]
new_tight is the flag value for the next position
res can 't be negative
Function to process the string to a vector of digits from MSD to LSD
Driver code
For large input number n
Total number of digits in n
To store the states of the dp
Process the string to a vector of digits from MSD to LSD
w1_r represents remaining capacity of 1 st knapsack w2_r represents remaining capacity of 2 nd knapsack i represents index of the array arr we are working on
Base case
Variables to store the result of three parts of recurrence relation
Store the state in the 3D array
Driver code
Input array
3D array to store states of DP
Number of elements in the array
Capacity of knapsacks
Function to be called
Bottom up approach for counting ways to reach a score using 1 and 2 with consecutive 2 allowed
noOfWays [ i ] will store count for last 3 values before i .
Loop till " n + 1" to compute value for " n "
number of ways if first run is 1
number of ways if first run is 2 and second run is 1
Remember last 3 values
Driver code
Python3 implementation of above approach
Depth First Search
Return if cell contain non prime number or obstacle , or going out of matrix or already visited the cell or already found the lexicographical largest path
marking cell is already visited
storing the lexicographical largest path index
if reached the end of the matrix
updating the final number of steps in lexicographical largest path
moving diagonal ( trying lexicographical largest path )
moving cell right to current cell
moving cell down to current cell .
Print lexicographical largest prime path
To count the number of step in lexicographical largest prime path
To store the lexicographical largest prime path index
To mark if the cell is already traversed or not
traversing by DFS
printing the lexicographical largest prime path
Return the number of prime path in ther matrix .
for each cell
If on the top row or leftmost column , there is no path there .
If non prime number
Finding the matrix mapping by considering non prime number as obstacle and prime number be valid path .
Sieve
If prime
if non prime
Driver code
A Dynamic Programming solution for subset sum problem + maximal subset value . Returns size of maximum sized subset if there is a subset of set [ ] with sun equal to given sum . It returns - 1 if there is no subset with given sum .
The value of subset [ i ] [ j ] will be true if there is a subset of set [ 0. . j - 1 ] with sum equal to i
If sum is 0 , then answer is true
If sum is not 0 and set is empty , then answer is false
Fill the subset table in bottom up manner
Driver code
Python3 program to find all LCS of two strings in sorted order .
dp matrix to store result of sub calls for lcs
A memoization based function that returns LCS of str1 [ i . . len1 - 1 ] and str2 [ j . . len2 - 1 ]
base condition
if lcs has been computed
if characters are same return previous + 1 else max of two sequences after removing i ' th ▁ and ▁ j ' th char one by one
Function to prall routes common sub - sequences of length lcslen
if currlcs is equal to lcslen then prit
if we are done with all the characters of both string
here we have to prall sub - sequences lexicographically , that ' s ▁ why ▁ we ▁ start ▁ from ▁ ' a ' to ' z ' if this character is  present in both of them then append it in data[] and same  remaining part
done is a flag to tell that we have printed all the subsequences corresponding to current character
if character ch is present in str1 then check if it is present in str2
if ch is present in both of them and remaining length is equal to remaining lcs length then add ch in sub - sequenece
If we found LCS beginning with current character .
This function prints all LCS of str1 and str2 in lexicographic order .
Find lengths of both strings
Find length of LCS
Prall LCS using recursive backtracking data [ ] is used to store individual LCS .
Driver program to run the case
Python3 Program to check for majority element in a sorted array
get last index according to n ( even or odd )
search for first occurrence of x in arr [ ]
check if x is present and is present more than n / 2 times
Driver program to check above function
If x is present in arr [ low ... high ] then returns the index of first occurrence of x , otherwise returns - 1
Check if arr [ mid ] is the first occurrence of x . arr [ mid ] is first occurrence if x is one of the following is true : ( i ) mid == 0 and arr [ mid ] = = x ( ii ) arr [ mid - 1 ] < x and arr [ mid ] == x
This function returns true if the x is present more than n / 2 times in arr [ ] of size n
Find the index of first occurrence of x in arr [ ]
If element is not present at all , return false
check if the element is present more than n / 2 times
Driver code
A Dynamic Programming solution for Rod cutting problem
Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces
Build the table val [ ] in bottom up manner and return the last entry from the table
Driver program to test above functions
Function to check if the arr [ ] can be converted to target [ ] by replacing any element in arr [ ] by the sum of arr [ ]
Store the maximum element
Store the index of the maximum element
Traverse the array target [ ]
If current element is greater than max
If max element is 1
Traverse the array , target [ ]
If current index is not equal to maximum element index
Update max
If max is less than or equal to 0 ,
Update the maximum element
Recursively call the function
Driver Code
Function returns nCr i . e . Binomial Coefficient
Initialize res with 1
Since C ( n , r ) = C ( n , n - r )
Evaluating expression
Driver Code
Python Program to check if N can be obtained from 1 by repetitive multiplication by 10 or 20
Function to check if N can be obtained or not
Count and remove trailing zeroes
Check if remaining N is a power of 2
To check the condition to print YES or NO
Driver Program
Function to find N - th term in the series
Driver code
Iterative function to reverse digits of num
Return the reversed num
Function to calculate sum of reverse all proper divisors
Final result of summation of divisors
Find all divisors of num
If ' i ' is divisor of 'num
If both divisors are same then add it only once else add both
Add 1 to the result as 1 is also a divisor
Function to check if N is anti - perfect or not
Given Number N
Function Call
Function to print the series
Generate the ith term and print it
Driver Code
Function Call
Function to find diameter of BIT with N + 1 nodes
L is size of subtree just before subtree in which N lies
H is the height of subtree just before subtree in which N lies
Base Cases
Size of subtree are power of 2
3 Cases as explained in Approach
Driver Code
Python3 implementation of the approach
Function to find whether a ^ b is greater or c ^ d
Find b * log ( a )
Find d * log ( c )
Compare both values
Driver code
Python3 program for above approach
Find all prime numbers
Store all prime numbers
Function to check if a digit is odd prime or not
Function to find sum
To store required answer
Get all prime numbers
Traverse through all the prime numbers
Flag stores 1 if a number does not contain any odd primes
Find all digits of a number
If number does not contain any odd primes
Return the required answer
Driver code
Function call
Function to return the count of primes in the given array
Find maximum value in the array
USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array " prime [ 0 . . n ] " . A value in prime [ i ] will finally be False if i is Not a prime , else True .
Remaining part of SIEVE
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Find all primes in arr [ ]
Function to generate the prefix array
Fill the prefix array
Driver code
Prefix array of arr [ ]
Count of primes in the prefix array
Python implementation of the approach
Function to return the required value that must be added to x so that it is at least y percent of n
Required value
If x is already >= y percent of n
Driver code
Python3 program to check if given number is a factorial prime
Utility function to check if a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function that returns true if n is a factorial prime
If n is not prime then return false
Calculate factorial
If n is a factorial prime
n is not a factorial prime
Driver code
Get n
find fac1 = ( n - 1 ) !
Find fac2 = n !
Find total number of ways
Print the total number of ways
Python 3 program to check Euclid Number
Function to generate prime numbers
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
store all prime numbers to vector 'arr
Function to check the number for Euclid Number
Multiply next prime number and check if product + 1 = n holds or not
Driver code
Get the prime numbers
Get n
Check if n is Euclid Number
Get n
Check if n is Euclid Number
Python 3 implementation of above approach
Function to find the next perfect cube
Driver code
Python3 program to find sum of prime divisors of N
Function to check if the number is prime or not .
Corner cases
This is checked so that we can skip middle five numbers in below loop
function to find sum of prime divisors of N
return type of sqrt function if float
both factors are same
both factors are not same ( i and n / i )
Driver code
Program position of n among the numbers made of 2 , 3 , 5 & 7
If number is 2 then it is on the position pos * 2 + 1
If number is 3 then it is on the position pos * 2 + 2
If number is 5 then it is on the position pos * 2 + 3
If number is 7 then it is on the position pos * 2 + 4
Driver code
Checks if any possible triplet ( a , b , c ) satifying the condition that ( a , b ) is coprime , ( b , c ) is coprime but ( a , c ) isnt
Case 1 : Less than 3 numbers between L and R
Case 2 : More than 3 numbers between L and R
triplets should always be of form ( 2 k , 2 k + 1 , 2 k + 2 )
Case 3.1 : Exactly 3 numbers in range of form ( 2 k , 2 k + 1 , 2 k + 2 )
Case 3.2 : Exactly 3 numbers in range of form ( 2 k - 1 , 2 k , 2 k + 1 )
flag = True indicates that a pair exists between L and R
finding possible Triplet between 2 and 10
finding possible Triplet between 23 and 46
Python Implementation of above method
Finding number of possible number with n digits excluding a particular digit
Checking if number of digits is zero
Checking if number of digits is one
Checking if number of digits is odd
Calling digitNumber function with ( digit - 1 ) / 2 digits
Calling digitNumber function with n / 2 digits
Calling digitNumber function Checking if excluding digit is zero or non - zero
Initializing variables
Returns true if n is prime . Else false .
Corner case
Check from 2 to n - 1
Function will check whether number is Emirp or not
Check if n is prime
Find reverse of n
If both Original and Reverse are Prime , then it is an Emirp number
Input number
Function for convertion
Driver Code
Return sum of first n integers of an AP
Return the trace of sum of row - major matrix and column - major matrix
Finding nth element in AP in case of Row major matrix .
Finding sum of first n integers of AP in case of Row major matrix
Finding nth element in AP in case of Row major matrix
Finding sum of first n integers of AP in case of Column major matrix
Driver Code
Utility Function
for the 1 st case
for the second case
print final result
driver code
function to find the area
Driver program
Utility method to compute number of ways in which N can be represented as sum of consecutive number
constraint on values of L gives us the time Complexity as O ( N ^ 0.5 )
Driver code
Function to check Automorphic number
Store the square
Start Comparing digits
Return false , if any digit of N doesn ' t ▁ ▁ match ▁ with ▁ its ▁ square ' s digits from last
Reduce N and square
Driver code
Return smallest number having maximum prime factors .
default value of boolean is false
Sieve of eratosthenes
Storing prime numbers .
Generating number having maximum prime factors .
Driver Code
PYTHON program to find sum of all divisors of a natural number
Function to calculate sum of all proper divisors num -- > given natural number
Final result of summation of divisors
find all divisors which divides 'num
if ' i ' is divisor of 'num
if both divisors are same then add it only once else add both
Add 1 to the result as 1 is also a divisor
Driver program to run the case
Utility function to do modular exponentiation . It returns ( x ^ y ) % p .
res = 1 Initialize result x = x % p Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Returns true if square root of n under modulo p exists . Assumption : p is of the form 3 * i + 4 where i >= 1
Try " + ( n ^ ( ( p ▁ + ▁ 1 ) / 4 ) ) "
Try " - ( n ▁ ^ ▁ ( ( p ▁ + ▁ 1 ) / 4 ) ) "
If none of the above two work , then square root doesn 't exist
Driver Code
Python3 program Miller - Rabin primality test
Utility function to do modular exponentiation . It returns ( x ^ y ) % p
Initialize result
Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 ; y = y / 2
This function is called for all k trials . It returns false if n is composite and returns false if n is probably prime . d is an odd number such that d * 2 < sup > r < / sup > = n - 1 for some r >= 1
Pick a random number in [ 2. . n - 2 ] Corner cases make sure that n > 4
Compute a ^ d % n
Keep squaring x while one of the following doesn 't  happen  (i) d does not reach n-1  (ii) (x^2) % n is not 1  (iii) (x^2) % n is not n-1
Return composite
It returns false if n is composite and returns true if n is probably prime . k is an input parameter that determines accuracy level . Higher value of k indicates more accuracy .
Corner cases
Find r such that n = 2 ^ d * r + 1 for some r >= 1
Iterate given nber of ' k ' times
Driver Code Number of iterations
Function to find length of the longest consecutive 1 s in binary representation of a number
Initialize result
Count the number of iterations to reach x = 0.
This operation reduces length of every sequence of 1 s by one .
Driver code
Python program to Subtract two numbers without using arithmetic operators
Iterate till there is no carry
borrow contains common set bits of y and unset bits of x
Subtraction of bits of x and y where at least one of the bits is not set
Borrow is shifted by one so that subtracting it from x gives the required sum
Driver Code
Python Program to subtract two Number without using arithmetic operator Recursive implementation .
Driver program
Function to add an edge in the tree
DFS to find the Kth ancestor of every node
Pushing current node in the vector
Traverse its neighbors
If K ancestors are not found for current node
Add the Kth ancestor for the node
Function to find Kth ancestor of each node
Building the tree
Stores all parents of a node
Store Kth ancestor of all nodes
Print the ancestors
Driver code
Given N and K
Given edges of n - ary tree
Function call
Function to build a segment tree
Check for base case
Find mid point
Recursively build the segment tree
Function for push down operation on the segment tree
Function to update the segment tree
Complete overlap
Find mid
Perform push down operation on segment tree
Recursively update the segment tree
Function to process the queryy
Base case
Find mid
Perform push down operation on segment tree
Recursively calculate the result of the queryy
Return the result
Function to count the numbers which are greater than the given queryy
Sort the input array
Create segment tree of size 4 * n vector < int > sum , add , ans
Build the segment tree
Iterate over the queries
Store result in array
Update the elements in the given range
Print the result of queries
Driver Code
Function call
Python3 program for the above approach
Function to find the final array length by replacing coprime pair with 1
Iterate over all pairs of element
Check if gcd is 1
If no coprime pair found return false
Driver code
Check if atleast one coprime pair exists in the array
If no such pair exists
Function to return the required number of ways
Check if a , b , c can form a triangle
Return number of ways
Driver code
Function to print the count of pair
Iterate over all the elements of the array
Increment the count
Print the result
Driver Code
Function to return the max Length of Fibonacci subsequence
Store all array elements in a hash table
check until next fib element is found
next element of fib subseq
Driver Code
Function to count maximum number of elements that can be selected
Sort he array
Traverse the array
Add current element to the sum
IF sum exceeds k
Increment count
Return the count
Driver code
Function call
Function to find number of candy types
Declare a hashset to store candies
Traverse the given array and inserts element into set
Return the result
Function to find maximum number of types of candies a person can eat
Store the number of candies allowed to eat
Store the number of candy types
Return the result
Driver Code
Given Input
Function Call
Python Program to implement the above approach
Function to calculate the length of diagonals of a rhombus using length of sides and vertex angle
Driver Code
Function to store EVEN and odd variable
Store the count of even and odd set bit
Count the set bit using in built function
Count of set - bit of K
If y is odd then , count of even and odd set bit will be interchanged
Else it will remain same as the original array
Driver 's Code
Function call to count even and odd
Driver code
Python 3 program for the above approach
Recursive function to find the length of the longest subsequence of pairs whose first element is increasing and second is decreasing
Base case
Not include the current pair in the longest subsequence
Including the current pair in the longest subsequence
Driver Code
Given Input
Function Call
Function to find the number of triplets whose Bitwise AND is 0.
Stores the count of triplets having bitwise AND equal to 0
Stores frequencies of all possible A [ i ] & A [ j ]
Traverse the array
Update frequency of Bitwise AND of all array elements with a
Traverse the array
Iterate the map
If bitwise AND of triplet is zero , increment cnt
Return the number of triplets whose Bitwise AND is 0.
Driver Code
Input Array
Function Call
Bottom up approach for counting ways to reach a score using 1 and 2 with consecutive 2 allowed
noOfWays [ i ] will store count for value i . 3 extra values are to take care of corner case n = 0
Loop till " n + 1" to compute value for " n "
number of ways if first run is 1 + number of ways if first run is 2 and second run is 1
Driver Code
Python3 program for the above approach
Function to check if player A wins the game or not
Stores size of the groups of 0 s
Stores size of the group of 0 s
Traverse the array
Increment c by 1 if a [ i ] is 0
Otherwise , push the size in array and reset c to 0
If there is no substring of odd length consisting only of 0 s
If there is only 1 substring of odd length consisting only of 0 s
Otherwise
Stores the size of the largest and second largest substrings of 0 s
Traverse the array v [ ]
If current element is greater than first , then update both first and second
If arr [ i ] is in between first and second , then update second
If the condition is satisfied
Driver code
Function to check whether the is K palindrome or not
map to frequency of character
Check when k is given as same as length of string
Storing the frequency of every character in map
If K is greater than size of then return false
Check that number of character having the odd frequency
If k is less than number of odd frequency character then it is again false otherwise true
Driver code
Function to compare two strings ignoring their cases
Convert to lower case
Comparing both
if strings are equal , return true otherwise false
Function to print the same or not same if strings are equal or not equal
Driver Code
Python3 program to print Step Pattern
function to print the steps
declare a flag
traverse through all the characters in the string
if the x value is 0. . then we must increment till n ... set flag to true
if the x value is n - 1 then we must decrement till 0 ... set flag as false
print x * s
checking whether to increment or decrement x
Get the String and the number n
calling the function
Python program to count frequencies of array items
mark all array elements as not visited
Traverse through array elements and count frequencies
Skip this element if already processed
count frequency
Driver code
function to check whether given binary number is evenly divisible by 2 ^ k or not
count of number of 0 from last
if count = k , number is evenly divisible , so returns true else false
first example
Second example
Python program to Check if any anagram of a string is palindrome or not
function to check whether characters of a string can form a palindrome
Create a count array and initialize all values as 0
For each character in input strings , increment count in the corresponding count array
Count odd occurring characters
Return true if odd count is 0 or 1 ,
Driver program to test to print printDups
This function Returns true if s is a number else false
Driver code
Store the input in a str variable
Function returns 1 if all elements are in range '0 ▁ - ▁ 9'
Function returns 0 if the input is not an integer
Function to print reverse of the passed string
Driver program to test above function
Stores the count of distinct colors in box1
Stores the count of distinct colors in box2
Function to calculate the required probability
Calculate factorial from [ 1 , 10 ]
Assign all distinct balls to second box
Total number of balls
Calculate total number of balls
If K is an odd number
Total ways of distributing the balls in two equal halves
Required number of ways
Return the required probability
Function to calculate total number of possible distributions which satisfies the given conditions
If used balls is equal to K / 2
If box1 is equal to box2
Base condition
Stores the number of ways of distributing remaining balls without including the current balls in box1
Increment box1 by one
Iterate over the range [ 1 , balls [ i ] ]
If all the balls goes to box1 , then decrease box2 by one
Total number of ways of selecting j balls
Increment res by total number of valid ways of distributing the remaining balls
Decrement box1 by one
Increment box2 by 1
Function to calculate factorial of N
Base Case
Iterate over the range [ 1 , N ]
Function to calculate NcR
Driver Code
Print the result
Python3 Program to find the area of a regular polygon with given radius
Function to find the area of a regular polygon
Side and radius cannot be negative
Area degree converted to radians
Driver code
Checking if a plane can be divide by a line at 45 degrees such that weight sum is equal
Rotating each point by 45 degrees and calculating prefix sum . Also , finding maximum and minimum x coordinates
storing weight sum upto x - y point
Finding prefix sum
Line passes through i , so it neither falls left nor right .
Driven Program
Function to find the Slope of other line
Driver code
Python3 Program to find area of segment of a circle
Function to find area of segment
Calculating area of sector
Calculating area of triangle
Driver Code
Python program to find Area of a Sector
Calculating area of the sector
Driver code
Python program for the above approach
Function to calculate total number of prime factor with their prime factor
Iterate while the number is even
Reduce to half
Iterate up to sqrt ( N )
Iterate while N has factors of i
Removing one factor of i
Function to count the number of factors
Find the GCD
Find multiples left in X and Y
Find prime factor of multiple left in X and Y
Initialize ans
Check if it possible to obtain X or not
Check if it possible to obtain Y or not
return main ans
Driver Code
Given Input
Function Call
Python3 program for the above approach
Function to check whether the graph is bipartite or not
Mark source node as visited
Push the source vertex in queue
Get the front of the queue
Assign the color to the popped node
Traverse the adjacency list of the node u
If any node is visited & a different colors has been assigned , then return false
Set visited [ x ]
Push the node x into the queue
Update color of node
If the graph is bipartite
Function to add an edge between the nodes u and v
Function to check if the assignment of direction can be possible to all the segments , such that they do not intersect after a long period of time
Stores the adjacency list of the created graph
Generate all possible pairs
If segments do not overlap
Otherwise , the segments overlap
If both segments have same speed , then add an edge
Keep the track of visited nodes
Iterate for all possible nodes
Check whether graph is bipartite or not
If the graph is bipartite
Driver Code
Python program for the above approach
Driver code
Function to find minimum swaps
Initialise count variable
If current element is not at the right position
Swap current element with correct position of that element
Increment for next index when current element is at correct position
Driver code
Function to find minimum swaps
A linked list node
Given a reference ( pointer to pointer ) to the head Of a DLL and an int , appends a new node at the end
Allocate node
Put in the data
This new node is going to be the last node , so make next of it as None
If the Linked List is empty , then make the new node as head
Else traverse till the last node
Change the next of last node
Make last node as previous of new node
Function to print the list
Run while loop unless node becomes None
Function to merge two sorted doubly linked lists
If any of the list is empty
Comparison the data of two linked list
Store head pointer before merge the list
Changing of pointer between Two list for merging
Changing of pointer between Two list for merging
Condition to check if any anyone list not end
Return head pointer of merged list
Function to merge all sorted linked list in sorted order
Function call to merge two sorted doubly linked list at a time
Return final sorted doubly linked list
Driver code
Loop to initialize all the lists to empty
Create first doubly linked List List1 . 1 <= > 5 <= > 9
Create second doubly linked List List2 . 2 <= > 3 <= > 7 <= > 12
Create third doubly linked List List3 . 8 <= > 11 <= > 13 <= > 18
Function call to merge all sorted doubly linked lists in sorted order
Print final sorted list
Return minimum index
Find minimum of remaining elements
Return minimum of current and remaining .
Recursive selection sort . n is size of a [ ] and index is index of starting element .
Return when starting and size are same
calling minimum index function for minimum index
Swapping when index and minimum index are not same
swap
Recursively calling selection sort function
Driver code
Calling function
printing sorted array
Recursive function to sort an array using insertion sort
base case
Sort first n - 1 elements
Insert last element at its correct position in sorted array .
Move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position
A utility function to print an array of size n
Driver program to test insertion sort
Python Program for implementation of Recursive Bubble sort
A function to implement bubble sort
Base case
One pass of bubble sort . After this pass , the largest element is moved ( or bubbled ) to end .
swap arr [ i ] , arr [ i + 1 ]
Largest element is fixed , recur for remaining array
Python 3 Program for the above approach
Stores the positive elements
Stores the negative elements
Stores the count of 0 s
Sum of all positive numbers
Sum of all negative numbers
Iterate over the array
Stores the difference
Sort the positive numbers in ascending order
Sort the negative numbers in decreasing order
Case 1 : Include both positive and negative numbers
Put all numbers in subset A and one 0 in subset B
Put all numbers in subset A except the smallest positive number which is put in B
Put all numbers in subset B and one 0 in subset A
Place the largest negative number in subset A and remaining in B
Driver code
Function to find the bitwise OR of array elements
Stores the resultant maximum value of Bitwise XOR
Traverse the array arr [ ]
Return the maximum value res
Driver Code
Function to count the number of elements common in both the arrays
Used to traverse array A [ ] and B [ ] from the front and the back
Stores the count of numbers common in both array
If A [ first ] is less than B [ second ]
Increment the value of first
IF B [ second ] is less than A [ first ]
Decrement the value of second
A [ first ] is equal to B [ second ]
Increment the value of count
Increment the value of first
Decrement the value of second
Return the value of count
Driver Code
Python 3 program for the above approach
Function to check if the number N is palindrome or not
Store the value of N
Store the reverse of number N
Reverse temp and store in res
If N is the same as res , then return true
Function to find the sum of the digits of the number N
Stores the sum of the digits
Add the last digit of the number N to the sum
Remove the last digit from N
Return the resultant sum
Function to check if N is prime or not
If i is 1 or 0 , then return false
Check if i is divisible by any number in the range [ 2 , n / 2 ]
If n is divisible by i
Function to precompute all the numbers till 10 ^ 5 that are palindromic and whose sum of digits is prime numbers
Iterate over the range 1 to 10 ^ 5
If i is a palindrome number
Stores the sum of the digits in i
If the sum of digits in i is a prime number
Find the prefix sum of arr [ ]
Function to count all the numbers in the given ranges that are palindromic and the sum of digits is prime numbers
Function Call to precompute all the numbers till 10 ^ 5
Traverse the given queries Q [ ]
Print the result for each query
Driver Code
Function Call
Function to calculate sum of digits of n
Function to find the smallest possible integer satisfying the given condition
If sum of digits is already smaller than s
Initialize variables
Find the k - th digit
Add remaining
If sum of digits does not exceed s
Update K
Given N and S
Function call
Python program to implement the above approach
Function to find the maximum number number of required subsequences
Dictionary to store number of arrows available with height of arrow as key
Stores the maximum count of possible subsequences
Stores the count of possible subsequences
Check if i - th element can be part of any of the previous subsequence
Count of subsequences possible with arr [ i ] as the next element
If more than one such subsequence exists
Include arr [ i ] in a subsequence
Otherwise
Increase count of subsequence possible with arr [ i ] - 1 as the next element
Start a new subsequence
Increase count of subsequence possible with arr [ i ] - 1 as the next element
Return the answer
Driver Code
Function to remove first and last occurrence of a given character from the given string
Traverse the given string from the beginning
If ch is found
Traverse the given string from the end
If ch is found
Driver Code
Python3 program for the above approach
Function that finds the minimum steps to reach either 0 or N for given increasing and decreasing arrays
Initialize variable to find the minimum element
Find minimum element in increasing array
Initialize variable to find the maximum element
Find maximum element in decreasing array
Find the minimum steps
Prthe minimum steps
Driver Code
Given N
Given increasing and decreasing array
Function call
Function to find the minimum number of swaps
New array to convert to 1 - based indexing
Keeps count of swaps
Check if it is an ' X ' position
Corner Case
Swap
Print the minimum swaps
Given number N
Given permutation of N numbers
Function call
Function to find all prime numbers
Create a boolean array " prime [ 0 . . n ] " and initialize all entries as true . A value in prime [ i ] will finally be false if i is Not a prime .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p greater than or equal to the square of it
Store all prime numbers
Function to check if a number is perfect square or not
To store all primes
To store all interseting primes
Store all perfect squares
Store all perfect quadruples
Store all interseting primes
Return count of interseting primes
Driver code
Function to check if array is wave array arr : input array n : size of array
Check the wave form If arr [ 1 ] is greater than left and right . Same pattern will be followed by whole elements , else reverse pattern will be followed by array elements
Check for last element
Check for last element
Driver Code
Array
Function to count number of sequences satisfying the given criteria
Stores the index of the last occurrence of the element
Initialize an array to store the number of different sequences that are possible of length i
Base Case
If no operation is applied on ith element
If operation is applied on ith element
Update the last occurrence of curEle
Finally , prthe answer
Driver Code
Function to prthe maximum sum
Dp table
Base case
Traverse each column
Update answer for both rows
Print the maximum sum
Driver Code
Given array
Number of Columns
Function calls
Function to print the maximum sum possible by selecting at most one element from each column such that no consecutive pairs are selected from a single row
Initialize variables
Traverse each column
Print answer
Driver Code
Numberof columns
Python3 program for the above approach
Function to calculate the factorials up to a number
Calculate the factorial
Function to find power ( a , b )
Iterate until b exists
If b is divisible by 2
Decrease the value of b
Return the answer
Function that counts the unimodal and non - unimodal permutations of a given integer N
Function Call for finding factorials up to N
Function to count unimodal permutations
Non - unimodal permutation is N ! - unimodal permutations
Driver Code Given number N
Function call
Python3 program to find the longest subsequence possible that starts and ends with 1 and filled with 0 in the middle
Prefix array to store the occurences of '1' and '0' Initialise prefix arrays with 0
Iterate over the length of the string
If current character is '1
Add '1' available for the first string
Add '0' available for the second string
Add '1' available for the third string
Update answer
Print the final result
Driver Code
Python3 implementation to find the largest square in the matrix such that it contains at most K 1 's 
Function to calculate the largest square with atmost K 1 s for Q queries
Loop to solve for each query
Traversing the each sub square and counting total
Breaks when exceeds the maximum count
Driver Code
Function to find the largest square in the matrix such that it contains atmost K 1 's 
Precomputing the countDP prefix sum of the matrix
Loop to solve Queries
Calculating the maximum possible distance of the centre from edge
Calculating the number of 1 s in the submatrix
Driver Code
Function to return the minimum cost to connect the given ropes
dp [ i ] [ j ] = minimum cost in range ( i , j ) sum [ i ] [ j ] = sum of range ( i , j )
Initializing the sum table memset ( sum , 0 , sizeof ( 0 ) ) ;
Computing minimum cost for all the possible interval ( i , j ) Left range
Right range
No cost for a single rope
Driver code
Function to recursively fill the dp array
If f ( i , state ) is already calculated then return the value
Calculate f ( i , state ) according to the recurrence relation and store in dp [ ] [ ]
Function that calls the resucrsive function to fill the dp array and then returns the result
dp [ ] [ ] array for storing result of f ( i , 1 ) and f ( 1 , 2 ) Populating the array dp [ ] with - 1
Make sure that longest UD and DU sequence starting at each index is calculated
Assume the answer to be - 1 This value will only increase
y is the length of the longest UD sequence starting at i
If length is even then add an integer and then a DU sequence starting at i + y
If length is odd then add an integer and then a UD sequence starting at i + y
Driver Code
Python3 implementation of the above approach
Function to return the maximized gcd after removing a single element from the given array
Prefix and Suffix arrays
Single state dynamic programming relation for storing gcd of first i elements from the left in Prefix [ i ]
Initializing Suffix array
Single state dynamic programming relation for storing gcd of all the elements having greater than or equal to i in Suffix [ i ]
If first or last element of the array has to be removed
If any other element is replaced
Return the maximized gcd
Driver code
Python3 implementation of the approach
Function to find the maximum subarray sum with flips starting from index i
If the number of flips have exceeded
Complete traversal
If the state has previously been visited
Initially
Use Kadane 's algorithm and  call two states
Memoize the answer and return it
Utility function to call flips from index and return the answer
Create DP array int dp [ n , k + 1 ]
Iterate and call recursive function from every index to get the maximum subarray sum
corner casae
Driver Code
Python3 program to Find the sum of first N odd Fibonacci numbers
Function to calculate sum of first N odd Fibonacci numbers
base values
Driver code
Python implementation of the above approach
Initializing one tablet for each student
if left adjacent is having higher marks review and change all the dp values assigned before until assigned dp values are found wrong according to given constrains
if right adjacent is having higher marks add one in dp of left adjacent and assign to right one
n number of students
marks of students
solution of problem
Python3 program to reach N - th stair by taking a maximum of K leap
elements of combo [ ] stores the no of possible ways to reach it by all combinations of k leaps or less
assuming leap 0 exist and assigning its value to 1 for calculation
loop to iterate over all possible leaps upto k ;
in this loop we count all possible leaps to reach the jth stair with the help of ith leap or less
if the leap is not more than the i - j
calculate the value and store in combo [ j ] to reuse it for next leap calculation for the jth stair
returns the no of possible number of leaps to reach the top of building of n stairs
Driver Code
N i the no of total stairs K is the value of the greatest leap
Utility method to find LIS using Dynamic programming
Initialize LIS values for all indexes
Compute optimized LIS values in bottom up manner
Set j on the basis of current window i . e . first element of the current window
Pick maximum of all LIS values
Function to find Longest Increasing subsequence in Circular manner
Make a copy of given array by appending same array elements to itself
Perform LIS for each window of size n
Driver code
Function to find binomial Coefficient
Constructing Pascal 's Triangle
Driver Code
Returns the length and the LCIS of two arrays arr1 [ 0. . n - 1 ] and arr2 [ 0. . m - 1 ]
table [ j ] is going to store length of LCIS ending with arr2 [ j ] . We initialize it as 0 ,
Traverse all elements of arr1 [ ]
Initialize current length of LCIS
For each element of arr1 [ ] , traverse all elements of arr2 [ ] .
If both the array have same elements . Note that we don 't break the loop here.
Now seek for previous smaller common element for current element of arr1
The maximum value in table [ ] is out result
Driver Code
Python3 program to implement the above approach
Function to get the length of the longest common prefix by rearranging the strings
freq [ i ] [ j ] : stores the frequency of a character ( = j ) in a arr [ i ]
Traverse the given array
Stores length of current string
Traverse current string of the given array
Update the value of freq [ i ] [ arr [ i ] [ j ] ]
Stores the length of longest common prefix
Count the minimum frequency of each character in in all the strings of arr [ ]
Stores minimum value in each row of freq [ ] [ ]
Calculate minimum frequency of current character in all the strings .
Update minRowVal
Update maxLen
Driver Code
Python 3 program to remove characters from a String that appears exactly K times
Function to reduce the string by removing the characters which appears exactly k times
Hash table initialised to 0
Increment the frequency of the character
To store answer
Next index in reduced string
Append the characters which appears exactly k times
Driver code
Function call
Function that prints the segments
New array for every iteration
Check if the character is in the array
Driver code
Function to find the encrypted string
to store the encrypted string
after ' z ' , it should go to a .
Driver code
Function to compare two strings ignoring their cases
length of first string
length of second string
if length is not same simply return false since both string can not be same if length is not equal
loop to match one by one all characters of both string
if current characters of both string are same , increase value of i to compare next character
if any character of first string is some special character or numeric character and not same as corresponding character of second string then return false
do the same for second string
this block of code will be executed if characters of both strings are of different cases
compare characters by ASCII value
if characters matched , increase the value of i to compare next char
if all characters of the first string are matched with corresponding characters of the second string , then return true
Function to print the same or not same if strings are equal or not equal
Driver Code
Function to return the maximized value of A
Sort digits in ascending order
j points to largest digit in B
If all the digits of b have been used
Current digit has been used
Return the maximized value
Driver code
Function to check if all of the digits in a number and it 's product with q are unequal or not
convert first number into string
Insert elements from 1 st number to hash
Calculate corresponding product
Convert the product to string
Using the hash check if any digit of product matches with the digits of input number
If yes , return false
Return true
Function to count numbers in the range [ l , r ] such that all of the digits of the number and it 's product with q are unequal
check for every number between l and r
Driver Code
Function call
function to check the binary string
length of string
count zero 's
count one 's
if length is even
if length is odd
Driver code
Python3 program to count frequencies of array items
Create an array to store counts . The size of array is limit + 1 and all values are initially 0
Traverse through string characters and count frequencies
Function to store EVEN and odd variable
Store the count of even and odd set bit
Count the set bit using in built function
Count of set - bit of K
If y is odd then , count of even and odd set bit will be interchanged
Else it will remain same as the original array
Driver 's Code
Function call to count even and odd
Python program to convert given sentence to camel case .
Function to remove spaces and convert into camel case
check for spaces in the sentence
conversion into upper case
If not space , copy character
return string to main
Driver code
Python3 implementation to check if N is a Tcefrep number
Iterative function to reverse digits of num
Function to calculate sum of all proper divisors num -- > given natural number
Final result of summation of divisors
find all divisors which divides 'num
if ' i ' is divisor of 'num
if both divisors are same then add it only once else add both
Add 1 to the result as 1 is also a divisor
Given Number N
Function Call
Python3 program to find n - th number containing only 3 and 5.
If n is odd , append 3 and move to parent
If n is even , append 5 and move to parent
Reverse res and return .
Driver code
Python3 program to find n - th non - square number .
function to find the nth Non - Square Number
conversion from int to long double is necessary in order to preserve decimal places after square root .
calculating the result
initializing the term number
Print the result
Function to calculate series sum
Driver code
Function for checking if digit k is in n or not
finding remainder
if digit found
Function for finding nth number
since k is the first which satisfy th criteria , so consider it in count making count = 1 and starting from i = k + 1
checking that the number contain k digit or divisible by k
Driver code
Python3 program to implement the above approach
Save index of numbers of the array
Update min and max index with the current index and check if it 's a  valid permutation
Driver code
Function to return the count of the required integers
To store the gcd of the array elements
To store the count of factors of the found gcd
If g is a perfect square
Factors appear in pairs
Driver code
Function to find the minimum cost of removing characters to make the string unique
Stores the visited characters
Stores the answer
Traverse the string
If already visited
Stores the maximum cost of removing a particular character
Store the total deletion cost of a particular character
Mark the current character visited
Traverse the indices of the string [ i , N - 1 ]
If any duplicate is found
Update the maximum cost and total cost
Mark the current character visited
Keep the character with maximum cost and delete the rest
Return the minimum cost
Driver code Given string
input array
input array
Function Call
Function to find triplets such that replacing them with their XOR make all array elements equal
If N is even
Calculate xor of array elements
Traverse the array
Update xor
If xor is not equal to 0
Selecting the triplets such that elements of the pairs ( arr [ 0 ] , arr [ 1 ] ) , ( arr [ 2 ] , arr [ 3 ] ) . . . can be made equal
Selecting the triplets such that all array elements can be made equal to arr [ N - 1 ]
Selecting the triplets such that elements of the pairs ( arr [ 0 ] , arr [ 1 ] ) , ( arr [ 2 ] , arr [ 3 ] ) . . . can be made equal
Selecting the triplets such that all array elements can be made equal to arr [ N - 1 ]
Driver code
Given array
Size of array
Function call
Function to find minimum count of operations required to make all array elements even
Stores minimum count of replacements to make all array elements even
Stores the count of odd continuous numbers
Traverse the array
If arr [ i ] is an odd number
Update odd_cont_seg
If odd_cont_seg is even
Update res
Update res
Reset odd_cont_seg = 0
If odd_cont_seg exceeds 0
If odd_cont_seg is even
Update res
Update res
Prthe result
Drivers Code
Function to find K for which there are exactly K array elements greater than or equal to K
Finding the largest array element
Possible values of K
Traverse the array
If current array element is greater than or equal to i
If i array elements are greater than or equal to i
Otherwise
Driver Code
Function to find the lexicographically smallest anagram of string which contains another string
Initializing the dictionary and set
Iterating over s1
Storing the frequency of characters present in s1
Storing the distinct characters present in s1
Decreasing the frequency of characters from M that are already present in s2
Traversing alphabets in sorted order
If current character of set is not equal to current character of s2
If element is equal to current character of s2
Checking for second distinct character in s2
s2 [ j ] will store second distinct character
Return the answer
Function to find the lexicographically largest anagram of string which contains another string
Getting the lexicographically smallest anagram
d1 stores the prefix
d2 stores the suffix
Return the result
Given two strings
Function Calls
Python3 implementation for the above approach
Adjacency list to represent the tree
Number of vertices
Mark visited / unvisited vertices
Stores the subtree size of the corresponding nodes
Function to create an edge between two vertices
Add a to b 's list
Add b to a 's list
Function to perform DFS
Mark the vertex visited
Include the node in the subtree
Traverse all its children
Function to print the required number of paths
Driver Code
Number of vertices
Calling modified dfs function
Count pairs of vertices in the tree
Function to find the count of desired permutations
Base case
If i has not been inserted
Backtrack
Insert i
Recur to find valid permutations
Remove i
Return the final count
Driver Code
Function to check if it is possible to obtain sum Y from a sequence of sum X from the array arr [ ]
Store the difference
Iterate over the array
If diff reduced to 0
Driver Code
Python3 program to implement the above approach
Adjacency List to store the graph
Stores the height of each node
Stores the maximum distance of a node from its ancestors
Function to add edge between two vertices
Insert edge from u to v
Insert edge from v to u
Function to calculate height of each Node
Iterate in the adjacency list of the current node
Dfs for child node
Calculate height of nodes
Increase height
Function to calculate the maximum distance of a node from its ancestor
Iterate in the adjacency list of the current node
Find two children with maximum heights
Calculate the maximum distance with ancestor for every node
Calculating for children
Driver Code
Calculate height of nodes of the tree
Calculate the maximum distance with ancestors
Print the maximum of the two distances from each node
Python3 program to find middle of three distinct numbers
Function to find the middle of three number
Checking for b
Checking for a
Driver Code
Function to implement the selection sort
One by one move boundary of unsorted subarray
Find the minimum element in unsorted array
Swap the found minimum element with the first element
Function to print an array
Driver Code
Function Call
Print the array
Python3 program to implement the above approach
Stores length of str1
Stores length of str2
Stores distinct characters of str1
Stores distinct characters of str2
Stores frequency of each character of str1
Traverse the string str1
Update frequency of str1 [ i ]
Traverse the string str1
Insert str1 [ i ] into st1
Traverse the string str2
Insert str1 [ i ] into st1
If distinct characters in str1 and str2 are not same
Stores frequency of each character of str2
Traverse the string str2
Update frequency of str2 [ i ]
Sort hash1 [ ] array
Sort hash2 [ ] array
Traverse hash1 [ ] and hash2 [ ]
If hash1 [ i ] not equal to hash2 [ i ]
Driver Code
Function to sort the elements of the array from index a to index b
Variables to store start and end of the index range
Print the modified array
Driver code
A Dynamic Programming based solution to find min cost to reach station N - 1 from station 0.
This function returns the smallest possible cost to reach station N - 1 from station 0.
dist [ i ] stores minimum cost to reach station i from station 0.
Go through every station and check if using it as an intermediate station gives better path
Driver program to test above function
Return the Number of ways from a node to make a loop of size K in undirected complete connected graph of N nodes
Driver code
Function that return the largest alphabet
Initializing max alphabet to 'a
Find largest alphabet
Returning largest element
Function that return the smallest alphabet
Initializing smallest alphabet to 'z
Find smallest alphabet
Returning smallest alphabet
Driver code
Character array
Calculating size of the string
Calling functions and print returned value
Returns maximum possible palindrome using k changes
Initialize l and r by leftmost and rightmost ends
first try to make palindrome
Replace left and right character by maximum of both
If k is negative then we can 't make  palindrome
At mid character , if K > 0 then change it to 9
If character at lth ( same as rth ) is less than 9
If none of them is changed in the previous loop then subtract 2 from K and convert both to 9
If one of them is changed in the previous loop then subtract 1 from K ( 1 more is subtracted already ) and make them 9
Driver code
Function to find the number of triplets whose Bitwise AND is 0.
Stores the count of triplets having bitwise AND equal to 0
Stores frequencies of all possible A [ i ] & A [ j ]
Traverse the array
Update frequency of Bitwise AND of all array elements with a
Traverse the array
Iterate the map
If bitwise AND of triplet is zero , increment cnt
Return the number of triplets whose Bitwise AND is 0.
Driver Code
Input Array
Function Call
Python3 implementation of above approach
Recursive function to calculate minimum adjacent pairs with different parity
If all the numbers are placed
If replacement is not required
If replacement is required
backtracking
backtracking
Function to display the minimum number of adjacent elements with different parity
Store no of even numbers not present in the array
Store no of odd numbers not present in the array
Erase exisiting numbers
Store non - exisiting even and odd numbers
Driver code
Python3 implementation of the approach
To store the required nodes
Parent array to retrace the nodes
Visited array to prevent DFS in direction on Diameter path
DFS function to find the startnode
DFS function to find the endnode of diameter and maintain the parent array
DFS function to find the end node of the Longest Branch to Diameter
Function to find the required nodes
To find start node of diameter
To find end node of diameter
x is the end node of diameter
Mark all the nodes on diameter using back tracking
Find the end node of longest branch to diameter
Driver code
Python3 program to find percentage increase in the volume of the sphere if radius is increased by a given percentage
Driver code
Python3 program to find the length chord of the circle whose radius and the angle subtended at the centre is also given
Function to find the length of the chord
Driver code
Python3 Program to find the area of the square inscribed within the circle which in turn is inscribed in an equilateral triangle
Function to find the area of the square
a cannot be negative
area of the square
Driver code
Python 3 program to find the longest rod that can fit in a cuboid
Function to find the length
temporary variable to hold the intermediate result
length of longest rod is calculated using square root function
Driver Code
calling longestRodInCuboid ( ) function to get the length of longest rod
function to Check whether a given point lies inside or on the rectangle or not
Driver code
Return the maximum volume .
for length
for breadth
for height
calculating maximum volume .
Driven Program
Return the maximum volume .
finding length
finding breadth
finding height
Driven Program
Python3 program to find area of a Hexagon
Function for calculating area of the hexagon .
Driver code
length of a side .
function for finding max squares
return in O ( 1 ) with derived formula
driver program
Python program to check existence of right triangle .
Prints three sides of a right triangle from given area and hypotenuse if triangle is possible , else prints - 1.
Descriminant of the equation
applying the linear equation formula to find both the roots
Driver code Area is 6 and hypotenuse is 5.
Python3 program to count number of 2 x 2 squares in a right isosceles triangle
removing the extra part we would always need
Since each square has base of length of 2
Driver code
Function to find the Bitwise OR of Bitwise AND of all possible subarrays after performing the every query
Traversing each pair of the query
Stores the Bitwise OR
Updating the array
Find the Bitwise OR of new updated array
Print the ans
Driver Code
Function to form the smallest number possible
Array to mark the remainders counted already
Iterate over the range
If that remainder is already found , return - 1
Driver Code
Function to find fibonacci number
Function for finding number of vertices in fibonacci cube graph
return fibonacci number for f ( n + 2 )
Driver Code
Python3 program for the above approach
Function to check if it is possible to modify the array such that there is no common factor between array elements except 1
Stores GCD of the array
Calculate GCD of the array
If the current divisor is smaller than X
Divide GCD by the current divisor
If possible
Print the modified array
Otherwise
Driver Code
Given array
Size of the array
Node of a doubly linked list
Function to reverse a Doubly Linked List
swap next and prev for all nodes of doubly linked list
Before changing head , check for the cases like empty list and list with only one node
Function to merge two sorted doubly linked lists
If first linked list is empty
If second linked list is empty
Pick the smaller value
function to sort a biotonic doubly linked list
if list is empty or if it contains a single node only
if true , then ' current ' is the first node which is smaller than its previous node
move to the next node
if true , then list is already sorted
spilt into two lists , one starting with ' head ' and other starting with ' current '
reverse the list starting with ' current '
merge the two lists and return the final merged doubly linked list
Function to insert a node at the beginning of the Doubly Linked List
allocate node
put in the data
since we are adding at the beginning , prev is always None
link the old list off the new node
change prev of head node to new node
move the head to point to the new node
Function to print nodes in a given doubly linked list
if list is empty
Driver Code
Create the doubly linked list : 2 < .5 < .7 < .12 < .10 < .6 < .4 < .1
sort the biotonic DLL
A linked list node
Utility function to print the linked list
Utility function for checking vowel
function to arrange consonants and vowels nodes
for keep track of vowel
list is empty
We need to discover the first vowel in the list . It is going to be the returned head , and also the initial latestVowel .
first element is a vowel . It will also be the new head and the initial latestVowel
First element is not a vowel . Iterate through the list until we find a vowel . Note that curr points to the element * before * the element with the vowel .
This is an edge case where there are only consonants in the list .
Set the initial latestVowel and the new head to the vowel item that we found . Relink the chain of consonants after that vowel item : old_head_consonant . consonant1 . consonant2 . vowel . rest_of_list becomes vowel . old_head_consonant . consonant1 . consonant2 . rest_of_list
Now traverse the list . Curr is always the item * before * the one we are checking , so that we can use it to re - link .
The next discovered item is a vowel
If it comes directly after the previous vowel , we don 't need to  move items around, just mark the  new latestVowel and advance curr.
But if it comes after an intervening chain of consonants , we need to chain the newly discovered vowel right after the old vowel . Curr is not changed as after the re - linking it will have a new next , that has not been checked yet , and we always keep curr at one before the next to check .
Chain in new vowel
Advance latestVowel
Remove found vowel from previous place
Re - link chain of consonants after latestVowel
No vowel in the next element , advance curr .
Driver code
helper function to create a new Node
count variable to keep count of visited Nodes
if right child is None
first increment count and check if count = k
otherwise move to the left child
find inorder successor of current Node
set left child of successor to the current Node
move current to its right
restoring the tree back to original binary search tree removing threaded links
move current to its left child
Driver Code
Constructed binary tree is 4 / \ 2 7 / \ / \ 1 3 6 10
Python implementation to sort the rows of matrix in ascending order followed by sorting the columns in descending order
function to sort each row of the matrix according to the order specified by ascending .
function to find transpose of the matrix
swapping element at index ( i , j ) by element at index ( j , i )
function to sort the matrix row - wise and column - wise
sort rows of mat [ ] [ ]
get transpose of mat [ ] [ ]
again sort rows of mat [ ] [ ] in descending order .
again get transpose of mat [ ] [ ]
function to print the matrix
Driver code
Python 3 implementation to sort the matrix row - wise and column - wise
function to sort each row of the matrix
sorting row number 'i  
function to find transpose of the matrix
swapping element at index ( i , j ) by element at index ( j , i )
function to sort the matrix row - wise and column - wise
sort rows of mat [ ] [ ]
get transpose of mat [ ] [ ]
again sort rows of mat [ ] [ ]
again get transpose of mat [ ] [ ]
function to print the matrix
Driver Code
Function for calculating Magic square
2 - D matrix with all entries as 0
Change value of array elements at fix location as per the rule ( n * n + 1 ) - arr [ i ] [ [ j ] Corners of order ( n / 4 ) * ( n / 4 ) Top left corner
Top right corner
Bottom Left corner
Bottom Right corner
Centre of matrix , order ( n / 2 ) * ( n / 2 )
Printing the square
Driver Program
Function call
rowa and cola are no of rows and columns of matrix A rowb and colb are no of rows and columns of matrix B
Function to computes the Kronecker Product of two matrices
i loops till rowa
k loops till rowb
j loops till cola
l loops till colb
Each element of matrix A is multiplied by whole Matrix B resp and stored as Matrix C
Driver code .
Function to check matrix is in lower triangular
Driver function .
Function call
Function to check matrix is in upper triangular
Driver function .
no of columns
no of rows
function to calculate the number of non empty sets of cell
stores the final answer
traverses row - wise
traverses column wise
at the end subtract n * m as no of single sets have been added twice .
Driver program to test the above function .
Fills transpose of mat [ N ] [ N ] in tr [ N ] [ N ]
Returns true if mat [ N ] [ N ] is symmetric , else false
Driver code
Returns true if mat [ N ] [ N ] is symmetric , else false
Driver code
Python3 program to find trace and normal of given matrix
Size of given matrix
Returns Normal of a matrix of size n x n
Returns trace of a matrix of size n x n
Driver Code
Function for maximum determinant
Function to print resulatant matrix
three position where 0 appears
position where n appears
Driver code
Python implementation of Naive method to count of negative numbers in M [ n ] [ m ]
Follow the path shown using arrows above
no more negative numbers in this row
Driver code
Function to count negative number
initialize result
Start with top right corner
Follow the path shown using arrows above
j is the index of the last negative number in this row . So there must be ( j + 1 )
negative numbers in this row .
move to the left and see if we can find a negative number there
Driver code
Recursive binary search to get last negative value in a row between a start and an end
Base case
Get the mid for binary search
If current element is negative
If it is the rightmost negative element in the current row
Check in the right half of the array
Check in the left half of the array
Function to return the count of negative numbers in the given matrix
Initialize result
To store the index of the rightmost negative element in the row under consideration
Iterate over all rows of the matrix
If the first element of the current row is positive then there will be no negatives in the matrix below or after it
Run binary search only until the index of last negative Integer in the above row
Driver code
A Naive method to find maximum value of mat [ d ] [ e ] - mat [ a ] [ b ] such that d > a and e > b
The function returns maximum value A ( d , e ) - A ( a , b ) over all choices of indexes such that both d > a and e > b .
stores maximum value
Consider all possible pairs mat [ a ] [ b ] and mat [ d ] [ e ]
Driver Code
An efficient method to find maximum value of mat [ d ] - ma [ a ] [ b ] such that c > a and d > b
The function returns maximum value A ( c , d ) - A ( a , b ) over all choices of indexes such that both c > a and d > b .
stores maximum value
maxArr [ i ] [ j ] stores max of elements in matrix from ( i , j ) to ( N - 1 , N - 1 )
last element of maxArr will be same 's as of the input matrix
preprocess last row Initialize max
preprocess last column Initialize max
preprocess rest of the matrix from bottom
Update maxValue
set maxArr ( i , j )
Driver Code
Python 3 program to Print all elements in sorted order from row and column wise sorted matrix
A utility function to youngify a Young Tableau . This is different from standard youngify . It assumes that the value at mat [ 0 ] [ 0 ] is infinite .
Find the values at down and right sides of mat [ i ] [ j ]
If mat [ i ] [ j ] is the down right corner element , return
Move the smaller of two values ( downVal and rightVal ) to mat [ i ] [ j ] and recur for smaller value
A utility function to extract minimum element from Young tableau
This function uses extractMin ( ) to print elements in sorted order
Driver Code
size k x k Size of given matrix
A simple function to find sum of all sub - squares of size k x k in a given square matrix of size n x n
k must be smaller than or equal to n
row number of first cell in current sub - square of size k x k
column of first cell in current sub - square of size k x k
Calculate and print sum of current sub - square
Line separator for sub - squares starting with next row
Driver Code
Size of given matrix
A O ( n ^ 2 ) function to find sum of all sub - squares of size k x k in a given square matrix of size n x n
k must be smaller than or equal to n
1 : PREPROCESSING To store sums of all strips of size k x 1
Go column by column
Calculate sum of first k x 1 rectangle in this column
Calculate sum of remaining rectangles
2 : CALCULATE SUM of Sub - Squares using stripSum [ ] [ ]
Calculate and prsum of first subsquare in this row
Calculate sum of remaining squares in current row by removing the leftmost strip of previous sub - square and adding a new strip
Driver Code
Python3 Program to find transpose of a matrix
This function stores transpose of A [ ] [ ] in B [ ] [ ]
driver code
Python3 Program to find transpose of a matrix
Finds transpose of A [ ] [ ] in - place
driver code
A Naive Recursive Python program to count paths with exactly ' k ' coins
Recursive function to count paths with sum k from ( 0 , 0 ) to ( m , n )
Base cases
( m , n ) can be reached either through ( m - 1 , n ) or through ( m , n - 1 )
A wrapper over pathCountRec ( )
Driver Program
A Dynamic Programming based Python3 program to count paths with exactly ' k ' coins
Base cases
If this subproblem is already solved
( m , n ) can be reached either through ( m - 1 , n ) or through ( m , n - 1 )
A wrapper over pathCountDPRecDP ( )
Driver Code
Python3 implementation to sort the given matrix
Function to sort the given matrix
Temporary matrix of size n ^ 2
Copy the elements of matrix one by one into temp [ ]
sort temp [ ]
copy the elements of temp [ ] one by one in mat [ ] [ ]
Function to print the given matrix
Driver program to test above
An optimized version of Bubble Sort
traverse the array from 0 to n - i - 1. Swap if the element found is greater than the next element
IF no two elements were swapped by inner loop , then break
Driver code to test above
Function to find the cross over point ( the point before which elements aresmaller than or equal to x and afterwhich greater than x )
Base cases x is greater than all
x is smaller than all
Find the middle point
If x is same as middle element , then return mid
If x is greater than arr [ mid ] , then either arr [ mid + 1 ] is ceiling of x or ceiling lies in arr [ mid + 1. . . high ]
This function prints k closest elements to x in arr [ ] . n is the number of elements in arr [ ]
Find the crossover point
Right index to search
To keep track of count of elements already printed
If x is present in arr [ ] , then reduce left index . Assumption : all elements in arr [ ] are distinct
Compare elements on left and right of crossover point to find the k closest elements
If there are no more elements on right side , then print left elements
If there are no more elements on left side , then print right elements
Driver Code
Pyhton implementation of above algorithm
A utility function to insert a node at the beginning of linked list
allocate node
link the old list off the new node
move the head to point to the new node
function to sort a singly linked list using insertion sort
Initialize sorted linked list
Traverse the given linked list and insert every node to sorted
Store next for next iteration
insert current in sorted linked list
Update current
Update head_ref to point to sorted linked list
function to insert a new_node in a list . Note that this function expects a pointer to head_ref as this can modify the head of the input linked list ( similar to push ( ) )
Special case for the head end
Locate the node before the point of insertion
BELOW FUNCTIONS ARE JUST UTILITY TO TEST sortedInsert Function to print linked list
Driver program to test above functions
Returns the count of ways we can sum S [ 0. . . m - 1 ] coins to get sum n
If n is 0 then there is 1 solution ( do not include any coin )
If n is less than 0 then no solution exists
If there are no coins and n is greater than 0 , then no solution exist
count is sum of solutions ( i ) including S [ m - 1 ] ( ii ) excluding S [ m - 1 ]
Driver program to test above function
Dynamic Programming Python implementation of Coin Change problem
table [ i ] will be storing the number of solutions for value i . We need n + 1 rows as the table is constructed in bottom up manner using the base case ( n = 0 ) Initialize all table values as 0
Base case ( If given value is 0 )
Pick all coins one by one and update the table [ ] values after the index greater than or equal to the value of the picked coin
Driver program to test above function
Python program using memoization
Function for matrix chain multiplication
Driver Code
Dynamic Programming Python implementation of Matrix Chain Multiplication . See the Cormen book for details of the following algorithm
Matrix Ai has dimension p [ i - 1 ] x p [ i ] for i = 1. . n
For simplicity of the program , one extra row and one extra column are allocated in m [ ] [ ] . 0 th row and 0 th column of m [ ] [ ] are not used
cost is zero when multiplying one matrix .
L is chain length .
q = cost / scalar multiplications
Driver code
A Naive recursive solution for Rod cutting problem
A utility function to get the maximum of two integers
Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces
Recursively cut the rod in different pieces and compare different configurations
Driver code
A Dynamic Programming solution for Rod cutting problem
Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces
Build the table val [ ] in bottom up manner and return the last entry from the table
Driver program to test above functions
Function to multiply two numbers x and y
0 multiplied with anything gives 0
Add x one by one
The case where y is negative
Driver code
Python program to print all primes smaller than or equal to n using Sieve of Eratosthenes
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Print all prime numbers
Driver code
binomialCoeff
A simple O ( n ^ 3 ) program for Pascal ' s ▁ Triangle ▁ Function ▁ to ▁ print ▁ first ▁ n ▁ lines ▁ of ▁ Pascal ' s Triangle
Iterate through every line and print entries in it
Every line has number of integers equal to line number
Driver program
A O ( n ^ 2 ) time and O ( n ^ 2 ) extra space method for Pascal 's Triangle
An auxiliary array to store generated pascal triangle values
Iterate through every line and print integer ( s ) in it
Every line has number of integers equal to line number
First and last values in every row are 1
Other values are sum of values just above and left of above
Driver Code
Python3 program for Pascal ' s ▁ Triangle ▁ A ▁ O ( n ^ 2 ) ▁ time ▁ and ▁ O ( 1 ) ▁ extra ▁ space ▁ method ▁ for ▁ Pascal ' s Triangle Pascal function
used to represent C ( line , i )
The first value in a line is always 1
Driver code
Python3 Program to add two numbers without using arithmetic operator
Iterate till there is no carry
carry now contains common set bits of x and y
Sum of bits of x and y where at least one of the bits is not set
Carry is shifted by one so that adding it to x gives the required sum
Driver Code
This function will return n % d . d must be one of : 1 , 2 , 4 , 8 , 16 , 32 , ...
Driver program to test above function
d must be a power of 2
Function to get no of set bits in binary representation of positive integer n
Program to test function countSetBits
recursive function to count set bits
base case
Get value from user
function calling
Lookup table
Function to initialise the lookup table
To initially generate the table algorithmically
Function to return the count of set bits in n
Initialise the lookup table
Driver code
Python3 program to count set bits by pre - storing count set bits in nibbles .
Recursively get nibble of a given number and map them in the array
Find last nibble
Use pre - stored values to find count in last nibble plus recursively add remaining nibbles .
Driver code
Check each bit in a number is set or not and return the total count of the set bits
( 1 << i ) = pow ( 2 , i )
Driver code
Function to get parity of number n . It returns 1 if n has odd parity , and returns 0 if n has even parity
Driver program to test getParity ( )
Python3 Program to find whether a no is power of two
Function to check Log base 2
Function to check if x is power of 2
Driver Code
Function to check if x is power of 2
Driver code
function which checks whether a number is a power of 2
base cases '1' is the only odd number which is a power of 2 ( 2 ^ 0 )
all other odd numbers are not powers of 2
recursive function call
Driver Code
True
False
Function to check if x is power of 2
First x in the below expression is for the case when x is 0
Driver code
Returns maximum repeating element in arr [ 0. . n - 1 ] . The array elements are in range from 0 to k - 1
Iterate though input array , for every element arr [ i ] , increment arr [ arr [ i ] % k ] by k
Find index of the maximum repeating element
Return index of the maximum element
Driver program to test above function
function return derived formula value .
finding xor value of range [ y ... x ]
function to solve query for l and r .
if l or r is 0.
finding x is divisible by 2 or not .
Driver Code
Precompute the prefix XOR of greatest odd divisor
Finding the Greatest Odd divisor
Finding prefix XOR
Return XOR of the range
Driver Code
Function to find minimum swaps to sort an array of 0 s and 1 s .
Array to store count of zeroes
Count number of zeroes on right side of every one .
Count total number of swaps by adding number of zeroes on right side of every one .
Driver code
Driver Code
Function that returns true if array is sorted in non - decreasing order .
Array has one or no element
Unsorted pair found
No unsorted pair found
Driver code
Prints two numbers that occur odd number of times . The function assumes that the array size is at least 2 and there are exactly two numbers occurring odd number of times .
Will hold XOR of two odd occurring elements
Will have only single set bit of xor2
Get the xor of all elements in arr [ ] . The xor will basically be xor of two odd occurring elements
Get one set bit in the xor2 . We get rightmost set bit in the following line as it is easy to get
Now divide elements in two sets : 1 ) The elements having the corresponding bit as 1. 2 ) The elements having the corresponding bit as 0.
XOR of first set is finally going to hold one odd occurring number x
XOR of second set is finally going to hold the other odd occurring number y
Driver Code
The function assumes that the array is sorted
Initialize positions of two elements
Search for a pair
Driver function to test above function
Function to pr m Maximum elements
vector to store the copy of the original array
Sorting the vector in descending order . Please refer below link for details
Traversing through original array and pring all those elements that are in first k of sorted vector .
Driver code
Function for binary_search
Function to print smallest n numbers
Make copy of array
Sort copy array
For each arr [ i ] find whether it is a part of n - smallest with binary search
Driver Code
Returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression
Sort array
After sorting , difference between consecutive elements must be same .
Driver code
Returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression
Find the smallest and and update second smallest
Find second smallest
Check if the duplicate element found or not
If duplicate found then return false
Find the difference between smallest and second smallest
As we have used smallest and second smallest , so we should now only check for n - 2 elements
Driver code
Python Code to find no . of Ways of choosing a pair with maximum difference
To find minimum and maximum of the array
to find the count of minimum and maximum elements
Count variables
condition for all elements equal
Driver code
Python3 code to rearrange linked list in place
Function for rearranging a linked list with high and low value
Base case
Two pointer variable
Swap function for swapping data
Swap function for swapping data
Function to insert a node in the linked list at the beginning
Function to display node of linked list
Driver code
Let create a linked list 9 . 6 . 8 . 3 . 7
Python3 implementation
Function to print the list
Function to rearrange
We set left = null , when we reach stop condition , so no processing required after that
Stop condition : odd case : left = right , even case : left . next = right
Stop condition , set null to left nodes
Even case
Odd case
Driver code
Print original list
Modify the list
Print modified list
A linked List Node
A utility function to get length of linked list
A Utility that padds zeros in front of the Node , with the given diff
Subtract LinkedList Helper is a recursive function , move till the last Node , and subtract the digits and create the Node and return the Node . If d1 < d2 , we borrow the number from previous digit .
if you have given the value value to next digit then reduce the d1 by 1
If d1 < d2 , then borrow the number from previous digit . Add 10 to d1 and set borrow = True
subtract the digits
Create a Node with sub value
Set the Next pointer as Previous
This API subtracts two linked lists and returns the linked list which shall have the subtracted result .
Base Case .
In either of the case , get the lengths of both Linked list .
If lengths differ , calculate the smaller Node and padd zeros for smaller Node and ensure both larger Node and smaller Node has equal length .
If both list lengths are equal , then calculate the larger and smaller list . If 5 - 6 - 7 & 5 - 6 - 8 are linked list , then walk through linked list at last Node as 7 < 8 , larger Node is 5 - 6 - 8 and smaller Node is 5 - 6 - 7.
After calculating larger and smaller Node , call subtractLinkedListHelper which returns the subtracted linked list .
A utility function to print linked list
Driver program to test above functions
Node class
constructor to create a new node
function to insert node at the middle of linked list given the head
if the list is empty
create a new node for the value to be inserted
calcualte the length of the linked list
' count ' the number of node after which the new node has to be inserted
move ptr to the node after which the new node has to inserted
insert the ' newNode ' and adjust links accordingly
function to displat the linked list
Creating the linked list 1.2 . 4.5
inserting 3 in the middle of the linked list .
Node of a doubly linked list
function to create and return a new node of a doubly linked list
allocate node
put in the data
function to insert a new node in sorted way in a sorted doubly linked list
if list is empty
if the node is to be inserted at the beginning of the doubly linked list
locate the node after which the new node is to be inserted
Make the appropriate links
if the new node is not inserted at the end of the list
function to sort a doubly linked list using insertion sort
Initialize ' sorted ' - a sorted doubly linked list
Traverse the given doubly linked list and insert every node to 'sorted  
Store next for next iteration
removing all the links so as to create ' current ' as a new node for insertion
insert current in ' sorted ' doubly linked list
Update current
Update head_ref to point to sorted doubly linked list
function to print the doubly linked list
function to insert a node at the beginning of the doubly linked list
allocate node
put in the data
Make next of new node as head and previous as None
change prev of head node to new node
move the head to point to the new node
Driver Code
start with the empty doubly linked list
insert the following data
Function to reverse array between indices s and e
Function to generate all possible rotations of array
Driver Code
Python3 program to find Bitwise OR of two equal halves of an array after performing K right circular shifts
Array for storing the segment tree
Function to build the segment tree
Function to return the OR of elements in the range [ l , r ]
Check for out of bound condition
Find middle of the range
Recurse for all the elements in array
Function to find the OR sum
Function to build the segment Tree
Loop to handle q queries
Effective number of right circular shifts
OR of second half of the array [ n / 2 - i , n - 1 - i ]
OR of first half of the array [ n - i , n - 1 ] OR [ 0 , n / 2 - 1 - i ]
Print final answer to the query
Driver Code
Function that prints maximum equal elements
List to store the index of elements of array b
Storing the positions of array B
Frequency array to keep count of elements with similar difference in distances
Iterate through all element in arr1 [ ]
Calculate number of shift required to make current element equal
If d is less than 0
Store the frequency of current diff
Compute the maximum frequency stored
Printing the maximum number of equal elements
Driver Code
Given two arrays
Function Call
Function to rightRotate array
If rotation is greater than size of array
Printing rightmost kth elements
Prints array after ' k ' elements
Driver code
Function to restore the Original Sort
In reverse ( ) , the first parameter is iterator to beginning element and second parameter is iterator to last element plus one .
Function to print the Array
Driver code
Function to find start index of array
Function to restore the Original Sort
array is already sorted
In reverse ( ) , the first parameter is iterator to beginning element and second parameter is iterator to last element plus one .
Function to print the Array
Driver code
In - place rotates s towards left by d
In - place rotates s towards right by d
Driver code
Python3 program to illustrate inserting a Node in a Cicular Doubly Linked list in begging , end and middle
Structure of a Node
Function to insert a node at the end
If the list is empty , create a single node circular and doubly list
Find last node
Create Node dynamically
Start is going to be next of new_node
Make new node previous of start
Make last preivous of new node
Make new node next of old last
Function to display the circular doubly linked list
Function to search the particular element from the list
Declare the temp variable
Declare other control variable for the searching
If start is None return - 1
Move the temp pointer until , temp . next doesn 't move  start address (Circular Fashion)
Increment count for location
If it is found raise the flag and break the loop
Increment temp pointer
Check whether last element in the list content the value if contain , raise a flag and increment count
If flag is true , then element found , else not
Driver code
Start with the empty list
Insert 4. So linked list becomes 4. None
Insert 5. So linked list becomes 4.5
Insert 7. So linked list becomes 4.5 . 7
Insert 8. So linked list becomes 4.5 . 7.8
Insert 6. So linked list becomes 4.5 . 7.8 . 6
Python3 implementation to revesre a doubly circular linked list
structure of a node of linked list
function to create and return a new node
Function to insert at the end
If the list is empty , create a single node circular and doubly list
Find last node
Start is going to be next of new_node
Make new node previous of start
Make last preivous of new node
Make new node next of old last
Uitlity function to revesre a doubly circular linked list
Initialize a new head pointer
get pointer to the the last node
set ' curr ' to last node
traverse list in backward direction
insert ' curr ' at the end of the list starting with the ' new _ head ' pointer
head pointer of the reversed list
function to display a doubly circular list in forward and backward direction
Driver Code
Python3 implementation to find LCA in a tree
stores depth for each node
stores first parent for each node
marking parent for each node
marking depth for each node
propogating marking down the tree
a dummy node
precalculating 1 ) depth . 2 ) parent . for each node
Time Complexity : O ( Height of tree ) recursively jumps one node above till both the nodes become equal
Driver code
adding edges to the tree
Driver code
Formula for number of trails for N consecutive heads
Function to return the count of numbers which are divisible by both A and B in the range [ 1 , N ] in constant time
Compute the count of numbers divisible by A in the range [ 1 , N ]
Compute the count of numbers divisible by B in the range [ 1 , N ]
Adding the counts which are divisible by A and B
The above value might contain repeated values which are divisible by both A and B . Therefore , the count of numbers which are divisible by both A and B are found
The count computed above is subtracted to compute the final count
Function to return the sum of numbers which are divisible by both A and B in the range [ 1 , N ]
Set to store the numbers so that the numbers are not repeated
For loop to find the numbers which are divisible by A and insert them into the set
For loop to find the numbers which are divisible by A and insert them into the set
For loop to iterate through the set and find the sum
Driver code
Function to return the value of the given expression
Value of the first term
Value of the last term
Driver code
Get the result
Python3 implementation of the approach
To store the pre - computed integers
Function that returns true if the binary representation of x contains consecutive 1 s
To store the previous bit
Check whether the previous bit and the current bit are both 1
Update previous bit
Go to the next bit
Function to pre - compute the valid numbers from 0 to MAX
Store all the numbers which do not have consecutive 1 s
Function to return the minimum number greater than n which does not contain consecutive 1 s
Search for the next greater element with no consecutive 1 s
Function to perform the queries
Driver code
Pre - compute the numbers
Perform the queries
Function to return the number of operations required
ctr will store the number of consecutive ones at the end of the given binary string
Loop to find number of 1 s at the end of the string
If the current character is 1
If we encounter the first 0 from the LSB position then we 'll break the loop
Number of operations required is ( l - ctr )
Function to remove leading zeroes from the string
Loop until s [ i ] becomes not equal to 1
If we reach the end of the string , it means that string contains only 0 's
Return the string without leading zeros
Driver code
Removing the leading zeroes
Function to return the minimum deletions required
To store the frequency of the array elements
Store frequency of each element
To store the minimum deletions required
Value
It 's frequency
If number less than or equal to it 's frequency
Delete extra occurrences
Delete every occurrence of x
Driver code
Function to find maximum number of ABs
variable A , B , AB for count strings that end with ' A ' but not end with ' B ' , ' B ' but does not end with ' A ' and ' B ' and ends with ' A ' respectively .
' AB ' is already present in string before concatenate them
count of strings that begins with ' B ' and ends with 'A
count of strings that begins with ' B ' but does not end with 'A
count of strings that ends with ' A ' but not end with 'B
updating the value of ans and add extra count of 'AB
Driver Code
Function to return the minimum number of operations required
To store total operations required
First make all elements equal to x which are currenctly greater
Left scan the array
Update the current element such that neighbouring sum is < x
Driver code
Python3 implementation of the approach
Function to print the required numbers
Sum of first n natural numbers
Sum of squares of first n natural numbers
To store the sum and sum of squares of the array elements
Driver code
Function to find the whether the string temp starts with str or not
Base Case
Check for the corresponding characters in temp & str
Function to find lexicographic smallest string consisting of the string str as prefix
Sort the given array string arr [ ]
If the i - th string contains given string as a prefix , then print the result
If no string exists then return " - 1"
Driver Code
Function to rearrange the array
Stores the rearranged array
Stores whether the arrangement is possible or not
Update K with the position of K
Stores all elements lesser than and greater than in vector smaller and greater respectively
Traverse the array arr [ ]
If arr [ i ] is less than arr [ K ]
Else
Iterate unil low is less than or equal to high
Stores mid point
If mid is equal to K
If mid is less than K
If mid is greater than K
If f is - 1
Iterate in the range [ 1 , N ]
If ans [ i ] is equal to - 1
Print the rearranged array
Driver Code
Input
Function Call
Python 3 program for the above approach
Function to find minimum value of K such that the first person gets at least ( N / ( M + 1 ) ) candies
Find the minimum required value of candies for the first person
Iterate K from [ 1 , n ]
Total number of candies
Candies taken by Person 1
Candies taken by 1 st person is minimum of K and candies left
Traverse the array arr [ ]
Amount consumed by the person j
Update the number of candies
Good share of candies achieved
Driver Code
Function to calculate time taken to travel the path
Stores total time
Initial position
Stores visited segments
Check whether segment is present in the set
Increment the value of time by 2
Insert segment into the set
Print the value of time
Driver Code
Function to calculate the cost required to make all array elements equal to 1
Stores the total cost
Traverse the array arr [ ]
If current element is 0
Convert 0 to 1
Add the cost
Return the total cost
Driver Code
Function to find the peak index for the given array
Base Case
Check for strictly increasing array
If the strictly increasing condition is violated , then break
Stores the value of i , which is a potential peak index
Second traversal , for strictly decreasing array
When the strictly decreasing condition is violated , then break
If i = N - 1 , it means that ans is the peak index
Otherwise , peak index doesn 't exist
Driver Code
Function to check if the array has 2 elements whose sum is equal to the given value
Sort the array in increasing order
Traverse the array , nums [ ]
Store the required number to be found
Perform binary search
Store the mid value
If nums [ mid ] is greater than x , then update high to mid - 1
If nums [ mid ] is less than x , then update low to mid + 1
Otherwise
If mid is equal i , check mid - 1 and mid + 1
Otherwise , prthe pair and return
If no such pair is found , then pr - 1
Driver Code
Function Call
Python3 program for the above approach
Function to find the divisor of N closest to the target
Iterate till square root of N
Check if divisors are equal
Check if i is the closest
Check if i is the closest
Check if n / i is the closest
Prthe closest value
Driver Code
Given N & X
Function Call
Function to calculate the minimum power of A and B greater than N
Stores the power of A which is greater than N
Increment count by 1
Divide N by A
Function to find a pair ( a , b ) such that A ^ a + B ^ b = N
Calculate the minimum power of A greater than N
Calculate the minimum power of B greater than N
Make copy of A and B
Traverse for every pair ( i , j )
Check if B ^ j + A ^ i = N To overcome the overflow problem use B = N - A rather than B + A = N
Increment power B by 1
Increment power A by 1
Finally pr - 1 if no pair is found
Driver Code
Given A , B and N
Function Call
Function to find the non - multiples till k
Stores all unique multiples
Iterate the array
For finding duplicates only once
Inserting all multiples into the set
Returning only the count of numbers that are not divisible by any of the array elements
Function to count the total values in the range [ L , R ]
Count all values in the range using exclusion principle
Driver Code
Function Call
Function to find the minimum number of coins to be collected per hour to empty N piles in H hours
Stores the minimum coins to be removed per hour
Find the maximum array element
Perform Binary Search
Store the mid value of the range in K
Find the total time taken to empty N piles by removing K coins per hour
If total time does not exceed H
Otherwise
Prthe required result
Driver Code
Function Call
Function to count distinct pairs in array whose sum equal to K
Stores count of distinct pairs whose sum equal to K
Sort the array
Stores index of the left pointer
Stores index of the right pointer
Calculate count of distinct pairs whose sum equal to K
If sum of current pair is equal to K
Remove consecutive duplicate array elements
Update i
Remove consecutive duplicate array elements
Update j
Update cntPairs
Update i
Update j
If sum of current pair less than K
Update i
Update j
Driver Code
Function to count distinct pairs in array whose sum equal to K
Stores count of distinct pairs whose sum equal to K
Store frequency of each distinct element of the array
Update frequency of arr [ i ]
Traverse the map
Stores key value of the map
If i is the half of K
If frequency of i greater than 1
Update cntPairs
Update cntPairs
Driver Code
Function to find the length of the longest subsequence such that no two adjacent elements are equal
Replace element at index x with y
Since x is 1 - indexed , decrement x by 1
Keep track of number of elements in subsequence
If previous element is not same as current element
Print the desired count
Driver Code
Function Call
Python3 program for the above approach
Traverse the array arr [ ]
If previous element is not same as current element
Traverse the queries
Replace element at index x with y
Recalculate for index x
Subtract contribution of element at index x
Add contribution of y
Recalculate for index x + 1
Subtract contribution of element at index x + 1
Adds contribution of y
Replace the element
Driver Code
Function Call
Python3 program for the above approach
Function to find sum of differences of indices of occurrences of each unique array element
Stores indices of each array element
Store the indices
Stores the sums
Traverse the array
Find sum for each element
Iterate over the Map
Calculate sum of occurrences of arr [ i ]
Store sum for current element
Print answer for each element
Driver code
Given array
Given size
Function Call
Function to convert vowels into uppercase
Stores the length of str
Driver Code
Stores the frequency of each type of chocolate
Function to check if chocolates can be eaten for ' mid ' no . of days
If cnt exceeds N , return true
Function to find the maximum number of days for which chocolates can be eaten
Store the frequency of each type of chocolate
Initialize start and end with 0 and P respectively
Calculate mid
Check if chocolates can be distributed for mid days
Check if chocolates can be distributed for more than mid consecutive days
Driver code
Function call
Function that counts the subarrays having sum modulo k equal to the length of subarray
Stores the count of subarrays
Stores prefix sum of the array
Calculate prefix sum array
Generate all the subarrays
Check if this subarray is a valid subarray or not
Total count of subarrays
Given arr [ ]
Size of the array
Given K
Function call
Function that counts the subarrays s . t . sum of elements in the subarray modulo k is equal to size of subarray
Stores the count of ( pref [ i ] - i ) % k
Stores the count of subarray
Stores prefix sum of the array
Find prefix sum array
Base Condition
Remove the index at present after K indices from the current index
Update the answer for subarrays ending at the i - th index
Add the calculated value of current index to count
Print the count of subarrays
Given arr [ ]
Size of the array
Given K
Function call
Function to check if the substring of length K has equal 0 and 1
Traverse the string
Check if every K - th character is the same or not
Traverse substring of length K
If current character is 0
Increment count
Otherwise
Decrement count
Check for equal 0 s and 1 s
Driver code
Python3 program for the above approach
Function to check if the freq of any character is divisible by N
Stores the frequency of characters
If frequency of a character is not divisible by n
If no character has frequency at least N
Driver Code
Function call
Python3 program for the above approach
Given function
Function to find the root of the given non - decreasing Function
To get the minimum possible answer for the root
Find mid
Search in [ low , x ]
Search in [ x , high ]
Return the required answer
Function to find the roots of the given equation within range [ a , b ]
If root doesn 't exists
Else find the root upto 4 decimal places
Driver code
Given range
Function call
Function check if mid can be median index of the difference array
Size of the array
Total possible no of pair possible
The index of the element in the difference of all pairs from the array
Count the number of pairs having difference <= mid
If the difference between end and first element is less then or equal to mid
Checking for the no of element less than or equal to mid is greater than median or not
Function to calculate the median of differences of all pairs from the array
Size of the array
Initialising the low and high
Binary search
Calculate mid
If mid can be the median of the array
Returning the median of the differences of pairs from the array
Driver Code
Function to find strings from A [ ] having all strings in B [ ] as subsequence
Calculate respective sizes
Stores the answer
Stores the frequency of each character in strings of A [ ]
Compute the frequencies of characters of all strings
Stores the frequency of each character in strings of B [ ] each character of a string in B [ ]
If the frequency of a character in B [ ] exceeds that in A [ ]
A string exists in B [ ] which is not a proper subset of A [ i ]
If all strings in B [ ] are proper subset of A [ ]
Push the string in resultant vector
If any string is found
Print those strings
Otherwise
Driver code
Python3 program for the above approach
Function to find the minimum distance pair where one is the multiple of the other
Initialize the variables
Iterate for all the elements
Loop to make pairs
Check for minimum distance
Check if one is a multiple of other
Update the distance
Store indexes
If no such pair exists
Print the answer
Given array arr [ ]
Function call
Function to print all numbers in the range [ L , R ] having digits in strictly increasing order
Iterate over the range
Iterate over the digits
Check if the current digit is >= the previous digit
If the digits are in ascending order
Given range L and R
Function call
Python3 program for the above approach
Function to find the missing element
Fix left and right boundary for binary search
Find index of middle element
Check if the element just after the middle element is missing
Check if the element just before mid is missing
Check if the elements till mid follow the AP , then recur for right half
Else recur for left half
Function to find the missing element in AP series
Sort the array arr [ ]
Calculate Common Difference
Binary search for the missing
Given array arr [ ]
Function call
Function to calculate x raised to the power y in O ( logn )
Function to find the Kth root of the number N using BS
If the range is still valid
Find the mid - value of range
Base Case
Condition to check if the left search space is useless
Given N and K
Function Call
Function that return the count of subset such that min ( S ) + max ( S ) < K
Sorting the array
ans stores total number of subsets
Add all possible subsets between i and j
Decrease the sum
Driver code
Python3 program to find the minimum of maximum difference between adjacent elements after at most K insertions
Calculate the maximum adjacent difference
If the maximum adjacent difference is already zero
best and worst specifies range of the maximum adjacent difference
To store the no of insertions required for respective values of mid
If the number of insertions required exceeds K
Otherwise
Driver code
Python3 implementation to Check if the minimum element in the array is greater than or equal to half of every other element
Function to Check if the minimum element in the array is greater than or equal to half of every other element
Initialise the variables to store smallest and second smallest
Check if current element is smaller than smallest , the current smallest will become secondSmallest and current element will be the new smallest
Check if current element is smaller than secondSmallest simply update the latter
Driver code
Python 3 program to find minimum and maximum fibonacci number in given array
Function to create hash table to check Fibonacci numbers
Insert initial two numbers in the hash table
Sum of previous two numbers
Update the variable each time
Function to find minimum and maximum fibonacci number in given array
Find maximum value in the array
Creating a set containing all Fibonacci numbers up to maximum value in the array
For storing the Minimum and Maximum Fibonacci number
Check if current element is a fibonacci number
Update the maximum and minimum accordingly
Driver code
Function that returns True if there is a sub of length len with <= k unique characters
Size of the
Map to store the characters and their frequency
Update the map for the first sub
Check for the rest of the subs
Add the new character
Remove the first character of the previous window
Update the map
Function to return the length of the longest sub which has K unique characters
Check if the complete contains K unique characters
Size of the
Apply binary search
Driver code
Function that returns true if it is possible to make a square with side equal to l
To store the count of elements greater than or equal to l
Increment the count
If the count becomes greater than or equal to l
Function to return the maximum area of the square that can be obtained
If square is possible with side length m
Try to find a square with smaller side length
Return the area
Driver code
Function to insert the names and check whether they appear for the first time
To store the names of the employees
If current name is appearing for the first time
Driver code
Function to return the count of elements in arr [ ] which are less than the given key
Modified binary search
Function to return the count of elements in arr [ ] which are greater than the given key
Modified binary search
Function to return the count of the required triplets
Sort all three arrays
Iterate for all the elements of array B
Count of elements in A [ ] which are less than the chosen element from B [ ]
Count of elements in C [ ] which are greater than the chosen element from B [ ]
Update the count
Driver code
Python 3 code to calculate the minimum cost to make the given parentheses balanced
To store absolute count of balanced and unbalanced parenthesis
o ( open bracket ) stores count of ' ( ' and c ( close bracket ) stores count of ')
Driver code
Function to find the middle of three number
x is positive if a is greater than b . x is negative if b is greater than a .
Similar to x
Similar to x and y .
Checking if b is middle ( x and y both are positive )
Checking if c is middle ( x and z both are positive )
Driver Code
Finds missing 4 numbers in O ( N ) time and O ( 1 ) auxiliary space .
To keep track of 4 possible numbers greater than length of input array In Java , helper is automatically initialized as 0.
Traverse the input array and mark visited elements either by marking them as negative in arr [ ] or in helper [ ] .
If element is smaller than or equal to length , mark its presence in arr [ ]
Mark presence in helper [ ]
Print all those elements whose presence is not marked .
Driver code
Function that finds the middle the lexicographical smallest sequence
If K is even
First element is K / 2
Remaining elements of the sequence are all integer K
Stores the sequence when K is odd
Iterate over the range [ 0 , N / 2 ]
Check if the sequence ends with in 1 or not
Remove the sequence ending in 1
If it doesn 't end in 1
Decrement by 1
Insert K to the sequence till its size is N
Prthe sequence stored in the vector
Driver Code
Function to find the last remaining array element after repeatedly removing the smallest from pairs having absolute difference 2 or 0
Sort the given array in ascending order
Traverse the array
If difference between adjacent elements is not equal to 0 or 2
If operations can be performed
Driver Code
Function to count maximum subsets into which the given array can be split such that it satisfies the given condition
Sort the array in decreasing order
Stores count of subsets possible
Stores count of elements in current subset
Traverse the array arr [ ]
Update size
If product of the smallest element present in the current subset and size of current subset is >= K
Update maxSub
Update size
Driver Code
Given array
Size of the array
Given value of X
Function to find maximum possible sum of second minimums in each quadruple
Sort the array
Add the second minimum
Print maximum possible sum
Driver Code
Given array
Size of the array
Function to sort an array using insertion sort
Move elements of arr [ 0. . i - 1 ] , that are greater than key to one position ahead of their current position
Function to print an array of size N
Print the array
Driver Code
Function Call
Function to find the count required pairs
Stores count of pairs
Traverse the array
Check if the condition is satisfied or not
Driver Code
Function Call
Function to merge two sorted arrays
i : index to left subarray
j : index to right subarray
Stores count of pairs that satisfy the given condition
Traverse to check for the valid conditions
If condition satisfies
All elements in the right side of the left subarray also satisfies
Sort the two given arrays and store in the resultant array
Elements which are left in the left subarray
Elements which are left in the right subarray
Return the count obtained
Function to partition array into two halves
Same as ( l + r ) / 2 , but avoids overflow for large l and h
Sort first and second halves
Call the merging function
Function to print the count of required pairs using Merge Sort
Driver code
Function Call
Function to count minimum consecutive removals of elements of the same type
Sort the array
Stores the maximum element present in the array
stores the sum of array
Calculate sum of array
Driver Code
Function call
Function to rearrange the array a [ ] such that none of the array elements is same as its index
Sort the array
Traverse the indices [ 0 , N - 2 ] of the given array
Check if the current element is equal to its index
If found to be true , swap current element with the next element
Check if the last element is same as its index
If found to be true , swap current element with the previous element
Prthe modified array
Driver Code
Function Call
Function that counts the minimum moves required to covert arr [ ] to brr [ ]
Base Case
If arr [ i ] < arr [ j ]
Include the current element
Otherwise , excluding the current element
Function that counts the minimum moves required to sort the array
If both the arrays are equal
No moves required
Otherwise
Print minimum operations required
Driver Code
Function to check if str1 can be transformed to t by sorting substrings
Occur [ i ] stores the indices of ( ' a ' + i ) in string s
idx [ i ] stores the next available index of ( ' a ' + i ) in occur [ i ]
If this is not available anymore
Conversion not possible
If one of the smaller characters is available and occurs before
Conversion not possible
Print the answer
Driver Code
function to count inversion count of the string
for storing frequency
we 'll add all the characters  which are less than the ith  character before i.
adding the count to inversion count
updating the character in the frequency array
function to check whether any of the string have a repeated character
function to check whether the string S1 and S2 can be made equal by reversing sub strings ofsame size in both strings
frequency array to check whether both string have same character or not
adding the frequency ;
if the character is not in S1
decrementing the frequency
If both string does not have same characters or not
finding inversion count of both strings
If inversion count is same , or have same parity or if any of the string have a repeated character then the answer is Yes else No
Driver Code
Python3 program for the above approach
Function to sort bitonic array in constant space
Initialize thevalue of k
In each iteration compare elements k distance apart and swap it they are not in order
k is reduced to half after every iteration
Print the array elements
Given array
Function call
Function that prints the maximum sum possible
Find elements in each group
Sort all elements in non - descending order
Add K largest elements
For sum of minimum elements from each subset
Printing the maximum sum
Driver code
Function to find the minimum sum
Sort the array
Calculate sum of smallest K elements
Return the sum
Driver code
Function to find the Kth smallest element in Unsorted Array
Initialize the max Element as 0
Iterate arr [ ] and find the maximum element in it
Frequency array to store the frequencies
Counter variable
Counting the frequencies
Iterate through the freq [ ]
Check if num is present in the array
Increment the counter with the frequency of num
Checking if we have reached the Kth smallest element
Return the Kth smallest element
Driver Code
Given array
Function Call
Function to print all the numbers up to n in lexicographical order
Driver Code
Python3 implementation to print row of matrix in ascending or descending order alternatively
Iterate matrix rowwise
Sort even rows in ascending order
Compare adjacent elements
Swap adjacent element
Sort even rows in descending order
Compare adjacent elements
Swap adjacent element
Printing the final output
Driver code
To store the edges of the given graph
A utility function to perform DFS Traversal
Check those vertices which are stored in the set
Vertices are included if the weight of edge is 0
A utility function to find the weight of Minimum Spanning Tree
To count the connected components
Inserting the initial vertices in the set
Traversing vertices stored in the set and Run DFS Traversal for each vertices
Incrementing the zero weight connected components
DFS Traversal for every vertex remove
Driver 's Code
Insert edges
Function call find the weight of Minimum Spanning Tree
Function to return the count of pairs
Driver code
Function to return the maximum mod value for any pair from the array
Find the second maximum element from the array
Driver code
Function to that returns true if it possible to choose the elements
If elements can 't be chosen
Sort both the arrays
If xth smallest element of A [ ] is smaller than the yth greatest element of B [ ]
Driver code
Python 3 program to minimum changes required in an array for k distinct elements .
Function to minimum changes required in an array for k distinct elements .
Store the frequency of each element
Store the frequency of elements
Sort frequencies in descending order
To store the required answer
Return the required answer
Driver code
Function to find maximum number of elements without overlapping in a line
If n = 1 , then answer is one
We can always make 1 st element to cover left segment and nth the right segment
If left segment for ith element doesnt overlap with i - 1 th element then do left
else try towards right if possible
update x [ i ] to right endpoof segment covered by it
Return the required answer
Driver code
Function call
Function to find the minimized sum
If more odd elements
Sort the elements
Left - over elements
Find the sum of leftover elements
Return the sum
If more even elements
Sort the elements
Left - over elements
Find the sum of leftover elements
Return the sum
If same elements
Driver code
Function to find the minimum number of operations to convert the given string
Check if N is divisible by K
Array to store frequency of characters in given string
Two arrays with number of operations required
Checking for all possibility
Driver Code
Function to find minimum range increments to sort an array
If current element is found greater than last element Increment all terms in range i + 1 to n - 1
mn = arr [ i ] Minimum in range i to n - 1
Driver Code
Python3 implementation of the approach
false here indicates that it is not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p , set them to non - prime
Function that sorts all the prime numbers from the array in descending
This vector will contain prime numbers to sort
If the element is prime
update the array elements
Driver code
print the results .
Python 3 Program to divide the array into N pairs such that maximum pair is minimized
After Sorting Maintain two variables i and j pointing to start and end of array Such that smallest element of array pairs with largest element
Driver Code
a utility function that returns total set bits count in an integer
Function to simultaneously sort both arrays using insertion sort ( http : quiz . geeksforgeeks . org / insertion - sort / )
use 2 keys because we need to sort both arrays simultaneously
Move elements of arr [ 0. . i - 1 ] and aux [ 0. . i - 1 ] , such that elements of aux [ 0. . i - 1 ] are greater than key1 , to one position ahead of their current position
Function to sort according to bit count using an auxiliary array
Create an array and store count of set bits in it .
Sort arr [ ] according to values in aux [ ]
Utility function to print an array
Driver Code
a utility function that returns total set bits count in an integer
Function to sort according to bit count This function assumes that there are 32 bits in an integer .
Traverse through all bit counts ( Note that we sort array in decreasing order )
Utility function to pran array
Driver Code
Function to find lexicographically smallest string having number of 1 s greater than number of 0 s
C1s And C0s stores the count of 1 s and 0 s at every position
Traverse the string S
If the position is not divisible by k1 and k2
If C0s >= C1s and pos [ ] is empty then the string can 't  be formed
If pos [ ] is not empty then flip the bit of last position present in pos [ ]
Print the result
Driver Code
python 3 program for the above approach
Function to find the pair ( X , Y ) such that X xor Y = N and the count of set bits in X and Y is less than count of set bit in N
Stores MSB ( Most Significant Bit )
Stores the value of X
/ Stores the value of Y
Traversing over all bits of N
If ith bit of N is 0
/ Set ith bit of X to 1
Set ith bit of Y to 1
Print Answer
Driver Code
python 3 program for the above approach
Function to check if the number is valid
Sum of digits of num
Squared number
Sum of digits of ( num * num )
Function to convert a string to an integer
Function to generate all possible strings of length len
Desired string
Take only valid numbers
Recurse for all possible digits
Function to calculate unique numbers in range [ L , R ]
Initialize a variable to store the answer
Calculate the maximum possible length
Set to store distinct valid numbers
Generate all possible strings of length i
Iterate the set to get the count of valid numbers in the range [ L , R ]
Driver Code
Function to check if X can be converted to Y by multiplying X by 2 or appending 1 at the end
Iterate until Y is at least X
If Y is even
If the last digit of Y is 1
Otherwise
Check if X is equal to Y
Driver Code
Function to find the lexicographically smallest string of the first K lower case alphabets having unique substrings
Stores the resultant string
Iterate through all the characters
Inner Loop for making pairs and adding them into string
Adding first character so that substring consisting of the last the first alphabet is present
Print the resultant string
Driver Code
Function to find the quadratic equation from the given sum and products of roots
Print the coefficients
Driver Code
Function to count the minimum number of pairs of adjacent elements required to be replaced by their sum to make all arrat elements equal
Stores the prefix sum of the array
Calculate the prefix sum array
Stores the maximum number of subarrays into which the array can be split
Iterate over all possible sums
Traverse the array
If the sum is equal to the current prefix sum
Increment count of groups by 1
Otherwise discard this subgroup sum
Update the maximum this of subarrays
Return the minimum number of operations
Driver Code
Function Call
Function to find the most frequent character after replacing X with either '0' or '1' according as per the given conditions
Store the count of 0 s and 1 s in the S
Count the frequency of 0 and 1
If the character is 1
If the character is 0
Stores first occurence of 1
Traverse the to count the number of X between two consecutive 1 s
If the current character is not X
If the current character is 1 , add the number of Xs to count1 and set prev to i
Otherwise
Find next occurence of 1 in the string
If it is found , set i to prev
Otherwise , break out of the loop
Store the first occurence of 0
Repeat the same procedure to count the number of X between two consecutive 0 s
If the current character is not X
If the current character is 0
Add the count of Xs to count0
Set prev to i
Otherwise
Find the next occurence of 0 in the string
If it is found , set i to prev
Otherwise , break out of the loop
Count number of X present in the starting of the string as XXXX1 ...
Store the count of X
Increment count1 by count if the condition is satisfied
Count the number of X present in the ending of the as ... XXXX0
Store the count of X
Increment count0 by count if the condition is satisfied
If count of 1 is equal to count of 0 , prX
Otherwise , if count of 1 is greater than count of 0
Otherwise , pr0
Driver Code
Function to calculate the maximum number of sheets possible by given operations
Initial count of sheets
Keep dividing the sheets into half
Reduce area by half
Increase count by twice
Driver Code
function to find the minimum moves required to reach origin from ( a , b )
Stores the minimum number of moves
Check if the absolute difference is 1 or 0
Store the minimum of a , b
Store the maximum of a , b
Prthe answer
Driver Code
Given co - ordinates
Function Call
Function to count even sum pairs in the given range
Stores the count of even numbers between 1 to X
Stores the count of odd numbers between 1 to X
Stores the count of even numbers between 1 to Y
Stores the count of odd numbers between 1 to Y
Stores the count of pairs having even sum
Returns the count of pairs having even sum
Driver code
Python3 program for the above approach
Function to calculate minimum number of moves to make the sequence a Fibonacci series
If number of elements is less than 3
Initialize the value of the result
Try all permutations of the first two elements
Value of first element after operation
Value of second element after operation
Calculate number of moves for rest of the elements of the array
Element at idx index
If it is not possible to change the element in atmost one move
Otherwise
Update the answer
Return the answer
Driver Code
Function to Find the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all queries
Iterate over each query
Stores the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ...
Traverse the array and calculate the sum of the expression
Update sum
Update x
Driver Code
Function to calculate Bitwise OR from given bitwise XOR and bitwise AND values
Driver Code
Function to return GCD of two numbers a and b
Base Case
Recursively Find the GCD
Function to check of B can be reaced from A with a jump of K elements in the circular queue
Find GCD of N and K
If A - B is divisible by gcd then prYes
Otherwise
Driver Code
Function Call
Python3 program for the above approach
Function that counts the subarrays with sum of its elements as its length
Store count of elements upto current element with length i
Stores the final count of subarray
Stores the prefix sum
If size of subarray is 1
Iterate the array
Find the sum
Update frequency in map
Print the total count
Driver code
Given array
Size of the array
Function Call
Function to split the first N natural numbers into two sets having minimum absolute difference of their sums
Stores the sum of elements of set1
Stores the sum of elements of set2
Traverse first N natural numbers
Check if sum of elements of set1 is less than or equal to sum of elements of set2
Driver Code
Function to check if N contains digits 0 , 1 , 2 , 5 , 8 only
Extract digits of N
Return false if any of these digits are present
Function to check if N is prime or not
Check for all factors
Function to check if n is prime in all the desired forms
Driver Code
Function to calculate the minimum cost required to generate a balanced bracket sequence
Stores the count of unbalanced open brackets
Stores the count of unbalanced closed brackets
Stores the count of open brackets
Stores the count of closed brackets
If open brace is encountered
Otherwise
If no unbalanced open brackets are present
Increase count of unbalanced closed brackets
Otherwise
Reduce count of unbalanced open brackets
Increase count of closed brackets
Calculate lower bound of minimum cost
Reduce excess open or closed brackets to prevent counting them twice
Update answer by adding minimum of removing both unbalanced open and closed brackets or inserting closed unbalanced brackets to end of String
Prthe result
Driver Code
Function to return the number of all permutations such that sum of K numbers in range is even
Find total count of even and odd number in given range
Iterate loop k times and update even_sum & odd_sum using previous values
Update the prev_even and odd_sum
Even sum
Odd sum
Return even_sum
Given ranges
Length of permutation
Function call
Function to count the number of N - digit numbers such that sum of every K consecutive digits are equal
Print the answer
Driver Code
Function to find the sum of largest divisors of numbers in range 1 to N not divisible by prime number P
Total sum upto N
If no multiple of P exist up to N
If only P itself is in the range from 1 to N
Sum of those that are divisible by P
Recursively function call to find the sum for N / P
Driver Code
Given N and P
Function call
Function to find the right shifts required for each element to reach its sorted array position in A [ ]
Stores required number of shifts for each element
If the element is at sorted position
Otherwise
Calculate right shift
Print the respective shifts
Driver Code
Function to construct matrix with diagonal sum equal to matrix sum
If diagonal position
Positive element
Negative element
Driver code
Function to calculate and return the minimum number of times a number with unit digit X needs to be added to get a sum N
Calculate the number of additions required to get unit digit of N
If unit digit of N cannot be obtained
Function to return the minimum number required to represent N
Stores unit digit of N
Stores minimum addition of X required to obtain unit digit of N
If unit digit of N cannot be obtained
Otherwise
If N is greater than or equal to ( X * times )
Minimum count of numbers that needed to represent N
Representation not possible
Driver Code
Function to find the minimum number of Points required to cover a grid
If number of block is even
Return the minimum points
Driver code
Given size of grid
Function call
Function to find the largest lexicographical string with given constraints .
Vector containing frequency of each character .
Assigning frequency to
Empty string of string class type
Loop to iterate over maximum priority first .
If frequency is greater than or equal to k .
Temporary variable to operate in - place of k .
concatenating with the resultant string ans .
Handling k case by adjusting with just smaller priority element .
Condition to verify if index j does have frequency greater than 0 ;
if no such element is found than string can not be processed further .
If frequency is greater than 0 and less than k .
Here we don 't need to fix K  consecutive element criteria.
Otherwise check for next possible element .
Driver code
Function to find the minimum operations required to make all elements of the array equal
Minimum element of A
Traverse through all final values
Variable indicating whether all elements can be converted to x or not
Total operations
Traverse through all array elements
All elements can 't  be converted to x
Driver Code
Function to return the maximum sum of a + b satisfying the given condition
Initialize max_sum
Consider all the possible pairs
Check if the product is divisible by the sum
Storing the maximum sum in the max_sum variable
Return the max_sum value
Driver code
Kadane 's algorithm to find the maximum subarray sum
Loop to find the maximum subarray array sum in the given array
Function to find the maximum sum of the array by multiplying the prefix and suffix by - 1
Total intital sum
Loop to find the maximum sum of the array
Maximum value
Driver Code
Python3 program to find the number of interesting primes up to N
Function to check if a number is prime or not
If n is divisible by any number between 2 and sqrt ( n ) , it is not prime
Function to check if a number is perfect square or not
Find floating povalue of square root of x .
If square root is an integer
Function to find the number of interesting primes less than equal to N .
Check whether the number is prime or not
Iterate for values of b
Check condition for a
Return the required answer
Driver code
Python implementation of the approach
Function to convert decimal number n to its binary representation stored as an array arr [ ]
Function to convert the number represented as a binary array arr [ ] into its decimal equivalent
Function to return the maximized number by flipping atmost k bits
Number of bits in n
Find the binary representation of n
To count the number of 0 s flipped
Return the decimal equivalent of the maximized number
Driver code
Function to find the required subsequence
Current element cannot be a part of the required subsequence
Include current element in the required subsequence So update the sum
Print the elements of the required subsequence
If the current element was included in the subsequence
Driver code
Python implementation of the approach
Function to return the maximum valued alphabet
Set the first and the last occurrence of all the characters to - 1
Update the occurrences of the characters
Only set the first occurrence if it hasn 't already been set
To store the result
For every alphabet
If current alphabet doesn 't appear  in the given string
If the current character has the highest value so far
Driver code
Python implementation of the approach
Function to perform queries to find number of distinct elements from a given index till last index in an array
Check if current element already visited or not
If not visited store current counter and increment it and mark check as 1
Otherwise if visited simply store current counter
Perform queries
Driver code
Python3 implementation of the approach
Function to return the count of operations required
To store the powers of 2
Temporary variable to store x
To store the index of smaller number larger than x
To store the count of operations
Stores the index of number in the form of 2 ^ n - 1
If x is already in the form 2 ^ n - 1 then no operation is required
If number is less than x increase the index
Calculate all the values ( x xor 2 ^ n - 1 ) for all possible n
Only take value which is closer to the number
If number is in the form of 2 ^ n - 1 then break
Return the count of operations required to obtain the number
Driver code
Function to return the minimum operations required
Count the frequency of each element
Maximum element from the array
Find all the multiples of i
Delete the multiples
Increment the operations
Driver code
Python3 implementation of the approach
Function to return minimum GCD among all subarrays
Minimum GCD among all sub - arrays will be the GCD of all the elements of the array
Function to return minimum LCM among all subarrays
Minimum LCM among all sub - arrays will be the minimum element from the array
Driver code
Python3 implementation of the approach
Function that returns the modified lexicographically smallest string after performing minimum number of given operations
Stores the initial frequencies of characters 0 s , 1 s and 2 s
Stores number of processed characters upto that point of each type
Required number of characters of each type
If the current type has already reqd number of characters , no need to perform any operation
Process all 3 cases
Check for 1 first
Else 2
Here we need to check processed [ 1 ] only for 2 since 0 is less than 1 and we can replace it anytime
Here we can replace 2 with 0 and 1 anytime
keep count of processed characters of each type
Driver Code
Function to find minimum swaps
visited array to check if value is seen already
If the arr [ i ] is seen first time
stores the number of swaps required to find the correct position of current element 's partner
Increment count only if the current element has not been visited yet ( if is visited , means it has already been placed at its correct position )
If current element 's partner is found
Driver Code
Python3 program to print the largest palindromic number by permuting digits of a number
Function to check if a number can be permuted to form a palindrome number
counts the occurrence of number which is odd
if occurrence is odd
if number exceeds 1
Function to print the largest palindromic number by permuting digits of a number
string length
map that marks the occurrence of a number
check the possibility of a palindromic number
string array that stores the largest permuted palindromic number
pointer of front
greedily start from 9 to 0 and place the greater number in front and odd in the middle
if the occurrence of number is odd
place one odd occurring number in the middle
decrease the count
place the rest of numbers greedily
if all numbers occur even times , then place greedily
place greedily at front
2 numbers are placed , so decrease the count
increase placing position
print the largest string thus formed
Driver Code
Function to calculate swaps required
Keep track of '[
To count number of encountered ' [ '
To track position of next ' [ ' in pos
To store result
Increment count and move p to next position
We have encountered an unbalanced part of string
Increment sum by number of swaps required i . e . position of next ' [ ' - current position
Reset count to 1
Driver code
Method returns minimum cost to break board into m * n squares
sort the horizontal cost in reverse order
sort the vertical cost in reverse order
initialize current width as 1
loop until one or both cost array are processed
increase current horizontal part count by 1
increase current vertical part count by 1
loop for horizontal array , if remains
loop for vertical array , if remains
Driver program
Function to find the minimum of the three numbers
Function to find the minimum number operations required to convert string str1 to str2 using the operations
Stores the results of subproblems
Fill dp [ ] [ ] in bottom up manner
If str1 is empty , then insert all characters of string str2
Minimum operations is j
If str2 is empty , then remove all characters of string str2
Minimum operations is i
If the last characters are same , then ignore last character
If the last character is different , then find the minimum
Perform one of the insert , remove and the replace
Return the minimum number of steps required
Function to find the minimum number of steps to modify the string such that first half and second half becomes the same
Stores the minimum number of operations required
Traverse the given string S
Find the minimum operations
Update the ans
Print the result
Driver Code
Function to find the minimum number of operations to reduce N to 2 by dividing N by 5 or decrementing by 3
Initialize the dp array
Initialize the array dp [ ]
For N = 2 number of operations needed is zero
Iterating over the range [ 1 , N ]
If it 's not possible to  create current N
Multiply with 5
Adding the value 3
Checking if not possible to make the number as 2
Return the minimum number of operations
Driver Code
Function to find the maximum profit with transaction fee
Traversing the stocks for each day
Update buy and sell
Return the maximum profit
Driver code
Given Input
Function Call
Stores the maximum path sum from the cell ( 1 , 1 ) to ( N , M )
Stores the maximum path sum from the cell ( j , j ) to ( N , M )
Function to find the maximum path sum from the cell ( 1 , 1 ) to ( N , M )
Traverse the first row
Traverse the first column
Traverse the matrix
Update the value of start [ i ] [ j ]
Function to find the maximum path sum from the cell ( j , j ) to ( N , M )
Traverse the last row
Traverse the last column
Traverse the matrix
Update the value of ending [ i ] [ j ]
Function to find the maximum path sum from the top - left to the bottom right cell such that path contains one of the cells in the array coordinates [ ] [ ]
Initialize the start and the end matrices
Calculate the start matrix
Calculate the end matrix
Stores the maximum path sum
Traverse the coordinates
Update the value of ans
Print the resultant maximum sum path value
Driver Code
Function to find the length of the longest subset of an array of strings with at most A 0 s and B 1 s
Initialize a 2D array with its entries as 0
Traverse the given array
Store the count of 0 s and 1 s in the current string
Iterate in the range [ A , zeros ]
Iterate in the range [ B , ones ]
Update the value of dp [ i ] [ j ]
Print the result
Driver Code
Function to count ways to select N distinct pairs of candies with different colours
If n pairs are selected
Stores count of ways to select the i - th pair
Iterate over the range [ 0 , n ]
If pair ( i , j ) is not included
Driver Code
Function to find the minimum cost to reach the end of an array
Base Case : When N < 3
Store the results in table
Initialize base cases
Iterate over the range [ 2 , N - 2 ] to construct the dp array
Handle case for the last index , i . e . N - 1
Print the answer
Driver Code
Python3 program to implement the above approach
Function to find the value of power ( X , Y ) in O ( log Y )
Stores power ( X , Y )
Update X
Base Case
Calculate power ( X , Y )
If Y is an odd number
Update res
Update Y
Update X
Function to calculate ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 )
Stores binary representation of n
Stores power of 10
Calculate the binary representation of n
If n is an odd number
Update X
Update pow_10
Update n
Double the value of X
Stores the value of ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 )
Driver Code
Python3 program to implement the above approach
Function to find the value of power ( X , Y ) in O ( log Y )
Stores power ( X , Y )
Update X
Base Case
Calculate power ( X , Y )
If Y is an odd number
Update res
Update Y
Update X
Function to calculate ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 )
dp [ N ] * dp [ N ] : Stores value of ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 )
Base Case
Iterate over the range [ 3 , N ]
Stores rightmost bit of i
Stores the value of ( i - y )
If x is power of 2
Update dp [ i ]
Update dp [ i ]
Driver Code
Function to find the number of ways to get the sum N with throw of dice
Base case
Stores the count of total number of ways to get sum N
Recur for all 6 states
Return answer
Driver Code
Function call
Utility function to check array can be partition to 3 subsequences of equal sum or not
Base case
When element at index j is added to sm1
When element at index j is added to sm2
When element at index j is added to sm3
Return maximum value among all above 3 recursive call
Function to check array can be partition to 3 subsequences of equal sum or not
Initialise 3 sums to 0
Function call
Given array arr [ ]
Function call
Python3 program for the above approach
Function to check array can be partition into sum of 3 equal
Base Case
If value at particular index is not - 1 then return value at that index which ensure no more further calls
When element at index j is added to sm1
When element at index j is added to sm2
When element at index j is added to sm3
Update the current state and return that value
Function to check array can be partition to 3 subsequences of equal sum or not
Initialise 3 sums to 0
Function Call
Given array arr [ ]
Function call
Precompute the index of next different element in the array for every array element
Default value
Compute nextpos [ i ] using nextpos [ i + 1 ]
Function to return the smallest index
nextpos [ i ] will store the next position p where arr [ p ] != arr [ i ]
If X is not present at l
Otherwise
Find the index which stores a value different from X
If that index is within the range
Driver code
Python3 program for the above approach
Function to count number of ways to convert string S to string T by performing K cyclic shifts
Calculate length of string
a is no . of good cyclic shifts b is no . of bad cyclic shifts
Iterate in string
Precompute the number of good and bad cyclic shifts
dp2 [ i ] to store the no of ways to get to a bad shift in i moves
Calculate good and bad shifts
Return the required number of ways
Given Strings
Given K shifts required
Function call
Function to find minimum operations
dp is initialised to store the steps
For all even numbers
Driver Code
Function to find the maximum subset sum
Ignore the current element
including element in partition 1
including element in partition 2
Driver code
size of the array
Python3 implementation for the above mentioned Dynamic Programming approach
Function to find the maximum subset sum
sum of all elements
bottom up lookup table ;
initialising dp table with INT_MIN where , INT_MIN means no solution
Case when diff is 0
Putting ith element in g0
Putting ith element in g1
Ignoring ith element
Driver code
Array to find the fibonacci sequence
Function to find the fibonacci sequence
Function to count all possible strings
Initialize ans = 1
If two consecutive char are same increase cnt
Else multiply the fib [ cnt ] to ans and initialize ans to 1
If str = abcdeeee , then for last " eeee " the count munst be updated
Return the total count
Driver 's Code
Function to precompute all the fibonacci number
Function call to find the count
Python3 program to find the first N terms of Golomb Sequence
Function to print the Golomb Sequence
Initialise the array
Initialise the cnt to 0
First and second element of Golomb Sequence is 0 , 1
Map to store the count of current element in Golomb Sequence
Store the count of 2
Iterate over 2 to N
If cnt is equals to 0 then we have new number for Golomb Sequence which is 1 + previous element
Else the current element is the previous element in this Sequence
Map the current index to current value in arr [ ]
Print the Golomb Sequence
Driver Code
Function to find the number the number of ways to reach Nth stair
Array including number of ways that includes 3
Array including number of ways that doesn 't includes 3
Initially to reach 3 stairs by taking 3 steps can be reached by 1 way
Loop to find the number the number of ways to reach Nth stair
Driver Code
Python3 implementation of the approach
Map to store the divisor count
Function to generate the divisors of all the array elements
Function to find the maximum number of multiples in an array before it
To store the maximum divisor count
Update ans if more number of divisors are found
Generating all the divisors of the next element of the array
Driver code
Python3 implementation of the approach
3d array to store states of dp
Array to determine whether a state has been solved before
Function to return the count of required paths
Base cases
If a state has been solved before it won 't be evaluated again
Recurrence relation
Driver code
Function to return the maximum sum
Base case
Already visited
If the element has been taken from first array in previous step
If the element has been taken from second array in previous step
If the element has been taken from third array in previous step
Driver code
Pick element from first array
Pick element from second array
Pick element from third array
Print the maximum of them
Python3 iimplementation of the above approach
Function to return no of ways to build a binary string of length N such that 0 s always occur in groups of size K
Driver Code
Function to find number of ways to pair people in party
To store count of number of ways .
Using the recurrence defined find count for different values of p .
Driver code
A simple recursive implementation for counting ways to reach a score using 1 and 2 with consecutive 2 allowed
base case
For cases n > 2
Driver code
Python 3 program to check if the number is weird or not
code to find all the factors of the number excluding the number itself
vector to store the factors
note that this loop runs till sqrt ( n )
if the value of i is a factor
condition to check the divisor is not the number itself
return the vector
Function to check if the number is abundant or not
find the divisors using function
sum all the factors
check for abundant or not
Function to check if the number is semi - perfect or not
find the divisors
sorting the vector
subset to check if no is semiperfect
initialising 1 st column to true
initialing 1 st row except zero position to 0
loop to find whether the number is semiperfect
calculation to check if the number can be made by summation of divisors
if not possible to make the number by any combination of divisors
Function to check for weird or not
Driver Code
Returns sum of maximum sum subarray created after concatenating a [ 0. . n - 1 ] k times .
This is where it differs from Kadane 's  algorithm. We use  modular arithmetic to  find next element.
Driver program to test maxSubArraySum
function to find the longest increasing odd even subsequence
lioes [ i ] stores longest increasing odd even subsequence ending at arr [ i ]
to store the length of longest increasing odd even subsequence
Initialize LIOES values for all indexes
Compute optimized LIOES values in bottom up manner
Pick maximum of all LIOES values
required maximum length
Driver to test above
Utility method to check whether a character is operator or not
method prints minimum and maximum value obtainable from an expression
store operator and numbers in different vectors
storing last number in vector
initializing minval and maxval 2D array
initializing main diagonal by num values
looping similar to matrix chain multiplication and updating both 2D arrays
if current operator is ' + ' , updating tmp variable by addition
if current operator is ' * ' , updating tmp variable by multiplication
updating array values by tmp variables
last element of first row will store the result
Driver code
A naive recursive implementation that simply follows the above optimal substructure property
Matrix A [ i ] has dimension p [ i - 1 ] x p [ i ] for i = 1. . n
place parenthesis at different places between first and last matrix , recursively calculate count of multiplications for each parenthesis placement and return the minimum count
Return minimum count
Driver code
Python program using memoization
Function for matrix chain multiplication
Driver Code
Function to flip bits of A and B which are set in both of them
Clear the bits of A which are set in both A and B
Clear the bits of B which are set in both A and B
Print updated A and B
Driver Code
Function to calculate and return the hamming distance between all consecutive numbers from 0 to N
Driver Code
Python3 Program to implement the above approach
Function to find the sum of all divisors of all numbers from 1 to N
Stores the sum
Marks the last poof occurence with same count
Calculate the sum
Return the result
Driver Code
Python3 program to find minimum time required to split a stick of N length into unit pieces
Function to return the minimum time required to split stick of N into length into unit pieces
Return the minimum unit of time required
Driver Code
Function to find the distinct sums
Set to store distinct sums
Inserting every sum
Returning distinct sums
Driver code
Function to print pattern recursively
Base Case
Conditions to print slash
Condition to print forword slash
Condition to print backward slash
Else print '*
Recursive call for rows
Recursive call for changing the rows
Driver Code
Function Call
Python3 implementation for pattern searching in an array using Z - Algorithm
Function to calculate Z - Array
Loop to calculate Z - Array
Outside the Z - box
Inside Z - box
Helper function to merge two arrays and create a single array
Array to store merged array
Copying array B
Adding a separator
Copying array A
Calling Z - function
Function to help compute the Z array
Printing indexes where array B occur
Driver Code
Function to return the count of repetitions of string a to generate string b
If b cannot be generated by repeating a
Repeat a count number of times
Driver code
Python3 program to Check if a given string can be formed from another string using given constraints
Function to check if S2 can be formed of S1
length of strings
hash - table to store count
store count of each character
traverse and check for every character
if the character of s2 is present in s1
if the character of s2 is not present in S1 , then check if previous two ASCII characters are present in S1
Driver Code
Calling function to check
Returns count of occurrences of "1(0 + ) 1"
count = 0 Initialize result
Check if encountered '1' forms a valid pattern as specified
if 1 encountered for first time set oneSeen to 1
Check if there is any other character other than '0' or '1' . If so then set oneSeen to 0 to search again for new pattern
Driver code
Function to check if it possible to make all the strings equal to the T
Stores the frequency of all the strings in the array arr [ ]
Stores the frequency of the T
Iterate over the characters of the T
Iterate in the range [ 0 , N - 1 ]
Iterate over the characters of the arr [ i ]
If freqT [ i ] is 0 and freqS [ i ] is not 0
If freqS [ i ] is 0 and freqT [ i ] is not 0
If freqS [ i ] is not freqT [ i ] * N
Otherwise , return " Yes "
Driver Code
Function to find the number of the groups of 1 s only in the binary string
Stores number of groups of 1 s
Initialization of the stack
Traverse the string S
If S [ i ] is '1
Otherwise
If st is empty
If st is not empty
Return answer
Driver code
Input
Function call
Function to print all palindromic strings of length 3 that can be formed using characters of string S
Stores the count of character
Traverse the string S
Stores all palindromic strings
Iterate over the charchaters over the range [ ' a ' , ' z ' ]
If Hash [ ch ] is equal to 2
Iterate over the characters over the range [ ' a ' , ' z ' ]
Stores all the palindromic string
Push the s into the set st
If Hash [ i ] is greater than or equal to 3
Iterate over charchaters over the range [ ' a ' , ' z ' ]
Stores all the palindromic string
If Hash [ j ] is positive
Push s into the set st
Iterate over the set
Driver Code
Function to count occurrences of the string Y in the string S for every occurrence of X in S
Stores the count of occurrences of X
Stores the lengths of the three strings
Traverse the string S
If the current substring is Y , then increment the value of count by 1
If the current substring is X , then print the count
Driver Code
Function to find whether the given is Accepted by the DFA
If n <= 1 , then prNo
To count the matched characters
Check if the first character is C
Traverse the rest of string
If character is A or B , increment count by 1
If the first character is not C , pr - 1
If all characters matches
Driver Code
Function to find the maximum and minimum number of digits to be removed to make str divisible by 3
Convert the string into array of digits
Count of 0 s , 1 s , and 2 s
Traverse the array
Find the sum of digits % 3
Cases to find minimum number of digits to be removed
Cases to find maximum number of digits to be removed
Driver Code
Function Call
Python3 program for the above approach
Function to find the minimum number of changes to make the string K - periodic and palindrome
Initialize ans with 0
Iterate from 0 to ( K + 1 ) / 2
Store frequency of character
Iterate through all indices , i , i + K , i + 2 k ... . and store the frequency of character
Increase the frequency of current character
Iterate through all indices K - i , 2 K - i , 3 K - i ... . and store the frequency of character
If K is odd & i is samw as K / 2 , break the loop
Increase the frequency of current character
Find the maximum frequency of a character among all visited characters
If K is odd and i is same as K / 2 then , only N / K characters is visited
Otherwise N / K * 2 characters has visited
Return the result
Driver Code
Function Call
Function to check if any index contains more than K active characters
Store the last occurrence of each character
Stores the active characters
Insert the character
If the size of set exceeds K
Remove the character from set if i is the last index of the current character
Driver code
Function to count the strings whose distinct characters count is less than M
Loop to iterate over all the strings of the array
Distinct characters in the String with the help of set
Checking if its less than or equal to M
Driver Code
Function to remove the characters which have odd frequencies in the string
Create a map to store the frequency of each character
To store the new string
Remove the characters which have odd frequencies
If the character has odd frequency then skip
Else concatenate the character to the new string
Return the modified string
Driver code
Remove the characters which have odd frequencies
Recursive Function to find product of elements at k - th level
if subtree is null , just like if root == NULL
Consider only level k node to be part of the product
Recur for Left Subtree
Recur for Right Subtree
Taking care of ' ) ' after left and right subtree
Driver Code
Function to print the most occurring character
Creating a hash of size 26
For loop to iterate through every string of the array
For loop to iterate through every character of the string
Incrementing the count of the character in the hash
Finding the character with the maximum count
Driver code
Declaring Vector of String type
Function that returns true if num is palindrome
Convert the given floating point number into a string
Pointers pointing to the first and the last character of the string
Not a palindrome
Update the pointers
Driver code
Python3 implementation of the approach
Function to return the maximum number of times str1 can appear as a non - overlapping substring bin str2
str1 cannot never be substring of str2
Store the frequency of the characters of str1
Store the frequency of the characters of str2
To store the required count of substrings
Current character doesn 't appear  in str1
Frequency of the current character in str1 is greater than its frequency in str2
Update the count of possible substrings
Driver code
Function to return the number of ways to insert the bracket pairs
Driver code
Python3 implementation of the approach
Set to store all the strings from the given array
To store the required count
Recursive function to find the count of substrings that can be splitted starting from the index start such that all the substrings are present in the map
All the chosen substrings are present in the map
Update the minimum count of substrings
Starting from the substrings of length 1 that start with the given index
Get the substring
If the substring is present in the set
Recursive call for the rest of the string
Function that inserts all the strings from the given array in a set and calls the recursive function to find the minimum count of substrings str can be splitted into that satisfy the given condition
Insert all the strings from the given array in a set
Find the required count
Driver code
Function to return the count of required substrings
For every index of the string
If the substring starting at the current index is " geeks "
If the substring is " for "
Driver code
Defining the string
Storing opening braces in list lst1
Storing closing braces in list lst2
Creating an empty list lst
Creating dictionary to map closing braces to opening ones
If first position of string contain any closing braces return 1
If characters of string are opening braces then append them in a list
When size of list is 0 and new closing braces is encountered then print its index starting from 1
As we encounter closing braces we map them with theircorresponding opening braces using dictionary and check if it is same as last opened braces ( last element in list ) if yes then we delete that elememt from list
Otherwise we return the index ( starting from 1 ) at which nesting is found wrong
At end if the list is empty it means the string is perfectly nested
Python3 implementation of the above approach :
Function to return the encrypted string
Reduce x because rotation of length 26 is unnecessary
calculate the frequency of characters
If the frequency of current character is even then increment it by x
Else decrement it by x
Return the count
Driver code
Function that returns true if it is possible to rearrange the characters of the String such that no two consecutive characters are same
To store the frequency of each of the character
To store the maximum frequency so far
If possible
Driver code
Function to print the uncommon characters in the given string in sorted order
Converting character to ASCII code
Bit operation
Converting character to ASCII code
Bit operation
XOR operation leaves only uncommon characters in the ans variable
Driver code
Returns count of minimum reversals for making expr balanced . Returns - 1 if expr cannot be balanced .
length of expression must be even to make it balanced by using reversals .
To store number of reversals required .
To store number of unbalanced opening brackets .
To store number of unbalanced closing brackets .
If current bracket is open then increment open count .
If current bracket is close , check if it balances opening bracket . If yes then decrement count of unbalanced opening bracket else increment count of closing bracket .
For the case : " " or when one closing and one opening bracket remains for pairing , then both need to be reversed .
Driver Code
Function to return the total number of valid pairs
Count total number of even and odd ascii values for string s1
Count total number of even and odd ascii values for string s2
Return total valid pairs
Driver code
Function to return the count of the required prefix
Find the frequency of first character of str1ing
Driver code
Function to return the minimum operations of the given type required to convert string s to string t
Characters are already equal
Increment count of 0 s
Increment count of 1 s
Driver code
Function to return the decrypted string
Initial jump will be 1
Increment jump by 1 with every character
Driver code
Function to check which bit is to be flipped
variable to store first and last character of string
Check if first and last characters are equal , if yes , then return the character which is not at last
else return last
Driver Code
Function to create Sieve to check primes
false here indicates that it is not prime
If prime [ p ] is not changed , then it is a prime
Update all multiples of p , set them to non - prime
Function to find the sum of prime frequencies of the characters of the given string
map is used to store character frequencies
Traverse the map
If the frequency is prime
Driver code
Python3 implementation of above approach
Function that checks if the frequency of character are a factor or multiple of each other
map store frequency of each character
if any frequency is 0 , then continue as condition is satisfied
if factor or multiple , then condition satisfied
if condition not satisfied
Driver code
Function that removes the characters which have even frequencies in the string
create a map to store the frequency of each character
to store the new string
remove the characters which have even frequencies
if the character has even frequency then skip
else concatenate the character to the new string
display the modified string
Driver code
remove the characters which have even frequencies
function to check if ' str ' is palindrome
traversing from both the ends
not palindrome
palindrome
function to remove all the palindromic words from the given sentence
' final _ str ' to store the final string and ' word ' to one by one store each word of 'str
add space at the end of 'str
traversing 'str
accumulating characters of the current word
if ' word ' is not palindrome then a add it to 'final_str
reset
required final string
Driver Code
Returns numeric value of a subsequence of s . The subsequence to be picked is decided using bit pattern of num ( We pick all thosedigits for which there is a set bit in num )
Initialize the result
till n != 0
if i - th bit is set then add this number
right shift i
function to find combined sum of all individual subsequence sum
length of string
stores the combined
2 ^ n - 1 subsequences
loop for all subsequences
returns the combined sum
driver code
Python Program to find the subsequence with each character occurring at least k times in string s
Function to find the subsequence
Taking an extra array to keep record for character count in s
Counting occurrences of all characters in str [ ]
Printing characters with count >= k in same order as they appear in str .
Driver code
Python3 program to convert a sentence to gOOGLE cASE .
empty strings
convert input string to upper case
checki if character is not a space and adding it to string w
converting first character to lower case and subsequent initial letter of another word to lower case
Driver code
isVowel ( ) is a function that returns true for a vowel and false otherwise .
function to Encrypt the string
cv to count vowel cc to count consonants
Counting prefix count of vowel and prefix count of consonants
generating the encrypted string .
Driver Code
Python program to count the number of occurrence of a word in the given string
split the string by spaces in a
search for pattern in a
if match found increase count
Driver code
Python3 program to print initials of a name
Split the string using ' space ' and print the first character of every word
Driver code
Function to generate permutations
Number of permutations is 2 ^ n
Converting string to lower case
Using all subsequences and permuting them
If j - th bit is set , we convert it to upper case
Printing current combination
Driver code
Function to print the string
If given count is 0 print the given string and return
Start traversing the string
Increment occ if current char is equal to given character
Break the loop if given character has been occurred given no . of times
Print the string after the occurrence of given character given no . of times
Otherwise string is empty
Driver code
utility function to check for vowel
Function to reverse order of vowels
Start two indexes from two corners and move toward each other
swapping
Driver function
A function to check if a string str is palindrome
Start from leftmost and rightmost corners of str
Keep comparing characters while they are same
Returns count of minimum palindromic subseuqnces to be removed to make string empty
If string is empty
If string is palindrome
If string is not palindrome
Driver code
Iterative function to calculate ( x ^ y ) % p in O ( log y )
Initialize result
Update x if it is >= p
If y is odd , multiply x with result
y must be even now y = y 2
Function to return XXX ... . . ( N times ) % M
Return the mod by M of smaller numbers
Creating a string of N X 's
Converting the string to int and calculating the modulo
Checking the parity of N
Dividing the number into equal half
Utilizing the formula for even N
Dividing the number into equal half
Utilizing the formula for odd N
Driver code
Print XXX ... ( N times ) % M
Python3 program for the above approach
Structure of the circle
Utility function to check if given circles satisfy required criteria
Stores the distance between the centres of C1 and C2
Stores the status if the given given criteria is satisfied or not
If C1C2 is less than the sum of the radii of the first 2 circles
If C3 is the midpoint of the centres at C1 and C2
Mark flag true
Return flag
Function to check if the given circles satisfy required criteria
Check for the current combination of circles
Check for the next combination
Driver Code
Python3 program for the above approach
Function to find the eccentricity of a hyperbola
Stores the squared ratio of major axis to minor axis
Increment r by 1
Return the square root of r
Driver Code
Python3 program for the above approach
Function to find the area of cyclic quadrilateral
Stores the value of half of the perimeter
Stores area of cyclic quadrilateral
Return the resultant area
Driver Code
Function to calculate ratio of a triangle inscribed in an ellipse to the triangle on the auxiliary circle
Stores the ratio of the semi - major to semi - minor axes
Print the ratio
Driver Code
Python3 program for the above approach
Function to calculate the distance between a pair of points
Function to calculate the coordinates of the excenters of a triangle
Length of the sides of the triangle
Stores the coordinates of the excenters of the triangle
For I1
For I2
For I3
Print the excenters of the triangle
Driver Code
Python3 program to implement the above approach
Function to calculate height of the trapezoid
Apply Heron 's formula
Calculate the area
Calculate height of trapezoid
Prthe height
Given a , b , p1 and p2
Function to find Icositetragonal number
Formula to calculate nth Icositetragonal number
Driver Code
Function to find area of circle inscribed in a trapezoid having non - parallel sides m , n
radius of circle by the formula i . e . root ( m * n ) / 2 area of circle = ( 3.141 ) * ( R * * 2 )
Driver Code
Function to find the area of equilateral triangle inscribed in a circle of radius R
Base and Height of equilateral triangle
Area using Base and Height
Driver Code
Function to find the area of the circle
Radius cannot be negative
Area of the largest circle
Driver code
Count number of pairs of lines having eger ersection po
Initialize arrays to store counts
Count number of odd and even Pi
Count number of odd and even Qi
Return the count of pairs
Driver code
Function to count maximum number of intersections possible
Driver Code
Python3 implementation of the approach
Function to return the area of triangle BCD
Using Golden ratio
Calculate area of triangle BCD
Return area of all 5 triangles are the same
Function to return the area of regular pentagon
Calculate the area of regular pentagon using above formula
Return area of regular pentagon
Function to return the area of pentagram
Area of a pentagram is equal to the area of regular pentagon and five times the area of Triangle
Driver code
Python 3 program to find the angle subtended by the chord to the centre of the circle when the angle subtended by another equal chord of a congruent circle is given
Driver code
Function to convert digits of N to respective ASCII values
Driver Code
Python 3 program for the above approach
Function to form product array with O ( n ) time and O ( 1 ) space
Stores the product of array
Stores the count of zeros
Traverse the array
If arr [ i ] is not zero
If arr [ i ] is zero then increment count of z by 1
Stores the absolute value of the product
If Z is equal to 1
If arr [ i ] is not zero
Else
If count of 0 s at least 2
Assign arr [ i ] = 0
Store absolute value of arr [ i ]
Find the value of a / b
If arr [ i ] and product both are less than zero
If arr [ i ] and product both are greater than zero
Else
Traverse the array arr [ ]
Driver Code
Function Call
Function to count of subarrays made up of single digit integers only
Stores count of subarrays
Stores the count of consecutive single digit numbers in the array
Traverse the array
Increment size of block by 1
Increment res by count
Assign count = 0
Driver Code
Given array
Size of the array
Function to check if the number N can be expressed as sum of 2 or more consecutive numbers or not
Function to count integers in the range [ 1 , N ] that can be expressed as sum of 2 or more consecutive numbers
Stores the required count
Driver Code
Function to count integers in the range [ 1 , N ] that can be expressed as sum of 2 or more consecutive numbers
Count powers of 2 up to N
Increment count
Update current power of 2
Driver Code
Python 3 program for the above approach
Function to calculate maximum difference between adjacent elements excluding every array element once
Compute maximum adjacent difference for whole array
Store the maximum between arr_max and curr_max
Append the result into a vector
Print the result
Driver Code
Function to find min operations to make even and odd count equal
Odd size will never make odd and even counts equal
Stores the count of even numbers in the array arr [ ]
Stores count of odd numbers in the array arr [ ]
Traverse the array arr [ ]
If arr [ i ] is an even number
Update cntEven
Odd numbers in arr [ ]
Return absolute difference divided by 2
Driver Code
Function call
Function to find count the ways to construct an array , B [ ] such that abs ( A [ i ] - B [ i ] ) <= 1 and product of elements of B [ ] is even
Stores count of arrays B [ ] such that abs ( A [ i ] - B [ i ] ) <= 1
Stores count of arrays B [ ] whose product of elements is not even
Traverse the array
Update total
If A [ i ] is an even number
Update oddArray
Print 3 ^ N - 2 ^ X
Driver Code
Function to count the numbers in the range [ 1 , N ] whose rightmost set bit is K
Stores the number whose rightmost set bit is K
Numbers whose rightmost set bit is i
Subtracting the number whose rightmost set bit is i , from N
Since i = k , then the number whose rightmost set bit is K is stored
Driver Code
Function to count set bits in binary representation of number N
Count set bits in N
Return the final count
Driver Code
Print odd Binomial coefficients
Print even Binomial coefficients
Function to find the minimum number of replacements required to make all array elements even
Stores the count of odd elements
Traverse the array
Increase count of odd elements
Store number of replacements required
Two extra moves will be required to make the last odd element even
Prthe minimum replacements
Driver Code
Function call
Function to partition squares of N natural number in two subset
Store the count of blocks of size 8
Partition of block of 8 element
Store the minimum subset difference
Partition of N elements to minimize their subset sum difference
Store elements of subset A and B
If element is of type A
If the element is of type B
Print the minimum subset difference
Print the first subset
Print the second subset
Driver Code
Function call
Python3 program to implement the above approach
Function to find the largest number X such that it divides P but is not divisible by Q
Stores the frequency count of of all Prime Factors
Increment the frequency of the current prime factor
If Q is a prime factor
Stores the desired result
Iterate through all divisors of Q
Stores the frequency count of current prime divisor on dividing P
Count the frequency of the current prime factor
If cur is less than frequency then P is the final result
Iterate to get temporary answer
Update current answer
Print the desired result
Driver Code
Given P and Q
Function Call
Function to check if there is any row where number of unique elements are greater than 1
Iterate over the matrix
Function to check if it is possible to rearrange mat [ ] [ ] such that XOR of its first column is non - zero
Find bitwise XOR of the first column of mat [ ] [ ]
If bitwise XOR of the first column of mat [ ] [ ] is non - zero
Otherwise check rearrangements
Driver Code
Given Matrix mat [ ] [ ]
Function Call
Function to maximize the value for the given function and the array elements
Vector array to maintain which bit is set for which integer in the given array by saving index of that integer
Check if j - th bit is set for i - th integer
Push the index of that integer in setBit [ j ]
Find the element having highest significant set bit unset in other elements
Place that integer at 0 - th index
Store the maximum AND value
Return the answer
Driver Code
Function call
Function returns nCr i . e . Binomial Coefficient
Initialize res with 1
Since C ( n , r ) = C ( n , n - r )
Evaluating expression
Function to calculate and return the sum of the products
Initialize sum to 0
Traverse from 0 to k
Driver code
Function to return a ^ n
Stores final answer
Check if current LSB is set
Right shift
Driver code
Function to find the integer M such that gcd ( N , M ) is maximum
Initialize variables
Find all the divisors of N and return the maximum divisor
Check if i is divisible by N
Update max_gcd
Return the maximum value
Driver Code
Given number
Function call
Python3 program for the above approach
For storing smallest prime factor
Function construct smallest prime factor array
Mark smallest prime factor for every number to be itself
separately mark spf for every even number as 2
Check if i is prime
Mark SPF for all numbers divisible by i
Mark spf [ i ] if it is not previously marked
Function for counts total number of prime factors
Function to print elements of sets of K consecutive elements having K prime factors
To store the result
Count number of prime factors of number
If number has exactly K factors puch in result [ ]
Iterate till we get K consecutive elements in result [ ]
Count sequence until K
Print the element if count >= K
Driver Code
To construct spf [ ]
Given N and K
Function call
Function to multiply Complex Numbers with just three multiplications
Find value of prod1 , prod2 and prod3
Real part
Imaginary part
Print the result
Given four numbers
Function call
Function to check if a number is an Insolite numbers
To store sum of squares of digits
To store product of squares of digits
extracting digit
Driver Code
Function Call
Function to calculate the sum of all divisors of a given number
Sum of divisors
Find all divisors which divides 'num
If ' i ' is divisor of 'n
If both divisors are same then add it once else add both
Add 1 and n to result as above loop considers proper divisors greater than 1.
Function to check if N is a superabundant number
To check all numbers from 1 to N
Driver code
Python3 implementation for the above approach
Function to find the N - th icosikaipentagon number
number should be greater than 3
Check every k in range 2 to n - 1
condition for D - Number
Driver code
Function to find prime divisors of all numbers from 1 to N
If the number is prime
Add this prime to all it 's multiples
Function to check Ruth - Aaron number
Driver code
Function for maximising the sum
Difference is 0 when only one element is present in array
Difference is K when two elements are present in array
Otherwise
Driver code
Python3 program for the above approach
Functions returns sum of numbers from 1 to n
Functions returns sum of numbers from a + 1 to b
Function returns total sum of divisors
Stores total sum
Finding numbers and its occurence
Sum of product of each number and its occurence
Driver code
Function to check if a string is double string or not
a and b should not be equal
Condition to check if length is odd make length even
First half of s
Second half of s
Double string if first and last half are equal
Function to check if N is an Nontrivial undulant number
Driver Code
Function to find the nth Megagon Number
Driver Code
Python3 implementation to find the product of all the pairs from the given array
Function to return the product of the elements of all possible pairs from the array
To store the required product
Nested loop to calculate all possible pairs
Multiply the product of the elements of the current pair
Return the final result
Driver code
Python3 implementation to Find the product of all the pairs from the given array
Function to calculate ( x ^ y ) % 1000000007
Initialize result
Update x if it is more than or equal to p
If y is odd , multiply x with result
Return the final result
Function to return the product of the elements of all possible pairs from the array
To store the required product
Iterate for every element of the array
Each element appears ( 2 * n ) times
Driver code
Function to create and print the array
Initialise the array of size N
Print the array
Driver code
Function to check whether a number is prime or not
Function to find number of subsequences whose product is a composite number
Find total non empty subsequence
Find count of prime number and ones
Calculate the non empty one subsequence
Find count of composite subsequence
Driver code
Function to check if a number can be expressed as the sum of k consecutive
Finding the first term of AP
Checking if first term is an integer
Loop to print the K consecutive integers
Driver Code
Function to print the representation
N must be greater than equal to 2 * K and must be even
Driver Code
Function to find the number of subarrays including the element at every index of the array
Creating an array of size N
The loop is iterated till half the length of the array
Condition to avoid overwriting the middle element for the array with even length .
Computing the number of subarrays
The ith element from the beginning and the ending have the same number of possible subarrays
Function to print the vector
Driver code
Python3 program to find the smallest number greater than or equal to X and divisible by Y
Function that returns the sum of digits of a number
Initialize variable to store the sum
Add the last digit of the number
Remove the last digit from the number
Function that returns the smallest number greater than or equal to X and divisible by Y
Initialize result variable
Loop through numbers greater than equal to X
Calculate sum of digits
Check if sum of digits is divisible by Y
Driver code
Function to count the numbers which can convert N to 1 using the given operation
Store all the divisors of N
If i is a divisor
If i is not equal to N / i
Iterate through all the divisors of N - 1 and count them in answer
Check if N - 1 is a divisor or not
Iterate through all divisors and check for N mod d = 1 or ( N - 1 ) mod d = 0
Driver code
Function to find the maximum possible prime divisors of a number can have with N divisors
Number of time number divided by 2
Divide by other prime numbers
If the last number of also prime then also include it
Driver Code
Function Call
Function returns the count of ways express a number as sum of two numbers .
Driver code
Function to find the max - size to which an array can be divided into 2 equal parts
Vector to find the frequency of each element of list
Find the maximum frequency element present in list arr
Find total unique elements present in list arr
Find the Max - Size to which an array arr [ ] can be splitted
Find the first array containing same elements
Find the second array containing unique elements
Driver code
Initialise n
Array declaration
Size of array
Iterative Function to calculate ( x ^ y ) % p in O ( log y )
Initialize result
Update x if it is more than or equal to p
If y is odd , multiply x with result
y must be even now y = y >> 1 y = y / 2
Returns n ^ ( - 1 ) mod p
Returns nCr % p using Fermat 's little theorem.
Base case
Fill factorial array so that we can find all factorial of r , n and n - r
Function returns sum of xor of all unordered triplets of the array
Iterating over the bits
Number of elements whith k 'th bit  1 and 0 respectively
Checking if k 'th bit is 1
Adding this bit 's part to the answer
Drivers code
Python3 implementation to find the probability of not getting two consecutive heads together when N coins are tossed
Function to compute the N - th Fibonacci number in the sequence where a = 2 and b = 3
The first two numbers in the sequence are initialized
Base cases
Loop to compute the fibonacci sequence based on the first two initialized numbers
Function to find the probability of not getting two consecutive heads when N coins are tossed
Computing the number of favourable cases
Computing the number of all possible outcomes for N tosses
Driver code
Function to check if a number is a perfect Cube or not
Function to check if concatenation of two numbers is a perfect cube or not
Convert numbers to string using to_string ( )
Concatenate the numbers and convert it into integer
Check if concatenated value is perfect cube or not
Driver Code
Function to return the largest sum
Variable to store the largest sum
Map to store the frequencies of each element
Store the Frequencies
Loop to combine duplicate elements and update the sum in the map
If j is a duplicate element
Update the frequency of 2 * j
If the new sum is greater than maximum value , Update the maximum
Returns the largest sum
Driver Code
Function Calling
Function to check if it is possible to make x and y can become 0 at same time
Check the given conditions
Driver Code
Function Call
Python3 program to check if the given number is prime using Wheel Factorization Method
Function to check if a given number x is prime or not
The Wheel for checking prime number
Base Case
Check for the number taken as basis
Check for Wheel Here i , acts as the layer of the wheel
Check for the list of Sieve in arr [ ]
If number is greater than sqrt ( N ) break
Check if N is a multiple of prime number in the wheel
If at any iteration isPrime is false , break from the loop
Driver 's Code
Function call for primality check
Function to prall possible pairs from the array
Nested loop for all possible pairs
Driver code
Python3 implementation of the approach
Function to return ( 2 ^ P % mod )
Function to return the sum of cubes of subsets
cubing the elements and adding it to ans
Driver code
Python3 program to check if one circle lies inside another circle or not .
Driver code
Function to find the length of the direct common tangent
Driver code
Function to find the radius
Driver code
Function to find the shortest distance
Driver code
Python3 program to find the length of the direct common tangent between two circles which do not touch each other
Function to find the length of the direct common tangent
Driver code
Function to find the side of the square
the side cannot be negative
side of the square
Driver code
Python 3 Program to find the apothem of a regular polygon with given side length
Function to find the apothem of a regular polygon
Side and side length cannot be negative
Degree converted to radians
Driver code
Python 3 Program to find the area of a regular polygon with given side length
Function to find the area of a regular polygon
Side and side length cannot be negative
Area degree converted to radians
Driver code
Python 3 implementation of the approach
Function to calculate the side of the polygon circumscribed in a circle
Driver Code
Total sides of the polygon
Radius of the circumscribing circle
Function to find the biggest right circular cylinder
radii and height cannot be negative
radius of right circular cylinder
height of right circular cylinder
volume of right circular cylinder
Driver code
Function to calculate the perimeter
Calculate Perimeter
driver code
Get the number of sides
Get the length of side
find perimeter
Function to find the area of the biggest rhombus
the length and breadth cannot be negative
area of the rhombus
Driver code
function to find if given point lies inside a given rectangle or not .
Driver code
bottom - left and top - right corners of rectangle . use multiple assignment
given point
function call
Python program to find the Perpendicular ( shortest ) distance between a point and a Plane in 3 D .
Function to find distance
Driver Code
Function call
function to find the Volume of triangular prism
formula to find Volume
Driver Code
function calling
Function to check if the given integers value make a rectangle
check all sides of rectangle combinations
Driver code
Function to find the midpoint of a line
Driver Code
Python3 code to calculate length of an arc
function to calculate arc length
Driver Code
python program to check if a line touches or intersects or outside a circle .
Finding the distance of line from center .
Checking if the distance is less than , greater than or equal to radius .
Driven Program
Function to find the line given two points
Function which converts the input line to its perpendicular bisector . It also inputs the points whose mid - point lies on the bisector
c = - bx + ay
Returns the intersection point of two lines
The lines are parallel . This is simplified by returning a pair of ( 10.0 ) * * 19
Line PQ is represented as ax + by = c
Line QR is represented as ex + fy = g
Converting lines PQ and QR to perpendicular vbisectors . After this , L = ax + by = c M = ex + fy = g
The point of intersection of L and M gives the circumcenter
Driver code .
( X [ i ] , Y [ i ] ) are coordinates of i 'th point.
Initialize area
Calculate value of shoelace formula
Return absolute value
Driver program to test above function
Function top get LSB value of v
Binary conversion
Function to find the sum of LSBs of all possible pairs of the given array
Stores the LSB of array elements
Storing the LSB values
Sort the array lab_arr [ ]
Taking pairwise sum to get the maximum sum of LSB
Print the result
Driver Code
Function Call
Function to find count of subsequences having odd bitwise AND value
Stores count of odd elements
Traverse the array arr [ ]
If x is odd increment count
Return Answer
Driver Code
Function Call
Function to find the number of pairs ( i , j ) such that abs ( a [ i ] - a [ j ] ) is at least the minimum of ( a [ i ] , a [ j ] )
Stores the resultant count of pairs
Iterate over the range [ 0 , n ]
Iterate from arr [ i ] - ( i % arr [ i ] ) till n with an increment of arr [ i ]
Count the possible pairs
Return the total count
Driver Code
Function to check if N can be changed to 1 or not .
Count the number of 2 in the prime factorisation of N
Count the number of 5 in the prime factorisation of N
Driver Code
Function to find the sum of elements in a given range of an infinite array
Stores the sum of array elements from L to R
Traverse from L to R
Print the resultant sum
Driver Code
Function to find the sum of elements in a given range of an infinite array
Stores the prefix sum
Calculate the prefix sum
Stores the sum of elements from 1 to L - 1
Stores the sum of elements from 1 to R
Print the resultant sum
Driver Code
Function to find exponential factorial of a given number
Stores the exponetial factor of N
Iterare over the range [ 2 , N ]
Update res
Return res
Input
Function call
Function to find contiguous subarray with maximum sum if array is repeated K times
Store the sum of the array arr [ ]
Traverse the array and find sum
Store the answer
If K = 1
Apply Kadane algorithm to find sum
Return the answer
Stores the twice repeated array
Traverse the range [ 0 , 2 * N ]
Stores the maximum suffix sum
Stores the maximum prefix sum
Apply Kadane algorithm for 2 repetition of the array
If the sum of the array is greater than 0
Return the answer
Driver Code
Given Input
Function Call
Function to find count of subarrays which have max element greater than twice maximum of all other elements
Stores the count of subarrays
Generate all possible subarrays
Stores the maximum element of the subarray
Stores the maximum of all other elements
Find the maximum element in the subarray [ i , j ]
Find the maximum of all other elements
If the maximum of subarray is greater than twice the maximum of other elements
Print the maximum value obtained
Driver Code
Function to find count of subarrays which have max element greater than twice maximum of all other elements
Stores the maximum element of the array
Traverse the given array
If the value of 2 * arr [ i ] is greater than mx
Update the value of L and break out of loop
If the value 2 * arr [ i ] is greater than mx
Update the value of R and break out of loop
Print the final answer
Driver Code
Python3 program for the above approach
Utility function to check for primality of a number X by checking whether X haACCs any factors other than 1 and itself .
Factor found
Function to print primes just less than and just greater than of each element in an array
Traverse the array
Traverse for finding prime just less than A [ i ]
Prime just less than A [ i ] found
Traverse for finding prime just greater than A [ i ]
Prime just greater than A [ i ] found
Driver code
Input
Function call
Function to find the Kth smallest element that contains A [ i ] exactly B [ i ] times
Traverse the given array
Stores the frequency of every elements
Traverse the given array
Initialize a variable to store the prefix sums
Iterate over the range [ 0 , M ]
Increment sum by freq [ i ]
If sum is greater than or equal to K
Return the current element as answer
Return - 1
Driver Code
Given Input
Function call
Function to find the Bitwise OR of Bitwise AND of all subarrays
Stores the required result
Generate all the subarrays
Store the current element
Find the Bitwise OR
Update the result
Print the result
Driver Code
Function to find the Bitwise OR of Bitwise AND of all consecutive subsets of the array
Stores the required result
Traverse the given array
Print the result
Driver Code
Function to check if the sum of the digits of N is strictly greater than the product of the digits of N or not
Stores the sum and the product of the digits of N
Stores the last digit if N
Increment the value of sumOfDigits
Update the prodOfDigit
Divide N by 10
Print the result
Driver Code
Print all distinct even & odd prefix Bitwise XORs from 1 to N
Print the even number
Print the odd number
Driver Code
Function to lexicographic largest permutation possible by a swap that is smaller than given array
Find the index of first element such that arr [ i ] > arr [ i + 1 ]
If the array is sorted in increasing order
Find the index of first element which is smaller than arr [ i ]
If arr [ j ] = = arr [ j - 1 ]
Decrement j
Swap the element
Pr the array arr [ ]
Driver Code
Function to find the smallest prime factor of all the numbers using Sieve Of Eratosthenes
Stores whether any number is prime or not
Initialize smallest factor as 2 for all the even numbers
Iterate over the range [ 3 , N ]
If i is prime
Iterate all multiples of i
i is the smallest prime factor of i * j
Function to find the absolute difference between the count of odd and even factors of N
Stores the smallest prime factor of i
Fill values in s [ ] using sieve of eratosthenes
Stores the total number of factors and the total number of odd and even factors
Store the current prime factor of the number N
Store the power of current prime factor
Loop while N is greater than 1
If N also has smallest prime factor as curr , then increment cnt by 1
Update only total number of factors if curr is 2
Update total number of factors and total number of odd factors
Update current prime factor as s [ N ] and count as 1
Calculate the number of even factors
Print the difference
Driver Code
Function to find the median of a group of data with given mean and mode
Calculate the median
Print the median
Driver code
Python3 program for the above approach
Function to calculate magnitude of a 3 dimensional vector
Stores the sum of squares of coordinates of a vector
Return the magnitude
Driver code
Python3 program for the above approach
Function to find prodcut of a Mersenne number with another number
Stores the power of 2 of integer M + 1
Return the product
Driver Code
Python3 program for the above approach
Function to find nearest perfect square of num
Calculate square root of num
Calculate perfect square
Find the nearest perfect square
Function to find the power of 2 nearest to the number num
Calculate log base 2 of num
Highest power of 2 which is <= num
Function to find the nearest perfect square and the nearest power of 2 of every array element whose occurrence is 1
Stores frequency of array elements
Traverse the array and update frequency of current array element
Traverse the map freq
If the frequency is 1
Find nearest perfect square
Print the nearest power of 2
If the any does not contain any non - repeating elements
Driver Code
Python3 program for the above approach
Function to partition the array into two non - empty subarrays which satisfies the given condition
Stores the suffix Min array
Stores the Minimum of a suffix
Traverse the array in reverse
Update Minimum
Store the Minimum
Stores the Maximum value of a prefix
Stores the index of the partition
Update Max
If Max is less than Min [ i + 1 ]
Store the index of partition
break
If ind is not - 1
Print first subarray
Print second subarray
Otherwise
Driver Code
Python3 program for the above approach
Function to count all prime factors of a given number
Count the number of 2 s that divides n
Since n is odd at this point , skip one element
While i divides n , count i and divide n
If n is a prime number greater than 2
Function to find the sum of first n nearly prime numbers
Store the required sum
Add this number if it is satisfies the condition
Increment count of nearly prime numbers
Function to check if N can be represented as sum of K different positive integers out of which at least K - 1 of them are nearly prime
Store the sum of first K - 1 nearly prime numbers
If sum is great than or equal to n
Otherwise , prYes
Driver Code
Python3 program for the above approach
Function to calculate GCD of a and b using Euclidean Algorithm
Iterate until b is non - zero
Return the GCD
Function to count the number of ways N can be expressed as x ^ y
Base Case
Stores the gcd of powers
Calculate the degree of 2 in N
Calculate the degree of prime numbers in N
Calculate the degree of prime ' i ' in N
If N is a prime , g becomes 1.
Stores the number of ways to represent N as x ^ y
Find the number of Factors of g
Update the count of ways
Iterate to find rest of the prime numbers
Find the power of i
Update the count of ways
If g is prime
Return the total number of ways
Driver Code
Python3 implementation of the above approach
Function to return the lowest power of 2 close to given positive number
Floor function is used to determine the value close to the number
Function to return the lowest power of 2 close to given negative number
Ceil function is used for negative numbers as - 1 > - 4. It would be opposite to positive numbers where 1 < 4
Function to find the highest power of 2
To check if the given number is positive or negative
If the number is negative , then the ceil of the positive number is calculated and negative sign is added
Driver code
Function to find number of cards needed
Driver Code
Function for finding the smallest possible number after swapping the digits any number of times
Variable to store the final answer
Array to store the count of occurrence of each digit
Loop to calculate the number of occurrences of every digit
Loop to get smallest number
Returning the answer
Driver code
Function to count the number of sub - arrays with sum strictly greater than the remaining elements of array
For loop for beginning point of a subarray
For loop for ending point of the subarray
Initialise subarray_sum and remaining_sum to 0
For loop to calculate the sum of generated subarray
For loop to calculate the sum remaining array element
Checking for condition when subarray sum is strictly greater than remaining sum of array element
Driver code
Python3 implementation of the above approach
Calculating total sum of given array
For loop for beginning point of a subarray
initialise subarray_sum to 0
For loop for calculating subarray_sum and remaining_sum
Calculating subarray_sum and corresponding remaining_sum
Checking for the condition when subarray sum is strictly greater than the remaining sum of the array element
Driver code
Function to return the maximized XOR after removing an element from the array
Find XOR of the complete array
To store the final answer
Iterating through the array to find the final answer
Return the final answer
Driver code
Function that returns true if num contains at least one digit that divides k
Get the last digit
If the digit is non - zero and it divides k
Remove the last digit
There is no digit in num that divides k
Function to return the required count of elements from the given range which contain at least one digit that divides k
To store the result
For every number from the range
If any digit of the current number divides k
Driver code
Function to check if the given number is a factorial of any number
Driver Code
Python3 implementation of the above approach
Function to return the LCM of two numbers
Function to return the minimum LCM after removing a single element from the given array
Prefix and Suffix arrays
Single state dynamic programming relation for storing LCM of first i elements from the left in Prefix [ i ]
Initializing Suffix array
Single state dynamic programming relation for storing LCM of all the elements having index greater than or equal to i in Suffix [ i ]
If first or last element of the array has to be removed
If any other element is replaced
Return the minimum LCM
Driver code
Function to return the count of coloured 0 s in an n - level hexagon
Driver code
Function to return the minimum required value
Find the sum of the array elements
Return the required value
Driver code
Python3 implementation of the approach
Function to return ( m ! % MOD )
Driver code
Python3 implementation of the approach
Function to return ( 2 ^ P % mod )
Function to return the sum of squares of subsets
Squaring the elements and adding it to ans
Driver code
Python3 program to find the number of pairs such that gcd equals to 1
Function to calculate least prime factor of each number
If it is a prime number
For all multiples which are not visited yet .
Function to find the value of Mobius function for all the numbers from 1 to n
If number is one
If number has a squared prime factor
Multiply - 1 with the previous number
Function to find the number of pairs such that gcd equals to 1
To store maximum number
To store frequency of each number
Find frequency and maximum number
To store number of pairs with gcd equals to 1
Traverse through the all possible elements
Return the number of pairs
Driver code
Function call
Python3 implementation of the approach
Function to compare x ^ y and y ^ x
Storing values OF x ^ y AND y ^ x
Comparing values
Driver code
Function to prfirst n zigzag numbers
To store factorial and n 'th zig zag number
Initialize factorial upto n
Set first two zig zag numbers
Print first two zig zag number
Print the rest zig zag numbers
Binomial ( n , k ) * a ( k ) * a ( n - k )
Store the value
Print the number
Driver code
Function call
if the sequence is a ( 1 ) a ( 2 ) a ( 3 ) . . a ( n - 1 ) check if the sequence can be represented as x * ( y ^ k ) find the largest value of k
count
pattern of elements of size i from the end of sequence
count
extract the pattern in a reverse order
check how many times the pattern is repeated
if the element dosent match
if the end of pattern is reached set value of k = 0 and increase the count
return the max count
print first n terms of Gijswijt 's sequence
set the count
stoes the element
print the first n terms of the sequence
push the element
find the count for next number
Driver Code
Stores the Wedderburn Etherington numbers
Function to return the nth Wedderburn Etherington numbers
Base case
If n is even n = 2 x
get x
a ( 2 x ) = a ( 1 ) a ( 2 x - 1 ) + a ( 2 ) a ( 2 x - 2 ) + ... + a ( x - 1 ) a ( x + 1 )
a ( x ) ( a ( x ) + 1 ) / 2
Store the ans
Return the required answer
If n is odd
a ( 2 x - 1 ) = a ( 1 ) a ( 2 x - 2 ) + a ( 2 ) a ( 2 x - 3 ) + ... + a ( x - 1 ) a ( x ) ,
Store the ans
Return the required answer
Function to prfirst N Wedderburn Etherington numbers
Store first 3 numbers
PrN terms
Driver code
function call
Function to maximum value after merging all elements in the array
To check if positive and negative elements present or not
Check for positive integer
Check for negative integer
If both positive and negative elements are present
To store maximum value possible
To find minimum value
Remove minimum element
Replace with absolute values
To find minimum value
Remove minimum element
Return the required sum
Driver code
Function call
Recursive function to convert n to its binary equivalent
Base case
Recursive call
Driver code
Function to find A , B and C
Keep minimum number in x
Find the numbers
Driver code
Function call
Function that returns true if A can be converted to B with the given operations
If the current number ends with 1
If the current number is divisible by 2
If the above two conditions fail
If it is possible to convert A to B
Driver code
Function to return the count of distinct rectangles
Driver Code
Function to return the number of days required
Driver code
Function to return the average of x and y using bit operations
Calculate the average Floor value of ( x + y ) / 2
Driver code
Function to find the smallest index such that there are no 0 or 1 to its right
Initially
Traverse in the array
Check if array element is 1
a [ i ] = 0
Return minimum of both
Driver code
Function to return the count of squares that can be visited by king in m moves
To store the count of squares
Check all squares of the chessboard
Check if square ( i , j ) is at a distance <= m units from king 's current position
Return count of squares
Driver code
Function to return the count of quadruples
Hash table to count the number of occurrences
Traverse and increment the count
Run two nested loop for second and third element
If they are same
Initially decrease the count
Find the first element using common difference
Find the fourth element using GP y ^ 2 = x * z property
If it is an integer
If not equal
Same elements
Later increase the value for future calculations
Driver code
Function to return the count of required numbers
Count of numbers present in given range
Number of groups of 9 elements starting from L
Left over elements not covered in factor 9
One Number in each group of 9
To check if any number in rem satisfy the property
Driver code
Function to return the sum of even elements after updating value at given index
Add given value to A [ index ]
To store the sum of even elements
If current element is even
Function to print result for every query
Resultant vector that stores the result for every query
Get sum of even elements after updating value at given index
Store sum for each query
Print the result for every query
Driver code
Function to print the result for every query
If current element is even
If element is even then remove it from sum
If the value becomes even after updating
Store sum for each query
Print the result for every query
Driver code
Python3 program for implementation of the above program
Function that calculates number of Hamiltonian cycle
Calculating factorial
Driver code
Function that returns true if n contains digit m exactly k times
Function to return the smallest integer > n with digit m occurring exactly k times
Driver code
Function to return the count of odd numbers in the array
Variable to count odd numbers
Odd number
Function to return the count of valid pairs
Driver Code
Function to return the gcd of two numbers
Function to return the lcm of all the elements of the array
To calculate lcm of two numbers multiply them and divide the result by gcd of both the numbers
Return the LCM of the array elements
Function to return the smallest perfect cube divisible by all the elements of arr [ ]
LCM of all the elements of arr [ ]
If 2 divides lcm cnt number of times
Check all the numbers that divide lcm
Return the answer
Driver code
Python 3 program to check if given number is strong prime
Utility function to check if a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Function that returns true if n is a strong prime
If n is not a prime number or n is the first prime then return false
Initialize previous_prime to n - 1 and next_prime to n + 1
Find next prime number
Find previous prime number
Arithmetic mean
If n is a strong prime
Driver code
function to return the required number of digits to be removed
Converting the given number into string
variable to store number of digits to be removed
variable to denote if atleast one zero has been found
zero found
return size - 1 if K is not zero and atleast one zero is present , otherwise result
Driver Code
Python 3 program to find the sum of the given series
Function to return the sum of the series
variable to store the answer
Math . pow ( x , y ) returns x ^ y
Driver code
Print the sum of the series
Python Program to check Unusual number
Utility function to find largest prime factor of a number
Initialize the maximum prime factor variable with the lowest one
Print the number of 2 s that divide n
n must be odd at this point , thus skip the even numbers and iterate only for odd integers
This condition is to handle the case when n is a prime number greater than 2
Function to check Unusual number
Get the largest Prime Factor of the number
Check if largest prime factor is greater than sqrt ( n )
Driver Code
Function to print the desired result after computation
Driver Code
Python3 program to check if the given number is Ore number
Function that returns harmonic mean
Note that this loop runs till square root
If divisors are equal , store 'i
Otherwise store ' i ' and ' n / i ' both
Utility function to calculate harmonic mean of the divisors
Declare sum variables and initialize with zero .
calculate denominator
Calculate harmonic mean and return
Function to check if a number is ore number
Calculate Harmonic mean of divisors of n
Check if harmonic mean is an integer or not
Driver Code
Python3 program to check Euclid Number
Function to generate the Prime numbers and store their products
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
store prefix product of prime numbers to unordered_set 's
update product by multiplying next prime
insert ' produc + 1' to set
Function to check the number for Euclid Number
Check if number exist in unordered set or not If exist , return true
Driver code
Get the prime numbers
Get n
Check if n is Euclid Number
Get n
Check if n is Euclid Number
Utility function to check if a number is prime or not
Corner cases
This is checked so that we can skip middle five numbers in below loop
Utility function to Check power of two
Driver Code
Check if number is prime and of the form ( 2 ^ q + 1 ) / 3
Python 3 Program to find the area of the square inscribed within the circle which in turn is inscribed in a hexagon
Function to find the area of the square
side of hexagon cannot be negative
area of the square
Driver code
calculate Nth term of series
Driver code
Function to calculate the sum
number of terms to be included in the sum
find the Sum
Function to check if arrays are permutations of each other
Calculating sum and multiply of first array
Calculating sum and multiply of second array
If sum and mul of both arrays are equal , return true , else return false .
Driver code
Function to find the B start to C
When B completed it 's 100 meter  then Completed meters by C is
Driver Code
When A completed it 's 100 meter  Then completed meters of B and C is
Function to calculate the time
Driver Code
Function to check Divisibility
Sum of all individual digits
Condition
Driver Code
Octal number
Python 3 program to find sum of prime divisors of N
Function to check if the number is prime or not .
Corner cases
This is checked so that we can skip middle five numbers in below loop
function to find sum of prime divisors of N
Driver code
function to find prime divisors of all numbers from 1 to n
if the number is prime
add this prime to all it 's multiples
Driver code
Function to find power
Update x if it is more than or equal to p
If y is odd , multiply x with the result
y must be even now y = y >> 1 y = y / 2
Driver Code
String input as b is very large
Reduce the number B to a small number using Fermat Little
Function to find the square of 333. . .333 , 666. . .666 and 999. . .999
if the number is 333. . .333
if the number is 666. . .666
if the number is 999. . .999
variable for hold result
find the no of digit
add size - 1 time a in result
add one time b in result
add size - 1 time c in result
add one time d in result
return result
Drivers code Your Python 3 Code
find square of 33. .33
find square of 66. .66
find square of 66. .66
Python3 program to implement the above approach To run this code , we need to copy modular inverse from below post . https : www . geeksforgeeks . org / multiplicative - inverse - under - modulo - m /
naive method - calculating the result in a single line
modular_inverse ( ) is a user defined function that calculates inverse of a number
it will use extended Eucledian algorithm or Fermat 's Little  Theorem for calculation.  MMI of 120 under division by  1000000007 will be 808333339
Function to find the required factorial
Function to find nCr
function to find the number of ways
Driver code
Python3 program to find Pythagorean Triplet of given sum .
Considering triplets in sorted order . The value of first element in sorted triplet can be at - most n / 3.
The value of second element must be less than equal to n / 2
Driver Code
function to calculate factorial of a number
Function to print the series
calculating the value of n !
loop to display the series
For calculating the value of nCr
calculating the value of A to the power k and X to the power k
display the series
Driver Code
Function to calculate series sum
Driver code
Function to return power of a no . ' r ' in factorial of n
Keep dividing n by powers of ' r ' and update count
Driver Code
Returns the Avg of first n odd numbers
sum of first n odd number
Average of first n odd numbers
Driver Code
Return the average of sum of first n odd numbers
Driver Code
function to fill Fibonacci Numbers in f [ ]
1 st and 2 nd number of the series are 1 and 1
Add the previous 2 numbers in the series and store it
Fill Fibonacci numbers in f [ ] using fib ( ) . We need N = n * ( n + 1 ) / 2 Fibonacci numbers to make a triangle of height n
To store next Fibonacci Number to print
for loop to keep track of number of lines
For loop to keep track of numbers in each line
Driver code
Function to calculate the average of odd numbers
count odd numbers
store the sum of odd numbers
Driver function
Function to calculate the average of odd numbers
driver function
Python program to find max between two Rational numbers
Get lcm of two number 's
Get max rational number
Find the LCM of first -> denominator and sec -> denominator
Declare nume1 and nume2 for get the value of first numerator and second numerator
Driver Code
Function to find the trinomial triangle value .
base case
base cas
recursive step .
Function to print Trinomial Triangle of height n .
printing n rows .
printing first half of triangle
printing second half of triangle .
Driven Code
Function to find the trinomial triangle value .
Using property of trinomial triangle .
If value already calculated , return that .
base case
base case
recursive step and storing the value .
Function to print Trinomial Triangle of height n .
printing n rows .
printing first half of triangle
printing second half of triangle .
Driven Program
function to find sum of largest prime factor of each number less than equal to n
Create an integer array " prime [ 0 . . n ] " and initialize all entries of it as 0. A value in prime [ i ] will finally be 0 if ' i ' is a prime , else it will contain the largest prime factor of ' i ' .
If prime [ p ] is '0' , then it is a prime number
Update all multiples of p
Sum up the largest prime factor of all the numbers
if ' p ' is a non - prime number then prime [ p ] gives its largesr prime factor
' p ' is a prime number
required sum
Driver code to test above function
Calculates sum of multiples of a number upto N
Number of multiples
sum of first m natural numbers
sum of multiples
Driver Code
returns 1 when str is power of 2 return 0 when str is not a power of 2
sum stores the intermediate dividend while dividing .
if the input is "1" then return 0 because 2 ^ k = 1 where k >= 1 and here k = 0
Divide the number until it gets reduced to 1 if we are successfully able to reduce the number to 1 it means input string is power of two if in between an odd number appears at the end it means string is not divisible by two hence not a power of 2.
if the last digit is odd then string is not divisible by 2 hence not a power of two return 0.
divide the whole string by 2. i is used to track index in current number . j is used to track index for next iteration .
if num < 2 then we have to take another digit to the right of A [ i ] to make it bigger than A [ i ] . E . g . 214 / 2 -- > 107
if it 's not the first index. E.g 214  then we have to include 0.
for eg . "124" we will not write 064 so if it is the first index just ignore
After every division by 2 the length of string is changed .
if the string reaches to 1 then the str is a power of 2.
Driver code .
Function to check whether a number is power of 2 or not
Driver function
To count number of factors in a number
Initialize count with 0
Increment count for every factor of the given number X .
Return number of factors
Returns number of divisors in array multiplication
Multipliying all elements of the given array .
Calling function which count number of factors of the number
Driver code
Python 3 program to count divisors in array multiplication .
Create a boolean array " isPrime [ 0 . . n ] " and initialize all entries it as true . A value in isPrime [ i ] will finally be false if i is Not a isPrime , else true .
If isPrime [ p ] is not changed , then it is a isPrime
Update all multiples of p
Print all isPrime numbers
Returns number of divisors in array multiplication
Find all prime numbers smaller than the largest element .
Find counts of occurrences of each prime factor
Compute count of all divisors using counts prime factors .
Driver code
Python3 program for the above approach
Function to generate prime numbers in the given range [ L , R ]
Store all value in the range
Erase 1 as its non - prime
Perform Sieve of Eratosthenes
Find current multiple
Erase as it is a non - prime
Increment multiple
Function to print all the prime pairs in the given range that differs by K
Generate all prime number
Traverse the Map M
If it . first & ( it . first + K ) is prime then print this pair
Driver Code
Given range
Given K
Function Call
Function to find the Nth Enneacontahexagon Number
Driver Code
Function to find the two composite numbers
Driver code
Function to find number of unordered pairs
Maximum element from the array
Array to store the frequency of each element
Stores the number of unordered pairs
Store the frequency of each element
Find the number of unordered pairs
If the number j divisible by ith element is present in the array
If the ith element of the array has frequency more than one
Driver code
calculate Nth term of given series
Driver code
Return n - th number in series made of 3 and 5
create an array of size ( n + 1 )
If i is odd
Driver code
function to calculate Nth term of series
By using above formula
get the value of N
Calculate and print the Nth term
Function to print the series
Calculating and printing first term
Computing and printing remaining terms
Find current term using previous terms We increment power of X by 1 , decrement power of A by 1 and compute nCi using previous term by multiplying previous term with ( n - i + 1 ) / i
Driver Code
Python program to check whether the number is divisible by 8 or not using bitwise operator
function to check number is div by 8 or not using bitwise operator
driver code
Function to calculate the average of even numbers
count even numbers
store the sum of even numbers
driver function
Function to calculate the average of even numbers
Driver function
Recursive function to return gcd of a and b
Everything divides 0
base case
a is greater
function to find largest coprime divisor
divisor code
Returns count of numbers with k as last digit .
Driver Program
Python3 implementation to print first N Taxicab ( 2 ) numbers
Starting from 1 , check every number if it is Taxicab until count reaches N .
Try all possible pairs ( j , k ) whose cube sums can be i .
Taxicab ( 2 ) found
Driver code
A optimized school method based Python program to check if a number is composite .
Corner cases
This is checked so that we can skip middle five numbers in below loop
Driver Program to test above function
function to check if a number is prime or not
Corner case
Check from 2 to n - 1
Find prime number greater than a number
find prime greater than n
check if num is prime
Increment num
To find number to be added so sum of array is prime
To find sum of array elements
If sum is already prime return 0
To find prime number greater than sum
Return difference of sum and num
Driver code
function to calculate factorial
function to calculate sum of divisor
Returns sum of divisors of n !
Driver Code
allPrimes [ ] stores all prime numbers less than or equal to n .
Fills above vector allPrimes [ ] for a given n
Create a boolean array " prime [ 0 . . n ] " and initialize all entries it as true . A value in prime [ i ] will finally be false if i is not a prime , else true .
Loop to update prime [ ]
If prime [ p ] is not changed , then it is a prime
Update all multiples of p
Store primes in the vector allPrimes
Function to find all result of factorial number
Initialize result
find exponents of all primes which divides n and less than n
Current divisor
Find the highest power ( stored in exp ) ' ▁ ▁ of ▁ allPrimes [ i ] ▁ that ▁ divides ▁ n ▁ using ▁ ▁ Legendre ' s formula .
Using the divisor function to calculate the sum
return total divisors
Driver Code
Return true if n is pandigit else return false .
Checking length is less than base
Traversing each digit of the number .
If digit is integer
If digit is alphabet
Checking hash array , if any index is unmarked .
Driver Code
Function to find minimum number of given operations to convert m to n
only way is to do - 1 ( m - n ) : times
not possible
n is greater and n is odd
perform ' - 1' on m ( or + 1 on n ) :
n is even
perform ' * 2' on m ( or n / 2 on n ) :
Driver code
Python3 program to find Seed of a number
Stores product of digits of x in prodDig [ x ]
If x has single digit
If digit product is already computed
If digit product is not computed before .
Prints all seeds of n
Find all seeds using prodDig [ ]
If there was no seed
Print seeds
Driver code
Python 3 program to find integer having maximum number of prime factor in first N natural numbers .
Return smallest number having maximum prime factors .
Sieve of eratosthenes method to count number of prime factors .
Finding number having maximum number of prime factor .
Driver Code
function compute sum all sub - array
computing sum of subarray using formula
return all subarray sum
driver program
Python3 program to find highest power of 2 smaller than or equal to n .
If i is a power of 2
Driver code
Python3 program to find pairs that can represent the given number as sum of two cubes
Function to find pairs that can represent the given number as sum of two cubes
find cube root of n
create a array of size of size 'cubeRoot
for index i , cube [ i ] will contain i ^ 3
Find all pairs in above sorted array cube [ ] whose sum is equal to n
Driver code
Function to find pairs that can represent the given number as sum of two cubes
Find cube root of n
Create an empty map
Consider all pairs such with values less than cuberoot
Find sum of current pair ( x , y )
Do nothing if sum is not equal to given number
If sum is seen before , we found two pairs
If sum is seen for the first time
Driver code
python3 program to find the minimum difference between any two terms of two tables
Utility function to find GCD of a and b
Returns minimum difference between any two terms of shifted tables of ' a ' and ' b ' . ' x ' is shift in table of ' a ' and ' y ' is shift in table of ' b ' .
Calculate gcd of a nd b
Calculate difference between x and y
Driver Code
A O ( sqrt ( n ) ) java program that prints all divisors in sorted order
Method to print the divisors
List to store half of the divisors
Check if divisors are equal
Otherwise print both
The list will be printed in reverse
Driver method
A O ( sqrt ( n ) ) program that prints all divisors in sorted order
Function to print the divisors
Driver Code
method to print the divisors
Driver method
A Better ( than Naive ) Solution to find all divisiors
method to print the divisors
Note that this loop runs till square root
If divisors are equal , print only one
Otherwise print both
Driver method
Python 3 program for implementation of Sieve of Atkin
2 and 3 are known to be prime
Initialise the sieve array with False values
Mark sieve [ n ] is True if one of the following is True : a ) n = ( 4 * x * x ) + ( y * y ) has odd number of solutions , i . e . , there exist odd number of distinct pairs ( x , y ) that satisfy the equation and n % 12 = 1 or n % 12 = 5. b ) n = ( 3 * x * x ) + ( y * y ) has odd number of solutions and n % 12 = 7 c ) n = ( 3 * x * x ) - ( y * y ) has odd number of solutions , x > y and n % 12 = 11
Main part of Sieve of Atkin
Mark all multiples of squares as non - prime
Print primes using sieve [ ]
Driver Code
Python3 program to check if a point lies inside a circle or not
Compare radius of circle with distance of its center from given point
Driver Code
Utility function to evaluate a simple expression with one operator only .
This function evaluates all possible values and returns a list of evaluated values .
To store result ( all possible evaluations of given expression ' expr ' )
If there is only one character , it must be a digit ( or operand ) , return it .
If there are only three characters , middle one must be operator and corner ones must be operand
every i refers to an operator
l refers to all the possible values in the left of operator 'expr[i]
r refers to all the possible values in the right of operator 'expr[i]
Take above evaluated all possible values in left side of 'i
Take above evaluated all possible values in right side of 'i
Calculate value for every pair and add the value to result .
Driver Code
python program to check if a given number is lucky
This function returns true if n is lucky
Create an array of size 10 and initialize all elements as false . This array is used to check if a digit is already seen or not .
Traverse through all digits of given number
Find the last digit
If digit is already seen , return false
Mark this digit as seen
REmove the last digit from number
Driver program to test above function .
Python3 program to print squares of first ' n ' natural numbers wothout using * , / and -
Initialize ' square ' and first odd number
Calculate and print squares
Print square
Update ' square ' and 'odd
Driver Code
Python 3 program to reverse digits of a number
Recursive function to reverse digits of num
Driver Code
Recursive function that find the minimum value after exclusive - OR
Condition if ref size is zero or bit is negative then return 0
Condition if current bit is off then push current value in curr_off vector
Condition if current bit is on then push current value in curr_on vector
Condition if curr_off is empty then call recursive function on curr_on vector
Condition if curr_on is empty then call recursive function on curr_off vector
Return the minimum of curr_off and curr_on and add power of 2 of current bit
Function that print the minimum value after exclusive - OR
Pushing values in vector
Printing answer
Driver Code
Function to return the count of elements which are equal to the XOR of the next two elements
To store the required count
For every element of the array such that it has at least two elements appearing after it in the array
If current element is equal to the XOR of the next two elements in the array
Driver code
Function to return the count
Initialise result
Pick 1 st element of the triplet
Pick 2 nd element of the triplet
Pick 3 rd element of the triplet
Taking xor in the first subarray
Taking xor in the second subarray
If both xor is equal
Driver Code
Function Calling
Python3 implementation of the approach
Adjacency list
bit : bit array i and j are starting and ending index INCLUSIVE
bit : bit array n : size of bit array i is the index to be updated diff is ( new_val - old_val )
DFS function to find ideal pairs
Function for initialisation
Function to add an edge
Function to find number of ideal pairs
Find root of the tree
Driver code
Add edges
Function call
function to find bitwise subsets Efficient approach
Driver Code
function to check recursively if the number is divisible by 17 or not
if n = 0 or n = 17 then yes
if n is less then 17 , not divisible by 17
reducing the number by floor ( n / 16 ) - n % 16
driver code to check the above function
Python3 program to find largest number smaller than equal to n with m set bits then m - 1 0 bits .
Returns largest number with m set bits then m - 1 0 bits .
Start with 2 bits .
initial answer is 1 which meets the given condition
check for all numbers
compute the number
if less then N
increment m to get the next number
Driver Code
Simple Python3 program to find MSB number for given n .
Driver code
Python program to find MSB number for given n .
Suppose n is 273 ( binary is 100010001 ) . It does following 100010001 | 010001000 = 110011001
This makes sure 4 bits ( From MSB and including MSB ) are set . It does following 110011001 | 001100110 = 111111111
Increment n by 1 so that there is only one set bit which is just before original MSB . n now becomes 1000000000
Return original MSB after shifting . n now becomes 100000000
Driver code
Python 3 code for counting trailing zeros in binary representation of a number
Driver Code
Python3 code for counting trailing zeros in binary representation of a number
Map a bit value mod 37 to its position
Only difference between ( x and - x ) is the value of signed magnitude ( leftmostbit ) negative numbers signed bit is 1
Driver Code
Python program to evaluate ceil ( 7 n / 8 ) without using * and /
Note the inner bracket here . This is needed because precedence of ' - ' operator is higher than '<<
Driver program to test above function
Python3 program to evaluate 7 n / 8 without using * and /
Step 1 ) First multiply number by 7 i . e . 7 n = ( n << 3 ) - n Step 2 ) Divide result by 8
Driver code
Function to find the maximum size of group of palindrome numbers having difference between maximum and minimum element at most K
Stores the all the palindromic numbers in the range [ L , R ]
Traverse over the range [ L , R ]
If i is a palindrome
Append the number in the list
Stores count of maximum palindromic numbers
Iterate each element in the list
Calculate rightmost index in the list < current element + K
Check if there is rightmost index from the current index
Return the count
Function to search the rightmost index of given number
Store the rightmost index
Calculate the mid
If given number <= num
Assign ans = mid
Update low
Update high
return ans
Function to check if the given number is palindrome or not
Generate reverse of the given number
If n is a palindrome
Driver Code
Function to find the maximum sum by subtracting same value from all elements of a Subarray
Stores previous smaller element
Stores next smaller element
Calculate contribution of each element
Return answer
Function to generate previous smaller element for each array element
The first element has no previous smaller
Stack to keep track of elements that have occurred previously
Push the first index
Pop all the elements until the previous element is smaller than current element
Store the previous smaller element
Push the index of the current element
Return the array
Function to generate next smaller element for each array element
Stack to keep track of elements that have occurring next
Iterate in reverse order for calculating next smaller
Pop all the elements until the next element is smaller than current element
Store the next smaller element
Push the index of the current element
Return the array
Driver code
''This function returns true if contents of arr1[] and arr2[] are same, otherwise false.
This function search for all permutations of pat [ ] in txt [ ]
countP [ ] : Store count of all characters of pattern countTW [ ] : Store count of current window of text
Traverse through remaining characters of pattern
Compare counts of current window of text with counts of pattern [ ]
Add current character to current window
Remove the first character of previous window
Check for the last window in text
Driver code
Function to return the maximized median
Sort the array
If size is even
If size is odd
Driver code
Python3 program to print three numbers in sorted order using max function
Find maximum element
Find minimum element
Driver Code
iterative implementation
Function to sort an array a [ ] of size 'n
find location where selected should be inseretd
Move all elements after location to create space
Driver Code
Function to do insertion sort
Move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position
Driver code to test above
Function to calculate total number of valid permutations
Creating count which is equal to the Total number of characters present and ans that will store the number of unique permutations
Storing frequency of each character present in the string
Adding count of characters by excluding characters equal to current char
Reduce the frequency of the current character and count by 1 , so that it cannot interfere with the calculations of the same elements present to the right of it .
Return ans + 1 ( Because the given string is also a unique permutation )
Driver Code
Recursive function to count number of paths
If we reach bottom or top left , we are have only one way to reach ( 0 , 0 )
Else count sum of both ways
Driver Code
Returns the count of ways we can sum S [ 0. . . m - 1 ] coins to get sum n
If n is 0 then there is 1 solution ( do not include any coin )
If n is less than 0 then no solution exists
If there are no coins and n is greater than 0 , then no solution exist
count is sum of solutions ( i ) including S [ m - 1 ] ( ii ) excluding S [ m - 1 ]
Driver program to test above function
Function to compare two strings ignoring their cases
Convert to uppercase
if strings are equal , return true otherwise false
Function to print the same or not same if strings are equal or not equal
Driver Code
Function to return the converted string after replacing every consonant sequence with its length
To store the resultant string
Checking each character for consonant sequence
Count the length of consonants sequence
Add the length in the string
Add the vowel
Check for the last consonant sequence in the string
Return the resultant string
Driver code
isVowel ( ) is a function that returns true for a vowel and false otherwise .
function to Encrypt the dtring
for each substring
substring of size k
counting number of vowels and consonants
append product to answer
Driver Code
An efficient Python3 implementation of above approach
we are splitting the input based on spaces ( s ) + : this regular expression will handle scenarios where we have words separated by multiple spaces
charAt ( 0 ) will pick only the first character from the string and append to buffer
Driver Code
A utility function generate all string without consecutive 1 'sof size K
print binary string without consecutive 1 's
terminate binary string
if previous character is '1' then we put only 0 at end of string example str = "01" then new string be "000"
if previous character is '0' than we put both '1' and '0' at end of string example str = "00" then new string "001" and "000"
function generate all binary string without consecutive 1 's
Base case
One by one stores every binary string of length K
Generate all Binary string starts with '0
Generate all Binary string starts with '1
Driver code
Function to find the biggest right circular cylinder
side cannot be negative
radius of right circular cylinder
height of right circular cylinder
volume of right circular cylinder
Driver code
Function to calculate Volume of Triangular Pyramid
Function To calculate Volume of Square Pyramid
Function To calculate Volume of Pentagonal Pyramid
Function To calculate Volume of Hexagonal Pyramid
Driver Code
Function for the area
Driver Code
''Python3 program to find number of diagonals in n sided convex polygon
''driver code to test above function
Function to find the maximum area such that it does not contains any hole
Area for all the possible positions of the cut
Find the maximum area among the above rectangles
Driver Code
Function call
Function to find the minimum cost of removing characters to make the string unique
Store the minimum cost required
Create a dictionary to store the maximum cost of removal a character
Create a dictionary to store the total deletion cost of a character
Traverse the string , S
Keep track of maximum cost of each character
Update the maximum deletion cost
Keep track of the total cost of each character
Update the total deletion cost
Traverse through all the unique characters
Keep the maximum cost character and delete the rest
Return the answer
Given string
Given cost array
Function Call
Python3 program for the above approach
Stores divisors for all numbers in the vector divisors
i is the divisor and j is the multiple
Function to compare the closeness of the given target
Function to find the element closest to target in divisors vector
Corner cases
Perform binary search
Check if target is less than the array element then search in left half
Check if target is greater than previous to mid , return closest of two
Repeat for left half
Check if target is greater than mid
Update i
Only single element left after search
Function to print the divisor of N closest to X
Function call to calculate and stores divisors of all numbers in a vector
Stores the closest value to target
Print the answer
Driver Code
Given N & X
Function Call
Function to count maximum matched elements from the arrays A [ ] and B [ ]
Stores position of elements of array A [ ] in the array B [ ]
Keep track of difference between the indices
Traverse the array A [ ]
Traverse the array B [ ]
If difference is negative , add N to it
Keep track of the number of shifts required to place elements at same indices
Return the max matches
Driver Code
Returns the count of matched elements
Function to check if all elements of the board [ ] [ ] array store value in the range [ 1 , 9 ]
Traverse board [ ] [ ] array
Function to check if the solution of sudoku puzzle is valid or not
Check if all elements of board [ ] [ ] stores value in the range [ 1 , 9 ]
Stores unique value from 1 to N
Traverse each row of the given array
Initialize unique [ ] array to false
Traverse each column of current row
Stores the value of board [ i ] [ j ]
Check if current row stores duplicate value
Traverse each column of the given array
Initialize unique [ ] array to false
Traverse each row of current column
Stores the value of board [ j ] [ i ]
Check if current column stores duplicate value
Traverse each block of size 3 * 3 in board [ ] [ ] array
j stores first column of each 3 * 3 block
Initialize unique [ ] array to false
Traverse current block
Stores row number of current block
Stores column number of current block
Stores the value of board [ X ] [ Y ]
Check if current block stores duplicate value
If all conditions satisfied
Driver Code
Function to check if a number is Palindrome or not here i is the starting index and j is the last index of the subarray
If the integer at i is not equal to j then the subarray is not palindrome
Otherwise
all a [ i ] is equal to a [ j ] then the subarray is palindrome
Function to find a subarray whose concatenation forms a palindrome and return its starting index
Iterating over subarray of length k and checking if that subarray is palindrome
If no subarray is palindrome
Driver code
Function to check if the man crosses previous visited coordinate or not
Stores the count of crossed vertex
Stores ( x , y ) coordinates
The coordinates for the origin
Iterate over the string
Condition to increment X or Y co - ordinates respectively
Check if ( x , y ) is already visited
Print the result
Given string
Function call
Python3 program to implement the above approach
Function to find the maximum width of . he tree using level order traversal
Store the edges of the tree
Stores maximum width of the tree
Stores the nodes of each level
Insert root node
Perform level order traversal on the tree
Stores the size of the queue
Update maximum width
Push the nodes of the next level and pop the elements of the current level
Get element from the front the Queue
Push all nodes of the next level .
Return the result .
Driver Code
Constructed tree is : 1 / | \ 2 - 1 3 / \ \ 4 5 8 / / | \ 2 6 12 7
Pthon3 Program to implement the above approach
Stores if an index is a prime / non - prime value
Stores the prime
Function to generate all prime numbers
If current element is prime
Set all its multiples non - prime
Store all prime numbers
Function to find the closest prime to a particular number
Applying binary search on primes vector
If the prime added makes the elements equal
Return this as the closest prime
If the array remains non - decreasing
Search for a bigger prime number
Otherwise
Check if a smaller prime can make array non - decreasing or not
Return closest number
Function to find the minimum cost
Find all primes
Store the result
Iterate over the array
Current element is less than the previous element
Find the closest prime which makes the array non decreasing
Add to overall cost
Update current element
Return the minimum cost
Driver Code
Given array
Function Call
Function to return ways to split a string into three parts with the equal number of 0
Store total count of 0 s
Count total no . of 0 s character in given string
If total count of 0 character is not divisible by 3
Initialize map to store frequency of k
Traverse string to find ways to split string
Increment count if 0 appears
Increment result if sum equal to 2 * k and k exists in map
Insert sum in map
Return result
Driver Code
Given string
Function call
Function to calculate the number of ways to split
Calculating the total number of zeros
Case1 If total count of zeros is not divisible by 3
Case2 if total count of zeros is zero
Number of zeros in each substring
Initialising zero to the number of ways for first and second cut
Initializing the count
Traversing from the beginning
Incrementing the count if the element is '0
Incrementing the ways for the 1 st cut if count is equal to zeros required in each substring
Incrementing the ways for the 2 nd cut if count is equal to 2 * ( zeros required in each substring )
Total number of ways to split is multiplication of ways for the 1 st and 2 nd cut
Driver code
Function call
Function to check if it is possible to transform start to end
Check the sequence of A , B in both strings str1 and str2
If both the strings are not equal
Traverse the strings
Check for indexes of A and B
Driver Code
Function call
Function to return the length of the longest substring having equal number of vowel and consonant
Generate the array
Initialize variable to store result
Stores the sum of subarray
Map to store indices of the sum
Loop through the array
If sum is 0
Count of vowels and consonants are equal
Update the maximum length of substring in HashMap
Store the index of the sum
Return the maximum length of required substring
Driver Code
Python3 program to implement the above approach
Stores the accessible directions
Function to find the minimum distance from a given cell to all other cells in the matrix
Stores the accessible cells from current cell
Insert pair ( x , y )
Iterate untill queue is empty
Extract the pair
Pop them
Checking boundary condition
If the cell is not visited
Assign the minimum distance
Insert the traversed neighbour into the queue
Driver Code
Print the required distances
Function that returns the minimum number of flips to convert the s into a concatenation of K - length sub - string
Stores the result
Iterate through string index
Stores count of 0 s & 1 s
Iterate making K jumps
Count 0 's
Count 1 's
Add minimum flips for index i
Return minimum number of flips
Driver code
Function to get the missing element
For maximum element in the array
For minimum Element in the array
For xor of all elements
Common difference of AP series
Find maximum and minimum element
Calculating common difference
Calculate the XOR of all elements
Perform XOR with actual AP series resultant x will be the ans
Return the missing element
Driver Code
Given array
Function Call
Print the missing element
Function to prints kth sub - string
Total sub - strings possible
If k is greater than total number of sub - strings
To store number of sub - strings starting with ith character of the string
Compute the values
substring [ i - 1 ] is added to store the cumulative sum
Binary search to find the starting index of the kth sub - string
To store the ending index of the kth sub - string
Print the sub - string
Driver code
Function to return the lower insertion point of an element in a sorted array
Base cases
Final check for the remaining elements which are < X
Driver code
Returns count of required positions
horizontal 1D array
vertical 1D array
iterating for all possible i
checking if j is integer
checking if j lies b / w 1 to N
iterating for all possible j
checking if i is integer
checking if i lies b / w 1 to M
Driver Code
Python3 program to make array sorted
Function to check whether there is any swappable element present to make the first array sorted
wrongIdx is the index of the element which is making the first array unsorted
Find the maximum element which satisfies the above mentioned neighboring conditions
if res is true then swap the element and make the first array sorted
Function to print the sorted array if elements are swapped .
Driver code
Function to find the middle of three numbers
Compare each three number to find middle number . Enter only if a > b
Decided a is not greater than b .
Driver Code
Function to find the transpose of the matrix mat [ ]
Stores the transpose of matrix mat [ ] [ ]
Traverse each row of the matrix
Traverse each column of the matrix
Transpose matrix elements
Function to sort the given matrix in row wise manner
Traverse the row
Row - Wise Sorting
Function to print the matrix in column wise sorted manner
Function call to find transpose of the the matrix mat [ ] [ ]
Sorting the matrix row - wise
Calculate transpose of B [ ] [ ]
Print the matrix mat [ ] [ ]
Driver Code
Input
Function call to print the matrix in column wise sorted manner
Function to find the largest area when a series of horizontal & vertical bars are removed
Stores all bars
Insert horizontal bars
Insert vertictal bars
Remove horizontal separators from s1
Remove vertical separators from s2
Stores left out horizontal and vertical separators
Sort both list in ascending order
Find maximum difference of neighbors of list1
Find max difference of neighbors of list2
Print largest volume
Driver code
Given value of N & M
Given arrays
Function call to find the largest area when a series of horizontal & vertical bars are removed
Function to check if array , A [ ] can be converted into sorted array by swapping ( A [ i ] , A [ j ] ) if B [ i ] not equal to B [ j ]
Stores if array A [ ] is sorted in descending order or not
Traverse the array A [ ]
If A [ i ] is greater than A [ i + 1 ]
Update flag
If array is sorted in ascending order
count = 2 : Check if 0 s and 1 s both present in the B [ ]
Traverse the array
If current element is 0
Update count
Traverse the array B [ ]
If current element is 1
If both 0 s and 1 s are present in the array
Input array A [ ]
Input array B [ ]
Function call
If true , print YES
Else print NO
Function to find the minimum number of steps to make A > B
If all character are same and M <= N
If there lies any character in B which is greater than B [ 0 ]
If there lies any character in A which is smaller than A [ 0 ]
If there lies a character which is in A and greater than A [ 0 ]
If there lies a character which is in B and less than B [ 0 ]
Otherwise
Driver Code
Python3 program for the above approach
Variables which represent the size of the array
Stores the results
Function to return the maximum possible sum
Stores the count of arrays processed
If more than two arrays have been processed
If an already computed subproblem occurred
Explore all the possible pairs
Recursive function call
Memoize the maximum
Returning the value
Function to return the maximum sum of products of pairs possible
Initialising the dp array to - 1
Sort the arrays in descending order
Driver Code
Function to find lexicographically largest triplet that forms a triangle in the given array
Sort the array
Iterate from the end of the array
If the triplet forms a triangle
If triplet found
Print the triplet
Otherwise
Driver Code
Function to return the count of all pairs having minimal absolute difference
Stores the count of pairs
Sort the array
Stores the minimum difference between adjacent pairs
Update the minimum difference between pairs
Increase count of pairs with difference equal to that of minimum difference
Return the final count
Driver code
Given array arr [ ]
Function call
Initialise maximum possible length of subsequence
Store elements to compare max_length with its size and change the value of max_length accordingly
Store the elements of the longest subsequence
Function to find the length of longest subsequence
Update max_length
Store the subsequence elements
Recursively proceed with obtained sum
poping elements from back of vector store
if sum > 0 then we don 't  required thatsubsequence  so return and continue  with earlier elements
Sort the given array
Traverse the array
If max_length is already greater than or equal than remaining length
Driver code
Function to sort array
Check if possible to sort array
Swapping to bring element at required position Bringing at least one element at correct position
Tracing changes in Array
Print the sorted array
If not possible to sort
Driver code
Function to return K such that changing all elements greater than K to K will make array sum N otherwise return - 1
Sorting the array in increasing order
Loop through all the elements of the array
Checking if sum of array equals N
Driver code
Function that returns True if there exists a triplet with sum x
Sorting arrays such that a represents smallest array
Iterating the smallest array
Two pointers on second and third array
If a valid triplet is found
Driver code
Utility function to print the contents of an array
A comparison function that return true if ' AB ' is smaller than ' BA ' when we concatenate two numbers ' A ' and ' B ' For example , it will return true if we pass 12 and 24 as arguments . This function will be used by sort ( ) function
Convert first number to string format
Convert second number to string format
Check if ' AB ' is smaller or ' BA ' and return bool value since comparison operator ' < = ' returns true or false
Function to print the arrangement with the smallest value
If we pass the name of the comparison function it will sort the array according to the compare function
Print the sorted array
Driver code
Python3 program for modifying Selection Sort so that it becomes stable .
Traverse through all array elements
Find the minimum element in remaining unsorted array
Move minimum element at current i
Driver Code
Check whether any permutation exists which satisfy the condition .
Sort the array a [ ] in decreasing order .
Sort the array b [ ] in increasing order .
Checking condition on each index .
Driver code
Function to count setbits
Function to sort By SetBitCount
Iterate over all values and insert into multimap
Driver Code
Function to check if it is possible to reach the end of the binary string using the given jumps
Stores the DP states
Initial state
Stores count of indices from which it is possible to reach index i
Traverse the given string
Update the values of pre accordingly
If the jump size is out of the range [ L , R ]
Return answer
Driver Code
Recursive function to find all the possible breaking of arrays o subarrays and find the maximum Bitwise XOR
If the value of N is 0
Stores the result if the new group is formed with the first element as arr [ i ]
Stores if the result if the arr [ i ] is included in the last group
Returns the maximum of x and y
Function to find the maximum possible Bitwise XOR of all possible values of the array after breaking the arrays o subarrays
Return the result
Driver Code
Python3 program to implement the above approach
Keep track of visited nodes
Function to construct a tree such that there are no two adjacent nodes with the same weight
If minimum and maximum elements are equal , i . e . array contains one distinct element
Tree cannot be constructed
Otherwise
Tree can be constructed
Choose weights [ 0 ] as root
First Node is visited
Traverse the array
Otherwise , make an edge
Mark this node as visited
Find a weight not same as the root & make edges with that node
Join non - roots with remaining nodes
Check if current node ' s ▁ weight ▁ ▁ is ▁ same ▁ as ▁ root ▁ node ' s weight and if it is not visited or not
Driver Code
Function Call
Python3 program for the above approach
Function to find minimum cost to convert given string into string of K length same substring
Stores length of string
Stores the minimum cost
Traverse left substring of k length
Stores the frequency
Stores minimum cost for sequence of S [ i ] % k indices
Check for optimal character
Find sum of distance ' a ' + ch from character S [ i ] % k indices
Choose minimum cost for each index i
Increment ans
Print minimum cost to convert string
Given string S
Function call
Function to split the first N natural numbers into two sets having minimum absolute difference of their sums
Driver Code
Python3 program for the above approach
Adjacency list to store edges
Add an edge between U and V in tree
Edge from u to v
Edge from V to U
Function that finds the maximum matching of the DFS
Go further as we are not allowed to go towards its parent
If U and its parent P is not taken then we must take & mark them as taken
Increment size of edge set
Function to find the maximum matching in a graph
Taking 1 as a root of the tree
Print maximum Matching
Driver Code
Joining edge between two nodes in tree
Function Call
Python3 program to implement the above approach
Function to calculate and return the minimum cost required to swap two arrays
Return the total minimum cost
Driver Code
Function to print the values stored in vector arr
Traverse the vector arr
Recursive function to prdifferent ways in which N can be written as a sum of at 2 or more positive integers
If n is zero then prthis ways of breaking numbers
Start from previous element in the representation till n
Include current element from representation
Call function again with reduced sum
Backtrack to remove current element from representation
Driver Code
Given sum N
To store the representation of breaking N
Function Call
Function to count maximum subsequence
Stores the frequency of array elements
Stores max frequency
Update max subsequence
Print the count
Driver Code
Function to print the arrangement of characters
Stores frequency of characters
Count the character having frequency K
Count the character having frequency greater than K and not equal to 2 K
Case 1
Case 2
Case 3
If all cases fail
Driver Code
Function to check if two items can be selected from two different categories without exceeding the total price
Loop to choose two different pairs using two nested loops
Condition to check if the price of these two elements is less than S
Driver Code
Function Call
Function to return the maximum sum of a + b satisfying the given condition
Consider all possible pairs and check the sum divides product property
To find the largest factor k
Check if the product is divisible by the sum
Storing the maximum sum in the max_sum variable
Return the max_sum value
Driver code
Function to return the encrypted string
Number of times the current character will be repeated
Repeat the current character in the encrypted string
Driver code
Function to return required minimum difference
finding minimum and maximum values
returning minimum possible difference
Driver program
function to return the answer
Python3 program to count swaps required to balance string
Stores total number of left and right brackets encountered
Swap stores the number of swaps required imbalance maintains the number of imbalance pair
Increment count of left bracket
Swaps count is last swap count + total number imbalanced brackets
Imbalance decremented by 1 as it solved only one imbalance of left and right
Increment count of right bracket
Imbalance is reset to current difference between left and right brackets
Driver code
Function to find the length of the longest subsequence of pairs whose first element is increasing and second is decreasing
dp [ i ] : Stores the longest subsequence upto i
Base case
When the conditions hold
Finally , prthe required answer
Driver Code
Given Input
Function Call
Function to calculate the total number of ways to have sum N
Base Case
Return already stored result
Recur for all 6 states
Return the result
Driver Code
Given sum N
Initialize the dp array
Function Call
Function to calculate the total number of ways to have sum N
Initialize dp array
Iterate over all the possible intermediate values to reach N
Calculate the sum for all 6 faces
Print total number of ways
Driver Code
Given sum N
Function call
Python3 implementation to split the string into minimum number of parts such that each part is also present in the another string
Node of Trie
Function to insert a node in the Trie Data Structure
Inserting every character from idx till end to string into trie
If there is no edge corresponding to the ith character , then make a new node
Function to find the minimum number of parts such that each part is present into another string
Making a new trie
Inserting every substring of S2 in trie
Creating dp array and init it with infinity
Base Case
Starting the cut from ith character taking temporary node pointer for checking whether the substring [ i , j ) is present in trie of not
If the jth character is not in trie we 'll break
Updating the the ending of jth character with dp [ i ] + 1
Descending the trie pointer
Answer not possible
Driver Code
Function to find the largest square in the matrix such that it contains atmost K 1 's 
Precomputing the countDP prefix sum of the matrix
Loop to solve Queries
Calculating the maximum possible distance of the centre from edge
Count total number of 1 s in the sub square considered
If the count is less than or equals to the maximum move to right half
Driver Code
